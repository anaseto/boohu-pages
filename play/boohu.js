"use strict";
(function() {

Error.stackTraceLimit = Infinity;

var $global, $module;
if (typeof window !== "undefined") { /* web page */
  $global = window;
} else if (typeof self !== "undefined") { /* web worker */
  $global = self;
} else if (typeof global !== "undefined") { /* Node.js */
  $global = global;
  $global.require = require;
} else { /* others (e.g. Nashorn) */
  $global = this;
}

if ($global === undefined || $global.Array === undefined) {
  throw new Error("no global object found");
}
if (typeof module !== "undefined") {
  $module = module;
}

var $packages = {}, $idCounter = 0;
var $keys = function(m) { return m ? Object.keys(m) : []; };
var $flushConsole = function() {};
var $throwRuntimeError; /* set by package "runtime" */
var $throwNilPointerError = function() { $throwRuntimeError("invalid memory address or nil pointer dereference"); };
var $call = function(fn, rcvr, args) { return fn.apply(rcvr, args); };
var $makeFunc = function(fn) { return function() { return $externalize(fn(this, new ($sliceType($jsObjectPtr))($global.Array.prototype.slice.call(arguments, []))), $emptyInterface); }; };
var $unused = function(v) {};

var $mapArray = function(array, f) {
  var newArray = new array.constructor(array.length);
  for (var i = 0; i < array.length; i++) {
    newArray[i] = f(array[i]);
  }
  return newArray;
};

var $methodVal = function(recv, name) {
  var vals = recv.$methodVals || {};
  recv.$methodVals = vals; /* noop for primitives */
  var f = vals[name];
  if (f !== undefined) {
    return f;
  }
  var method = recv[name];
  f = function() {
    $stackDepthOffset--;
    try {
      return method.apply(recv, arguments);
    } finally {
      $stackDepthOffset++;
    }
  };
  vals[name] = f;
  return f;
};

var $methodExpr = function(typ, name) {
  var method = typ.prototype[name];
  if (method.$expr === undefined) {
    method.$expr = function() {
      $stackDepthOffset--;
      try {
        if (typ.wrapped) {
          arguments[0] = new typ(arguments[0]);
        }
        return Function.call.apply(method, arguments);
      } finally {
        $stackDepthOffset++;
      }
    };
  }
  return method.$expr;
};

var $ifaceMethodExprs = {};
var $ifaceMethodExpr = function(name) {
  var expr = $ifaceMethodExprs["$" + name];
  if (expr === undefined) {
    expr = $ifaceMethodExprs["$" + name] = function() {
      $stackDepthOffset--;
      try {
        return Function.call.apply(arguments[0][name], arguments);
      } finally {
        $stackDepthOffset++;
      }
    };
  }
  return expr;
};

var $subslice = function(slice, low, high, max) {
  if (high === undefined) {
    high = slice.$length;
  }
  if (max === undefined) {
    max = slice.$capacity;
  }
  if (low < 0 || high < low || max < high || high > slice.$capacity || max > slice.$capacity) {
    $throwRuntimeError("slice bounds out of range");
  }
  var s = new slice.constructor(slice.$array);
  s.$offset = slice.$offset + low;
  s.$length = high - low;
  s.$capacity = max - low;
  return s;
};

var $substring = function(str, low, high) {
  if (low < 0 || high < low || high > str.length) {
    $throwRuntimeError("slice bounds out of range");
  }
  return str.substring(low, high);
};

var $sliceToArray = function(slice) {
  if (slice.$array.constructor !== Array) {
    return slice.$array.subarray(slice.$offset, slice.$offset + slice.$length);
  }
  return slice.$array.slice(slice.$offset, slice.$offset + slice.$length);
};

var $decodeRune = function(str, pos) {
  var c0 = str.charCodeAt(pos);

  if (c0 < 0x80) {
    return [c0, 1];
  }

  if (c0 !== c0 || c0 < 0xC0) {
    return [0xFFFD, 1];
  }

  var c1 = str.charCodeAt(pos + 1);
  if (c1 !== c1 || c1 < 0x80 || 0xC0 <= c1) {
    return [0xFFFD, 1];
  }

  if (c0 < 0xE0) {
    var r = (c0 & 0x1F) << 6 | (c1 & 0x3F);
    if (r <= 0x7F) {
      return [0xFFFD, 1];
    }
    return [r, 2];
  }

  var c2 = str.charCodeAt(pos + 2);
  if (c2 !== c2 || c2 < 0x80 || 0xC0 <= c2) {
    return [0xFFFD, 1];
  }

  if (c0 < 0xF0) {
    var r = (c0 & 0x0F) << 12 | (c1 & 0x3F) << 6 | (c2 & 0x3F);
    if (r <= 0x7FF) {
      return [0xFFFD, 1];
    }
    if (0xD800 <= r && r <= 0xDFFF) {
      return [0xFFFD, 1];
    }
    return [r, 3];
  }

  var c3 = str.charCodeAt(pos + 3);
  if (c3 !== c3 || c3 < 0x80 || 0xC0 <= c3) {
    return [0xFFFD, 1];
  }

  if (c0 < 0xF8) {
    var r = (c0 & 0x07) << 18 | (c1 & 0x3F) << 12 | (c2 & 0x3F) << 6 | (c3 & 0x3F);
    if (r <= 0xFFFF || 0x10FFFF < r) {
      return [0xFFFD, 1];
    }
    return [r, 4];
  }

  return [0xFFFD, 1];
};

var $encodeRune = function(r) {
  if (r < 0 || r > 0x10FFFF || (0xD800 <= r && r <= 0xDFFF)) {
    r = 0xFFFD;
  }
  if (r <= 0x7F) {
    return String.fromCharCode(r);
  }
  if (r <= 0x7FF) {
    return String.fromCharCode(0xC0 | r >> 6, 0x80 | (r & 0x3F));
  }
  if (r <= 0xFFFF) {
    return String.fromCharCode(0xE0 | r >> 12, 0x80 | (r >> 6 & 0x3F), 0x80 | (r & 0x3F));
  }
  return String.fromCharCode(0xF0 | r >> 18, 0x80 | (r >> 12 & 0x3F), 0x80 | (r >> 6 & 0x3F), 0x80 | (r & 0x3F));
};

var $stringToBytes = function(str) {
  var array = new Uint8Array(str.length);
  for (var i = 0; i < str.length; i++) {
    array[i] = str.charCodeAt(i);
  }
  return array;
};

var $bytesToString = function(slice) {
  if (slice.$length === 0) {
    return "";
  }
  var str = "";
  for (var i = 0; i < slice.$length; i += 10000) {
    str += String.fromCharCode.apply(undefined, slice.$array.subarray(slice.$offset + i, slice.$offset + Math.min(slice.$length, i + 10000)));
  }
  return str;
};

var $stringToRunes = function(str) {
  var array = new Int32Array(str.length);
  var rune, j = 0;
  for (var i = 0; i < str.length; i += rune[1], j++) {
    rune = $decodeRune(str, i);
    array[j] = rune[0];
  }
  return array.subarray(0, j);
};

var $runesToString = function(slice) {
  if (slice.$length === 0) {
    return "";
  }
  var str = "";
  for (var i = 0; i < slice.$length; i++) {
    str += $encodeRune(slice.$array[slice.$offset + i]);
  }
  return str;
};

var $copyString = function(dst, src) {
  var n = Math.min(src.length, dst.$length);
  for (var i = 0; i < n; i++) {
    dst.$array[dst.$offset + i] = src.charCodeAt(i);
  }
  return n;
};

var $copySlice = function(dst, src) {
  var n = Math.min(src.$length, dst.$length);
  $copyArray(dst.$array, src.$array, dst.$offset, src.$offset, n, dst.constructor.elem);
  return n;
};

var $copyArray = function(dst, src, dstOffset, srcOffset, n, elem) {
  if (n === 0 || (dst === src && dstOffset === srcOffset)) {
    return;
  }

  if (src.subarray) {
    dst.set(src.subarray(srcOffset, srcOffset + n), dstOffset);
    return;
  }

  switch (elem.kind) {
  case $kindArray:
  case $kindStruct:
    if (dst === src && dstOffset > srcOffset) {
      for (var i = n - 1; i >= 0; i--) {
        elem.copy(dst[dstOffset + i], src[srcOffset + i]);
      }
      return;
    }
    for (var i = 0; i < n; i++) {
      elem.copy(dst[dstOffset + i], src[srcOffset + i]);
    }
    return;
  }

  if (dst === src && dstOffset > srcOffset) {
    for (var i = n - 1; i >= 0; i--) {
      dst[dstOffset + i] = src[srcOffset + i];
    }
    return;
  }
  for (var i = 0; i < n; i++) {
    dst[dstOffset + i] = src[srcOffset + i];
  }
};

var $clone = function(src, type) {
  var clone = type.zero();
  type.copy(clone, src);
  return clone;
};

var $pointerOfStructConversion = function(obj, type) {
  if(obj.$proxies === undefined) {
    obj.$proxies = {};
    obj.$proxies[obj.constructor.string] = obj;
  }
  var proxy = obj.$proxies[type.string];
  if (proxy === undefined) {
    var properties = {};
    for (var i = 0; i < type.elem.fields.length; i++) {
      (function(fieldProp) {
        properties[fieldProp] = {
          get: function() { return obj[fieldProp]; },
          set: function(value) { obj[fieldProp] = value; }
        };
      })(type.elem.fields[i].prop);
    }
    proxy = Object.create(type.prototype, properties);
    proxy.$val = proxy;
    obj.$proxies[type.string] = proxy;
    proxy.$proxies = obj.$proxies;
  }
  return proxy;
};

var $append = function(slice) {
  return $internalAppend(slice, arguments, 1, arguments.length - 1);
};

var $appendSlice = function(slice, toAppend) {
  if (toAppend.constructor === String) {
    var bytes = $stringToBytes(toAppend);
    return $internalAppend(slice, bytes, 0, bytes.length);
  }
  return $internalAppend(slice, toAppend.$array, toAppend.$offset, toAppend.$length);
};

var $internalAppend = function(slice, array, offset, length) {
  if (length === 0) {
    return slice;
  }

  var newArray = slice.$array;
  var newOffset = slice.$offset;
  var newLength = slice.$length + length;
  var newCapacity = slice.$capacity;

  if (newLength > newCapacity) {
    newOffset = 0;
    newCapacity = Math.max(newLength, slice.$capacity < 1024 ? slice.$capacity * 2 : Math.floor(slice.$capacity * 5 / 4));

    if (slice.$array.constructor === Array) {
      newArray = slice.$array.slice(slice.$offset, slice.$offset + slice.$length);
      newArray.length = newCapacity;
      var zero = slice.constructor.elem.zero;
      for (var i = slice.$length; i < newCapacity; i++) {
        newArray[i] = zero();
      }
    } else {
      newArray = new slice.$array.constructor(newCapacity);
      newArray.set(slice.$array.subarray(slice.$offset, slice.$offset + slice.$length));
    }
  }

  $copyArray(newArray, array, newOffset + slice.$length, offset, length, slice.constructor.elem);

  var newSlice = new slice.constructor(newArray);
  newSlice.$offset = newOffset;
  newSlice.$length = newLength;
  newSlice.$capacity = newCapacity;
  return newSlice;
};

var $equal = function(a, b, type) {
  if (type === $jsObjectPtr) {
    return a === b;
  }
  switch (type.kind) {
  case $kindComplex64:
  case $kindComplex128:
    return a.$real === b.$real && a.$imag === b.$imag;
  case $kindInt64:
  case $kindUint64:
    return a.$high === b.$high && a.$low === b.$low;
  case $kindArray:
    if (a.length !== b.length) {
      return false;
    }
    for (var i = 0; i < a.length; i++) {
      if (!$equal(a[i], b[i], type.elem)) {
        return false;
      }
    }
    return true;
  case $kindStruct:
    for (var i = 0; i < type.fields.length; i++) {
      var f = type.fields[i];
      if (!$equal(a[f.prop], b[f.prop], f.typ)) {
        return false;
      }
    }
    return true;
  case $kindInterface:
    return $interfaceIsEqual(a, b);
  default:
    return a === b;
  }
};

var $interfaceIsEqual = function(a, b) {
  if (a === $ifaceNil || b === $ifaceNil) {
    return a === b;
  }
  if (a.constructor !== b.constructor) {
    return false;
  }
  if (a.constructor === $jsObjectPtr) {
    return a.object === b.object;
  }
  if (!a.constructor.comparable) {
    $throwRuntimeError("comparing uncomparable type " + a.constructor.string);
  }
  return $equal(a.$val, b.$val, a.constructor);
};

var $min = Math.min;
var $mod = function(x, y) { return x % y; };
var $parseInt = parseInt;
var $parseFloat = function(f) {
  if (f !== undefined && f !== null && f.constructor === Number) {
    return f;
  }
  return parseFloat(f);
};

var $froundBuf = new Float32Array(1);
var $fround = Math.fround || function(f) {
  $froundBuf[0] = f;
  return $froundBuf[0];
};

var $imul = Math.imul || function(a, b) {
  var ah = (a >>> 16) & 0xffff;
  var al = a & 0xffff;
  var bh = (b >>> 16) & 0xffff;
  var bl = b & 0xffff;
  return ((al * bl) + (((ah * bl + al * bh) << 16) >>> 0) >> 0);
};

var $floatKey = function(f) {
  if (f !== f) {
    $idCounter++;
    return "NaN$" + $idCounter;
  }
  return String(f);
};

var $flatten64 = function(x) {
  return x.$high * 4294967296 + x.$low;
};

var $shiftLeft64 = function(x, y) {
  if (y === 0) {
    return x;
  }
  if (y < 32) {
    return new x.constructor(x.$high << y | x.$low >>> (32 - y), (x.$low << y) >>> 0);
  }
  if (y < 64) {
    return new x.constructor(x.$low << (y - 32), 0);
  }
  return new x.constructor(0, 0);
};

var $shiftRightInt64 = function(x, y) {
  if (y === 0) {
    return x;
  }
  if (y < 32) {
    return new x.constructor(x.$high >> y, (x.$low >>> y | x.$high << (32 - y)) >>> 0);
  }
  if (y < 64) {
    return new x.constructor(x.$high >> 31, (x.$high >> (y - 32)) >>> 0);
  }
  if (x.$high < 0) {
    return new x.constructor(-1, 4294967295);
  }
  return new x.constructor(0, 0);
};

var $shiftRightUint64 = function(x, y) {
  if (y === 0) {
    return x;
  }
  if (y < 32) {
    return new x.constructor(x.$high >>> y, (x.$low >>> y | x.$high << (32 - y)) >>> 0);
  }
  if (y < 64) {
    return new x.constructor(0, x.$high >>> (y - 32));
  }
  return new x.constructor(0, 0);
};

var $mul64 = function(x, y) {
  var high = 0, low = 0;
  if ((y.$low & 1) !== 0) {
    high = x.$high;
    low = x.$low;
  }
  for (var i = 1; i < 32; i++) {
    if ((y.$low & 1<<i) !== 0) {
      high += x.$high << i | x.$low >>> (32 - i);
      low += (x.$low << i) >>> 0;
    }
  }
  for (var i = 0; i < 32; i++) {
    if ((y.$high & 1<<i) !== 0) {
      high += x.$low << i;
    }
  }
  return new x.constructor(high, low);
};

var $div64 = function(x, y, returnRemainder) {
  if (y.$high === 0 && y.$low === 0) {
    $throwRuntimeError("integer divide by zero");
  }

  var s = 1;
  var rs = 1;

  var xHigh = x.$high;
  var xLow = x.$low;
  if (xHigh < 0) {
    s = -1;
    rs = -1;
    xHigh = -xHigh;
    if (xLow !== 0) {
      xHigh--;
      xLow = 4294967296 - xLow;
    }
  }

  var yHigh = y.$high;
  var yLow = y.$low;
  if (y.$high < 0) {
    s *= -1;
    yHigh = -yHigh;
    if (yLow !== 0) {
      yHigh--;
      yLow = 4294967296 - yLow;
    }
  }

  var high = 0, low = 0, n = 0;
  while (yHigh < 2147483648 && ((xHigh > yHigh) || (xHigh === yHigh && xLow > yLow))) {
    yHigh = (yHigh << 1 | yLow >>> 31) >>> 0;
    yLow = (yLow << 1) >>> 0;
    n++;
  }
  for (var i = 0; i <= n; i++) {
    high = high << 1 | low >>> 31;
    low = (low << 1) >>> 0;
    if ((xHigh > yHigh) || (xHigh === yHigh && xLow >= yLow)) {
      xHigh = xHigh - yHigh;
      xLow = xLow - yLow;
      if (xLow < 0) {
        xHigh--;
        xLow += 4294967296;
      }
      low++;
      if (low === 4294967296) {
        high++;
        low = 0;
      }
    }
    yLow = (yLow >>> 1 | yHigh << (32 - 1)) >>> 0;
    yHigh = yHigh >>> 1;
  }

  if (returnRemainder) {
    return new x.constructor(xHigh * rs, xLow * rs);
  }
  return new x.constructor(high * s, low * s);
};

var $divComplex = function(n, d) {
  var ninf = n.$real === Infinity || n.$real === -Infinity || n.$imag === Infinity || n.$imag === -Infinity;
  var dinf = d.$real === Infinity || d.$real === -Infinity || d.$imag === Infinity || d.$imag === -Infinity;
  var nnan = !ninf && (n.$real !== n.$real || n.$imag !== n.$imag);
  var dnan = !dinf && (d.$real !== d.$real || d.$imag !== d.$imag);
  if(nnan || dnan) {
    return new n.constructor(NaN, NaN);
  }
  if (ninf && !dinf) {
    return new n.constructor(Infinity, Infinity);
  }
  if (!ninf && dinf) {
    return new n.constructor(0, 0);
  }
  if (d.$real === 0 && d.$imag === 0) {
    if (n.$real === 0 && n.$imag === 0) {
      return new n.constructor(NaN, NaN);
    }
    return new n.constructor(Infinity, Infinity);
  }
  var a = Math.abs(d.$real);
  var b = Math.abs(d.$imag);
  if (a <= b) {
    var ratio = d.$real / d.$imag;
    var denom = d.$real * ratio + d.$imag;
    return new n.constructor((n.$real * ratio + n.$imag) / denom, (n.$imag * ratio - n.$real) / denom);
  }
  var ratio = d.$imag / d.$real;
  var denom = d.$imag * ratio + d.$real;
  return new n.constructor((n.$imag * ratio + n.$real) / denom, (n.$imag - n.$real * ratio) / denom);
};

var $kindBool = 1;
var $kindInt = 2;
var $kindInt8 = 3;
var $kindInt16 = 4;
var $kindInt32 = 5;
var $kindInt64 = 6;
var $kindUint = 7;
var $kindUint8 = 8;
var $kindUint16 = 9;
var $kindUint32 = 10;
var $kindUint64 = 11;
var $kindUintptr = 12;
var $kindFloat32 = 13;
var $kindFloat64 = 14;
var $kindComplex64 = 15;
var $kindComplex128 = 16;
var $kindArray = 17;
var $kindChan = 18;
var $kindFunc = 19;
var $kindInterface = 20;
var $kindMap = 21;
var $kindPtr = 22;
var $kindSlice = 23;
var $kindString = 24;
var $kindStruct = 25;
var $kindUnsafePointer = 26;

var $methodSynthesizers = [];
var $addMethodSynthesizer = function(f) {
  if ($methodSynthesizers === null) {
    f();
    return;
  }
  $methodSynthesizers.push(f);
};
var $synthesizeMethods = function() {
  $methodSynthesizers.forEach(function(f) { f(); });
  $methodSynthesizers = null;
};

var $ifaceKeyFor = function(x) {
  if (x === $ifaceNil) {
    return 'nil';
  }
  var c = x.constructor;
  return c.string + '$' + c.keyFor(x.$val);
};

var $identity = function(x) { return x; };

var $typeIDCounter = 0;

var $idKey = function(x) {
  if (x.$id === undefined) {
    $idCounter++;
    x.$id = $idCounter;
  }
  return String(x.$id);
};

var $newType = function(size, kind, string, named, pkg, exported, constructor) {
  var typ;
  switch(kind) {
  case $kindBool:
  case $kindInt:
  case $kindInt8:
  case $kindInt16:
  case $kindInt32:
  case $kindUint:
  case $kindUint8:
  case $kindUint16:
  case $kindUint32:
  case $kindUintptr:
  case $kindUnsafePointer:
    typ = function(v) { this.$val = v; };
    typ.wrapped = true;
    typ.keyFor = $identity;
    break;

  case $kindString:
    typ = function(v) { this.$val = v; };
    typ.wrapped = true;
    typ.keyFor = function(x) { return "$" + x; };
    break;

  case $kindFloat32:
  case $kindFloat64:
    typ = function(v) { this.$val = v; };
    typ.wrapped = true;
    typ.keyFor = function(x) { return $floatKey(x); };
    break;

  case $kindInt64:
    typ = function(high, low) {
      this.$high = (high + Math.floor(Math.ceil(low) / 4294967296)) >> 0;
      this.$low = low >>> 0;
      this.$val = this;
    };
    typ.keyFor = function(x) { return x.$high + "$" + x.$low; };
    break;

  case $kindUint64:
    typ = function(high, low) {
      this.$high = (high + Math.floor(Math.ceil(low) / 4294967296)) >>> 0;
      this.$low = low >>> 0;
      this.$val = this;
    };
    typ.keyFor = function(x) { return x.$high + "$" + x.$low; };
    break;

  case $kindComplex64:
    typ = function(real, imag) {
      this.$real = $fround(real);
      this.$imag = $fround(imag);
      this.$val = this;
    };
    typ.keyFor = function(x) { return x.$real + "$" + x.$imag; };
    break;

  case $kindComplex128:
    typ = function(real, imag) {
      this.$real = real;
      this.$imag = imag;
      this.$val = this;
    };
    typ.keyFor = function(x) { return x.$real + "$" + x.$imag; };
    break;

  case $kindArray:
    typ = function(v) { this.$val = v; };
    typ.wrapped = true;
    typ.ptr = $newType(4, $kindPtr, "*" + string, false, "", false, function(array) {
      this.$get = function() { return array; };
      this.$set = function(v) { typ.copy(this, v); };
      this.$val = array;
    });
    typ.init = function(elem, len) {
      typ.elem = elem;
      typ.len = len;
      typ.comparable = elem.comparable;
      typ.keyFor = function(x) {
        return Array.prototype.join.call($mapArray(x, function(e) {
          return String(elem.keyFor(e)).replace(/\\/g, "\\\\").replace(/\$/g, "\\$");
        }), "$");
      };
      typ.copy = function(dst, src) {
        $copyArray(dst, src, 0, 0, src.length, elem);
      };
      typ.ptr.init(typ);
      Object.defineProperty(typ.ptr.nil, "nilCheck", { get: $throwNilPointerError });
    };
    break;

  case $kindChan:
    typ = function(v) { this.$val = v; };
    typ.wrapped = true;
    typ.keyFor = $idKey;
    typ.init = function(elem, sendOnly, recvOnly) {
      typ.elem = elem;
      typ.sendOnly = sendOnly;
      typ.recvOnly = recvOnly;
    };
    break;

  case $kindFunc:
    typ = function(v) { this.$val = v; };
    typ.wrapped = true;
    typ.init = function(params, results, variadic) {
      typ.params = params;
      typ.results = results;
      typ.variadic = variadic;
      typ.comparable = false;
    };
    break;

  case $kindInterface:
    typ = { implementedBy: {}, missingMethodFor: {} };
    typ.keyFor = $ifaceKeyFor;
    typ.init = function(methods) {
      typ.methods = methods;
      methods.forEach(function(m) {
        $ifaceNil[m.prop] = $throwNilPointerError;
      });
    };
    break;

  case $kindMap:
    typ = function(v) { this.$val = v; };
    typ.wrapped = true;
    typ.init = function(key, elem) {
      typ.key = key;
      typ.elem = elem;
      typ.comparable = false;
    };
    break;

  case $kindPtr:
    typ = constructor || function(getter, setter, target) {
      this.$get = getter;
      this.$set = setter;
      this.$target = target;
      this.$val = this;
    };
    typ.keyFor = $idKey;
    typ.init = function(elem) {
      typ.elem = elem;
      typ.wrapped = (elem.kind === $kindArray);
      typ.nil = new typ($throwNilPointerError, $throwNilPointerError);
    };
    break;

  case $kindSlice:
    typ = function(array) {
      if (array.constructor !== typ.nativeArray) {
        array = new typ.nativeArray(array);
      }
      this.$array = array;
      this.$offset = 0;
      this.$length = array.length;
      this.$capacity = array.length;
      this.$val = this;
    };
    typ.init = function(elem) {
      typ.elem = elem;
      typ.comparable = false;
      typ.nativeArray = $nativeArray(elem.kind);
      typ.nil = new typ([]);
    };
    break;

  case $kindStruct:
    typ = function(v) { this.$val = v; };
    typ.wrapped = true;
    typ.ptr = $newType(4, $kindPtr, "*" + string, false, pkg, exported, constructor);
    typ.ptr.elem = typ;
    typ.ptr.prototype.$get = function() { return this; };
    typ.ptr.prototype.$set = function(v) { typ.copy(this, v); };
    typ.init = function(pkgPath, fields) {
      typ.pkgPath = pkgPath;
      typ.fields = fields;
      fields.forEach(function(f) {
        if (!f.typ.comparable) {
          typ.comparable = false;
        }
      });
      typ.keyFor = function(x) {
        var val = x.$val;
        return $mapArray(fields, function(f) {
          return String(f.typ.keyFor(val[f.prop])).replace(/\\/g, "\\\\").replace(/\$/g, "\\$");
        }).join("$");
      };
      typ.copy = function(dst, src) {
        for (var i = 0; i < fields.length; i++) {
          var f = fields[i];
          switch (f.typ.kind) {
          case $kindArray:
          case $kindStruct:
            f.typ.copy(dst[f.prop], src[f.prop]);
            continue;
          default:
            dst[f.prop] = src[f.prop];
            continue;
          }
        }
      };
      /* nil value */
      var properties = {};
      fields.forEach(function(f) {
        properties[f.prop] = { get: $throwNilPointerError, set: $throwNilPointerError };
      });
      typ.ptr.nil = Object.create(constructor.prototype, properties);
      typ.ptr.nil.$val = typ.ptr.nil;
      /* methods for embedded fields */
      $addMethodSynthesizer(function() {
        var synthesizeMethod = function(target, m, f) {
          if (target.prototype[m.prop] !== undefined) { return; }
          target.prototype[m.prop] = function() {
            var v = this.$val[f.prop];
            if (f.typ === $jsObjectPtr) {
              v = new $jsObjectPtr(v);
            }
            if (v.$val === undefined) {
              v = new f.typ(v);
            }
            return v[m.prop].apply(v, arguments);
          };
        };
        fields.forEach(function(f) {
          if (f.anonymous) {
            $methodSet(f.typ).forEach(function(m) {
              synthesizeMethod(typ, m, f);
              synthesizeMethod(typ.ptr, m, f);
            });
            $methodSet($ptrType(f.typ)).forEach(function(m) {
              synthesizeMethod(typ.ptr, m, f);
            });
          }
        });
      });
    };
    break;

  default:
    $panic(new $String("invalid kind: " + kind));
  }

  switch (kind) {
  case $kindBool:
  case $kindMap:
    typ.zero = function() { return false; };
    break;

  case $kindInt:
  case $kindInt8:
  case $kindInt16:
  case $kindInt32:
  case $kindUint:
  case $kindUint8 :
  case $kindUint16:
  case $kindUint32:
  case $kindUintptr:
  case $kindUnsafePointer:
  case $kindFloat32:
  case $kindFloat64:
    typ.zero = function() { return 0; };
    break;

  case $kindString:
    typ.zero = function() { return ""; };
    break;

  case $kindInt64:
  case $kindUint64:
  case $kindComplex64:
  case $kindComplex128:
    var zero = new typ(0, 0);
    typ.zero = function() { return zero; };
    break;

  case $kindPtr:
  case $kindSlice:
    typ.zero = function() { return typ.nil; };
    break;

  case $kindChan:
    typ.zero = function() { return $chanNil; };
    break;

  case $kindFunc:
    typ.zero = function() { return $throwNilPointerError; };
    break;

  case $kindInterface:
    typ.zero = function() { return $ifaceNil; };
    break;

  case $kindArray:
    typ.zero = function() {
      var arrayClass = $nativeArray(typ.elem.kind);
      if (arrayClass !== Array) {
        return new arrayClass(typ.len);
      }
      var array = new Array(typ.len);
      for (var i = 0; i < typ.len; i++) {
        array[i] = typ.elem.zero();
      }
      return array;
    };
    break;

  case $kindStruct:
    typ.zero = function() { return new typ.ptr(); };
    break;

  default:
    $panic(new $String("invalid kind: " + kind));
  }

  typ.id = $typeIDCounter;
  $typeIDCounter++;
  typ.size = size;
  typ.kind = kind;
  typ.string = string;
  typ.named = named;
  typ.pkg = pkg;
  typ.exported = exported;
  typ.methods = [];
  typ.methodSetCache = null;
  typ.comparable = true;
  return typ;
};

var $methodSet = function(typ) {
  if (typ.methodSetCache !== null) {
    return typ.methodSetCache;
  }
  var base = {};

  var isPtr = (typ.kind === $kindPtr);
  if (isPtr && typ.elem.kind === $kindInterface) {
    typ.methodSetCache = [];
    return [];
  }

  var current = [{typ: isPtr ? typ.elem : typ, indirect: isPtr}];

  var seen = {};

  while (current.length > 0) {
    var next = [];
    var mset = [];

    current.forEach(function(e) {
      if (seen[e.typ.string]) {
        return;
      }
      seen[e.typ.string] = true;

      if (e.typ.named) {
        mset = mset.concat(e.typ.methods);
        if (e.indirect) {
          mset = mset.concat($ptrType(e.typ).methods);
        }
      }

      switch (e.typ.kind) {
      case $kindStruct:
        e.typ.fields.forEach(function(f) {
          if (f.anonymous) {
            var fTyp = f.typ;
            var fIsPtr = (fTyp.kind === $kindPtr);
            next.push({typ: fIsPtr ? fTyp.elem : fTyp, indirect: e.indirect || fIsPtr});
          }
        });
        break;

      case $kindInterface:
        mset = mset.concat(e.typ.methods);
        break;
      }
    });

    mset.forEach(function(m) {
      if (base[m.name] === undefined) {
        base[m.name] = m;
      }
    });

    current = next;
  }

  typ.methodSetCache = [];
  Object.keys(base).sort().forEach(function(name) {
    typ.methodSetCache.push(base[name]);
  });
  return typ.methodSetCache;
};

var $Bool          = $newType( 1, $kindBool,          "bool",           true, "", false, null);
var $Int           = $newType( 4, $kindInt,           "int",            true, "", false, null);
var $Int8          = $newType( 1, $kindInt8,          "int8",           true, "", false, null);
var $Int16         = $newType( 2, $kindInt16,         "int16",          true, "", false, null);
var $Int32         = $newType( 4, $kindInt32,         "int32",          true, "", false, null);
var $Int64         = $newType( 8, $kindInt64,         "int64",          true, "", false, null);
var $Uint          = $newType( 4, $kindUint,          "uint",           true, "", false, null);
var $Uint8         = $newType( 1, $kindUint8,         "uint8",          true, "", false, null);
var $Uint16        = $newType( 2, $kindUint16,        "uint16",         true, "", false, null);
var $Uint32        = $newType( 4, $kindUint32,        "uint32",         true, "", false, null);
var $Uint64        = $newType( 8, $kindUint64,        "uint64",         true, "", false, null);
var $Uintptr       = $newType( 4, $kindUintptr,       "uintptr",        true, "", false, null);
var $Float32       = $newType( 4, $kindFloat32,       "float32",        true, "", false, null);
var $Float64       = $newType( 8, $kindFloat64,       "float64",        true, "", false, null);
var $Complex64     = $newType( 8, $kindComplex64,     "complex64",      true, "", false, null);
var $Complex128    = $newType(16, $kindComplex128,    "complex128",     true, "", false, null);
var $String        = $newType( 8, $kindString,        "string",         true, "", false, null);
var $UnsafePointer = $newType( 4, $kindUnsafePointer, "unsafe.Pointer", true, "", false, null);

var $nativeArray = function(elemKind) {
  switch (elemKind) {
  case $kindInt:
    return Int32Array;
  case $kindInt8:
    return Int8Array;
  case $kindInt16:
    return Int16Array;
  case $kindInt32:
    return Int32Array;
  case $kindUint:
    return Uint32Array;
  case $kindUint8:
    return Uint8Array;
  case $kindUint16:
    return Uint16Array;
  case $kindUint32:
    return Uint32Array;
  case $kindUintptr:
    return Uint32Array;
  case $kindFloat32:
    return Float32Array;
  case $kindFloat64:
    return Float64Array;
  default:
    return Array;
  }
};
var $toNativeArray = function(elemKind, array) {
  var nativeArray = $nativeArray(elemKind);
  if (nativeArray === Array) {
    return array;
  }
  return new nativeArray(array);
};
var $arrayTypes = {};
var $arrayType = function(elem, len) {
  var typeKey = elem.id + "$" + len;
  var typ = $arrayTypes[typeKey];
  if (typ === undefined) {
    typ = $newType(12, $kindArray, "[" + len + "]" + elem.string, false, "", false, null);
    $arrayTypes[typeKey] = typ;
    typ.init(elem, len);
  }
  return typ;
};

var $chanType = function(elem, sendOnly, recvOnly) {
  var string = (recvOnly ? "<-" : "") + "chan" + (sendOnly ? "<- " : " ") + elem.string;
  var field = sendOnly ? "SendChan" : (recvOnly ? "RecvChan" : "Chan");
  var typ = elem[field];
  if (typ === undefined) {
    typ = $newType(4, $kindChan, string, false, "", false, null);
    elem[field] = typ;
    typ.init(elem, sendOnly, recvOnly);
  }
  return typ;
};
var $Chan = function(elem, capacity) {
  if (capacity < 0 || capacity > 2147483647) {
    $throwRuntimeError("makechan: size out of range");
  }
  this.$elem = elem;
  this.$capacity = capacity;
  this.$buffer = [];
  this.$sendQueue = [];
  this.$recvQueue = [];
  this.$closed = false;
};
var $chanNil = new $Chan(null, 0);
$chanNil.$sendQueue = $chanNil.$recvQueue = { length: 0, push: function() {}, shift: function() { return undefined; }, indexOf: function() { return -1; } };

var $funcTypes = {};
var $funcType = function(params, results, variadic) {
  var typeKey = $mapArray(params, function(p) { return p.id; }).join(",") + "$" + $mapArray(results, function(r) { return r.id; }).join(",") + "$" + variadic;
  var typ = $funcTypes[typeKey];
  if (typ === undefined) {
    var paramTypes = $mapArray(params, function(p) { return p.string; });
    if (variadic) {
      paramTypes[paramTypes.length - 1] = "..." + paramTypes[paramTypes.length - 1].substr(2);
    }
    var string = "func(" + paramTypes.join(", ") + ")";
    if (results.length === 1) {
      string += " " + results[0].string;
    } else if (results.length > 1) {
      string += " (" + $mapArray(results, function(r) { return r.string; }).join(", ") + ")";
    }
    typ = $newType(4, $kindFunc, string, false, "", false, null);
    $funcTypes[typeKey] = typ;
    typ.init(params, results, variadic);
  }
  return typ;
};

var $interfaceTypes = {};
var $interfaceType = function(methods) {
  var typeKey = $mapArray(methods, function(m) { return m.pkg + "," + m.name + "," + m.typ.id; }).join("$");
  var typ = $interfaceTypes[typeKey];
  if (typ === undefined) {
    var string = "interface {}";
    if (methods.length !== 0) {
      string = "interface { " + $mapArray(methods, function(m) {
        return (m.pkg !== "" ? m.pkg + "." : "") + m.name + m.typ.string.substr(4);
      }).join("; ") + " }";
    }
    typ = $newType(8, $kindInterface, string, false, "", false, null);
    $interfaceTypes[typeKey] = typ;
    typ.init(methods);
  }
  return typ;
};
var $emptyInterface = $interfaceType([]);
var $ifaceNil = {};
var $error = $newType(8, $kindInterface, "error", true, "", false, null);
$error.init([{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}]);

var $mapTypes = {};
var $mapType = function(key, elem) {
  var typeKey = key.id + "$" + elem.id;
  var typ = $mapTypes[typeKey];
  if (typ === undefined) {
    typ = $newType(4, $kindMap, "map[" + key.string + "]" + elem.string, false, "", false, null);
    $mapTypes[typeKey] = typ;
    typ.init(key, elem);
  }
  return typ;
};
var $makeMap = function(keyForFunc, entries) {
  var m = {};
  for (var i = 0; i < entries.length; i++) {
    var e = entries[i];
    m[keyForFunc(e.k)] = e;
  }
  return m;
};

var $ptrType = function(elem) {
  var typ = elem.ptr;
  if (typ === undefined) {
    typ = $newType(4, $kindPtr, "*" + elem.string, false, "", elem.exported, null);
    elem.ptr = typ;
    typ.init(elem);
  }
  return typ;
};

var $newDataPointer = function(data, constructor) {
  if (constructor.elem.kind === $kindStruct) {
    return data;
  }
  return new constructor(function() { return data; }, function(v) { data = v; });
};

var $indexPtr = function(array, index, constructor) {
  array.$ptr = array.$ptr || {};
  return array.$ptr[index] || (array.$ptr[index] = new constructor(function() { return array[index]; }, function(v) { array[index] = v; }));
};

var $sliceType = function(elem) {
  var typ = elem.slice;
  if (typ === undefined) {
    typ = $newType(12, $kindSlice, "[]" + elem.string, false, "", false, null);
    elem.slice = typ;
    typ.init(elem);
  }
  return typ;
};
var $makeSlice = function(typ, length, capacity) {
  capacity = capacity || length;
  if (length < 0 || length > 2147483647) {
    $throwRuntimeError("makeslice: len out of range");
  }
  if (capacity < 0 || capacity < length || capacity > 2147483647) {
    $throwRuntimeError("makeslice: cap out of range");
  }
  var array = new typ.nativeArray(capacity);
  if (typ.nativeArray === Array) {
    for (var i = 0; i < capacity; i++) {
      array[i] = typ.elem.zero();
    }
  }
  var slice = new typ(array);
  slice.$length = length;
  return slice;
};

var $structTypes = {};
var $structType = function(pkgPath, fields) {
  var typeKey = $mapArray(fields, function(f) { return f.name + "," + f.typ.id + "," + f.tag; }).join("$");
  var typ = $structTypes[typeKey];
  if (typ === undefined) {
    var string = "struct { " + $mapArray(fields, function(f) {
      return f.name + " " + f.typ.string + (f.tag !== "" ? (" \"" + f.tag.replace(/\\/g, "\\\\").replace(/"/g, "\\\"") + "\"") : "");
    }).join("; ") + " }";
    if (fields.length === 0) {
      string = "struct {}";
    }
    typ = $newType(0, $kindStruct, string, false, "", false, function() {
      this.$val = this;
      for (var i = 0; i < fields.length; i++) {
        var f = fields[i];
        var arg = arguments[i];
        this[f.prop] = arg !== undefined ? arg : f.typ.zero();
      }
    });
    $structTypes[typeKey] = typ;
    typ.init(pkgPath, fields);
  }
  return typ;
};

var $assertType = function(value, type, returnTuple) {
  var isInterface = (type.kind === $kindInterface), ok, missingMethod = "";
  if (value === $ifaceNil) {
    ok = false;
  } else if (!isInterface) {
    ok = value.constructor === type;
  } else {
    var valueTypeString = value.constructor.string;
    ok = type.implementedBy[valueTypeString];
    if (ok === undefined) {
      ok = true;
      var valueMethodSet = $methodSet(value.constructor);
      var interfaceMethods = type.methods;
      for (var i = 0; i < interfaceMethods.length; i++) {
        var tm = interfaceMethods[i];
        var found = false;
        for (var j = 0; j < valueMethodSet.length; j++) {
          var vm = valueMethodSet[j];
          if (vm.name === tm.name && vm.pkg === tm.pkg && vm.typ === tm.typ) {
            found = true;
            break;
          }
        }
        if (!found) {
          ok = false;
          type.missingMethodFor[valueTypeString] = tm.name;
          break;
        }
      }
      type.implementedBy[valueTypeString] = ok;
    }
    if (!ok) {
      missingMethod = type.missingMethodFor[valueTypeString];
    }
  }

  if (!ok) {
    if (returnTuple) {
      return [type.zero(), false];
    }
    $panic(new $packages["runtime"].TypeAssertionError.ptr("", (value === $ifaceNil ? "" : value.constructor.string), type.string, missingMethod));
  }

  if (!isInterface) {
    value = value.$val;
  }
  if (type === $jsObjectPtr) {
    value = value.object;
  }
  return returnTuple ? [value, true] : value;
};

var $stackDepthOffset = 0;
var $getStackDepth = function() {
  var err = new Error();
  if (err.stack === undefined) {
    return undefined;
  }
  return $stackDepthOffset + err.stack.split("\n").length;
};

var $panicStackDepth = null, $panicValue;
var $callDeferred = function(deferred, jsErr, fromPanic) {
  if (!fromPanic && deferred !== null && deferred.index >= $curGoroutine.deferStack.length) {
    throw jsErr;
  }
  if (jsErr !== null) {
    var newErr = null;
    try {
      $curGoroutine.deferStack.push(deferred);
      $panic(new $jsErrorPtr(jsErr));
    } catch (err) {
      newErr = err;
    }
    $curGoroutine.deferStack.pop();
    $callDeferred(deferred, newErr);
    return;
  }
  if ($curGoroutine.asleep) {
    return;
  }

  $stackDepthOffset--;
  var outerPanicStackDepth = $panicStackDepth;
  var outerPanicValue = $panicValue;

  var localPanicValue = $curGoroutine.panicStack.pop();
  if (localPanicValue !== undefined) {
    $panicStackDepth = $getStackDepth();
    $panicValue = localPanicValue;
  }

  try {
    while (true) {
      if (deferred === null) {
        deferred = $curGoroutine.deferStack[$curGoroutine.deferStack.length - 1];
        if (deferred === undefined) {
          /* The panic reached the top of the stack. Clear it and throw it as a JavaScript error. */
          $panicStackDepth = null;
          if (localPanicValue.Object instanceof Error) {
            throw localPanicValue.Object;
          }
          var msg;
          if (localPanicValue.constructor === $String) {
            msg = localPanicValue.$val;
          } else if (localPanicValue.Error !== undefined) {
            msg = localPanicValue.Error();
          } else if (localPanicValue.String !== undefined) {
            msg = localPanicValue.String();
          } else {
            msg = localPanicValue;
          }
          throw new Error(msg);
        }
      }
      var call = deferred.pop();
      if (call === undefined) {
        $curGoroutine.deferStack.pop();
        if (localPanicValue !== undefined) {
          deferred = null;
          continue;
        }
        return;
      }
      var r = call[0].apply(call[2], call[1]);
      if (r && r.$blk !== undefined) {
        deferred.push([r.$blk, [], r]);
        if (fromPanic) {
          throw null;
        }
        return;
      }

      if (localPanicValue !== undefined && $panicStackDepth === null) {
        throw null; /* error was recovered */
      }
    }
  } finally {
    if (localPanicValue !== undefined) {
      if ($panicStackDepth !== null) {
        $curGoroutine.panicStack.push(localPanicValue);
      }
      $panicStackDepth = outerPanicStackDepth;
      $panicValue = outerPanicValue;
    }
    $stackDepthOffset++;
  }
};

var $panic = function(value) {
  $curGoroutine.panicStack.push(value);
  $callDeferred(null, null, true);
};
var $recover = function() {
  if ($panicStackDepth === null || ($panicStackDepth !== undefined && $panicStackDepth !== $getStackDepth() - 2)) {
    return $ifaceNil;
  }
  $panicStackDepth = null;
  return $panicValue;
};
var $throw = function(err) { throw err; };

var $noGoroutine = { asleep: false, exit: false, deferStack: [], panicStack: [] };
var $curGoroutine = $noGoroutine, $totalGoroutines = 0, $awakeGoroutines = 0, $checkForDeadlock = true;
var $mainFinished = false;
var $go = function(fun, args) {
  $totalGoroutines++;
  $awakeGoroutines++;
  var $goroutine = function() {
    try {
      $curGoroutine = $goroutine;
      var r = fun.apply(undefined, args);
      if (r && r.$blk !== undefined) {
        fun = function() { return r.$blk(); };
        args = [];
        return;
      }
      $goroutine.exit = true;
    } catch (err) {
      if (!$goroutine.exit) {
        throw err;
      }
    } finally {
      $curGoroutine = $noGoroutine;
      if ($goroutine.exit) { /* also set by runtime.Goexit() */
        $totalGoroutines--;
        $goroutine.asleep = true;
      }
      if ($goroutine.asleep) {
        $awakeGoroutines--;
        if (!$mainFinished && $awakeGoroutines === 0 && $checkForDeadlock) {
          console.error("fatal error: all goroutines are asleep - deadlock!");
          if ($global.process !== undefined) {
            $global.process.exit(2);
          }
        }
      }
    }
  };
  $goroutine.asleep = false;
  $goroutine.exit = false;
  $goroutine.deferStack = [];
  $goroutine.panicStack = [];
  $schedule($goroutine);
};

var $scheduled = [];
var $runScheduled = function() {
  try {
    var r;
    while ((r = $scheduled.shift()) !== undefined) {
      r();
    }
  } finally {
    if ($scheduled.length > 0) {
      setTimeout($runScheduled, 0);
    }
  }
};

var $schedule = function(goroutine) {
  if (goroutine.asleep) {
    goroutine.asleep = false;
    $awakeGoroutines++;
  }
  $scheduled.push(goroutine);
  if ($curGoroutine === $noGoroutine) {
    $runScheduled();
  }
};

var $setTimeout = function(f, t) {
  $awakeGoroutines++;
  return setTimeout(function() {
    $awakeGoroutines--;
    f();
  }, t);
};

var $block = function() {
  if ($curGoroutine === $noGoroutine) {
    $throwRuntimeError("cannot block in JavaScript callback, fix by wrapping code in goroutine");
  }
  $curGoroutine.asleep = true;
};

var $send = function(chan, value) {
  if (chan.$closed) {
    $throwRuntimeError("send on closed channel");
  }
  var queuedRecv = chan.$recvQueue.shift();
  if (queuedRecv !== undefined) {
    queuedRecv([value, true]);
    return;
  }
  if (chan.$buffer.length < chan.$capacity) {
    chan.$buffer.push(value);
    return;
  }

  var thisGoroutine = $curGoroutine;
  var closedDuringSend;
  chan.$sendQueue.push(function(closed) {
    closedDuringSend = closed;
    $schedule(thisGoroutine);
    return value;
  });
  $block();
  return {
    $blk: function() {
      if (closedDuringSend) {
        $throwRuntimeError("send on closed channel");
      }
    }
  };
};
var $recv = function(chan) {
  var queuedSend = chan.$sendQueue.shift();
  if (queuedSend !== undefined) {
    chan.$buffer.push(queuedSend(false));
  }
  var bufferedValue = chan.$buffer.shift();
  if (bufferedValue !== undefined) {
    return [bufferedValue, true];
  }
  if (chan.$closed) {
    return [chan.$elem.zero(), false];
  }

  var thisGoroutine = $curGoroutine;
  var f = { $blk: function() { return this.value; } };
  var queueEntry = function(v) {
    f.value = v;
    $schedule(thisGoroutine);
  };
  chan.$recvQueue.push(queueEntry);
  $block();
  return f;
};
var $close = function(chan) {
  if (chan.$closed) {
    $throwRuntimeError("close of closed channel");
  }
  chan.$closed = true;
  while (true) {
    var queuedSend = chan.$sendQueue.shift();
    if (queuedSend === undefined) {
      break;
    }
    queuedSend(true); /* will panic */
  }
  while (true) {
    var queuedRecv = chan.$recvQueue.shift();
    if (queuedRecv === undefined) {
      break;
    }
    queuedRecv([chan.$elem.zero(), false]);
  }
};
var $select = function(comms) {
  var ready = [];
  var selection = -1;
  for (var i = 0; i < comms.length; i++) {
    var comm = comms[i];
    var chan = comm[0];
    switch (comm.length) {
    case 0: /* default */
      selection = i;
      break;
    case 1: /* recv */
      if (chan.$sendQueue.length !== 0 || chan.$buffer.length !== 0 || chan.$closed) {
        ready.push(i);
      }
      break;
    case 2: /* send */
      if (chan.$closed) {
        $throwRuntimeError("send on closed channel");
      }
      if (chan.$recvQueue.length !== 0 || chan.$buffer.length < chan.$capacity) {
        ready.push(i);
      }
      break;
    }
  }

  if (ready.length !== 0) {
    selection = ready[Math.floor(Math.random() * ready.length)];
  }
  if (selection !== -1) {
    var comm = comms[selection];
    switch (comm.length) {
    case 0: /* default */
      return [selection];
    case 1: /* recv */
      return [selection, $recv(comm[0])];
    case 2: /* send */
      $send(comm[0], comm[1]);
      return [selection];
    }
  }

  var entries = [];
  var thisGoroutine = $curGoroutine;
  var f = { $blk: function() { return this.selection; } };
  var removeFromQueues = function() {
    for (var i = 0; i < entries.length; i++) {
      var entry = entries[i];
      var queue = entry[0];
      var index = queue.indexOf(entry[1]);
      if (index !== -1) {
        queue.splice(index, 1);
      }
    }
  };
  for (var i = 0; i < comms.length; i++) {
    (function(i) {
      var comm = comms[i];
      switch (comm.length) {
      case 1: /* recv */
        var queueEntry = function(value) {
          f.selection = [i, value];
          removeFromQueues();
          $schedule(thisGoroutine);
        };
        entries.push([comm[0].$recvQueue, queueEntry]);
        comm[0].$recvQueue.push(queueEntry);
        break;
      case 2: /* send */
        var queueEntry = function() {
          if (comm[0].$closed) {
            $throwRuntimeError("send on closed channel");
          }
          f.selection = [i];
          removeFromQueues();
          $schedule(thisGoroutine);
          return comm[1];
        };
        entries.push([comm[0].$sendQueue, queueEntry]);
        comm[0].$sendQueue.push(queueEntry);
        break;
      }
    })(i);
  }
  $block();
  return f;
};

var $jsObjectPtr, $jsErrorPtr;

var $needsExternalization = function(t) {
  switch (t.kind) {
    case $kindBool:
    case $kindInt:
    case $kindInt8:
    case $kindInt16:
    case $kindInt32:
    case $kindUint:
    case $kindUint8:
    case $kindUint16:
    case $kindUint32:
    case $kindUintptr:
    case $kindFloat32:
    case $kindFloat64:
      return false;
    default:
      return t !== $jsObjectPtr;
  }
};

var $externalize = function(v, t) {
  if (t === $jsObjectPtr) {
    return v;
  }
  switch (t.kind) {
  case $kindBool:
  case $kindInt:
  case $kindInt8:
  case $kindInt16:
  case $kindInt32:
  case $kindUint:
  case $kindUint8:
  case $kindUint16:
  case $kindUint32:
  case $kindUintptr:
  case $kindFloat32:
  case $kindFloat64:
    return v;
  case $kindInt64:
  case $kindUint64:
    return $flatten64(v);
  case $kindArray:
    if ($needsExternalization(t.elem)) {
      return $mapArray(v, function(e) { return $externalize(e, t.elem); });
    }
    return v;
  case $kindFunc:
    return $externalizeFunction(v, t, false);
  case $kindInterface:
    if (v === $ifaceNil) {
      return null;
    }
    if (v.constructor === $jsObjectPtr) {
      return v.$val.object;
    }
    return $externalize(v.$val, v.constructor);
  case $kindMap:
    var m = {};
    var keys = $keys(v);
    for (var i = 0; i < keys.length; i++) {
      var entry = v[keys[i]];
      m[$externalize(entry.k, t.key)] = $externalize(entry.v, t.elem);
    }
    return m;
  case $kindPtr:
    if (v === t.nil) {
      return null;
    }
    return $externalize(v.$get(), t.elem);
  case $kindSlice:
    if ($needsExternalization(t.elem)) {
      return $mapArray($sliceToArray(v), function(e) { return $externalize(e, t.elem); });
    }
    return $sliceToArray(v);
  case $kindString:
    if ($isASCII(v)) {
      return v;
    }
    var s = "", r;
    for (var i = 0; i < v.length; i += r[1]) {
      r = $decodeRune(v, i);
      var c = r[0];
      if (c > 0xFFFF) {
        var h = Math.floor((c - 0x10000) / 0x400) + 0xD800;
        var l = (c - 0x10000) % 0x400 + 0xDC00;
        s += String.fromCharCode(h, l);
        continue;
      }
      s += String.fromCharCode(c);
    }
    return s;
  case $kindStruct:
    var timePkg = $packages["time"];
    if (timePkg !== undefined && v.constructor === timePkg.Time.ptr) {
      var milli = $div64(v.UnixNano(), new $Int64(0, 1000000));
      return new Date($flatten64(milli));
    }

    var noJsObject = {};
    var searchJsObject = function(v, t) {
      if (t === $jsObjectPtr) {
        return v;
      }
      switch (t.kind) {
      case $kindPtr:
        if (v === t.nil) {
          return noJsObject;
        }
        return searchJsObject(v.$get(), t.elem);
      case $kindStruct:
        var f = t.fields[0];
        return searchJsObject(v[f.prop], f.typ);
      case $kindInterface:
        return searchJsObject(v.$val, v.constructor);
      default:
        return noJsObject;
      }
    };
    var o = searchJsObject(v, t);
    if (o !== noJsObject) {
      return o;
    }

    o = {};
    for (var i = 0; i < t.fields.length; i++) {
      var f = t.fields[i];
      if (!f.exported) {
        continue;
      }
      o[f.name] = $externalize(v[f.prop], f.typ);
    }
    return o;
  }
  $throwRuntimeError("cannot externalize " + t.string);
};

var $externalizeFunction = function(v, t, passThis) {
  if (v === $throwNilPointerError) {
    return null;
  }
  if (v.$externalizeWrapper === undefined) {
    $checkForDeadlock = false;
    v.$externalizeWrapper = function() {
      var args = [];
      for (var i = 0; i < t.params.length; i++) {
        if (t.variadic && i === t.params.length - 1) {
          var vt = t.params[i].elem, varargs = [];
          for (var j = i; j < arguments.length; j++) {
            varargs.push($internalize(arguments[j], vt));
          }
          args.push(new (t.params[i])(varargs));
          break;
        }
        args.push($internalize(arguments[i], t.params[i]));
      }
      var result = v.apply(passThis ? this : undefined, args);
      switch (t.results.length) {
      case 0:
        return;
      case 1:
        return $externalize(result, t.results[0]);
      default:
        for (var i = 0; i < t.results.length; i++) {
          result[i] = $externalize(result[i], t.results[i]);
        }
        return result;
      }
    };
  }
  return v.$externalizeWrapper;
};

var $internalize = function(v, t, recv) {
  if (t === $jsObjectPtr) {
    return v;
  }
  if (t === $jsObjectPtr.elem) {
    $throwRuntimeError("cannot internalize js.Object, use *js.Object instead");
  }
  if (v && v.__internal_object__ !== undefined) {
    return $assertType(v.__internal_object__, t, false);
  }
  var timePkg = $packages["time"];
  if (timePkg !== undefined && t === timePkg.Time) {
    if (!(v !== null && v !== undefined && v.constructor === Date)) {
      $throwRuntimeError("cannot internalize time.Time from " + typeof v + ", must be Date");
    }
    return timePkg.Unix(new $Int64(0, 0), new $Int64(0, v.getTime() * 1000000));
  }
  switch (t.kind) {
  case $kindBool:
    return !!v;
  case $kindInt:
    return parseInt(v);
  case $kindInt8:
    return parseInt(v) << 24 >> 24;
  case $kindInt16:
    return parseInt(v) << 16 >> 16;
  case $kindInt32:
    return parseInt(v) >> 0;
  case $kindUint:
    return parseInt(v);
  case $kindUint8:
    return parseInt(v) << 24 >>> 24;
  case $kindUint16:
    return parseInt(v) << 16 >>> 16;
  case $kindUint32:
  case $kindUintptr:
    return parseInt(v) >>> 0;
  case $kindInt64:
  case $kindUint64:
    return new t(0, v);
  case $kindFloat32:
  case $kindFloat64:
    return parseFloat(v);
  case $kindArray:
    if (v.length !== t.len) {
      $throwRuntimeError("got array with wrong size from JavaScript native");
    }
    return $mapArray(v, function(e) { return $internalize(e, t.elem); });
  case $kindFunc:
    return function() {
      var args = [];
      for (var i = 0; i < t.params.length; i++) {
        if (t.variadic && i === t.params.length - 1) {
          var vt = t.params[i].elem, varargs = arguments[i];
          for (var j = 0; j < varargs.$length; j++) {
            args.push($externalize(varargs.$array[varargs.$offset + j], vt));
          }
          break;
        }
        args.push($externalize(arguments[i], t.params[i]));
      }
      var result = v.apply(recv, args);
      switch (t.results.length) {
      case 0:
        return;
      case 1:
        return $internalize(result, t.results[0]);
      default:
        for (var i = 0; i < t.results.length; i++) {
          result[i] = $internalize(result[i], t.results[i]);
        }
        return result;
      }
    };
  case $kindInterface:
    if (t.methods.length !== 0) {
      $throwRuntimeError("cannot internalize " + t.string);
    }
    if (v === null) {
      return $ifaceNil;
    }
    if (v === undefined) {
      return new $jsObjectPtr(undefined);
    }
    switch (v.constructor) {
    case Int8Array:
      return new ($sliceType($Int8))(v);
    case Int16Array:
      return new ($sliceType($Int16))(v);
    case Int32Array:
      return new ($sliceType($Int))(v);
    case Uint8Array:
      return new ($sliceType($Uint8))(v);
    case Uint16Array:
      return new ($sliceType($Uint16))(v);
    case Uint32Array:
      return new ($sliceType($Uint))(v);
    case Float32Array:
      return new ($sliceType($Float32))(v);
    case Float64Array:
      return new ($sliceType($Float64))(v);
    case Array:
      return $internalize(v, $sliceType($emptyInterface));
    case Boolean:
      return new $Bool(!!v);
    case Date:
      if (timePkg === undefined) {
        /* time package is not present, internalize as &js.Object{Date} so it can be externalized into original Date. */
        return new $jsObjectPtr(v);
      }
      return new timePkg.Time($internalize(v, timePkg.Time));
    case Function:
      var funcType = $funcType([$sliceType($emptyInterface)], [$jsObjectPtr], true);
      return new funcType($internalize(v, funcType));
    case Number:
      return new $Float64(parseFloat(v));
    case String:
      return new $String($internalize(v, $String));
    default:
      if ($global.Node && v instanceof $global.Node) {
        return new $jsObjectPtr(v);
      }
      var mapType = $mapType($String, $emptyInterface);
      return new mapType($internalize(v, mapType));
    }
  case $kindMap:
    var m = {};
    var keys = $keys(v);
    for (var i = 0; i < keys.length; i++) {
      var k = $internalize(keys[i], t.key);
      m[t.key.keyFor(k)] = { k: k, v: $internalize(v[keys[i]], t.elem) };
    }
    return m;
  case $kindPtr:
    if (t.elem.kind === $kindStruct) {
      return $internalize(v, t.elem);
    }
  case $kindSlice:
    return new t($mapArray(v, function(e) { return $internalize(e, t.elem); }));
  case $kindString:
    v = String(v);
    if ($isASCII(v)) {
      return v;
    }
    var s = "";
    var i = 0;
    while (i < v.length) {
      var h = v.charCodeAt(i);
      if (0xD800 <= h && h <= 0xDBFF) {
        var l = v.charCodeAt(i + 1);
        var c = (h - 0xD800) * 0x400 + l - 0xDC00 + 0x10000;
        s += $encodeRune(c);
        i += 2;
        continue;
      }
      s += $encodeRune(h);
      i++;
    }
    return s;
  case $kindStruct:
    var noJsObject = {};
    var searchJsObject = function(t) {
      if (t === $jsObjectPtr) {
        return v;
      }
      if (t === $jsObjectPtr.elem) {
        $throwRuntimeError("cannot internalize js.Object, use *js.Object instead");
      }
      switch (t.kind) {
      case $kindPtr:
        return searchJsObject(t.elem);
      case $kindStruct:
        var f = t.fields[0];
        var o = searchJsObject(f.typ);
        if (o !== noJsObject) {
          var n = new t.ptr();
          n[f.prop] = o;
          return n;
        }
        return noJsObject;
      default:
        return noJsObject;
      }
    };
    var o = searchJsObject(t);
    if (o !== noJsObject) {
      return o;
    }
  }
  $throwRuntimeError("cannot internalize " + t.string);
};

/* $isASCII reports whether string s contains only ASCII characters. */
var $isASCII = function(s) {
  for (var i = 0; i < s.length; i++) {
    if (s.charCodeAt(i) >= 128) {
      return false;
    }
  }
  return true;
};

$packages["github.com/gopherjs/gopherjs/js"] = (function() {
	var $pkg = {}, $init, Object, Error, sliceType, ptrType, ptrType$1, MakeFunc, init;
	Object = $pkg.Object = $newType(0, $kindStruct, "js.Object", true, "github.com/gopherjs/gopherjs/js", true, function(object_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.object = null;
			return;
		}
		this.object = object_;
	});
	Error = $pkg.Error = $newType(0, $kindStruct, "js.Error", true, "github.com/gopherjs/gopherjs/js", true, function(Object_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Object = null;
			return;
		}
		this.Object = Object_;
	});
	sliceType = $sliceType($emptyInterface);
	ptrType = $ptrType(Object);
	ptrType$1 = $ptrType(Error);
	Object.ptr.prototype.Get = function(key) {
		var key, o;
		o = this;
		return o.object[$externalize(key, $String)];
	};
	Object.prototype.Get = function(key) { return this.$val.Get(key); };
	Object.ptr.prototype.Set = function(key, value) {
		var key, o, value;
		o = this;
		o.object[$externalize(key, $String)] = $externalize(value, $emptyInterface);
	};
	Object.prototype.Set = function(key, value) { return this.$val.Set(key, value); };
	Object.ptr.prototype.Delete = function(key) {
		var key, o;
		o = this;
		delete o.object[$externalize(key, $String)];
	};
	Object.prototype.Delete = function(key) { return this.$val.Delete(key); };
	Object.ptr.prototype.Length = function() {
		var o;
		o = this;
		return $parseInt(o.object.length);
	};
	Object.prototype.Length = function() { return this.$val.Length(); };
	Object.ptr.prototype.Index = function(i) {
		var i, o;
		o = this;
		return o.object[i];
	};
	Object.prototype.Index = function(i) { return this.$val.Index(i); };
	Object.ptr.prototype.SetIndex = function(i, value) {
		var i, o, value;
		o = this;
		o.object[i] = $externalize(value, $emptyInterface);
	};
	Object.prototype.SetIndex = function(i, value) { return this.$val.SetIndex(i, value); };
	Object.ptr.prototype.Call = function(name, args) {
		var args, name, o, obj;
		o = this;
		return (obj = o.object, obj[$externalize(name, $String)].apply(obj, $externalize(args, sliceType)));
	};
	Object.prototype.Call = function(name, args) { return this.$val.Call(name, args); };
	Object.ptr.prototype.Invoke = function(args) {
		var args, o;
		o = this;
		return o.object.apply(undefined, $externalize(args, sliceType));
	};
	Object.prototype.Invoke = function(args) { return this.$val.Invoke(args); };
	Object.ptr.prototype.New = function(args) {
		var args, o;
		o = this;
		return new ($global.Function.prototype.bind.apply(o.object, [undefined].concat($externalize(args, sliceType))));
	};
	Object.prototype.New = function(args) { return this.$val.New(args); };
	Object.ptr.prototype.Bool = function() {
		var o;
		o = this;
		return !!(o.object);
	};
	Object.prototype.Bool = function() { return this.$val.Bool(); };
	Object.ptr.prototype.String = function() {
		var o;
		o = this;
		return $internalize(o.object, $String);
	};
	Object.prototype.String = function() { return this.$val.String(); };
	Object.ptr.prototype.Int = function() {
		var o;
		o = this;
		return $parseInt(o.object) >> 0;
	};
	Object.prototype.Int = function() { return this.$val.Int(); };
	Object.ptr.prototype.Int64 = function() {
		var o;
		o = this;
		return $internalize(o.object, $Int64);
	};
	Object.prototype.Int64 = function() { return this.$val.Int64(); };
	Object.ptr.prototype.Uint64 = function() {
		var o;
		o = this;
		return $internalize(o.object, $Uint64);
	};
	Object.prototype.Uint64 = function() { return this.$val.Uint64(); };
	Object.ptr.prototype.Float = function() {
		var o;
		o = this;
		return $parseFloat(o.object);
	};
	Object.prototype.Float = function() { return this.$val.Float(); };
	Object.ptr.prototype.Interface = function() {
		var o;
		o = this;
		return $internalize(o.object, $emptyInterface);
	};
	Object.prototype.Interface = function() { return this.$val.Interface(); };
	Object.ptr.prototype.Unsafe = function() {
		var o;
		o = this;
		return o.object;
	};
	Object.prototype.Unsafe = function() { return this.$val.Unsafe(); };
	Error.ptr.prototype.Error = function() {
		var err;
		err = this;
		return "JavaScript error: " + $internalize(err.Object.message, $String);
	};
	Error.prototype.Error = function() { return this.$val.Error(); };
	Error.ptr.prototype.Stack = function() {
		var err;
		err = this;
		return $internalize(err.Object.stack, $String);
	};
	Error.prototype.Stack = function() { return this.$val.Stack(); };
	MakeFunc = function(fn) {
		var fn;
		return $makeFunc(fn);
	};
	$pkg.MakeFunc = MakeFunc;
	init = function() {
		var e;
		e = new Error.ptr(null);
		$unused(e);
	};
	ptrType.methods = [{prop: "Get", name: "Get", pkg: "", typ: $funcType([$String], [ptrType], false)}, {prop: "Set", name: "Set", pkg: "", typ: $funcType([$String, $emptyInterface], [], false)}, {prop: "Delete", name: "Delete", pkg: "", typ: $funcType([$String], [], false)}, {prop: "Length", name: "Length", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Index", name: "Index", pkg: "", typ: $funcType([$Int], [ptrType], false)}, {prop: "SetIndex", name: "SetIndex", pkg: "", typ: $funcType([$Int, $emptyInterface], [], false)}, {prop: "Call", name: "Call", pkg: "", typ: $funcType([$String, sliceType], [ptrType], true)}, {prop: "Invoke", name: "Invoke", pkg: "", typ: $funcType([sliceType], [ptrType], true)}, {prop: "New", name: "New", pkg: "", typ: $funcType([sliceType], [ptrType], true)}, {prop: "Bool", name: "Bool", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Int", name: "Int", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Int64", name: "Int64", pkg: "", typ: $funcType([], [$Int64], false)}, {prop: "Uint64", name: "Uint64", pkg: "", typ: $funcType([], [$Uint64], false)}, {prop: "Float", name: "Float", pkg: "", typ: $funcType([], [$Float64], false)}, {prop: "Interface", name: "Interface", pkg: "", typ: $funcType([], [$emptyInterface], false)}, {prop: "Unsafe", name: "Unsafe", pkg: "", typ: $funcType([], [$Uintptr], false)}];
	ptrType$1.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Stack", name: "Stack", pkg: "", typ: $funcType([], [$String], false)}];
	Object.init("github.com/gopherjs/gopherjs/js", [{prop: "object", name: "object", anonymous: false, exported: false, typ: ptrType, tag: ""}]);
	Error.init("", [{prop: "Object", name: "Object", anonymous: true, exported: true, typ: ptrType, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		init();
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["runtime/internal/sys"] = (function() {
	var $pkg = {}, $init;
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["runtime"] = (function() {
	var $pkg = {}, $init, js, sys, TypeAssertionError, errorString, ptrType$4, init, GOROOT, Caller, Goexit, SetFinalizer, KeepAlive, throw$1;
	js = $packages["github.com/gopherjs/gopherjs/js"];
	sys = $packages["runtime/internal/sys"];
	TypeAssertionError = $pkg.TypeAssertionError = $newType(0, $kindStruct, "runtime.TypeAssertionError", true, "runtime", true, function(interfaceString_, concreteString_, assertedString_, missingMethod_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.interfaceString = "";
			this.concreteString = "";
			this.assertedString = "";
			this.missingMethod = "";
			return;
		}
		this.interfaceString = interfaceString_;
		this.concreteString = concreteString_;
		this.assertedString = assertedString_;
		this.missingMethod = missingMethod_;
	});
	errorString = $pkg.errorString = $newType(8, $kindString, "runtime.errorString", true, "runtime", false, null);
	ptrType$4 = $ptrType(TypeAssertionError);
	init = function() {
		var e, jsPkg;
		jsPkg = $packages[$externalize("github.com/gopherjs/gopherjs/js", $String)];
		$jsObjectPtr = jsPkg.Object.ptr;
		$jsErrorPtr = jsPkg.Error.ptr;
		$throwRuntimeError = throw$1;
		e = $ifaceNil;
		e = new TypeAssertionError.ptr("", "", "", "");
		$unused(e);
	};
	GOROOT = function() {
		var goroot, process;
		process = $global.process;
		if (process === undefined) {
			return "/";
		}
		goroot = process.env.GOROOT;
		if (!(goroot === undefined)) {
			return $internalize(goroot, $String);
		}
		return "/usr/local/go";
	};
	$pkg.GOROOT = GOROOT;
	Caller = function(skip) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, file, info, line, ok, parts, pc, skip;
		pc = 0;
		file = "";
		line = 0;
		ok = false;
		info = new ($global.Error)().stack.split($externalize("\n", $String))[(skip + 2 >> 0)];
		if (info === undefined) {
			_tmp = 0;
			_tmp$1 = "";
			_tmp$2 = 0;
			_tmp$3 = false;
			pc = _tmp;
			file = _tmp$1;
			line = _tmp$2;
			ok = _tmp$3;
			return [pc, file, line, ok];
		}
		parts = info.substring(($parseInt(info.indexOf($externalize("(", $String))) >> 0) + 1 >> 0, $parseInt(info.indexOf($externalize(")", $String))) >> 0).split($externalize(":", $String));
		_tmp$4 = 0;
		_tmp$5 = $internalize(parts[0], $String);
		_tmp$6 = $parseInt(parts[1]) >> 0;
		_tmp$7 = true;
		pc = _tmp$4;
		file = _tmp$5;
		line = _tmp$6;
		ok = _tmp$7;
		return [pc, file, line, ok];
	};
	$pkg.Caller = Caller;
	Goexit = function() {
		$curGoroutine.exit = $externalize(true, $Bool);
		$throw(null);
	};
	$pkg.Goexit = Goexit;
	SetFinalizer = function(x, f) {
		var f, x;
	};
	$pkg.SetFinalizer = SetFinalizer;
	KeepAlive = function(param) {
		var param;
	};
	$pkg.KeepAlive = KeepAlive;
	throw$1 = function(s) {
		var s;
		$panic(new errorString((s)));
	};
	TypeAssertionError.ptr.prototype.RuntimeError = function() {
	};
	TypeAssertionError.prototype.RuntimeError = function() { return this.$val.RuntimeError(); };
	TypeAssertionError.ptr.prototype.Error = function() {
		var e, inter;
		e = this;
		inter = e.interfaceString;
		if (inter === "") {
			inter = "interface";
		}
		if (e.concreteString === "") {
			return "interface conversion: " + inter + " is nil, not " + e.assertedString;
		}
		if (e.missingMethod === "") {
			return "interface conversion: " + inter + " is " + e.concreteString + ", not " + e.assertedString;
		}
		return "interface conversion: " + e.concreteString + " is not " + e.assertedString + ": missing method " + e.missingMethod;
	};
	TypeAssertionError.prototype.Error = function() { return this.$val.Error(); };
	errorString.prototype.RuntimeError = function() {
		var e;
		e = this.$val;
	};
	$ptrType(errorString).prototype.RuntimeError = function() { return new errorString(this.$get()).RuntimeError(); };
	errorString.prototype.Error = function() {
		var e;
		e = this.$val;
		return "runtime error: " + (e);
	};
	$ptrType(errorString).prototype.Error = function() { return new errorString(this.$get()).Error(); };
	ptrType$4.methods = [{prop: "RuntimeError", name: "RuntimeError", pkg: "", typ: $funcType([], [], false)}, {prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	errorString.methods = [{prop: "RuntimeError", name: "RuntimeError", pkg: "", typ: $funcType([], [], false)}, {prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	TypeAssertionError.init("runtime", [{prop: "interfaceString", name: "interfaceString", anonymous: false, exported: false, typ: $String, tag: ""}, {prop: "concreteString", name: "concreteString", anonymous: false, exported: false, typ: $String, tag: ""}, {prop: "assertedString", name: "assertedString", anonymous: false, exported: false, typ: $String, tag: ""}, {prop: "missingMethod", name: "missingMethod", anonymous: false, exported: false, typ: $String, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = js.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = sys.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		init();
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["errors"] = (function() {
	var $pkg = {}, $init, errorString, ptrType, New;
	errorString = $pkg.errorString = $newType(0, $kindStruct, "errors.errorString", true, "errors", false, function(s_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.s = "";
			return;
		}
		this.s = s_;
	});
	ptrType = $ptrType(errorString);
	New = function(text) {
		var text;
		return new errorString.ptr(text);
	};
	$pkg.New = New;
	errorString.ptr.prototype.Error = function() {
		var e;
		e = this;
		return e.s;
	};
	errorString.prototype.Error = function() { return this.$val.Error(); };
	ptrType.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	errorString.init("errors", [{prop: "s", name: "s", anonymous: false, exported: false, typ: $String, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["internal/race"] = (function() {
	var $pkg = {}, $init, Acquire, Release, ReleaseMerge, ReadRange, WriteRange;
	Acquire = function(addr) {
		var addr;
	};
	$pkg.Acquire = Acquire;
	Release = function(addr) {
		var addr;
	};
	$pkg.Release = Release;
	ReleaseMerge = function(addr) {
		var addr;
	};
	$pkg.ReleaseMerge = ReleaseMerge;
	ReadRange = function(addr, len) {
		var addr, len;
	};
	$pkg.ReadRange = ReadRange;
	WriteRange = function(addr, len) {
		var addr, len;
	};
	$pkg.WriteRange = WriteRange;
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["sync/atomic"] = (function() {
	var $pkg = {}, $init, js, Value, ptrType, CompareAndSwapInt32, CompareAndSwapUint64, CompareAndSwapPointer, AddInt32, LoadUint64, LoadPointer, StorePointer;
	js = $packages["github.com/gopherjs/gopherjs/js"];
	Value = $pkg.Value = $newType(0, $kindStruct, "atomic.Value", true, "sync/atomic", true, function(v_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.v = $ifaceNil;
			return;
		}
		this.v = v_;
	});
	ptrType = $ptrType(Value);
	CompareAndSwapInt32 = function(addr, old, new$1) {
		var addr, new$1, old;
		if (addr.$get() === old) {
			addr.$set(new$1);
			return true;
		}
		return false;
	};
	$pkg.CompareAndSwapInt32 = CompareAndSwapInt32;
	CompareAndSwapUint64 = function(addr, old, new$1) {
		var addr, new$1, old, x;
		if ((x = addr.$get(), (x.$high === old.$high && x.$low === old.$low))) {
			addr.$set(new$1);
			return true;
		}
		return false;
	};
	$pkg.CompareAndSwapUint64 = CompareAndSwapUint64;
	CompareAndSwapPointer = function(addr, old, new$1) {
		var addr, new$1, old;
		if (addr.$get() === old) {
			addr.$set(new$1);
			return true;
		}
		return false;
	};
	$pkg.CompareAndSwapPointer = CompareAndSwapPointer;
	AddInt32 = function(addr, delta) {
		var addr, delta, new$1;
		new$1 = addr.$get() + delta >> 0;
		addr.$set(new$1);
		return new$1;
	};
	$pkg.AddInt32 = AddInt32;
	LoadUint64 = function(addr) {
		var addr;
		return addr.$get();
	};
	$pkg.LoadUint64 = LoadUint64;
	LoadPointer = function(addr) {
		var addr;
		return addr.$get();
	};
	$pkg.LoadPointer = LoadPointer;
	StorePointer = function(addr, val) {
		var addr, val;
		addr.$set(val);
	};
	$pkg.StorePointer = StorePointer;
	Value.ptr.prototype.Load = function() {
		var v, x;
		x = $ifaceNil;
		v = this;
		x = v.v;
		return x;
	};
	Value.prototype.Load = function() { return this.$val.Load(); };
	Value.ptr.prototype.Store = function(x) {
		var v, x;
		v = this;
		if ($interfaceIsEqual(x, $ifaceNil)) {
			$panic(new $String("sync/atomic: store of nil value into Value"));
		}
		if (!($interfaceIsEqual(v.v, $ifaceNil)) && !(x.constructor === v.v.constructor)) {
			$panic(new $String("sync/atomic: store of inconsistently typed value into Value"));
		}
		v.v = x;
	};
	Value.prototype.Store = function(x) { return this.$val.Store(x); };
	ptrType.methods = [{prop: "Load", name: "Load", pkg: "", typ: $funcType([], [$emptyInterface], false)}, {prop: "Store", name: "Store", pkg: "", typ: $funcType([$emptyInterface], [], false)}];
	Value.init("sync/atomic", [{prop: "v", name: "v", anonymous: false, exported: false, typ: $emptyInterface, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = js.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["sync"] = (function() {
	var $pkg = {}, $init, js, race, runtime, atomic, Pool, Map, readOnly, entry, Mutex, poolLocalInternal, poolLocal, notifyList, ptrType, sliceType, ptrType$1, chanType, sliceType$1, ptrType$3, ptrType$4, ptrType$5, ptrType$6, ptrType$7, sliceType$4, funcType, funcType$1, ptrType$15, mapType, ptrType$16, arrayType$2, semWaiters, semAwoken, expunged, allPools, runtime_registerPoolCleanup, runtime_SemacquireMutex, runtime_Semrelease, runtime_notifyListCheck, runtime_canSpin, runtime_nanotime, throw$1, newEntry, poolCleanup, init, indexLocal, init$1, runtime_doSpin;
	js = $packages["github.com/gopherjs/gopherjs/js"];
	race = $packages["internal/race"];
	runtime = $packages["runtime"];
	atomic = $packages["sync/atomic"];
	Pool = $pkg.Pool = $newType(0, $kindStruct, "sync.Pool", true, "sync", true, function(local_, localSize_, store_, New_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.local = 0;
			this.localSize = 0;
			this.store = sliceType$4.nil;
			this.New = $throwNilPointerError;
			return;
		}
		this.local = local_;
		this.localSize = localSize_;
		this.store = store_;
		this.New = New_;
	});
	Map = $pkg.Map = $newType(0, $kindStruct, "sync.Map", true, "sync", true, function(mu_, read_, dirty_, misses_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.mu = new Mutex.ptr(0, 0);
			this.read = new atomic.Value.ptr($ifaceNil);
			this.dirty = false;
			this.misses = 0;
			return;
		}
		this.mu = mu_;
		this.read = read_;
		this.dirty = dirty_;
		this.misses = misses_;
	});
	readOnly = $pkg.readOnly = $newType(0, $kindStruct, "sync.readOnly", true, "sync", false, function(m_, amended_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.m = false;
			this.amended = false;
			return;
		}
		this.m = m_;
		this.amended = amended_;
	});
	entry = $pkg.entry = $newType(0, $kindStruct, "sync.entry", true, "sync", false, function(p_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.p = 0;
			return;
		}
		this.p = p_;
	});
	Mutex = $pkg.Mutex = $newType(0, $kindStruct, "sync.Mutex", true, "sync", true, function(state_, sema_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.state = 0;
			this.sema = 0;
			return;
		}
		this.state = state_;
		this.sema = sema_;
	});
	poolLocalInternal = $pkg.poolLocalInternal = $newType(0, $kindStruct, "sync.poolLocalInternal", true, "sync", false, function(private$0_, shared_, Mutex_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.private$0 = $ifaceNil;
			this.shared = sliceType$4.nil;
			this.Mutex = new Mutex.ptr(0, 0);
			return;
		}
		this.private$0 = private$0_;
		this.shared = shared_;
		this.Mutex = Mutex_;
	});
	poolLocal = $pkg.poolLocal = $newType(0, $kindStruct, "sync.poolLocal", true, "sync", false, function(poolLocalInternal_, pad_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.poolLocalInternal = new poolLocalInternal.ptr($ifaceNil, sliceType$4.nil, new Mutex.ptr(0, 0));
			this.pad = arrayType$2.zero();
			return;
		}
		this.poolLocalInternal = poolLocalInternal_;
		this.pad = pad_;
	});
	notifyList = $pkg.notifyList = $newType(0, $kindStruct, "sync.notifyList", true, "sync", false, function(wait_, notify_, lock_, head_, tail_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.wait = 0;
			this.notify = 0;
			this.lock = 0;
			this.head = 0;
			this.tail = 0;
			return;
		}
		this.wait = wait_;
		this.notify = notify_;
		this.lock = lock_;
		this.head = head_;
		this.tail = tail_;
	});
	ptrType = $ptrType(Pool);
	sliceType = $sliceType(ptrType);
	ptrType$1 = $ptrType($Uint32);
	chanType = $chanType($Bool, false, false);
	sliceType$1 = $sliceType(chanType);
	ptrType$3 = $ptrType($emptyInterface);
	ptrType$4 = $ptrType(entry);
	ptrType$5 = $ptrType($UnsafePointer);
	ptrType$6 = $ptrType($Int32);
	ptrType$7 = $ptrType(poolLocal);
	sliceType$4 = $sliceType($emptyInterface);
	funcType = $funcType([], [$emptyInterface], false);
	funcType$1 = $funcType([$emptyInterface, $emptyInterface], [$Bool], false);
	ptrType$15 = $ptrType(Map);
	mapType = $mapType($emptyInterface, ptrType$4);
	ptrType$16 = $ptrType(Mutex);
	arrayType$2 = $arrayType($Uint8, 100);
	Pool.ptr.prototype.Get = function() {
		var _r, p, x, x$1, x$2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; p = $f.p; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		/* */ if (p.store.$length === 0) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (p.store.$length === 0) { */ case 1:
			/* */ if (!(p.New === $throwNilPointerError)) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (!(p.New === $throwNilPointerError)) { */ case 3:
				_r = p.New(); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				$s = -1; return _r;
			/* } */ case 4:
			$s = -1; return $ifaceNil;
		/* } */ case 2:
		x$2 = (x = p.store, x$1 = p.store.$length - 1 >> 0, ((x$1 < 0 || x$1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + x$1]));
		p.store = $subslice(p.store, 0, (p.store.$length - 1 >> 0));
		$s = -1; return x$2;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Pool.ptr.prototype.Get }; } $f._r = _r; $f.p = p; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.$s = $s; $f.$r = $r; return $f;
	};
	Pool.prototype.Get = function() { return this.$val.Get(); };
	Pool.ptr.prototype.Put = function(x) {
		var p, x;
		p = this;
		if ($interfaceIsEqual(x, $ifaceNil)) {
			return;
		}
		p.store = $append(p.store, x);
	};
	Pool.prototype.Put = function(x) { return this.$val.Put(x); };
	runtime_registerPoolCleanup = function(cleanup) {
		var cleanup;
	};
	runtime_SemacquireMutex = function(s, lifo) {
		var _entry, _entry$1, _entry$2, _entry$3, _entry$4, _key, _key$1, _key$2, _r, ch, lifo, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _entry = $f._entry; _entry$1 = $f._entry$1; _entry$2 = $f._entry$2; _entry$3 = $f._entry$3; _entry$4 = $f._entry$4; _key = $f._key; _key$1 = $f._key$1; _key$2 = $f._key$2; _r = $f._r; ch = $f.ch; lifo = $f.lifo; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		/* */ if (((s.$get() - (_entry = semAwoken[ptrType$1.keyFor(s)], _entry !== undefined ? _entry.v : 0) >>> 0)) === 0) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (((s.$get() - (_entry = semAwoken[ptrType$1.keyFor(s)], _entry !== undefined ? _entry.v : 0) >>> 0)) === 0) { */ case 1:
			ch = new $Chan($Bool, 0);
			if (lifo) {
				_key = s; (semWaiters || $throwRuntimeError("assignment to entry in nil map"))[ptrType$1.keyFor(_key)] = { k: _key, v: $appendSlice(new sliceType$1([ch]), (_entry$1 = semWaiters[ptrType$1.keyFor(s)], _entry$1 !== undefined ? _entry$1.v : sliceType$1.nil)) };
			} else {
				_key$1 = s; (semWaiters || $throwRuntimeError("assignment to entry in nil map"))[ptrType$1.keyFor(_key$1)] = { k: _key$1, v: $append((_entry$2 = semWaiters[ptrType$1.keyFor(s)], _entry$2 !== undefined ? _entry$2.v : sliceType$1.nil), ch) };
			}
			_r = $recv(ch); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_r[0];
			_key$2 = s; (semAwoken || $throwRuntimeError("assignment to entry in nil map"))[ptrType$1.keyFor(_key$2)] = { k: _key$2, v: (_entry$3 = semAwoken[ptrType$1.keyFor(s)], _entry$3 !== undefined ? _entry$3.v : 0) - (1) >>> 0 };
			if ((_entry$4 = semAwoken[ptrType$1.keyFor(s)], _entry$4 !== undefined ? _entry$4.v : 0) === 0) {
				delete semAwoken[ptrType$1.keyFor(s)];
			}
		/* } */ case 2:
		s.$set(s.$get() - (1) >>> 0);
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: runtime_SemacquireMutex }; } $f._entry = _entry; $f._entry$1 = _entry$1; $f._entry$2 = _entry$2; $f._entry$3 = _entry$3; $f._entry$4 = _entry$4; $f._key = _key; $f._key$1 = _key$1; $f._key$2 = _key$2; $f._r = _r; $f.ch = ch; $f.lifo = lifo; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	runtime_Semrelease = function(s, handoff) {
		var _entry, _entry$1, _key, _key$1, ch, handoff, s, w, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _entry = $f._entry; _entry$1 = $f._entry$1; _key = $f._key; _key$1 = $f._key$1; ch = $f.ch; handoff = $f.handoff; s = $f.s; w = $f.w; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s.$set(s.$get() + (1) >>> 0);
		w = (_entry = semWaiters[ptrType$1.keyFor(s)], _entry !== undefined ? _entry.v : sliceType$1.nil);
		if (w.$length === 0) {
			$s = -1; return;
		}
		ch = (0 >= w.$length ? ($throwRuntimeError("index out of range"), undefined) : w.$array[w.$offset + 0]);
		w = $subslice(w, 1);
		_key = s; (semWaiters || $throwRuntimeError("assignment to entry in nil map"))[ptrType$1.keyFor(_key)] = { k: _key, v: w };
		if (w.$length === 0) {
			delete semWaiters[ptrType$1.keyFor(s)];
		}
		_key$1 = s; (semAwoken || $throwRuntimeError("assignment to entry in nil map"))[ptrType$1.keyFor(_key$1)] = { k: _key$1, v: (_entry$1 = semAwoken[ptrType$1.keyFor(s)], _entry$1 !== undefined ? _entry$1.v : 0) + (1) >>> 0 };
		$r = $send(ch, true); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: runtime_Semrelease }; } $f._entry = _entry; $f._entry$1 = _entry$1; $f._key = _key; $f._key$1 = _key$1; $f.ch = ch; $f.handoff = handoff; $f.s = s; $f.w = w; $f.$s = $s; $f.$r = $r; return $f;
	};
	runtime_notifyListCheck = function(size) {
		var size;
	};
	runtime_canSpin = function(i) {
		var i;
		return false;
	};
	runtime_nanotime = function() {
		return $mul64($internalize(new ($global.Date)().getTime(), $Int64), new $Int64(0, 1000000));
	};
	throw$1 = function(s) {
		var s;
		$throwRuntimeError($externalize(s, $String));
	};
	newEntry = function(i) {
		var i, i$24ptr;
		return new entry.ptr(((i$24ptr || (i$24ptr = new ptrType$3(function() { return i; }, function($v) { i = $v; })))));
	};
	Map.ptr.prototype.Load = function(key) {
		var _entry, _entry$1, _entry$2, _tmp, _tmp$1, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, _tuple$5, e, key, m, ok, read, value, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _entry = $f._entry; _entry$1 = $f._entry$1; _entry$2 = $f._entry$2; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; _tuple$4 = $f._tuple$4; _tuple$5 = $f._tuple$5; e = $f.e; key = $f.key; m = $f.m; ok = $f.ok; read = $f.read; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		value = $ifaceNil;
		ok = false;
		m = this;
		_tuple = $assertType(m.read.Load(), readOnly, true);
		read = $clone(_tuple[0], readOnly);
		_tuple$1 = (_entry = read.m[$emptyInterface.keyFor(key)], _entry !== undefined ? [_entry.v, true] : [ptrType$4.nil, false]);
		e = _tuple$1[0];
		ok = _tuple$1[1];
		/* */ if (!ok && read.amended) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!ok && read.amended) { */ case 1:
			$r = m.mu.Lock(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_tuple$2 = $assertType(m.read.Load(), readOnly, true);
			readOnly.copy(read, _tuple$2[0]);
			_tuple$3 = (_entry$1 = read.m[$emptyInterface.keyFor(key)], _entry$1 !== undefined ? [_entry$1.v, true] : [ptrType$4.nil, false]);
			e = _tuple$3[0];
			ok = _tuple$3[1];
			if (!ok && read.amended) {
				_tuple$4 = (_entry$2 = m.dirty[$emptyInterface.keyFor(key)], _entry$2 !== undefined ? [_entry$2.v, true] : [ptrType$4.nil, false]);
				e = _tuple$4[0];
				ok = _tuple$4[1];
				m.missLocked();
			}
			$r = m.mu.Unlock(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 2:
		if (!ok) {
			_tmp = $ifaceNil;
			_tmp$1 = false;
			value = _tmp;
			ok = _tmp$1;
			$s = -1; return [value, ok];
		}
		_tuple$5 = e.load();
		value = _tuple$5[0];
		ok = _tuple$5[1];
		$s = -1; return [value, ok];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Map.ptr.prototype.Load }; } $f._entry = _entry; $f._entry$1 = _entry$1; $f._entry$2 = _entry$2; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f._tuple$4 = _tuple$4; $f._tuple$5 = _tuple$5; $f.e = e; $f.key = key; $f.m = m; $f.ok = ok; $f.read = read; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;
	};
	Map.prototype.Load = function(key) { return this.$val.Load(key); };
	entry.ptr.prototype.load = function() {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, e, ok, p, value;
		value = $ifaceNil;
		ok = false;
		e = this;
		p = atomic.LoadPointer((e.$ptr_p || (e.$ptr_p = new ptrType$5(function() { return this.$target.p; }, function($v) { this.$target.p = $v; }, e))));
		if (p === 0 || p === expunged) {
			_tmp = $ifaceNil;
			_tmp$1 = false;
			value = _tmp;
			ok = _tmp$1;
			return [value, ok];
		}
		_tmp$2 = (p).$get();
		_tmp$3 = true;
		value = _tmp$2;
		ok = _tmp$3;
		return [value, ok];
	};
	entry.prototype.load = function() { return this.$val.load(); };
	Map.ptr.prototype.Store = function(key, value) {
		var _entry, _entry$1, _entry$2, _key, _key$1, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, e, e$1, e$2, key, m, ok, ok$1, ok$2, read, value, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _entry = $f._entry; _entry$1 = $f._entry$1; _entry$2 = $f._entry$2; _key = $f._key; _key$1 = $f._key$1; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; _tuple$4 = $f._tuple$4; e = $f.e; e$1 = $f.e$1; e$2 = $f.e$2; key = $f.key; m = $f.m; ok = $f.ok; ok$1 = $f.ok$1; ok$2 = $f.ok$2; read = $f.read; value = $f.value; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		value = [value];
		m = this;
		_tuple = $assertType(m.read.Load(), readOnly, true);
		read = $clone(_tuple[0], readOnly);
		_tuple$1 = (_entry = read.m[$emptyInterface.keyFor(key)], _entry !== undefined ? [_entry.v, true] : [ptrType$4.nil, false]);
		e = _tuple$1[0];
		ok = _tuple$1[1];
		if (ok && e.tryStore((value.$ptr || (value.$ptr = new ptrType$3(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, value))))) {
			$s = -1; return;
		}
		$r = m.mu.Lock(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_tuple$2 = $assertType(m.read.Load(), readOnly, true);
		readOnly.copy(read, _tuple$2[0]);
		_tuple$3 = (_entry$1 = read.m[$emptyInterface.keyFor(key)], _entry$1 !== undefined ? [_entry$1.v, true] : [ptrType$4.nil, false]);
		e$1 = _tuple$3[0];
		ok$1 = _tuple$3[1];
		if (ok$1) {
			if (e$1.unexpungeLocked()) {
				_key = key; (m.dirty || $throwRuntimeError("assignment to entry in nil map"))[$emptyInterface.keyFor(_key)] = { k: _key, v: e$1 };
			}
			e$1.storeLocked((value.$ptr || (value.$ptr = new ptrType$3(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, value))));
		} else {
			_tuple$4 = (_entry$2 = m.dirty[$emptyInterface.keyFor(key)], _entry$2 !== undefined ? [_entry$2.v, true] : [ptrType$4.nil, false]);
			e$2 = _tuple$4[0];
			ok$2 = _tuple$4[1];
			if (ok$2) {
				e$2.storeLocked((value.$ptr || (value.$ptr = new ptrType$3(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, value))));
			} else {
				if (!read.amended) {
					m.dirtyLocked();
					m.read.Store((x = new readOnly.ptr(read.m, true), new x.constructor.elem(x)));
				}
				_key$1 = key; (m.dirty || $throwRuntimeError("assignment to entry in nil map"))[$emptyInterface.keyFor(_key$1)] = { k: _key$1, v: newEntry(value[0]) };
			}
		}
		$r = m.mu.Unlock(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Map.ptr.prototype.Store }; } $f._entry = _entry; $f._entry$1 = _entry$1; $f._entry$2 = _entry$2; $f._key = _key; $f._key$1 = _key$1; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f._tuple$4 = _tuple$4; $f.e = e; $f.e$1 = e$1; $f.e$2 = e$2; $f.key = key; $f.m = m; $f.ok = ok; $f.ok$1 = ok$1; $f.ok$2 = ok$2; $f.read = read; $f.value = value; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Map.prototype.Store = function(key, value) { return this.$val.Store(key, value); };
	entry.ptr.prototype.tryStore = function(i) {
		var e, i, p;
		e = this;
		p = atomic.LoadPointer((e.$ptr_p || (e.$ptr_p = new ptrType$5(function() { return this.$target.p; }, function($v) { this.$target.p = $v; }, e))));
		if (p === expunged) {
			return false;
		}
		while (true) {
			if (atomic.CompareAndSwapPointer((e.$ptr_p || (e.$ptr_p = new ptrType$5(function() { return this.$target.p; }, function($v) { this.$target.p = $v; }, e))), p, (i))) {
				return true;
			}
			p = atomic.LoadPointer((e.$ptr_p || (e.$ptr_p = new ptrType$5(function() { return this.$target.p; }, function($v) { this.$target.p = $v; }, e))));
			if (p === expunged) {
				return false;
			}
		}
	};
	entry.prototype.tryStore = function(i) { return this.$val.tryStore(i); };
	entry.ptr.prototype.unexpungeLocked = function() {
		var e, wasExpunged;
		wasExpunged = false;
		e = this;
		wasExpunged = atomic.CompareAndSwapPointer((e.$ptr_p || (e.$ptr_p = new ptrType$5(function() { return this.$target.p; }, function($v) { this.$target.p = $v; }, e))), expunged, 0);
		return wasExpunged;
	};
	entry.prototype.unexpungeLocked = function() { return this.$val.unexpungeLocked(); };
	entry.ptr.prototype.storeLocked = function(i) {
		var e, i;
		e = this;
		atomic.StorePointer((e.$ptr_p || (e.$ptr_p = new ptrType$5(function() { return this.$target.p; }, function($v) { this.$target.p = $v; }, e))), (i));
	};
	entry.prototype.storeLocked = function(i) { return this.$val.storeLocked(i); };
	Map.ptr.prototype.LoadOrStore = function(key, value) {
		var _entry, _entry$1, _entry$2, _key, _key$1, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, _tuple$5, _tuple$6, _tuple$7, actual, actual$1, e, e$1, e$2, key, loaded, loaded$1, m, ok, ok$1, ok$2, ok$3, read, value, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _entry = $f._entry; _entry$1 = $f._entry$1; _entry$2 = $f._entry$2; _key = $f._key; _key$1 = $f._key$1; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; _tuple$4 = $f._tuple$4; _tuple$5 = $f._tuple$5; _tuple$6 = $f._tuple$6; _tuple$7 = $f._tuple$7; actual = $f.actual; actual$1 = $f.actual$1; e = $f.e; e$1 = $f.e$1; e$2 = $f.e$2; key = $f.key; loaded = $f.loaded; loaded$1 = $f.loaded$1; m = $f.m; ok = $f.ok; ok$1 = $f.ok$1; ok$2 = $f.ok$2; ok$3 = $f.ok$3; read = $f.read; value = $f.value; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		actual = $ifaceNil;
		loaded = false;
		m = this;
		_tuple = $assertType(m.read.Load(), readOnly, true);
		read = $clone(_tuple[0], readOnly);
		_tuple$1 = (_entry = read.m[$emptyInterface.keyFor(key)], _entry !== undefined ? [_entry.v, true] : [ptrType$4.nil, false]);
		e = _tuple$1[0];
		ok = _tuple$1[1];
		if (ok) {
			_tuple$2 = e.tryLoadOrStore(value);
			actual$1 = _tuple$2[0];
			loaded$1 = _tuple$2[1];
			ok$1 = _tuple$2[2];
			if (ok$1) {
				_tmp = actual$1;
				_tmp$1 = loaded$1;
				actual = _tmp;
				loaded = _tmp$1;
				$s = -1; return [actual, loaded];
			}
		}
		$r = m.mu.Lock(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_tuple$3 = $assertType(m.read.Load(), readOnly, true);
		readOnly.copy(read, _tuple$3[0]);
		_tuple$4 = (_entry$1 = read.m[$emptyInterface.keyFor(key)], _entry$1 !== undefined ? [_entry$1.v, true] : [ptrType$4.nil, false]);
		e$1 = _tuple$4[0];
		ok$2 = _tuple$4[1];
		if (ok$2) {
			if (e$1.unexpungeLocked()) {
				_key = key; (m.dirty || $throwRuntimeError("assignment to entry in nil map"))[$emptyInterface.keyFor(_key)] = { k: _key, v: e$1 };
			}
			_tuple$5 = e$1.tryLoadOrStore(value);
			actual = _tuple$5[0];
			loaded = _tuple$5[1];
		} else {
			_tuple$6 = (_entry$2 = m.dirty[$emptyInterface.keyFor(key)], _entry$2 !== undefined ? [_entry$2.v, true] : [ptrType$4.nil, false]);
			e$2 = _tuple$6[0];
			ok$3 = _tuple$6[1];
			if (ok$3) {
				_tuple$7 = e$2.tryLoadOrStore(value);
				actual = _tuple$7[0];
				loaded = _tuple$7[1];
				m.missLocked();
			} else {
				if (!read.amended) {
					m.dirtyLocked();
					m.read.Store((x = new readOnly.ptr(read.m, true), new x.constructor.elem(x)));
				}
				_key$1 = key; (m.dirty || $throwRuntimeError("assignment to entry in nil map"))[$emptyInterface.keyFor(_key$1)] = { k: _key$1, v: newEntry(value) };
				_tmp$2 = value;
				_tmp$3 = false;
				actual = _tmp$2;
				loaded = _tmp$3;
			}
		}
		$r = m.mu.Unlock(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_tmp$4 = actual;
		_tmp$5 = loaded;
		actual = _tmp$4;
		loaded = _tmp$5;
		$s = -1; return [actual, loaded];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Map.ptr.prototype.LoadOrStore }; } $f._entry = _entry; $f._entry$1 = _entry$1; $f._entry$2 = _entry$2; $f._key = _key; $f._key$1 = _key$1; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f._tuple$4 = _tuple$4; $f._tuple$5 = _tuple$5; $f._tuple$6 = _tuple$6; $f._tuple$7 = _tuple$7; $f.actual = actual; $f.actual$1 = actual$1; $f.e = e; $f.e$1 = e$1; $f.e$2 = e$2; $f.key = key; $f.loaded = loaded; $f.loaded$1 = loaded$1; $f.m = m; $f.ok = ok; $f.ok$1 = ok$1; $f.ok$2 = ok$2; $f.ok$3 = ok$3; $f.read = read; $f.value = value; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Map.prototype.LoadOrStore = function(key, value) { return this.$val.LoadOrStore(key, value); };
	entry.ptr.prototype.tryLoadOrStore = function(i) {
		var _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, actual, e, i, ic, ic$24ptr, loaded, ok, p;
		actual = $ifaceNil;
		loaded = false;
		ok = false;
		e = this;
		p = atomic.LoadPointer((e.$ptr_p || (e.$ptr_p = new ptrType$5(function() { return this.$target.p; }, function($v) { this.$target.p = $v; }, e))));
		if (p === expunged) {
			_tmp = $ifaceNil;
			_tmp$1 = false;
			_tmp$2 = false;
			actual = _tmp;
			loaded = _tmp$1;
			ok = _tmp$2;
			return [actual, loaded, ok];
		}
		if (!(p === 0)) {
			_tmp$3 = (p).$get();
			_tmp$4 = true;
			_tmp$5 = true;
			actual = _tmp$3;
			loaded = _tmp$4;
			ok = _tmp$5;
			return [actual, loaded, ok];
		}
		ic = i;
		while (true) {
			if (atomic.CompareAndSwapPointer((e.$ptr_p || (e.$ptr_p = new ptrType$5(function() { return this.$target.p; }, function($v) { this.$target.p = $v; }, e))), 0, ((ic$24ptr || (ic$24ptr = new ptrType$3(function() { return ic; }, function($v) { ic = $v; })))))) {
				_tmp$6 = i;
				_tmp$7 = false;
				_tmp$8 = true;
				actual = _tmp$6;
				loaded = _tmp$7;
				ok = _tmp$8;
				return [actual, loaded, ok];
			}
			p = atomic.LoadPointer((e.$ptr_p || (e.$ptr_p = new ptrType$5(function() { return this.$target.p; }, function($v) { this.$target.p = $v; }, e))));
			if (p === expunged) {
				_tmp$9 = $ifaceNil;
				_tmp$10 = false;
				_tmp$11 = false;
				actual = _tmp$9;
				loaded = _tmp$10;
				ok = _tmp$11;
				return [actual, loaded, ok];
			}
			if (!(p === 0)) {
				_tmp$12 = (p).$get();
				_tmp$13 = true;
				_tmp$14 = true;
				actual = _tmp$12;
				loaded = _tmp$13;
				ok = _tmp$14;
				return [actual, loaded, ok];
			}
		}
	};
	entry.prototype.tryLoadOrStore = function(i) { return this.$val.tryLoadOrStore(i); };
	Map.ptr.prototype.Delete = function(key) {
		var _entry, _entry$1, _tuple, _tuple$1, _tuple$2, _tuple$3, e, key, m, ok, read, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _entry = $f._entry; _entry$1 = $f._entry$1; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; e = $f.e; key = $f.key; m = $f.m; ok = $f.ok; read = $f.read; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		m = this;
		_tuple = $assertType(m.read.Load(), readOnly, true);
		read = $clone(_tuple[0], readOnly);
		_tuple$1 = (_entry = read.m[$emptyInterface.keyFor(key)], _entry !== undefined ? [_entry.v, true] : [ptrType$4.nil, false]);
		e = _tuple$1[0];
		ok = _tuple$1[1];
		/* */ if (!ok && read.amended) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!ok && read.amended) { */ case 1:
			$r = m.mu.Lock(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_tuple$2 = $assertType(m.read.Load(), readOnly, true);
			readOnly.copy(read, _tuple$2[0]);
			_tuple$3 = (_entry$1 = read.m[$emptyInterface.keyFor(key)], _entry$1 !== undefined ? [_entry$1.v, true] : [ptrType$4.nil, false]);
			e = _tuple$3[0];
			ok = _tuple$3[1];
			if (!ok && read.amended) {
				delete m.dirty[$emptyInterface.keyFor(key)];
			}
			$r = m.mu.Unlock(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 2:
		if (ok) {
			e.delete$();
		}
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Map.ptr.prototype.Delete }; } $f._entry = _entry; $f._entry$1 = _entry$1; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f.e = e; $f.key = key; $f.m = m; $f.ok = ok; $f.read = read; $f.$s = $s; $f.$r = $r; return $f;
	};
	Map.prototype.Delete = function(key) { return this.$val.Delete(key); };
	entry.ptr.prototype.delete$ = function() {
		var e, hadValue, p;
		hadValue = false;
		e = this;
		while (true) {
			p = atomic.LoadPointer((e.$ptr_p || (e.$ptr_p = new ptrType$5(function() { return this.$target.p; }, function($v) { this.$target.p = $v; }, e))));
			if (p === 0 || p === expunged) {
				hadValue = false;
				return hadValue;
			}
			if (atomic.CompareAndSwapPointer((e.$ptr_p || (e.$ptr_p = new ptrType$5(function() { return this.$target.p; }, function($v) { this.$target.p = $v; }, e))), p, 0)) {
				hadValue = true;
				return hadValue;
			}
		}
	};
	entry.prototype.delete$ = function() { return this.$val.delete$(); };
	Map.ptr.prototype.Range = function(f) {
		var _entry, _i, _keys, _r, _ref, _tuple, _tuple$1, _tuple$2, e, f, k, m, ok, read, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _entry = $f._entry; _i = $f._i; _keys = $f._keys; _r = $f._r; _ref = $f._ref; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; e = $f.e; f = $f.f; k = $f.k; m = $f.m; ok = $f.ok; read = $f.read; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		m = this;
		_tuple = $assertType(m.read.Load(), readOnly, true);
		read = $clone(_tuple[0], readOnly);
		/* */ if (read.amended) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (read.amended) { */ case 1:
			$r = m.mu.Lock(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_tuple$1 = $assertType(m.read.Load(), readOnly, true);
			readOnly.copy(read, _tuple$1[0]);
			if (read.amended) {
				readOnly.copy(read, new readOnly.ptr(m.dirty, false));
				m.read.Store(new read.constructor.elem(read));
				m.dirty = false;
				m.misses = 0;
			}
			$r = m.mu.Unlock(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 2:
		_ref = read.m;
		_i = 0;
		_keys = $keys(_ref);
		/* while (true) { */ case 5:
			/* if (!(_i < _keys.length)) { break; } */ if(!(_i < _keys.length)) { $s = 6; continue; }
			_entry = _ref[_keys[_i]];
			if (_entry === undefined) {
				_i++;
				/* continue; */ $s = 5; continue;
			}
			k = _entry.k;
			e = _entry.v;
			_tuple$2 = e.load();
			v = _tuple$2[0];
			ok = _tuple$2[1];
			/* */ if (!ok) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if (!ok) { */ case 7:
				_i++;
				/* continue; */ $s = 5; continue;
			/* } */ case 8:
			_r = f(k, v); /* */ $s = 11; case 11: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			/* */ if (!_r) { $s = 9; continue; }
			/* */ $s = 10; continue;
			/* if (!_r) { */ case 9:
				/* break; */ $s = 6; continue;
			/* } */ case 10:
			_i++;
		/* } */ $s = 5; continue; case 6:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Map.ptr.prototype.Range }; } $f._entry = _entry; $f._i = _i; $f._keys = _keys; $f._r = _r; $f._ref = _ref; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f.e = e; $f.f = f; $f.k = k; $f.m = m; $f.ok = ok; $f.read = read; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Map.prototype.Range = function(f) { return this.$val.Range(f); };
	Map.ptr.prototype.missLocked = function() {
		var m, x;
		m = this;
		m.misses = m.misses + (1) >> 0;
		if (m.misses < $keys(m.dirty).length) {
			return;
		}
		m.read.Store((x = new readOnly.ptr(m.dirty, false), new x.constructor.elem(x)));
		m.dirty = false;
		m.misses = 0;
	};
	Map.prototype.missLocked = function() { return this.$val.missLocked(); };
	Map.ptr.prototype.dirtyLocked = function() {
		var _entry, _i, _key, _keys, _ref, _tuple, e, k, m, read, x;
		m = this;
		if (!(m.dirty === false)) {
			return;
		}
		_tuple = $assertType(m.read.Load(), readOnly, true);
		read = $clone(_tuple[0], readOnly);
		m.dirty = (x = $keys(read.m).length, ((x < 0 || x > 2147483647) ? $throwRuntimeError("makemap: size out of range") : {}));
		_ref = read.m;
		_i = 0;
		_keys = $keys(_ref);
		while (true) {
			if (!(_i < _keys.length)) { break; }
			_entry = _ref[_keys[_i]];
			if (_entry === undefined) {
				_i++;
				continue;
			}
			k = _entry.k;
			e = _entry.v;
			if (!e.tryExpungeLocked()) {
				_key = k; (m.dirty || $throwRuntimeError("assignment to entry in nil map"))[$emptyInterface.keyFor(_key)] = { k: _key, v: e };
			}
			_i++;
		}
	};
	Map.prototype.dirtyLocked = function() { return this.$val.dirtyLocked(); };
	entry.ptr.prototype.tryExpungeLocked = function() {
		var e, isExpunged, p;
		isExpunged = false;
		e = this;
		p = atomic.LoadPointer((e.$ptr_p || (e.$ptr_p = new ptrType$5(function() { return this.$target.p; }, function($v) { this.$target.p = $v; }, e))));
		while (true) {
			if (!(p === 0)) { break; }
			if (atomic.CompareAndSwapPointer((e.$ptr_p || (e.$ptr_p = new ptrType$5(function() { return this.$target.p; }, function($v) { this.$target.p = $v; }, e))), 0, expunged)) {
				isExpunged = true;
				return isExpunged;
			}
			p = atomic.LoadPointer((e.$ptr_p || (e.$ptr_p = new ptrType$5(function() { return this.$target.p; }, function($v) { this.$target.p = $v; }, e))));
		}
		isExpunged = p === expunged;
		return isExpunged;
	};
	entry.prototype.tryExpungeLocked = function() { return this.$val.tryExpungeLocked(); };
	Mutex.ptr.prototype.Lock = function() {
		var awoke, delta, iter, m, new$1, old, queueLifo, starving, waitStartTime, x, x$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; awoke = $f.awoke; delta = $f.delta; iter = $f.iter; m = $f.m; new$1 = $f.new$1; old = $f.old; queueLifo = $f.queueLifo; starving = $f.starving; waitStartTime = $f.waitStartTime; x = $f.x; x$1 = $f.x$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		m = this;
		if (atomic.CompareAndSwapInt32((m.$ptr_state || (m.$ptr_state = new ptrType$6(function() { return this.$target.state; }, function($v) { this.$target.state = $v; }, m))), 0, 1)) {
			if (false) {
				race.Acquire((m));
			}
			$s = -1; return;
		}
		waitStartTime = new $Int64(0, 0);
		starving = false;
		awoke = false;
		iter = 0;
		old = m.state;
		/* while (true) { */ case 1:
			/* */ if (((old & 5) === 1) && runtime_canSpin(iter)) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (((old & 5) === 1) && runtime_canSpin(iter)) { */ case 3:
				if (!awoke && ((old & 2) === 0) && !(((old >> 3 >> 0) === 0)) && atomic.CompareAndSwapInt32((m.$ptr_state || (m.$ptr_state = new ptrType$6(function() { return this.$target.state; }, function($v) { this.$target.state = $v; }, m))), old, old | 2)) {
					awoke = true;
				}
				runtime_doSpin();
				iter = iter + (1) >> 0;
				old = m.state;
				/* continue; */ $s = 1; continue;
			/* } */ case 4:
			new$1 = old;
			if ((old & 4) === 0) {
				new$1 = new$1 | (1);
			}
			if (!(((old & 5) === 0))) {
				new$1 = new$1 + (8) >> 0;
			}
			if (starving && !(((old & 1) === 0))) {
				new$1 = new$1 | (4);
			}
			if (awoke) {
				if ((new$1 & 2) === 0) {
					throw$1("sync: inconsistent mutex state");
				}
				new$1 = (new$1 & ~(2)) >> 0;
			}
			/* */ if (atomic.CompareAndSwapInt32((m.$ptr_state || (m.$ptr_state = new ptrType$6(function() { return this.$target.state; }, function($v) { this.$target.state = $v; }, m))), old, new$1)) { $s = 5; continue; }
			/* */ $s = 6; continue;
			/* if (atomic.CompareAndSwapInt32((m.$ptr_state || (m.$ptr_state = new ptrType$6(function() { return this.$target.state; }, function($v) { this.$target.state = $v; }, m))), old, new$1)) { */ case 5:
				if ((old & 5) === 0) {
					/* break; */ $s = 2; continue;
				}
				queueLifo = !((waitStartTime.$high === 0 && waitStartTime.$low === 0));
				if ((waitStartTime.$high === 0 && waitStartTime.$low === 0)) {
					waitStartTime = runtime_nanotime();
				}
				$r = runtime_SemacquireMutex((m.$ptr_sema || (m.$ptr_sema = new ptrType$1(function() { return this.$target.sema; }, function($v) { this.$target.sema = $v; }, m))), queueLifo); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				starving = starving || (x = (x$1 = runtime_nanotime(), new $Int64(x$1.$high - waitStartTime.$high, x$1.$low - waitStartTime.$low)), (x.$high > 0 || (x.$high === 0 && x.$low > 1000000)));
				old = m.state;
				if (!(((old & 4) === 0))) {
					if (!(((old & 3) === 0)) || ((old >> 3 >> 0) === 0)) {
						throw$1("sync: inconsistent mutex state");
					}
					delta = -7;
					if (!starving || ((old >> 3 >> 0) === 1)) {
						delta = delta - (4) >> 0;
					}
					atomic.AddInt32((m.$ptr_state || (m.$ptr_state = new ptrType$6(function() { return this.$target.state; }, function($v) { this.$target.state = $v; }, m))), delta);
					/* break; */ $s = 2; continue;
				}
				awoke = true;
				iter = 0;
				$s = 7; continue;
			/* } else { */ case 6:
				old = m.state;
			/* } */ case 7:
		/* } */ $s = 1; continue; case 2:
		if (false) {
			race.Acquire((m));
		}
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Mutex.ptr.prototype.Lock }; } $f.awoke = awoke; $f.delta = delta; $f.iter = iter; $f.m = m; $f.new$1 = new$1; $f.old = old; $f.queueLifo = queueLifo; $f.starving = starving; $f.waitStartTime = waitStartTime; $f.x = x; $f.x$1 = x$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	Mutex.prototype.Lock = function() { return this.$val.Lock(); };
	Mutex.ptr.prototype.Unlock = function() {
		var m, new$1, old, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; m = $f.m; new$1 = $f.new$1; old = $f.old; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		m = this;
		if (false) {
			$unused(m.state);
			race.Release((m));
		}
		new$1 = atomic.AddInt32((m.$ptr_state || (m.$ptr_state = new ptrType$6(function() { return this.$target.state; }, function($v) { this.$target.state = $v; }, m))), -1);
		if ((((new$1 + 1 >> 0)) & 1) === 0) {
			throw$1("sync: unlock of unlocked mutex");
		}
		/* */ if ((new$1 & 4) === 0) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if ((new$1 & 4) === 0) { */ case 1:
			old = new$1;
			/* while (true) { */ case 4:
				if (((old >> 3 >> 0) === 0) || !(((old & 7) === 0))) {
					$s = -1; return;
				}
				new$1 = ((old - 8 >> 0)) | 2;
				/* */ if (atomic.CompareAndSwapInt32((m.$ptr_state || (m.$ptr_state = new ptrType$6(function() { return this.$target.state; }, function($v) { this.$target.state = $v; }, m))), old, new$1)) { $s = 6; continue; }
				/* */ $s = 7; continue;
				/* if (atomic.CompareAndSwapInt32((m.$ptr_state || (m.$ptr_state = new ptrType$6(function() { return this.$target.state; }, function($v) { this.$target.state = $v; }, m))), old, new$1)) { */ case 6:
					$r = runtime_Semrelease((m.$ptr_sema || (m.$ptr_sema = new ptrType$1(function() { return this.$target.sema; }, function($v) { this.$target.sema = $v; }, m))), false); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$s = -1; return;
				/* } */ case 7:
				old = m.state;
			/* } */ $s = 4; continue; case 5:
			$s = 3; continue;
		/* } else { */ case 2:
			$r = runtime_Semrelease((m.$ptr_sema || (m.$ptr_sema = new ptrType$1(function() { return this.$target.sema; }, function($v) { this.$target.sema = $v; }, m))), true); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 3:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Mutex.ptr.prototype.Unlock }; } $f.m = m; $f.new$1 = new$1; $f.old = old; $f.$s = $s; $f.$r = $r; return $f;
	};
	Mutex.prototype.Unlock = function() { return this.$val.Unlock(); };
	poolCleanup = function() {
		var _i, _i$1, _ref, _ref$1, i, i$1, j, l, p, x;
		_ref = allPools;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			p = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			((i < 0 || i >= allPools.$length) ? ($throwRuntimeError("index out of range"), undefined) : allPools.$array[allPools.$offset + i] = ptrType.nil);
			i$1 = 0;
			while (true) {
				if (!(i$1 < ((p.localSize >> 0)))) { break; }
				l = indexLocal(p.local, i$1);
				l.poolLocalInternal.private$0 = $ifaceNil;
				_ref$1 = l.poolLocalInternal.shared;
				_i$1 = 0;
				while (true) {
					if (!(_i$1 < _ref$1.$length)) { break; }
					j = _i$1;
					(x = l.poolLocalInternal.shared, ((j < 0 || j >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + j] = $ifaceNil));
					_i$1++;
				}
				l.poolLocalInternal.shared = sliceType$4.nil;
				i$1 = i$1 + (1) >> 0;
			}
			p.local = 0;
			p.localSize = 0;
			_i++;
		}
		allPools = new sliceType([]);
	};
	init = function() {
		runtime_registerPoolCleanup(poolCleanup);
	};
	indexLocal = function(l, i) {
		var i, l, lp;
		lp = (((l) + ($imul(((i >>> 0)), 128) >>> 0) >>> 0));
		return ($pointerOfStructConversion(lp, ptrType$7));
	};
	init$1 = function() {
		var n;
		n = new notifyList.ptr(0, 0, 0, 0, 0);
		runtime_notifyListCheck(20);
	};
	runtime_doSpin = function() {
		$throwRuntimeError("native function not implemented: sync.runtime_doSpin");
	};
	ptrType.methods = [{prop: "Get", name: "Get", pkg: "", typ: $funcType([], [$emptyInterface], false)}, {prop: "Put", name: "Put", pkg: "", typ: $funcType([$emptyInterface], [], false)}, {prop: "getSlow", name: "getSlow", pkg: "sync", typ: $funcType([], [$emptyInterface], false)}, {prop: "pin", name: "pin", pkg: "sync", typ: $funcType([], [ptrType$7], false)}, {prop: "pinSlow", name: "pinSlow", pkg: "sync", typ: $funcType([], [ptrType$7], false)}];
	ptrType$15.methods = [{prop: "Load", name: "Load", pkg: "", typ: $funcType([$emptyInterface], [$emptyInterface, $Bool], false)}, {prop: "Store", name: "Store", pkg: "", typ: $funcType([$emptyInterface, $emptyInterface], [], false)}, {prop: "LoadOrStore", name: "LoadOrStore", pkg: "", typ: $funcType([$emptyInterface, $emptyInterface], [$emptyInterface, $Bool], false)}, {prop: "Delete", name: "Delete", pkg: "", typ: $funcType([$emptyInterface], [], false)}, {prop: "Range", name: "Range", pkg: "", typ: $funcType([funcType$1], [], false)}, {prop: "missLocked", name: "missLocked", pkg: "sync", typ: $funcType([], [], false)}, {prop: "dirtyLocked", name: "dirtyLocked", pkg: "sync", typ: $funcType([], [], false)}];
	ptrType$4.methods = [{prop: "load", name: "load", pkg: "sync", typ: $funcType([], [$emptyInterface, $Bool], false)}, {prop: "tryStore", name: "tryStore", pkg: "sync", typ: $funcType([ptrType$3], [$Bool], false)}, {prop: "unexpungeLocked", name: "unexpungeLocked", pkg: "sync", typ: $funcType([], [$Bool], false)}, {prop: "storeLocked", name: "storeLocked", pkg: "sync", typ: $funcType([ptrType$3], [], false)}, {prop: "tryLoadOrStore", name: "tryLoadOrStore", pkg: "sync", typ: $funcType([$emptyInterface], [$emptyInterface, $Bool, $Bool], false)}, {prop: "delete$", name: "delete", pkg: "sync", typ: $funcType([], [$Bool], false)}, {prop: "tryExpungeLocked", name: "tryExpungeLocked", pkg: "sync", typ: $funcType([], [$Bool], false)}];
	ptrType$16.methods = [{prop: "Lock", name: "Lock", pkg: "", typ: $funcType([], [], false)}, {prop: "Unlock", name: "Unlock", pkg: "", typ: $funcType([], [], false)}];
	Pool.init("sync", [{prop: "local", name: "local", anonymous: false, exported: false, typ: $UnsafePointer, tag: ""}, {prop: "localSize", name: "localSize", anonymous: false, exported: false, typ: $Uintptr, tag: ""}, {prop: "store", name: "store", anonymous: false, exported: false, typ: sliceType$4, tag: ""}, {prop: "New", name: "New", anonymous: false, exported: true, typ: funcType, tag: ""}]);
	Map.init("sync", [{prop: "mu", name: "mu", anonymous: false, exported: false, typ: Mutex, tag: ""}, {prop: "read", name: "read", anonymous: false, exported: false, typ: atomic.Value, tag: ""}, {prop: "dirty", name: "dirty", anonymous: false, exported: false, typ: mapType, tag: ""}, {prop: "misses", name: "misses", anonymous: false, exported: false, typ: $Int, tag: ""}]);
	readOnly.init("sync", [{prop: "m", name: "m", anonymous: false, exported: false, typ: mapType, tag: ""}, {prop: "amended", name: "amended", anonymous: false, exported: false, typ: $Bool, tag: ""}]);
	entry.init("sync", [{prop: "p", name: "p", anonymous: false, exported: false, typ: $UnsafePointer, tag: ""}]);
	Mutex.init("sync", [{prop: "state", name: "state", anonymous: false, exported: false, typ: $Int32, tag: ""}, {prop: "sema", name: "sema", anonymous: false, exported: false, typ: $Uint32, tag: ""}]);
	poolLocalInternal.init("sync", [{prop: "private$0", name: "private", anonymous: false, exported: false, typ: $emptyInterface, tag: ""}, {prop: "shared", name: "shared", anonymous: false, exported: false, typ: sliceType$4, tag: ""}, {prop: "Mutex", name: "Mutex", anonymous: true, exported: true, typ: Mutex, tag: ""}]);
	poolLocal.init("sync", [{prop: "poolLocalInternal", name: "poolLocalInternal", anonymous: true, exported: false, typ: poolLocalInternal, tag: ""}, {prop: "pad", name: "pad", anonymous: false, exported: false, typ: arrayType$2, tag: ""}]);
	notifyList.init("sync", [{prop: "wait", name: "wait", anonymous: false, exported: false, typ: $Uint32, tag: ""}, {prop: "notify", name: "notify", anonymous: false, exported: false, typ: $Uint32, tag: ""}, {prop: "lock", name: "lock", anonymous: false, exported: false, typ: $Uintptr, tag: ""}, {prop: "head", name: "head", anonymous: false, exported: false, typ: $UnsafePointer, tag: ""}, {prop: "tail", name: "tail", anonymous: false, exported: false, typ: $UnsafePointer, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = js.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = race.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = runtime.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = atomic.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		allPools = sliceType.nil;
		semWaiters = {};
		semAwoken = {};
		expunged = (new Uint8Array(8));
		init();
		init$1();
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["io"] = (function() {
	var $pkg = {}, $init, errors, sync, atomic, Reader, Writer, ReaderFrom, WriterTo, ByteReader, ByteScanner, RuneScanner, stringWriter, sliceType, errWhence, errOffset, WriteString, ReadAtLeast, ReadFull;
	errors = $packages["errors"];
	sync = $packages["sync"];
	atomic = $packages["sync/atomic"];
	Reader = $pkg.Reader = $newType(8, $kindInterface, "io.Reader", true, "io", true, null);
	Writer = $pkg.Writer = $newType(8, $kindInterface, "io.Writer", true, "io", true, null);
	ReaderFrom = $pkg.ReaderFrom = $newType(8, $kindInterface, "io.ReaderFrom", true, "io", true, null);
	WriterTo = $pkg.WriterTo = $newType(8, $kindInterface, "io.WriterTo", true, "io", true, null);
	ByteReader = $pkg.ByteReader = $newType(8, $kindInterface, "io.ByteReader", true, "io", true, null);
	ByteScanner = $pkg.ByteScanner = $newType(8, $kindInterface, "io.ByteScanner", true, "io", true, null);
	RuneScanner = $pkg.RuneScanner = $newType(8, $kindInterface, "io.RuneScanner", true, "io", true, null);
	stringWriter = $pkg.stringWriter = $newType(8, $kindInterface, "io.stringWriter", true, "io", false, null);
	sliceType = $sliceType($Uint8);
	WriteString = function(w, s) {
		var _r, _r$1, _tuple, _tuple$1, _tuple$2, err, n, ok, s, sw, w, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; err = $f.err; n = $f.n; ok = $f.ok; s = $f.s; sw = $f.sw; w = $f.w; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = 0;
		err = $ifaceNil;
		_tuple = $assertType(w, stringWriter, true);
		sw = _tuple[0];
		ok = _tuple[1];
		/* */ if (ok) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (ok) { */ case 1:
			_r = sw.WriteString(s); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple$1 = _r;
			n = _tuple$1[0];
			err = _tuple$1[1];
			$s = -1; return [n, err];
		/* } */ case 2:
		_r$1 = w.Write((new sliceType($stringToBytes(s)))); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple$2 = _r$1;
		n = _tuple$2[0];
		err = _tuple$2[1];
		$s = -1; return [n, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: WriteString }; } $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f.err = err; $f.n = n; $f.ok = ok; $f.s = s; $f.sw = sw; $f.w = w; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.WriteString = WriteString;
	ReadAtLeast = function(r, buf, min) {
		var _r, _tmp, _tmp$1, _tuple, buf, err, min, n, nn, r, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tuple = $f._tuple; buf = $f.buf; err = $f.err; min = $f.min; n = $f.n; nn = $f.nn; r = $f.r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = 0;
		err = $ifaceNil;
		if (buf.$length < min) {
			_tmp = 0;
			_tmp$1 = $pkg.ErrShortBuffer;
			n = _tmp;
			err = _tmp$1;
			$s = -1; return [n, err];
		}
		/* while (true) { */ case 1:
			/* if (!(n < min && $interfaceIsEqual(err, $ifaceNil))) { break; } */ if(!(n < min && $interfaceIsEqual(err, $ifaceNil))) { $s = 2; continue; }
			nn = 0;
			_r = r.Read($subslice(buf, n)); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r;
			nn = _tuple[0];
			err = _tuple[1];
			n = n + (nn) >> 0;
		/* } */ $s = 1; continue; case 2:
		if (n >= min) {
			err = $ifaceNil;
		} else if (n > 0 && $interfaceIsEqual(err, $pkg.EOF)) {
			err = $pkg.ErrUnexpectedEOF;
		}
		$s = -1; return [n, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: ReadAtLeast }; } $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tuple = _tuple; $f.buf = buf; $f.err = err; $f.min = min; $f.n = n; $f.nn = nn; $f.r = r; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.ReadAtLeast = ReadAtLeast;
	ReadFull = function(r, buf) {
		var _r, _tuple, buf, err, n, r, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; buf = $f.buf; err = $f.err; n = $f.n; r = $f.r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = 0;
		err = $ifaceNil;
		_r = ReadAtLeast(r, buf, buf.$length); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		n = _tuple[0];
		err = _tuple[1];
		$s = -1; return [n, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: ReadFull }; } $f._r = _r; $f._tuple = _tuple; $f.buf = buf; $f.err = err; $f.n = n; $f.r = r; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.ReadFull = ReadFull;
	Reader.init([{prop: "Read", name: "Read", pkg: "", typ: $funcType([sliceType], [$Int, $error], false)}]);
	Writer.init([{prop: "Write", name: "Write", pkg: "", typ: $funcType([sliceType], [$Int, $error], false)}]);
	ReaderFrom.init([{prop: "ReadFrom", name: "ReadFrom", pkg: "", typ: $funcType([Reader], [$Int64, $error], false)}]);
	WriterTo.init([{prop: "WriteTo", name: "WriteTo", pkg: "", typ: $funcType([Writer], [$Int64, $error], false)}]);
	ByteReader.init([{prop: "ReadByte", name: "ReadByte", pkg: "", typ: $funcType([], [$Uint8, $error], false)}]);
	ByteScanner.init([{prop: "ReadByte", name: "ReadByte", pkg: "", typ: $funcType([], [$Uint8, $error], false)}, {prop: "UnreadByte", name: "UnreadByte", pkg: "", typ: $funcType([], [$error], false)}]);
	RuneScanner.init([{prop: "ReadRune", name: "ReadRune", pkg: "", typ: $funcType([], [$Int32, $Int, $error], false)}, {prop: "UnreadRune", name: "UnreadRune", pkg: "", typ: $funcType([], [$error], false)}]);
	stringWriter.init([{prop: "WriteString", name: "WriteString", pkg: "", typ: $funcType([$String], [$Int, $error], false)}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = errors.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = sync.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = atomic.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$pkg.ErrShortWrite = errors.New("short write");
		$pkg.ErrShortBuffer = errors.New("short buffer");
		$pkg.EOF = errors.New("EOF");
		$pkg.ErrUnexpectedEOF = errors.New("unexpected EOF");
		$pkg.ErrNoProgress = errors.New("multiple Read calls return no data or error");
		errWhence = errors.New("Seek: invalid whence");
		errOffset = errors.New("Seek: invalid offset");
		$pkg.ErrClosedPipe = errors.New("io: read/write on closed pipe");
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["unicode"] = (function() {
	var $pkg = {}, $init, RangeTable, Range16, Range32, sliceType, sliceType$1, ptrType, sliceType$2, _L, _Lu, _M, _N, _P, _S, properties, IsPrint, In, is16, is32, Is, isExcludingLatin, IsUpper;
	RangeTable = $pkg.RangeTable = $newType(0, $kindStruct, "unicode.RangeTable", true, "unicode", true, function(R16_, R32_, LatinOffset_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.R16 = sliceType.nil;
			this.R32 = sliceType$1.nil;
			this.LatinOffset = 0;
			return;
		}
		this.R16 = R16_;
		this.R32 = R32_;
		this.LatinOffset = LatinOffset_;
	});
	Range16 = $pkg.Range16 = $newType(0, $kindStruct, "unicode.Range16", true, "unicode", true, function(Lo_, Hi_, Stride_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Lo = 0;
			this.Hi = 0;
			this.Stride = 0;
			return;
		}
		this.Lo = Lo_;
		this.Hi = Hi_;
		this.Stride = Stride_;
	});
	Range32 = $pkg.Range32 = $newType(0, $kindStruct, "unicode.Range32", true, "unicode", true, function(Lo_, Hi_, Stride_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Lo = 0;
			this.Hi = 0;
			this.Stride = 0;
			return;
		}
		this.Lo = Lo_;
		this.Hi = Hi_;
		this.Stride = Stride_;
	});
	sliceType = $sliceType(Range16);
	sliceType$1 = $sliceType(Range32);
	ptrType = $ptrType(RangeTable);
	sliceType$2 = $sliceType(ptrType);
	IsPrint = function(r) {
		var r, x;
		if (((r >>> 0)) <= 255) {
			return !(((((x = ((r << 24 >>> 24)), ((x < 0 || x >= properties.length) ? ($throwRuntimeError("index out of range"), undefined) : properties[x])) & 128) >>> 0) === 0));
		}
		return In(r, $pkg.PrintRanges);
	};
	$pkg.IsPrint = IsPrint;
	In = function(r, ranges) {
		var _i, _ref, inside, r, ranges;
		_ref = ranges;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			inside = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			if (Is(inside, r)) {
				return true;
			}
			_i++;
		}
		return false;
	};
	$pkg.In = In;
	is16 = function(ranges, r) {
		var _i, _q, _r, _r$1, _ref, hi, i, lo, m, r, range_, range_$1, ranges;
		if (ranges.$length <= 18 || r <= 255) {
			_ref = ranges;
			_i = 0;
			while (true) {
				if (!(_i < _ref.$length)) { break; }
				i = _i;
				range_ = ((i < 0 || i >= ranges.$length) ? ($throwRuntimeError("index out of range"), undefined) : ranges.$array[ranges.$offset + i]);
				if (r < range_.Lo) {
					return false;
				}
				if (r <= range_.Hi) {
					return (range_.Stride === 1) || ((_r = ((r - range_.Lo << 16 >>> 16)) % range_.Stride, _r === _r ? _r : $throwRuntimeError("integer divide by zero")) === 0);
				}
				_i++;
			}
			return false;
		}
		lo = 0;
		hi = ranges.$length;
		while (true) {
			if (!(lo < hi)) { break; }
			m = lo + (_q = ((hi - lo >> 0)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) >> 0;
			range_$1 = ((m < 0 || m >= ranges.$length) ? ($throwRuntimeError("index out of range"), undefined) : ranges.$array[ranges.$offset + m]);
			if (range_$1.Lo <= r && r <= range_$1.Hi) {
				return (range_$1.Stride === 1) || ((_r$1 = ((r - range_$1.Lo << 16 >>> 16)) % range_$1.Stride, _r$1 === _r$1 ? _r$1 : $throwRuntimeError("integer divide by zero")) === 0);
			}
			if (r < range_$1.Lo) {
				hi = m;
			} else {
				lo = m + 1 >> 0;
			}
		}
		return false;
	};
	is32 = function(ranges, r) {
		var _i, _q, _r, _r$1, _ref, hi, i, lo, m, r, range_, range_$1, ranges;
		if (ranges.$length <= 18) {
			_ref = ranges;
			_i = 0;
			while (true) {
				if (!(_i < _ref.$length)) { break; }
				i = _i;
				range_ = ((i < 0 || i >= ranges.$length) ? ($throwRuntimeError("index out of range"), undefined) : ranges.$array[ranges.$offset + i]);
				if (r < range_.Lo) {
					return false;
				}
				if (r <= range_.Hi) {
					return (range_.Stride === 1) || ((_r = ((r - range_.Lo >>> 0)) % range_.Stride, _r === _r ? _r : $throwRuntimeError("integer divide by zero")) === 0);
				}
				_i++;
			}
			return false;
		}
		lo = 0;
		hi = ranges.$length;
		while (true) {
			if (!(lo < hi)) { break; }
			m = lo + (_q = ((hi - lo >> 0)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) >> 0;
			range_$1 = $clone(((m < 0 || m >= ranges.$length) ? ($throwRuntimeError("index out of range"), undefined) : ranges.$array[ranges.$offset + m]), Range32);
			if (range_$1.Lo <= r && r <= range_$1.Hi) {
				return (range_$1.Stride === 1) || ((_r$1 = ((r - range_$1.Lo >>> 0)) % range_$1.Stride, _r$1 === _r$1 ? _r$1 : $throwRuntimeError("integer divide by zero")) === 0);
			}
			if (r < range_$1.Lo) {
				hi = m;
			} else {
				lo = m + 1 >> 0;
			}
		}
		return false;
	};
	Is = function(rangeTab, r) {
		var r, r16, r32, rangeTab, x;
		r16 = rangeTab.R16;
		if (r16.$length > 0 && r <= (((x = r16.$length - 1 >> 0, ((x < 0 || x >= r16.$length) ? ($throwRuntimeError("index out of range"), undefined) : r16.$array[r16.$offset + x])).Hi >> 0))) {
			return is16(r16, ((r << 16 >>> 16)));
		}
		r32 = rangeTab.R32;
		if (r32.$length > 0 && r >= (((0 >= r32.$length ? ($throwRuntimeError("index out of range"), undefined) : r32.$array[r32.$offset + 0]).Lo >> 0))) {
			return is32(r32, ((r >>> 0)));
		}
		return false;
	};
	$pkg.Is = Is;
	isExcludingLatin = function(rangeTab, r) {
		var off, r, r16, r32, rangeTab, x;
		r16 = rangeTab.R16;
		off = rangeTab.LatinOffset;
		if (r16.$length > off && r <= (((x = r16.$length - 1 >> 0, ((x < 0 || x >= r16.$length) ? ($throwRuntimeError("index out of range"), undefined) : r16.$array[r16.$offset + x])).Hi >> 0))) {
			return is16($subslice(r16, off), ((r << 16 >>> 16)));
		}
		r32 = rangeTab.R32;
		if (r32.$length > 0 && r >= (((0 >= r32.$length ? ($throwRuntimeError("index out of range"), undefined) : r32.$array[r32.$offset + 0]).Lo >> 0))) {
			return is32(r32, ((r >>> 0)));
		}
		return false;
	};
	IsUpper = function(r) {
		var r, x;
		if (((r >>> 0)) <= 255) {
			return (((x = ((r << 24 >>> 24)), ((x < 0 || x >= properties.length) ? ($throwRuntimeError("index out of range"), undefined) : properties[x])) & 96) >>> 0) === 32;
		}
		return isExcludingLatin($pkg.Upper, r);
	};
	$pkg.IsUpper = IsUpper;
	RangeTable.init("", [{prop: "R16", name: "R16", anonymous: false, exported: true, typ: sliceType, tag: ""}, {prop: "R32", name: "R32", anonymous: false, exported: true, typ: sliceType$1, tag: ""}, {prop: "LatinOffset", name: "LatinOffset", anonymous: false, exported: true, typ: $Int, tag: ""}]);
	Range16.init("", [{prop: "Lo", name: "Lo", anonymous: false, exported: true, typ: $Uint16, tag: ""}, {prop: "Hi", name: "Hi", anonymous: false, exported: true, typ: $Uint16, tag: ""}, {prop: "Stride", name: "Stride", anonymous: false, exported: true, typ: $Uint16, tag: ""}]);
	Range32.init("", [{prop: "Lo", name: "Lo", anonymous: false, exported: true, typ: $Uint32, tag: ""}, {prop: "Hi", name: "Hi", anonymous: false, exported: true, typ: $Uint32, tag: ""}, {prop: "Stride", name: "Stride", anonymous: false, exported: true, typ: $Uint32, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_L = new RangeTable.ptr(new sliceType([new Range16.ptr(65, 90, 1), new Range16.ptr(97, 122, 1), new Range16.ptr(170, 181, 11), new Range16.ptr(186, 192, 6), new Range16.ptr(193, 214, 1), new Range16.ptr(216, 246, 1), new Range16.ptr(248, 705, 1), new Range16.ptr(710, 721, 1), new Range16.ptr(736, 740, 1), new Range16.ptr(748, 750, 2), new Range16.ptr(880, 884, 1), new Range16.ptr(886, 887, 1), new Range16.ptr(890, 893, 1), new Range16.ptr(895, 902, 7), new Range16.ptr(904, 906, 1), new Range16.ptr(908, 910, 2), new Range16.ptr(911, 929, 1), new Range16.ptr(931, 1013, 1), new Range16.ptr(1015, 1153, 1), new Range16.ptr(1162, 1327, 1), new Range16.ptr(1329, 1366, 1), new Range16.ptr(1369, 1377, 8), new Range16.ptr(1378, 1415, 1), new Range16.ptr(1488, 1514, 1), new Range16.ptr(1520, 1522, 1), new Range16.ptr(1568, 1610, 1), new Range16.ptr(1646, 1647, 1), new Range16.ptr(1649, 1747, 1), new Range16.ptr(1749, 1765, 16), new Range16.ptr(1766, 1774, 8), new Range16.ptr(1775, 1786, 11), new Range16.ptr(1787, 1788, 1), new Range16.ptr(1791, 1808, 17), new Range16.ptr(1810, 1839, 1), new Range16.ptr(1869, 1957, 1), new Range16.ptr(1969, 1994, 25), new Range16.ptr(1995, 2026, 1), new Range16.ptr(2036, 2037, 1), new Range16.ptr(2042, 2048, 6), new Range16.ptr(2049, 2069, 1), new Range16.ptr(2074, 2084, 10), new Range16.ptr(2088, 2112, 24), new Range16.ptr(2113, 2136, 1), new Range16.ptr(2144, 2154, 1), new Range16.ptr(2208, 2228, 1), new Range16.ptr(2230, 2237, 1), new Range16.ptr(2308, 2361, 1), new Range16.ptr(2365, 2384, 19), new Range16.ptr(2392, 2401, 1), new Range16.ptr(2417, 2432, 1), new Range16.ptr(2437, 2444, 1), new Range16.ptr(2447, 2448, 1), new Range16.ptr(2451, 2472, 1), new Range16.ptr(2474, 2480, 1), new Range16.ptr(2482, 2486, 4), new Range16.ptr(2487, 2489, 1), new Range16.ptr(2493, 2510, 17), new Range16.ptr(2524, 2525, 1), new Range16.ptr(2527, 2529, 1), new Range16.ptr(2544, 2545, 1), new Range16.ptr(2556, 2565, 9), new Range16.ptr(2566, 2570, 1), new Range16.ptr(2575, 2576, 1), new Range16.ptr(2579, 2600, 1), new Range16.ptr(2602, 2608, 1), new Range16.ptr(2610, 2611, 1), new Range16.ptr(2613, 2614, 1), new Range16.ptr(2616, 2617, 1), new Range16.ptr(2649, 2652, 1), new Range16.ptr(2654, 2674, 20), new Range16.ptr(2675, 2676, 1), new Range16.ptr(2693, 2701, 1), new Range16.ptr(2703, 2705, 1), new Range16.ptr(2707, 2728, 1), new Range16.ptr(2730, 2736, 1), new Range16.ptr(2738, 2739, 1), new Range16.ptr(2741, 2745, 1), new Range16.ptr(2749, 2768, 19), new Range16.ptr(2784, 2785, 1), new Range16.ptr(2809, 2821, 12), new Range16.ptr(2822, 2828, 1), new Range16.ptr(2831, 2832, 1), new Range16.ptr(2835, 2856, 1), new Range16.ptr(2858, 2864, 1), new Range16.ptr(2866, 2867, 1), new Range16.ptr(2869, 2873, 1), new Range16.ptr(2877, 2908, 31), new Range16.ptr(2909, 2911, 2), new Range16.ptr(2912, 2913, 1), new Range16.ptr(2929, 2947, 18), new Range16.ptr(2949, 2954, 1), new Range16.ptr(2958, 2960, 1), new Range16.ptr(2962, 2965, 1), new Range16.ptr(2969, 2970, 1), new Range16.ptr(2972, 2974, 2), new Range16.ptr(2975, 2979, 4), new Range16.ptr(2980, 2984, 4), new Range16.ptr(2985, 2986, 1), new Range16.ptr(2990, 3001, 1), new Range16.ptr(3024, 3077, 53), new Range16.ptr(3078, 3084, 1), new Range16.ptr(3086, 3088, 1), new Range16.ptr(3090, 3112, 1), new Range16.ptr(3114, 3129, 1), new Range16.ptr(3133, 3160, 27), new Range16.ptr(3161, 3162, 1), new Range16.ptr(3168, 3169, 1), new Range16.ptr(3200, 3205, 5), new Range16.ptr(3206, 3212, 1), new Range16.ptr(3214, 3216, 1), new Range16.ptr(3218, 3240, 1), new Range16.ptr(3242, 3251, 1), new Range16.ptr(3253, 3257, 1), new Range16.ptr(3261, 3294, 33), new Range16.ptr(3296, 3297, 1), new Range16.ptr(3313, 3314, 1), new Range16.ptr(3333, 3340, 1), new Range16.ptr(3342, 3344, 1), new Range16.ptr(3346, 3386, 1), new Range16.ptr(3389, 3406, 17), new Range16.ptr(3412, 3414, 1), new Range16.ptr(3423, 3425, 1), new Range16.ptr(3450, 3455, 1), new Range16.ptr(3461, 3478, 1), new Range16.ptr(3482, 3505, 1), new Range16.ptr(3507, 3515, 1), new Range16.ptr(3517, 3520, 3), new Range16.ptr(3521, 3526, 1), new Range16.ptr(3585, 3632, 1), new Range16.ptr(3634, 3635, 1), new Range16.ptr(3648, 3654, 1), new Range16.ptr(3713, 3714, 1), new Range16.ptr(3716, 3719, 3), new Range16.ptr(3720, 3722, 2), new Range16.ptr(3725, 3732, 7), new Range16.ptr(3733, 3735, 1), new Range16.ptr(3737, 3743, 1), new Range16.ptr(3745, 3747, 1), new Range16.ptr(3749, 3751, 2), new Range16.ptr(3754, 3755, 1), new Range16.ptr(3757, 3760, 1), new Range16.ptr(3762, 3763, 1), new Range16.ptr(3773, 3776, 3), new Range16.ptr(3777, 3780, 1), new Range16.ptr(3782, 3804, 22), new Range16.ptr(3805, 3807, 1), new Range16.ptr(3840, 3904, 64), new Range16.ptr(3905, 3911, 1), new Range16.ptr(3913, 3948, 1), new Range16.ptr(3976, 3980, 1), new Range16.ptr(4096, 4138, 1), new Range16.ptr(4159, 4176, 17), new Range16.ptr(4177, 4181, 1), new Range16.ptr(4186, 4189, 1), new Range16.ptr(4193, 4197, 4), new Range16.ptr(4198, 4206, 8), new Range16.ptr(4207, 4208, 1), new Range16.ptr(4213, 4225, 1), new Range16.ptr(4238, 4256, 18), new Range16.ptr(4257, 4293, 1), new Range16.ptr(4295, 4301, 6), new Range16.ptr(4304, 4346, 1), new Range16.ptr(4348, 4680, 1), new Range16.ptr(4682, 4685, 1), new Range16.ptr(4688, 4694, 1), new Range16.ptr(4696, 4698, 2), new Range16.ptr(4699, 4701, 1), new Range16.ptr(4704, 4744, 1), new Range16.ptr(4746, 4749, 1), new Range16.ptr(4752, 4784, 1), new Range16.ptr(4786, 4789, 1), new Range16.ptr(4792, 4798, 1), new Range16.ptr(4800, 4802, 2), new Range16.ptr(4803, 4805, 1), new Range16.ptr(4808, 4822, 1), new Range16.ptr(4824, 4880, 1), new Range16.ptr(4882, 4885, 1), new Range16.ptr(4888, 4954, 1), new Range16.ptr(4992, 5007, 1), new Range16.ptr(5024, 5109, 1), new Range16.ptr(5112, 5117, 1), new Range16.ptr(5121, 5740, 1), new Range16.ptr(5743, 5759, 1), new Range16.ptr(5761, 5786, 1), new Range16.ptr(5792, 5866, 1), new Range16.ptr(5873, 5880, 1), new Range16.ptr(5888, 5900, 1), new Range16.ptr(5902, 5905, 1), new Range16.ptr(5920, 5937, 1), new Range16.ptr(5952, 5969, 1), new Range16.ptr(5984, 5996, 1), new Range16.ptr(5998, 6000, 1), new Range16.ptr(6016, 6067, 1), new Range16.ptr(6103, 6108, 5), new Range16.ptr(6176, 6263, 1), new Range16.ptr(6272, 6276, 1), new Range16.ptr(6279, 6312, 1), new Range16.ptr(6314, 6320, 6), new Range16.ptr(6321, 6389, 1), new Range16.ptr(6400, 6430, 1), new Range16.ptr(6480, 6509, 1), new Range16.ptr(6512, 6516, 1), new Range16.ptr(6528, 6571, 1), new Range16.ptr(6576, 6601, 1), new Range16.ptr(6656, 6678, 1), new Range16.ptr(6688, 6740, 1), new Range16.ptr(6823, 6917, 94), new Range16.ptr(6918, 6963, 1), new Range16.ptr(6981, 6987, 1), new Range16.ptr(7043, 7072, 1), new Range16.ptr(7086, 7087, 1), new Range16.ptr(7098, 7141, 1), new Range16.ptr(7168, 7203, 1), new Range16.ptr(7245, 7247, 1), new Range16.ptr(7258, 7293, 1), new Range16.ptr(7296, 7304, 1), new Range16.ptr(7401, 7404, 1), new Range16.ptr(7406, 7409, 1), new Range16.ptr(7413, 7414, 1), new Range16.ptr(7424, 7615, 1), new Range16.ptr(7680, 7957, 1), new Range16.ptr(7960, 7965, 1), new Range16.ptr(7968, 8005, 1), new Range16.ptr(8008, 8013, 1), new Range16.ptr(8016, 8023, 1), new Range16.ptr(8025, 8031, 2), new Range16.ptr(8032, 8061, 1), new Range16.ptr(8064, 8116, 1), new Range16.ptr(8118, 8124, 1), new Range16.ptr(8126, 8130, 4), new Range16.ptr(8131, 8132, 1), new Range16.ptr(8134, 8140, 1), new Range16.ptr(8144, 8147, 1), new Range16.ptr(8150, 8155, 1), new Range16.ptr(8160, 8172, 1), new Range16.ptr(8178, 8180, 1), new Range16.ptr(8182, 8188, 1), new Range16.ptr(8305, 8319, 14), new Range16.ptr(8336, 8348, 1), new Range16.ptr(8450, 8455, 5), new Range16.ptr(8458, 8467, 1), new Range16.ptr(8469, 8473, 4), new Range16.ptr(8474, 8477, 1), new Range16.ptr(8484, 8490, 2), new Range16.ptr(8491, 8493, 1), new Range16.ptr(8495, 8505, 1), new Range16.ptr(8508, 8511, 1), new Range16.ptr(8517, 8521, 1), new Range16.ptr(8526, 8579, 53), new Range16.ptr(8580, 11264, 2684), new Range16.ptr(11265, 11310, 1), new Range16.ptr(11312, 11358, 1), new Range16.ptr(11360, 11492, 1), new Range16.ptr(11499, 11502, 1), new Range16.ptr(11506, 11507, 1), new Range16.ptr(11520, 11557, 1), new Range16.ptr(11559, 11565, 6), new Range16.ptr(11568, 11623, 1), new Range16.ptr(11631, 11648, 17), new Range16.ptr(11649, 11670, 1), new Range16.ptr(11680, 11686, 1), new Range16.ptr(11688, 11694, 1), new Range16.ptr(11696, 11702, 1), new Range16.ptr(11704, 11710, 1), new Range16.ptr(11712, 11718, 1), new Range16.ptr(11720, 11726, 1), new Range16.ptr(11728, 11734, 1), new Range16.ptr(11736, 11742, 1), new Range16.ptr(11823, 12293, 470), new Range16.ptr(12294, 12337, 43), new Range16.ptr(12338, 12341, 1), new Range16.ptr(12347, 12348, 1), new Range16.ptr(12353, 12438, 1), new Range16.ptr(12445, 12447, 1), new Range16.ptr(12449, 12538, 1), new Range16.ptr(12540, 12543, 1), new Range16.ptr(12549, 12590, 1), new Range16.ptr(12593, 12686, 1), new Range16.ptr(12704, 12730, 1), new Range16.ptr(12784, 12799, 1), new Range16.ptr(13312, 19893, 1), new Range16.ptr(19968, 40938, 1), new Range16.ptr(40960, 42124, 1), new Range16.ptr(42192, 42237, 1), new Range16.ptr(42240, 42508, 1), new Range16.ptr(42512, 42527, 1), new Range16.ptr(42538, 42539, 1), new Range16.ptr(42560, 42606, 1), new Range16.ptr(42623, 42653, 1), new Range16.ptr(42656, 42725, 1), new Range16.ptr(42775, 42783, 1), new Range16.ptr(42786, 42888, 1), new Range16.ptr(42891, 42926, 1), new Range16.ptr(42928, 42935, 1), new Range16.ptr(42999, 43009, 1), new Range16.ptr(43011, 43013, 1), new Range16.ptr(43015, 43018, 1), new Range16.ptr(43020, 43042, 1), new Range16.ptr(43072, 43123, 1), new Range16.ptr(43138, 43187, 1), new Range16.ptr(43250, 43255, 1), new Range16.ptr(43259, 43261, 2), new Range16.ptr(43274, 43301, 1), new Range16.ptr(43312, 43334, 1), new Range16.ptr(43360, 43388, 1), new Range16.ptr(43396, 43442, 1), new Range16.ptr(43471, 43488, 17), new Range16.ptr(43489, 43492, 1), new Range16.ptr(43494, 43503, 1), new Range16.ptr(43514, 43518, 1), new Range16.ptr(43520, 43560, 1), new Range16.ptr(43584, 43586, 1), new Range16.ptr(43588, 43595, 1), new Range16.ptr(43616, 43638, 1), new Range16.ptr(43642, 43646, 4), new Range16.ptr(43647, 43695, 1), new Range16.ptr(43697, 43701, 4), new Range16.ptr(43702, 43705, 3), new Range16.ptr(43706, 43709, 1), new Range16.ptr(43712, 43714, 2), new Range16.ptr(43739, 43741, 1), new Range16.ptr(43744, 43754, 1), new Range16.ptr(43762, 43764, 1), new Range16.ptr(43777, 43782, 1), new Range16.ptr(43785, 43790, 1), new Range16.ptr(43793, 43798, 1), new Range16.ptr(43808, 43814, 1), new Range16.ptr(43816, 43822, 1), new Range16.ptr(43824, 43866, 1), new Range16.ptr(43868, 43877, 1), new Range16.ptr(43888, 44002, 1), new Range16.ptr(44032, 55203, 1), new Range16.ptr(55216, 55238, 1), new Range16.ptr(55243, 55291, 1), new Range16.ptr(63744, 64109, 1), new Range16.ptr(64112, 64217, 1), new Range16.ptr(64256, 64262, 1), new Range16.ptr(64275, 64279, 1), new Range16.ptr(64285, 64287, 2), new Range16.ptr(64288, 64296, 1), new Range16.ptr(64298, 64310, 1), new Range16.ptr(64312, 64316, 1), new Range16.ptr(64318, 64320, 2), new Range16.ptr(64321, 64323, 2), new Range16.ptr(64324, 64326, 2), new Range16.ptr(64327, 64433, 1), new Range16.ptr(64467, 64829, 1), new Range16.ptr(64848, 64911, 1), new Range16.ptr(64914, 64967, 1), new Range16.ptr(65008, 65019, 1), new Range16.ptr(65136, 65140, 1), new Range16.ptr(65142, 65276, 1), new Range16.ptr(65313, 65338, 1), new Range16.ptr(65345, 65370, 1), new Range16.ptr(65382, 65470, 1), new Range16.ptr(65474, 65479, 1), new Range16.ptr(65482, 65487, 1), new Range16.ptr(65490, 65495, 1), new Range16.ptr(65498, 65500, 1)]), new sliceType$1([new Range32.ptr(65536, 65547, 1), new Range32.ptr(65549, 65574, 1), new Range32.ptr(65576, 65594, 1), new Range32.ptr(65596, 65597, 1), new Range32.ptr(65599, 65613, 1), new Range32.ptr(65616, 65629, 1), new Range32.ptr(65664, 65786, 1), new Range32.ptr(66176, 66204, 1), new Range32.ptr(66208, 66256, 1), new Range32.ptr(66304, 66335, 1), new Range32.ptr(66349, 66368, 1), new Range32.ptr(66370, 66377, 1), new Range32.ptr(66384, 66421, 1), new Range32.ptr(66432, 66461, 1), new Range32.ptr(66464, 66499, 1), new Range32.ptr(66504, 66511, 1), new Range32.ptr(66560, 66717, 1), new Range32.ptr(66736, 66771, 1), new Range32.ptr(66776, 66811, 1), new Range32.ptr(66816, 66855, 1), new Range32.ptr(66864, 66915, 1), new Range32.ptr(67072, 67382, 1), new Range32.ptr(67392, 67413, 1), new Range32.ptr(67424, 67431, 1), new Range32.ptr(67584, 67589, 1), new Range32.ptr(67592, 67594, 2), new Range32.ptr(67595, 67637, 1), new Range32.ptr(67639, 67640, 1), new Range32.ptr(67644, 67647, 3), new Range32.ptr(67648, 67669, 1), new Range32.ptr(67680, 67702, 1), new Range32.ptr(67712, 67742, 1), new Range32.ptr(67808, 67826, 1), new Range32.ptr(67828, 67829, 1), new Range32.ptr(67840, 67861, 1), new Range32.ptr(67872, 67897, 1), new Range32.ptr(67968, 68023, 1), new Range32.ptr(68030, 68031, 1), new Range32.ptr(68096, 68112, 16), new Range32.ptr(68113, 68115, 1), new Range32.ptr(68117, 68119, 1), new Range32.ptr(68121, 68147, 1), new Range32.ptr(68192, 68220, 1), new Range32.ptr(68224, 68252, 1), new Range32.ptr(68288, 68295, 1), new Range32.ptr(68297, 68324, 1), new Range32.ptr(68352, 68405, 1), new Range32.ptr(68416, 68437, 1), new Range32.ptr(68448, 68466, 1), new Range32.ptr(68480, 68497, 1), new Range32.ptr(68608, 68680, 1), new Range32.ptr(68736, 68786, 1), new Range32.ptr(68800, 68850, 1), new Range32.ptr(69635, 69687, 1), new Range32.ptr(69763, 69807, 1), new Range32.ptr(69840, 69864, 1), new Range32.ptr(69891, 69926, 1), new Range32.ptr(69968, 70002, 1), new Range32.ptr(70006, 70019, 13), new Range32.ptr(70020, 70066, 1), new Range32.ptr(70081, 70084, 1), new Range32.ptr(70106, 70108, 2), new Range32.ptr(70144, 70161, 1), new Range32.ptr(70163, 70187, 1), new Range32.ptr(70272, 70278, 1), new Range32.ptr(70280, 70282, 2), new Range32.ptr(70283, 70285, 1), new Range32.ptr(70287, 70301, 1), new Range32.ptr(70303, 70312, 1), new Range32.ptr(70320, 70366, 1), new Range32.ptr(70405, 70412, 1), new Range32.ptr(70415, 70416, 1), new Range32.ptr(70419, 70440, 1), new Range32.ptr(70442, 70448, 1), new Range32.ptr(70450, 70451, 1), new Range32.ptr(70453, 70457, 1), new Range32.ptr(70461, 70480, 19), new Range32.ptr(70493, 70497, 1), new Range32.ptr(70656, 70708, 1), new Range32.ptr(70727, 70730, 1), new Range32.ptr(70784, 70831, 1), new Range32.ptr(70852, 70853, 1), new Range32.ptr(70855, 71040, 185), new Range32.ptr(71041, 71086, 1), new Range32.ptr(71128, 71131, 1), new Range32.ptr(71168, 71215, 1), new Range32.ptr(71236, 71296, 60), new Range32.ptr(71297, 71338, 1), new Range32.ptr(71424, 71449, 1), new Range32.ptr(71840, 71903, 1), new Range32.ptr(71935, 72192, 257), new Range32.ptr(72203, 72242, 1), new Range32.ptr(72250, 72272, 22), new Range32.ptr(72284, 72323, 1), new Range32.ptr(72326, 72329, 1), new Range32.ptr(72384, 72440, 1), new Range32.ptr(72704, 72712, 1), new Range32.ptr(72714, 72750, 1), new Range32.ptr(72768, 72818, 50), new Range32.ptr(72819, 72847, 1), new Range32.ptr(72960, 72966, 1), new Range32.ptr(72968, 72969, 1), new Range32.ptr(72971, 73008, 1), new Range32.ptr(73030, 73728, 698), new Range32.ptr(73729, 74649, 1), new Range32.ptr(74880, 75075, 1), new Range32.ptr(77824, 78894, 1), new Range32.ptr(82944, 83526, 1), new Range32.ptr(92160, 92728, 1), new Range32.ptr(92736, 92766, 1), new Range32.ptr(92880, 92909, 1), new Range32.ptr(92928, 92975, 1), new Range32.ptr(92992, 92995, 1), new Range32.ptr(93027, 93047, 1), new Range32.ptr(93053, 93071, 1), new Range32.ptr(93952, 94020, 1), new Range32.ptr(94032, 94099, 67), new Range32.ptr(94100, 94111, 1), new Range32.ptr(94176, 94177, 1), new Range32.ptr(94208, 100332, 1), new Range32.ptr(100352, 101106, 1), new Range32.ptr(110592, 110878, 1), new Range32.ptr(110960, 111355, 1), new Range32.ptr(113664, 113770, 1), new Range32.ptr(113776, 113788, 1), new Range32.ptr(113792, 113800, 1), new Range32.ptr(113808, 113817, 1), new Range32.ptr(119808, 119892, 1), new Range32.ptr(119894, 119964, 1), new Range32.ptr(119966, 119967, 1), new Range32.ptr(119970, 119973, 3), new Range32.ptr(119974, 119977, 3), new Range32.ptr(119978, 119980, 1), new Range32.ptr(119982, 119993, 1), new Range32.ptr(119995, 119997, 2), new Range32.ptr(119998, 120003, 1), new Range32.ptr(120005, 120069, 1), new Range32.ptr(120071, 120074, 1), new Range32.ptr(120077, 120084, 1), new Range32.ptr(120086, 120092, 1), new Range32.ptr(120094, 120121, 1), new Range32.ptr(120123, 120126, 1), new Range32.ptr(120128, 120132, 1), new Range32.ptr(120134, 120138, 4), new Range32.ptr(120139, 120144, 1), new Range32.ptr(120146, 120485, 1), new Range32.ptr(120488, 120512, 1), new Range32.ptr(120514, 120538, 1), new Range32.ptr(120540, 120570, 1), new Range32.ptr(120572, 120596, 1), new Range32.ptr(120598, 120628, 1), new Range32.ptr(120630, 120654, 1), new Range32.ptr(120656, 120686, 1), new Range32.ptr(120688, 120712, 1), new Range32.ptr(120714, 120744, 1), new Range32.ptr(120746, 120770, 1), new Range32.ptr(120772, 120779, 1), new Range32.ptr(124928, 125124, 1), new Range32.ptr(125184, 125251, 1), new Range32.ptr(126464, 126467, 1), new Range32.ptr(126469, 126495, 1), new Range32.ptr(126497, 126498, 1), new Range32.ptr(126500, 126503, 3), new Range32.ptr(126505, 126514, 1), new Range32.ptr(126516, 126519, 1), new Range32.ptr(126521, 126523, 2), new Range32.ptr(126530, 126535, 5), new Range32.ptr(126537, 126541, 2), new Range32.ptr(126542, 126543, 1), new Range32.ptr(126545, 126546, 1), new Range32.ptr(126548, 126551, 3), new Range32.ptr(126553, 126561, 2), new Range32.ptr(126562, 126564, 2), new Range32.ptr(126567, 126570, 1), new Range32.ptr(126572, 126578, 1), new Range32.ptr(126580, 126583, 1), new Range32.ptr(126585, 126588, 1), new Range32.ptr(126590, 126592, 2), new Range32.ptr(126593, 126601, 1), new Range32.ptr(126603, 126619, 1), new Range32.ptr(126625, 126627, 1), new Range32.ptr(126629, 126633, 1), new Range32.ptr(126635, 126651, 1), new Range32.ptr(131072, 173782, 1), new Range32.ptr(173824, 177972, 1), new Range32.ptr(177984, 178205, 1), new Range32.ptr(178208, 183969, 1), new Range32.ptr(183984, 191456, 1), new Range32.ptr(194560, 195101, 1)]), 6);
		_Lu = new RangeTable.ptr(new sliceType([new Range16.ptr(65, 90, 1), new Range16.ptr(192, 214, 1), new Range16.ptr(216, 222, 1), new Range16.ptr(256, 310, 2), new Range16.ptr(313, 327, 2), new Range16.ptr(330, 376, 2), new Range16.ptr(377, 381, 2), new Range16.ptr(385, 386, 1), new Range16.ptr(388, 390, 2), new Range16.ptr(391, 393, 2), new Range16.ptr(394, 395, 1), new Range16.ptr(398, 401, 1), new Range16.ptr(403, 404, 1), new Range16.ptr(406, 408, 1), new Range16.ptr(412, 413, 1), new Range16.ptr(415, 416, 1), new Range16.ptr(418, 422, 2), new Range16.ptr(423, 425, 2), new Range16.ptr(428, 430, 2), new Range16.ptr(431, 433, 2), new Range16.ptr(434, 435, 1), new Range16.ptr(437, 439, 2), new Range16.ptr(440, 444, 4), new Range16.ptr(452, 461, 3), new Range16.ptr(463, 475, 2), new Range16.ptr(478, 494, 2), new Range16.ptr(497, 500, 3), new Range16.ptr(502, 504, 1), new Range16.ptr(506, 562, 2), new Range16.ptr(570, 571, 1), new Range16.ptr(573, 574, 1), new Range16.ptr(577, 579, 2), new Range16.ptr(580, 582, 1), new Range16.ptr(584, 590, 2), new Range16.ptr(880, 882, 2), new Range16.ptr(886, 895, 9), new Range16.ptr(902, 904, 2), new Range16.ptr(905, 906, 1), new Range16.ptr(908, 910, 2), new Range16.ptr(911, 913, 2), new Range16.ptr(914, 929, 1), new Range16.ptr(931, 939, 1), new Range16.ptr(975, 978, 3), new Range16.ptr(979, 980, 1), new Range16.ptr(984, 1006, 2), new Range16.ptr(1012, 1015, 3), new Range16.ptr(1017, 1018, 1), new Range16.ptr(1021, 1071, 1), new Range16.ptr(1120, 1152, 2), new Range16.ptr(1162, 1216, 2), new Range16.ptr(1217, 1229, 2), new Range16.ptr(1232, 1326, 2), new Range16.ptr(1329, 1366, 1), new Range16.ptr(4256, 4293, 1), new Range16.ptr(4295, 4301, 6), new Range16.ptr(5024, 5109, 1), new Range16.ptr(7680, 7828, 2), new Range16.ptr(7838, 7934, 2), new Range16.ptr(7944, 7951, 1), new Range16.ptr(7960, 7965, 1), new Range16.ptr(7976, 7983, 1), new Range16.ptr(7992, 7999, 1), new Range16.ptr(8008, 8013, 1), new Range16.ptr(8025, 8031, 2), new Range16.ptr(8040, 8047, 1), new Range16.ptr(8120, 8123, 1), new Range16.ptr(8136, 8139, 1), new Range16.ptr(8152, 8155, 1), new Range16.ptr(8168, 8172, 1), new Range16.ptr(8184, 8187, 1), new Range16.ptr(8450, 8455, 5), new Range16.ptr(8459, 8461, 1), new Range16.ptr(8464, 8466, 1), new Range16.ptr(8469, 8473, 4), new Range16.ptr(8474, 8477, 1), new Range16.ptr(8484, 8490, 2), new Range16.ptr(8491, 8493, 1), new Range16.ptr(8496, 8499, 1), new Range16.ptr(8510, 8511, 1), new Range16.ptr(8517, 8579, 62), new Range16.ptr(11264, 11310, 1), new Range16.ptr(11360, 11362, 2), new Range16.ptr(11363, 11364, 1), new Range16.ptr(11367, 11373, 2), new Range16.ptr(11374, 11376, 1), new Range16.ptr(11378, 11381, 3), new Range16.ptr(11390, 11392, 1), new Range16.ptr(11394, 11490, 2), new Range16.ptr(11499, 11501, 2), new Range16.ptr(11506, 42560, 31054), new Range16.ptr(42562, 42604, 2), new Range16.ptr(42624, 42650, 2), new Range16.ptr(42786, 42798, 2), new Range16.ptr(42802, 42862, 2), new Range16.ptr(42873, 42877, 2), new Range16.ptr(42878, 42886, 2), new Range16.ptr(42891, 42893, 2), new Range16.ptr(42896, 42898, 2), new Range16.ptr(42902, 42922, 2), new Range16.ptr(42923, 42926, 1), new Range16.ptr(42928, 42932, 1), new Range16.ptr(42934, 65313, 22379), new Range16.ptr(65314, 65338, 1)]), new sliceType$1([new Range32.ptr(66560, 66599, 1), new Range32.ptr(66736, 66771, 1), new Range32.ptr(68736, 68786, 1), new Range32.ptr(71840, 71871, 1), new Range32.ptr(119808, 119833, 1), new Range32.ptr(119860, 119885, 1), new Range32.ptr(119912, 119937, 1), new Range32.ptr(119964, 119966, 2), new Range32.ptr(119967, 119973, 3), new Range32.ptr(119974, 119977, 3), new Range32.ptr(119978, 119980, 1), new Range32.ptr(119982, 119989, 1), new Range32.ptr(120016, 120041, 1), new Range32.ptr(120068, 120069, 1), new Range32.ptr(120071, 120074, 1), new Range32.ptr(120077, 120084, 1), new Range32.ptr(120086, 120092, 1), new Range32.ptr(120120, 120121, 1), new Range32.ptr(120123, 120126, 1), new Range32.ptr(120128, 120132, 1), new Range32.ptr(120134, 120138, 4), new Range32.ptr(120139, 120144, 1), new Range32.ptr(120172, 120197, 1), new Range32.ptr(120224, 120249, 1), new Range32.ptr(120276, 120301, 1), new Range32.ptr(120328, 120353, 1), new Range32.ptr(120380, 120405, 1), new Range32.ptr(120432, 120457, 1), new Range32.ptr(120488, 120512, 1), new Range32.ptr(120546, 120570, 1), new Range32.ptr(120604, 120628, 1), new Range32.ptr(120662, 120686, 1), new Range32.ptr(120720, 120744, 1), new Range32.ptr(120778, 125184, 4406), new Range32.ptr(125185, 125217, 1)]), 3);
		_M = new RangeTable.ptr(new sliceType([new Range16.ptr(768, 879, 1), new Range16.ptr(1155, 1161, 1), new Range16.ptr(1425, 1469, 1), new Range16.ptr(1471, 1473, 2), new Range16.ptr(1474, 1476, 2), new Range16.ptr(1477, 1479, 2), new Range16.ptr(1552, 1562, 1), new Range16.ptr(1611, 1631, 1), new Range16.ptr(1648, 1750, 102), new Range16.ptr(1751, 1756, 1), new Range16.ptr(1759, 1764, 1), new Range16.ptr(1767, 1768, 1), new Range16.ptr(1770, 1773, 1), new Range16.ptr(1809, 1840, 31), new Range16.ptr(1841, 1866, 1), new Range16.ptr(1958, 1968, 1), new Range16.ptr(2027, 2035, 1), new Range16.ptr(2070, 2073, 1), new Range16.ptr(2075, 2083, 1), new Range16.ptr(2085, 2087, 1), new Range16.ptr(2089, 2093, 1), new Range16.ptr(2137, 2139, 1), new Range16.ptr(2260, 2273, 1), new Range16.ptr(2275, 2307, 1), new Range16.ptr(2362, 2364, 1), new Range16.ptr(2366, 2383, 1), new Range16.ptr(2385, 2391, 1), new Range16.ptr(2402, 2403, 1), new Range16.ptr(2433, 2435, 1), new Range16.ptr(2492, 2494, 2), new Range16.ptr(2495, 2500, 1), new Range16.ptr(2503, 2504, 1), new Range16.ptr(2507, 2509, 1), new Range16.ptr(2519, 2530, 11), new Range16.ptr(2531, 2561, 30), new Range16.ptr(2562, 2563, 1), new Range16.ptr(2620, 2622, 2), new Range16.ptr(2623, 2626, 1), new Range16.ptr(2631, 2632, 1), new Range16.ptr(2635, 2637, 1), new Range16.ptr(2641, 2672, 31), new Range16.ptr(2673, 2677, 4), new Range16.ptr(2689, 2691, 1), new Range16.ptr(2748, 2750, 2), new Range16.ptr(2751, 2757, 1), new Range16.ptr(2759, 2761, 1), new Range16.ptr(2763, 2765, 1), new Range16.ptr(2786, 2787, 1), new Range16.ptr(2810, 2815, 1), new Range16.ptr(2817, 2819, 1), new Range16.ptr(2876, 2878, 2), new Range16.ptr(2879, 2884, 1), new Range16.ptr(2887, 2888, 1), new Range16.ptr(2891, 2893, 1), new Range16.ptr(2902, 2903, 1), new Range16.ptr(2914, 2915, 1), new Range16.ptr(2946, 3006, 60), new Range16.ptr(3007, 3010, 1), new Range16.ptr(3014, 3016, 1), new Range16.ptr(3018, 3021, 1), new Range16.ptr(3031, 3072, 41), new Range16.ptr(3073, 3075, 1), new Range16.ptr(3134, 3140, 1), new Range16.ptr(3142, 3144, 1), new Range16.ptr(3146, 3149, 1), new Range16.ptr(3157, 3158, 1), new Range16.ptr(3170, 3171, 1), new Range16.ptr(3201, 3203, 1), new Range16.ptr(3260, 3262, 2), new Range16.ptr(3263, 3268, 1), new Range16.ptr(3270, 3272, 1), new Range16.ptr(3274, 3277, 1), new Range16.ptr(3285, 3286, 1), new Range16.ptr(3298, 3299, 1), new Range16.ptr(3328, 3331, 1), new Range16.ptr(3387, 3388, 1), new Range16.ptr(3390, 3396, 1), new Range16.ptr(3398, 3400, 1), new Range16.ptr(3402, 3405, 1), new Range16.ptr(3415, 3426, 11), new Range16.ptr(3427, 3458, 31), new Range16.ptr(3459, 3530, 71), new Range16.ptr(3535, 3540, 1), new Range16.ptr(3542, 3544, 2), new Range16.ptr(3545, 3551, 1), new Range16.ptr(3570, 3571, 1), new Range16.ptr(3633, 3636, 3), new Range16.ptr(3637, 3642, 1), new Range16.ptr(3655, 3662, 1), new Range16.ptr(3761, 3764, 3), new Range16.ptr(3765, 3769, 1), new Range16.ptr(3771, 3772, 1), new Range16.ptr(3784, 3789, 1), new Range16.ptr(3864, 3865, 1), new Range16.ptr(3893, 3897, 2), new Range16.ptr(3902, 3903, 1), new Range16.ptr(3953, 3972, 1), new Range16.ptr(3974, 3975, 1), new Range16.ptr(3981, 3991, 1), new Range16.ptr(3993, 4028, 1), new Range16.ptr(4038, 4139, 101), new Range16.ptr(4140, 4158, 1), new Range16.ptr(4182, 4185, 1), new Range16.ptr(4190, 4192, 1), new Range16.ptr(4194, 4196, 1), new Range16.ptr(4199, 4205, 1), new Range16.ptr(4209, 4212, 1), new Range16.ptr(4226, 4237, 1), new Range16.ptr(4239, 4250, 11), new Range16.ptr(4251, 4253, 1), new Range16.ptr(4957, 4959, 1), new Range16.ptr(5906, 5908, 1), new Range16.ptr(5938, 5940, 1), new Range16.ptr(5970, 5971, 1), new Range16.ptr(6002, 6003, 1), new Range16.ptr(6068, 6099, 1), new Range16.ptr(6109, 6155, 46), new Range16.ptr(6156, 6157, 1), new Range16.ptr(6277, 6278, 1), new Range16.ptr(6313, 6432, 119), new Range16.ptr(6433, 6443, 1), new Range16.ptr(6448, 6459, 1), new Range16.ptr(6679, 6683, 1), new Range16.ptr(6741, 6750, 1), new Range16.ptr(6752, 6780, 1), new Range16.ptr(6783, 6832, 49), new Range16.ptr(6833, 6846, 1), new Range16.ptr(6912, 6916, 1), new Range16.ptr(6964, 6980, 1), new Range16.ptr(7019, 7027, 1), new Range16.ptr(7040, 7042, 1), new Range16.ptr(7073, 7085, 1), new Range16.ptr(7142, 7155, 1), new Range16.ptr(7204, 7223, 1), new Range16.ptr(7376, 7378, 1), new Range16.ptr(7380, 7400, 1), new Range16.ptr(7405, 7410, 5), new Range16.ptr(7411, 7412, 1), new Range16.ptr(7415, 7417, 1), new Range16.ptr(7616, 7673, 1), new Range16.ptr(7675, 7679, 1), new Range16.ptr(8400, 8432, 1), new Range16.ptr(11503, 11505, 1), new Range16.ptr(11647, 11744, 97), new Range16.ptr(11745, 11775, 1), new Range16.ptr(12330, 12335, 1), new Range16.ptr(12441, 12442, 1), new Range16.ptr(42607, 42610, 1), new Range16.ptr(42612, 42621, 1), new Range16.ptr(42654, 42655, 1), new Range16.ptr(42736, 42737, 1), new Range16.ptr(43010, 43014, 4), new Range16.ptr(43019, 43043, 24), new Range16.ptr(43044, 43047, 1), new Range16.ptr(43136, 43137, 1), new Range16.ptr(43188, 43205, 1), new Range16.ptr(43232, 43249, 1), new Range16.ptr(43302, 43309, 1), new Range16.ptr(43335, 43347, 1), new Range16.ptr(43392, 43395, 1), new Range16.ptr(43443, 43456, 1), new Range16.ptr(43493, 43561, 68), new Range16.ptr(43562, 43574, 1), new Range16.ptr(43587, 43596, 9), new Range16.ptr(43597, 43643, 46), new Range16.ptr(43644, 43645, 1), new Range16.ptr(43696, 43698, 2), new Range16.ptr(43699, 43700, 1), new Range16.ptr(43703, 43704, 1), new Range16.ptr(43710, 43711, 1), new Range16.ptr(43713, 43755, 42), new Range16.ptr(43756, 43759, 1), new Range16.ptr(43765, 43766, 1), new Range16.ptr(44003, 44010, 1), new Range16.ptr(44012, 44013, 1), new Range16.ptr(64286, 65024, 738), new Range16.ptr(65025, 65039, 1), new Range16.ptr(65056, 65071, 1)]), new sliceType$1([new Range32.ptr(66045, 66272, 227), new Range32.ptr(66422, 66426, 1), new Range32.ptr(68097, 68099, 1), new Range32.ptr(68101, 68102, 1), new Range32.ptr(68108, 68111, 1), new Range32.ptr(68152, 68154, 1), new Range32.ptr(68159, 68325, 166), new Range32.ptr(68326, 69632, 1306), new Range32.ptr(69633, 69634, 1), new Range32.ptr(69688, 69702, 1), new Range32.ptr(69759, 69762, 1), new Range32.ptr(69808, 69818, 1), new Range32.ptr(69888, 69890, 1), new Range32.ptr(69927, 69940, 1), new Range32.ptr(70003, 70016, 13), new Range32.ptr(70017, 70018, 1), new Range32.ptr(70067, 70080, 1), new Range32.ptr(70090, 70092, 1), new Range32.ptr(70188, 70199, 1), new Range32.ptr(70206, 70367, 161), new Range32.ptr(70368, 70378, 1), new Range32.ptr(70400, 70403, 1), new Range32.ptr(70460, 70462, 2), new Range32.ptr(70463, 70468, 1), new Range32.ptr(70471, 70472, 1), new Range32.ptr(70475, 70477, 1), new Range32.ptr(70487, 70498, 11), new Range32.ptr(70499, 70502, 3), new Range32.ptr(70503, 70508, 1), new Range32.ptr(70512, 70516, 1), new Range32.ptr(70709, 70726, 1), new Range32.ptr(70832, 70851, 1), new Range32.ptr(71087, 71093, 1), new Range32.ptr(71096, 71104, 1), new Range32.ptr(71132, 71133, 1), new Range32.ptr(71216, 71232, 1), new Range32.ptr(71339, 71351, 1), new Range32.ptr(71453, 71467, 1), new Range32.ptr(72193, 72202, 1), new Range32.ptr(72243, 72249, 1), new Range32.ptr(72251, 72254, 1), new Range32.ptr(72263, 72273, 10), new Range32.ptr(72274, 72283, 1), new Range32.ptr(72330, 72345, 1), new Range32.ptr(72751, 72758, 1), new Range32.ptr(72760, 72767, 1), new Range32.ptr(72850, 72871, 1), new Range32.ptr(72873, 72886, 1), new Range32.ptr(73009, 73014, 1), new Range32.ptr(73018, 73020, 2), new Range32.ptr(73021, 73023, 2), new Range32.ptr(73024, 73029, 1), new Range32.ptr(73031, 92912, 19881), new Range32.ptr(92913, 92916, 1), new Range32.ptr(92976, 92982, 1), new Range32.ptr(94033, 94078, 1), new Range32.ptr(94095, 94098, 1), new Range32.ptr(113821, 113822, 1), new Range32.ptr(119141, 119145, 1), new Range32.ptr(119149, 119154, 1), new Range32.ptr(119163, 119170, 1), new Range32.ptr(119173, 119179, 1), new Range32.ptr(119210, 119213, 1), new Range32.ptr(119362, 119364, 1), new Range32.ptr(121344, 121398, 1), new Range32.ptr(121403, 121452, 1), new Range32.ptr(121461, 121476, 15), new Range32.ptr(121499, 121503, 1), new Range32.ptr(121505, 121519, 1), new Range32.ptr(122880, 122886, 1), new Range32.ptr(122888, 122904, 1), new Range32.ptr(122907, 122913, 1), new Range32.ptr(122915, 122916, 1), new Range32.ptr(122918, 122922, 1), new Range32.ptr(125136, 125142, 1), new Range32.ptr(125252, 125258, 1), new Range32.ptr(917760, 917999, 1)]), 0);
		_N = new RangeTable.ptr(new sliceType([new Range16.ptr(48, 57, 1), new Range16.ptr(178, 179, 1), new Range16.ptr(185, 188, 3), new Range16.ptr(189, 190, 1), new Range16.ptr(1632, 1641, 1), new Range16.ptr(1776, 1785, 1), new Range16.ptr(1984, 1993, 1), new Range16.ptr(2406, 2415, 1), new Range16.ptr(2534, 2543, 1), new Range16.ptr(2548, 2553, 1), new Range16.ptr(2662, 2671, 1), new Range16.ptr(2790, 2799, 1), new Range16.ptr(2918, 2927, 1), new Range16.ptr(2930, 2935, 1), new Range16.ptr(3046, 3058, 1), new Range16.ptr(3174, 3183, 1), new Range16.ptr(3192, 3198, 1), new Range16.ptr(3302, 3311, 1), new Range16.ptr(3416, 3422, 1), new Range16.ptr(3430, 3448, 1), new Range16.ptr(3558, 3567, 1), new Range16.ptr(3664, 3673, 1), new Range16.ptr(3792, 3801, 1), new Range16.ptr(3872, 3891, 1), new Range16.ptr(4160, 4169, 1), new Range16.ptr(4240, 4249, 1), new Range16.ptr(4969, 4988, 1), new Range16.ptr(5870, 5872, 1), new Range16.ptr(6112, 6121, 1), new Range16.ptr(6128, 6137, 1), new Range16.ptr(6160, 6169, 1), new Range16.ptr(6470, 6479, 1), new Range16.ptr(6608, 6618, 1), new Range16.ptr(6784, 6793, 1), new Range16.ptr(6800, 6809, 1), new Range16.ptr(6992, 7001, 1), new Range16.ptr(7088, 7097, 1), new Range16.ptr(7232, 7241, 1), new Range16.ptr(7248, 7257, 1), new Range16.ptr(8304, 8308, 4), new Range16.ptr(8309, 8313, 1), new Range16.ptr(8320, 8329, 1), new Range16.ptr(8528, 8578, 1), new Range16.ptr(8581, 8585, 1), new Range16.ptr(9312, 9371, 1), new Range16.ptr(9450, 9471, 1), new Range16.ptr(10102, 10131, 1), new Range16.ptr(11517, 12295, 778), new Range16.ptr(12321, 12329, 1), new Range16.ptr(12344, 12346, 1), new Range16.ptr(12690, 12693, 1), new Range16.ptr(12832, 12841, 1), new Range16.ptr(12872, 12879, 1), new Range16.ptr(12881, 12895, 1), new Range16.ptr(12928, 12937, 1), new Range16.ptr(12977, 12991, 1), new Range16.ptr(42528, 42537, 1), new Range16.ptr(42726, 42735, 1), new Range16.ptr(43056, 43061, 1), new Range16.ptr(43216, 43225, 1), new Range16.ptr(43264, 43273, 1), new Range16.ptr(43472, 43481, 1), new Range16.ptr(43504, 43513, 1), new Range16.ptr(43600, 43609, 1), new Range16.ptr(44016, 44025, 1), new Range16.ptr(65296, 65305, 1)]), new sliceType$1([new Range32.ptr(65799, 65843, 1), new Range32.ptr(65856, 65912, 1), new Range32.ptr(65930, 65931, 1), new Range32.ptr(66273, 66299, 1), new Range32.ptr(66336, 66339, 1), new Range32.ptr(66369, 66378, 9), new Range32.ptr(66513, 66517, 1), new Range32.ptr(66720, 66729, 1), new Range32.ptr(67672, 67679, 1), new Range32.ptr(67705, 67711, 1), new Range32.ptr(67751, 67759, 1), new Range32.ptr(67835, 67839, 1), new Range32.ptr(67862, 67867, 1), new Range32.ptr(68028, 68029, 1), new Range32.ptr(68032, 68047, 1), new Range32.ptr(68050, 68095, 1), new Range32.ptr(68160, 68167, 1), new Range32.ptr(68221, 68222, 1), new Range32.ptr(68253, 68255, 1), new Range32.ptr(68331, 68335, 1), new Range32.ptr(68440, 68447, 1), new Range32.ptr(68472, 68479, 1), new Range32.ptr(68521, 68527, 1), new Range32.ptr(68858, 68863, 1), new Range32.ptr(69216, 69246, 1), new Range32.ptr(69714, 69743, 1), new Range32.ptr(69872, 69881, 1), new Range32.ptr(69942, 69951, 1), new Range32.ptr(70096, 70105, 1), new Range32.ptr(70113, 70132, 1), new Range32.ptr(70384, 70393, 1), new Range32.ptr(70736, 70745, 1), new Range32.ptr(70864, 70873, 1), new Range32.ptr(71248, 71257, 1), new Range32.ptr(71360, 71369, 1), new Range32.ptr(71472, 71483, 1), new Range32.ptr(71904, 71922, 1), new Range32.ptr(72784, 72812, 1), new Range32.ptr(73040, 73049, 1), new Range32.ptr(74752, 74862, 1), new Range32.ptr(92768, 92777, 1), new Range32.ptr(93008, 93017, 1), new Range32.ptr(93019, 93025, 1), new Range32.ptr(119648, 119665, 1), new Range32.ptr(120782, 120831, 1), new Range32.ptr(125127, 125135, 1), new Range32.ptr(125264, 125273, 1), new Range32.ptr(127232, 127244, 1)]), 4);
		_P = new RangeTable.ptr(new sliceType([new Range16.ptr(33, 35, 1), new Range16.ptr(37, 42, 1), new Range16.ptr(44, 47, 1), new Range16.ptr(58, 59, 1), new Range16.ptr(63, 64, 1), new Range16.ptr(91, 93, 1), new Range16.ptr(95, 123, 28), new Range16.ptr(125, 161, 36), new Range16.ptr(167, 171, 4), new Range16.ptr(182, 183, 1), new Range16.ptr(187, 191, 4), new Range16.ptr(894, 903, 9), new Range16.ptr(1370, 1375, 1), new Range16.ptr(1417, 1418, 1), new Range16.ptr(1470, 1472, 2), new Range16.ptr(1475, 1478, 3), new Range16.ptr(1523, 1524, 1), new Range16.ptr(1545, 1546, 1), new Range16.ptr(1548, 1549, 1), new Range16.ptr(1563, 1566, 3), new Range16.ptr(1567, 1642, 75), new Range16.ptr(1643, 1645, 1), new Range16.ptr(1748, 1792, 44), new Range16.ptr(1793, 1805, 1), new Range16.ptr(2039, 2041, 1), new Range16.ptr(2096, 2110, 1), new Range16.ptr(2142, 2404, 262), new Range16.ptr(2405, 2416, 11), new Range16.ptr(2557, 2800, 243), new Range16.ptr(3572, 3663, 91), new Range16.ptr(3674, 3675, 1), new Range16.ptr(3844, 3858, 1), new Range16.ptr(3860, 3898, 38), new Range16.ptr(3899, 3901, 1), new Range16.ptr(3973, 4048, 75), new Range16.ptr(4049, 4052, 1), new Range16.ptr(4057, 4058, 1), new Range16.ptr(4170, 4175, 1), new Range16.ptr(4347, 4960, 613), new Range16.ptr(4961, 4968, 1), new Range16.ptr(5120, 5741, 621), new Range16.ptr(5742, 5787, 45), new Range16.ptr(5788, 5867, 79), new Range16.ptr(5868, 5869, 1), new Range16.ptr(5941, 5942, 1), new Range16.ptr(6100, 6102, 1), new Range16.ptr(6104, 6106, 1), new Range16.ptr(6144, 6154, 1), new Range16.ptr(6468, 6469, 1), new Range16.ptr(6686, 6687, 1), new Range16.ptr(6816, 6822, 1), new Range16.ptr(6824, 6829, 1), new Range16.ptr(7002, 7008, 1), new Range16.ptr(7164, 7167, 1), new Range16.ptr(7227, 7231, 1), new Range16.ptr(7294, 7295, 1), new Range16.ptr(7360, 7367, 1), new Range16.ptr(7379, 8208, 829), new Range16.ptr(8209, 8231, 1), new Range16.ptr(8240, 8259, 1), new Range16.ptr(8261, 8273, 1), new Range16.ptr(8275, 8286, 1), new Range16.ptr(8317, 8318, 1), new Range16.ptr(8333, 8334, 1), new Range16.ptr(8968, 8971, 1), new Range16.ptr(9001, 9002, 1), new Range16.ptr(10088, 10101, 1), new Range16.ptr(10181, 10182, 1), new Range16.ptr(10214, 10223, 1), new Range16.ptr(10627, 10648, 1), new Range16.ptr(10712, 10715, 1), new Range16.ptr(10748, 10749, 1), new Range16.ptr(11513, 11516, 1), new Range16.ptr(11518, 11519, 1), new Range16.ptr(11632, 11776, 144), new Range16.ptr(11777, 11822, 1), new Range16.ptr(11824, 11849, 1), new Range16.ptr(12289, 12291, 1), new Range16.ptr(12296, 12305, 1), new Range16.ptr(12308, 12319, 1), new Range16.ptr(12336, 12349, 13), new Range16.ptr(12448, 12539, 91), new Range16.ptr(42238, 42239, 1), new Range16.ptr(42509, 42511, 1), new Range16.ptr(42611, 42622, 11), new Range16.ptr(42738, 42743, 1), new Range16.ptr(43124, 43127, 1), new Range16.ptr(43214, 43215, 1), new Range16.ptr(43256, 43258, 1), new Range16.ptr(43260, 43310, 50), new Range16.ptr(43311, 43359, 48), new Range16.ptr(43457, 43469, 1), new Range16.ptr(43486, 43487, 1), new Range16.ptr(43612, 43615, 1), new Range16.ptr(43742, 43743, 1), new Range16.ptr(43760, 43761, 1), new Range16.ptr(44011, 64830, 20819), new Range16.ptr(64831, 65040, 209), new Range16.ptr(65041, 65049, 1), new Range16.ptr(65072, 65106, 1), new Range16.ptr(65108, 65121, 1), new Range16.ptr(65123, 65128, 5), new Range16.ptr(65130, 65131, 1), new Range16.ptr(65281, 65283, 1), new Range16.ptr(65285, 65290, 1), new Range16.ptr(65292, 65295, 1), new Range16.ptr(65306, 65307, 1), new Range16.ptr(65311, 65312, 1), new Range16.ptr(65339, 65341, 1), new Range16.ptr(65343, 65371, 28), new Range16.ptr(65373, 65375, 2), new Range16.ptr(65376, 65381, 1)]), new sliceType$1([new Range32.ptr(65792, 65794, 1), new Range32.ptr(66463, 66512, 49), new Range32.ptr(66927, 67671, 744), new Range32.ptr(67871, 67903, 32), new Range32.ptr(68176, 68184, 1), new Range32.ptr(68223, 68336, 113), new Range32.ptr(68337, 68342, 1), new Range32.ptr(68409, 68415, 1), new Range32.ptr(68505, 68508, 1), new Range32.ptr(69703, 69709, 1), new Range32.ptr(69819, 69820, 1), new Range32.ptr(69822, 69825, 1), new Range32.ptr(69952, 69955, 1), new Range32.ptr(70004, 70005, 1), new Range32.ptr(70085, 70089, 1), new Range32.ptr(70093, 70107, 14), new Range32.ptr(70109, 70111, 1), new Range32.ptr(70200, 70205, 1), new Range32.ptr(70313, 70731, 418), new Range32.ptr(70732, 70735, 1), new Range32.ptr(70747, 70749, 2), new Range32.ptr(70854, 71105, 251), new Range32.ptr(71106, 71127, 1), new Range32.ptr(71233, 71235, 1), new Range32.ptr(71264, 71276, 1), new Range32.ptr(71484, 71486, 1), new Range32.ptr(72255, 72262, 1), new Range32.ptr(72346, 72348, 1), new Range32.ptr(72350, 72354, 1), new Range32.ptr(72769, 72773, 1), new Range32.ptr(72816, 72817, 1), new Range32.ptr(74864, 74868, 1), new Range32.ptr(92782, 92783, 1), new Range32.ptr(92917, 92983, 66), new Range32.ptr(92984, 92987, 1), new Range32.ptr(92996, 113823, 20827), new Range32.ptr(121479, 121483, 1), new Range32.ptr(125278, 125279, 1)]), 11);
		_S = new RangeTable.ptr(new sliceType([new Range16.ptr(36, 43, 7), new Range16.ptr(60, 62, 1), new Range16.ptr(94, 96, 2), new Range16.ptr(124, 126, 2), new Range16.ptr(162, 166, 1), new Range16.ptr(168, 169, 1), new Range16.ptr(172, 174, 2), new Range16.ptr(175, 177, 1), new Range16.ptr(180, 184, 4), new Range16.ptr(215, 247, 32), new Range16.ptr(706, 709, 1), new Range16.ptr(722, 735, 1), new Range16.ptr(741, 747, 1), new Range16.ptr(749, 751, 2), new Range16.ptr(752, 767, 1), new Range16.ptr(885, 900, 15), new Range16.ptr(901, 1014, 113), new Range16.ptr(1154, 1421, 267), new Range16.ptr(1422, 1423, 1), new Range16.ptr(1542, 1544, 1), new Range16.ptr(1547, 1550, 3), new Range16.ptr(1551, 1758, 207), new Range16.ptr(1769, 1789, 20), new Range16.ptr(1790, 2038, 248), new Range16.ptr(2546, 2547, 1), new Range16.ptr(2554, 2555, 1), new Range16.ptr(2801, 2928, 127), new Range16.ptr(3059, 3066, 1), new Range16.ptr(3199, 3407, 208), new Range16.ptr(3449, 3647, 198), new Range16.ptr(3841, 3843, 1), new Range16.ptr(3859, 3861, 2), new Range16.ptr(3862, 3863, 1), new Range16.ptr(3866, 3871, 1), new Range16.ptr(3892, 3896, 2), new Range16.ptr(4030, 4037, 1), new Range16.ptr(4039, 4044, 1), new Range16.ptr(4046, 4047, 1), new Range16.ptr(4053, 4056, 1), new Range16.ptr(4254, 4255, 1), new Range16.ptr(5008, 5017, 1), new Range16.ptr(6107, 6464, 357), new Range16.ptr(6622, 6655, 1), new Range16.ptr(7009, 7018, 1), new Range16.ptr(7028, 7036, 1), new Range16.ptr(8125, 8127, 2), new Range16.ptr(8128, 8129, 1), new Range16.ptr(8141, 8143, 1), new Range16.ptr(8157, 8159, 1), new Range16.ptr(8173, 8175, 1), new Range16.ptr(8189, 8190, 1), new Range16.ptr(8260, 8274, 14), new Range16.ptr(8314, 8316, 1), new Range16.ptr(8330, 8332, 1), new Range16.ptr(8352, 8383, 1), new Range16.ptr(8448, 8449, 1), new Range16.ptr(8451, 8454, 1), new Range16.ptr(8456, 8457, 1), new Range16.ptr(8468, 8470, 2), new Range16.ptr(8471, 8472, 1), new Range16.ptr(8478, 8483, 1), new Range16.ptr(8485, 8489, 2), new Range16.ptr(8494, 8506, 12), new Range16.ptr(8507, 8512, 5), new Range16.ptr(8513, 8516, 1), new Range16.ptr(8522, 8525, 1), new Range16.ptr(8527, 8586, 59), new Range16.ptr(8587, 8592, 5), new Range16.ptr(8593, 8967, 1), new Range16.ptr(8972, 9000, 1), new Range16.ptr(9003, 9254, 1), new Range16.ptr(9280, 9290, 1), new Range16.ptr(9372, 9449, 1), new Range16.ptr(9472, 10087, 1), new Range16.ptr(10132, 10180, 1), new Range16.ptr(10183, 10213, 1), new Range16.ptr(10224, 10626, 1), new Range16.ptr(10649, 10711, 1), new Range16.ptr(10716, 10747, 1), new Range16.ptr(10750, 11123, 1), new Range16.ptr(11126, 11157, 1), new Range16.ptr(11160, 11193, 1), new Range16.ptr(11197, 11208, 1), new Range16.ptr(11210, 11218, 1), new Range16.ptr(11244, 11247, 1), new Range16.ptr(11493, 11498, 1), new Range16.ptr(11904, 11929, 1), new Range16.ptr(11931, 12019, 1), new Range16.ptr(12032, 12245, 1), new Range16.ptr(12272, 12283, 1), new Range16.ptr(12292, 12306, 14), new Range16.ptr(12307, 12320, 13), new Range16.ptr(12342, 12343, 1), new Range16.ptr(12350, 12351, 1), new Range16.ptr(12443, 12444, 1), new Range16.ptr(12688, 12689, 1), new Range16.ptr(12694, 12703, 1), new Range16.ptr(12736, 12771, 1), new Range16.ptr(12800, 12830, 1), new Range16.ptr(12842, 12871, 1), new Range16.ptr(12880, 12896, 16), new Range16.ptr(12897, 12927, 1), new Range16.ptr(12938, 12976, 1), new Range16.ptr(12992, 13054, 1), new Range16.ptr(13056, 13311, 1), new Range16.ptr(19904, 19967, 1), new Range16.ptr(42128, 42182, 1), new Range16.ptr(42752, 42774, 1), new Range16.ptr(42784, 42785, 1), new Range16.ptr(42889, 42890, 1), new Range16.ptr(43048, 43051, 1), new Range16.ptr(43062, 43065, 1), new Range16.ptr(43639, 43641, 1), new Range16.ptr(43867, 64297, 20430), new Range16.ptr(64434, 64449, 1), new Range16.ptr(65020, 65021, 1), new Range16.ptr(65122, 65124, 2), new Range16.ptr(65125, 65126, 1), new Range16.ptr(65129, 65284, 155), new Range16.ptr(65291, 65308, 17), new Range16.ptr(65309, 65310, 1), new Range16.ptr(65342, 65344, 2), new Range16.ptr(65372, 65374, 2), new Range16.ptr(65504, 65510, 1), new Range16.ptr(65512, 65518, 1), new Range16.ptr(65532, 65533, 1)]), new sliceType$1([new Range32.ptr(65847, 65855, 1), new Range32.ptr(65913, 65929, 1), new Range32.ptr(65932, 65934, 1), new Range32.ptr(65936, 65947, 1), new Range32.ptr(65952, 66000, 48), new Range32.ptr(66001, 66044, 1), new Range32.ptr(67703, 67704, 1), new Range32.ptr(68296, 71487, 3191), new Range32.ptr(92988, 92991, 1), new Range32.ptr(92997, 113820, 20823), new Range32.ptr(118784, 119029, 1), new Range32.ptr(119040, 119078, 1), new Range32.ptr(119081, 119140, 1), new Range32.ptr(119146, 119148, 1), new Range32.ptr(119171, 119172, 1), new Range32.ptr(119180, 119209, 1), new Range32.ptr(119214, 119272, 1), new Range32.ptr(119296, 119361, 1), new Range32.ptr(119365, 119552, 187), new Range32.ptr(119553, 119638, 1), new Range32.ptr(120513, 120539, 26), new Range32.ptr(120571, 120597, 26), new Range32.ptr(120629, 120655, 26), new Range32.ptr(120687, 120713, 26), new Range32.ptr(120745, 120771, 26), new Range32.ptr(120832, 121343, 1), new Range32.ptr(121399, 121402, 1), new Range32.ptr(121453, 121460, 1), new Range32.ptr(121462, 121475, 1), new Range32.ptr(121477, 121478, 1), new Range32.ptr(126704, 126705, 1), new Range32.ptr(126976, 127019, 1), new Range32.ptr(127024, 127123, 1), new Range32.ptr(127136, 127150, 1), new Range32.ptr(127153, 127167, 1), new Range32.ptr(127169, 127183, 1), new Range32.ptr(127185, 127221, 1), new Range32.ptr(127248, 127278, 1), new Range32.ptr(127280, 127339, 1), new Range32.ptr(127344, 127404, 1), new Range32.ptr(127462, 127490, 1), new Range32.ptr(127504, 127547, 1), new Range32.ptr(127552, 127560, 1), new Range32.ptr(127568, 127569, 1), new Range32.ptr(127584, 127589, 1), new Range32.ptr(127744, 128724, 1), new Range32.ptr(128736, 128748, 1), new Range32.ptr(128752, 128760, 1), new Range32.ptr(128768, 128883, 1), new Range32.ptr(128896, 128980, 1), new Range32.ptr(129024, 129035, 1), new Range32.ptr(129040, 129095, 1), new Range32.ptr(129104, 129113, 1), new Range32.ptr(129120, 129159, 1), new Range32.ptr(129168, 129197, 1), new Range32.ptr(129280, 129291, 1), new Range32.ptr(129296, 129342, 1), new Range32.ptr(129344, 129356, 1), new Range32.ptr(129360, 129387, 1), new Range32.ptr(129408, 129431, 1), new Range32.ptr(129472, 129488, 16), new Range32.ptr(129489, 129510, 1)]), 10);
		$pkg.L = _L;
		$pkg.M = _M;
		$pkg.N = _N;
		$pkg.P = _P;
		$pkg.S = _S;
		$pkg.PrintRanges = new sliceType$2([$pkg.L, $pkg.M, $pkg.N, $pkg.P, $pkg.S]);
		$pkg.Upper = _Lu;
		properties = $toNativeArray($kindUint8, [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 144, 130, 130, 130, 136, 130, 130, 130, 130, 130, 130, 136, 130, 130, 130, 130, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 130, 130, 136, 136, 136, 130, 130, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 130, 130, 130, 136, 130, 136, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 130, 136, 130, 136, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 16, 130, 136, 136, 136, 136, 136, 130, 136, 136, 224, 130, 136, 0, 136, 136, 136, 136, 132, 132, 136, 192, 130, 130, 136, 132, 224, 130, 132, 132, 132, 130, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 136, 160, 160, 160, 160, 160, 160, 160, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 136, 192, 192, 192, 192, 192, 192, 192, 192]);
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["unicode/utf8"] = (function() {
	var $pkg = {}, $init, acceptRange, first, acceptRanges, FullRune, DecodeRune, DecodeRuneInString, DecodeLastRune, RuneLen, EncodeRune, RuneCount, RuneCountInString, RuneStart, ValidRune;
	acceptRange = $pkg.acceptRange = $newType(0, $kindStruct, "utf8.acceptRange", true, "unicode/utf8", false, function(lo_, hi_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.lo = 0;
			this.hi = 0;
			return;
		}
		this.lo = lo_;
		this.hi = hi_;
	});
	FullRune = function(p) {
		var accept, n, p, x, x$1, x$2;
		n = p.$length;
		if (n === 0) {
			return false;
		}
		x$1 = (x = (0 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 0]), ((x < 0 || x >= first.length) ? ($throwRuntimeError("index out of range"), undefined) : first[x]));
		if (n >= ((((x$1 & 7) >>> 0) >> 0))) {
			return true;
		}
		accept = $clone((x$2 = x$1 >>> 4 << 24 >>> 24, ((x$2 < 0 || x$2 >= acceptRanges.length) ? ($throwRuntimeError("index out of range"), undefined) : acceptRanges[x$2])), acceptRange);
		if (n > 1 && ((1 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 1]) < accept.lo || accept.hi < (1 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 1]))) {
			return true;
		} else if (n > 2 && ((2 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 2]) < 128 || 191 < (2 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 2]))) {
			return true;
		}
		return false;
	};
	$pkg.FullRune = FullRune;
	DecodeRune = function(p) {
		var _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$15, _tmp$16, _tmp$17, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, accept, b1, b2, b3, mask, n, p, p0, r, size, sz, x, x$1;
		r = 0;
		size = 0;
		n = p.$length;
		if (n < 1) {
			_tmp = 65533;
			_tmp$1 = 0;
			r = _tmp;
			size = _tmp$1;
			return [r, size];
		}
		p0 = (0 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 0]);
		x = ((p0 < 0 || p0 >= first.length) ? ($throwRuntimeError("index out of range"), undefined) : first[p0]);
		if (x >= 240) {
			mask = (((x >> 0)) << 31 >> 0) >> 31 >> 0;
			_tmp$2 = (((((0 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 0]) >> 0)) & ~mask) >> 0) | (65533 & mask);
			_tmp$3 = 1;
			r = _tmp$2;
			size = _tmp$3;
			return [r, size];
		}
		sz = (x & 7) >>> 0;
		accept = $clone((x$1 = x >>> 4 << 24 >>> 24, ((x$1 < 0 || x$1 >= acceptRanges.length) ? ($throwRuntimeError("index out of range"), undefined) : acceptRanges[x$1])), acceptRange);
		if (n < ((sz >> 0))) {
			_tmp$4 = 65533;
			_tmp$5 = 1;
			r = _tmp$4;
			size = _tmp$5;
			return [r, size];
		}
		b1 = (1 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 1]);
		if (b1 < accept.lo || accept.hi < b1) {
			_tmp$6 = 65533;
			_tmp$7 = 1;
			r = _tmp$6;
			size = _tmp$7;
			return [r, size];
		}
		if (sz === 2) {
			_tmp$8 = (((((p0 & 31) >>> 0) >> 0)) << 6 >> 0) | ((((b1 & 63) >>> 0) >> 0));
			_tmp$9 = 2;
			r = _tmp$8;
			size = _tmp$9;
			return [r, size];
		}
		b2 = (2 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 2]);
		if (b2 < 128 || 191 < b2) {
			_tmp$10 = 65533;
			_tmp$11 = 1;
			r = _tmp$10;
			size = _tmp$11;
			return [r, size];
		}
		if (sz === 3) {
			_tmp$12 = ((((((p0 & 15) >>> 0) >> 0)) << 12 >> 0) | (((((b1 & 63) >>> 0) >> 0)) << 6 >> 0)) | ((((b2 & 63) >>> 0) >> 0));
			_tmp$13 = 3;
			r = _tmp$12;
			size = _tmp$13;
			return [r, size];
		}
		b3 = (3 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 3]);
		if (b3 < 128 || 191 < b3) {
			_tmp$14 = 65533;
			_tmp$15 = 1;
			r = _tmp$14;
			size = _tmp$15;
			return [r, size];
		}
		_tmp$16 = (((((((p0 & 7) >>> 0) >> 0)) << 18 >> 0) | (((((b1 & 63) >>> 0) >> 0)) << 12 >> 0)) | (((((b2 & 63) >>> 0) >> 0)) << 6 >> 0)) | ((((b3 & 63) >>> 0) >> 0));
		_tmp$17 = 4;
		r = _tmp$16;
		size = _tmp$17;
		return [r, size];
	};
	$pkg.DecodeRune = DecodeRune;
	DecodeRuneInString = function(s) {
		var _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$15, _tmp$16, _tmp$17, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, accept, mask, n, r, s, s0, s1, s2, s3, size, sz, x, x$1;
		r = 0;
		size = 0;
		n = s.length;
		if (n < 1) {
			_tmp = 65533;
			_tmp$1 = 0;
			r = _tmp;
			size = _tmp$1;
			return [r, size];
		}
		s0 = s.charCodeAt(0);
		x = ((s0 < 0 || s0 >= first.length) ? ($throwRuntimeError("index out of range"), undefined) : first[s0]);
		if (x >= 240) {
			mask = (((x >> 0)) << 31 >> 0) >> 31 >> 0;
			_tmp$2 = ((((s.charCodeAt(0) >> 0)) & ~mask) >> 0) | (65533 & mask);
			_tmp$3 = 1;
			r = _tmp$2;
			size = _tmp$3;
			return [r, size];
		}
		sz = (x & 7) >>> 0;
		accept = $clone((x$1 = x >>> 4 << 24 >>> 24, ((x$1 < 0 || x$1 >= acceptRanges.length) ? ($throwRuntimeError("index out of range"), undefined) : acceptRanges[x$1])), acceptRange);
		if (n < ((sz >> 0))) {
			_tmp$4 = 65533;
			_tmp$5 = 1;
			r = _tmp$4;
			size = _tmp$5;
			return [r, size];
		}
		s1 = s.charCodeAt(1);
		if (s1 < accept.lo || accept.hi < s1) {
			_tmp$6 = 65533;
			_tmp$7 = 1;
			r = _tmp$6;
			size = _tmp$7;
			return [r, size];
		}
		if (sz === 2) {
			_tmp$8 = (((((s0 & 31) >>> 0) >> 0)) << 6 >> 0) | ((((s1 & 63) >>> 0) >> 0));
			_tmp$9 = 2;
			r = _tmp$8;
			size = _tmp$9;
			return [r, size];
		}
		s2 = s.charCodeAt(2);
		if (s2 < 128 || 191 < s2) {
			_tmp$10 = 65533;
			_tmp$11 = 1;
			r = _tmp$10;
			size = _tmp$11;
			return [r, size];
		}
		if (sz === 3) {
			_tmp$12 = ((((((s0 & 15) >>> 0) >> 0)) << 12 >> 0) | (((((s1 & 63) >>> 0) >> 0)) << 6 >> 0)) | ((((s2 & 63) >>> 0) >> 0));
			_tmp$13 = 3;
			r = _tmp$12;
			size = _tmp$13;
			return [r, size];
		}
		s3 = s.charCodeAt(3);
		if (s3 < 128 || 191 < s3) {
			_tmp$14 = 65533;
			_tmp$15 = 1;
			r = _tmp$14;
			size = _tmp$15;
			return [r, size];
		}
		_tmp$16 = (((((((s0 & 7) >>> 0) >> 0)) << 18 >> 0) | (((((s1 & 63) >>> 0) >> 0)) << 12 >> 0)) | (((((s2 & 63) >>> 0) >> 0)) << 6 >> 0)) | ((((s3 & 63) >>> 0) >> 0));
		_tmp$17 = 4;
		r = _tmp$16;
		size = _tmp$17;
		return [r, size];
	};
	$pkg.DecodeRuneInString = DecodeRuneInString;
	DecodeLastRune = function(p) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tuple, end, lim, p, r, size, start;
		r = 0;
		size = 0;
		end = p.$length;
		if (end === 0) {
			_tmp = 65533;
			_tmp$1 = 0;
			r = _tmp;
			size = _tmp$1;
			return [r, size];
		}
		start = end - 1 >> 0;
		r = ((((start < 0 || start >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + start]) >> 0));
		if (r < 128) {
			_tmp$2 = r;
			_tmp$3 = 1;
			r = _tmp$2;
			size = _tmp$3;
			return [r, size];
		}
		lim = end - 4 >> 0;
		if (lim < 0) {
			lim = 0;
		}
		start = start - (1) >> 0;
		while (true) {
			if (!(start >= lim)) { break; }
			if (RuneStart(((start < 0 || start >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + start]))) {
				break;
			}
			start = start - (1) >> 0;
		}
		if (start < 0) {
			start = 0;
		}
		_tuple = DecodeRune($subslice(p, start, end));
		r = _tuple[0];
		size = _tuple[1];
		if (!(((start + size >> 0) === end))) {
			_tmp$4 = 65533;
			_tmp$5 = 1;
			r = _tmp$4;
			size = _tmp$5;
			return [r, size];
		}
		_tmp$6 = r;
		_tmp$7 = size;
		r = _tmp$6;
		size = _tmp$7;
		return [r, size];
	};
	$pkg.DecodeLastRune = DecodeLastRune;
	RuneLen = function(r) {
		var r;
		if (r < 0) {
			return -1;
		} else if (r <= 127) {
			return 1;
		} else if (r <= 2047) {
			return 2;
		} else if (55296 <= r && r <= 57343) {
			return -1;
		} else if (r <= 65535) {
			return 3;
		} else if (r <= 1114111) {
			return 4;
		}
		return -1;
	};
	$pkg.RuneLen = RuneLen;
	EncodeRune = function(p, r) {
		var i, p, r;
		i = ((r >>> 0));
		if (i <= 127) {
			(0 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 0] = ((r << 24 >>> 24)));
			return 1;
		} else if (i <= 2047) {
			$unused((1 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 1]));
			(0 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 0] = ((192 | (((r >> 6 >> 0) << 24 >>> 24))) >>> 0));
			(1 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 1] = ((128 | ((((r << 24 >>> 24)) & 63) >>> 0)) >>> 0));
			return 2;
		} else if ((i > 1114111) || (55296 <= i && i <= 57343)) {
			r = 65533;
			$unused((2 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 2]));
			(0 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 0] = ((224 | (((r >> 12 >> 0) << 24 >>> 24))) >>> 0));
			(1 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 1] = ((128 | (((((r >> 6 >> 0) << 24 >>> 24)) & 63) >>> 0)) >>> 0));
			(2 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 2] = ((128 | ((((r << 24 >>> 24)) & 63) >>> 0)) >>> 0));
			return 3;
		} else if (i <= 65535) {
			$unused((2 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 2]));
			(0 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 0] = ((224 | (((r >> 12 >> 0) << 24 >>> 24))) >>> 0));
			(1 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 1] = ((128 | (((((r >> 6 >> 0) << 24 >>> 24)) & 63) >>> 0)) >>> 0));
			(2 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 2] = ((128 | ((((r << 24 >>> 24)) & 63) >>> 0)) >>> 0));
			return 3;
		} else {
			$unused((3 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 3]));
			(0 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 0] = ((240 | (((r >> 18 >> 0) << 24 >>> 24))) >>> 0));
			(1 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 1] = ((128 | (((((r >> 12 >> 0) << 24 >>> 24)) & 63) >>> 0)) >>> 0));
			(2 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 2] = ((128 | (((((r >> 6 >> 0) << 24 >>> 24)) & 63) >>> 0)) >>> 0));
			(3 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 3] = ((128 | ((((r << 24 >>> 24)) & 63) >>> 0)) >>> 0));
			return 4;
		}
	};
	$pkg.EncodeRune = EncodeRune;
	RuneCount = function(p) {
		var accept, c, c$1, c$2, c$3, i, n, np, p, size, x, x$1, x$2, x$3, x$4;
		np = p.$length;
		n = 0;
		i = 0;
		while (true) {
			if (!(i < np)) { break; }
			n = n + (1) >> 0;
			c = ((i < 0 || i >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + i]);
			if (c < 128) {
				i = i + (1) >> 0;
				continue;
			}
			x = ((c < 0 || c >= first.length) ? ($throwRuntimeError("index out of range"), undefined) : first[c]);
			if (x === 241) {
				i = i + (1) >> 0;
				continue;
			}
			size = ((((x & 7) >>> 0) >> 0));
			if ((i + size >> 0) > np) {
				i = i + (1) >> 0;
				continue;
			}
			accept = $clone((x$1 = x >>> 4 << 24 >>> 24, ((x$1 < 0 || x$1 >= acceptRanges.length) ? ($throwRuntimeError("index out of range"), undefined) : acceptRanges[x$1])), acceptRange);
			c$1 = (x$2 = i + 1 >> 0, ((x$2 < 0 || x$2 >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + x$2]));
			if (c$1 < accept.lo || accept.hi < c$1) {
				size = 1;
			} else if (size === 2) {
			} else {
				c$2 = (x$3 = i + 2 >> 0, ((x$3 < 0 || x$3 >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + x$3]));
				if (c$2 < 128 || 191 < c$2) {
					size = 1;
				} else if (size === 3) {
				} else {
					c$3 = (x$4 = i + 3 >> 0, ((x$4 < 0 || x$4 >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + x$4]));
					if (c$3 < 128 || 191 < c$3) {
						size = 1;
					}
				}
			}
			i = i + (size) >> 0;
		}
		return n;
	};
	$pkg.RuneCount = RuneCount;
	RuneCountInString = function(s) {
		var accept, c, c$1, c$2, c$3, i, n, ns, s, size, x, x$1;
		n = 0;
		ns = s.length;
		i = 0;
		while (true) {
			if (!(i < ns)) { break; }
			c = s.charCodeAt(i);
			if (c < 128) {
				i = i + (1) >> 0;
				n = n + (1) >> 0;
				continue;
			}
			x = ((c < 0 || c >= first.length) ? ($throwRuntimeError("index out of range"), undefined) : first[c]);
			if (x === 241) {
				i = i + (1) >> 0;
				n = n + (1) >> 0;
				continue;
			}
			size = ((((x & 7) >>> 0) >> 0));
			if ((i + size >> 0) > ns) {
				i = i + (1) >> 0;
				n = n + (1) >> 0;
				continue;
			}
			accept = $clone((x$1 = x >>> 4 << 24 >>> 24, ((x$1 < 0 || x$1 >= acceptRanges.length) ? ($throwRuntimeError("index out of range"), undefined) : acceptRanges[x$1])), acceptRange);
			c$1 = s.charCodeAt((i + 1 >> 0));
			if (c$1 < accept.lo || accept.hi < c$1) {
				size = 1;
			} else if (size === 2) {
			} else {
				c$2 = s.charCodeAt((i + 2 >> 0));
				if (c$2 < 128 || 191 < c$2) {
					size = 1;
				} else if (size === 3) {
				} else {
					c$3 = s.charCodeAt((i + 3 >> 0));
					if (c$3 < 128 || 191 < c$3) {
						size = 1;
					}
				}
			}
			i = i + (size) >> 0;
			n = n + (1) >> 0;
		}
		n = n;
		return n;
	};
	$pkg.RuneCountInString = RuneCountInString;
	RuneStart = function(b) {
		var b;
		return !((((b & 192) >>> 0) === 128));
	};
	$pkg.RuneStart = RuneStart;
	ValidRune = function(r) {
		var r;
		if (0 <= r && r < 55296) {
			return true;
		} else if (57343 < r && r <= 1114111) {
			return true;
		}
		return false;
	};
	$pkg.ValidRune = ValidRune;
	acceptRange.init("unicode/utf8", [{prop: "lo", name: "lo", anonymous: false, exported: false, typ: $Uint8, tag: ""}, {prop: "hi", name: "hi", anonymous: false, exported: false, typ: $Uint8, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		first = $toNativeArray($kindUint
		acceptRanges = $toNativeArray($kindStruct, [new acceptRange.ptr(128, 191), new acceptRange.ptr(160, 191), new acceptRange.ptr(128, 159), new acceptRange.ptr(144, 191), new acceptRange.ptr(128, 143)]);
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["bytes"] = (function() {
	var $pkg = {}, $init, errors, io, unicode, utf8, Buffer, readOp, asciiSet, Reader, ptrType, sliceType, arrayType, ptrType$1, arrayType$2, ptrType$2, errNegativeRead, IndexByte, makeSlice, NewBuffer, TrimRightFunc, lastIndexFunc, makeASCIISet, makeCutsetFunc, TrimRight, NewReader;
	errors = $packages["errors"];
	io = $packages["io"];
	unicode = $packages["unicode"];
	utf8 = $packages["unicode/utf8"];
	Buffer = $pkg.Buffer = $newType(0, $kindStruct, "bytes.Buffer", true, "bytes", true, function(buf_, off_, bootstrap_, lastRead_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.buf = sliceType.nil;
			this.off = 0;
			this.bootstrap = arrayType.zero();
			this.lastRead = 0;
			return;
		}
		this.buf = buf_;
		this.off = off_;
		this.bootstrap = bootstrap_;
		this.lastRead = lastRead_;
	});
	readOp = $pkg.readOp = $newType(1, $kindInt8, "bytes.readOp", true, "bytes", false, null);
	asciiSet = $pkg.asciiSet = $newType(32, $kindArray, "bytes.asciiSet", true, "bytes", false, null);
	Reader = $pkg.Reader = $newType(0, $kindStruct, "bytes.Reader", true, "bytes", true, function(s_, i_, prevRune_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.s = sliceType.nil;
			this.i = new $Int64(0, 0);
			this.prevRune = 0;
			return;
		}
		this.s = s_;
		this.i = i_;
		this.prevRune = prevRune_;
	});
	ptrType = $ptrType(Buffer);
	sliceType = $sliceType($Uint8);
	arrayType = $arrayType($Uint8, 64);
	ptrType$1 = $ptrType(asciiSet);
	arrayType$2 = $arrayType($Uint32, 8);
	ptrType$2 = $ptrType(Reader);
	IndexByte = function(s, c) {
		var _i, _ref, b, c, i, s;
		_ref = s;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			b = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			if (b === c) {
				return i;
			}
			_i++;
		}
		return -1;
	};
	$pkg.IndexByte = IndexByte;
	Buffer.ptr.prototype.Bytes = function() {
		var b;
		b = this;
		return $subslice(b.buf, b.off);
	};
	Buffer.prototype.Bytes = function() { return this.$val.Bytes(); };
	Buffer.ptr.prototype.String = function() {
		var b;
		b = this;
		if (b === ptrType.nil) {
			return "<nil>";
		}
		return ($bytesToString($subslice(b.buf, b.off)));
	};
	Buffer.prototype.String = function() { return this.$val.String(); };
	Buffer.ptr.prototype.empty = function() {
		var b;
		b = this;
		return b.buf.$length <= b.off;
	};
	Buffer.prototype.empty = function() { return this.$val.empty(); };
	Buffer.ptr.prototype.Len = function() {
		var b;
		b = this;
		return b.buf.$length - b.off >> 0;
	};
	Buffer.prototype.Len = function() { return this.$val.Len(); };
	Buffer.ptr.prototype.Cap = function() {
		var b;
		b = this;
		return b.buf.$capacity;
	};
	Buffer.prototype.Cap = function() { return this.$val.Cap(); };
	Buffer.ptr.prototype.Truncate = function(n) {
		var b, n;
		b = this;
		if (n === 0) {
			b.Reset();
			return;
		}
		b.lastRead = 0;
		if (n < 0 || n > b.Len()) {
			$panic(new $String("bytes.Buffer: truncation out of range"));
		}
		b.buf = $subslice(b.buf, 0, (b.off + n >> 0));
	};
	Buffer.prototype.Truncate = function(n) { return this.$val.Truncate(n); };
	Buffer.ptr.prototype.Reset = function() {
		var b;
		b = this;
		b.buf = $subslice(b.buf, 0, 0);
		b.off = 0;
		b.lastRead = 0;
	};
	Buffer.prototype.Reset = function() { return this.$val.Reset(); };
	Buffer.ptr.prototype.tryGrowByReslice = function(n) {
		var b, l, n;
		b = this;
		l = b.buf.$length;
		if (n <= (b.buf.$capacity - l >> 0)) {
			b.buf = $subslice(b.buf, 0, (l + n >> 0));
			return [l, true];
		}
		return [0, false];
	};
	Buffer.prototype.tryGrowByReslice = function(n) { return this.$val.tryGrowByReslice(n); };
	Buffer.ptr.prototype.grow = function(n) {
		var _q, _tuple, b, buf, c, i, m, n, ok;
		b = this;
		m = b.Len();
		if ((m === 0) && !((b.off === 0))) {
			b.Reset();
		}
		_tuple = b.tryGrowByReslice(n);
		i = _tuple[0];
		ok = _tuple[1];
		if (ok) {
			return i;
		}
		if (b.buf === sliceType.nil && n <= 64) {
			b.buf = $subslice(new sliceType(b.bootstrap), 0, n);
			return 0;
		}
		c = b.buf.$capacity;
		if (n <= ((_q = c / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) - m >> 0)) {
			$copySlice(b.buf, $subslice(b.buf, b.off));
		} else if (c > ((2147483647 - c >> 0) - n >> 0)) {
			$panic($pkg.ErrTooLarge);
		} else {
			buf = makeSlice(($imul(2, c)) + n >> 0);
			$copySlice(buf, $subslice(b.buf, b.off));
			b.buf = buf;
		}
		b.off = 0;
		b.buf = $subslice(b.buf, 0, (m + n >> 0));
		return m;
	};
	Buffer.prototype.grow = function(n) { return this.$val.grow(n); };
	Buffer.ptr.prototype.Grow = function(n) {
		var b, m, n;
		b = this;
		if (n < 0) {
			$panic(new $String("bytes.Buffer.Grow: negative count"));
		}
		m = b.grow(n);
		b.buf = $subslice(b.buf, 0, m);
	};
	Buffer.prototype.Grow = function(n) { return this.$val.Grow(n); };
	Buffer.ptr.prototype.Write = function(p) {
		var _tmp, _tmp$1, _tuple, b, err, m, n, ok, p;
		n = 0;
		err = $ifaceNil;
		b = this;
		b.lastRead = 0;
		_tuple = b.tryGrowByReslice(p.$length);
		m = _tuple[0];
		ok = _tuple[1];
		if (!ok) {
			m = b.grow(p.$length);
		}
		_tmp = $copySlice($subslice(b.buf, m), p);
		_tmp$1 = $ifaceNil;
		n = _tmp;
		err = _tmp$1;
		return [n, err];
	};
	Buffer.prototype.Write = function(p) { return this.$val.Write(p); };
	Buffer.ptr.prototype.WriteString = function(s) {
		var _tmp, _tmp$1, _tuple, b, err, m, n, ok, s;
		n = 0;
		err = $ifaceNil;
		b = this;
		b.lastRead = 0;
		_tuple = b.tryGrowByReslice(s.length);
		m = _tuple[0];
		ok = _tuple[1];
		if (!ok) {
			m = b.grow(s.length);
		}
		_tmp = $copyString($subslice(b.buf, m), s);
		_tmp$1 = $ifaceNil;
		n = _tmp;
		err = _tmp$1;
		return [n, err];
	};
	Buffer.prototype.WriteString = function(s) { return this.$val.WriteString(s); };
	Buffer.ptr.prototype.ReadFrom = function(r) {
		var _r, _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple, b, e, err, i, m, n, r, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tuple = $f._tuple; b = $f.b; e = $f.e; err = $f.err; i = $f.i; m = $f.m; n = $f.n; r = $f.r; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = new $Int64(0, 0);
		err = $ifaceNil;
		b = this;
		b.lastRead = 0;
		/* while (true) { */ case 1:
			i = b.grow(512);
			_r = r.Read($subslice(b.buf, i, b.buf.$capacity)); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r;
			m = _tuple[0];
			e = _tuple[1];
			if (m < 0) {
				$panic(errNegativeRead);
			}
			b.buf = $subslice(b.buf, 0, (i + m >> 0));
			n = (x = (new $Int64(0, m)), new $Int64(n.$high + x.$high, n.$low + x.$low));
			if ($interfaceIsEqual(e, io.EOF)) {
				_tmp = n;
				_tmp$1 = $ifaceNil;
				n = _tmp;
				err = _tmp$1;
				$s = -1; return [n, err];
			}
			if (!($interfaceIsEqual(e, $ifaceNil))) {
				_tmp$2 = n;
				_tmp$3 = e;
				n = _tmp$2;
				err = _tmp$3;
				$s = -1; return [n, err];
			}
		/* } */ $s = 1; continue; case 2:
		$s = -1; return [n, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Buffer.ptr.prototype.ReadFrom }; } $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tuple = _tuple; $f.b = b; $f.e = e; $f.err = err; $f.i = i; $f.m = m; $f.n = n; $f.r = r; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Buffer.prototype.ReadFrom = function(r) { return this.$val.ReadFrom(r); };
	makeSlice = function(n) {
		var n, $deferred;
		/* */ var $err = null; try { $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		$deferred.push([(function() {
			if (!($interfaceIsEqual($recover(), $ifaceNil))) {
				$panic($pkg.ErrTooLarge);
			}
		}), []]);
		return $makeSlice(sliceType, n);
		/* */ } catch(err) { $err = err; return sliceType.nil; } finally { $callDeferred($deferred, $err); }
	};
	Buffer.ptr.prototype.WriteTo = function(w) {
		var _r, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tuple, b, e, err, m, n, nBytes, w, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; _tuple = $f._tuple; b = $f.b; e = $f.e; err = $f.err; m = $f.m; n = $f.n; nBytes = $f.nBytes; w = $f.w; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = new $Int64(0, 0);
		err = $ifaceNil;
		b = this;
		b.lastRead = 0;
		nBytes = b.Len();
		/* */ if (nBytes > 0) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (nBytes > 0) { */ case 1:
			_r = w.Write($subslice(b.buf, b.off)); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r;
			m = _tuple[0];
			e = _tuple[1];
			if (m > nBytes) {
				$panic(new $String("bytes.Buffer.WriteTo: invalid Write count"));
			}
			b.off = b.off + (m) >> 0;
			n = (new $Int64(0, m));
			if (!($interfaceIsEqual(e, $ifaceNil))) {
				_tmp = n;
				_tmp$1 = e;
				n = _tmp;
				err = _tmp$1;
				$s = -1; return [n, err];
			}
			if (!((m === nBytes))) {
				_tmp$2 = n;
				_tmp$3 = io.ErrShortWrite;
				n = _tmp$2;
				err = _tmp$3;
				$s = -1; return [n, err];
			}
		/* } */ case 2:
		b.Reset();
		_tmp$4 = n;
		_tmp$5 = $ifaceNil;
		n = _tmp$4;
		err = _tmp$5;
		$s = -1; return [n, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Buffer.ptr.prototype.WriteTo }; } $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f._tuple = _tuple; $f.b = b; $f.e = e; $f.err = err; $f.m = m; $f.n = n; $f.nBytes = nBytes; $f.w = w; $f.$s = $s; $f.$r = $r; return $f;
	};
	Buffer.prototype.WriteTo = function(w) { return this.$val.WriteTo(w); };
	Buffer.ptr.prototype.WriteByte = function(c) {
		var _tuple, b, c, m, ok, x;
		b = this;
		b.lastRead = 0;
		_tuple = b.tryGrowByReslice(1);
		m = _tuple[0];
		ok = _tuple[1];
		if (!ok) {
			m = b.grow(1);
		}
		(x = b.buf, ((m < 0 || m >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + m] = c));
		return $ifaceNil;
	};
	Buffer.prototype.WriteByte = function(c) { return this.$val.WriteByte(c); };
	Buffer.ptr.prototype.WriteRune = function(r) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple, b, err, m, n, ok, r;
		n = 0;
		err = $ifaceNil;
		b = this;
		if (r < 128) {
			b.WriteByte(((r << 24 >>> 24)));
			_tmp = 1;
			_tmp$1 = $ifaceNil;
			n = _tmp;
			err = _tmp$1;
			return [n, err];
		}
		b.lastRead = 0;
		_tuple = b.tryGrowByReslice(4);
		m = _tuple[0];
		ok = _tuple[1];
		if (!ok) {
			m = b.grow(4);
		}
		n = utf8.EncodeRune($subslice(b.buf, m, (m + 4 >> 0)), r);
		b.buf = $subslice(b.buf, 0, (m + n >> 0));
		_tmp$2 = n;
		_tmp$3 = $ifaceNil;
		n = _tmp$2;
		err = _tmp$3;
		return [n, err];
	};
	Buffer.prototype.WriteRune = function(r) { return this.$val.WriteRune(r); };
	Buffer.ptr.prototype.Read = function(p) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, b, err, n, p;
		n = 0;
		err = $ifaceNil;
		b = this;
		b.lastRead = 0;
		if (b.empty()) {
			b.Reset();
			if (p.$length === 0) {
				_tmp = 0;
				_tmp$1 = $ifaceNil;
				n = _tmp;
				err = _tmp$1;
				return [n, err];
			}
			_tmp$2 = 0;
			_tmp$3 = io.EOF;
			n = _tmp$2;
			err = _tmp$3;
			return [n, err];
		}
		n = $copySlice(p, $subslice(b.buf, b.off));
		b.off = b.off + (n) >> 0;
		if (n > 0) {
			b.lastRead = -1;
		}
		_tmp$4 = n;
		_tmp$5 = $ifaceNil;
		n = _tmp$4;
		err = _tmp$5;
		return [n, err];
	};
	Buffer.prototype.Read = function(p) { return this.$val.Read(p); };
	Buffer.ptr.prototype.Next = function(n) {
		var b, data, m, n;
		b = this;
		b.lastRead = 0;
		m = b.Len();
		if (n > m) {
			n = m;
		}
		data = $subslice(b.buf, b.off, (b.off + n >> 0));
		b.off = b.off + (n) >> 0;
		if (n > 0) {
			b.lastRead = -1;
		}
		return data;
	};
	Buffer.prototype.Next = function(n) { return this.$val.Next(n); };
	Buffer.ptr.prototype.ReadByte = function() {
		var b, c, x, x$1;
		b = this;
		if (b.empty()) {
			b.Reset();
			return [0, io.EOF];
		}
		c = (x = b.buf, x$1 = b.off, ((x$1 < 0 || x$1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + x$1]));
		b.off = b.off + (1) >> 0;
		b.lastRead = -1;
		return [c, $ifaceNil];
	};
	Buffer.prototype.ReadByte = function() { return this.$val.ReadByte(); };
	Buffer.ptr.prototype.ReadRune = function() {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tuple, b, c, err, n, r, size, x, x$1;
		r = 0;
		size = 0;
		err = $ifaceNil;
		b = this;
		if (b.empty()) {
			b.Reset();
			_tmp = 0;
			_tmp$1 = 0;
			_tmp$2 = io.EOF;
			r = _tmp;
			size = _tmp$1;
			err = _tmp$2;
			return [r, size, err];
		}
		c = (x = b.buf, x$1 = b.off, ((x$1 < 0 || x$1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + x$1]));
		if (c < 128) {
			b.off = b.off + (1) >> 0;
			b.lastRead = 1;
			_tmp$3 = ((c >> 0));
			_tmp$4 = 1;
			_tmp$5 = $ifaceNil;
			r = _tmp$3;
			size = _tmp$4;
			err = _tmp$5;
			return [r, size, err];
		}
		_tuple = utf8.DecodeRune($subslice(b.buf, b.off));
		r = _tuple[0];
		n = _tuple[1];
		b.off = b.off + (n) >> 0;
		b.lastRead = ((n << 24 >> 24));
		_tmp$6 = r;
		_tmp$7 = n;
		_tmp$8 = $ifaceNil;
		r = _tmp$6;
		size = _tmp$7;
		err = _tmp$8;
		return [r, size, err];
	};
	Buffer.prototype.ReadRune = function() { return this.$val.ReadRune(); };
	Buffer.ptr.prototype.UnreadRune = function() {
		var b;
		b = this;
		if (b.lastRead <= 0) {
			return errors.New("bytes.Buffer: UnreadRune: previous operation was not a successful ReadRune");
		}
		if (b.off >= ((b.lastRead >> 0))) {
			b.off = b.off - (((b.lastRead >> 0))) >> 0;
		}
		b.lastRead = 0;
		return $ifaceNil;
	};
	Buffer.prototype.UnreadRune = function() { return this.$val.UnreadRune(); };
	Buffer.ptr.prototype.UnreadByte = function() {
		var b;
		b = this;
		if (b.lastRead === 0) {
			return errors.New("bytes.Buffer: UnreadByte: previous operation was not a successful read");
		}
		b.lastRead = 0;
		if (b.off > 0) {
			b.off = b.off - (1) >> 0;
		}
		return $ifaceNil;
	};
	Buffer.prototype.UnreadByte = function() { return this.$val.UnreadByte(); };
	Buffer.ptr.prototype.ReadBytes = function(delim) {
		var _tmp, _tmp$1, _tuple, b, delim, err, line, slice;
		line = sliceType.nil;
		err = $ifaceNil;
		b = this;
		_tuple = b.readSlice(delim);
		slice = _tuple[0];
		err = _tuple[1];
		line = $appendSlice(line, slice);
		_tmp = line;
		_tmp$1 = err;
		line = _tmp;
		err = _tmp$1;
		return [line, err];
	};
	Buffer.prototype.ReadBytes = function(delim) { return this.$val.ReadBytes(delim); };
	Buffer.ptr.prototype.readSlice = function(delim) {
		var _tmp, _tmp$1, b, delim, end, err, i, line;
		line = sliceType.nil;
		err = $ifaceNil;
		b = this;
		i = IndexByte($subslice(b.buf, b.off), delim);
		end = (b.off + i >> 0) + 1 >> 0;
		if (i < 0) {
			end = b.buf.$length;
			err = io.EOF;
		}
		line = $subslice(b.buf, b.off, end);
		b.off = end;
		b.lastRead = -1;
		_tmp = line;
		_tmp$1 = err;
		line = _tmp;
		err = _tmp$1;
		return [line, err];
	};
	Buffer.prototype.readSlice = function(delim) { return this.$val.readSlice(delim); };
	Buffer.ptr.prototype.ReadString = function(delim) {
		var _tmp, _tmp$1, _tuple, b, delim, err, line, slice;
		line = "";
		err = $ifaceNil;
		b = this;
		_tuple = b.readSlice(delim);
		slice = _tuple[0];
		err = _tuple[1];
		_tmp = ($bytesToString(slice));
		_tmp$1 = err;
		line = _tmp;
		err = _tmp$1;
		return [line, err];
	};
	Buffer.prototype.ReadString = function(delim) { return this.$val.ReadString(delim); };
	NewBuffer = function(buf) {
		var buf;
		return new Buffer.ptr(buf, 0, arrayType.zero(), 0);
	};
	$pkg.NewBuffer = NewBuffer;
	TrimRightFunc = function(s, f) {
		var _r, _tuple, f, i, s, wid, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; f = $f.f; i = $f.i; s = $f.s; wid = $f.wid; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = lastIndexFunc(s, f, false); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		i = _r;
		if (i >= 0 && ((i < 0 || i >= s.$length) ? ($throwRuntimeError("index out of range"), undefined) : s.$array[s.$offset + i]) >= 128) {
			_tuple = utf8.DecodeRune($subslice(s, i));
			wid = _tuple[1];
			i = i + (wid) >> 0;
		} else {
			i = i + (1) >> 0;
		}
		$s = -1; return $subslice(s, 0, i);
		/* */ } return; } if ($f === undefined) { $f = { $blk: TrimRightFunc }; } $f._r = _r; $f._tuple = _tuple; $f.f = f; $f.i = i; $f.s = s; $f.wid = wid; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.TrimRightFunc = TrimRightFunc;
	lastIndexFunc = function(s, f, truth) {
		var _r, _tmp, _tmp$1, _tuple, f, i, r, s, size, truth, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tuple = $f._tuple; f = $f.f; i = $f.i; r = $f.r; s = $f.s; size = $f.size; truth = $f.truth; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		i = s.$length;
		/* while (true) { */ case 1:
			/* if (!(i > 0)) { break; } */ if(!(i > 0)) { $s = 2; continue; }
			_tmp = (((x = i - 1 >> 0, ((x < 0 || x >= s.$length) ? ($throwRuntimeError("index out of range"), undefined) : s.$array[s.$offset + x])) >> 0));
			_tmp$1 = 1;
			r = _tmp;
			size = _tmp$1;
			if (r >= 128) {
				_tuple = utf8.DecodeLastRune($subslice(s, 0, i));
				r = _tuple[0];
				size = _tuple[1];
			}
			i = i - (size) >> 0;
			_r = f(r); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			/* */ if (_r === truth) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (_r === truth) { */ case 3:
				$s = -1; return i;
			/* } */ case 4:
		/* } */ $s = 1; continue; case 2:
		$s = -1; return -1;
		/* */ } return; } if ($f === undefined) { $f = { $blk: lastIndexFunc }; } $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tuple = _tuple; $f.f = f; $f.i = i; $f.r = r; $f.s = s; $f.size = size; $f.truth = truth; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	makeASCIISet = function(chars) {
		var _index, _tmp, _tmp$1, _tmp$2, _tmp$3, as, c, chars, i, ok, y;
		as = arrayType$2.zero();
		ok = false;
		i = 0;
		while (true) {
			if (!(i < chars.length)) { break; }
			c = chars.charCodeAt(i);
			if (c >= 128) {
				_tmp = $clone(as, asciiSet);
				_tmp$1 = false;
				asciiSet.copy(as, _tmp);
				ok = _tmp$1;
				return [as, ok];
			}
			_index = c >>> 5 << 24 >>> 24;
			((_index < 0 || _index >= as.length) ? ($throwRuntimeError("index out of range"), undefined) : as[_index] = ((((_index < 0 || _index >= as.length) ? ($throwRuntimeError("index out of range"), undefined) : as[_index]) | (((y = ((((c & 31) >>> 0) >>> 0)), y < 32 ? (1 << y) : 0) >>> 0))) >>> 0));
			i = i + (1) >> 0;
		}
		_tmp$2 = $clone(as, asciiSet);
		_tmp$3 = true;
		asciiSet.copy(as, _tmp$2);
		ok = _tmp$3;
		return [as, ok];
	};
	asciiSet.prototype.contains = function(c) {
		var as, c, x, y;
		as = this.$val;
		return !((((((x = c >>> 5 << 24 >>> 24, (as.nilCheck, ((x < 0 || x >= as.length) ? ($throwRuntimeError("index out of range"), undefined) : as[x]))) & (((y = ((((c & 31) >>> 0) >>> 0)), y < 32 ? (1 << y) : 0) >>> 0))) >>> 0)) === 0));
	};
	$ptrType(asciiSet).prototype.contains = function(c) { return (new asciiSet(this.$get())).contains(c); };
	makeCutsetFunc = function(cutset) {
		var _tuple, as, cutset, isASCII;
		if ((cutset.length === 1) && cutset.charCodeAt(0) < 128) {
			return (function(r) {
				var r;
				return r === ((cutset.charCodeAt(0) >> 0));
			});
		}
		_tuple = makeASCIISet(cutset);
		as = $clone(_tuple[0], asciiSet);
		isASCII = _tuple[1];
		if (isASCII) {
			return (function(r) {
				var r;
				return r < 128 && new ptrType$1(as).contains(((r << 24 >>> 24)));
			});
		}
		return (function(r) {
			var _i, _ref, _rune, c, r;
			_ref = cutset;
			_i = 0;
			while (true) {
				if (!(_i < _ref.length)) { break; }
				_rune = $decodeRune(_ref, _i);
				c = _rune[0];
				if (c === r) {
					return true;
				}
				_i += _rune[1];
			}
			return false;
		});
	};
	TrimRight = function(s, cutset) {
		var _r, cutset, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; cutset = $f.cutset; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = TrimRightFunc(s, makeCutsetFunc(cutset)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: TrimRight }; } $f._r = _r; $f.cutset = cutset; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.TrimRight = TrimRight;
	Reader.ptr.prototype.Len = function() {
		var r, x, x$1, x$2, x$3, x$4;
		r = this;
		if ((x = r.i, x$1 = (new $Int64(0, r.s.$length)), (x.$high > x$1.$high || (x.$high === x$1.$high && x.$low >= x$1.$low)))) {
			return 0;
		}
		return (((x$2 = (x$3 = (new $Int64(0, r.s.$length)), x$4 = r.i, new $Int64(x$3.$high - x$4.$high, x$3.$low - x$4.$low)), x$2.$low + ((x$2.$high >> 31) * 4294967296)) >> 0));
	};
	Reader.prototype.Len = function() { return this.$val.Len(); };
	Reader.ptr.prototype.Size = function() {
		var r;
		r = this;
		return (new $Int64(0, r.s.$length));
	};
	Reader.prototype.Size = function() { return this.$val.Size(); };
	Reader.ptr.prototype.Read = function(b) {
		var _tmp, _tmp$1, b, err, n, r, x, x$1, x$2, x$3;
		n = 0;
		err = $ifaceNil;
		r = this;
		if ((x = r.i, x$1 = (new $Int64(0, r.s.$length)), (x.$high > x$1.$high || (x.$high === x$1.$high && x.$low >= x$1.$low)))) {
			_tmp = 0;
			_tmp$1 = io.EOF;
			n = _tmp;
			err = _tmp$1;
			return [n, err];
		}
		r.prevRune = -1;
		n = $copySlice(b, $subslice(r.s, $flatten64(r.i)));
		r.i = (x$2 = r.i, x$3 = (new $Int64(0, n)), new $Int64(x$2.$high + x$3.$high, x$2.$low + x$3.$low));
		return [n, err];
	};
	Reader.prototype.Read = function(b) { return this.$val.Read(b); };
	Reader.ptr.prototype.ReadAt = function(b, off) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, b, err, n, off, r, x;
		n = 0;
		err = $ifaceNil;
		r = this;
		if ((off.$high < 0 || (off.$high === 0 && off.$low < 0))) {
			_tmp = 0;
			_tmp$1 = errors.New("bytes.Reader.ReadAt: negative offset");
			n = _tmp;
			err = _tmp$1;
			return [n, err];
		}
		if ((x = (new $Int64(0, r.s.$length)), (off.$high > x.$high || (off.$high === x.$high && off.$low >= x.$low)))) {
			_tmp$2 = 0;
			_tmp$3 = io.EOF;
			n = _tmp$2;
			err = _tmp$3;
			return [n, err];
		}
		n = $copySlice(b, $subslice(r.s, $flatten64(off)));
		if (n < b.$length) {
			err = io.EOF;
		}
		return [n, err];
	};
	Reader.prototype.ReadAt = function(b, off) { return this.$val.ReadAt(b, off); };
	Reader.ptr.prototype.ReadByte = function() {
		var b, r, x, x$1, x$2, x$3, x$4, x$5;
		r = this;
		r.prevRune = -1;
		if ((x = r.i, x$1 = (new $Int64(0, r.s.$length)), (x.$high > x$1.$high || (x.$high === x$1.$high && x.$low >= x$1.$low)))) {
			return [0, io.EOF];
		}
		b = (x$2 = r.s, x$3 = r.i, (($flatten64(x$3) < 0 || $flatten64(x$3) >= x$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + $flatten64(x$3)]));
		r.i = (x$4 = r.i, x$5 = new $Int64(0, 1), new $Int64(x$4.$high + x$5.$high, x$4.$low + x$5.$low));
		return [b, $ifaceNil];
	};
	Reader.prototype.ReadByte = function() { return this.$val.ReadByte(); };
	Reader.ptr.prototype.UnreadByte = function() {
		var r, x, x$1, x$2;
		r = this;
		r.prevRune = -1;
		if ((x = r.i, (x.$high < 0 || (x.$high === 0 && x.$low <= 0)))) {
			return errors.New("bytes.Reader.UnreadByte: at beginning of slice");
		}
		r.i = (x$1 = r.i, x$2 = new $Int64(0, 1), new $Int64(x$1.$high - x$2.$high, x$1.$low - x$2.$low));
		return $ifaceNil;
	};
	Reader.prototype.UnreadByte = function() { return this.$val.UnreadByte(); };
	Reader.ptr.prototype.ReadRune = function() {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tuple, c, ch, err, r, size, x, x$1, x$2, x$3, x$4, x$5, x$6, x$7, x$8;
		ch = 0;
		size = 0;
		err = $ifaceNil;
		r = this;
		if ((x = r.i, x$1 = (new $Int64(0, r.s.$length)), (x.$high > x$1.$high || (x.$high === x$1.$high && x.$low >= x$1.$low)))) {
			r.prevRune = -1;
			_tmp = 0;
			_tmp$1 = 0;
			_tmp$2 = io.EOF;
			ch = _tmp;
			size = _tmp$1;
			err = _tmp$2;
			return [ch, size, err];
		}
		r.prevRune = (((x$2 = r.i, x$2.$low + ((x$2.$high >> 31) * 4294967296)) >> 0));
		c = (x$3 = r.s, x$4 = r.i, (($flatten64(x$4) < 0 || $flatten64(x$4) >= x$3.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$3.$array[x$3.$offset + $flatten64(x$4)]));
		if (c < 128) {
			r.i = (x$5 = r.i, x$6 = new $Int64(0, 1), new $Int64(x$5.$high + x$6.$high, x$5.$low + x$6.$low));
			_tmp$3 = ((c >> 0));
			_tmp$4 = 1;
			_tmp$5 = $ifaceNil;
			ch = _tmp$3;
			size = _tmp$4;
			err = _tmp$5;
			return [ch, size, err];
		}
		_tuple = utf8.DecodeRune($subslice(r.s, $flatten64(r.i)));
		ch = _tuple[0];
		size = _tuple[1];
		r.i = (x$7 = r.i, x$8 = (new $Int64(0, size)), new $Int64(x$7.$high + x$8.$high, x$7.$low + x$8.$low));
		return [ch, size, err];
	};
	Reader.prototype.ReadRune = function() { return this.$val.ReadRune(); };
	Reader.ptr.prototype.UnreadRune = function() {
		var r;
		r = this;
		if (r.prevRune < 0) {
			return errors.New("bytes.Reader.UnreadRune: previous operation was not ReadRune");
		}
		r.i = (new $Int64(0, r.prevRune));
		r.prevRune = -1;
		return $ifaceNil;
	};
	Reader.prototype.UnreadRune = function() { return this.$val.UnreadRune(); };
	Reader.ptr.prototype.Seek = function(offset, whence) {
		var _1, abs, offset, r, whence, x, x$1;
		r = this;
		r.prevRune = -1;
		abs = new $Int64(0, 0);
		_1 = whence;
		if (_1 === (0)) {
			abs = offset;
		} else if (_1 === (1)) {
			abs = (x = r.i, new $Int64(x.$high + offset.$high, x.$low + offset.$low));
		} else if (_1 === (2)) {
			abs = (x$1 = (new $Int64(0, r.s.$length)), new $Int64(x$1.$high + offset.$high, x$1.$low + offset.$low));
		} else {
			return [new $Int64(0, 0), errors.New("bytes.Reader.Seek: invalid whence")];
		}
		if ((abs.$high < 0 || (abs.$high === 0 && abs.$low < 0))) {
			return [new $Int64(0, 0), errors.New("bytes.Reader.Seek: negative position")];
		}
		r.i = abs;
		return [abs, $ifaceNil];
	};
	Reader.prototype.Seek = function(offset, whence) { return this.$val.Seek(offset, whence); };
	Reader.ptr.prototype.WriteTo = function(w) {
		var _r, _tmp, _tmp$1, _tuple, b, err, m, n, r, w, x, x$1, x$2, x$3, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tuple = $f._tuple; b = $f.b; err = $f.err; m = $f.m; n = $f.n; r = $f.r; w = $f.w; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = new $Int64(0, 0);
		err = $ifaceNil;
		r = this;
		r.prevRune = -1;
		if ((x = r.i, x$1 = (new $Int64(0, r.s.$length)), (x.$high > x$1.$high || (x.$high === x$1.$high && x.$low >= x$1.$low)))) {
			_tmp = new $Int64(0, 0);
			_tmp$1 = $ifaceNil;
			n = _tmp;
			err = _tmp$1;
			$s = -1; return [n, err];
		}
		b = $subslice(r.s, $flatten64(r.i));
		_r = w.Write(b); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		m = _tuple[0];
		err = _tuple[1];
		if (m > b.$length) {
			$panic(new $String("bytes.Reader.WriteTo: invalid Write count"));
		}
		r.i = (x$2 = r.i, x$3 = (new $Int64(0, m)), new $Int64(x$2.$high + x$3.$high, x$2.$low + x$3.$low));
		n = (new $Int64(0, m));
		if (!((m === b.$length)) && $interfaceIsEqual(err, $ifaceNil)) {
			err = io.ErrShortWrite;
		}
		$s = -1; return [n, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Reader.ptr.prototype.WriteTo }; } $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tuple = _tuple; $f.b = b; $f.err = err; $f.m = m; $f.n = n; $f.r = r; $f.w = w; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.$s = $s; $f.$r = $r; return $f;
	};
	Reader.prototype.WriteTo = function(w) { return this.$val.WriteTo(w); };
	Reader.ptr.prototype.Reset = function(b) {
		var b, r;
		r = this;
		Reader.copy(r, new Reader.ptr(b, new $Int64(0, 0), -1));
	};
	Reader.prototype.Reset = function(b) { return this.$val.Reset(b); };
	NewReader = function(b) {
		var b;
		return new Reader.ptr(b, new $Int64(0, 0), -1);
	};
	$pkg.NewReader = NewReader;
	ptrType.methods = [{prop: "Bytes", name: "Bytes", pkg: "", typ: $funcType([], [sliceType], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "empty", name: "empty", pkg: "bytes", typ: $funcType([], [$Bool], false)}, {prop: "Len", name: "Len", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Cap", name: "Cap", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Truncate", name: "Truncate", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "Reset", name: "Reset", pkg: "", typ: $funcType([], [], false)}, {prop: "tryGrowByReslice", name: "tryGrowByReslice", pkg: "bytes", typ: $funcType([$Int], [$Int, $Bool], false)}, {prop: "grow", name: "grow", pkg: "bytes", typ: $funcType([$Int], [$Int], false)}, {prop: "Grow", name: "Grow", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "Write", name: "Write", pkg: "", typ: $funcType([sliceType], [$Int, $error], false)}, {prop: "WriteString", name: "WriteString", pkg: "", typ: $funcType([$String], [$Int, $error], false)}, {prop: "ReadFrom", name: "ReadFrom", pkg: "", typ: $funcType([io.Reader], [$Int64, $error], false)}, {prop: "WriteTo", name: "WriteTo", pkg: "", typ: $funcType([io.Writer], [$Int64, $error], false)}, {prop: "WriteByte", name: "WriteByte", pkg: "", typ: $funcType([$Uint8], [$error], false)}, {prop: "WriteRune", name: "WriteRune", pkg: "", typ: $funcType([$Int32], [$Int, $error], false)}, {prop: "Read", name: "Read", pkg: "", typ: $funcType([sliceType], [$Int, $error], false)}, {prop: "Next", name: "Next", pkg: "", typ: $funcType([$Int], [sliceType], false)}, {prop: "ReadByte", name: "ReadByte", pkg: "", typ: $funcType([], [$Uint8, $error], false)}, {prop: "ReadRune", name: "ReadRune", pkg: "", typ: $funcType([], [$Int32, $Int, $error], false)}, {prop: "UnreadRune", name: "UnreadRune", pkg: "", typ: $funcType([], [$error], false)}, {prop: "UnreadByte", name: "UnreadByte", pkg: "", typ: $funcType([], [$error], false)}, {prop: "ReadBytes", name: "ReadBytes", pkg: "", typ: $funcType([$Uint8], [sliceType, $error], false)}, {prop: "readSlice", name: "readSlice", pkg: "bytes", typ: $funcType([$Uint8], [sliceType, $error], false)}, {prop: "ReadString", name: "ReadString", pkg: "", typ: $funcType([$Uint8], [$String, $error], false)}];
	ptrType$1.methods = [{prop: "contains", name: "contains", pkg: "bytes", typ: $funcType([$Uint8], [$Bool], false)}];
	ptrType$2.methods = [{prop: "Len", name: "Len", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Size", name: "Size", pkg: "", typ: $funcType([], [$Int64], false)}, {prop: "Read", name: "Read", pkg: "", typ: $funcType([sliceType], [$Int, $error], false)}, {prop: "ReadAt", name: "ReadAt", pkg: "", typ: $funcType([sliceType, $Int64], [$Int, $error], false)}, {prop: "ReadByte", name: "ReadByte", pkg: "", typ: $funcType([], [$Uint8, $error], false)}, {prop: "UnreadByte", name: "UnreadByte", pkg: "", typ: $funcType([], [$error], false)}, {prop: "ReadRune", name: "ReadRune", pkg: "", typ: $funcType([], [$Int32, $Int, $error], false)}, {prop: "UnreadRune", name: "UnreadRune", pkg: "", typ: $funcType([], [$error], false)}, {prop: "Seek", name: "Seek", pkg: "", typ: $funcType([$Int64, $Int], [$Int64, $error], false)}, {prop: "WriteTo", name: "WriteTo", pkg: "", typ: $funcType([io.Writer], [$Int64, $error], false)}, {prop: "Reset", name: "Reset", pkg: "", typ: $funcType([sliceType], [], false)}];
	Buffer.init("bytes", [{prop: "buf", name: "buf", anonymous: false, exported: false, typ: sliceType, tag: ""}, {prop: "off", name: "off", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "bootstrap", name: "bootstrap", anonymous: false, exported: false, typ: arrayType, tag: ""}, {prop: "lastRead", name: "lastRead", anonymous: false, exported: false, typ: readOp, tag: ""}]);
	asciiSet.init($Uint32, 8);
	Reader.init("bytes", [{prop: "s", name: "s", anonymous: false, exported: false, typ: sliceType, tag: ""}, {prop: "i", name: "i", anonymous: false, exported: false, typ: $Int64, tag: ""}, {prop: "prevRune", name: "prevRune", anonymous: false, exported: false, typ: $Int, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = errors.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = io.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = unicode.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = utf8.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$pkg.ErrTooLarge = errors.New("bytes.Buffer: too large");
		errNegativeRead = errors.New("bytes.Buffer: reader returned negative count from Read");
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["math"] = (function() {
	var $pkg = {}, $init, js, arrayType, arrayType$1, arrayType$2, structType, math, zero, posInf, negInf, nan, buf, Exp, Frexp, Inf, IsInf, IsNaN, Ldexp, Log, Log2, Signbit, Sqrt, init, Float32bits, Float32frombits, Float64bits, Float64frombits, Abs, normalize, frexp, log2;
	js = $packages["github.com/gopherjs/gopherjs/js"];
	arrayType = $arrayType($Uint32, 2);
	arrayType$1 = $arrayType($Float32, 2);
	arrayType$2 = $arrayType($Float64, 1);
	structType = $structType("math", [{prop: "uint32array", name: "uint32array", anonymous: false, exported: false, typ: arrayType, tag: ""}, {prop: "float32array", name: "float32array", anonymous: false, exported: false, typ: arrayType$1, tag: ""}, {prop: "float64array", name: "float64array", anonymous: false, exported: false, typ: arrayType$2, tag: ""}]);
	Exp = function(x) {
		var x;
		return $parseFloat(math.exp(x));
	};
	$pkg.Exp = Exp;
	Frexp = function(f) {
		var _tuple, exp$1, f, frac;
		frac = 0;
		exp$1 = 0;
		_tuple = frexp(f);
		frac = _tuple[0];
		exp$1 = _tuple[1];
		return [frac, exp$1];
	};
	$pkg.Frexp = Frexp;
	Inf = function(sign) {
		var sign;
		if (sign >= 0) {
			return posInf;
		} else {
			return negInf;
		}
	};
	$pkg.Inf = Inf;
	IsInf = function(f, sign) {
		var f, sign;
		if (f === posInf) {
			return sign >= 0;
		}
		if (f === negInf) {
			return sign <= 0;
		}
		return false;
	};
	$pkg.IsInf = IsInf;
	IsNaN = function(f) {
		var f, is;
		is = false;
		is = !((f === f));
		return is;
	};
	$pkg.IsNaN = IsNaN;
	Ldexp = function(frac, exp$1) {
		var exp$1, frac;
		if (frac === 0) {
			return frac;
		}
		if (exp$1 >= 1024) {
			return frac * $parseFloat(math.pow(2, 1023)) * $parseFloat(math.pow(2, exp$1 - 1023 >> 0));
		}
		if (exp$1 <= -1024) {
			return frac * $parseFloat(math.pow(2, -1023)) * $parseFloat(math.pow(2, exp$1 + 1023 >> 0));
		}
		return frac * $parseFloat(math.pow(2, exp$1));
	};
	$pkg.Ldexp = Ldexp;
	Log = function(x) {
		var x;
		if (!((x === x))) {
			return nan;
		}
		return $parseFloat(math.log(x));
	};
	$pkg.Log = Log;
	Log2 = function(x) {
		var x;
		return log2(x);
	};
	$pkg.Log2 = Log2;
	Signbit = function(x) {
		var x;
		return x < 0 || (1 / x === negInf);
	};
	$pkg.Signbit = Signbit;
	Sqrt = function(x) {
		var x;
		return $parseFloat(math.sqrt(x));
	};
	$pkg.Sqrt = Sqrt;
	init = function() {
		var ab;
		ab = new ($global.ArrayBuffer)(8);
		buf.uint32array = new ($global.Uint32Array)(ab);
		buf.float32array = new ($global.Float32Array)(ab);
		buf.float64array = new ($global.Float64Array)(ab);
	};
	Float32bits = function(f) {
		var f;
		buf.float32array[0] = f;
		return buf.uint32array[0];
	};
	$pkg.Float32bits = Float32bits;
	Float32frombits = function(b) {
		var b;
		buf.uint32array[0] = b;
		return buf.float32array[0];
	};
	$pkg.Float32frombits = Float32frombits;
	Float64bits = function(f) {
		var f, x, x$1;
		buf.float64array[0] = f;
		return (x = $shiftLeft64((new $Uint64(0, buf.uint32array[1])), 32), x$1 = (new $Uint64(0, buf.uint32array[0])), new $Uint64(x.$high + x$1.$high, x.$low + x$1.$low));
	};
	$pkg.Float64bits = Float64bits;
	Float64frombits = function(b) {
		var b;
		buf.uint32array[0] = ((b.$low >>> 0));
		buf.uint32array[1] = (($shiftRightUint64(b, 32).$low >>> 0));
		return buf.float64array[0];
	};
	$pkg.Float64frombits = Float64frombits;
	Abs = function(x) {
		var x, x$1;
		return Float64frombits((x$1 = Float64bits(x), new $Uint64(x$1.$high & ~2147483648, (x$1.$low & ~0) >>> 0)));
	};
	$pkg.Abs = Abs;
	normalize = function(x) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, exp$1, x, y;
		y = 0;
		exp$1 = 0;
		if (Abs(x) < 2.2250738585072014e-308) {
			_tmp = x * 4.503599627370496e+15;
			_tmp$1 = -52;
			y = _tmp;
			exp$1 = _tmp$1;
			return [y, exp$1];
		}
		_tmp$2 = x;
		_tmp$3 = 0;
		y = _tmp$2;
		exp$1 = _tmp$3;
		return [y, exp$1];
	};
	frexp = function(f) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple, exp$1, f, frac, x, x$1, x$2, x$3;
		frac = 0;
		exp$1 = 0;
		if ((f === 0)) {
			_tmp = f;
			_tmp$1 = 0;
			frac = _tmp;
			exp$1 = _tmp$1;
			return [frac, exp$1];
		} else if (IsInf(f, 0) || IsNaN(f)) {
			_tmp$2 = f;
			_tmp$3 = 0;
			frac = _tmp$2;
			exp$1 = _tmp$3;
			return [frac, exp$1];
		}
		_tuple = normalize(f);
		f = _tuple[0];
		exp$1 = _tuple[1];
		x = Float64bits(f);
		exp$1 = exp$1 + ((((((x$1 = $shiftRightUint64(x, 52), new $Uint64(x$1.$high & 0, (x$1.$low & 2047) >>> 0)).$low >> 0)) - 1023 >> 0) + 1 >> 0)) >> 0;
		x = (x$2 = new $Uint64(2146435072, 0), new $Uint64(x.$high & ~x$2.$high, (x.$low & ~x$2.$low) >>> 0));
		x = (x$3 = new $Uint64(1071644672, 0), new $Uint64(x.$high | x$3.$high, (x.$low | x$3.$low) >>> 0));
		frac = Float64frombits(x);
		return [frac, exp$1];
	};
	log2 = function(x) {
		var _tuple, exp$1, frac, x;
		_tuple = Frexp(x);
		frac = _tuple[0];
		exp$1 = _tuple[1];
		if (frac === 0.5) {
			return ((exp$1 - 1 >> 0));
		}
		return Log(frac) * 1.4426950408889634 + (exp$1);
	};
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = js.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		buf = new structType.ptr(arrayType.zero(), arrayType$1.zero(), arrayType$2.zero());
		math = $global.Math;
		zero = 0;
		posInf = 1 / zero;
		negInf = -1 / zero;
		nan = 0 / zero;
		init();
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["strconv"] = (function() {
	var $pkg = {}, $init, errors, math, utf8, NumError, decimal, leftCheat, extFloat, floatInfo, decimalSlice, sliceType$3, sliceType$4, sliceType$5, arrayType, sliceType$6, ptrType, arrayType$1, arrayType$2, ptrType$1, arrayType$3, arrayType$4, ptrType$2, ptrType$3, ptrType$4, optimize, leftcheats, smallPowersOfTen, powersOfTen, uint64pow10, float32info, float32info$24ptr, float64info, float64info$24ptr, isPrint16, isNotPrint16, isPrint32, isNotPrint32, isGraphic, shifts, syntaxError, rangeError, baseError, bitSizeError, ParseUint, ParseInt, digitZero, trim, rightShift, prefixIsLessThan, leftShift, shouldRoundUp, frexp10Many, adjustLastDigitFixed, adjustLastDigit, AppendFloat, genericFtoa, bigFtoa, formatDigits, roundShortest, fmtE, fmtF, fmtB, min, max, FormatInt, Itoa, AppendInt, small, formatBits, quoteWith, appendQuotedWith, appendQuotedRuneWith, appendEscapedRune, Quote, AppendQuote, AppendQuoteToASCII, AppendQuoteRune, AppendQuoteRuneToASCII, CanBackquote, unhex, UnquoteChar, Unquote, contains, bsearch16, bsearch32, IsPrint, isInGraphicList;
	errors = $packages["errors"];
	math = $packages["math"];
	utf8 = $packages["unicode/utf8"];
	NumError = $pkg.NumError = $newType(0, $kindStruct, "strconv.NumError", true, "strconv", true, function(Func_, Num_, Err_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Func = "";
			this.Num = "";
			this.Err = $ifaceNil;
			return;
		}
		this.Func = Func_;
		this.Num = Num_;
		this.Err = Err_;
	});
	decimal = $pkg.decimal = $newType(0, $kindStruct, "strconv.decimal", true, "strconv", false, function(d_, nd_, dp_, neg_, trunc_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.d = arrayType.zero();
			this.nd = 0;
			this.dp = 0;
			this.neg = false;
			this.trunc = false;
			return;
		}
		this.d = d_;
		this.nd = nd_;
		this.dp = dp_;
		this.neg = neg_;
		this.trunc = trunc_;
	});
	leftCheat = $pkg.leftCheat = $newType(0, $kindStruct, "strconv.leftCheat", true, "strconv", false, function(delta_, cutoff_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.delta = 0;
			this.cutoff = "";
			return;
		}
		this.delta = delta_;
		this.cutoff = cutoff_;
	});
	extFloat = $pkg.extFloat = $newType(0, $kindStruct, "strconv.extFloat", true, "strconv", false, function(mant_, exp_, neg_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.mant = new $Uint64(0, 0);
			this.exp = 0;
			this.neg = false;
			return;
		}
		this.mant = mant_;
		this.exp = exp_;
		this.neg = neg_;
	});
	floatInfo = $pkg.floatInfo = $newType(0, $kindStruct, "strconv.floatInfo", true, "strconv", false, function(mantbits_, expbits_, bias_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.mantbits = 0;
			this.expbits = 0;
			this.bias = 0;
			return;
		}
		this.mantbits = mantbits_;
		this.expbits = expbits_;
		this.bias = bias_;
	});
	decimalSlice = $pkg.decimalSlice = $newType(0, $kindStruct, "strconv.decimalSlice", true, "strconv", false, function(d_, nd_, dp_, neg_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.d = sliceType$6.nil;
			this.nd = 0;
			this.dp = 0;
			this.neg = false;
			return;
		}
		this.d = d_;
		this.nd = nd_;
		this.dp = dp_;
		this.neg = neg_;
	});
	sliceType$3 = $sliceType(leftCheat);
	sliceType$4 = $sliceType($Uint16);
	sliceType$5 = $sliceType($Uint32);
	arrayType = $arrayType($Uint8, 800);
	sliceType$6 = $sliceType($Uint8);
	ptrType = $ptrType(NumError);
	arrayType$1 = $arrayType($Uint8, 24);
	arrayType$2 = $arrayType($Uint8, 32);
	ptrType$1 = $ptrType(floatInfo);
	arrayType$3 = $arrayType($Uint8, 65);
	arrayType$4 = $arrayType($Uint8, 4);
	ptrType$2 = $ptrType(decimal);
	ptrType$3 = $ptrType(decimalSlice);
	ptrType$4 = $ptrType(extFloat);
	NumError.ptr.prototype.Error = function() {
		var _r, e, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; e = $f.e; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		e = this;
		_r = e.Err.Error(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return "strconv." + e.Func + ": " + "parsing " + Quote(e.Num) + ": " + _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: NumError.ptr.prototype.Error }; } $f._r = _r; $f.e = e; $f.$s = $s; $f.$r = $r; return $f;
	};
	NumError.prototype.Error = function() { return this.$val.Error(); };
	syntaxError = function(fn, str) {
		var fn, str;
		return new NumError.ptr(fn, str, $pkg.ErrSyntax);
	};
	rangeError = function(fn, str) {
		var fn, str;
		return new NumError.ptr(fn, str, $pkg.ErrRange);
	};
	baseError = function(fn, str, base) {
		var base, fn, str;
		return new NumError.ptr(fn, str, errors.New("invalid base " + Itoa(base)));
	};
	bitSizeError = function(fn, str, bitSize) {
		var bitSize, fn, str;
		return new NumError.ptr(fn, str, errors.New("invalid bit size " + Itoa(bitSize)));
	};
	ParseUint = function(s, base, bitSize) {
		var _1, _i, _ref, base, bitSize, c, cutoff, d, maxVal, n, n1, s, s0, x, x$1, x$2;
		if (s.length === 0) {
			return [new $Uint64(0, 0), syntaxError("ParseUint", s)];
		}
		s0 = s;
		if (2 <= base && base <= 36) {
		} else if ((base === 0)) {
			if ((s.charCodeAt(0) === 48) && s.length > 1 && ((s.charCodeAt(1) === 120) || (s.charCodeAt(1) === 88))) {
				if (s.length < 3) {
					return [new $Uint64(0, 0), syntaxError("ParseUint", s0)];
				}
				base = 16;
				s = $substring(s, 2);
			} else if ((s.charCodeAt(0) === 48)) {
				base = 8;
				s = $substring(s, 1);
			} else {
				base = 10;
			}
		} else {
			return [new $Uint64(0, 0), baseError("ParseUint", s0, base)];
		}
		if (bitSize === 0) {
			bitSize = 32;
		} else if (bitSize < 0 || bitSize > 64) {
			return [new $Uint64(0, 0), bitSizeError("ParseUint", s0, bitSize)];
		}
		cutoff = new $Uint64(0, 0);
		_1 = base;
		if (_1 === (10)) {
			cutoff = new $Uint64(429496729, 2576980378);
		} else if (_1 === (16)) {
			cutoff = new $Uint64(268435456, 0);
		} else {
			cutoff = (x = $div64(new $Uint64(4294967295, 4294967295), (new $Uint64(0, base)), false), new $Uint64(x.$high + 0, x.$low + 1));
		}
		maxVal = (x$1 = $shiftLeft64(new $Uint64(0, 1), ((bitSize >>> 0))), new $Uint64(x$1.$high - 0, x$1.$low - 1));
		n = new $Uint64(0, 0);
		_ref = (new sliceType$6($stringToBytes(s)));
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			c = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			d = 0;
			if (48 <= c && c <= 57) {
				d = c - 48 << 24 >>> 24;
			} else if (97 <= c && c <= 122) {
				d = (c - 97 << 24 >>> 24) + 10 << 24 >>> 24;
			} else if (65 <= c && c <= 90) {
				d = (c - 65 << 24 >>> 24) + 10 << 24 >>> 24;
			} else {
				return [new $Uint64(0, 0), syntaxError("ParseUint", s0)];
			}
			if (d >= ((base << 24 >>> 24))) {
				return [new $Uint64(0, 0), syntaxError("ParseUint", s0)];
			}
			if ((n.$high > cutoff.$high || (n.$high === cutoff.$high && n.$low >= cutoff.$low))) {
				return [maxVal, rangeError("ParseUint", s0)];
			}
			n = $mul64(n, ((new $Uint64(0, base))));
			n1 = (x$2 = (new $Uint64(0, d)), new $Uint64(n.$high + x$2.$high, n.$low + x$2.$low));
			if ((n1.$high < n.$high || (n1.$high === n.$high && n1.$low < n.$low)) || (n1.$high > maxVal.$high || (n1.$high === maxVal.$high && n1.$low > maxVal.$low))) {
				return [maxVal, rangeError("ParseUint", s0)];
			}
			n = n1;
			_i++;
		}
		return [n, $ifaceNil];
	};
	$pkg.ParseUint = ParseUint;
	ParseInt = function(s, base, bitSize) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tuple, base, bitSize, cutoff, err, i, n, neg, s, s0, un, x, x$1;
		i = new $Int64(0, 0);
		err = $ifaceNil;
		if (s.length === 0) {
			_tmp = new $Int64(0, 0);
			_tmp$1 = syntaxError("ParseInt", s);
			i = _tmp;
			err = _tmp$1;
			return [i, err];
		}
		s0 = s;
		neg = false;
		if (s.charCodeAt(0) === 43) {
			s = $substring(s, 1);
		} else if (s.charCodeAt(0) === 45) {
			neg = true;
			s = $substring(s, 1);
		}
		un = new $Uint64(0, 0);
		_tuple = ParseUint(s, base, bitSize);
		un = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil)) && !($interfaceIsEqual($assertType(err, ptrType).Err, $pkg.ErrRange))) {
			$assertType(err, ptrType).Func = "ParseInt";
			$assertType(err, ptrType).Num = s0;
			_tmp$2 = new $Int64(0, 0);
			_tmp$3 = err;
			i = _tmp$2;
			err = _tmp$3;
			return [i, err];
		}
		if (bitSize === 0) {
			bitSize = 32;
		}
		cutoff = ($shiftLeft64(new $Uint64(0, 1), (((bitSize - 1 >> 0) >>> 0))));
		if (!neg && (un.$high > cutoff.$high || (un.$high === cutoff.$high && un.$low >= cutoff.$low))) {
			_tmp$4 = ((x = new $Uint64(cutoff.$high - 0, cutoff.$low - 1), new $Int64(x.$high, x.$low)));
			_tmp$5 = rangeError("ParseInt", s0);
			i = _tmp$4;
			err = _tmp$5;
			return [i, err];
		}
		if (neg && (un.$high > cutoff.$high || (un.$high === cutoff.$high && un.$low > cutoff.$low))) {
			_tmp$6 = (x$1 = (new $Int64(cutoff.$high, cutoff.$low)), new $Int64(-x$1.$high, -x$1.$low));
			_tmp$7 = rangeError("ParseInt", s0);
			i = _tmp$6;
			err = _tmp$7;
			return [i, err];
		}
		n = (new $Int64(un.$high, un.$low));
		if (neg) {
			n = new $Int64(-n.$high, -n.$low);
		}
		_tmp$8 = n;
		_tmp$9 = $ifaceNil;
		i = _tmp$8;
		err = _tmp$9;
		return [i, err];
	};
	$pkg.ParseInt = ParseInt;
	decimal.ptr.prototype.String = function() {
		var a, buf, n, w;
		a = this;
		n = 10 + a.nd >> 0;
		if (a.dp > 0) {
			n = n + (a.dp) >> 0;
		}
		if (a.dp < 0) {
			n = n + (-a.dp) >> 0;
		}
		buf = $makeSlice(sliceType$6, n);
		w = 0;
		if ((a.nd === 0)) {
			return "0";
		} else if (a.dp <= 0) {
			((w < 0 || w >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + w] = 48);
			w = w + (1) >> 0;
			((w < 0 || w >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + w] = 46);
			w = w + (1) >> 0;
			w = w + (digitZero($subslice(buf, w, (w + -a.dp >> 0)))) >> 0;
			w = w + ($copySlice($subslice(buf, w), $subslice(new sliceType$6(a.d), 0, a.nd))) >> 0;
		} else if (a.dp < a.nd) {
			w = w + ($copySlice($subslice(buf, w), $subslice(new sliceType$6(a.d), 0, a.dp))) >> 0;
			((w < 0 || w >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + w] = 46);
			w = w + (1) >> 0;
			w = w + ($copySlice($subslice(buf, w), $subslice(new sliceType$6(a.d), a.dp, a.nd))) >> 0;
		} else {
			w = w + ($copySlice($subslice(buf, w), $subslice(new sliceType$6(a.d), 0, a.nd))) >> 0;
			w = w + (digitZero($subslice(buf, w, ((w + a.dp >> 0) - a.nd >> 0)))) >> 0;
		}
		return ($bytesToString($subslice(buf, 0, w)));
	};
	decimal.prototype.String = function() { return this.$val.String(); };
	digitZero = function(dst) {
		var _i, _ref, dst, i;
		_ref = dst;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			((i < 0 || i >= dst.$length) ? ($throwRuntimeError("index out of range"), undefined) : dst.$array[dst.$offset + i] = 48);
			_i++;
		}
		return dst.$length;
	};
	trim = function(a) {
		var a, x, x$1;
		while (true) {
			if (!(a.nd > 0 && ((x = a.d, x$1 = a.nd - 1 >> 0, ((x$1 < 0 || x$1 >= x.length) ? ($throwRuntimeError("index out of range"), undefined) : x[x$1])) === 48))) { break; }
			a.nd = a.nd - (1) >> 0;
		}
		if (a.nd === 0) {
			a.dp = 0;
		}
	};
	decimal.ptr.prototype.Assign = function(v) {
		var a, buf, n, v, v1, x, x$1, x$2;
		a = this;
		buf = arrayType$1.zero();
		n = 0;
		while (true) {
			if (!((v.$high > 0 || (v.$high === 0 && v.$low > 0)))) { break; }
			v1 = $div64(v, new $Uint64(0, 10), false);
			v = (x = $mul64(new $Uint64(0, 10), v1), new $Uint64(v.$high - x.$high, v.$low - x.$low));
			((n < 0 || n >= buf.length) ? ($throwRuntimeError("index out of range"), undefined) : buf[n] = ((new $Uint64(v.$high + 0, v.$low + 48).$low << 24 >>> 24)));
			n = n + (1) >> 0;
			v = v1;
		}
		a.nd = 0;
		n = n - (1) >> 0;
		while (true) {
			if (!(n >= 0)) { break; }
			(x$1 = a.d, x$2 = a.nd, ((x$2 < 0 || x$2 >= x$1.length) ? ($throwRuntimeError("index out of range"), undefined) : x$1[x$2] = ((n < 0 || n >= buf.length) ? ($throwRuntimeError("index out of range"), undefined) : buf[n])));
			a.nd = a.nd + (1) >> 0;
			n = n - (1) >> 0;
		}
		a.dp = a.nd;
		trim(a);
	};
	decimal.prototype.Assign = function(v) { return this.$val.Assign(v); };
	rightShift = function(a, k) {
		var a, c, c$1, dig, dig$1, k, mask, n, r, w, x, x$1, x$2, x$3, y, y$1, y$2, y$3, y$4;
		r = 0;
		w = 0;
		n = 0;
		while (true) {
			if (!(((y = k, y < 32 ? (n >>> y) : 0) >>> 0) === 0)) { break; }
			if (r >= a.nd) {
				if (n === 0) {
					a.nd = 0;
					return;
				}
				while (true) {
					if (!(((y$1 = k, y$1 < 32 ? (n >>> y$1) : 0) >>> 0) === 0)) { break; }
					n = n * 10 >>> 0;
					r = r + (1) >> 0;
				}
				break;
			}
			c = (((x = a.d, ((r < 0 || r >= x.length) ? ($throwRuntimeError("index out of range"), undefined) : x[r])) >>> 0));
			n = ((n * 10 >>> 0) + c >>> 0) - 48 >>> 0;
			r = r + (1) >> 0;
		}
		a.dp = a.dp - ((r - 1 >> 0)) >> 0;
		mask = (((y$2 = k, y$2 < 32 ? (1 << y$2) : 0) >>> 0)) - 1 >>> 0;
		while (true) {
			if (!(r < a.nd)) { break; }
			c$1 = (((x$1 = a.d, ((r < 0 || r >= x$1.length) ? ($throwRuntimeError("index out of range"), undefined) : x$1[r])) >>> 0));
			dig = (y$3 = k, y$3 < 32 ? (n >>> y$3) : 0) >>> 0;
			n = (n & (mask)) >>> 0;
			(x$2 = a.d, ((w < 0 || w >= x$2.length) ? ($throwRuntimeError("index out of range"), undefined) : x$2[w] = (((dig + 48 >>> 0) << 24 >>> 24))));
			w = w + (1) >> 0;
			n = ((n * 10 >>> 0) + c$1 >>> 0) - 48 >>> 0;
			r = r + (1) >> 0;
		}
		while (true) {
			if (!(n > 0)) { break; }
			dig$1 = (y$4 = k, y$4 < 32 ? (n >>> y$4) : 0) >>> 0;
			n = (n & (mask)) >>> 0;
			if (w < 800) {
				(x$3 = a.d, ((w < 0 || w >= x$3.length) ? ($throwRuntimeError("index out of range"), undefined) : x$3[w] = (((dig$1 + 48 >>> 0) << 24 >>> 24))));
				w = w + (1) >> 0;
			} else if (dig$1 > 0) {
				a.trunc = true;
			}
			n = n * 10 >>> 0;
		}
		a.nd = w;
		trim(a);
	};
	prefixIsLessThan = function(b, s) {
		var b, i, s;
		i = 0;
		while (true) {
			if (!(i < s.length)) { break; }
			if (i >= b.$length) {
				return true;
			}
			if (!((((i < 0 || i >= b.$length) ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + i]) === s.charCodeAt(i)))) {
				return ((i < 0 || i >= b.$length) ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + i]) < s.charCodeAt(i);
			}
			i = i + (1) >> 0;
		}
		return false;
	};
	leftShift = function(a, k) {
		var _q, _q$1, a, delta, k, n, quo, quo$1, r, rem, rem$1, w, x, x$1, x$2, y;
		delta = ((k < 0 || k >= leftcheats.$length) ? ($throwRuntimeError("index out of range"), undefined) : leftcheats.$array[leftcheats.$offset + k]).delta;
		if (prefixIsLessThan($subslice(new sliceType$6(a.d), 0, a.nd), ((k < 0 || k >= leftcheats.$length) ? ($throwRuntimeError("index out of range"), undefined) : leftcheats.$array[leftcheats.$offset + k]).cutoff)) {
			delta = delta - (1) >> 0;
		}
		r = a.nd;
		w = a.nd + delta >> 0;
		n = 0;
		r = r - (1) >> 0;
		while (true) {
			if (!(r >= 0)) { break; }
			n = n + (((y = k, y < 32 ? ((((((x = a.d, ((r < 0 || r >= x.length) ? ($throwRuntimeError("index out of range"), undefined) : x[r])) >>> 0)) - 48 >>> 0)) << y) : 0) >>> 0)) >>> 0;
			quo = (_q = n / 10, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero"));
			rem = n - (10 * quo >>> 0) >>> 0;
			w = w - (1) >> 0;
			if (w < 800) {
				(x$1 = a.d, ((w < 0 || w >= x$1.length) ? ($throwRuntimeError("index out of range"), undefined) : x$1[w] = (((rem + 48 >>> 0) << 24 >>> 24))));
			} else if (!((rem === 0))) {
				a.trunc = true;
			}
			n = quo;
			r = r - (1) >> 0;
		}
		while (true) {
			if (!(n > 0)) { break; }
			quo$1 = (_q$1 = n / 10, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >>> 0 : $throwRuntimeError("integer divide by zero"));
			rem$1 = n - (10 * quo$1 >>> 0) >>> 0;
			w = w - (1) >> 0;
			if (w < 800) {
				(x$2 = a.d, ((w < 0 || w >= x$2.length) ? ($throwRuntimeError("index out of range"), undefined) : x$2[w] = (((rem$1 + 48 >>> 0) << 24 >>> 24))));
			} else if (!((rem$1 === 0))) {
				a.trunc = true;
			}
			n = quo$1;
		}
		a.nd = a.nd + (delta) >> 0;
		if (a.nd >= 800) {
			a.nd = 800;
		}
		a.dp = a.dp + (delta) >> 0;
		trim(a);
	};
	decimal.ptr.prototype.Shift = function(k) {
		var a, k;
		a = this;
		if ((a.nd === 0)) {
		} else if (k > 0) {
			while (true) {
				if (!(k > 28)) { break; }
				leftShift(a, 28);
				k = k - (28) >> 0;
			}
			leftShift(a, ((k >>> 0)));
		} else if (k < 0) {
			while (true) {
				if (!(k < -28)) { break; }
				rightShift(a, 28);
				k = k + (28) >> 0;
			}
			rightShift(a, ((-k >>> 0)));
		}
	};
	decimal.prototype.Shift = function(k) { return this.$val.Shift(k); };
	shouldRoundUp = function(a, nd) {
		var _r, a, nd, x, x$1, x$2, x$3;
		if (nd < 0 || nd >= a.nd) {
			return false;
		}
		if (((x = a.d, ((nd < 0 || nd >= x.length) ? ($throwRuntimeError("index out of range"), undefined) : x[nd])) === 53) && ((nd + 1 >> 0) === a.nd)) {
			if (a.trunc) {
				return true;
			}
			return nd > 0 && !(((_r = (((x$1 = a.d, x$2 = nd - 1 >> 0, ((x$2 < 0 || x$2 >= x$1.length) ? ($throwRuntimeError("index out of range"), undefined) : x$1[x$2])) - 48 << 24 >>> 24)) % 2, _r === _r ? _r : $throwRuntimeError("integer divide by zero")) === 0));
		}
		return (x$3 = a.d, ((nd < 0 || nd >= x$3.length) ? ($throwRuntimeError("index out of range"), undefined) : x$3[nd])) >= 53;
	};
	decimal.ptr.prototype.Round = function(nd) {
		var a, nd;
		a = this;
		if (nd < 0 || nd >= a.nd) {
			return;
		}
		if (shouldRoundUp(a, nd)) {
			a.RoundUp(nd);
		} else {
			a.RoundDown(nd);
		}
	};
	decimal.prototype.Round = function(nd) { return this.$val.Round(nd); };
	decimal.ptr.prototype.RoundDown = function(nd) {
		var a, nd;
		a = this;
		if (nd < 0 || nd >= a.nd) {
			return;
		}
		a.nd = nd;
		trim(a);
	};
	decimal.prototype.RoundDown = function(nd) { return this.$val.RoundDown(nd); };
	decimal.ptr.prototype.RoundUp = function(nd) {
		var a, c, i, nd, x, x$1, x$2;
		a = this;
		if (nd < 0 || nd >= a.nd) {
			return;
		}
		i = nd - 1 >> 0;
		while (true) {
			if (!(i >= 0)) { break; }
			c = (x = a.d, ((i < 0 || i >= x.length) ? ($throwRuntimeError("index out of range"), undefined) : x[i]));
			if (c < 57) {
				(x$2 = a.d, ((i < 0 || i >= x$2.length) ? ($throwRuntimeError("index out of range"), undefined) : x$2[i] = ((x$1 = a.d, ((i < 0 || i >= x$1.length) ? ($throwRuntimeError("index out of range"), undefined) : x$1[i])) + (1) << 24 >>> 24)));
				a.nd = i + 1 >> 0;
				return;
			}
			i = i - (1) >> 0;
		}
		a.d[0] = 49;
		a.nd = 1;
		a.dp = a.dp + (1) >> 0;
	};
	decimal.prototype.RoundUp = function(nd) { return this.$val.RoundUp(nd); };
	decimal.ptr.prototype.RoundedInteger = function() {
		var a, i, n, x, x$1, x$2, x$3;
		a = this;
		if (a.dp > 20) {
			return new $Uint64(4294967295, 4294967295);
		}
		i = 0;
		n = new $Uint64(0, 0);
		i = 0;
		while (true) {
			if (!(i < a.dp && i < a.nd)) { break; }
			n = (x = $mul64(n, new $Uint64(0, 10)), x$1 = (new $Uint64(0, ((x$2 = a.d, ((i < 0 || i >= x$2.length) ? ($throwRuntimeError("index out of range"), undefined) : x$2[i])) - 48 << 24 >>> 24))), new $Uint64(x.$high + x$1.$high, x.$low + x$1.$low));
			i = i + (1) >> 0;
		}
		while (true) {
			if (!(i < a.dp)) { break; }
			n = $mul64(n, (new $Uint64(0, 10)));
			i = i + (1) >> 0;
		}
		if (shouldRoundUp(a, a.dp)) {
			n = (x$3 = new $Uint64(0, 1), new $Uint64(n.$high + x$3.$high, n.$low + x$3.$low));
		}
		return n;
	};
	decimal.prototype.RoundedInteger = function() { return this.$val.RoundedInteger(); };
	extFloat.ptr.prototype.AssignComputeBounds = function(mant, exp, neg, flt) {
		var _tmp, _tmp$1, exp, expBiased, f, flt, lower, mant, neg, upper, x, x$1, x$2, x$3, x$4;
		lower = new extFloat.ptr(new $Uint64(0, 0), 0, false);
		upper = new extFloat.ptr(new $Uint64(0, 0), 0, false);
		f = this;
		f.mant = mant;
		f.exp = exp - ((flt.mantbits >> 0)) >> 0;
		f.neg = neg;
		if (f.exp <= 0 && (x = $shiftLeft64(($shiftRightUint64(mant, ((-f.exp >>> 0)))), ((-f.exp >>> 0))), (mant.$high === x.$high && mant.$low === x.$low))) {
			f.mant = $shiftRightUint64(f.mant, (((-f.exp >>> 0))));
			f.exp = 0;
			_tmp = $clone(f, extFloat);
			_tmp$1 = $clone(f, extFloat);
			extFloat.copy(lower, _tmp);
			extFloat.copy(upper, _tmp$1);
			return [lower, upper];
		}
		expBiased = exp - flt.bias >> 0;
		extFloat.copy(upper, new extFloat.ptr((x$1 = $mul64(new $Uint64(0, 2), f.mant), new $Uint64(x$1.$high + 0, x$1.$low + 1)), f.exp - 1 >> 0, f.neg));
		if (!((x$2 = $shiftLeft64(new $Uint64(0, 1), flt.mantbits), (mant.$high === x$2.$high && mant.$low === x$2.$low))) || (expBiased === 1)) {
			extFloat.copy(lower, new extFloat.ptr((x$3 = $mul64(new $Uint64(0, 2), f.mant), new $Uint64(x$3.$high - 0, x$3.$low - 1)), f.exp - 1 >> 0, f.neg));
		} else {
			extFloat.copy(lower, new extFloat.ptr((x$4 = $mul64(new $Uint64(0, 4), f.mant), new $Uint64(x$4.$high - 0, x$4.$low - 1)), f.exp - 2 >> 0, f.neg));
		}
		return [lower, upper];
	};
	extFloat.prototype.AssignComputeBounds = function(mant, exp, neg, flt) { return this.$val.AssignComputeBounds(mant, exp, neg, flt); };
	extFloat.ptr.prototype.Normalize = function() {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, exp, f, mant, shift, x, x$1, x$2, x$3, x$4, x$5;
		shift = 0;
		f = this;
		_tmp = f.mant;
		_tmp$1 = f.exp;
		mant = _tmp;
		exp = _tmp$1;
		if ((mant.$high === 0 && mant.$low === 0)) {
			shift = 0;
			return shift;
		}
		if ((x = $shiftRightUint64(mant, 32), (x.$high === 0 && x.$low === 0))) {
			mant = $shiftLeft64(mant, (32));
			exp = exp - (32) >> 0;
		}
		if ((x$1 = $shiftRightUint64(mant, 48), (x$1.$high === 0 && x$1.$low === 0))) {
			mant = $shiftLeft64(mant, (16));
			exp = exp - (16) >> 0;
		}
		if ((x$2 = $shiftRightUint64(mant, 56), (x$2.$high === 0 && x$2.$low === 0))) {
			mant = $shiftLeft64(mant, (8));
			exp = exp - (8) >> 0;
		}
		if ((x$3 = $shiftRightUint64(mant, 60), (x$3.$high === 0 && x$3.$low === 0))) {
			mant = $shiftLeft64(mant, (4));
			exp = exp - (4) >> 0;
		}
		if ((x$4 = $shiftRightUint64(mant, 62), (x$4.$high === 0 && x$4.$low === 0))) {
			mant = $shiftLeft64(mant, (2));
			exp = exp - (2) >> 0;
		}
		if ((x$5 = $shiftRightUint64(mant, 63), (x$5.$high === 0 && x$5.$low === 0))) {
			mant = $shiftLeft64(mant, (1));
			exp = exp - (1) >> 0;
		}
		shift = (((f.exp - exp >> 0) >>> 0));
		_tmp$2 = mant;
		_tmp$3 = exp;
		f.mant = _tmp$2;
		f.exp = _tmp$3;
		return shift;
	};
	extFloat.prototype.Normalize = function() { return this.$val.Normalize(); };
	extFloat.ptr.prototype.Multiply = function(g) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, cross1, cross2, f, fhi, flo, g, ghi, glo, rem, x, x$1, x$10, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9;
		f = this;
		_tmp = $shiftRightUint64(f.mant, 32);
		_tmp$1 = (new $Uint64(0, ((f.mant.$low >>> 0))));
		fhi = _tmp;
		flo = _tmp$1;
		_tmp$2 = $shiftRightUint64(g.mant, 32);
		_tmp$3 = (new $Uint64(0, ((g.mant.$low >>> 0))));
		ghi = _tmp$2;
		glo = _tmp$3;
		cross1 = $mul64(fhi, glo);
		cross2 = $mul64(flo, ghi);
		f.mant = (x = (x$1 = $mul64(fhi, ghi), x$2 = $shiftRightUint64(cross1, 32), new $Uint64(x$1.$high + x$2.$high, x$1.$low + x$2.$low)), x$3 = $shiftRightUint64(cross2, 32), new $Uint64(x.$high + x$3.$high, x.$low + x$3.$low));
		rem = (x$4 = (x$5 = (new $Uint64(0, ((cross1.$low >>> 0)))), x$6 = (new $Uint64(0, ((cross2.$low >>> 0)))), new $Uint64(x$5.$high + x$6.$high, x$5.$low + x$6.$low)), x$7 = $shiftRightUint64(($mul64(flo, glo)), 32), new $Uint64(x$4.$high + x$7.$high, x$4.$low + x$7.$low));
		rem = (x$8 = new $Uint64(0, 2147483648), new $Uint64(rem.$high + x$8.$high, rem.$low + x$8.$low));
		f.mant = (x$9 = f.mant, x$10 = ($shiftRightUint64(rem, 32)), new $Uint64(x$9.$high + x$10.$high, x$9.$low + x$10.$low));
		f.exp = (f.exp + g.exp >> 0) + 64 >> 0;
	};
	extFloat.prototype.Multiply = function(g) { return this.$val.Multiply(g); };
	extFloat.ptr.prototype.AssignDecimal = function(mantissa, exp10, neg, trunc, flt) {
		var _q, _r, adjExp, denormalExp, errors$1, exp10, extrabits, f, flt, halfway, i, mant_extra, mantissa, neg, ok, shift, trunc, x, x$1, x$10, x$11, x$12, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9, y;
		ok = false;
		f = this;
		errors$1 = 0;
		if (trunc) {
			errors$1 = errors$1 + (4) >> 0;
		}
		f.mant = mantissa;
		f.exp = 0;
		f.neg = neg;
		i = (_q = ((exp10 - -348 >> 0)) / 8, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
		if (exp10 < -348 || i >= 87) {
			ok = false;
			return ok;
		}
		adjExp = (_r = ((exp10 - -348 >> 0)) % 8, _r === _r ? _r : $throwRuntimeError("integer divide by zero"));
		if (adjExp < 19 && (x = (x$1 = 19 - adjExp >> 0, ((x$1 < 0 || x$1 >= uint64pow10.length) ? ($throwRuntimeError("index out of range"), undefined) : uint64pow10[x$1])), (mantissa.$high < x.$high || (mantissa.$high === x.$high && mantissa.$low < x.$low)))) {
			f.mant = $mul64(f.mant, (((adjExp < 0 || adjExp >= uint64pow10.length) ? ($throwRuntimeError("index out of range"), undefined) : uint64pow10[adjExp])));
			f.Normalize();
		} else {
			f.Normalize();
			f.Multiply($clone(((adjExp < 0 || adjExp >= smallPowersOfTen.length) ? ($throwRuntimeError("index out of range"), undefined) : smallPowersOfTen[adjExp]), extFloat));
			errors$1 = errors$1 + (4) >> 0;
		}
		f.Multiply($clone(((i < 0 || i >= powersOfTen.length) ? ($throwRuntimeError("index out of range"), undefined) : powersOfTen[i]), extFloat));
		if (errors$1 > 0) {
			errors$1 = errors$1 + (1) >> 0;
		}
		errors$1 = errors$1 + (4) >> 0;
		shift = f.Normalize();
		errors$1 = (y = (shift), y < 32 ? (errors$1 << y) : 0) >> 0;
		denormalExp = flt.bias - 63 >> 0;
		extrabits = 0;
		if (f.exp <= denormalExp) {
			extrabits = ((63 - flt.mantbits >>> 0) + 1 >>> 0) + (((denormalExp - f.exp >> 0) >>> 0)) >>> 0;
		} else {
			extrabits = 63 - flt.mantbits >>> 0;
		}
		halfway = $shiftLeft64(new $Uint64(0, 1), ((extrabits - 1 >>> 0)));
		mant_extra = (x$2 = f.mant, x$3 = (x$4 = $shiftLeft64(new $Uint64(0, 1), extrabits), new $Uint64(x$4.$high - 0, x$4.$low - 1)), new $Uint64(x$2.$high & x$3.$high, (x$2.$low & x$3.$low) >>> 0));
		if ((x$5 = (x$6 = (new $Int64(halfway.$high, halfway.$low)), x$7 = (new $Int64(0, errors$1)), new $Int64(x$6.$high - x$7.$high, x$6.$low - x$7.$low)), x$8 = (new $Int64(mant_extra.$high, mant_extra.$low)), (x$5.$high < x$8.$high || (x$5.$high === x$8.$high && x$5.$low < x$8.$low))) && (x$9 = (new $Int64(mant_extra.$high, mant_extra.$low)), x$10 = (x$11 = (new $Int64(halfway.$high, halfway.$low)), x$12 = (new $Int64(0, errors$1)), new $Int64(x$11.$high + x$12.$high, x$11.$low + x$12.$low)), (x$9.$high < x$10.$high || (x$9.$high === x$10.$high && x$9.$low < x$10.$low)))) {
			ok = false;
			return ok;
		}
		ok = true;
		return ok;
	};
	extFloat.prototype.AssignDecimal = function(mantissa, exp10, neg, trunc, flt) { return this.$val.AssignDecimal(mantissa, exp10, neg, trunc, flt); };
	extFloat.ptr.prototype.frexp10 = function() {
		var _q, _q$1, _tmp, _tmp$1, approxExp10, exp, exp10, f, i, index;
		exp10 = 0;
		index = 0;
		f = this;
		approxExp10 = (_q = ($imul(((-46 - f.exp >> 0)), 28)) / 93, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
		i = (_q$1 = ((approxExp10 - -348 >> 0)) / 8, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero"));
		Loop:
		while (true) {
			exp = (f.exp + ((i < 0 || i >= powersOfTen.length) ? ($throwRuntimeError("index out of range"), undefined) : powersOfTen[i]).exp >> 0) + 64 >> 0;
			if (exp < -60) {
				i = i + (1) >> 0;
			} else if (exp > -32) {
				i = i - (1) >> 0;
			} else {
				break Loop;
			}
		}
		f.Multiply($clone(((i < 0 || i >= powersOfTen.length) ? ($throwRuntimeError("index out of range"), undefined) : powersOfTen[i]), extFloat));
		_tmp = -((-348 + ($imul(i, 8)) >> 0));
		_tmp$1 = i;
		exp10 = _tmp;
		index = _tmp$1;
		return [exp10, index];
	};
	extFloat.prototype.frexp10 = function() { return this.$val.frexp10(); };
	frexp10Many = function(a, b, c) {
		var _tuple, a, b, c, exp10, i;
		exp10 = 0;
		_tuple = c.frexp10();
		exp10 = _tuple[0];
		i = _tuple[1];
		a.Multiply($clone(((i < 0 || i >= powersOfTen.length) ? ($throwRuntimeError("index out of range"), undefined) : powersOfTen[i]), extFloat));
		b.Multiply($clone(((i < 0 || i >= powersOfTen.length) ? ($throwRuntimeError("index out of range"), undefined) : powersOfTen[i]), extFloat));
		return exp10;
	};
	extFloat.ptr.prototype.FixedDecimal = function(d, n) {
		var $CE$B5, _q, _q$1, _tmp, _tmp$1, _tuple, buf, d, digit, exp10, f, fraction, i, i$1, i$2, integer, integerDigits, n, nd, needed, ok, pos, pow, pow10, rest, shift, v, v1, x, x$1, x$10, x$11, x$12, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9;
		f = this;
		if ((x = f.mant, (x.$high === 0 && x.$low === 0))) {
			d.nd = 0;
			d.dp = 0;
			d.neg = f.neg;
			return true;
		}
		if (n === 0) {
			$panic(new $String("strconv: internal error: extFloat.FixedDecimal called with n == 0"));
		}
		f.Normalize();
		_tuple = f.frexp10();
		exp10 = _tuple[0];
		shift = ((-f.exp >>> 0));
		integer = (($shiftRightUint64(f.mant, shift).$low >>> 0));
		fraction = (x$1 = f.mant, x$2 = $shiftLeft64((new $Uint64(0, integer)), shift), new $Uint64(x$1.$high - x$2.$high, x$1.$low - x$2.$low));
		$CE$B5 = new $Uint64(0, 1);
		needed = n;
		integerDigits = 0;
		pow10 = new $Uint64(0, 1);
		_tmp = 0;
		_tmp$1 = new $Uint64(0, 1);
		i = _tmp;
		pow = _tmp$1;
		while (true) {
			if (!(i < 20)) { break; }
			if ((x$3 = (new $Uint64(0, integer)), (pow.$high > x$3.$high || (pow.$high === x$3.$high && pow.$low > x$3.$low)))) {
				integerDigits = i;
				break;
			}
			pow = $mul64(pow, (new $Uint64(0, 10)));
			i = i + (1) >> 0;
		}
		rest = integer;
		if (integerDigits > needed) {
			pow10 = (x$4 = integerDigits - needed >> 0, ((x$4 < 0 || x$4 >= uint64pow10.length) ? ($throwRuntimeError("index out of range"), undefined) : uint64pow10[x$4]));
			integer = (_q = integer / (((pow10.$low >>> 0))), (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero"));
			rest = rest - (($imul(integer, ((pow10.$low >>> 0))) >>> 0)) >>> 0;
		} else {
			rest = 0;
		}
		buf = arrayType$2.zero();
		pos = 32;
		v = integer;
		while (true) {
			if (!(v > 0)) { break; }
			v1 = (_q$1 = v / 10, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >>> 0 : $throwRuntimeError("integer divide by zero"));
			v = v - (($imul(10, v1) >>> 0)) >>> 0;
			pos = pos - (1) >> 0;
			((pos < 0 || pos >= buf.length) ? ($throwRuntimeError("index out of range"), undefined) : buf[pos] = (((v + 48 >>> 0) << 24 >>> 24)));
			v = v1;
		}
		i$1 = pos;
		while (true) {
			if (!(i$1 < 32)) { break; }
			(x$5 = d.d, x$6 = i$1 - pos >> 0, ((x$6 < 0 || x$6 >= x$5.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$5.$array[x$5.$offset + x$6] = ((i$1 < 0 || i$1 >= buf.length) ? ($throwRuntimeError("index out of range"), undefined) : buf[i$1])));
			i$1 = i$1 + (1) >> 0;
		}
		nd = 32 - pos >> 0;
		d.nd = nd;
		d.dp = integerDigits + exp10 >> 0;
		needed = needed - (nd) >> 0;
		if (needed > 0) {
			if (!((rest === 0)) || !((pow10.$high === 0 && pow10.$low === 1))) {
				$panic(new $String("strconv: internal error, rest != 0 but needed > 0"));
			}
			while (true) {
				if (!(needed > 0)) { break; }
				fraction = $mul64(fraction, (new $Uint64(0, 10)));
				$CE$B5 = $mul64($CE$B5, (new $Uint64(0, 10)));
				if ((x$7 = $mul64(new $Uint64(0, 2), $CE$B5), x$8 = $shiftLeft64(new $Uint64(0, 1), shift), (x$7.$high > x$8.$high || (x$7.$high === x$8.$high && x$7.$low > x$8.$low)))) {
					return false;
				}
				digit = $shiftRightUint64(fraction, shift);
				(x$9 = d.d, ((nd < 0 || nd >= x$9.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$9.$array[x$9.$offset + nd] = ((new $Uint64(digit.$high + 0, digit.$low + 48).$low << 24 >>> 24))));
				fraction = (x$10 = $shiftLeft64(digit, shift), new $Uint64(fraction.$high - x$10.$high, fraction.$low - x$10.$low));
				nd = nd + (1) >> 0;
				needed = needed - (1) >> 0;
			}
			d.nd = nd;
		}
		ok = adjustLastDigitFixed(d, (x$11 = $shiftLeft64((new $Uint64(0, rest)), shift), new $Uint64(x$11.$high | fraction.$high, (x$11.$low | fraction.$low) >>> 0)), pow10, shift, $CE$B5);
		if (!ok) {
			return false;
		}
		i$2 = d.nd - 1 >> 0;
		while (true) {
			if (!(i$2 >= 0)) { break; }
			if (!(((x$12 = d.d, ((i$2 < 0 || i$2 >= x$12.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$12.$array[x$12.$offset + i$2])) === 48))) {
				d.nd = i$2 + 1 >> 0;
				break;
			}
			i$2 = i$2 - (1) >> 0;
		}
		return true;
	};
	extFloat.prototype.FixedDecimal = function(d, n) { return this.$val.FixedDecimal(d, n); };
	adjustLastDigitFixed = function(d, num, den, shift, $CE$B5) {
		var $CE$B5, d, den, i, num, shift, x, x$1, x$10, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9;
		if ((x = $shiftLeft64(den, shift), (num.$high > x.$high || (num.$high === x.$high && num.$low > x.$low)))) {
			$panic(new $String("strconv: num > den<<shift in adjustLastDigitFixed"));
		}
		if ((x$1 = $mul64(new $Uint64(0, 2), $CE$B5), x$2 = $shiftLeft64(den, shift), (x$1.$high > x$2.$high || (x$1.$high === x$2.$high && x$1.$low > x$2.$low)))) {
			$panic(new $String("strconv: \xCE\xB5 > (den<<shift)/2"));
		}
		if ((x$3 = $mul64(new $Uint64(0, 2), (new $Uint64(num.$high + $CE$B5.$high, num.$low + $CE$B5.$low))), x$4 = $shiftLeft64(den, shift), (x$3.$high < x$4.$high || (x$3.$high === x$4.$high && x$3.$low < x$4.$low)))) {
			return true;
		}
		if ((x$5 = $mul64(new $Uint64(0, 2), (new $Uint64(num.$high - $CE$B5.$high, num.$low - $CE$B5.$low))), x$6 = $shiftLeft64(den, shift), (x$5.$high > x$6.$high || (x$5.$high === x$6.$high && x$5.$low > x$6.$low)))) {
			i = d.nd - 1 >> 0;
			while (true) {
				if (!(i >= 0)) { break; }
				if ((x$7 = d.d, ((i < 0 || i >= x$7.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$7.$array[x$7.$offset + i])) === 57) {
					d.nd = d.nd - (1) >> 0;
				} else {
					break;
				}
				i = i - (1) >> 0;
			}
			if (i < 0) {
				(x$8 = d.d, (0 >= x$8.$length ? ($throwRuntimeError("index out of range"), undefined) : x$8.$array[x$8.$offset + 0] = 49));
				d.nd = 1;
				d.dp = d.dp + (1) >> 0;
			} else {
				(x$10 = d.d, ((i < 0 || i >= x$10.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$10.$array[x$10.$offset + i] = ((x$9 = d.d, ((i < 0 || i >= x$9.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$9.$array[x$9.$offset + i])) + (1) << 24 >>> 24)));
			}
			return true;
		}
		return false;
	};
	extFloat.ptr.prototype.ShortestDecimal = function(d, lower, upper) {
		var _q, _tmp, _tmp$1, _tmp$2, _tmp$3, allowance, buf, currentDiff, d, digit, digit$1, exp10, f, fraction, i, i$1, i$2, integer, integerDigits, lower, multiplier, n, nd, pow, pow$1, shift, targetDiff, upper, v, v1, x, x$1, x$10, x$11, x$12, x$13, x$14, x$15, x$16, x$17, x$18, x$19, x$2, x$20, x$21, x$22, x$23, x$3, x$4, x$5, x$6, x$7, x$8, x$9;
		f = this;
		if ((x = f.mant, (x.$high === 0 && x.$low === 0))) {
			d.nd = 0;
			d.dp = 0;
			d.neg = f.neg;
			return true;
		}
		if ((f.exp === 0) && $equal(lower, f, extFloat) && $equal(lower, upper, extFloat)) {
			buf = arrayType$1.zero();
			n = 23;
			v = f.mant;
			while (true) {
				if (!((v.$high > 0 || (v.$high === 0 && v.$low > 0)))) { break; }
				v1 = $div64(v, new $Uint64(0, 10), false);
				v = (x$1 = $mul64(new $Uint64(0, 10), v1), new $Uint64(v.$high - x$1.$high, v.$low - x$1.$low));
				((n < 0 || n >= buf.length) ? ($throwRuntimeError("index out of range"), undefined) : buf[n] = ((new $Uint64(v.$high + 0, v.$low + 48).$low << 24 >>> 24)));
				n = n - (1) >> 0;
				v = v1;
			}
			nd = (24 - n >> 0) - 1 >> 0;
			i = 0;
			while (true) {
				if (!(i < nd)) { break; }
				(x$3 = d.d, ((i < 0 || i >= x$3.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$3.$array[x$3.$offset + i] = (x$2 = (n + 1 >> 0) + i >> 0, ((x$2 < 0 || x$2 >= buf.length) ? ($throwRuntimeError("index out of range"), undefined) : buf[x$2]))));
				i = i + (1) >> 0;
			}
			_tmp = nd;
			_tmp$1 = nd;
			d.nd = _tmp;
			d.dp = _tmp$1;
			while (true) {
				if (!(d.nd > 0 && ((x$4 = d.d, x$5 = d.nd - 1 >> 0, ((x$5 < 0 || x$5 >= x$4.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$4.$array[x$4.$offset + x$5])) === 48))) { break; }
				d.nd = d.nd - (1) >> 0;
			}
			if (d.nd === 0) {
				d.dp = 0;
			}
			d.neg = f.neg;
			return true;
		}
		upper.Normalize();
		if (f.exp > upper.exp) {
			f.mant = $shiftLeft64(f.mant, ((((f.exp - upper.exp >> 0) >>> 0))));
			f.exp = upper.exp;
		}
		if (lower.exp > upper.exp) {
			lower.mant = $shiftLeft64(lower.mant, ((((lower.exp - upper.exp >> 0) >>> 0))));
			lower.exp = upper.exp;
		}
		exp10 = frexp10Many(lower, f, upper);
		upper.mant = (x$6 = upper.mant, x$7 = new $Uint64(0, 1), new $Uint64(x$6.$high + x$7.$high, x$6.$low + x$7.$low));
		lower.mant = (x$8 = lower.mant, x$9 = new $Uint64(0, 1), new $Uint64(x$8.$high - x$9.$high, x$8.$low - x$9.$low));
		shift = ((-upper.exp >>> 0));
		integer = (($shiftRightUint64(upper.mant, shift).$low >>> 0));
		fraction = (x$10 = upper.mant, x$11 = $shiftLeft64((new $Uint64(0, integer)), shift), new $Uint64(x$10.$high - x$11.$high, x$10.$low - x$11.$low));
		allowance = (x$12 = upper.mant, x$13 = lower.mant, new $Uint64(x$12.$high - x$13.$high, x$12.$low - x$13.$low));
		targetDiff = (x$14 = upper.mant, x$15 = f.mant, new $Uint64(x$14.$high - x$15.$high, x$14.$low - x$15.$low));
		integerDigits = 0;
		_tmp$2 = 0;
		_tmp$3 = new $Uint64(0, 1);
		i$1 = _tmp$2;
		pow = _tmp$3;
		while (true) {
			if (!(i$1 < 20)) { break; }
			if ((x$16 = (new $Uint64(0, integer)), (pow.$high > x$16.$high || (pow.$high === x$16.$high && pow.$low > x$16.$low)))) {
				integerDigits = i$1;
				break;
			}
			pow = $mul64(pow, (new $Uint64(0, 10)));
			i$1 = i$1 + (1) >> 0;
		}
		i$2 = 0;
		while (true) {
			if (!(i$2 < integerDigits)) { break; }
			pow$1 = (x$17 = (integerDigits - i$2 >> 0) - 1 >> 0, ((x$17 < 0 || x$17 >= uint64pow10.length) ? ($throwRuntimeError("index out of range"), undefined) : uint64pow10[x$17]));
			digit = (_q = integer / ((pow$1.$low >>> 0)), (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero"));
			(x$18 = d.d, ((i$2 < 0 || i$2 >= x$18.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$18.$array[x$18.$offset + i$2] = (((digit + 48 >>> 0) << 24 >>> 24))));
			integer = integer - (($imul(digit, ((pow$1.$low >>> 0))) >>> 0)) >>> 0;
			currentDiff = (x$19 = $shiftLeft64((new $Uint64(0, integer)), shift), new $Uint64(x$19.$high + fraction.$high, x$19.$low + fraction.$low));
			if ((currentDiff.$high < allowance.$high || (currentDiff.$high === allowance.$high && currentDiff.$low < allowance.$low))) {
				d.nd = i$2 + 1 >> 0;
				d.dp = integerDigits + exp10 >> 0;
				d.neg = f.neg;
				return adjustLastDigit(d, currentDiff, targetDiff, allowance, $shiftLeft64(pow$1, shift), new $Uint64(0, 2));
			}
			i$2 = i$2 + (1) >> 0;
		}
		d.nd = integerDigits;
		d.dp = d.nd + exp10 >> 0;
		d.neg = f.neg;
		digit$1 = 0;
		multiplier = new $Uint64(0, 1);
		while (true) {
			fraction = $mul64(fraction, (new $Uint64(0, 10)));
			multiplier = $mul64(multiplier, (new $Uint64(0, 10)));
			digit$1 = (($shiftRightUint64(fraction, shift).$low >> 0));
			(x$20 = d.d, x$21 = d.nd, ((x$21 < 0 || x$21 >= x$20.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$20.$array[x$20.$offset + x$21] = (((digit$1 + 48 >> 0) << 24 >>> 24))));
			d.nd = d.nd + (1) >> 0;
			fraction = (x$22 = $shiftLeft64((new $Uint64(0, digit$1)), shift), new $Uint64(fraction.$high - x$22.$high, fraction.$low - x$22.$low));
			if ((x$23 = $mul64(allowance, multiplier), (fraction.$high < x$23.$high || (fraction.$high === x$23.$high && fraction.$low < x$23.$low)))) {
				return adjustLastDigit(d, fraction, $mul64(targetDiff, multiplier), $mul64(allowance, multiplier), $shiftLeft64(new $Uint64(0, 1), shift), $mul64(multiplier, new $Uint64(0, 2)));
			}
		}
	};
	extFloat.prototype.ShortestDecimal = function(d, lower, upper) { return this.$val.ShortestDecimal(d, lower, upper); };
	adjustLastDigit = function(d, currentDiff, targetDiff, maxDiff, ulpDecimal, ulpBinary) {
		var _index, currentDiff, d, maxDiff, targetDiff, ulpBinary, ulpDecimal, x, x$1, x$10, x$11, x$12, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9;
		if ((x = $mul64(new $Uint64(0, 2), ulpBinary), (ulpDecimal.$high < x.$high || (ulpDecimal.$high === x.$high && ulpDecimal.$low < x.$low)))) {
			return false;
		}
		while (true) {
			if (!((x$1 = (x$2 = (x$3 = $div64(ulpDecimal, new $Uint64(0, 2), false), new $Uint64(currentDiff.$high + x$3.$high, currentDiff.$low + x$3.$low)), new $Uint64(x$2.$high + ulpBinary.$high, x$2.$low + ulpBinary.$low)), (x$1.$high < targetDiff.$high || (x$1.$high === targetDiff.$high && x$1.$low < targetDiff.$low))))) { break; }
			_index = d.nd - 1 >> 0;
			(x$5 = d.d, ((_index < 0 || _index >= x$5.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$5.$array[x$5.$offset + _index] = ((x$4 = d.d, ((_index < 0 || _index >= x$4.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$4.$array[x$4.$offset + _index])) - (1) << 24 >>> 24)));
			currentDiff = (x$6 = ulpDecimal, new $Uint64(currentDiff.$high + x$6.$high, currentDiff.$low + x$6.$low));
		}
		if ((x$7 = new $Uint64(currentDiff.$high + ulpDecimal.$high, currentDiff.$low + ulpDecimal.$low), x$8 = (x$9 = (x$10 = $div64(ulpDecimal, new $Uint64(0, 2), false), new $Uint64(targetDiff.$high + x$10.$high, targetDiff.$low + x$10.$low)), new $Uint64(x$9.$high + ulpBinary.$high, x$9.$low + ulpBinary.$low)), (x$7.$high < x$8.$high || (x$7.$high === x$8.$high && x$7.$low <= x$8.$low)))) {
			return false;
		}
		if ((currentDiff.$high < ulpBinary.$high || (currentDiff.$high === ulpBinary.$high && currentDiff.$low < ulpBinary.$low)) || (x$11 = new $Uint64(maxDiff.$high - ulpBinary.$high, maxDiff.$low - ulpBinary.$low), (currentDiff.$high > x$11.$high || (currentDiff.$high === x$11.$high && currentDiff.$low > x$11.$low)))) {
			return false;
		}
		if ((d.nd === 1) && ((x$12 = d.d, (0 >= x$12.$length ? ($throwRuntimeError("index out of range"), undefined) : x$12.$array[x$12.$offset + 0])) === 48)) {
			d.nd = 0;
			d.dp = 0;
		}
		return true;
	};
	AppendFloat = function(dst, f, fmt, prec, bitSize) {
		var bitSize, dst, f, fmt, prec;
		return genericFtoa(dst, f, fmt, prec, bitSize);
	};
	$pkg.AppendFloat = AppendFloat;
	genericFtoa = function(dst, val, fmt, prec, bitSize) {
		var _1, _2, _3, _4, _tuple, bitSize, bits, buf, buf$1, digits, digs, dst, exp, f, f$1, flt, fmt, lower, mant, neg, ok, prec, s, shortest, upper, val, x, x$1, x$2, x$3, y, y$1;
		bits = new $Uint64(0, 0);
		flt = ptrType$1.nil;
		_1 = bitSize;
		if (_1 === (32)) {
			bits = (new $Uint64(0, math.Float32bits(($fround(val)))));
			flt = float32info;
		} else if (_1 === (64)) {
			bits = math.Float64bits(val);
			flt = float64info;
		} else {
			$panic(new $String("strconv: illegal AppendFloat/FormatFloat bitSize"));
		}
		neg = !((x = $shiftRightUint64(bits, ((flt.expbits + flt.mantbits >>> 0))), (x.$high === 0 && x.$low === 0)));
		exp = (($shiftRightUint64(bits, flt.mantbits).$low >> 0)) & ((((y = flt.expbits, y < 32 ? (1 << y) : 0) >> 0) - 1 >> 0));
		mant = (x$1 = (x$2 = $shiftLeft64(new $Uint64(0, 1), flt.mantbits), new $Uint64(x$2.$high - 0, x$2.$low - 1)), new $Uint64(bits.$high & x$1.$high, (bits.$low & x$1.$low) >>> 0));
		_2 = exp;
		if (_2 === ((((y$1 = flt.expbits, y$1 < 32 ? (1 << y$1) : 0) >> 0) - 1 >> 0))) {
			s = "";
			if (!((mant.$high === 0 && mant.$low === 0))) {
				s = "NaN";
			} else if (neg) {
				s = "-Inf";
			} else {
				s = "+Inf";
			}
			return $appendSlice(dst, s);
		} else if (_2 === (0)) {
			exp = exp + (1) >> 0;
		} else {
			mant = (x$3 = $shiftLeft64(new $Uint64(0, 1), flt.mantbits), new $Uint64(mant.$high | x$3.$high, (mant.$low | x$3.$low) >>> 0));
		}
		exp = exp + (flt.bias) >> 0;
		if (fmt === 98) {
			return fmtB(dst, neg, mant, exp, flt);
		}
		if (!optimize) {
			return bigFtoa(dst, prec, fmt, neg, mant, exp, flt);
		}
		digs = new decimalSlice.ptr(sliceType$6.nil, 0, 0, false);
		ok = false;
		shortest = prec < 0;
		if (shortest) {
			f = new extFloat.ptr(new $Uint64(0, 0), 0, false);
			_tuple = f.AssignComputeBounds(mant, exp, neg, flt);
			lower = $clone(_tuple[0], extFloat);
			upper = $clone(_tuple[1], extFloat);
			buf = arrayType$2.zero();
			digs.d = new sliceType$6(buf);
			ok = f.ShortestDecimal(digs, lower, upper);
			if (!ok) {
				return bigFtoa(dst, prec, fmt, neg, mant, exp, flt);
			}
			_3 = fmt;
			if ((_3 === (101)) || (_3 === (69))) {
				prec = max(digs.nd - 1 >> 0, 0);
			} else if (_3 === (102)) {
				prec = max(digs.nd - digs.dp >> 0, 0);
			} else if ((_3 === (103)) || (_3 === (71))) {
				prec = digs.nd;
			}
		} else if (!((fmt === 102))) {
			digits = prec;
			_4 = fmt;
			if ((_4 === (101)) || (_4 === (69))) {
				digits = digits + (1) >> 0;
			} else if ((_4 === (103)) || (_4 === (71))) {
				if (prec === 0) {
					prec = 1;
				}
				digits = prec;
			}
			if (digits <= 15) {
				buf$1 = arrayType$1.zero();
				digs.d = new sliceType$6(buf$1);
				f$1 = new extFloat.ptr(mant, exp - ((flt.mantbits >> 0)) >> 0, neg);
				ok = f$1.FixedDecimal(digs, digits);
			}
		}
		if (!ok) {
			return bigFtoa(dst, prec, fmt, neg, mant, exp, flt);
		}
		return formatDigits(dst, shortest, neg, $clone(digs, decimalSlice), prec, fmt);
	};
	bigFtoa = function(dst, prec, fmt, neg, mant, exp, flt) {
		var _1, _2, d, digs, dst, exp, flt, fmt, mant, neg, prec, shortest;
		d = new decimal.ptr(arrayType.zero(), 0, 0, false, false);
		d.Assign(mant);
		d.Shift(exp - ((flt.mantbits >> 0)) >> 0);
		digs = new decimalSlice.ptr(sliceType$6.nil, 0, 0, false);
		shortest = prec < 0;
		if (shortest) {
			roundShortest(d, mant, exp, flt);
			decimalSlice.copy(digs, new decimalSlice.ptr(new sliceType$6(d.d), d.nd, d.dp, false));
			_1 = fmt;
			if ((_1 === (101)) || (_1 === (69))) {
				prec = digs.nd - 1 >> 0;
			} else if (_1 === (102)) {
				prec = max(digs.nd - digs.dp >> 0, 0);
			} else if ((_1 === (103)) || (_1 === (71))) {
				prec = digs.nd;
			}
		} else {
			_2 = fmt;
			if ((_2 === (101)) || (_2 === (69))) {
				d.Round(prec + 1 >> 0);
			} else if (_2 === (102)) {
				d.Round(d.dp + prec >> 0);
			} else if ((_2 === (103)) || (_2 === (71))) {
				if (prec === 0) {
					prec = 1;
				}
				d.Round(prec);
			}
			decimalSlice.copy(digs, new decimalSlice.ptr(new sliceType$6(d.d), d.nd, d.dp, false));
		}
		return formatDigits(dst, shortest, neg, $clone(digs, decimalSlice), prec, fmt);
	};
	formatDigits = function(dst, shortest, neg, digs, prec, fmt) {
		var _1, digs, dst, eprec, exp, fmt, neg, prec, shortest;
		_1 = fmt;
		if ((_1 === (101)) || (_1 === (69))) {
			return fmtE(dst, neg, $clone(digs, decimalSlice), prec, fmt);
		} else if (_1 === (102)) {
			return fmtF(dst, neg, $clone(digs, decimalSlice), prec);
		} else if ((_1 === (103)) || (_1 === (71))) {
			eprec = prec;
			if (eprec > digs.nd && digs.nd >= digs.dp) {
				eprec = digs.nd;
			}
			if (shortest) {
				eprec = 6;
			}
			exp = digs.dp - 1 >> 0;
			if (exp < -4 || exp >= eprec) {
				if (prec > digs.nd) {
					prec = digs.nd;
				}
				return fmtE(dst, neg, $clone(digs, decimalSlice), prec - 1 >> 0, (fmt + 101 << 24 >>> 24) - 103 << 24 >>> 24);
			}
			if (prec > digs.dp) {
				prec = digs.nd;
			}
			return fmtF(dst, neg, $clone(digs, decimalSlice), max(prec - digs.dp >> 0, 0));
		}
		return $append(dst, 37, fmt);
	};
	roundShortest = function(d, mant, exp, flt) {
		var d, exp, explo, flt, i, inclusive, l, lower, m, mant, mantlo, minexp, okdown, okup, u, upper, x, x$1, x$2, x$3, x$4, x$5, x$6, x$7;
		if ((mant.$high === 0 && mant.$low === 0)) {
			d.nd = 0;
			return;
		}
		minexp = flt.bias + 1 >> 0;
		if (exp > minexp && ($imul(332, ((d.dp - d.nd >> 0)))) >= ($imul(100, ((exp - ((flt.mantbits >> 0)) >> 0))))) {
			return;
		}
		upper = new decimal.ptr(arrayType.zero(), 0, 0, false, false);
		upper.Assign((x = $mul64(mant, new $Uint64(0, 2)), new $Uint64(x.$high + 0, x.$low + 1)));
		upper.Shift((exp - ((flt.mantbits >> 0)) >> 0) - 1 >> 0);
		mantlo = new $Uint64(0, 0);
		explo = 0;
		if ((x$1 = $shiftLeft64(new $Uint64(0, 1), flt.mantbits), (mant.$high > x$1.$high || (mant.$high === x$1.$high && mant.$low > x$1.$low))) || (exp === minexp)) {
			mantlo = new $Uint64(mant.$high - 0, mant.$low - 1);
			explo = exp;
		} else {
			mantlo = (x$2 = $mul64(mant, new $Uint64(0, 2)), new $Uint64(x$2.$high - 0, x$2.$low - 1));
			explo = exp - 1 >> 0;
		}
		lower = new decimal.ptr(arrayType.zero(), 0, 0, false, false);
		lower.Assign((x$3 = $mul64(mantlo, new $Uint64(0, 2)), new $Uint64(x$3.$high + 0, x$3.$low + 1)));
		lower.Shift((explo - ((flt.mantbits >> 0)) >> 0) - 1 >> 0);
		inclusive = (x$4 = $div64(mant, new $Uint64(0, 2), true), (x$4.$high === 0 && x$4.$low === 0));
		i = 0;
		while (true) {
			if (!(i < d.nd)) { break; }
			l = 48;
			if (i < lower.nd) {
				l = (x$5 = lower.d, ((i < 0 || i >= x$5.length) ? ($throwRuntimeError("index out of range"), undefined) : x$5[i]));
			}
			m = (x$6 = d.d, ((i < 0 || i >= x$6.length) ? ($throwRuntimeError("index out of range"), undefined) : x$6[i]));
			u = 48;
			if (i < upper.nd) {
				u = (x$7 = upper.d, ((i < 0 || i >= x$7.length) ? ($throwRuntimeError("index out of range"), undefined) : x$7[i]));
			}
			okdown = !((l === m)) || inclusive && ((i + 1 >> 0) === lower.nd);
			okup = !((m === u)) && (inclusive || (m + 1 << 24 >>> 24) < u || (i + 1 >> 0) < upper.nd);
			if (okdown && okup) {
				d.Round(i + 1 >> 0);
				return;
			} else if (okdown) {
				d.RoundDown(i + 1 >> 0);
				return;
			} else if (okup) {
				d.RoundUp(i + 1 >> 0);
				return;
			}
			i = i + (1) >> 0;
		}
	};
	fmtE = function(dst, neg, d, prec, fmt) {
		var _q, _q$1, _q$2, _r, _r$1, _r$2, ch, d, dst, exp, fmt, i, m, neg, prec, x;
		if (neg) {
			dst = $append(dst, 45);
		}
		ch = 48;
		if (!((d.nd === 0))) {
			ch = (x = d.d, (0 >= x.$length ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + 0]));
		}
		dst = $append(dst, ch);
		if (prec > 0) {
			dst = $append(dst, 46);
			i = 1;
			m = min(d.nd, prec + 1 >> 0);
			if (i < m) {
				dst = $appendSlice(dst, $subslice(d.d, i, m));
				i = m;
			}
			while (true) {
				if (!(i <= prec)) { break; }
				dst = $append(dst, 48);
				i = i + (1) >> 0;
			}
		}
		dst = $append(dst, fmt);
		exp = d.dp - 1 >> 0;
		if (d.nd === 0) {
			exp = 0;
		}
		if (exp < 0) {
			ch = 45;
			exp = -exp;
		} else {
			ch = 43;
		}
		dst = $append(dst, ch);
		if (exp < 10) {
			dst = $append(dst, 48, ((exp << 24 >>> 24)) + 48 << 24 >>> 24);
		} else if (exp < 100) {
			dst = $append(dst, (((_q = exp / 10, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) << 24 >>> 24)) + 48 << 24 >>> 24, (((_r = exp % 10, _r === _r ? _r : $throwRuntimeError("integer divide by zero")) << 24 >>> 24)) + 48 << 24 >>> 24);
		} else {
			dst = $append(dst, (((_q$1 = exp / 100, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero")) << 24 >>> 24)) + 48 << 24 >>> 24, (_r$1 = (((_q$2 = exp / 10, (_q$2 === _q$2 && _q$2 !== 1/0 && _q$2 !== -1/0) ? _q$2 >> 0 : $throwRuntimeError("integer divide by zero")) << 24 >>> 24)) % 10, _r$1 === _r$1 ? _r$1 : $throwRuntimeError("integer divide by zero")) + 48 << 24 >>> 24, (((_r$2 = exp % 10, _r$2 === _r$2 ? _r$2 : $throwRuntimeError("integer divide by zero")) << 24 >>> 24)) + 48 << 24 >>> 24);
		}
		return dst;
	};
	fmtF = function(dst, neg, d, prec) {
		var ch, d, dst, i, j, m, neg, prec, x;
		if (neg) {
			dst = $append(dst, 45);
		}
		if (d.dp > 0) {
			m = min(d.nd, d.dp);
			dst = $appendSlice(dst, $subslice(d.d, 0, m));
			while (true) {
				if (!(m < d.dp)) { break; }
				dst = $append(dst, 48);
				m = m + (1) >> 0;
			}
		} else {
			dst = $append(dst, 48);
		}
		if (prec > 0) {
			dst = $append(dst, 46);
			i = 0;
			while (true) {
				if (!(i < prec)) { break; }
				ch = 48;
				j = d.dp + i >> 0;
				if (0 <= j && j < d.nd) {
					ch = (x = d.d, ((j < 0 || j >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + j]));
				}
				dst = $append(dst, ch);
				i = i + (1) >> 0;
			}
		}
		return dst;
	};
	fmtB = function(dst, neg, mant, exp, flt) {
		var _tuple, _tuple$1, dst, exp, flt, mant, neg;
		if (neg) {
			dst = $append(dst, 45);
		}
		_tuple = formatBits(dst, mant, 10, false, true);
		dst = _tuple[0];
		dst = $append(dst, 112);
		exp = exp - (((flt.mantbits >> 0))) >> 0;
		if (exp >= 0) {
			dst = $append(dst, 43);
		}
		_tuple$1 = formatBits(dst, (new $Uint64(0, exp)), 10, exp < 0, true);
		dst = _tuple$1[0];
		return dst;
	};
	min = function(a, b) {
		var a, b;
		if (a < b) {
			return a;
		}
		return b;
	};
	max = function(a, b) {
		var a, b;
		if (a > b) {
			return a;
		}
		return b;
	};
	FormatInt = function(i, base) {
		var _tuple, base, i, s;
		if (true && (0 < i.$high || (0 === i.$high && 0 <= i.$low)) && (i.$high < 0 || (i.$high === 0 && i.$low < 100)) && (base === 10)) {
			return small((((i.$low + ((i.$high >> 31) * 4294967296)) >> 0)));
		}
		_tuple = formatBits(sliceType$6.nil, (new $Uint64(i.$high, i.$low)), base, (i.$high < 0 || (i.$high === 0 && i.$low < 0)), false);
		s = _tuple[1];
		return s;
	};
	$pkg.FormatInt = FormatInt;
	Itoa = function(i) {
		var i;
		return FormatInt((new $Int64(0, i)), 10);
	};
	$pkg.Itoa = Itoa;
	AppendInt = function(dst, i, base) {
		var _tuple, base, dst, i;
		if (true && (0 < i.$high || (0 === i.$high && 0 <= i.$low)) && (i.$high < 0 || (i.$high === 0 && i.$low < 100)) && (base === 10)) {
			return $appendSlice(dst, small((((i.$low + ((i.$high >> 31) * 4294967296)) >> 0))));
		}
		_tuple = formatBits(dst, (new $Uint64(i.$high, i.$low)), base, (i.$high < 0 || (i.$high === 0 && i.$low < 0)), true);
		dst = _tuple[0];
		return dst;
	};
	$pkg.AppendInt = AppendInt;
	small = function(i) {
		var i, off;
		off = 0;
		if (i < 10) {
			off = 1;
		}
		return $substring("00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899", (($imul(i, 2)) + off >> 0), (($imul(i, 2)) + 2 >> 0));
	};
	formatBits = function(dst, u, base, neg, append_) {
		var _q, _q$1, _r, _r$1, a, append_, b, b$1, base, d, dst, i, is, is$1, is$2, j, m, neg, q, q$1, s, s$1, u, us, us$1, x, x$1, x$2, x$3, x$4, x$5;
		d = sliceType$6.nil;
		s = "";
		if (base < 2 || base > 36) {
			$panic(new $String("strconv: illegal AppendInt/FormatInt base"));
		}
		a = arrayType$3.zero();
		i = 65;
		if (neg) {
			u = new $Uint64(-u.$high, -u.$low);
		}
		if (base === 10) {
			if (true) {
				while (true) {
					if (!((u.$high > 0 || (u.$high === 0 && u.$low >= 1000000000)))) { break; }
					q = $div64(u, new $Uint64(0, 1000000000), false);
					us = (((x = $mul64(q, new $Uint64(0, 1000000000)), new $Uint64(u.$high - x.$high, u.$low - x.$low)).$low >>> 0));
					j = 4;
					while (true) {
						if (!(j > 0)) { break; }
						is = (_r = us % 100, _r === _r ? _r : $throwRuntimeError("integer divide by zero")) * 2 >>> 0;
						us = (_q = us / (100), (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero"));
						i = i - (2) >> 0;
						(x$1 = i + 1 >> 0, ((x$1 < 0 || x$1 >= a.length) ? ($throwRuntimeError("index out of range"), undefined) : a[x$1] = "00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899".charCodeAt((is + 1 >>> 0))));
						(x$2 = i + 0 >> 0, ((x$2 < 0 || x$2 >= a.length) ? ($throwRuntimeError("index out of range"), undefined) : a[x$2] = "00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899".charCodeAt((is + 0 >>> 0))));
						j = j - (1) >> 0;
					}
					i = i - (1) >> 0;
					((i < 0 || i >= a.length) ? ($throwRuntimeError("index out of range"), undefined) : a[i] = "00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899".charCodeAt(((us * 2 >>> 0) + 1 >>> 0)));
					u = q;
				}
			}
			us$1 = ((u.$low >>> 0));
			while (true) {
				if (!(us$1 >= 100)) { break; }
				is$1 = (_r$1 = us$1 % 100, _r$1 === _r$1 ? _r$1 : $throwRuntimeError("integer divide by zero")) * 2 >>> 0;
				us$1 = (_q$1 = us$1 / (100), (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >>> 0 : $throwRuntimeError("integer divide by zero"));
				i = i - (2) >> 0;
				(x$3 = i + 1 >> 0, ((x$3 < 0 || x$3 >= a.length) ? ($throwRuntimeError("index out of range"), undefined) : a[x$3] = "00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899".charCodeAt((is$1 + 1 >>> 0))));
				(x$4 = i + 0 >> 0, ((x$4 < 0 || x$4 >= a.length) ? ($throwRuntimeError("index out of range"), undefined) : a[x$4] = "00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899".charCodeAt((is$1 + 0 >>> 0))));
			}
			is$2 = us$1 * 2 >>> 0;
			i = i - (1) >> 0;
			((i < 0 || i >= a.length) ? ($throwRuntimeError("index out of range"), undefined) : a[i] = "00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899".charCodeAt((is$2 + 1 >>> 0)));
			if (us$1 >= 10) {
				i = i - (1) >> 0;
				((i < 0 || i >= a.length) ? ($throwRuntimeError("index out of range"), undefined) : a[i] = "00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899".charCodeAt(is$2));
			}
		} else {
			s$1 = ((base < 0 || base >= shifts.length) ? ($throwRuntimeError("index out of range"), undefined) : shifts[base]);
			if (s$1 > 0) {
				b = (new $Uint64(0, base));
				m = ((base >>> 0)) - 1 >>> 0;
				while (true) {
					if (!((u.$high > b.$high || (u.$high === b.$high && u.$low >= b.$low)))) { break; }
					i = i - (1) >> 0;
					((i < 0 || i >= a.length) ? ($throwRuntimeError("index out of range"), undefined) : a[i] = "0123456789abcdefghijklmnopqrstuvwxyz".charCodeAt(((((u.$low >>> 0)) & m) >>> 0)));
					u = $shiftRightUint64(u, (s$1));
				}
				i = i - (1) >> 0;
				((i < 0 || i >= a.length) ? ($throwRuntimeError("index out of range"), undefined) : a[i] = "0123456789abcdefghijklmnopqrstuvwxyz".charCodeAt(((u.$low >>> 0))));
			} else {
				b$1 = (new $Uint64(0, base));
				while (true) {
					if (!((u.$high > b$1.$high || (u.$high === b$1.$high && u.$low >= b$1.$low)))) { break; }
					i = i - (1) >> 0;
					q$1 = $div64(u, b$1, false);
					((i < 0 || i >= a.length) ? ($throwRuntimeError("index out of range"), undefined) : a[i] = "0123456789abcdefghijklmnopqrstuvwxyz".charCodeAt((((x$5 = $mul64(q$1, b$1), new $Uint64(u.$high - x$5.$high, u.$low - x$5.$low)).$low >>> 0))));
					u = q$1;
				}
				i = i - (1) >> 0;
				((i < 0 || i >= a.length) ? ($throwRuntimeError("index out of range"), undefined) : a[i] = "0123456789abcdefghijklmnopqrstuvwxyz".charCodeAt(((u.$low >>> 0))));
			}
		}
		if (neg) {
			i = i - (1) >> 0;
			((i < 0 || i >= a.length) ? ($throwRuntimeError("index out of range"), undefined) : a[i] = 45);
		}
		if (append_) {
			d = $appendSlice(dst, $subslice(new sliceType$6(a), i));
			return [d, s];
		}
		s = ($bytesToString($subslice(new sliceType$6(a), i)));
		return [d, s];
	};
	quoteWith = function(s, quote, ASCIIonly, graphicOnly) {
		var ASCIIonly, _q, graphicOnly, quote, s;
		return ($bytesToString(appendQuotedWith($makeSlice(sliceType$6, 0, (_q = ($imul(3, s.length)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"))), s, quote, ASCIIonly, graphicOnly)));
	};
	appendQuotedWith = function(buf, s, quote, ASCIIonly, graphicOnly) {
		var ASCIIonly, _tuple, buf, graphicOnly, quote, r, s, width;
		buf = $append(buf, quote);
		width = 0;
		while (true) {
			if (!(s.length > 0)) { break; }
			r = ((s.charCodeAt(0) >> 0));
			width = 1;
			if (r >= 128) {
				_tuple = utf8.DecodeRuneInString(s);
				r = _tuple[0];
				width = _tuple[1];
			}
			if ((width === 1) && (r === 65533)) {
				buf = $appendSlice(buf, "\\x");
				buf = $append(buf, "0123456789abcdef".charCodeAt((s.charCodeAt(0) >>> 4 << 24 >>> 24)));
				buf = $append(buf, "0123456789abcdef".charCodeAt(((s.charCodeAt(0) & 15) >>> 0)));
				s = $substring(s, width);
				continue;
			}
			buf = appendEscapedRune(buf, r, quote, ASCIIonly, graphicOnly);
			s = $substring(s, width);
		}
		buf = $append(buf, quote);
		return buf;
	};
	appendQuotedRuneWith = function(buf, r, quote, ASCIIonly, graphicOnly) {
		var ASCIIonly, buf, graphicOnly, quote, r;
		buf = $append(buf, quote);
		if (!utf8.ValidRune(r)) {
			r = 65533;
		}
		buf = appendEscapedRune(buf, r, quote, ASCIIonly, graphicOnly);
		buf = $append(buf, quote);
		return buf;
	};
	appendEscapedRune = function(buf, r, quote, ASCIIonly, graphicOnly) {
		var ASCIIonly, _1, buf, graphicOnly, n, quote, r, runeTmp, s, s$1;
		runeTmp = arrayType$4.zero();
		if ((r === ((quote >> 0))) || (r === 92)) {
			buf = $append(buf, 92);
			buf = $append(buf, ((r << 24 >>> 24)));
			return buf;
		}
		if (ASCIIonly) {
			if (r < 128 && IsPrint(r)) {
				buf = $append(buf, ((r << 24 >>> 24)));
				return buf;
			}
		} else if (IsPrint(r) || graphicOnly && isInGraphicList(r)) {
			n = utf8.EncodeRune(new sliceType$6(runeTmp), r);
			buf = $appendSlice(buf, $subslice(new sliceType$6(runeTmp), 0, n));
			return buf;
		}
		_1 = r;
		if (_1 === (7)) {
			buf = $appendSlice(buf, "\\a");
		} else if (_1 === (8)) {
			buf = $appendSlice(buf, "\\b");
		} else if (_1 === (12)) {
			buf = $appendSlice(buf, "\\f");
		} else if (_1 === (10)) {
			buf = $appendSlice(buf, "\\n");
		} else if (_1 === (13)) {
			buf = $appendSlice(buf, "\\r");
		} else if (_1 === (9)) {
			buf = $appendSlice(buf, "\\t");
		} else if (_1 === (11)) {
			buf = $appendSlice(buf, "\\v");
		} else {
			if (r < 32) {
				buf = $appendSlice(buf, "\\x");
				buf = $append(buf, "0123456789abcdef".charCodeAt((((r << 24 >>> 24)) >>> 4 << 24 >>> 24)));
				buf = $append(buf, "0123456789abcdef".charCodeAt(((((r << 24 >>> 24)) & 15) >>> 0)));
			} else if (r > 1114111) {
				r = 65533;
				buf = $appendSlice(buf, "\\u");
				s = 12;
				while (true) {
					if (!(s >= 0)) { break; }
					buf = $append(buf, "0123456789abcdef".charCodeAt((((r >> $min(((s >>> 0)), 31)) >> 0) & 15)));
					s = s - (4) >> 0;
				}
			} else if (r < 65536) {
				buf = $appendSlice(buf, "\\u");
				s = 12;
				while (true) {
					if (!(s >= 0)) { break; }
					buf = $append(buf, "0123456789abcdef".charCodeAt((((r >> $min(((s >>> 0)), 31)) >> 0) & 15)));
					s = s - (4) >> 0;
				}
			} else {
				buf = $appendSlice(buf, "\\U");
				s$1 = 28;
				while (true) {
					if (!(s$1 >= 0)) { break; }
					buf = $append(buf, "0123456789abcdef".charCodeAt((((r >> $min(((s$1 >>> 0)), 31)) >> 0) & 15)));
					s$1 = s$1 - (4) >> 0;
				}
			}
		}
		return buf;
	};
	Quote = function(s) {
		var s;
		return quoteWith(s, 34, false, false);
	};
	$pkg.Quote = Quote;
	AppendQuote = function(dst, s) {
		var dst, s;
		return appendQuotedWith(dst, s, 34, false, false);
	};
	$pkg.AppendQuote = AppendQuote;
	AppendQuoteToASCII = function(dst, s) {
		var dst, s;
		return appendQuotedWith(dst, s, 34, true, false);
	};
	$pkg.AppendQuoteToASCII = AppendQuoteToASCII;
	AppendQuoteRune = function(dst, r) {
		var dst, r;
		return appendQuotedRuneWith(dst, r, 39, false, false);
	};
	$pkg.AppendQuoteRune = AppendQuoteRune;
	AppendQuoteRuneToASCII = function(dst, r) {
		var dst, r;
		return appendQuotedRuneWith(dst, r, 39, true, false);
	};
	$pkg.AppendQuoteRuneToASCII = AppendQuoteRuneToASCII;
	CanBackquote = function(s) {
		var _tuple, r, s, wid;
		while (true) {
			if (!(s.length > 0)) { break; }
			_tuple = utf8.DecodeRuneInString(s);
			r = _tuple[0];
			wid = _tuple[1];
			s = $substring(s, wid);
			if (wid > 1) {
				if (r === 65279) {
					return false;
				}
				continue;
			}
			if (r === 65533) {
				return false;
			}
			if ((r < 32 && !((r === 9))) || (r === 96) || (r === 127)) {
				return false;
			}
		}
		return true;
	};
	$pkg.CanBackquote = CanBackquote;
	unhex = function(b) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, b, c, ok, v;
		v = 0;
		ok = false;
		c = ((b >> 0));
		if (48 <= c && c <= 57) {
			_tmp = c - 48 >> 0;
			_tmp$1 = true;
			v = _tmp;
			ok = _tmp$1;
			return [v, ok];
		} else if (97 <= c && c <= 102) {
			_tmp$2 = (c - 97 >> 0) + 10 >> 0;
			_tmp$3 = true;
			v = _tmp$2;
			ok = _tmp$3;
			return [v, ok];
		} else if (65 <= c && c <= 70) {
			_tmp$4 = (c - 65 >> 0) + 10 >> 0;
			_tmp$5 = true;
			v = _tmp$4;
			ok = _tmp$5;
			return [v, ok];
		}
		return [v, ok];
	};
	UnquoteChar = function(s, quote) {
		var _1, _2, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tuple, _tuple$1, c, c$1, err, j, j$1, multibyte, n, ok, quote, r, s, size, tail, v, v$1, value, x, x$1;
		value = 0;
		multibyte = false;
		tail = "";
		err = $ifaceNil;
		c = s.charCodeAt(0);
		if ((c === quote) && ((quote === 39) || (quote === 34))) {
			err = $pkg.ErrSyntax;
			return [value, multibyte, tail, err];
		} else if (c >= 128) {
			_tuple = utf8.DecodeRuneInString(s);
			r = _tuple[0];
			size = _tuple[1];
			_tmp = r;
			_tmp$1 = true;
			_tmp$2 = $substring(s, size);
			_tmp$3 = $ifaceNil;
			value = _tmp;
			multibyte = _tmp$1;
			tail = _tmp$2;
			err = _tmp$3;
			return [value, multibyte, tail, err];
		} else if (!((c === 92))) {
			_tmp$4 = ((s.charCodeAt(0) >> 0));
			_tmp$5 = false;
			_tmp$6 = $substring(s, 1);
			_tmp$7 = $ifaceNil;
			value = _tmp$4;
			multibyte = _tmp$5;
			tail = _tmp$6;
			err = _tmp$7;
			return [value, multibyte, tail, err];
		}
		if (s.length <= 1) {
			err = $pkg.ErrSyntax;
			return [value, multibyte, tail, err];
		}
		c$1 = s.charCodeAt(1);
		s = $substring(s, 2);
		switch (0) { default:
			_1 = c$1;
			if (_1 === (97)) {
				value = 7;
			} else if (_1 === (98)) {
				value = 8;
			} else if (_1 === (102)) {
				value = 12;
			} else if (_1 === (110)) {
				value = 10;
			} else if (_1 === (114)) {
				value = 13;
			} else if (_1 === (116)) {
				value = 9;
			} else if (_1 === (118)) {
				value = 11;
			} else if ((_1 === (120)) || (_1 === (117)) || (_1 === (85))) {
				n = 0;
				_2 = c$1;
				if (_2 === (120)) {
					n = 2;
				} else if (_2 === (117)) {
					n = 4;
				} else if (_2 === (85)) {
					n = 8;
				}
				v = 0;
				if (s.length < n) {
					err = $pkg.ErrSyntax;
					return [value, multibyte, tail, err];
				}
				j = 0;
				while (true) {
					if (!(j < n)) { break; }
					_tuple$1 = unhex(s.charCodeAt(j));
					x = _tuple$1[0];
					ok = _tuple$1[1];
					if (!ok) {
						err = $pkg.ErrSyntax;
						return [value, multibyte, tail, err];
					}
					v = (v << 4 >> 0) | x;
					j = j + (1) >> 0;
				}
				s = $substring(s, n);
				if (c$1 === 120) {
					value = v;
					break;
				}
				if (v > 1114111) {
					err = $pkg.ErrSyntax;
					return [value, multibyte, tail, err];
				}
				value = v;
				multibyte = true;
			} else if ((_1 === (48)) || (_1 === (49)) || (_1 === (50)) || (_1 === (51)) || (_1 === (52)) || (_1 === (53)) || (_1 === (54)) || (_1 === (55))) {
				v$1 = ((c$1 >> 0)) - 48 >> 0;
				if (s.length < 2) {
					err = $pkg.ErrSyntax;
					return [value, multibyte, tail, err];
				}
				j$1 = 0;
				while (true) {
					if (!(j$1 < 2)) { break; }
					x$1 = ((s.charCodeAt(j$1) >> 0)) - 48 >> 0;
					if (x$1 < 0 || x$1 > 7) {
						err = $pkg.ErrSyntax;
						return [value, multibyte, tail, err];
					}
					v$1 = ((v$1 << 3 >> 0)) | x$1;
					j$1 = j$1 + (1) >> 0;
				}
				s = $substring(s, 2);
				if (v$1 > 255) {
					err = $pkg.ErrSyntax;
					return [value, multibyte, tail, err];
				}
				value = v$1;
			} else if (_1 === (92)) {
				value = 92;
			} else if ((_1 === (39)) || (_1 === (34))) {
				if (!((c$1 === quote))) {
					err = $pkg.ErrSyntax;
					return [value, multibyte, tail, err];
				}
				value = ((c$1 >> 0));
			} else {
				err = $pkg.ErrSyntax;
				return [value, multibyte, tail, err];
			}
		}
		tail = s;
		return [value, multibyte, tail, err];
	};
	$pkg.UnquoteChar = UnquoteChar;
	Unquote = function(s) {
		var _1, _q, _tuple, _tuple$1, buf, buf$1, c, err, i, multibyte, n, n$1, quote, r, runeTmp, s, size, ss;
		n = s.length;
		if (n < 2) {
			return ["", $pkg.ErrSyntax];
		}
		quote = s.charCodeAt(0);
		if (!((quote === s.charCodeAt((n - 1 >> 0))))) {
			return ["", $pkg.ErrSyntax];
		}
		s = $substring(s, 1, (n - 1 >> 0));
		if (quote === 96) {
			if (contains(s, 96)) {
				return ["", $pkg.ErrSyntax];
			}
			if (contains(s, 13)) {
				buf = $makeSlice(sliceType$6, 0, (s.length - 1 >> 0));
				i = 0;
				while (true) {
					if (!(i < s.length)) { break; }
					if (!((s.charCodeAt(i) === 13))) {
						buf = $append(buf, s.charCodeAt(i));
					}
					i = i + (1) >> 0;
				}
				return [($bytesToString(buf)), $ifaceNil];
			}
			return [s, $ifaceNil];
		}
		if (!((quote === 34)) && !((quote === 39))) {
			return ["", $pkg.ErrSyntax];
		}
		if (contains(s, 10)) {
			return ["", $pkg.ErrSyntax];
		}
		if (!contains(s, 92) && !contains(s, quote)) {
			_1 = quote;
			if (_1 === (34)) {
				return [s, $ifaceNil];
			} else if (_1 === (39)) {
				_tuple = utf8.DecodeRuneInString(s);
				r = _tuple[0];
				size = _tuple[1];
				if ((size === s.length) && (!((r === 65533)) || !((size === 1)))) {
					return [s, $ifaceNil];
				}
			}
		}
		runeTmp = arrayType$4.zero();
		buf$1 = $makeSlice(sliceType$6, 0, (_q = ($imul(3, s.length)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")));
		while (true) {
			if (!(s.length > 0)) { break; }
			_tuple$1 = UnquoteChar(s, quote);
			c = _tuple$1[0];
			multibyte = _tuple$1[1];
			ss = _tuple$1[2];
			err = _tuple$1[3];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				return ["", err];
			}
			s = ss;
			if (c < 128 || !multibyte) {
				buf$1 = $append(buf$1, ((c << 24 >>> 24)));
			} else {
				n$1 = utf8.EncodeRune(new sliceType$6(runeTmp), c);
				buf$1 = $appendSlice(buf$1, $subslice(new sliceType$6(runeTmp), 0, n$1));
			}
			if ((quote === 39) && !((s.length === 0))) {
				return ["", $pkg.ErrSyntax];
			}
		}
		return [($bytesToString(buf$1)), $ifaceNil];
	};
	$pkg.Unquote = Unquote;
	contains = function(s, c) {
		var c, i, s;
		i = 0;
		while (true) {
			if (!(i < s.length)) { break; }
			if (s.charCodeAt(i) === c) {
				return true;
			}
			i = i + (1) >> 0;
		}
		return false;
	};
	bsearch16 = function(a, x) {
		var _q, _tmp, _tmp$1, a, h, i, j, x;
		_tmp = 0;
		_tmp$1 = a.$length;
		i = _tmp;
		j = _tmp$1;
		while (true) {
			if (!(i < j)) { break; }
			h = i + (_q = ((j - i >> 0)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) >> 0;
			if (((h < 0 || h >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + h]) < x) {
				i = h + 1 >> 0;
			} else {
				j = h;
			}
		}
		return i;
	};
	bsearch32 = function(a, x) {
		var _q, _tmp, _tmp$1, a, h, i, j, x;
		_tmp = 0;
		_tmp$1 = a.$length;
		i = _tmp;
		j = _tmp$1;
		while (true) {
			if (!(i < j)) { break; }
			h = i + (_q = ((j - i >> 0)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) >> 0;
			if (((h < 0 || h >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + h]) < x) {
				i = h + 1 >> 0;
			} else {
				j = h;
			}
		}
		return i;
	};
	IsPrint = function(r) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, i, i$1, isNotPrint, isNotPrint$1, isPrint, isPrint$1, j, j$1, r, rr, rr$1, x, x$1, x$2, x$3;
		if (r <= 255) {
			if (32 <= r && r <= 126) {
				return true;
			}
			if (161 <= r && r <= 255) {
				return !((r === 173));
			}
			return false;
		}
		if (0 <= r && r < 65536) {
			_tmp = ((r << 16 >>> 16));
			_tmp$1 = isPrint16;
			_tmp$2 = isNotPrint16;
			rr = _tmp;
			isPrint = _tmp$1;
			isNotPrint = _tmp$2;
			i = bsearch16(isPrint, rr);
			if (i >= isPrint.$length || rr < (x = (i & ~1) >> 0, ((x < 0 || x >= isPrint.$length) ? ($throwRuntimeError("index out of range"), undefined) : isPrint.$array[isPrint.$offset + x])) || (x$1 = i | 1, ((x$1 < 0 || x$1 >= isPrint.$length) ? ($throwRuntimeError("index out of range"), undefined) : isPrint.$array[isPrint.$offset + x$1])) < rr) {
				return false;
			}
			j = bsearch16(isNotPrint, rr);
			return j >= isNotPrint.$length || !((((j < 0 || j >= isNotPrint.$length) ? ($throwRuntimeError("index out of range"), undefined) : isNotPrint.$array[isNotPrint.$offset + j]) === rr));
		}
		_tmp$3 = ((r >>> 0));
		_tmp$4 = isPrint32;
		_tmp$5 = isNotPrint32;
		rr$1 = _tmp$3;
		isPrint$1 = _tmp$4;
		isNotPrint$1 = _tmp$5;
		i$1 = bsearch32(isPrint$1, rr$1);
		if (i$1 >= isPrint$1.$length || rr$1 < (x$2 = (i$1 & ~1) >> 0, ((x$2 < 0 || x$2 >= isPrint$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : isPrint$1.$array[isPrint$1.$offset + x$2])) || (x$3 = i$1 | 1, ((x$3 < 0 || x$3 >= isPrint$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : isPrint$1.$array[isPrint$1.$offset + x$3])) < rr$1) {
			return false;
		}
		if (r >= 131072) {
			return true;
		}
		r = r - (65536) >> 0;
		j$1 = bsearch16(isNotPrint$1, ((r << 16 >>> 16)));
		return j$1 >= isNotPrint$1.$length || !((((j$1 < 0 || j$1 >= isNotPrint$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : isNotPrint$1.$array[isNotPrint$1.$offset + j$1]) === ((r << 16 >>> 16))));
	};
	$pkg.IsPrint = IsPrint;
	isInGraphicList = function(r) {
		var i, r, rr;
		if (r > 65535) {
			return false;
		}
		rr = ((r << 16 >>> 16));
		i = bsearch16(isGraphic, rr);
		return i < isGraphic.$length && (rr === ((i < 0 || i >= isGraphic.$length) ? ($throwRuntimeError("index out of range"), undefined) : isGraphic.$array[isGraphic.$offset + i]));
	};
	ptrType.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$2.methods = [{prop: "set", name: "set", pkg: "strconv", typ: $funcType([$String], [$Bool], false)}, {prop: "floatBits", name: "floatBits", pkg: "strconv", typ: $funcType([ptrType$1], [$Uint64, $Bool], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Assign", name: "Assign", pkg: "", typ: $funcType([$Uint64], [], false)}, {prop: "Shift", name: "Shift", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "Round", name: "Round", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "RoundDown", name: "RoundDown", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "RoundUp", name: "RoundUp", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "RoundedInteger", name: "RoundedInteger", pkg: "", typ: $funcType([], [$Uint64], false)}];
	ptrType$4.methods = [{prop: "floatBits", name: "floatBits", pkg: "strconv", typ: $funcType([ptrType$1], [$Uint64, $Bool], false)}, {prop: "AssignComputeBounds", name: "AssignComputeBounds", pkg: "", typ: $funcType([$Uint64, $Int, $Bool, ptrType$1], [extFloat, extFloat], false)}, {prop: "Normalize", name: "Normalize", pkg: "", typ: $funcType([], [$Uint], false)}, {prop: "Multiply", name: "Multiply", pkg: "", typ: $funcType([extFloat], [], false)}, {prop: "AssignDecimal", name: "AssignDecimal", pkg: "", typ: $funcType([$Uint64, $Int, $Bool, $Bool, ptrType$1], [$Bool], false)}, {prop: "frexp10", name: "frexp10", pkg: "strconv", typ: $funcType([], [$Int, $Int], false)}, {prop: "FixedDecimal", name: "FixedDecimal", pkg: "", typ: $funcType([ptrType$3, $Int], [$Bool], false)}, {prop: "ShortestDecimal", name: "ShortestDecimal", pkg: "", typ: $funcType([ptrType$3, ptrType$4, ptrType$4], [$Bool], false)}];
	NumError.init("", [{prop: "Func", name: "Func", anonymous: false, exported: true, typ: $String, tag: ""}, {prop: "Num", name: "Num", anonymous: false, exported: true, typ: $String, tag: ""}, {prop: "Err", name: "Err", anonymous: false, exported: true, typ: $error, tag: ""}]);
	decimal.init("strconv", [{prop: "d", name: "d", anonymous: false, exported: false, typ: arrayType, tag: ""}, {prop: "nd", name: "nd", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "dp", name: "dp", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "neg", name: "neg", anonymous: false, exported: false, typ: $Bool, tag: ""}, {prop: "trunc", name: "trunc", anonymous: false, exported: false, typ: $Bool, tag: ""}]);
	leftCheat.init("strconv", [{prop: "delta", name: "delta", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "cutoff", name: "cutoff", anonymous: false, exported: false, typ: $String, tag: ""}]);
	extFloat.init("strconv", [{prop: "mant", name: "mant", anonymous: false, exported: false, typ: $Uint64, tag: ""}, {prop: "exp", name: "exp", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "neg", name: "neg", anonymous: false, exported: false, typ: $Bool, tag: ""}]);
	floatInfo.init("strconv", [{prop: "mantbits", name: "mantbits", anonymous: false, exported: false, typ: $Uint, tag: ""}, {prop: "expbits", name: "expbits", anonymous: false, exported: false, typ: $Uint, tag: ""}, {prop: "bias", name: "bias", anonymous: false, exported: false, typ: $Int, tag: ""}]);
	decimalSlice.init("strconv", [{prop: "d", name: "d", anonymous: false, exported: false, typ: sliceType$6, tag: ""}, {prop: "nd", name: "nd", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "dp", name: "dp", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "neg", name: "neg", anonymous: false, exported: false, typ: $Bool, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = errors.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = math.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = utf8.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		optimize = true;
		$pkg.ErrRange = errors.New("value out of range");
		$pkg.ErrSyntax = errors.New("invalid syntax");
		leftcheats = new sliceType$3([new leftCheat.ptr(0, ""), new leftCheat.ptr(1, "5"), new leftCheat.ptr(1, "25"), new leftCheat.ptr(1, "125"), new leftCheat.ptr(2, "625"), new leftCheat.ptr(2, "3125"), new leftCheat.ptr(2, "15625"), new leftCheat.ptr(3, "78125"), new leftCheat.ptr(3, "390625"), new leftCheat.ptr(3, "1953125"), new leftCheat.ptr(4, "9765625"), new leftCheat.ptr(4, "48828125"), new leftCheat.ptr(4, "244140625"), new leftCheat.ptr(4, "1220703125"), new leftCheat.ptr(5, "6103515625"), new leftCheat.ptr(5, "30517578125"), new leftCheat.ptr(5, "152587890625"), new leftCheat.ptr(6, "762939453125"), new leftCheat.ptr(6, "3814697265625"), new leftCheat.ptr(6, "19073486328125"), new leftCheat.ptr(7, "95367431640625"), new leftCheat.ptr(7, "476837158203125"), new leftCheat.ptr(7, "2384185791015625"), new leftCheat.ptr(7, "11920928955078125"), new leftCheat.ptr(8, "59604644775390625"), new leftCheat.ptr(8, "298023223876953125"), new leftCheat.ptr(8, "1490116119384765625"), new leftCheat.ptr(9, "7450580596923828125"), new leftCheat.ptr(9, "37252902984619140625"), new leftCheat.ptr(9, "186264514923095703125"), new leftCheat.ptr(10, "931322574615478515625"), new leftCheat.ptr(10, "4656612873077392578125"), new leftCheat.ptr(10, "23283064365386962890625"), new leftCheat.ptr(10, "116415321826934814453125"), new leftCheat.ptr(11, "582076609134674072265625"), new leftCheat.ptr(11, "2910383045673370361328125"), new leftCheat.ptr(11, "14551915228366851806640625"), new leftCheat.ptr(12, "72759576141834259033203125"), new leftCheat.ptr(12, "363797880709171295166015625"), new leftCheat.ptr(12, "1818989403545856475830078125"), new leftCheat.ptr(13, "9094947017729282379150390625"), new leftCheat.ptr(13, "45474735088646411895751953125"), new leftCheat.ptr(13, "227373675443232059478759765625"), new leftCheat.ptr(13, "1136868377216160297393798828125"), new leftCheat.ptr(14, "5684341886080801486968994140625"), new leftCheat.ptr(14, "28421709430404007434844970703125"), new leftCheat.ptr(14, "142108547152020037174224853515625"), new leftCheat.ptr(15, "710542735760100185871124267578125"), new leftCheat.ptr(15, "3552713678800500929355621337890625"), new leftCheat.ptr(15, "17763568394002504646778106689453125"), new leftCheat.ptr(16, "88817841970012523233890533447265625"), new leftCheat.ptr(16, "444089209850062616169452667236328125"), new leftCheat.ptr(16, "2220446049250313080847263336181640625"), new leftCheat.ptr(16, "11102230246251565404236316680908203125"), new leftCheat.ptr(17, "55511151231257827021181583404541015625"), new leftCheat.ptr(17, "277555756156289135105907917022705078125"), new leftCheat.ptr(17, "1387778780781445675529539585113525390625"), new leftCheat.ptr(18, "6938893903907228377647697925567626953125"), new leftCheat.ptr(18, "34694469519536141888238489627838134765625"), new leftCheat.ptr(18, "173472347597680709441192448139190673828125"), new leftCheat.ptr(19, "867361737988403547205962240695953369140625")]);
		smallPowersOfTen = $toNativeArray($kindStruct, [new extFloat.ptr(new $Uint64(2147483648, 0), -63, false), new extFloat.ptr(new $Uint64(2684354560, 0), -60, false), new extFloat.ptr(new $Uint64(3355443200, 0), -57, false), new extFloat.ptr(new $Uint64(4194304000, 0), -54, false), new extFloat.ptr(new $Uint64(2621440000, 0), -50, false), new extFloat.ptr(new $Uint64(3276800000, 0), -47, false), new extFloat.ptr(new $Uint64(4096000000, 0), -44, false), new extFloat.ptr(new $Uint64(2560000000, 0), -40, false)]);
		powersOfTen = $toNativeArray($kindStruct, [new extFloat.ptr(new $Uint64(4203730336, 136053384), -1220, false), new extFloat.ptr(new $Uint64(3132023167, 2722021238), -1193, false), new extFloat.ptr(new $Uint64(2333539104, 810921078), -1166, false), new extFloat.ptr(new $Uint64(3477244234, 1573795306), -1140, false), new extFloat.ptr(new $Uint64(2590748842, 1432697645), -1113, false), new extFloat.ptr(new $Uint64(3860516611, 1025131999), -1087, false), new extFloat.ptr(new $Uint64(2876309015, 3348809418), -1060, false), new extFloat.ptr(new $Uint64(4286034428, 3200048207), -1034, false), new extFloat.ptr(new $Uint64(3193344495, 1097586188), -1007, false), new extFloat.ptr(new $Uint64(2379227053, 2424306748), -980, false), new extFloat.ptr(new $Uint64(3545324584, 827693699), -954, false), new extFloat.ptr(new $Uint64(2641472655, 2913388981), -927, false), new extFloat.ptr(new $Uint64(3936100983, 602835915), -901, false), new extFloat.ptr(new $Uint64(2932623761, 1081627501), -874, false), new extFloat.ptr(new $Uint64(2184974969, 1572261463), -847, false), new extFloat.ptr(new $Uint64(3255866422, 1308317239), -821, false), new extFloat.ptr(new $Uint64(2425809519, 944281679), -794, false), new extFloat.ptr(new $Uint64(3614737867, 629291719), -768, false), new extFloat.ptr(new $Uint64(2693189581, 2545915892), -741, false), new extFloat.ptr(new $Uint64(4013165208, 388672741), -715, false), new extFloat.ptr(new $Uint64(2990041083, 708162190), -688, false), new extFloat.ptr(new $Uint64(2227754207, 3536207675), -661, false), new extFloat.ptr(new $Uint64(3319612455, 450088378), -635, false), new extFloat.ptr(new $Uint64(2473304014, 3139815830), -608, false), new extFloat.ptr(new $Uint64(3685510180, 2103616900), -582, false), new extFloat.ptr(new $Uint64(2745919064, 224385782), -555, false), new extFloat.ptr(new $Uint64(4091738259, 3737383206), -529, false), new extFloat.ptr(new $Uint64(3048582568, 2868871352), -502, false), new extFloat.ptr(new $Uint64(2271371013, 1820084875), -475, false), new extFloat.ptr(new $Uint64(3384606560, 885076051), -449, false), new extFloat.ptr(new $Uint64(2521728396, 2444895829), -422, false), new extFloat.ptr(new $Uint64(3757668132, 1881767613), -396, false), new extFloat.ptr(new $Uint64(2799680927, 3102062735), -369, false), new extFloat.ptr(new $Uint64(4171849679, 2289335700), -343, false), new extFloat.ptr(new $Uint64(3108270227, 2410191823), -316, false), new extFloat.ptr(new $Uint64(2315841784, 3205436779), -289, false), new extFloat.ptr(new $Uint64(3450873173, 1697722806), -263, false), new extFloat.ptr(new $Uint64(2571100870, 3497754540), -236, false), new extFloat.ptr(new $Uint64(3831238852, 707476230), -210, false), new extFloat.ptr(new $Uint64(2854495385, 1769181907), -183, false), new extFloat.ptr(new $Uint64(4253529586, 2197867022), -157, false), new extFloat.ptr(new $Uint64(3169126500, 2450594539), -130, false), new extFloat.ptr(new $Uint64(2361183241, 1867548876), -103, false), new extFloat.ptr(new $Uint64(3518437208, 3793315116), -77, false), new extFloat.ptr(new $Uint64(2621440000, 0), -50, false), new extFloat.ptr(new $Uint64(3906250000, 0), -24, false), new extFloat.ptr(new $Uint64(2910383045, 2892103680), 3, false), new extFloat.ptr(new $Uint64(2168404344, 4170451332), 30, false), new extFloat.ptr(new $Uint64(3231174267, 3372684723), 56, false), new extFloat.ptr(new $Uint64(2407412430, 2078956656), 83, false), new extFloat.ptr(new $Uint64(3587324068, 2884206696), 109, false), new extFloat.ptr(new $Uint64(2672764710, 395977285), 136, false), new extFloat.ptr(new $Uint64(3982729777, 3569679143), 162, false), new extFloat.ptr(new $Uint64(2967364920, 2361961896), 189, false), new extFloat.ptr(new $Uint64(2210859150, 447440347), 216, false), new extFloat.ptr(new $Uint64(3294436857, 1114709402), 242, false), new extFloat.ptr(new $Uint64(2454546732, 2786846552), 269, false), new extFloat.ptr(new $Uint64(3657559652, 443583978), 295, false), new extFloat.ptr(new $Uint64(2725094297, 2599384906), 322, false), new extFloat.ptr(new $Uint64(4060706939, 3028118405), 348, false), new extFloat.ptr(new $Uint64(3025462433, 2044532855), 375, false), new extFloat.ptr(new $Uint64(2254145170, 1536935362), 402, false), new extFloat.ptr(new $Uint64(3358938053, 3365297469), 428, false), new extFloat.ptr(new $Uint64(2502603868, 4204241075), 455, false), new extFloat.ptr(new $Uint64(3729170365, 2577424355), 481, false), new extFloat.ptr(new $Uint64(2778448436, 3677981733), 508, false), new extFloat.ptr(new $Uint64(4140210802, 2744688476), 534, false), new extFloat.ptr(new $Uint64(3084697427, 1424604878), 561, false), new extFloat.ptr(new $Uint64(2298278679, 4062331362), 588, false), new extFloat.ptr(new $Uint64(3424702107, 3546052773), 614, false), new extFloat.ptr(new $Uint64(2551601907, 2065781727), 641, false), new extFloat.ptr(new $Uint64(3802183132, 2535403578), 667, false), new extFloat.ptr(new $Uint64(2832847187, 1558426518), 694, false), new extFloat.ptr(new $Uint64(4221271257, 2762425404), 720, false), new extFloat.ptr(new $Uint64(3145092172, 2812560400), 747, false), new extFloat.ptr(new $Uint64(2343276271, 3057687578), 774, false), new extFloat.ptr(new $Uint64(3491753744, 2790753324), 800, false), new extFloat.ptr(new $Uint64(2601559269, 3918606633), 827, false), new extFloat.ptr(new $Uint64(3876625403, 2711358621), 853, false), new extFloat.ptr(new $Uint64(2888311001, 1648096297), 880, false), new extFloat.ptr(new $Uint64(2151959390, 2057817989), 907, false), new extFloat.ptr(new $Uint64(3206669376, 61660461), 933, false), new extFloat.ptr(new $Uint64(2389154863, 1581580175), 960, false), new extFloat.ptr(new $Uint64(3560118173, 2626467905), 986, false), new extFloat.ptr(new $Uint64(2652494738, 3034782633), 1013, false), new extFloat.ptr(new $Uint64(3952525166, 3135207385), 1039, false), new extFloat.ptr(new $Uint64(2944860731, 2616258155), 1066, false)]);
		uint64pow10 = $toNativeArray($kindUint64, [new $Uint64(0, 1), new $Uint64(0, 10), new $Uint64(0, 100), new $Uint64(0, 1000), new $Uint64(0, 10000), new $Uint64(0, 100000), new $Uint64(0, 1000000), new $Uint64(0, 10000000), new $Uint64(0, 100000000), new $Uint64(0, 1000000000), new $Uint64(2, 1410065408), new $Uint64(23, 1215752192), new $Uint64(232, 3567587328), new $Uint64(2328, 1316134912), new $Uint64(23283, 276447232), new $Uint64(232830, 2764472320), new $Uint64(2328306, 1874919424), new $Uint64(23283064, 1569325056), new $Uint64(232830643, 2808348672), new $Uint64(2328306436, 2313682944)]);
		float32info = new floatInfo.ptr(23, 8, -127);
		float64info = new floatInfo.ptr(52, 11, -1023);
		isPrint16 = new sliceType$4([32, 126, 161, 887, 890, 895, 900, 1366, 1369, 1418, 1421, 1479, 1488, 1514, 1520, 1524, 1542, 1563, 1566, 1805, 1808, 1866, 1869, 1969, 1984, 2042, 2048, 2093, 2096, 2139, 2142, 2154, 2208, 2237, 2260, 2444, 2447, 2448, 2451, 2482, 2486, 2489, 2492, 2500, 2503, 2504, 2507, 2510, 2519, 2519, 2524, 2531, 2534, 2557, 2561, 2570, 2575, 2576, 2579, 2617, 2620, 2626, 2631, 2632, 2635, 2637, 2641, 2641, 2649, 2654, 2662, 2677, 2689, 2745, 2748, 2765, 2768, 2768, 2784, 2787, 2790, 2801, 2809, 2828, 2831, 2832, 2835, 2873, 2876, 2884, 2887, 2888, 2891, 2893, 2902, 2903, 2908, 2915, 2918, 2935, 2946, 2954, 2958, 2965, 2969, 2975, 2979, 2980, 2984, 2986, 2990, 3001, 3006, 3010, 3014, 3021, 3024, 3024, 3031, 3031, 3046, 3066, 3072, 3129, 3133, 3149, 3157, 3162, 3168, 3171, 3174, 3183, 3192, 3257, 3260, 3277, 3285, 3286, 3294, 3299, 3302, 3314, 3328, 3407, 3412, 3427, 3430, 3455, 3458, 3478, 3482, 3517, 3520, 3526, 3530, 3530, 3535, 3551, 3558, 3567, 3570, 3572, 3585, 3642, 3647, 3675, 3713, 3716, 3719, 3722, 3725, 3725, 3732, 3751, 3754, 3773, 3776, 3789, 3792, 3801, 3804, 3807, 3840, 3948, 3953, 4058, 4096, 4295, 4301, 4301, 4304, 4685, 4688, 4701, 4704, 4749, 4752, 4789, 4792, 4805, 4808, 4885, 4888, 4954, 4957, 4988, 4992, 5017, 5024, 5109, 5112, 5117, 5120, 5788, 5792, 5880, 5888, 5908, 5920, 5942, 5952, 5971, 5984, 6003, 6016, 6109, 6112, 6121, 6128, 6137, 6144, 6157, 6160, 6169, 6176, 6263, 6272, 6314, 6320, 6389, 6400, 6443, 6448, 6459, 6464, 6464, 6468, 6509, 6512, 6516, 6528, 6571, 6576, 6601, 6608, 6618, 6622, 6683, 6686, 6780, 6783, 6793, 6800, 6809, 6816, 6829, 6832, 6846, 6912, 6987, 6992, 7036, 7040, 7155, 7164, 7223, 7227, 7241, 7245, 7304, 7360, 7367, 7376, 7417, 7424, 7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8061, 8064, 8147, 8150, 8175, 8178, 8190, 8208, 8231, 8240, 8286, 8304, 8305, 8308, 8348, 8352, 8383, 8400, 8432, 8448, 8587, 8592, 9254, 9280, 9290, 9312, 11123, 11126, 11157, 11160, 11193, 11197, 11218, 11244, 11247, 11264, 11507, 11513, 11559, 11565, 11565, 11568, 11623, 11631, 11632, 11647, 11670, 11680, 11849, 11904, 12019, 12032, 12245, 12272, 12283, 12289, 12438, 12441, 12543, 12549, 12590, 12593, 12730, 12736, 12771, 12784, 19893, 19904, 40938, 40960, 42124, 42128, 42182, 42192, 42539, 42560, 42743, 42752, 42935, 42999, 43051, 43056, 43065, 43072, 43127, 43136, 43205, 43214, 43225, 43232, 43261, 43264, 43347, 43359, 43388, 43392, 43481, 43486, 43574, 43584, 43597, 43600, 43609, 43612, 43714, 43739, 43766, 43777, 43782, 43785, 43790, 43793, 43798, 43808, 43877, 43888, 44013, 44016, 44025, 44032, 55203, 55216, 55238, 55243, 55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275, 64279, 64285, 64449, 64467, 64831, 64848, 64911, 64914, 64967, 65008, 65021, 65024, 65049, 65056, 65131, 65136, 65276, 65281, 65470, 65474, 65479, 65482, 65487, 65490, 65495, 65498, 65500, 65504, 65518, 65532, 65533]);
		isNotPrint16 = new sliceType$4([173, 907, 909, 930, 1328, 1376, 1416, 1424, 1757, 2111, 2143, 2229, 2274, 2436, 2473, 2481, 2526, 2564, 2601, 2609, 2612, 2615, 2621, 2653, 2692, 2702, 2706, 2729, 2737, 2740, 2758, 2762, 2816, 2820, 2857, 2865, 2868, 2910, 2948, 2961, 2971, 2973, 3017, 3076, 3085, 3089, 3113, 3141, 3145, 3159, 3204, 3213, 3217, 3241, 3252, 3269, 3273, 3295, 3312, 3332, 3341, 3345, 3397, 3401, 3460, 3506, 3516, 3541, 3543, 3715, 3721, 3736, 3744, 3748, 3750, 3756, 3770, 3781, 3783, 3912, 3992, 4029, 4045, 4294, 4681, 4695, 4697, 4745, 4785, 4799, 4801, 4823, 4881, 5760, 5901, 5997, 6001, 6431, 6751, 7674, 8024, 8026, 8028, 8030, 8117, 8133, 8156, 8181, 8335, 11209, 11311, 11359, 11558, 11687, 11695, 11703, 11711, 11719, 11727, 11735, 11743, 11930, 12352, 12687, 12831, 13055, 42927, 43470, 43519, 43815, 43823, 64311, 64317, 64319, 64322, 64325, 65107, 65127, 65141, 65511]);
		isPrint32 = new sliceType$5([65536, 65613, 65616, 65629, 65664, 65786, 65792, 65794, 65799, 65843, 65847, 65947, 65952, 65952, 66000, 66045, 66176, 66204, 66208, 66256, 66272, 66299, 66304, 66339, 66349, 66378, 66384, 66426, 66432, 66499, 66504, 66517, 66560, 66717, 66720, 66729, 66736, 66771, 66776, 66811, 66816, 66855, 66864, 66915, 66927, 66927, 67072, 67382, 67392, 67413, 67424, 67431, 67584, 67589, 67592, 67640, 67644, 67644, 67647, 67742, 67751, 67759, 67808, 67829, 67835, 67867, 67871, 67897, 67903, 67903, 67968, 68023, 68028, 68047, 68050, 68102, 68108, 68147, 68152, 68154, 68159, 68167, 68176, 68184, 68192, 68255, 68288, 68326, 68331, 68342, 68352, 68405, 68409, 68437, 68440, 68466, 68472, 68497, 68505, 68508, 68521, 68527, 68608, 68680, 68736, 68786, 68800, 68850, 68858, 68863, 69216, 69246, 69632, 69709, 69714, 69743, 69759, 69825, 69840, 69864, 69872, 69881, 69888, 69955, 69968, 70006, 70016, 70093, 70096, 70132, 70144, 70206, 70272, 70313, 70320, 70378, 70384, 70393, 70400, 70412, 70415, 70416, 70419, 70457, 70460, 70468, 70471, 70472, 70475, 70477, 70480, 70480, 70487, 70487, 70493, 70499, 70502, 70508, 70512, 70516, 70656, 70749, 70784, 70855, 70864, 70873, 71040, 71093, 71096, 71133, 71168, 71236, 71248, 71257, 71264, 71276, 71296, 71351, 71360, 71369, 71424, 71449, 71453, 71467, 71472, 71487, 71840, 71922, 71935, 71935, 72192, 72263, 72272, 72323, 72326, 72354, 72384, 72440, 72704, 72773, 72784, 72812, 72816, 72847, 72850, 72886, 72960, 73014, 73018, 73031, 73040, 73049, 73728, 74649, 74752, 74868, 74880, 75075, 77824, 78894, 82944, 83526, 92160, 92728, 92736, 92777, 92782, 92783, 92880, 92909, 92912, 92917, 92928, 92997, 93008, 93047, 93053, 93071, 93952, 94020, 94032, 94078, 94095, 94111, 94176, 94177, 94208, 100332, 100352, 101106, 110592, 110878, 110960, 111355, 113664, 113770, 113776, 113788, 113792, 113800, 113808, 113817, 113820, 113823, 118784, 119029, 119040, 119078, 119081, 119154, 119163, 119272, 119296, 119365, 119552, 119638, 119648, 119665, 119808, 119967, 119970, 119970, 119973, 119974, 119977, 120074, 120077, 120134, 120138, 120485, 120488, 120779, 120782, 121483, 121499, 121519, 122880, 122904, 122907, 122922, 124928, 125124, 125127, 125142, 125184, 125258, 125264, 125273, 125278, 125279, 126464, 126500, 126503, 126523, 126530, 126530, 126535, 126548, 126551, 126564, 126567, 126619, 126625, 126651, 126704, 126705, 126976, 127019, 127024, 127123, 127136, 127150, 127153, 127221, 127232, 127244, 127248, 127339, 127344, 127404, 127462, 127490, 127504, 127547, 127552, 127560, 127568, 127569, 127584, 127589, 127744, 128724, 128736, 128748, 128752, 128760, 128768, 128883, 128896, 128980, 129024, 129035, 129040, 129095, 129104, 129113, 129120, 129159, 129168, 129197, 129280, 129291, 129296, 129356, 129360, 129387, 129408, 129431, 129472, 129472, 129488, 129510, 131072, 173782, 173824, 177972, 177984, 178205, 178208, 183969, 183984, 191456, 194560, 195101, 917760, 917999]);
		isNotPrint32 = new sliceType$4([12, 39, 59, 62, 399, 926, 2057, 2102, 2134, 2291, 2564, 2580, 2584, 4285, 4405, 4576, 4626, 4743, 4745, 4750, 4766, 4868, 4905, 4913, 4916, 5210, 5212, 6813, 7177, 7223, 7336, 7431, 7434, 7483, 7486, 9327, 27231, 27482, 27490, 54357, 54429, 54445, 54458, 54460, 54468, 54534, 54549, 54557, 54586, 54591, 54597, 54609, 55968, 57351, 57378, 57381, 60932, 60960, 60963, 60968, 60979, 60984, 60986, 61000, 61002, 61004, 61008, 61011, 61016, 61018, 61020, 61022, 61024, 61027, 61035, 61043, 61048, 61053, 61055, 61066, 61092, 61098, 61632, 61648, 61743, 63807]);
		isGraphic = new sliceType$4([160, 5760, 8192, 8193, 8194, 8195, 8196, 8197, 8198, 8199, 8200, 8201, 8202, 8239, 8287, 12288]);
		shifts = $toNativeArray($kindUint, [0, 0, 1, 0, 2, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0]);
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["reflect"] = (function() {
	var $pkg = {}, $init, errors, js, math, runtime, strconv, sync, unicode, utf8, uncommonType, funcType, name, nameData, mapIter, Type, Kind, tflag, rtype, typeAlg, method, ChanDir, arrayType, chanType, imethod, interfaceType, mapType, ptrType, sliceType, structField, structType, Method, nameOff, typeOff, textOff, StructField, StructTag, fieldScan, Value, flag, ValueError, sliceType$1, ptrType$1, sliceType$2, sliceType$3, ptrType$2, funcType$1, sliceType$4, ptrType$3, ptrType$4, sliceType$5, sliceType$6, sliceType$7, ptrType$5, ptrType$6, structType$3, sliceType$8, sliceType$9, sliceType$10, sliceType$11, ptrType$7, ptrType$8, sliceType$13, sliceType$14, ptrType$9, sliceType$15, ptrType$15, sliceType$17, ptrType$16, funcType$3, funcType$4, funcType$5, ptrType$17, arrayType$12, ptrType$18, initialized, uncommonTypeMap, nameMap, nameOffList, typeOffList, callHelper, jsObjectPtr, selectHelper, kindNames, methodCache, uint8Type, init, jsType, reflectType, setKindType, newName, newNameOff, newTypeOff, internalStr, isWrapped, copyStruct, makeValue, MakeSlice, TypeOf, ValueOf, FuncOf, SliceOf, Zero, unsafe_New, makeInt, typedmemmove, makemap, keyFor, mapaccess, mapassign, mapdelete, mapiterinit, mapiterkey, mapiternext, maplen, cvtDirect, methodReceiver, valueInterface, ifaceE2I, methodName, makeMethodValue, wrapJsObject, unwrapJsObject, getJsTag, chanrecv, chansend, PtrTo, implements$1, directlyAssignable, haveIdenticalType, haveIdenticalUnderlyingType, toType, ifaceIndir, overflowFloat32, MakeMapWithSize, Indirect, New, convertOp, makeFloat, makeComplex, makeString, makeBytes, makeRunes, cvtInt, cvtUint, cvtFloatInt, cvtFloatUint, cvtIntFloat, cvtUintFloat, cvtFloat, cvtComplex, cvtIntString, cvtUintString, cvtBytesString, cvtStringBytes, cvtRunesString, cvtStringRunes, cvtT2I, cvtI2I;
	errors = $packages["errors"];
	js = $packages["github.com/gopherjs/gopherjs/js"];
	math = $packages["math"];
	runtime = $packages["runtime"];
	strconv = $packages["strconv"];
	sync = $packages["sync"];
	unicode = $packages["unicode"];
	utf8 = $packages["unicode/utf8"];
	uncommonType = $pkg.uncommonType = $newType(0, $kindStruct, "reflect.uncommonType", true, "reflect", false, function(pkgPath_, mcount_, _$2_, moff_, _$4_, _methods_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.pkgPath = 0;
			this.mcount = 0;
			this._$2 = 0;
			this.moff = 0;
			this._$4 = 0;
			this._methods = sliceType$5.nil;
			return;
		}
		this.pkgPath = pkgPath_;
		this.mcount = mcount_;
		this._$2 = _$2_;
		this.moff = moff_;
		this._$4 = _$4_;
		this._methods = _methods_;
	});
	funcType = $pkg.funcType = $newType(0, $kindStruct, "reflect.funcType", true, "reflect", false, function(rtype_, inCount_, outCount_, _in_, _out_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.rtype = new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$3.nil, ptrType$4.nil, 0, 0);
			this.inCount = 0;
			this.outCount = 0;
			this._in = sliceType$2.nil;
			this._out = sliceType$2.nil;
			return;
		}
		this.rtype = rtype_;
		this.inCount = inCount_;
		this.outCount = outCount_;
		this._in = _in_;
		this._out = _out_;
	});
	name = $pkg.name = $newType(0, $kindStruct, "reflect.name", true, "reflect", false, function(bytes_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.bytes = ptrType$4.nil;
			return;
		}
		this.bytes = bytes_;
	});
	nameData = $pkg.nameData = $newType(0, $kindStruct, "reflect.nameData", true, "reflect", false, function(name_, tag_, exported_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.name = "";
			this.tag = "";
			this.exported = false;
			return;
		}
		this.name = name_;
		this.tag = tag_;
		this.exported = exported_;
	});
	mapIter = $pkg.mapIter = $newType(0, $kindStruct, "reflect.mapIter", true, "reflect", false, function(t_, m_, keys_, i_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.t = $ifaceNil;
			this.m = null;
			this.keys = null;
			this.i = 0;
			return;
		}
		this.t = t_;
		this.m = m_;
		this.keys = keys_;
		this.i = i_;
	});
	Type = $pkg.Type = $newType(8, $kindInterface, "reflect.Type", true, "reflect", true, null);
	Kind = $pkg.Kind = $newType(4, $kindUint, "reflect.Kind", true, "reflect", true, null);
	tflag = $pkg.tflag = $newType(1, $kindUint8, "reflect.tflag", true, "reflect", false, null);
	rtype = $pkg.rtype = $newType(0, $kindStruct, "reflect.rtype", true, "reflect", false, function(size_, ptrdata_, hash_, tflag_, align_, fieldAlign_, kind_, alg_, gcdata_, str_, ptrToThis_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.size = 0;
			this.ptrdata = 0;
			this.hash = 0;
			this.tflag = 0;
			this.align = 0;
			this.fieldAlign = 0;
			this.kind = 0;
			this.alg = ptrType$3.nil;
			this.gcdata = ptrType$4.nil;
			this.str = 0;
			this.ptrToThis = 0;
			return;
		}
		this.size = size_;
		this.ptrdata = ptrdata_;
		this.hash = hash_;
		this.tflag = tflag_;
		this.align = align_;
		this.fieldAlign = fieldAlign_;
		this.kind = kind_;
		this.alg = alg_;
		this.gcdata = gcdata_;
		this.str = str_;
		this.ptrToThis = ptrToThis_;
	});
	typeAlg = $pkg.typeAlg = $newType(0, $kindStruct, "reflect.typeAlg", true, "reflect", false, function(hash_, equal_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.hash = $throwNilPointerError;
			this.equal = $throwNilPointerError;
			return;
		}
		this.hash = hash_;
		this.equal = equal_;
	});
	method = $pkg.method = $newType(0, $kindStruct, "reflect.method", true, "reflect", false, function(name_, mtyp_, ifn_, tfn_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.name = 0;
			this.mtyp = 0;
			this.ifn = 0;
			this.tfn = 0;
			return;
		}
		this.name = name_;
		this.mtyp = mtyp_;
		this.ifn = ifn_;
		this.tfn = tfn_;
	});
	ChanDir = $pkg.ChanDir = $newType(4, $kindInt, "reflect.ChanDir", true, "reflect", true, null);
	arrayType = $pkg.arrayType = $newType(0, $kindStruct, "reflect.arrayType", true, "reflect", false, function(rtype_, elem_, slice_, len_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.rtype = new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$3.nil, ptrType$4.nil, 0, 0);
			this.elem = ptrType$1.nil;
			this.slice = ptrType$1.nil;
			this.len = 0;
			return;
		}
		this.rtype = rtype_;
		this.elem = elem_;
		this.slice = slice_;
		this.len = len_;
	});
	chanType = $pkg.chanType = $newType(0, $kindStruct, "reflect.chanType", true, "reflect", false, function(rtype_, elem_, dir_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.rtype = new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$3.nil, ptrType$4.nil, 0, 0);
			this.elem = ptrType$1.nil;
			this.dir = 0;
			return;
		}
		this.rtype = rtype_;
		this.elem = elem_;
		this.dir = dir_;
	});
	imethod = $pkg.imethod = $newType(0, $kindStruct, "reflect.imethod", true, "reflect", false, function(name_, typ_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.name = 0;
			this.typ = 0;
			return;
		}
		this.name = name_;
		this.typ = typ_;
	});
	interfaceType = $pkg.interfaceType = $newType(0, $kindStruct, "reflect.interfaceType", true, "reflect", false, function(rtype_, pkgPath_, methods_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.rtype = new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$3.nil, ptrType$4.nil, 0, 0);
			this.pkgPath = new name.ptr(ptrType$4.nil);
			this.methods = sliceType$6.nil;
			return;
		}
		this.rtype = rtype_;
		this.pkgPath = pkgPath_;
		this.methods = methods_;
	});
	mapType = $pkg.mapType = $newType(0, $kindStruct, "reflect.mapType", true, "reflect", false, function(rtype_, key_, elem_, bucket_, hmap_, keysize_, indirectkey_, valuesize_, indirectvalue_, bucketsize_, reflexivekey_, needkeyupdate_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.rtype = new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$3.nil, ptrType$4.nil, 0, 0);
			this.key = ptrType$1.nil;
			this.elem = ptrType$1.nil;
			this.bucket = ptrType$1.nil;
			this.hmap = ptrType$1.nil;
			this.keysize = 0;
			this.indirectkey = 0;
			this.valuesize = 0;
			this.indirectvalue = 0;
			this.bucketsize = 0;
			this.reflexivekey = false;
			this.needkeyupdate = false;
			return;
		}
		this.rtype = rtype_;
		this.key = key_;
		this.elem = elem_;
		this.bucket = bucket_;
		this.hmap = hmap_;
		this.keysize = keysize_;
		this.indirectkey = indirectkey_;
		this.valuesize = valuesize_;
		this.indirectvalue = indirectvalue_;
		this.bucketsize = bucketsize_;
		this.reflexivekey = reflexivekey_;
		this.needkeyupdate = needkeyupdate_;
	});
	ptrType = $pkg.ptrType = $newType(0, $kindStruct, "reflect.ptrType", true, "reflect", false, function(rtype_, elem_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.rtype = new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$3.nil, ptrType$4.nil, 0, 0);
			this.elem = ptrType$1.nil;
			return;
		}
		this.rtype = rtype_;
		this.elem = elem_;
	});
	sliceType = $pkg.sliceType = $newType(0, $kindStruct, "reflect.sliceType", true, "reflect", false, function(rtype_, elem_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.rtype = new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$3.nil, ptrType$4.nil, 0, 0);
			this.elem = ptrType$1.nil;
			return;
		}
		this.rtype = rtype_;
		this.elem = elem_;
	});
	structField = $pkg.structField = $newType(0, $kindStruct, "reflect.structField", true, "reflect", false, function(name_, typ_, offsetAnon_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.name = new name.ptr(ptrType$4.nil);
			this.typ = ptrType$1.nil;
			this.offsetAnon = 0;
			return;
		}
		this.name = name_;
		this.typ = typ_;
		this.offsetAnon = offsetAnon_;
	});
	structType = $pkg.structType = $newType(0, $kindStruct, "reflect.structType", true, "reflect", false, function(rtype_, pkgPath_, fields_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.rtype = new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$3.nil, ptrType$4.nil, 0, 0);
			this.pkgPath = new name.ptr(ptrType$4.nil);
			this.fields = sliceType$7.nil;
			return;
		}
		this.rtype = rtype_;
		this.pkgPath = pkgPath_;
		this.fields = fields_;
	});
	Method = $pkg.Method = $newType(0, $kindStruct, "reflect.Method", true, "reflect", true, function(Name_, PkgPath_, Type_, Func_, Index_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Name = "";
			this.PkgPath = "";
			this.Type = $ifaceNil;
			this.Func = new Value.ptr(ptrType$1.nil, 0, 0);
			this.Index = 0;
			return;
		}
		this.Name = Name_;
		this.PkgPath = PkgPath_;
		this.Type = Type_;
		this.Func = Func_;
		this.Index = Index_;
	});
	nameOff = $pkg.nameOff = $newType(4, $kindInt32, "reflect.nameOff", true, "reflect", false, null);
	typeOff = $pkg.typeOff = $newType(4, $kindInt32, "reflect.typeOff", true, "reflect", false, null);
	textOff = $pkg.textOff = $newType(4, $kindInt32, "reflect.textOff", true, "reflect", false, null);
	StructField = $pkg.StructField = $newType(0, $kindStruct, "reflect.StructField", true, "reflect", true, function(Name_, PkgPath_, Type_, Tag_, Offset_, Index_, Anonymous_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Name = "";
			this.PkgPath = "";
			this.Type = $ifaceNil;
			this.Tag = "";
			this.Offset = 0;
			this.Index = sliceType$13.nil;
			this.Anonymous = false;
			return;
		}
		this.Name = Name_;
		this.PkgPath = PkgPath_;
		this.Type = Type_;
		this.Tag = Tag_;
		this.Offset = Offset_;
		this.Index = Index_;
		this.Anonymous = Anonymous_;
	});
	StructTag = $pkg.StructTag = $newType(8, $kindString, "reflect.StructTag", true, "reflect", true, null);
	fieldScan = $pkg.fieldScan = $newType(0, $kindStruct, "reflect.fieldScan", true, "reflect", false, function(typ_, index_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.typ = ptrType$9.nil;
			this.index = sliceType$13.nil;
			return;
		}
		this.typ = typ_;
		this.index = index_;
	});
	Value = $pkg.Value = $newType(0, $kindStruct, "reflect.Value", true, "reflect", true, function(typ_, ptr_, flag_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.typ = ptrType$1.nil;
			this.ptr = 0;
			this.flag = 0;
			return;
		}
		this.typ = typ_;
		this.ptr = ptr_;
		this.flag = flag_;
	});
	flag = $pkg.flag = $newType(4, $kindUintptr, "reflect.flag", true, "reflect", false, null);
	ValueError = $pkg.ValueError = $newType(0, $kindStruct, "reflect.ValueError", true, "reflect", true, function(Method_, Kind_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Method = "";
			this.Kind = 0;
			return;
		}
		this.Method = Method_;
		this.Kind = Kind_;
	});
	sliceType$1 = $sliceType(name);
	ptrType$1 = $ptrType(rtype);
	sliceType$2 = $sliceType(ptrType$1);
	sliceType$3 = $sliceType($emptyInterface);
	ptrType$2 = $ptrType(js.Object);
	funcType$1 = $funcType([sliceType$3], [ptrType$2], true);
	sliceType$4 = $sliceType($String);
	ptrType$3 = $ptrType(typeAlg);
	ptrType$4 = $ptrType($Uint8);
	sliceType$5 = $sliceType(method);
	sliceType$6 = $sliceType(imethod);
	sliceType$7 = $sliceType(structField);
	ptrType$5 = $ptrType(uncommonType);
	ptrType$6 = $ptrType(nameData);
	structType$3 = $structType("reflect", [{prop: "str", name: "str", anonymous: false, exported: false, typ: $String, tag: ""}]);
	sliceType$8 = $sliceType(ptrType$2);
	sliceType$9 = $sliceType(Value);
	sliceType$10 = $sliceType(Type);
	sliceType$11 = $sliceType(sliceType$8);
	ptrType$7 = $ptrType(interfaceType);
	ptrType$8 = $ptrType(imethod);
	sliceType$13 = $sliceType($Int);
	sliceType$14 = $sliceType(fieldScan);
	ptrType$9 = $ptrType(structType);
	sliceType$15 = $sliceType($Uint8);
	ptrType$15 = $ptrType($UnsafePointer);
	sliceType$17 = $sliceType($Int32);
	ptrType$16 = $ptrType(funcType);
	funcType$3 = $funcType([$String], [$Bool], false);
	funcType$4 = $funcType([$UnsafePointer, $Uintptr], [$Uintptr], false);
	funcType$5 = $funcType([$UnsafePointer, $UnsafePointer], [$Bool], false);
	ptrType$17 = $ptrType(structField);
	arrayType$12 = $arrayType($Uintptr, 2);
	ptrType$18 = $ptrType(ValueError);
	init = function() {
		var used, x, x$1, x$10, x$11, x$12, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; used = $f.used; x = $f.x; x$1 = $f.x$1; x$10 = $f.x$10; x$11 = $f.x$11; x$12 = $f.x$12; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; x$6 = $f.x$6; x$7 = $f.x$7; x$8 = $f.x$8; x$9 = $f.x$9; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		used = (function(i) {
			var i;
		});
		$r = used((x = new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$3.nil, ptrType$4.nil, 0, 0), new x.constructor.elem(x))); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = used((x$1 = new uncommonType.ptr(0, 0, 0, 0, 0, sliceType$5.nil), new x$1.constructor.elem(x$1))); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = used((x$2 = new method.ptr(0, 0, 0, 0), new x$2.constructor.elem(x$2))); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = used((x$3 = new arrayType.ptr(new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$3.nil, ptrType$4.nil, 0, 0), ptrType$1.nil, ptrType$1.nil, 0), new x$3.constructor.elem(x$3))); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = used((x$4 = new chanType.ptr(new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$3.nil, ptrType$4.nil, 0, 0), ptrType$1.nil, 0), new x$4.constructor.elem(x$4))); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = used((x$5 = new funcType.ptr(new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$3.nil, ptrType$4.nil, 0, 0), 0, 0, sliceType$2.nil, sliceType$2.nil), new x$5.constructor.elem(x$5))); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = used((x$6 = new interfaceType.ptr(new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$3.nil, ptrType$4.nil, 0, 0), new name.ptr(ptrType$4.nil), sliceType$6.nil), new x$6.constructor.elem(x$6))); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = used((x$7 = new mapType.ptr(new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$3.nil, ptrType$4.nil, 0, 0), ptrType$1.nil, ptrType$1.nil, ptrType$1.nil, ptrType$1.nil, 0, 0, 0, 0, 0, false, false), new x$7.constructor.elem(x$7))); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = used((x$8 = new ptrType.ptr(new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$3.nil, ptrType$4.nil, 0, 0), ptrType$1.nil), new x$8.constructor.elem(x$8))); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = used((x$9 = new sliceType.ptr(new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$3.nil, ptrType$4.nil, 0, 0), ptrType$1.nil), new x$9.constructor.elem(x$9))); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = used((x$10 = new structType.ptr(new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$3.nil, ptrType$4.nil, 0, 0), new name.ptr(ptrType$4.nil), sliceType$7.nil), new x$10.constructor.elem(x$10))); /* */ $s = 11; case 11: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = used((x$11 = new imethod.ptr(0, 0), new x$11.constructor.elem(x$11))); /* */ $s = 12; case 12: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = used((x$12 = new structField.ptr(new name.ptr(ptrType$4.nil), ptrType$1.nil, 0), new x$12.constructor.elem(x$12))); /* */ $s = 13; case 13: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		initialized = true;
		uint8Type = $assertType(TypeOf(new $Uint8(0)), ptrType$1);
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: init }; } $f.used = used; $f.x = x; $f.x$1 = x$1; $f.x$10 = x$10; $f.x$11 = x$11; $f.x$12 = x$12; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.x$6 = x$6; $f.x$7 = x$7; $f.x$8 = x$8; $f.x$9 = x$9; $f.$s = $s; $f.$r = $r; return $f;
	};
	jsType = function(typ) {
		var typ;
		return typ.jsType;
	};
	reflectType = function(typ) {
		var _1, _i, _i$1, _i$2, _i$3, _i$4, _key, _ref, _ref$1, _ref$2, _ref$3, _ref$4, dir, f, fields, i, i$1, i$2, i$3, i$4, imethods, in$1, m, m$1, methodSet, methods, offsetAnon, out, outCount, params, reflectFields, reflectMethods, results, rt, typ, ut;
		if (typ.reflectType === undefined) {
			rt = new rtype.ptr(((($parseInt(typ.size) >> 0) >>> 0)), 0, 0, 0, 0, 0, ((($parseInt(typ.kind) >> 0) << 24 >>> 24)), ptrType$3.nil, ptrType$4.nil, newNameOff($clone(newName(internalStr(typ.string), "", !!(typ.exported)), name)), 0);
			rt.jsType = typ;
			typ.reflectType = rt;
			methodSet = $methodSet(typ);
			if (!(($parseInt(methodSet.length) === 0)) || !!(typ.named)) {
				rt.tflag = (rt.tflag | (1)) >>> 0;
				if (!!(typ.named)) {
					rt.tflag = (rt.tflag | (4)) >>> 0;
				}
				reflectMethods = $makeSlice(sliceType$5, $parseInt(methodSet.length));
				_ref = reflectMethods;
				_i = 0;
				while (true) {
					if (!(_i < _ref.$length)) { break; }
					i = _i;
					m = methodSet[i];
					method.copy(((i < 0 || i >= reflectMethods.$length) ? ($throwRuntimeError("index out of range"), undefined) : reflectMethods.$array[reflectMethods.$offset + i]), new method.ptr(newNameOff($clone(newName(internalStr(m.name), "", internalStr(m.pkg) === ""), name)), newTypeOff(reflectType(m.typ)), 0, 0));
					_i++;
				}
				ut = new uncommonType.ptr(newNameOff($clone(newName(internalStr(typ.pkg), "", false), name)), (($parseInt(methodSet.length) << 16 >>> 16)), 0, 0, 0, reflectMethods);
				_key = rt; (uncommonTypeMap || $throwRuntimeError("assignment to entry in nil map"))[ptrType$1.keyFor(_key)] = { k: _key, v: ut };
				ut.jsType = typ;
			}
			_1 = rt.Kind();
			if (_1 === (17)) {
				setKindType(rt, new arrayType.ptr(new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$3.nil, ptrType$4.nil, 0, 0), reflectType(typ.elem), ptrType$1.nil, ((($parseInt(typ.len) >> 0) >>> 0))));
			} else if (_1 === (18)) {
				dir = 3;
				if (!!(typ.sendOnly)) {
					dir = 2;
				}
				if (!!(typ.recvOnly)) {
					dir = 1;
				}
				setKindType(rt, new chanType.ptr(new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$3.nil, ptrType$4.nil, 0, 0), reflectType(typ.elem), ((dir >>> 0))));
			} else if (_1 === (19)) {
				params = typ.params;
				in$1 = $makeSlice(sliceType$2, $parseInt(params.length));
				_ref$1 = in$1;
				_i$1 = 0;
				while (true) {
					if (!(_i$1 < _ref$1.$length)) { break; }
					i$1 = _i$1;
					((i$1 < 0 || i$1 >= in$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : in$1.$array[in$1.$offset + i$1] = reflectType(params[i$1]));
					_i$1++;
				}
				results = typ.results;
				out = $makeSlice(sliceType$2, $parseInt(results.length));
				_ref$2 = out;
				_i$2 = 0;
				while (true) {
					if (!(_i$2 < _ref$2.$length)) { break; }
					i$2 = _i$2;
					((i$2 < 0 || i$2 >= out.$length) ? ($throwRuntimeError("index out of range"), undefined) : out.$array[out.$offset + i$2] = reflectType(results[i$2]));
					_i$2++;
				}
				outCount = (($parseInt(results.length) << 16 >>> 16));
				if (!!(typ.variadic)) {
					outCount = (outCount | (32768)) >>> 0;
				}
				setKindType(rt, new funcType.ptr($clone(rt, rtype), (($parseInt(params.length) << 16 >>> 16)), outCount, in$1, out));
			} else if (_1 === (20)) {
				methods = typ.methods;
				imethods = $makeSlice(sliceType$6, $parseInt(methods.length));
				_ref$3 = imethods;
				_i$3 = 0;
				while (true) {
					if (!(_i$3 < _ref$3.$length)) { break; }
					i$3 = _i$3;
					m$1 = methods[i$3];
					imethod.copy(((i$3 < 0 || i$3 >= imethods.$length) ? ($throwRuntimeError("index out of range"), undefined) : imethods.$array[imethods.$offset + i$3]), new imethod.ptr(newNameOff($clone(newName(internalStr(m$1.name), "", internalStr(m$1.pkg) === ""), name)), newTypeOff(reflectType(m$1.typ))));
					_i$3++;
				}
				setKindType(rt, new interfaceType.ptr($clone(rt, rtype), $clone(newName(internalStr(typ.pkg), "", false), name), imethods));
			} else if (_1 === (21)) {
				setKindType(rt, new mapType.ptr(new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$3.nil, ptrType$4.nil, 0, 0), reflectType(typ.key), reflectType(typ.elem), ptrType$1.nil, ptrType$1.nil, 0, 0, 0, 0, 0, false, false));
			} else if (_1 === (22)) {
				setKindType(rt, new ptrType.ptr(new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$3.nil, ptrType$4.nil, 0, 0), reflectType(typ.elem)));
			} else if (_1 === (23)) {
				setKindType(rt, new sliceType.ptr(new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$3.nil, ptrType$4.nil, 0, 0), reflectType(typ.elem)));
			} else if (_1 === (25)) {
				fields = typ.fields;
				reflectFields = $makeSlice(sliceType$7, $parseInt(fields.length));
				_ref$4 = reflectFields;
				_i$4 = 0;
				while (true) {
					if (!(_i$4 < _ref$4.$length)) { break; }
					i$4 = _i$4;
					f = fields[i$4];
					offsetAnon = ((i$4 >>> 0)) << 1 >>> 0;
					if (!!(f.anonymous)) {
						offsetAnon = (offsetAnon | (1)) >>> 0;
					}
					structField.copy(((i$4 < 0 || i$4 >= reflectFields.$length) ? ($throwRuntimeError("index out of range"), undefined) : reflectFields.$array[reflectFields.$offset + i$4]), new structField.ptr($clone(newName(internalStr(f.name), internalStr(f.tag), !!(f.exported)), name), reflectType(f.typ), offsetAnon));
					_i$4++;
				}
				setKindType(rt, new structType.ptr($clone(rt, rtype), $clone(newName(internalStr(typ.pkgPath), "", false), name), reflectFields));
			}
		}
		return ((typ.reflectType));
	};
	setKindType = function(rt, kindType) {
		var kindType, rt;
		rt.kindType = kindType;
		kindType.rtype = rt;
	};
	uncommonType.ptr.prototype.methods = function() {
		var t;
		t = this;
		return t._methods;
	};
	uncommonType.prototype.methods = function() { return this.$val.methods(); };
	rtype.ptr.prototype.uncommon = function() {
		var _entry, t;
		t = this;
		return (_entry = uncommonTypeMap[ptrType$1.keyFor(t)], _entry !== undefined ? _entry.v : ptrType$5.nil);
	};
	rtype.prototype.uncommon = function() { return this.$val.uncommon(); };
	funcType.ptr.prototype.in$ = function() {
		var t;
		t = this;
		return t._in;
	};
	funcType.prototype.in$ = function() { return this.$val.in$(); };
	funcType.ptr.prototype.out = function() {
		var t;
		t = this;
		return t._out;
	};
	funcType.prototype.out = function() { return this.$val.out(); };
	name.ptr.prototype.name = function() {
		var _entry, n, s;
		s = "";
		n = this;
		s = (_entry = nameMap[ptrType$4.keyFor(n.bytes)], _entry !== undefined ? _entry.v : ptrType$6.nil).name;
		return s;
	};
	name.prototype.name = function() { return this.$val.name(); };
	name.ptr.prototype.tag = function() {
		var _entry, n, s;
		s = "";
		n = this;
		s = (_entry = nameMap[ptrType$4.keyFor(n.bytes)], _entry !== undefined ? _entry.v : ptrType$6.nil).tag;
		return s;
	};
	name.prototype.tag = function() { return this.$val.tag(); };
	name.ptr.prototype.pkgPath = function() {
		var n;
		n = this;
		return "";
	};
	name.prototype.pkgPath = function() { return this.$val.pkgPath(); };
	name.ptr.prototype.isExported = function() {
		var _entry, n;
		n = this;
		return (_entry = nameMap[ptrType$4.keyFor(n.bytes)], _entry !== undefined ? _entry.v : ptrType$6.nil).exported;
	};
	name.prototype.isExported = function() { return this.$val.isExported(); };
	newName = function(n, tag, exported) {
		var _key, b, exported, n, tag;
		b = $newDataPointer(0, ptrType$4);
		_key = b; (nameMap || $throwRuntimeError("assignment to entry in nil map"))[ptrType$4.keyFor(_key)] = { k: _key, v: new nameData.ptr(n, tag, exported) };
		return new name.ptr(b);
	};
	rtype.ptr.prototype.nameOff = function(off) {
		var off, t, x;
		t = this;
		return (x = ((off >> 0)), ((x < 0 || x >= nameOffList.$length) ? ($throwRuntimeError("index out of range"), undefined) : nameOffList.$array[nameOffList.$offset + x]));
	};
	rtype.prototype.nameOff = function(off) { return this.$val.nameOff(off); };
	newNameOff = function(n) {
		var i, n;
		i = nameOffList.$length;
		nameOffList = $append(nameOffList, n);
		return ((i >> 0));
	};
	rtype.ptr.prototype.typeOff = function(off) {
		var off, t, x;
		t = this;
		return (x = ((off >> 0)), ((x < 0 || x >= typeOffList.$length) ? ($throwRuntimeError("index out of range"), undefined) : typeOffList.$array[typeOffList.$offset + x]));
	};
	rtype.prototype.typeOff = function(off) { return this.$val.typeOff(off); };
	newTypeOff = function(t) {
		var i, t;
		i = typeOffList.$length;
		typeOffList = $append(typeOffList, t);
		return ((i >> 0));
	};
	internalStr = function(strObj) {
		var c, strObj;
		c = new structType$3.ptr("");
		c.str = strObj;
		return c.str;
	};
	isWrapped = function(typ) {
		var typ;
		return !!(jsType(typ).wrapped);
	};
	copyStruct = function(dst, src, typ) {
		var dst, fields, i, prop, src, typ;
		fields = jsType(typ).fields;
		i = 0;
		while (true) {
			if (!(i < $parseInt(fields.length))) { break; }
			prop = $internalize(fields[i].prop, $String);
			dst[$externalize(prop, $String)] = src[$externalize(prop, $String)];
			i = i + (1) >> 0;
		}
	};
	makeValue = function(t, v, fl) {
		var _r, _r$1, _r$2, _r$3, _r$4, _r$5, _v, _v$1, fl, rt, t, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _v = $f._v; _v$1 = $f._v$1; fl = $f.fl; rt = $f.rt; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = t.common(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		rt = _r;
		_r$1 = t.Kind(); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		if (_r$1 === 17) { _v$1 = true; $s = 5; continue s; }
		_r$2 = t.Kind(); /* */ $s = 7; case 7: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_v$1 = _r$2 === 25; case 5:
		if (_v$1) { _v = true; $s = 4; continue s; }
		_r$3 = t.Kind(); /* */ $s = 8; case 8: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_v = _r$3 === 22; case 4:
		/* */ if (_v) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (_v) { */ case 2:
			_r$4 = t.Kind(); /* */ $s = 9; case 9: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			$s = -1; return new Value.ptr(rt, (v), (fl | ((_r$4 >>> 0))) >>> 0);
		/* } */ case 3:
		_r$5 = t.Kind(); /* */ $s = 10; case 10: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		$s = -1; return new Value.ptr(rt, ($newDataPointer(v, jsType(rt.ptrTo()))), (((fl | ((_r$5 >>> 0))) >>> 0) | 128) >>> 0);
		/* */ } return; } if ($f === undefined) { $f = { $blk: makeValue }; } $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._v = _v; $f._v$1 = _v$1; $f.fl = fl; $f.rt = rt; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	MakeSlice = function(typ, len, cap) {
		var _r, _r$1, cap, len, typ, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; cap = $f.cap; len = $f.len; typ = $f.typ; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		typ = [typ];
		_r = typ[0].Kind(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ if (!((_r === 23))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!((_r === 23))) { */ case 1:
			$panic(new $String("reflect.MakeSlice of non-slice type"));
		/* } */ case 2:
		if (len < 0) {
			$panic(new $String("reflect.MakeSlice: negative len"));
		}
		if (cap < 0) {
			$panic(new $String("reflect.MakeSlice: negative cap"));
		}
		if (len > cap) {
			$panic(new $String("reflect.MakeSlice: len > cap"));
		}
		_r$1 = makeValue(typ[0], $makeSlice(jsType(typ[0]), len, cap, (function(typ) { return function $b() {
			var _r$1, _r$2, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$1 = $f._r$1; _r$2 = $f._r$2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			_r$1 = typ[0].Elem(); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_r$2 = jsType(_r$1); /* */ $s = 2; case 2: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			$s = -1; return _r$2.zero();
			/* */ } return; } if ($f === undefined) { $f = { $blk: $b }; } $f._r$1 = _r$1; $f._r$2 = _r$2; $f.$s = $s; $f.$r = $r; return $f;
		}; })(typ)), 0); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$s = -1; return _r$1;
		/* */ } return; } if ($f === undefined) { $f = { $blk: MakeSlice }; } $f._r = _r; $f._r$1 = _r$1; $f.cap = cap; $f.len = len; $f.typ = typ; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.MakeSlice = MakeSlice;
	TypeOf = function(i) {
		var i;
		if (!initialized) {
			return new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$3.nil, ptrType$4.nil, 0, 0);
		}
		if ($interfaceIsEqual(i, $ifaceNil)) {
			return $ifaceNil;
		}
		return reflectType(i.constructor);
	};
	$pkg.TypeOf = TypeOf;
	ValueOf = function(i) {
		var _r, i, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; i = $f.i; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		if ($interfaceIsEqual(i, $ifaceNil)) {
			$s = -1; return new Value.ptr(ptrType$1.nil, 0, 0);
		}
		_r = makeValue(reflectType(i.constructor), i.$val, 0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: ValueOf }; } $f._r = _r; $f.i = i; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.ValueOf = ValueOf;
	FuncOf = function(in$1, out, variadic) {
		var _i, _i$1, _r, _ref, _ref$1, _v, _v$1, i, i$1, in$1, jsIn, jsOut, out, v, v$1, variadic, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _i$1 = $f._i$1; _r = $f._r; _ref = $f._ref; _ref$1 = $f._ref$1; _v = $f._v; _v$1 = $f._v$1; i = $f.i; i$1 = $f.i$1; in$1 = $f.in$1; jsIn = $f.jsIn; jsOut = $f.jsOut; out = $f.out; v = $f.v; v$1 = $f.v$1; variadic = $f.variadic; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		if (!(variadic)) { _v = false; $s = 3; continue s; }
		if (in$1.$length === 0) { _v$1 = true; $s = 4; continue s; }
		_r = (x = in$1.$length - 1 >> 0, ((x < 0 || x >= in$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : in$1.$array[in$1.$offset + x])).Kind(); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_v$1 = !((_r === 23)); case 4:
		_v = _v$1; case 3:
		/* */ if (_v) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (_v) { */ case 1:
			$panic(new $String("reflect.FuncOf: last arg of variadic func must be slice"));
		/* } */ case 2:
		jsIn = $makeSlice(sliceType$8, in$1.$length);
		_ref = in$1;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			v = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			((i < 0 || i >= jsIn.$length) ? ($throwRuntimeError("index out of range"), undefined) : jsIn.$array[jsIn.$offset + i] = jsType(v));
			_i++;
		}
		jsOut = $makeSlice(sliceType$8, out.$length);
		_ref$1 = out;
		_i$1 = 0;
		while (true) {
			if (!(_i$1 < _ref$1.$length)) { break; }
			i$1 = _i$1;
			v$1 = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$1.$array[_ref$1.$offset + _i$1]);
			((i$1 < 0 || i$1 >= jsOut.$length) ? ($throwRuntimeError("index out of range"), undefined) : jsOut.$array[jsOut.$offset + i$1] = jsType(v$1));
			_i$1++;
		}
		$s = -1; return reflectType($funcType($externalize(jsIn, sliceType$8), $externalize(jsOut, sliceType$8), $externalize(variadic, $Bool)));
		/* */ } return; } if ($f === undefined) { $f = { $blk: FuncOf }; } $f._i = _i; $f._i$1 = _i$1; $f._r = _r; $f._ref = _ref; $f._ref$1 = _ref$1; $f._v = _v; $f._v$1 = _v$1; $f.i = i; $f.i$1 = i$1; $f.in$1 = in$1; $f.jsIn = jsIn; $f.jsOut = jsOut; $f.out = out; $f.v = v; $f.v$1 = v$1; $f.variadic = variadic; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.FuncOf = FuncOf;
	rtype.ptr.prototype.ptrTo = function() {
		var t;
		t = this;
		return reflectType($ptrType(jsType(t)));
	};
	rtype.prototype.ptrTo = function() { return this.$val.ptrTo(); };
	SliceOf = function(t) {
		var t;
		return reflectType($sliceType(jsType(t)));
	};
	$pkg.SliceOf = SliceOf;
	Zero = function(typ) {
		var _r, typ, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; typ = $f.typ; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = makeValue(typ, jsType(typ).zero(), 0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Zero }; } $f._r = _r; $f.typ = typ; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Zero = Zero;
	unsafe_New = function(typ) {
		var _1, typ;
		_1 = typ.Kind();
		if (_1 === (25)) {
			return (new (jsType(typ).ptr)());
		} else if (_1 === (17)) {
			return (jsType(typ).zero());
		} else {
			return ($newDataPointer(jsType(typ).zero(), jsType(typ.ptrTo())));
		}
	};
	makeInt = function(f, bits, t) {
		var _1, _r, bits, f, ptr, t, typ, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _r = $f._r; bits = $f.bits; f = $f.f; ptr = $f.ptr; t = $f.t; typ = $f.typ; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = t.common(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		typ = _r;
		ptr = unsafe_New(typ);
		_1 = typ.Kind();
		if (_1 === (3)) {
			(ptr).$set(((bits.$low << 24 >> 24)));
		} else if (_1 === (4)) {
			(ptr).$set(((bits.$low << 16 >> 16)));
		} else if ((_1 === (2)) || (_1 === (5))) {
			(ptr).$set(((bits.$low >> 0)));
		} else if (_1 === (6)) {
			(ptr).$set((new $Int64(bits.$high, bits.$low)));
		} else if (_1 === (8)) {
			(ptr).$set(((bits.$low << 24 >>> 24)));
		} else if (_1 === (9)) {
			(ptr).$set(((bits.$low << 16 >>> 16)));
		} else if ((_1 === (7)) || (_1 === (10)) || (_1 === (12))) {
			(ptr).$set(((bits.$low >>> 0)));
		} else if (_1 === (11)) {
			(ptr).$set((bits));
		}
		$s = -1; return new Value.ptr(typ, ptr, (((f | 128) >>> 0) | ((typ.Kind() >>> 0))) >>> 0);
		/* */ } return; } if ($f === undefined) { $f = { $blk: makeInt }; } $f._1 = _1; $f._r = _r; $f.bits = bits; $f.f = f; $f.ptr = ptr; $f.t = t; $f.typ = typ; $f.$s = $s; $f.$r = $r; return $f;
	};
	typedmemmove = function(t, dst, src) {
		var dst, src, t;
		dst.$set(src.$get());
	};
	makemap = function(t, cap) {
		var cap, m, t;
		m = 0;
		m = (new ($global.Object)());
		return m;
	};
	keyFor = function(t, key) {
		var k, key, kv, t;
		kv = key;
		if (!(kv.$get === undefined)) {
			kv = kv.$get();
		}
		k = $internalize(jsType(t.Key()).keyFor(kv), $String);
		return [kv, k];
	};
	mapaccess = function(t, m, key) {
		var _tuple, entry, k, key, m, t;
		_tuple = keyFor(t, key);
		k = _tuple[1];
		entry = m[$externalize(k, $String)];
		if (entry === undefined) {
			return 0;
		}
		return ($newDataPointer(entry.v, jsType(PtrTo(t.Elem()))));
	};
	mapassign = function(t, m, key, val) {
		var _r, _tuple, entry, et, jsVal, k, key, kv, m, newVal, t, val, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; entry = $f.entry; et = $f.et; jsVal = $f.jsVal; k = $f.k; key = $f.key; kv = $f.kv; m = $f.m; newVal = $f.newVal; t = $f.t; val = $f.val; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_tuple = keyFor(t, key);
		kv = _tuple[0];
		k = _tuple[1];
		jsVal = val.$get();
		et = t.Elem();
		_r = et.Kind(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ if (_r === 25) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (_r === 25) { */ case 1:
			newVal = jsType(et).zero();
			copyStruct(newVal, jsVal, et);
			jsVal = newVal;
		/* } */ case 2:
		entry = new ($global.Object)();
		entry.k = kv;
		entry.v = jsVal;
		m[$externalize(k, $String)] = entry;
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: mapassign }; } $f._r = _r; $f._tuple = _tuple; $f.entry = entry; $f.et = et; $f.jsVal = jsVal; $f.k = k; $f.key = key; $f.kv = kv; $f.m = m; $f.newVal = newVal; $f.t = t; $f.val = val; $f.$s = $s; $f.$r = $r; return $f;
	};
	mapdelete = function(t, m, key) {
		var _tuple, k, key, m, t;
		_tuple = keyFor(t, key);
		k = _tuple[1];
		delete m[$externalize(k, $String)];
	};
	mapiterinit = function(t, m) {
		var m, t;
		return ((new mapIter.ptr(t, m, $keys(m), 0)));
	};
	mapiterkey = function(it) {
		var _r, _r$1, _r$2, it, iter, k, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; it = $f.it; iter = $f.iter; k = $f.k; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		iter = ((it));
		k = iter.keys[iter.i];
		_r = iter.t.Key(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = PtrTo(_r); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$2 = jsType(_r$1); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		$s = -1; return ($newDataPointer(iter.m[$externalize($internalize(k, $String), $String)].k, _r$2));
		/* */ } return; } if ($f === undefined) { $f = { $blk: mapiterkey }; } $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.it = it; $f.iter = iter; $f.k = k; $f.$s = $s; $f.$r = $r; return $f;
	};
	mapiternext = function(it) {
		var it, iter;
		iter = ((it));
		iter.i = iter.i + (1) >> 0;
	};
	maplen = function(m) {
		var m;
		return $parseInt($keys(m).length);
	};
	cvtDirect = function(v, typ) {
		var _1, _arg, _arg$1, _arg$2, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, k, slice, srcVal, typ, v, val, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; k = $f.k; slice = $f.slice; srcVal = $f.srcVal; typ = $f.typ; v = $f.v; val = $f.val; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		srcVal = $clone(v, Value).object();
		/* */ if (srcVal === jsType(v.typ).nil) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (srcVal === jsType(v.typ).nil) { */ case 1:
			_r = makeValue(typ, jsType(typ).nil, v.flag); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$s = -1; return _r;
		/* } */ case 2:
		val = null;
			_r$1 = typ.Kind(); /* */ $s = 5; case 5: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			k = _r$1;
			_1 = k;
			/* */ if (_1 === (23)) { $s = 6; continue; }
			/* */ if (_1 === (22)) { $s = 7; continue; }
			/* */ if (_1 === (25)) { $s = 8; continue; }
			/* */ if ((_1 === (17)) || (_1 === (1)) || (_1 === (18)) || (_1 === (19)) || (_1 === (20)) || (_1 === (21)) || (_1 === (24))) { $s = 9; continue; }
			/* */ $s = 10; continue;
			/* if (_1 === (23)) { */ case 6:
				slice = new (jsType(typ))(srcVal.$array);
				slice.$offset = srcVal.$offset;
				slice.$length = srcVal.$length;
				slice.$capacity = srcVal.$capacity;
				val = $newDataPointer(slice, jsType(PtrTo(typ)));
				$s = 11; continue;
			/* } else if (_1 === (22)) { */ case 7:
				_r$2 = typ.Elem(); /* */ $s = 14; case 14: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				_r$3 = _r$2.Kind(); /* */ $s = 15; case 15: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				/* */ if (_r$3 === 25) { $s = 12; continue; }
				/* */ $s = 13; continue;
				/* if (_r$3 === 25) { */ case 12:
					_r$4 = typ.Elem(); /* */ $s = 18; case 18: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
					/* */ if ($interfaceIsEqual(_r$4, v.typ.Elem())) { $s = 16; continue; }
					/* */ $s = 17; continue;
					/* if ($interfaceIsEqual(_r$4, v.typ.Elem())) { */ case 16:
						val = srcVal;
						/* break; */ $s = 4; continue;
					/* } */ case 17:
					val = new (jsType(typ))();
					_arg = val;
					_arg$1 = srcVal;
					_r$5 = typ.Elem(); /* */ $s = 19; case 19: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
					_arg$2 = _r$5;
					$r = copyStruct(_arg, _arg$1, _arg$2); /* */ $s = 20; case 20: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					/* break; */ $s = 4; continue;
				/* } */ case 13:
				val = new (jsType(typ))(srcVal.$get, srcVal.$set);
				$s = 11; continue;
			/* } else if (_1 === (25)) { */ case 8:
				val = new (jsType(typ).ptr)();
				copyStruct(val, srcVal, typ);
				$s = 11; continue;
			/* } else if ((_1 === (17)) || (_1 === (1)) || (_1 === (18)) || (_1 === (19)) || (_1 === (20)) || (_1 === (21)) || (_1 === (24))) { */ case 9:
				val = v.ptr;
				$s = 11; continue;
			/* } else { */ case 10:
				$panic(new ValueError.ptr("reflect.Convert", k));
			/* } */ case 11:
		case 4:
		_r$6 = typ.common(); /* */ $s = 21; case 21: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
		_r$7 = typ.Kind(); /* */ $s = 22; case 22: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
		$s = -1; return new Value.ptr(_r$6, (val), (((new flag(v.flag).ro() | ((v.flag & 128) >>> 0)) >>> 0) | ((_r$7 >>> 0))) >>> 0);
		/* */ } return; } if ($f === undefined) { $f = { $blk: cvtDirect }; } $f._1 = _1; $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f.k = k; $f.slice = slice; $f.srcVal = srcVal; $f.typ = typ; $f.v = v; $f.val = val; $f.$s = $s; $f.$r = $r; return $f;
	};
	methodReceiver = function(op, v, i) {
		var _$38, _r, fn, i, m, m$1, ms, op, prop, rcvr, t, tt, v, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _$38 = $f._$38; _r = $f._r; fn = $f.fn; i = $f.i; m = $f.m; m$1 = $f.m$1; ms = $f.ms; op = $f.op; prop = $f.prop; rcvr = $f.rcvr; t = $f.t; tt = $f.tt; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_$38 = ptrType$1.nil;
		t = ptrType$1.nil;
		fn = 0;
		prop = "";
		/* */ if (v.typ.Kind() === 20) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (v.typ.Kind() === 20) { */ case 1:
			tt = (v.typ.kindType);
			if (i < 0 || i >= tt.methods.$length) {
				$panic(new $String("reflect: internal error: invalid method index"));
			}
			m = (x = tt.methods, ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i]));
			if (!$clone(tt.rtype.nameOff(m.name), name).isExported()) {
				$panic(new $String("reflect: " + op + " of unexported method"));
			}
			t = tt.rtype.typeOff(m.typ);
			prop = $clone(tt.rtype.nameOff(m.name), name).name();
			$s = 3; continue;
		/* } else { */ case 2:
			_r = v.typ.exportedMethods(); /* */ $s = 4; case 4: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			ms = _r;
			if (((i >>> 0)) >= ((ms.$length >>> 0))) {
				$panic(new $String("reflect: internal error: invalid method index"));
			}
			m$1 = $clone(((i < 0 || i >= ms.$length) ? ($throwRuntimeError("index out of range"), undefined) : ms.$array[ms.$offset + i]), method);
			if (!$clone(v.typ.nameOff(m$1.name), name).isExported()) {
				$panic(new $String("reflect: " + op + " of unexported method"));
			}
			t = v.typ.typeOff(m$1.mtyp);
			prop = $internalize($methodSet(jsType(v.typ))[i].prop, $String);
		/* } */ case 3:
		rcvr = $clone(v, Value).object();
		if (isWrapped(v.typ)) {
			rcvr = new (jsType(v.typ))(rcvr);
		}
		fn = (rcvr[$externalize(prop, $String)]);
		$s = -1; return [_$38, t, fn];
		/* */ } return; } if ($f === undefined) { $f = { $blk: methodReceiver }; } $f._$38 = _$38; $f._r = _r; $f.fn = fn; $f.i = i; $f.m = m; $f.m$1 = m$1; $f.ms = ms; $f.op = op; $f.prop = prop; $f.rcvr = rcvr; $f.t = t; $f.tt = tt; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	valueInterface = function(v, safe) {
		var _r, safe, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; safe = $f.safe; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		if (v.flag === 0) {
			$panic(new ValueError.ptr("reflect.Value.Interface", 0));
		}
		if (safe && !((((v.flag & 96) >>> 0) === 0))) {
			$panic(new $String("reflect.Value.Interface: cannot return value obtained from unexported field or method"));
		}
		/* */ if (!((((v.flag & 512) >>> 0) === 0))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!((((v.flag & 512) >>> 0) === 0))) { */ case 1:
			_r = makeMethodValue("Interface", $clone(v, Value)); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			v = _r;
		/* } */ case 2:
		if (isWrapped(v.typ)) {
			$s = -1; return ((new (jsType(v.typ))($clone(v, Value).object())));
		}
		$s = -1; return (($clone(v, Value).object()));
		/* */ } return; } if ($f === undefined) { $f = { $blk: valueInterface }; } $f._r = _r; $f.safe = safe; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	ifaceE2I = function(t, src, dst) {
		var dst, src, t;
		dst.$set(src);
	};
	methodName = function() {
		return "?FIXME?";
	};
	makeMethodValue = function(op, v) {
		var _r, _r$1, _r$2, _tuple, fn, fv, op, rcvr, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _tuple = $f._tuple; fn = $f.fn; fv = $f.fv; op = $f.op; rcvr = $f.rcvr; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		fn = [fn];
		rcvr = [rcvr];
		if (((v.flag & 512) >>> 0) === 0) {
			$panic(new $String("reflect: internal error: invalid use of makePartialFunc"));
		}
		_r = methodReceiver(op, $clone(v, Value), ((v.flag >> 0)) >> 10 >> 0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		fn[0] = _tuple[2];
		rcvr[0] = $clone(v, Value).object();
		if (isWrapped(v.typ)) {
			rcvr[0] = new (jsType(v.typ))(rcvr[0]);
		}
		fv = js.MakeFunc((function(fn, rcvr) { return function(this$1, arguments$1) {
			var arguments$1, this$1;
			return new $jsObjectPtr(fn[0].apply(rcvr[0], $externalize(arguments$1, sliceType$8)));
		}; })(fn, rcvr));
		_r$1 = $clone(v, Value).Type(); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$2 = _r$1.common(); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		$s = -1; return new Value.ptr(_r$2, (fv), (new flag(v.flag).ro() | 19) >>> 0);
		/* */ } return; } if ($f === undefined) { $f = { $blk: makeMethodValue }; } $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._tuple = _tuple; $f.fn = fn; $f.fv = fv; $f.op = op; $f.rcvr = rcvr; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	rtype.ptr.prototype.pointers = function() {
		var _1, t;
		t = this;
		_1 = t.Kind();
		if ((_1 === (22)) || (_1 === (21)) || (_1 === (18)) || (_1 === (19)) || (_1 === (25)) || (_1 === (17))) {
			return true;
		} else {
			return false;
		}
	};
	rtype.prototype.pointers = function() { return this.$val.pointers(); };
	rtype.ptr.prototype.Comparable = function() {
		var _1, _r, _r$1, i, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _r = $f._r; _r$1 = $f._r$1; i = $f.i; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
			_1 = t.Kind();
			/* */ if ((_1 === (19)) || (_1 === (23)) || (_1 === (21))) { $s = 2; continue; }
			/* */ if (_1 === (17)) { $s = 3; continue; }
			/* */ if (_1 === (25)) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if ((_1 === (19)) || (_1 === (23)) || (_1 === (21))) { */ case 2:
				$s = -1; return false;
			/* } else if (_1 === (17)) { */ case 3:
				_r = t.Elem().Comparable(); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				$s = -1; return _r;
			/* } else if (_1 === (25)) { */ case 4:
				i = 0;
				/* while (true) { */ case 7:
					/* if (!(i < t.NumField())) { break; } */ if(!(i < t.NumField())) { $s = 8; continue; }
					_r$1 = t.Field(i).Type.Comparable(); /* */ $s = 11; case 11: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
					/* */ if (!_r$1) { $s = 9; continue; }
					/* */ $s = 10; continue;
					/* if (!_r$1) { */ case 9:
						$s = -1; return false;
					/* } */ case 10:
					i = i + (1) >> 0;
				/* } */ $s = 7; continue; case 8:
			/* } */ case 5:
		case 1:
		$s = -1; return true;
		/* */ } return; } if ($f === undefined) { $f = { $blk: rtype.ptr.prototype.Comparable }; } $f._1 = _1; $f._r = _r; $f._r$1 = _r$1; $f.i = i; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	rtype.prototype.Comparable = function() { return this.$val.Comparable(); };
	rtype.ptr.prototype.Method = function(i) {
		var _i, _i$1, _r, _r$1, _ref, _ref$1, arg, fl, fn, ft, i, in$1, m, methods, mt, mtyp, out, p, pname, prop, ret, t, tt, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _i$1 = $f._i$1; _r = $f._r; _r$1 = $f._r$1; _ref = $f._ref; _ref$1 = $f._ref$1; arg = $f.arg; fl = $f.fl; fn = $f.fn; ft = $f.ft; i = $f.i; in$1 = $f.in$1; m = $f.m; methods = $f.methods; mt = $f.mt; mtyp = $f.mtyp; out = $f.out; p = $f.p; pname = $f.pname; prop = $f.prop; ret = $f.ret; t = $f.t; tt = $f.tt; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		prop = [prop];
		m = new Method.ptr("", "", $ifaceNil, new Value.ptr(ptrType$1.nil, 0, 0), 0);
		t = this;
		if (t.Kind() === 20) {
			tt = (t.kindType);
			Method.copy(m, tt.Method(i));
			$s = -1; return m;
		}
		_r = t.exportedMethods(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		methods = _r;
		if (i < 0 || i >= methods.$length) {
			$panic(new $String("reflect: Method index out of range"));
		}
		p = $clone(((i < 0 || i >= methods.$length) ? ($throwRuntimeError("index out of range"), undefined) : methods.$array[methods.$offset + i]), method);
		pname = $clone(t.nameOff(p.name), name);
		m.Name = $clone(pname, name).name();
		fl = 19;
		mtyp = t.typeOff(p.mtyp);
		ft = (mtyp.kindType);
		in$1 = $makeSlice(sliceType$10, 0, (1 + ft.in$().$length >> 0));
		in$1 = $append(in$1, t);
		_ref = ft.in$();
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			arg = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			in$1 = $append(in$1, arg);
			_i++;
		}
		out = $makeSlice(sliceType$10, 0, ft.out().$length);
		_ref$1 = ft.out();
		_i$1 = 0;
		while (true) {
			if (!(_i$1 < _ref$1.$length)) { break; }
			ret = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$1.$array[_ref$1.$offset + _i$1]);
			out = $append(out, ret);
			_i$1++;
		}
		_r$1 = FuncOf(in$1, out, ft.rtype.IsVariadic()); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		mt = _r$1;
		m.Type = mt;
		prop[0] = $internalize($methodSet(t.jsType)[i].prop, $String);
		fn = js.MakeFunc((function(prop) { return function(this$1, arguments$1) {
			var arguments$1, rcvr, this$1;
			rcvr = (0 >= arguments$1.$length ? ($throwRuntimeError("index out of range"), undefined) : arguments$1.$array[arguments$1.$offset + 0]);
			return new $jsObjectPtr(rcvr[$externalize(prop[0], $String)].apply(rcvr, $externalize($subslice(arguments$1, 1), sliceType$8)));
		}; })(prop));
		m.Func = new Value.ptr($assertType(mt, ptrType$1), (fn), fl);
		m.Index = i;
		Method.copy(m, m);
		$s = -1; return m;
		/* */ } return; } if ($f === undefined) { $f = { $blk: rtype.ptr.prototype.Method }; } $f._i = _i; $f._i$1 = _i$1; $f._r = _r; $f._r$1 = _r$1; $f._ref = _ref; $f._ref$1 = _ref$1; $f.arg = arg; $f.fl = fl; $f.fn = fn; $f.ft = ft; $f.i = i; $f.in$1 = in$1; $f.m = m; $f.methods = methods; $f.mt = mt; $f.mtyp = mtyp; $f.out = out; $f.p = p; $f.pname = pname; $f.prop = prop; $f.ret = ret; $f.t = t; $f.tt = tt; $f.$s = $s; $f.$r = $r; return $f;
	};
	rtype.prototype.Method = function(i) { return this.$val.Method(i); };
	Value.ptr.prototype.object = function() {
		var _1, newVal, v, val;
		v = this;
		if ((v.typ.Kind() === 17) || (v.typ.Kind() === 25)) {
			return v.ptr;
		}
		if (!((((v.flag & 128) >>> 0) === 0))) {
			val = v.ptr.$get();
			if (!(val === $ifaceNil) && !(val.constructor === jsType(v.typ))) {
				switch (0) { default:
					_1 = v.typ.Kind();
					if ((_1 === (11)) || (_1 === (6))) {
						val = new (jsType(v.typ))(val.$high, val.$low);
					} else if ((_1 === (15)) || (_1 === (16))) {
						val = new (jsType(v.typ))(val.$real, val.$imag);
					} else if (_1 === (23)) {
						if (val === val.constructor.nil) {
							val = jsType(v.typ).nil;
							break;
						}
						newVal = new (jsType(v.typ))(val.$array);
						newVal.$offset = val.$offset;
						newVal.$length = val.$length;
						newVal.$capacity = val.$capacity;
						val = newVal;
					}
				}
			}
			return val;
		}
		return v.ptr;
	};
	Value.prototype.object = function() { return this.$val.object(); };
	Value.ptr.prototype.assignTo = function(context, dst, target) {
		var _r, _r$1, _r$2, _r$3, context, dst, fl, target, v, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; context = $f.context; dst = $f.dst; fl = $f.fl; target = $f.target; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		/* */ if (!((((v.flag & 512) >>> 0) === 0))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!((((v.flag & 512) >>> 0) === 0))) { */ case 1:
			_r = makeMethodValue(context, $clone(v, Value)); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			v = _r;
		/* } */ case 2:
			_r$1 = directlyAssignable(dst, v.typ); /* */ $s = 8; case 8: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			/* */ if (_r$1) { $s = 5; continue; }
			/* */ if (implements$1(dst, v.typ)) { $s = 6; continue; }
			/* */ $s = 7; continue;
			/* if (_r$1) { */ case 5:
				fl = (((v.flag & 384) >>> 0) | new flag(v.flag).ro()) >>> 0;
				fl = (fl | (((dst.Kind() >>> 0)))) >>> 0;
				$s = -1; return new Value.ptr(dst, v.ptr, fl);
			/* } else if (implements$1(dst, v.typ)) { */ case 6:
				if (target === 0) {
					target = unsafe_New(dst);
				}
				_r$2 = valueInterface($clone(v, Value), false); /* */ $s = 9; case 9: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				x = _r$2;
				_r$3 = dst.NumMethod(); /* */ $s = 13; case 13: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				/* */ if (_r$3 === 0) { $s = 10; continue; }
				/* */ $s = 11; continue;
				/* if (_r$3 === 0) { */ case 10:
					(target).$set(x);
					$s = 12; continue;
				/* } else { */ case 11:
					ifaceE2I(dst, x, target);
				/* } */ case 12:
				$s = -1; return new Value.ptr(dst, target, 148);
			/* } */ case 7:
		case 4:
		$panic(new $String(context + ": value of type " + v.typ.String() + " is not assignable to type " + dst.String()));
		$s = -1; return new Value.ptr(ptrType$1.nil, 0, 0);
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.assignTo }; } $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f.context = context; $f.dst = dst; $f.fl = fl; $f.target = target; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.assignTo = function(context, dst, target) { return this.$val.assignTo(context, dst, target); };
	Value.ptr.prototype.call = function(op, in$1) {
		var _1, _arg, _arg$1, _arg$2, _arg$3, _i, _i$1, _i$2, _r, _r$1, _r$10, _r$11, _r$12, _r$13, _r$14, _r$15, _r$16, _r$17, _r$18, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _ref, _ref$1, _ref$2, _tmp, _tmp$1, _tuple, arg, argsArray, elem, fn, i, i$1, i$2, i$3, in$1, isSlice, m, n, nin, nout, op, origIn, rcvr, results, ret, slice, t, targ, v, x, x$1, x$2, xt, xt$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _arg$3 = $f._arg$3; _i = $f._i; _i$1 = $f._i$1; _i$2 = $f._i$2; _r = $f._r; _r$1 = $f._r$1; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$12 = $f._r$12; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _r$17 = $f._r$17; _r$18 = $f._r$18; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _ref = $f._ref; _ref$1 = $f._ref$1; _ref$2 = $f._ref$2; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tuple = $f._tuple; arg = $f.arg; argsArray = $f.argsArray; elem = $f.elem; fn = $f.fn; i = $f.i; i$1 = $f.i$1; i$2 = $f.i$2; i$3 = $f.i$3; in$1 = $f.in$1; isSlice = $f.isSlice; m = $f.m; n = $f.n; nin = $f.nin; nout = $f.nout; op = $f.op; origIn = $f.origIn; rcvr = $f.rcvr; results = $f.results; ret = $f.ret; slice = $f.slice; t = $f.t; targ = $f.targ; v = $f.v; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; xt = $f.xt; xt$1 = $f.xt$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		t = ptrType$1.nil;
		fn = 0;
		rcvr = null;
		/* */ if (!((((v.flag & 512) >>> 0) === 0))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!((((v.flag & 512) >>> 0) === 0))) { */ case 1:
			_r = methodReceiver(op, $clone(v, Value), ((v.flag >> 0)) >> 10 >> 0); /* */ $s = 4; case 4: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r;
			t = _tuple[1];
			fn = _tuple[2];
			rcvr = $clone(v, Value).object();
			if (isWrapped(v.typ)) {
				rcvr = new (jsType(v.typ))(rcvr);
			}
			$s = 3; continue;
		/* } else { */ case 2:
			t = v.typ;
			fn = ($clone(v, Value).object());
			rcvr = undefined;
		/* } */ case 3:
		if (fn === 0) {
			$panic(new $String("reflect.Value.Call: call of nil function"));
		}
		isSlice = op === "CallSlice";
		n = t.NumIn();
		if (isSlice) {
			if (!t.IsVariadic()) {
				$panic(new $String("reflect: CallSlice of non-variadic function"));
			}
			if (in$1.$length < n) {
				$panic(new $String("reflect: CallSlice with too few input arguments"));
			}
			if (in$1.$length > n) {
				$panic(new $String("reflect: CallSlice with too many input arguments"));
			}
		} else {
			if (t.IsVariadic()) {
				n = n - (1) >> 0;
			}
			if (in$1.$length < n) {
				$panic(new $String("reflect: Call with too few input arguments"));
			}
			if (!t.IsVariadic() && in$1.$length > n) {
				$panic(new $String("reflect: Call with too many input arguments"));
			}
		}
		_ref = in$1;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			x = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			if ($clone(x, Value).Kind() === 0) {
				$panic(new $String("reflect: " + op + " using zero Value argument"));
			}
			_i++;
		}
		i = 0;
		/* while (true) { */ case 5:
			/* if (!(i < n)) { break; } */ if(!(i < n)) { $s = 6; continue; }
			_r$1 = $clone(((i < 0 || i >= in$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : in$1.$array[in$1.$offset + i]), Value).Type(); /* */ $s = 7; case 7: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_tmp = _r$1;
			_tmp$1 = t.In(i);
			xt = _tmp;
			targ = _tmp$1;
			_r$2 = xt.AssignableTo(targ); /* */ $s = 10; case 10: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			/* */ if (!_r$2) { $s = 8; continue; }
			/* */ $s = 9; continue;
			/* if (!_r$2) { */ case 8:
				_r$3 = xt.String(); /* */ $s = 11; case 11: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				_r$4 = targ.String(); /* */ $s = 12; case 12: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				$panic(new $String("reflect: " + op + " using " + _r$3 + " as type " + _r$4));
			/* } */ case 9:
			i = i + (1) >> 0;
		/* } */ $s = 5; continue; case 6:
		/* */ if (!isSlice && t.IsVariadic()) { $s = 13; continue; }
		/* */ $s = 14; continue;
		/* if (!isSlice && t.IsVariadic()) { */ case 13:
			m = in$1.$length - n >> 0;
			_r$5 = MakeSlice(t.In(n), m, m); /* */ $s = 15; case 15: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			slice = _r$5;
			_r$6 = t.In(n).Elem(); /* */ $s = 16; case 16: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
			elem = _r$6;
			i$1 = 0;
			/* while (true) { */ case 17:
				/* if (!(i$1 < m)) { break; } */ if(!(i$1 < m)) { $s = 18; continue; }
				x$2 = (x$1 = n + i$1 >> 0, ((x$1 < 0 || x$1 >= in$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : in$1.$array[in$1.$offset + x$1]));
				_r$7 = $clone(x$2, Value).Type(); /* */ $s = 19; case 19: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
				xt$1 = _r$7;
				_r$8 = xt$1.AssignableTo(elem); /* */ $s = 22; case 22: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
				/* */ if (!_r$8) { $s = 20; continue; }
				/* */ $s = 21; continue;
				/* if (!_r$8) { */ case 20:
					_r$9 = xt$1.String(); /* */ $s = 23; case 23: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
					_r$10 = elem.String(); /* */ $s = 24; case 24: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
					$panic(new $String("reflect: cannot use " + _r$9 + " as type " + _r$10 + " in " + op));
				/* } */ case 21:
				_r$11 = $clone(slice, Value).Index(i$1); /* */ $s = 25; case 25: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
				$r = $clone(_r$11, Value).Set($clone(x$2, Value)); /* */ $s = 26; case 26: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				i$1 = i$1 + (1) >> 0;
			/* } */ $s = 17; continue; case 18:
			origIn = in$1;
			in$1 = $makeSlice(sliceType$9, (n + 1 >> 0));
			$copySlice($subslice(in$1, 0, n), origIn);
			((n < 0 || n >= in$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : in$1.$array[in$1.$offset + n] = slice);
		/* } */ case 14:
		nin = in$1.$length;
		if (!((nin === t.NumIn()))) {
			$panic(new $String("reflect.Value.Call: wrong argument count"));
		}
		nout = t.NumOut();
		argsArray = new ($global.Array)(t.NumIn());
		_ref$1 = in$1;
		_i$1 = 0;
		/* while (true) { */ case 27:
			/* if (!(_i$1 < _ref$1.$length)) { break; } */ if(!(_i$1 < _ref$1.$length)) { $s = 28; continue; }
			i$2 = _i$1;
			arg = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$1.$array[_ref$1.$offset + _i$1]);
			_arg = t.In(i$2);
			_r$12 = t.In(i$2).common(); /* */ $s = 29; case 29: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }
			_arg$1 = _r$12;
			_arg$2 = 0;
			_r$13 = $clone(arg, Value).assignTo("reflect.Value.Call", _arg$1, _arg$2); /* */ $s = 30; case 30: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
			_r$14 = $clone(_r$13, Value).object(); /* */ $s = 31; case 31: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
			_arg$3 = _r$14;
			_r$15 = unwrapJsObject(_arg, _arg$3); /* */ $s = 32; case 32: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
			argsArray[i$2] = _r$15;
			_i$1++;
		/* } */ $s = 27; continue; case 28:
		_r$16 = callHelper(new sliceType$3([new $jsObjectPtr(fn), new $jsObjectPtr(rcvr), new $jsObjectPtr(argsArray)])); /* */ $s = 33; case 33: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
		results = _r$16;
			_1 = nout;
			/* */ if (_1 === (0)) { $s = 35; continue; }
			/* */ if (_1 === (1)) { $s = 36; continue; }
			/* */ $s = 37; continue;
			/* if (_1 === (0)) { */ case 35:
				$s = -1; return sliceType$9.nil;
			/* } else if (_1 === (1)) { */ case 36:
				_r$17 = makeValue(t.Out(0), wrapJsObject(t.Out(0), results), 0); /* */ $s = 39; case 39: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }
				$s = -1; return new sliceType$9([$clone(_r$17, Value)]);
			/* } else { */ case 37:
				ret = $makeSlice(sliceType$9, nout);
				_ref$2 = ret;
				_i$2 = 0;
				/* while (true) { */ case 40:
					/* if (!(_i$2 < _ref$2.$length)) { break; } */ if(!(_i$2 < _ref$2.$length)) { $s = 41; continue; }
					i$3 = _i$2;
					_r$18 = makeValue(t.Out(i$3), wrapJsObject(t.Out(i$3), results[i$3]), 0); /* */ $s = 42; case 42: if($c) { $c = false; _r$18 = _r$18.$blk(); } if (_r$18 && _r$18.$blk !== undefined) { break s; }
					((i$3 < 0 || i$3 >= ret.$length) ? ($throwRuntimeError("index out of range"), undefined) : ret.$array[ret.$offset + i$3] = _r$18);
					_i$2++;
				/* } */ $s = 40; continue; case 41:
				$s = -1; return ret;
			/* } */ case 38:
		case 34:
		$s = -1; return sliceType$9.nil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.call }; } $f._1 = _1; $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._arg$3 = _arg$3; $f._i = _i; $f._i$1 = _i$1; $f._i$2 = _i$2; $f._r = _r; $f._r$1 = _r$1; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$12 = _r$12; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._r$17 = _r$17; $f._r$18 = _r$18; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._ref = _ref; $f._ref$1 = _ref$1; $f._ref$2 = _ref$2; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tuple = _tuple; $f.arg = arg; $f.argsArray = argsArray; $f.elem = elem; $f.fn = fn; $f.i = i; $f.i$1 = i$1; $f.i$2 = i$2; $f.i$3 = i$3; $f.in$1 = in$1; $f.isSlice = isSlice; $f.m = m; $f.n = n; $f.nin = nin; $f.nout = nout; $f.op = op; $f.origIn = origIn; $f.rcvr = rcvr; $f.results = results; $f.ret = ret; $f.slice = slice; $f.t = t; $f.targ = targ; $f.v = v; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.xt = xt; $f.xt$1 = xt$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.call = function(op, in$1) { return this.$val.call(op, in$1); };
	Value.ptr.prototype.Cap = function() {
		var _1, k, v;
		v = this;
		k = new flag(v.flag).kind();
		_1 = k;
		if (_1 === (17)) {
			return v.typ.Len();
		} else if ((_1 === (18)) || (_1 === (23))) {
			return $parseInt($clone(v, Value).object().$capacity) >> 0;
		}
		$panic(new ValueError.ptr("reflect.Value.Cap", k));
	};
	Value.prototype.Cap = function() { return this.$val.Cap(); };
	wrapJsObject = function(typ, val) {
		var typ, val;
		if ($interfaceIsEqual(typ, jsObjectPtr)) {
			return new (jsType(jsObjectPtr))(val);
		}
		return val;
	};
	unwrapJsObject = function(typ, val) {
		var typ, val;
		if ($interfaceIsEqual(typ, jsObjectPtr)) {
			return val.object;
		}
		return val;
	};
	Value.ptr.prototype.Elem = function() {
		var _1, _r, fl, k, tt, typ, v, val, val$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _r = $f._r; fl = $f.fl; k = $f.k; tt = $f.tt; typ = $f.typ; v = $f.v; val = $f.val; val$1 = $f.val$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
			k = new flag(v.flag).kind();
			_1 = k;
			/* */ if (_1 === (20)) { $s = 2; continue; }
			/* */ if (_1 === (22)) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (_1 === (20)) { */ case 2:
				val = $clone(v, Value).object();
				if (val === $ifaceNil) {
					$s = -1; return new Value.ptr(ptrType$1.nil, 0, 0);
				}
				typ = reflectType(val.constructor);
				_r = makeValue(typ, val.$val, new flag(v.flag).ro()); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				$s = -1; return _r;
			/* } else if (_1 === (22)) { */ case 3:
				if ($clone(v, Value).IsNil()) {
					$s = -1; return new Value.ptr(ptrType$1.nil, 0, 0);
				}
				val$1 = $clone(v, Value).object();
				tt = (v.typ.kindType);
				fl = (((((v.flag & 96) >>> 0) | 128) >>> 0) | 256) >>> 0;
				fl = (fl | (((tt.elem.Kind() >>> 0)))) >>> 0;
				$s = -1; return new Value.ptr(tt.elem, (wrapJsObject(tt.elem, val$1)), fl);
			/* } else { */ case 4:
				$panic(new ValueError.ptr("reflect.Value.Elem", k));
			/* } */ case 5:
		case 1:
		$s = -1; return new Value.ptr(ptrType$1.nil, 0, 0);
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.Elem }; } $f._1 = _1; $f._r = _r; $f.fl = fl; $f.k = k; $f.tt = tt; $f.typ = typ; $f.v = v; $f.val = val; $f.val$1 = val$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.Elem = function() { return this.$val.Elem(); };
	Value.ptr.prototype.Field = function(i) {
		var _r, _r$1, _r$2, field, fl, i, jsTag, o, prop, s, tag, tt, typ, v, x, x$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; field = $f.field; fl = $f.fl; i = $f.i; jsTag = $f.jsTag; o = $f.o; prop = $f.prop; s = $f.s; tag = $f.tag; tt = $f.tt; typ = $f.typ; v = $f.v; x = $f.x; x$1 = $f.x$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		jsTag = [jsTag];
		prop = [prop];
		s = [s];
		typ = [typ];
		v = this;
		if (!((new flag(v.flag).kind() === 25))) {
			$panic(new ValueError.ptr("reflect.Value.Field", new flag(v.flag).kind()));
		}
		tt = (v.typ.kindType);
		if (((i >>> 0)) >= ((tt.fields.$length >>> 0))) {
			$panic(new $String("reflect: Field index out of range"));
		}
		prop[0] = $internalize(jsType(v.typ).fields[i].prop, $String);
		field = (x = tt.fields, ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i]));
		typ[0] = field.typ;
		fl = (((v.flag & 416) >>> 0) | ((typ[0].Kind() >>> 0))) >>> 0;
		if (!$clone(field.name, name).isExported()) {
			if (field.anon()) {
				fl = (fl | (64)) >>> 0;
			} else {
				fl = (fl | (32)) >>> 0;
			}
		}
		tag = $clone((x$1 = tt.fields, ((i < 0 || i >= x$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + i])).name, name).tag();
		/* */ if (!(tag === "") && !((i === 0))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!(tag === "") && !((i === 0))) { */ case 1:
			jsTag[0] = getJsTag(tag);
			/* */ if (!(jsTag[0] === "")) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (!(jsTag[0] === "")) { */ case 3:
				/* while (true) { */ case 5:
					o = [o];
					_r = $clone(v, Value).Field(0); /* */ $s = 7; case 7: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
					v = _r;
					/* */ if (v.typ === jsObjectPtr) { $s = 8; continue; }
					/* */ $s = 9; continue;
					/* if (v.typ === jsObjectPtr) { */ case 8:
						o[0] = $clone(v, Value).object().object;
						$s = -1; return new Value.ptr(typ[0], (new (jsType(PtrTo(typ[0])))((function(jsTag, o, prop, s, typ) { return function() {
							return $internalize(o[0][$externalize(jsTag[0], $String)], jsType(typ[0]));
						}; })(jsTag, o, prop, s, typ), (function(jsTag, o, prop, s, typ) { return function(x$2) {
							var x$2;
							o[0][$externalize(jsTag[0], $String)] = $externalize(x$2, jsType(typ[0]));
						}; })(jsTag, o, prop, s, typ))), fl);
					/* } */ case 9:
					/* */ if (v.typ.Kind() === 22) { $s = 10; continue; }
					/* */ $s = 11; continue;
					/* if (v.typ.Kind() === 22) { */ case 10:
						_r$1 = $clone(v, Value).Elem(); /* */ $s = 12; case 12: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
						v = _r$1;
					/* } */ case 11:
				/* } */ $s = 5; continue; case 6:
			/* } */ case 4:
		/* } */ case 2:
		s[0] = v.ptr;
		/* */ if (!((((fl & 128) >>> 0) === 0)) && !((typ[0].Kind() === 17)) && !((typ[0].Kind() === 25))) { $s = 13; continue; }
		/* */ $s = 14; continue;
		/* if (!((((fl & 128) >>> 0) === 0)) && !((typ[0].Kind() === 17)) && !((typ[0].Kind() === 25))) { */ case 13:
			$s = -1; return new Value.ptr(typ[0], (new (jsType(PtrTo(typ[0])))((function(jsTag, prop, s, typ) { return function() {
				return wrapJsObject(typ[0], s[0][$externalize(prop[0], $String)]);
			}; })(jsTag, prop, s, typ), (function(jsTag, prop, s, typ) { return function(x$2) {
				var x$2;
				s[0][$externalize(prop[0], $String)] = unwrapJsObject(typ[0], x$2);
			}; })(jsTag, prop, s, typ))), fl);
		/* } */ case 14:
		_r$2 = makeValue(typ[0], wrapJsObject(typ[0], s[0][$externalize(prop[0], $String)]), fl); /* */ $s = 15; case 15: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		$s = -1; return _r$2;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.Field }; } $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.field = field; $f.fl = fl; $f.i = i; $f.jsTag = jsTag; $f.o = o; $f.prop = prop; $f.s = s; $f.tag = tag; $f.tt = tt; $f.typ = typ; $f.v = v; $f.x = x; $f.x$1 = x$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.Field = function(i) { return this.$val.Field(i); };
	getJsTag = function(tag) {
		var _tuple, i, name$1, qvalue, tag, value;
		while (true) {
			if (!(!(tag === ""))) { break; }
			i = 0;
			while (true) {
				if (!(i < tag.length && (tag.charCodeAt(i) === 32))) { break; }
				i = i + (1) >> 0;
			}
			tag = $substring(tag, i);
			if (tag === "") {
				break;
			}
			i = 0;
			while (true) {
				if (!(i < tag.length && !((tag.charCodeAt(i) === 32)) && !((tag.charCodeAt(i) === 58)) && !((tag.charCodeAt(i) === 34)))) { break; }
				i = i + (1) >> 0;
			}
			if ((i + 1 >> 0) >= tag.length || !((tag.charCodeAt(i) === 58)) || !((tag.charCodeAt((i + 1 >> 0)) === 34))) {
				break;
			}
			name$1 = ($substring(tag, 0, i));
			tag = $substring(tag, (i + 1 >> 0));
			i = 1;
			while (true) {
				if (!(i < tag.length && !((tag.charCodeAt(i) === 34)))) { break; }
				if (tag.charCodeAt(i) === 92) {
					i = i + (1) >> 0;
				}
				i = i + (1) >> 0;
			}
			if (i >= tag.length) {
				break;
			}
			qvalue = ($substring(tag, 0, (i + 1 >> 0)));
			tag = $substring(tag, (i + 1 >> 0));
			if (name$1 === "js") {
				_tuple = strconv.Unquote(qvalue);
				value = _tuple[0];
				return value;
			}
		}
		return "";
	};
	Value.ptr.prototype.Index = function(i) {
		var _1, _r, _r$1, a, a$1, c, fl, fl$1, fl$2, i, k, s, str, tt, tt$1, typ, typ$1, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _r = $f._r; _r$1 = $f._r$1; a = $f.a; a$1 = $f.a$1; c = $f.c; fl = $f.fl; fl$1 = $f.fl$1; fl$2 = $f.fl$2; i = $f.i; k = $f.k; s = $f.s; str = $f.str; tt = $f.tt; tt$1 = $f.tt$1; typ = $f.typ; typ$1 = $f.typ$1; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		a = [a];
		a$1 = [a$1];
		c = [c];
		i = [i];
		typ = [typ];
		typ$1 = [typ$1];
		v = this;
			k = new flag(v.flag).kind();
			_1 = k;
			/* */ if (_1 === (17)) { $s = 2; continue; }
			/* */ if (_1 === (23)) { $s = 3; continue; }
			/* */ if (_1 === (24)) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (_1 === (17)) { */ case 2:
				tt = (v.typ.kindType);
				if (i[0] < 0 || i[0] > ((tt.len >> 0))) {
					$panic(new $String("reflect: array index out of range"));
				}
				typ[0] = tt.elem;
				fl = (((((v.flag & 384) >>> 0) | new flag(v.flag).ro()) >>> 0) | ((typ[0].Kind() >>> 0))) >>> 0;
				a[0] = v.ptr;
				/* */ if (!((((fl & 128) >>> 0) === 0)) && !((typ[0].Kind() === 17)) && !((typ[0].Kind() === 25))) { $s = 7; continue; }
				/* */ $s = 8; continue;
				/* if (!((((fl & 128) >>> 0) === 0)) && !((typ[0].Kind() === 17)) && !((typ[0].Kind() === 25))) { */ case 7:
					$s = -1; return new Value.ptr(typ[0], (new (jsType(PtrTo(typ[0])))((function(a, a$1, c, i, typ, typ$1) { return function() {
						return wrapJsObject(typ[0], a[0][i[0]]);
					}; })(a, a$1, c, i, typ, typ$1), (function(a, a$1, c, i, typ, typ$1) { return function(x) {
						var x;
						a[0][i[0]] = unwrapJsObject(typ[0], x);
					}; })(a, a$1, c, i, typ, typ$1))), fl);
				/* } */ case 8:
				_r = makeValue(typ[0], wrapJsObject(typ[0], a[0][i[0]]), fl); /* */ $s = 9; case 9: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				$s = -1; return _r;
			/* } else if (_1 === (23)) { */ case 3:
				s = $clone(v, Value).object();
				if (i[0] < 0 || i[0] >= ($parseInt(s.$length) >> 0)) {
					$panic(new $String("reflect: slice index out of range"));
				}
				tt$1 = (v.typ.kindType);
				typ$1[0] = tt$1.elem;
				fl$1 = (((384 | new flag(v.flag).ro()) >>> 0) | ((typ$1[0].Kind() >>> 0))) >>> 0;
				i[0] = i[0] + (($parseInt(s.$offset) >> 0)) >> 0;
				a$1[0] = s.$array;
				/* */ if (!((((fl$1 & 128) >>> 0) === 0)) && !((typ$1[0].Kind() === 17)) && !((typ$1[0].Kind() === 25))) { $s = 10; continue; }
				/* */ $s = 11; continue;
				/* if (!((((fl$1 & 128) >>> 0) === 0)) && !((typ$1[0].Kind() === 17)) && !((typ$1[0].Kind() === 25))) { */ case 10:
					$s = -1; return new Value.ptr(typ$1[0], (new (jsType(PtrTo(typ$1[0])))((function(a, a$1, c, i, typ, typ$1) { return function() {
						return wrapJsObject(typ$1[0], a$1[0][i[0]]);
					}; })(a, a$1, c, i, typ, typ$1), (function(a, a$1, c, i, typ, typ$1) { return function(x) {
						var x;
						a$1[0][i[0]] = unwrapJsObject(typ$1[0], x);
					}; })(a, a$1, c, i, typ, typ$1))), fl$1);
				/* } */ case 11:
				_r$1 = makeValue(typ$1[0], wrapJsObject(typ$1[0], a$1[0][i[0]]), fl$1); /* */ $s = 12; case 12: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				$s = -1; return _r$1;
			/* } else if (_1 === (24)) { */ case 4:
				str = (v.ptr).$get();
				if (i[0] < 0 || i[0] >= str.length) {
					$panic(new $String("reflect: string index out of range"));
				}
				fl$2 = (((new flag(v.flag).ro() | 8) >>> 0) | 128) >>> 0;
				c[0] = str.charCodeAt(i[0]);
				$s = -1; return new Value.ptr(uint8Type, ((c.$ptr || (c.$ptr = new ptrType$4(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, c)))), fl$2);
			/* } else { */ case 5:
				$panic(new ValueError.ptr("reflect.Value.Index", k));
			/* } */ case 6:
		case 1:
		$s = -1; return new Value.ptr(ptrType$1.nil, 0, 0);
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.Index }; } $f._1 = _1; $f._r = _r; $f._r$1 = _r$1; $f.a = a; $f.a$1 = a$1; $f.c = c; $f.fl = fl; $f.fl$1 = fl$1; $f.fl$2 = fl$2; $f.i = i; $f.k = k; $f.s = s; $f.str = str; $f.tt = tt; $f.tt$1 = tt$1; $f.typ = typ; $f.typ$1 = typ$1; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.Index = function(i) { return this.$val.Index(i); };
	Value.ptr.prototype.InterfaceData = function() {
		var v;
		v = this;
		$panic(errors.New("InterfaceData is not supported by GopherJS"));
	};
	Value.prototype.InterfaceData = function() { return this.$val.InterfaceData(); };
	Value.ptr.prototype.IsNil = function() {
		var _1, k, v;
		v = this;
		k = new flag(v.flag).kind();
		_1 = k;
		if ((_1 === (22)) || (_1 === (23))) {
			return $clone(v, Value).object() === jsType(v.typ).nil;
		} else if (_1 === (18)) {
			return $clone(v, Value).object() === $chanNil;
		} else if (_1 === (19)) {
			return $clone(v, Value).object() === $throwNilPointerError;
		} else if (_1 === (21)) {
			return $clone(v, Value).object() === false;
		} else if (_1 === (20)) {
			return $clone(v, Value).object() === $ifaceNil;
		} else {
			$panic(new ValueError.ptr("reflect.Value.IsNil", k));
		}
	};
	Value.prototype.IsNil = function() { return this.$val.IsNil(); };
	Value.ptr.prototype.Len = function() {
		var _1, k, v;
		v = this;
		k = new flag(v.flag).kind();
		_1 = k;
		if ((_1 === (17)) || (_1 === (24))) {
			return $parseInt($clone(v, Value).object().length);
		} else if (_1 === (23)) {
			return $parseInt($clone(v, Value).object().$length) >> 0;
		} else if (_1 === (18)) {
			return $parseInt($clone(v, Value).object().$buffer.length) >> 0;
		} else if (_1 === (21)) {
			return $parseInt($keys($clone(v, Value).object()).length);
		} else {
			$panic(new ValueError.ptr("reflect.Value.Len", k));
		}
	};
	Value.prototype.Len = function() { return this.$val.Len(); };
	Value.ptr.prototype.Pointer = function() {
		var _1, k, v;
		v = this;
		k = new flag(v.flag).kind();
		_1 = k;
		if ((_1 === (18)) || (_1 === (21)) || (_1 === (22)) || (_1 === (26))) {
			if ($clone(v, Value).IsNil()) {
				return 0;
			}
			return $clone(v, Value).object();
		} else if (_1 === (19)) {
			if ($clone(v, Value).IsNil()) {
				return 0;
			}
			return 1;
		} else if (_1 === (23)) {
			if ($clone(v, Value).IsNil()) {
				return 0;
			}
			return $clone(v, Value).object().$array;
		} else {
			$panic(new ValueError.ptr("reflect.Value.Pointer", k));
		}
	};
	Value.prototype.Pointer = function() { return this.$val.Pointer(); };
	Value.ptr.prototype.Set = function(x) {
		var _1, _r, _r$1, v, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _r = $f._r; _r$1 = $f._r$1; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		new flag(v.flag).mustBeAssignable();
		new flag(x.flag).mustBeExported();
		_r = $clone(x, Value).assignTo("reflect.Set", v.typ, 0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		x = _r;
		/* */ if (!((((v.flag & 128) >>> 0) === 0))) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!((((v.flag & 128) >>> 0) === 0))) { */ case 2:
				_1 = v.typ.Kind();
				/* */ if (_1 === (17)) { $s = 5; continue; }
				/* */ if (_1 === (20)) { $s = 6; continue; }
				/* */ if (_1 === (25)) { $s = 7; continue; }
				/* */ $s = 8; continue;
				/* if (_1 === (17)) { */ case 5:
					jsType(v.typ).copy(v.ptr, x.ptr);
					$s = 9; continue;
				/* } else if (_1 === (20)) { */ case 6:
					_r$1 = valueInterface($clone(x, Value), false); /* */ $s = 10; case 10: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
					v.ptr.$set(_r$1);
					$s = 9; continue;
				/* } else if (_1 === (25)) { */ case 7:
					copyStruct(v.ptr, x.ptr, v.typ);
					$s = 9; continue;
				/* } else { */ case 8:
					v.ptr.$set($clone(x, Value).object());
				/* } */ case 9:
			case 4:
			$s = -1; return;
		/* } */ case 3:
		v.ptr = x.ptr;
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.Set }; } $f._1 = _1; $f._r = _r; $f._r$1 = _r$1; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.Set = function(x) { return this.$val.Set(x); };
	Value.ptr.prototype.SetBytes = function(x) {
		var _r, _r$1, _v, slice, typedSlice, v, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _v = $f._v; slice = $f.slice; typedSlice = $f.typedSlice; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		new flag(v.flag).mustBeAssignable();
		new flag(v.flag).mustBe(23);
		_r = v.typ.Elem().Kind(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ if (!((_r === 8))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!((_r === 8))) { */ case 1:
			$panic(new $String("reflect.Value.SetBytes of non-byte slice"));
		/* } */ case 2:
		slice = x;
		if (!(v.typ.Name() === "")) { _v = true; $s = 6; continue s; }
		_r$1 = v.typ.Elem().Name(); /* */ $s = 7; case 7: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_v = !(_r$1 === ""); case 6:
		/* */ if (_v) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (_v) { */ case 4:
			typedSlice = new (jsType(v.typ))(slice.$array);
			typedSlice.$offset = slice.$offset;
			typedSlice.$length = slice.$length;
			typedSlice.$capacity = slice.$capacity;
			slice = typedSlice;
		/* } */ case 5:
		v.ptr.$set(slice);
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.SetBytes }; } $f._r = _r; $f._r$1 = _r$1; $f._v = _v; $f.slice = slice; $f.typedSlice = typedSlice; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.SetBytes = function(x) { return this.$val.SetBytes(x); };
	Value.ptr.prototype.SetCap = function(n) {
		var n, newSlice, s, v;
		v = this;
		new flag(v.flag).mustBeAssignable();
		new flag(v.flag).mustBe(23);
		s = v.ptr.$get();
		if (n < ($parseInt(s.$length) >> 0) || n > ($parseInt(s.$capacity) >> 0)) {
			$panic(new $String("reflect: slice capacity out of range in SetCap"));
		}
		newSlice = new (jsType(v.typ))(s.$array);
		newSlice.$offset = s.$offset;
		newSlice.$length = s.$length;
		newSlice.$capacity = n;
		v.ptr.$set(newSlice);
	};
	Value.prototype.SetCap = function(n) { return this.$val.SetCap(n); };
	Value.ptr.prototype.SetLen = function(n) {
		var n, newSlice, s, v;
		v = this;
		new flag(v.flag).mustBeAssignable();
		new flag(v.flag).mustBe(23);
		s = v.ptr.$get();
		if (n < 0 || n > ($parseInt(s.$capacity) >> 0)) {
			$panic(new $String("reflect: slice length out of range in SetLen"));
		}
		newSlice = new (jsType(v.typ))(s.$array);
		newSlice.$offset = s.$offset;
		newSlice.$length = n;
		newSlice.$capacity = s.$capacity;
		v.ptr.$set(newSlice);
	};
	Value.prototype.SetLen = function(n) { return this.$val.SetLen(n); };
	Value.ptr.prototype.Slice = function(i, j) {
		var _1, _r, _r$1, cap, i, j, kind, s, str, tt, typ, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _r = $f._r; _r$1 = $f._r$1; cap = $f.cap; i = $f.i; j = $f.j; kind = $f.kind; s = $f.s; str = $f.str; tt = $f.tt; typ = $f.typ; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		cap = 0;
		typ = $ifaceNil;
		s = null;
			kind = new flag(v.flag).kind();
			_1 = kind;
			/* */ if (_1 === (17)) { $s = 2; continue; }
			/* */ if (_1 === (23)) { $s = 3; continue; }
			/* */ if (_1 === (24)) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (_1 === (17)) { */ case 2:
				if (((v.flag & 256) >>> 0) === 0) {
					$panic(new $String("reflect.Value.Slice: slice of unaddressable array"));
				}
				tt = (v.typ.kindType);
				cap = ((tt.len >> 0));
				typ = SliceOf(tt.elem);
				s = new (jsType(typ))($clone(v, Value).object());
				$s = 6; continue;
			/* } else if (_1 === (23)) { */ case 3:
				typ = v.typ;
				s = $clone(v, Value).object();
				cap = $parseInt(s.$capacity) >> 0;
				$s = 6; continue;
			/* } else if (_1 === (24)) { */ case 4:
				str = (v.ptr).$get();
				if (i < 0 || j < i || j > str.length) {
					$panic(new $String("reflect.Value.Slice: string slice index out of bounds"));
				}
				_r = ValueOf(new $String($substring(str, i, j))); /* */ $s = 7; case 7: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				$s = -1; return _r;
			/* } else { */ case 5:
				$panic(new ValueError.ptr("reflect.Value.Slice", kind));
			/* } */ case 6:
		case 1:
		if (i < 0 || j < i || j > cap) {
			$panic(new $String("reflect.Value.Slice: slice index out of bounds"));
		}
		_r$1 = makeValue(typ, $subslice(s, i, j), new flag(v.flag).ro()); /* */ $s = 8; case 8: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$s = -1; return _r$1;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.Slice }; } $f._1 = _1; $f._r = _r; $f._r$1 = _r$1; $f.cap = cap; $f.i = i; $f.j = j; $f.kind = kind; $f.s = s; $f.str = str; $f.tt = tt; $f.typ = typ; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.Slice = function(i, j) { return this.$val.Slice(i, j); };
	Value.ptr.prototype.Slice3 = function(i, j, k) {
		var _1, _r, cap, i, j, k, kind, s, tt, typ, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _r = $f._r; cap = $f.cap; i = $f.i; j = $f.j; k = $f.k; kind = $f.kind; s = $f.s; tt = $f.tt; typ = $f.typ; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		cap = 0;
		typ = $ifaceNil;
		s = null;
		kind = new flag(v.flag).kind();
		_1 = kind;
		if (_1 === (17)) {
			if (((v.flag & 256) >>> 0) === 0) {
				$panic(new $String("reflect.Value.Slice: slice of unaddressable array"));
			}
			tt = (v.typ.kindType);
			cap = ((tt.len >> 0));
			typ = SliceOf(tt.elem);
			s = new (jsType(typ))($clone(v, Value).object());
		} else if (_1 === (23)) {
			typ = v.typ;
			s = $clone(v, Value).object();
			cap = $parseInt(s.$capacity) >> 0;
		} else {
			$panic(new ValueError.ptr("reflect.Value.Slice3", kind));
		}
		if (i < 0 || j < i || k < j || k > cap) {
			$panic(new $String("reflect.Value.Slice3: slice index out of bounds"));
		}
		_r = makeValue(typ, $subslice(s, i, j, k), new flag(v.flag).ro()); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.Slice3 }; } $f._1 = _1; $f._r = _r; $f.cap = cap; $f.i = i; $f.j = j; $f.k = k; $f.kind = kind; $f.s = s; $f.tt = tt; $f.typ = typ; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.Slice3 = function(i, j, k) { return this.$val.Slice3(i, j, k); };
	Value.ptr.prototype.Close = function() {
		var v;
		v = this;
		new flag(v.flag).mustBe(18);
		new flag(v.flag).mustBeExported();
		$close($clone(v, Value).object());
	};
	Value.prototype.Close = function() { return this.$val.Close(); };
	chanrecv = function(ch, nb, val) {
		var _r, _tmp, _tmp$1, _tmp$2, _tmp$3, ch, comms, nb, received, recvRes, selectRes, selected, val, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; ch = $f.ch; comms = $f.comms; nb = $f.nb; received = $f.received; recvRes = $f.recvRes; selectRes = $f.selectRes; selected = $f.selected; val = $f.val; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		selected = false;
		received = false;
		comms = new sliceType$11([new sliceType$8([ch])]);
		if (nb) {
			comms = $append(comms, new sliceType$8([]));
		}
		_r = selectHelper(new sliceType$3([comms])); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		selectRes = _r;
		if (nb && (($parseInt(selectRes[0]) >> 0) === 1)) {
			_tmp = false;
			_tmp$1 = false;
			selected = _tmp;
			received = _tmp$1;
			$s = -1; return [selected, received];
		}
		recvRes = selectRes[1];
		val.$set(recvRes[0]);
		_tmp$2 = true;
		_tmp$3 = !!(recvRes[1]);
		selected = _tmp$2;
		received = _tmp$3;
		$s = -1; return [selected, received];
		/* */ } return; } if ($f === undefined) { $f = { $blk: chanrecv }; } $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f.ch = ch; $f.comms = comms; $f.nb = nb; $f.received = received; $f.recvRes = recvRes; $f.selectRes = selectRes; $f.selected = selected; $f.val = val; $f.$s = $s; $f.$r = $r; return $f;
	};
	chansend = function(ch, val, nb) {
		var _r, ch, comms, nb, selectRes, val, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; ch = $f.ch; comms = $f.comms; nb = $f.nb; selectRes = $f.selectRes; val = $f.val; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		comms = new sliceType$11([new sliceType$8([ch, val.$get()])]);
		if (nb) {
			comms = $append(comms, new sliceType$8([]));
		}
		_r = selectHelper(new sliceType$3([comms])); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		selectRes = _r;
		if (nb && (($parseInt(selectRes[0]) >> 0) === 1)) {
			$s = -1; return false;
		}
		$s = -1; return true;
		/* */ } return; } if ($f === undefined) { $f = { $blk: chansend }; } $f._r = _r; $f.ch = ch; $f.comms = comms; $f.nb = nb; $f.selectRes = selectRes; $f.val = val; $f.$s = $s; $f.$r = $r; return $f;
	};
	structField.ptr.prototype.offset = function() {
		var f;
		f = this;
		return f.offsetAnon >>> 1 >>> 0;
	};
	structField.prototype.offset = function() { return this.$val.offset(); };
	structField.ptr.prototype.anon = function() {
		var f;
		f = this;
		return !((((f.offsetAnon & 1) >>> 0) === 0));
	};
	structField.prototype.anon = function() { return this.$val.anon(); };
	Kind.prototype.String = function() {
		var k;
		k = this.$val;
		if (((k >> 0)) < kindNames.$length) {
			return ((k < 0 || k >= kindNames.$length) ? ($throwRuntimeError("index out of range"), undefined) : kindNames.$array[kindNames.$offset + k]);
		}
		return "kind" + strconv.Itoa(((k >> 0)));
	};
	$ptrType(Kind).prototype.String = function() { return new Kind(this.$get()).String(); };
	rtype.ptr.prototype.String = function() {
		var s, t;
		t = this;
		s = $clone(t.nameOff(t.str), name).name();
		if (!((((t.tflag & 2) >>> 0) === 0))) {
			return $substring(s, 1);
		}
		return s;
	};
	rtype.prototype.String = function() { return this.$val.String(); };
	rtype.ptr.prototype.Size = function() {
		var t;
		t = this;
		return t.size;
	};
	rtype.prototype.Size = function() { return this.$val.Size(); };
	rtype.ptr.prototype.Bits = function() {
		var k, t;
		t = this;
		if (t === ptrType$1.nil) {
			$panic(new $String("reflect: Bits of nil Type"));
		}
		k = t.Kind();
		if (k < 2 || k > 16) {
			$panic(new $String("reflect: Bits of non-arithmetic Type " + t.String()));
		}
		return $imul(((t.size >> 0)), 8);
	};
	rtype.prototype.Bits = function() { return this.$val.Bits(); };
	rtype.ptr.prototype.Align = function() {
		var t;
		t = this;
		return ((t.align >> 0));
	};
	rtype.prototype.Align = function() { return this.$val.Align(); };
	rtype.ptr.prototype.FieldAlign = function() {
		var t;
		t = this;
		return ((t.fieldAlign >> 0));
	};
	rtype.prototype.FieldAlign = function() { return this.$val.FieldAlign(); };
	rtype.ptr.prototype.Kind = function() {
		var t;
		t = this;
		return ((((t.kind & 31) >>> 0) >>> 0));
	};
	rtype.prototype.Kind = function() { return this.$val.Kind(); };
	rtype.ptr.prototype.common = function() {
		var t;
		t = this;
		return t;
	};
	rtype.prototype.common = function() { return this.$val.common(); };
	rtype.ptr.prototype.exportedMethods = function() {
		var _i, _i$1, _r, _r$1, _ref, _ref$1, _tuple, _tuple$1, allExported, allm, found, m, m$1, methods, methodsi, name$1, name$2, t, ut, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _i$1 = $f._i$1; _r = $f._r; _r$1 = $f._r$1; _ref = $f._ref; _ref$1 = $f._ref$1; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; allExported = $f.allExported; allm = $f.allm; found = $f.found; m = $f.m; m$1 = $f.m$1; methods = $f.methods; methodsi = $f.methodsi; name$1 = $f.name$1; name$2 = $f.name$2; t = $f.t; ut = $f.ut; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		_r = methodCache.Load(t); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		methodsi = _tuple[0];
		found = _tuple[1];
		if (found) {
			$s = -1; return $assertType(methodsi, sliceType$5);
		}
		ut = t.uncommon();
		if (ut === ptrType$5.nil) {
			$s = -1; return sliceType$5.nil;
		}
		allm = ut.methods();
		allExported = true;
		_ref = allm;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			m = $clone(((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]), method);
			name$1 = $clone(t.nameOff(m.name), name);
			if (!$clone(name$1, name).isExported()) {
				allExported = false;
				break;
			}
			_i++;
		}
		methods = sliceType$5.nil;
		if (allExported) {
			methods = allm;
		} else {
			methods = $makeSlice(sliceType$5, 0, allm.$length);
			_ref$1 = allm;
			_i$1 = 0;
			while (true) {
				if (!(_i$1 < _ref$1.$length)) { break; }
				m$1 = $clone(((_i$1 < 0 || _i$1 >= _ref$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$1.$array[_ref$1.$offset + _i$1]), method);
				name$2 = $clone(t.nameOff(m$1.name), name);
				if ($clone(name$2, name).isExported()) {
					methods = $append(methods, m$1);
				}
				_i$1++;
			}
			methods = $subslice(methods, 0, methods.$length, methods.$length);
		}
		_r$1 = methodCache.LoadOrStore(t, methods); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple$1 = _r$1;
		methodsi = _tuple$1[0];
		$s = -1; return $assertType(methodsi, sliceType$5);
		/* */ } return; } if ($f === undefined) { $f = { $blk: rtype.ptr.prototype.exportedMethods }; } $f._i = _i; $f._i$1 = _i$1; $f._r = _r; $f._r$1 = _r$1; $f._ref = _ref; $f._ref$1 = _ref$1; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.allExported = allExported; $f.allm = allm; $f.found = found; $f.m = m; $f.m$1 = m$1; $f.methods = methods; $f.methodsi = methodsi; $f.name$1 = name$1; $f.name$2 = name$2; $f.t = t; $f.ut = ut; $f.$s = $s; $f.$r = $r; return $f;
	};
	rtype.prototype.exportedMethods = function() { return this.$val.exportedMethods(); };
	rtype.ptr.prototype.NumMethod = function() {
		var _r, t, tt, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; t = $f.t; tt = $f.tt; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		if (t.Kind() === 20) {
			tt = (t.kindType);
			$s = -1; return tt.NumMethod();
		}
		if (((t.tflag & 1) >>> 0) === 0) {
			$s = -1; return 0;
		}
		_r = t.exportedMethods(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r.$length;
		/* */ } return; } if ($f === undefined) { $f = { $blk: rtype.ptr.prototype.NumMethod }; } $f._r = _r; $f.t = t; $f.tt = tt; $f.$s = $s; $f.$r = $r; return $f;
	};
	rtype.prototype.NumMethod = function() { return this.$val.NumMethod(); };
	rtype.ptr.prototype.MethodByName = function(name$1) {
		var _r, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tuple, eidx, i, m, name$1, ok, p, pname, t, tt, ut, utmethods, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; _tuple = $f._tuple; eidx = $f.eidx; i = $f.i; m = $f.m; name$1 = $f.name$1; ok = $f.ok; p = $f.p; pname = $f.pname; t = $f.t; tt = $f.tt; ut = $f.ut; utmethods = $f.utmethods; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		m = new Method.ptr("", "", $ifaceNil, new Value.ptr(ptrType$1.nil, 0, 0), 0);
		ok = false;
		t = this;
		if (t.Kind() === 20) {
			tt = (t.kindType);
			_tuple = tt.MethodByName(name$1);
			Method.copy(m, _tuple[0]);
			ok = _tuple[1];
			$s = -1; return [m, ok];
		}
		ut = t.uncommon();
		if (ut === ptrType$5.nil) {
			_tmp = new Method.ptr("", "", $ifaceNil, new Value.ptr(ptrType$1.nil, 0, 0), 0);
			_tmp$1 = false;
			Method.copy(m, _tmp);
			ok = _tmp$1;
			$s = -1; return [m, ok];
		}
		utmethods = ut.methods();
		eidx = 0;
		i = 0;
		/* while (true) { */ case 1:
			/* if (!(i < ((ut.mcount >> 0)))) { break; } */ if(!(i < ((ut.mcount >> 0)))) { $s = 2; continue; }
			p = $clone(((i < 0 || i >= utmethods.$length) ? ($throwRuntimeError("index out of range"), undefined) : utmethods.$array[utmethods.$offset + i]), method);
			pname = $clone(t.nameOff(p.name), name);
			/* */ if ($clone(pname, name).isExported()) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if ($clone(pname, name).isExported()) { */ case 3:
				/* */ if ($clone(pname, name).name() === name$1) { $s = 5; continue; }
				/* */ $s = 6; continue;
				/* if ($clone(pname, name).name() === name$1) { */ case 5:
					_r = t.Method(eidx); /* */ $s = 7; case 7: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
					_tmp$2 = $clone(_r, Method);
					_tmp$3 = true;
					Method.copy(m, _tmp$2);
					ok = _tmp$3;
					$s = -1; return [m, ok];
				/* } */ case 6:
				eidx = eidx + (1) >> 0;
			/* } */ case 4:
			i = i + (1) >> 0;
		/* } */ $s = 1; continue; case 2:
		_tmp$4 = new Method.ptr("", "", $ifaceNil, new Value.ptr(ptrType$1.nil, 0, 0), 0);
		_tmp$5 = false;
		Method.copy(m, _tmp$4);
		ok = _tmp$5;
		$s = -1; return [m, ok];
		/* */ } return; } if ($f === undefined) { $f = { $blk: rtype.ptr.prototype.MethodByName }; } $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f._tuple = _tuple; $f.eidx = eidx; $f.i = i; $f.m = m; $f.name$1 = name$1; $f.ok = ok; $f.p = p; $f.pname = pname; $f.t = t; $f.tt = tt; $f.ut = ut; $f.utmethods = utmethods; $f.$s = $s; $f.$r = $r; return $f;
	};
	rtype.prototype.MethodByName = function(name$1) { return this.$val.MethodByName(name$1); };
	rtype.ptr.prototype.PkgPath = function() {
		var t, ut;
		t = this;
		if (((t.tflag & 4) >>> 0) === 0) {
			return "";
		}
		ut = t.uncommon();
		if (ut === ptrType$5.nil) {
			return "";
		}
		return $clone(t.nameOff(ut.pkgPath), name).name();
	};
	rtype.prototype.PkgPath = function() { return this.$val.PkgPath(); };
	rtype.ptr.prototype.Name = function() {
		var i, s, t;
		t = this;
		if (((t.tflag & 4) >>> 0) === 0) {
			return "";
		}
		s = t.String();
		i = s.length - 1 >> 0;
		while (true) {
			if (!(i >= 0)) { break; }
			if (s.charCodeAt(i) === 46) {
				break;
			}
			i = i - (1) >> 0;
		}
		return $substring(s, (i + 1 >> 0));
	};
	rtype.prototype.Name = function() { return this.$val.Name(); };
	rtype.ptr.prototype.ChanDir = function() {
		var t, tt;
		t = this;
		if (!((t.Kind() === 18))) {
			$panic(new $String("reflect: ChanDir of non-chan type"));
		}
		tt = (t.kindType);
		return ((tt.dir >> 0));
	};
	rtype.prototype.ChanDir = function() { return this.$val.ChanDir(); };
	rtype.ptr.prototype.IsVariadic = function() {
		var t, tt;
		t = this;
		if (!((t.Kind() === 19))) {
			$panic(new $String("reflect: IsVariadic of non-func type"));
		}
		tt = (t.kindType);
		return !((((tt.outCount & 32768) >>> 0) === 0));
	};
	rtype.prototype.IsVariadic = function() { return this.$val.IsVariadic(); };
	rtype.ptr.prototype.Elem = function() {
		var _1, t, tt, tt$1, tt$2, tt$3, tt$4;
		t = this;
		_1 = t.Kind();
		if (_1 === (17)) {
			tt = (t.kindType);
			return toType(tt.elem);
		} else if (_1 === (18)) {
			tt$1 = (t.kindType);
			return toType(tt$1.elem);
		} else if (_1 === (21)) {
			tt$2 = (t.kindType);
			return toType(tt$2.elem);
		} else if (_1 === (22)) {
			tt$3 = (t.kindType);
			return toType(tt$3.elem);
		} else if (_1 === (23)) {
			tt$4 = (t.kindType);
			return toType(tt$4.elem);
		}
		$panic(new $String("reflect: Elem of invalid type"));
	};
	rtype.prototype.Elem = function() { return this.$val.Elem(); };
	rtype.ptr.prototype.Field = function(i) {
		var i, t, tt;
		t = this;
		if (!((t.Kind() === 25))) {
			$panic(new $String("reflect: Field of non-struct type"));
		}
		tt = (t.kindType);
		return tt.Field(i);
	};
	rtype.prototype.Field = function(i) { return this.$val.Field(i); };
	rtype.ptr.prototype.FieldByIndex = function(index) {
		var _r, index, t, tt, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; index = $f.index; t = $f.t; tt = $f.tt; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		if (!((t.Kind() === 25))) {
			$panic(new $String("reflect: FieldByIndex of non-struct type"));
		}
		tt = (t.kindType);
		_r = tt.FieldByIndex(index); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: rtype.ptr.prototype.FieldByIndex }; } $f._r = _r; $f.index = index; $f.t = t; $f.tt = tt; $f.$s = $s; $f.$r = $r; return $f;
	};
	rtype.prototype.FieldByIndex = function(index) { return this.$val.FieldByIndex(index); };
	rtype.ptr.prototype.FieldByName = function(name$1) {
		var _r, name$1, t, tt, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; name$1 = $f.name$1; t = $f.t; tt = $f.tt; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		if (!((t.Kind() === 25))) {
			$panic(new $String("reflect: FieldByName of non-struct type"));
		}
		tt = (t.kindType);
		_r = tt.FieldByName(name$1); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: rtype.ptr.prototype.FieldByName }; } $f._r = _r; $f.name$1 = name$1; $f.t = t; $f.tt = tt; $f.$s = $s; $f.$r = $r; return $f;
	};
	rtype.prototype.FieldByName = function(name$1) { return this.$val.FieldByName(name$1); };
	rtype.ptr.prototype.FieldByNameFunc = function(match) {
		var _r, match, t, tt, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; match = $f.match; t = $f.t; tt = $f.tt; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		if (!((t.Kind() === 25))) {
			$panic(new $String("reflect: FieldByNameFunc of non-struct type"));
		}
		tt = (t.kindType);
		_r = tt.FieldByNameFunc(match); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: rtype.ptr.prototype.FieldByNameFunc }; } $f._r = _r; $f.match = match; $f.t = t; $f.tt = tt; $f.$s = $s; $f.$r = $r; return $f;
	};
	rtype.prototype.FieldByNameFunc = function(match) { return this.$val.FieldByNameFunc(match); };
	rtype.ptr.prototype.In = function(i) {
		var i, t, tt, x;
		t = this;
		if (!((t.Kind() === 19))) {
			$panic(new $String("reflect: In of non-func type"));
		}
		tt = (t.kindType);
		return toType((x = tt.in$(), ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i])));
	};
	rtype.prototype.In = function(i) { return this.$val.In(i); };
	rtype.ptr.prototype.Key = function() {
		var t, tt;
		t = this;
		if (!((t.Kind() === 21))) {
			$panic(new $String("reflect: Key of non-map type"));
		}
		tt = (t.kindType);
		return toType(tt.key);
	};
	rtype.prototype.Key = function() { return this.$val.Key(); };
	rtype.ptr.prototype.Len = function() {
		var t, tt;
		t = this;
		if (!((t.Kind() === 17))) {
			$panic(new $String("reflect: Len of non-array type"));
		}
		tt = (t.kindType);
		return ((tt.len >> 0));
	};
	rtype.prototype.Len = function() { return this.$val.Len(); };
	rtype.ptr.prototype.NumField = function() {
		var t, tt;
		t = this;
		if (!((t.Kind() === 25))) {
			$panic(new $String("reflect: NumField of non-struct type"));
		}
		tt = (t.kindType);
		return tt.fields.$length;
	};
	rtype.prototype.NumField = function() { return this.$val.NumField(); };
	rtype.ptr.prototype.NumIn = function() {
		var t, tt;
		t = this;
		if (!((t.Kind() === 19))) {
			$panic(new $String("reflect: NumIn of non-func type"));
		}
		tt = (t.kindType);
		return ((tt.inCount >> 0));
	};
	rtype.prototype.NumIn = function() { return this.$val.NumIn(); };
	rtype.ptr.prototype.NumOut = function() {
		var t, tt;
		t = this;
		if (!((t.Kind() === 19))) {
			$panic(new $String("reflect: NumOut of non-func type"));
		}
		tt = (t.kindType);
		return tt.out().$length;
	};
	rtype.prototype.NumOut = function() { return this.$val.NumOut(); };
	rtype.ptr.prototype.Out = function(i) {
		var i, t, tt, x;
		t = this;
		if (!((t.Kind() === 19))) {
			$panic(new $String("reflect: Out of non-func type"));
		}
		tt = (t.kindType);
		return toType((x = tt.out(), ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i])));
	};
	rtype.prototype.Out = function(i) { return this.$val.Out(i); };
	ChanDir.prototype.String = function() {
		var _1, d;
		d = this.$val;
		_1 = d;
		if (_1 === (2)) {
			return "chan<-";
		} else if (_1 === (1)) {
			return "<-chan";
		} else if (_1 === (3)) {
			return "chan";
		}
		return "ChanDir" + strconv.Itoa(((d >> 0)));
	};
	$ptrType(ChanDir).prototype.String = function() { return new ChanDir(this.$get()).String(); };
	interfaceType.ptr.prototype.Method = function(i) {
		var i, m, p, pname, t, x;
		m = new Method.ptr("", "", $ifaceNil, new Value.ptr(ptrType$1.nil, 0, 0), 0);
		t = this;
		if (i < 0 || i >= t.methods.$length) {
			return m;
		}
		p = (x = t.methods, ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i]));
		pname = $clone(t.rtype.nameOff(p.name), name);
		m.Name = $clone(pname, name).name();
		if (!$clone(pname, name).isExported()) {
			m.PkgPath = $clone(pname, name).pkgPath();
			if (m.PkgPath === "") {
				m.PkgPath = $clone(t.pkgPath, name).name();
			}
		}
		m.Type = toType(t.rtype.typeOff(p.typ));
		m.Index = i;
		return m;
	};
	interfaceType.prototype.Method = function(i) { return this.$val.Method(i); };
	interfaceType.ptr.prototype.NumMethod = function() {
		var t;
		t = this;
		return t.methods.$length;
	};
	interfaceType.prototype.NumMethod = function() { return this.$val.NumMethod(); };
	interfaceType.ptr.prototype.MethodByName = function(name$1) {
		var _i, _ref, _tmp, _tmp$1, i, m, name$1, ok, p, t, x;
		m = new Method.ptr("", "", $ifaceNil, new Value.ptr(ptrType$1.nil, 0, 0), 0);
		ok = false;
		t = this;
		if (t === ptrType$7.nil) {
			return [m, ok];
		}
		p = ptrType$8.nil;
		_ref = t.methods;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			p = (x = t.methods, ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i]));
			if ($clone(t.rtype.nameOff(p.name), name).name() === name$1) {
				_tmp = $clone(t.Method(i), Method);
				_tmp$1 = true;
				Method.copy(m, _tmp);
				ok = _tmp$1;
				return [m, ok];
			}
			_i++;
		}
		return [m, ok];
	};
	interfaceType.prototype.MethodByName = function(name$1) { return this.$val.MethodByName(name$1); };
	StructTag.prototype.Get = function(key) {
		var _tuple, key, tag, v;
		tag = this.$val;
		_tuple = new StructTag(tag).Lookup(key);
		v = _tuple[0];
		return v;
	};
	$ptrType(StructTag).prototype.Get = function(key) { return new StructTag(this.$get()).Get(key); };
	StructTag.prototype.Lookup = function(key) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple, err, i, key, name$1, ok, qvalue, tag, value, value$1;
		value = "";
		ok = false;
		tag = this.$val;
		while (true) {
			if (!(!(tag === ""))) { break; }
			i = 0;
			while (true) {
				if (!(i < tag.length && (tag.charCodeAt(i) === 32))) { break; }
				i = i + (1) >> 0;
			}
			tag = $substring(tag, i);
			if (tag === "") {
				break;
			}
			i = 0;
			while (true) {
				if (!(i < tag.length && tag.charCodeAt(i) > 32 && !((tag.charCodeAt(i) === 58)) && !((tag.charCodeAt(i) === 34)) && !((tag.charCodeAt(i) === 127)))) { break; }
				i = i + (1) >> 0;
			}
			if ((i === 0) || (i + 1 >> 0) >= tag.length || !((tag.charCodeAt(i) === 58)) || !((tag.charCodeAt((i + 1 >> 0)) === 34))) {
				break;
			}
			name$1 = ($substring(tag, 0, i));
			tag = $substring(tag, (i + 1 >> 0));
			i = 1;
			while (true) {
				if (!(i < tag.length && !((tag.charCodeAt(i) === 34)))) { break; }
				if (tag.charCodeAt(i) === 92) {
					i = i + (1) >> 0;
				}
				i = i + (1) >> 0;
			}
			if (i >= tag.length) {
				break;
			}
			qvalue = ($substring(tag, 0, (i + 1 >> 0)));
			tag = $substring(tag, (i + 1 >> 0));
			if (key === name$1) {
				_tuple = strconv.Unquote(qvalue);
				value$1 = _tuple[0];
				err = _tuple[1];
				if (!($interfaceIsEqual(err, $ifaceNil))) {
					break;
				}
				_tmp = value$1;
				_tmp$1 = true;
				value = _tmp;
				ok = _tmp$1;
				return [value, ok];
			}
		}
		_tmp$2 = "";
		_tmp$3 = false;
		value = _tmp$2;
		ok = _tmp$3;
		return [value, ok];
	};
	$ptrType(StructTag).prototype.Lookup = function(key) { return new StructTag(this.$get()).Lookup(key); };
	structType.ptr.prototype.Field = function(i) {
		var f, i, p, t, tag, x;
		f = new StructField.ptr("", "", $ifaceNil, "", 0, sliceType$13.nil, false);
		t = this;
		if (i < 0 || i >= t.fields.$length) {
			$panic(new $String("reflect: Field index out of bounds"));
		}
		p = (x = t.fields, ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i]));
		f.Type = toType(p.typ);
		f.Name = $clone(p.name, name).name();
		f.Anonymous = p.anon();
		if (!$clone(p.name, name).isExported()) {
			f.PkgPath = $clone(t.pkgPath, name).name();
		}
		tag = $clone(p.name, name).tag();
		if (!(tag === "")) {
			f.Tag = (tag);
		}
		f.Offset = p.offset();
		f.Index = new sliceType$13([i]);
		return f;
	};
	structType.prototype.Field = function(i) { return this.$val.Field(i); };
	structType.ptr.prototype.FieldByIndex = function(index) {
		var _i, _r, _r$1, _r$2, _r$3, _r$4, _ref, _v, f, ft, i, index, t, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _ref = $f._ref; _v = $f._v; f = $f.f; ft = $f.ft; i = $f.i; index = $f.index; t = $f.t; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		f = new StructField.ptr("", "", $ifaceNil, "", 0, sliceType$13.nil, false);
		t = this;
		f.Type = toType(t.rtype);
		_ref = index;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			i = _i;
			x = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			/* */ if (i > 0) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (i > 0) { */ case 3:
				ft = f.Type;
				_r = ft.Kind(); /* */ $s = 8; case 8: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				if (!(_r === 22)) { _v = false; $s = 7; continue s; }
				_r$1 = ft.Elem(); /* */ $s = 9; case 9: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				_r$2 = _r$1.Kind(); /* */ $s = 10; case 10: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				_v = _r$2 === 25; case 7:
				/* */ if (_v) { $s = 5; continue; }
				/* */ $s = 6; continue;
				/* if (_v) { */ case 5:
					_r$3 = ft.Elem(); /* */ $s = 11; case 11: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
					ft = _r$3;
				/* } */ case 6:
				f.Type = ft;
			/* } */ case 4:
			_r$4 = f.Type.Field(x); /* */ $s = 12; case 12: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			StructField.copy(f, _r$4);
			_i++;
		/* } */ $s = 1; continue; case 2:
		$s = -1; return f;
		/* */ } return; } if ($f === undefined) { $f = { $blk: structType.ptr.prototype.FieldByIndex }; } $f._i = _i; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._ref = _ref; $f._v = _v; $f.f = f; $f.ft = ft; $f.i = i; $f.index = index; $f.t = t; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	structType.prototype.FieldByIndex = function(index) { return this.$val.FieldByIndex(index); };
	structType.ptr.prototype.FieldByNameFunc = function(match) {
		var _entry, _entry$1, _entry$2, _entry$3, _i, _i$1, _key, _key$1, _key$2, _key$3, _r, _r$1, _ref, _ref$1, _tmp, _tmp$1, _tmp$2, _tmp$3, count, current, f, fname, i, index, match, next, nextCount, ntyp, ok, result, scan, styp, t, t$1, visited, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _entry = $f._entry; _entry$1 = $f._entry$1; _entry$2 = $f._entry$2; _entry$3 = $f._entry$3; _i = $f._i; _i$1 = $f._i$1; _key = $f._key; _key$1 = $f._key$1; _key$2 = $f._key$2; _key$3 = $f._key$3; _r = $f._r; _r$1 = $f._r$1; _ref = $f._ref; _ref$1 = $f._ref$1; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; count = $f.count; current = $f.current; f = $f.f; fname = $f.fname; i = $f.i; index = $f.index; match = $f.match; next = $f.next; nextCount = $f.nextCount; ntyp = $f.ntyp; ok = $f.ok; result = $f.result; scan = $f.scan; styp = $f.styp; t = $f.t; t$1 = $f.t$1; visited = $f.visited; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		result = new StructField.ptr("", "", $ifaceNil, "", 0, sliceType$13.nil, false);
		ok = false;
		t = this;
		current = new sliceType$14([]);
		next = new sliceType$14([new fieldScan.ptr(t, sliceType$13.nil)]);
		nextCount = false;
		visited = $makeMap(ptrType$9.keyFor, []);
		/* while (true) { */ case 1:
			/* if (!(next.$length > 0)) { break; } */ if(!(next.$length > 0)) { $s = 2; continue; }
			_tmp = next;
			_tmp$1 = $subslice(current, 0, 0);
			current = _tmp;
			next = _tmp$1;
			count = nextCount;
			nextCount = false;
			_ref = current;
			_i = 0;
			/* while (true) { */ case 3:
				/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 4; continue; }
				scan = $clone(((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]), fieldScan);
				t$1 = scan.typ;
				/* */ if ((_entry = visited[ptrType$9.keyFor(t$1)], _entry !== undefined ? _entry.v : false)) { $s = 5; continue; }
				/* */ $s = 6; continue;
				/* if ((_entry = visited[ptrType$9.keyFor(t$1)], _entry !== undefined ? _entry.v : false)) { */ case 5:
					_i++;
					/* continue; */ $s = 3; continue;
				/* } */ case 6:
				_key = t$1; (visited || $throwRuntimeError("assignment to entry in nil map"))[ptrType$9.keyFor(_key)] = { k: _key, v: true };
				_ref$1 = t$1.fields;
				_i$1 = 0;
				/* while (true) { */ case 7:
					/* if (!(_i$1 < _ref$1.$length)) { break; } */ if(!(_i$1 < _ref$1.$length)) { $s = 8; continue; }
					i = _i$1;
					f = (x = t$1.fields, ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i]));
					fname = $clone(f.name, name).name();
					ntyp = ptrType$1.nil;
					/* */ if (f.anon()) { $s = 9; continue; }
					/* */ $s = 10; continue;
					/* if (f.anon()) { */ case 9:
						ntyp = f.typ;
						/* */ if (ntyp.Kind() === 22) { $s = 11; continue; }
						/* */ $s = 12; continue;
						/* if (ntyp.Kind() === 22) { */ case 11:
							_r = ntyp.Elem().common(); /* */ $s = 13; case 13: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
							ntyp = _r;
						/* } */ case 12:
					/* } */ case 10:
					_r$1 = match(fname); /* */ $s = 16; case 16: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
					/* */ if (_r$1) { $s = 14; continue; }
					/* */ $s = 15; continue;
					/* if (_r$1) { */ case 14:
						if ((_entry$1 = count[ptrType$9.keyFor(t$1)], _entry$1 !== undefined ? _entry$1.v : 0) > 1 || ok) {
							_tmp$2 = new StructField.ptr("", "", $ifaceNil, "", 0, sliceType$13.nil, false);
							_tmp$3 = false;
							StructField.copy(result, _tmp$2);
							ok = _tmp$3;
							$s = -1; return [result, ok];
						}
						StructField.copy(result, t$1.Field(i));
						result.Index = sliceType$13.nil;
						result.Index = $appendSlice(result.Index, scan.index);
						result.Index = $append(result.Index, i);
						ok = true;
						_i$1++;
						/* continue; */ $s = 7; continue;
					/* } */ case 15:
					if (ok || ntyp === ptrType$1.nil || !((ntyp.Kind() === 25))) {
						_i$1++;
						/* continue; */ $s = 7; continue;
					}
					styp = (ntyp.kindType);
					if ((_entry$2 = nextCount[ptrType$9.keyFor(styp)], _entry$2 !== undefined ? _entry$2.v : 0) > 0) {
						_key$1 = styp; (nextCount || $throwRuntimeError("assignment to entry in nil map"))[ptrType$9.keyFor(_key$1)] = { k: _key$1, v: 2 };
						_i$1++;
						/* continue; */ $s = 7; continue;
					}
					if (nextCount === false) {
						nextCount = $makeMap(ptrType$9.keyFor, []);
					}
					_key$2 = styp; (nextCount || $throwRuntimeError("assignment to entry in nil map"))[ptrType$9.keyFor(_key$2)] = { k: _key$2, v: 1 };
					if ((_entry$3 = count[ptrType$9.keyFor(t$1)], _entry$3 !== undefined ? _entry$3.v : 0) > 1) {
						_key$3 = styp; (nextCount || $throwRuntimeError("assignment to entry in nil map"))[ptrType$9.keyFor(_key$3)] = { k: _key$3, v: 2 };
					}
					index = sliceType$13.nil;
					index = $appendSlice(index, scan.index);
					index = $append(index, i);
					next = $append(next, new fieldScan.ptr(styp, index));
					_i$1++;
				/* } */ $s = 7; continue; case 8:
				_i++;
			/* } */ $s = 3; continue; case 4:
			if (ok) {
				/* break; */ $s = 2; continue;
			}
		/* } */ $s = 1; continue; case 2:
		$s = -1; return [result, ok];
		/* */ } return; } if ($f === undefined) { $f = { $blk: structType.ptr.prototype.FieldByNameFunc }; } $f._entry = _entry; $f._entry$1 = _entry$1; $f._entry$2 = _entry$2; $f._entry$3 = _entry$3; $f._i = _i; $f._i$1 = _i$1; $f._key = _key; $f._key$1 = _key$1; $f._key$2 = _key$2; $f._key$3 = _key$3; $f._r = _r; $f._r$1 = _r$1; $f._ref = _ref; $f._ref$1 = _ref$1; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f.count = count; $f.current = current; $f.f = f; $f.fname = fname; $f.i = i; $f.index = index; $f.match = match; $f.next = next; $f.nextCount = nextCount; $f.ntyp = ntyp; $f.ok = ok; $f.result = result; $f.scan = scan; $f.styp = styp; $f.t = t; $f.t$1 = t$1; $f.visited = visited; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	structType.prototype.FieldByNameFunc = function(match) { return this.$val.FieldByNameFunc(match); };
	structType.ptr.prototype.FieldByName = function(name$1) {
		var _i, _r, _ref, _tmp, _tmp$1, _tuple, f, hasAnon, i, name$1, present, t, tf, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _r = $f._r; _ref = $f._ref; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tuple = $f._tuple; f = $f.f; hasAnon = $f.hasAnon; i = $f.i; name$1 = $f.name$1; present = $f.present; t = $f.t; tf = $f.tf; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		name$1 = [name$1];
		f = new StructField.ptr("", "", $ifaceNil, "", 0, sliceType$13.nil, false);
		present = false;
		t = this;
		hasAnon = false;
		if (!(name$1[0] === "")) {
			_ref = t.fields;
			_i = 0;
			while (true) {
				if (!(_i < _ref.$length)) { break; }
				i = _i;
				tf = (x = t.fields, ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i]));
				if ($clone(tf.name, name).name() === name$1[0]) {
					_tmp = $clone(t.Field(i), StructField);
					_tmp$1 = true;
					StructField.copy(f, _tmp);
					present = _tmp$1;
					$s = -1; return [f, present];
				}
				if (tf.anon()) {
					hasAnon = true;
				}
				_i++;
			}
		}
		if (!hasAnon) {
			$s = -1; return [f, present];
		}
		_r = t.FieldByNameFunc((function(name$1) { return function(s) {
			var s;
			return s === name$1[0];
		}; })(name$1)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		StructField.copy(f, _tuple[0]);
		present = _tuple[1];
		$s = -1; return [f, present];
		/* */ } return; } if ($f === undefined) { $f = { $blk: structType.ptr.prototype.FieldByName }; } $f._i = _i; $f._r = _r; $f._ref = _ref; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tuple = _tuple; $f.f = f; $f.hasAnon = hasAnon; $f.i = i; $f.name$1 = name$1; $f.present = present; $f.t = t; $f.tf = tf; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	structType.prototype.FieldByName = function(name$1) { return this.$val.FieldByName(name$1); };
	PtrTo = function(t) {
		var t;
		return $assertType(t, ptrType$1).ptrTo();
	};
	$pkg.PtrTo = PtrTo;
	rtype.ptr.prototype.Implements = function(u) {
		var _r, t, u, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; t = $f.t; u = $f.u; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		if ($interfaceIsEqual(u, $ifaceNil)) {
			$panic(new $String("reflect: nil type passed to Type.Implements"));
		}
		_r = u.Kind(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ if (!((_r === 20))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!((_r === 20))) { */ case 1:
			$panic(new $String("reflect: non-interface type passed to Type.Implements"));
		/* } */ case 2:
		$s = -1; return implements$1($assertType(u, ptrType$1), t);
		/* */ } return; } if ($f === undefined) { $f = { $blk: rtype.ptr.prototype.Implements }; } $f._r = _r; $f.t = t; $f.u = u; $f.$s = $s; $f.$r = $r; return $f;
	};
	rtype.prototype.Implements = function(u) { return this.$val.Implements(u); };
	rtype.ptr.prototype.AssignableTo = function(u) {
		var _r, t, u, uu, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; t = $f.t; u = $f.u; uu = $f.uu; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		if ($interfaceIsEqual(u, $ifaceNil)) {
			$panic(new $String("reflect: nil type passed to Type.AssignableTo"));
		}
		uu = $assertType(u, ptrType$1);
		_r = directlyAssignable(uu, t); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r || implements$1(uu, t);
		/* */ } return; } if ($f === undefined) { $f = { $blk: rtype.ptr.prototype.AssignableTo }; } $f._r = _r; $f.t = t; $f.u = u; $f.uu = uu; $f.$s = $s; $f.$r = $r; return $f;
	};
	rtype.prototype.AssignableTo = function(u) { return this.$val.AssignableTo(u); };
	rtype.ptr.prototype.ConvertibleTo = function(u) {
		var _r, t, u, uu, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; t = $f.t; u = $f.u; uu = $f.uu; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		if ($interfaceIsEqual(u, $ifaceNil)) {
			$panic(new $String("reflect: nil type passed to Type.ConvertibleTo"));
		}
		uu = $assertType(u, ptrType$1);
		_r = convertOp(uu, t); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return !(_r === $throwNilPointerError);
		/* */ } return; } if ($f === undefined) { $f = { $blk: rtype.ptr.prototype.ConvertibleTo }; } $f._r = _r; $f.t = t; $f.u = u; $f.uu = uu; $f.$s = $s; $f.$r = $r; return $f;
	};
	rtype.prototype.ConvertibleTo = function(u) { return this.$val.ConvertibleTo(u); };
	implements$1 = function(T, V) {
		var T, V, i, i$1, j, j$1, t, tm, tm$1, tmName, tmName$1, tmPkgPath, tmPkgPath$1, v, v$1, vm, vm$1, vmName, vmName$1, vmPkgPath, vmPkgPath$1, vmethods, x, x$1, x$2;
		if (!((T.Kind() === 20))) {
			return false;
		}
		t = (T.kindType);
		if (t.methods.$length === 0) {
			return true;
		}
		if (V.Kind() === 20) {
			v = (V.kindType);
			i = 0;
			j = 0;
			while (true) {
				if (!(j < v.methods.$length)) { break; }
				tm = (x = t.methods, ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i]));
				tmName = $clone(t.rtype.nameOff(tm.name), name);
				vm = (x$1 = v.methods, ((j < 0 || j >= x$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + j]));
				vmName = $clone(V.nameOff(vm.name), name);
				if ($clone(vmName, name).name() === $clone(tmName, name).name() && V.typeOff(vm.typ) === t.rtype.typeOff(tm.typ)) {
					if (!$clone(tmName, name).isExported()) {
						tmPkgPath = $clone(tmName, name).pkgPath();
						if (tmPkgPath === "") {
							tmPkgPath = $clone(t.pkgPath, name).name();
						}
						vmPkgPath = $clone(vmName, name).pkgPath();
						if (vmPkgPath === "") {
							vmPkgPath = $clone(v.pkgPath, name).name();
						}
						if (!(tmPkgPath === vmPkgPath)) {
							j = j + (1) >> 0;
							continue;
						}
					}
					i = i + (1) >> 0;
					if (i >= t.methods.$length) {
						return true;
					}
				}
				j = j + (1) >> 0;
			}
			return false;
		}
		v$1 = V.uncommon();
		if (v$1 === ptrType$5.nil) {
			return false;
		}
		i$1 = 0;
		vmethods = v$1.methods();
		j$1 = 0;
		while (true) {
			if (!(j$1 < ((v$1.mcount >> 0)))) { break; }
			tm$1 = (x$2 = t.methods, ((i$1 < 0 || i$1 >= x$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + i$1]));
			tmName$1 = $clone(t.rtype.nameOff(tm$1.name), name);
			vm$1 = $clone(((j$1 < 0 || j$1 >= vmethods.$length) ? ($throwRuntimeError("index out of range"), undefined) : vmethods.$array[vmethods.$offset + j$1]), method);
			vmName$1 = $clone(V.nameOff(vm$1.name), name);
			if ($clone(vmName$1, name).name() === $clone(tmName$1, name).name() && V.typeOff(vm$1.mtyp) === t.rtype.typeOff(tm$1.typ)) {
				if (!$clone(tmName$1, name).isExported()) {
					tmPkgPath$1 = $clone(tmName$1, name).pkgPath();
					if (tmPkgPath$1 === "") {
						tmPkgPath$1 = $clone(t.pkgPath, name).name();
					}
					vmPkgPath$1 = $clone(vmName$1, name).pkgPath();
					if (vmPkgPath$1 === "") {
						vmPkgPath$1 = $clone(V.nameOff(v$1.pkgPath), name).name();
					}
					if (!(tmPkgPath$1 === vmPkgPath$1)) {
						j$1 = j$1 + (1) >> 0;
						continue;
					}
				}
				i$1 = i$1 + (1) >> 0;
				if (i$1 >= t.methods.$length) {
					return true;
				}
			}
			j$1 = j$1 + (1) >> 0;
		}
		return false;
	};
	directlyAssignable = function(T, V) {
		var T, V, _r, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; T = $f.T; V = $f.V; _r = $f._r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		if (T === V) {
			$s = -1; return true;
		}
		if (!(T.Name() === "") && !(V.Name() === "") || !((T.Kind() === V.Kind()))) {
			$s = -1; return false;
		}
		_r = haveIdenticalUnderlyingType(T, V, true); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: directlyAssignable }; } $f.T = T; $f.V = V; $f._r = _r; $f.$s = $s; $f.$r = $r; return $f;
	};
	haveIdenticalType = function(T, V, cmpTags) {
		var T, V, _arg, _arg$1, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _v, cmpTags, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; T = $f.T; V = $f.V; _arg = $f._arg; _arg$1 = $f._arg$1; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _v = $f._v; cmpTags = $f.cmpTags; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		if (cmpTags) {
			$s = -1; return $interfaceIsEqual(T, V);
		}
		_r = T.Name(); /* */ $s = 4; case 4: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = V.Name(); /* */ $s = 5; case 5: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		if (!(_r === _r$1)) { _v = true; $s = 3; continue s; }
		_r$2 = T.Kind(); /* */ $s = 6; case 6: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_r$3 = V.Kind(); /* */ $s = 7; case 7: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_v = !((_r$2 === _r$3)); case 3:
		/* */ if (_v) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (_v) { */ case 1:
			$s = -1; return false;
		/* } */ case 2:
		_r$4 = T.common(); /* */ $s = 8; case 8: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		_arg = _r$4;
		_r$5 = V.common(); /* */ $s = 9; case 9: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		_arg$1 = _r$5;
		_r$6 = haveIdenticalUnderlyingType(_arg, _arg$1, false); /* */ $s = 10; case 10: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
		$s = -1; return _r$6;
		/* */ } return; } if ($f === undefined) { $f = { $blk: haveIdenticalType }; } $f.T = T; $f.V = V; $f._arg = _arg; $f._arg$1 = _arg$1; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._v = _v; $f.cmpTags = cmpTags; $f.$s = $s; $f.$r = $r; return $f;
	};
	haveIdenticalUnderlyingType = function(T, V, cmpTags) {
		var T, V, _1, _i, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _ref, _v, _v$1, _v$2, _v$3, cmpTags, i, i$1, i$2, kind, t, t$1, t$2, tf, v, v$1, v$2, vf, x, x$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; T = $f.T; V = $f.V; _1 = $f._1; _i = $f._i; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _ref = $f._ref; _v = $f._v; _v$1 = $f._v$1; _v$2 = $f._v$2; _v$3 = $f._v$3; cmpTags = $f.cmpTags; i = $f.i; i$1 = $f.i$1; i$2 = $f.i$2; kind = $f.kind; t = $f.t; t$1 = $f.t$1; t$2 = $f.t$2; tf = $f.tf; v = $f.v; v$1 = $f.v$1; v$2 = $f.v$2; vf = $f.vf; x = $f.x; x$1 = $f.x$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		if (T === V) {
			$s = -1; return true;
		}
		kind = T.Kind();
		if (!((kind === V.Kind()))) {
			$s = -1; return false;
		}
		if (1 <= kind && kind <= 16 || (kind === 24) || (kind === 26)) {
			$s = -1; return true;
		}
			_1 = kind;
			/* */ if (_1 === (17)) { $s = 2; continue; }
			/* */ if (_1 === (18)) { $s = 3; continue; }
			/* */ if (_1 === (19)) { $s = 4; continue; }
			/* */ if (_1 === (20)) { $s = 5; continue; }
			/* */ if (_1 === (21)) { $s = 6; continue; }
			/* */ if ((_1 === (22)) || (_1 === (23))) { $s = 7; continue; }
			/* */ if (_1 === (25)) { $s = 8; continue; }
			/* */ $s = 9; continue;
			/* if (_1 === (17)) { */ case 2:
				if (!(T.Len() === V.Len())) { _v = false; $s = 10; continue s; }
				_r = haveIdenticalType(T.Elem(), V.Elem(), cmpTags); /* */ $s = 11; case 11: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				_v = _r; case 10:
				$s = -1; return _v;
			/* } else if (_1 === (18)) { */ case 3:
				if (!(V.ChanDir() === 3)) { _v$1 = false; $s = 14; continue s; }
				_r$1 = haveIdenticalType(T.Elem(), V.Elem(), cmpTags); /* */ $s = 15; case 15: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				_v$1 = _r$1; case 14:
				/* */ if (_v$1) { $s = 12; continue; }
				/* */ $s = 13; continue;
				/* if (_v$1) { */ case 12:
					$s = -1; return true;
				/* } */ case 13:
				if (!(V.ChanDir() === T.ChanDir())) { _v$2 = false; $s = 16; continue s; }
				_r$2 = haveIdenticalType(T.Elem(), V.Elem(), cmpTags); /* */ $s = 17; case 17: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				_v$2 = _r$2; case 16:
				$s = -1; return _v$2;
			/* } else if (_1 === (19)) { */ case 4:
				t = (T.kindType);
				v = (V.kindType);
				if (!((t.outCount === v.outCount)) || !((t.inCount === v.inCount))) {
					$s = -1; return false;
				}
				i = 0;
				/* while (true) { */ case 18:
					/* if (!(i < t.rtype.NumIn())) { break; } */ if(!(i < t.rtype.NumIn())) { $s = 19; continue; }
					_r$3 = haveIdenticalType(t.rtype.In(i), v.rtype.In(i), cmpTags); /* */ $s = 22; case 22: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
					/* */ if (!_r$3) { $s = 20; continue; }
					/* */ $s = 21; continue;
					/* if (!_r$3) { */ case 20:
						$s = -1; return false;
					/* } */ case 21:
					i = i + (1) >> 0;
				/* } */ $s = 18; continue; case 19:
				i$1 = 0;
				/* while (true) { */ case 23:
					/* if (!(i$1 < t.rtype.NumOut())) { break; } */ if(!(i$1 < t.rtype.NumOut())) { $s = 24; continue; }
					_r$4 = haveIdenticalType(t.rtype.Out(i$1), v.rtype.Out(i$1), cmpTags); /* */ $s = 27; case 27: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
					/* */ if (!_r$4) { $s = 25; continue; }
					/* */ $s = 26; continue;
					/* if (!_r$4) { */ case 25:
						$s = -1; return false;
					/* } */ case 26:
					i$1 = i$1 + (1) >> 0;
				/* } */ $s = 23; continue; case 24:
				$s = -1; return true;
			/* } else if (_1 === (20)) { */ case 5:
				t$1 = (T.kindType);
				v$1 = (V.kindType);
				if ((t$1.methods.$length === 0) && (v$1.methods.$length === 0)) {
					$s = -1; return true;
				}
				$s = -1; return false;
			/* } else if (_1 === (21)) { */ case 6:
				_r$5 = haveIdenticalType(T.Key(), V.Key(), cmpTags); /* */ $s = 29; case 29: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
				if (!(_r$5)) { _v$3 = false; $s = 28; continue s; }
				_r$6 = haveIdenticalType(T.Elem(), V.Elem(), cmpTags); /* */ $s = 30; case 30: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
				_v$3 = _r$6; case 28:
				$s = -1; return _v$3;
			/* } else if ((_1 === (22)) || (_1 === (23))) { */ case 7:
				_r$7 = haveIdenticalType(T.Elem(), V.Elem(), cmpTags); /* */ $s = 31; case 31: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
				$s = -1; return _r$7;
			/* } else if (_1 === (25)) { */ case 8:
				t$2 = (T.kindType);
				v$2 = (V.kindType);
				if (!((t$2.fields.$length === v$2.fields.$length))) {
					$s = -1; return false;
				}
				if (!($clone(t$2.pkgPath, name).name() === $clone(v$2.pkgPath, name).name())) {
					$s = -1; return false;
				}
				_ref = t$2.fields;
				_i = 0;
				/* while (true) { */ case 32:
					/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 33; continue; }
					i$2 = _i;
					tf = (x = t$2.fields, ((i$2 < 0 || i$2 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i$2]));
					vf = (x$1 = v$2.fields, ((i$2 < 0 || i$2 >= x$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + i$2]));
					if (!($clone(tf.name, name).name() === $clone(vf.name, name).name())) {
						$s = -1; return false;
					}
					_r$8 = haveIdenticalType(tf.typ, vf.typ, cmpTags); /* */ $s = 36; case 36: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
					/* */ if (!_r$8) { $s = 34; continue; }
					/* */ $s = 35; continue;
					/* if (!_r$8) { */ case 34:
						$s = -1; return false;
					/* } */ case 35:
					if (cmpTags && !($clone(tf.name, name).tag() === $clone(vf.name, name).tag())) {
						$s = -1; return false;
					}
					if (!((tf.offsetAnon === vf.offsetAnon))) {
						$s = -1; return false;
					}
					_i++;
				/* } */ $s = 32; continue; case 33:
				$s = -1; return true;
			/* } */ case 9:
		case 1:
		$s = -1; return false;
		/* */ } return; } if ($f === undefined) { $f = { $blk: haveIdenticalUnderlyingType }; } $f.T = T; $f.V = V; $f._1 = _1; $f._i = _i; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._ref = _ref; $f._v = _v; $f._v$1 = _v$1; $f._v$2 = _v$2; $f._v$3 = _v$3; $f.cmpTags = cmpTags; $f.i = i; $f.i$1 = i$1; $f.i$2 = i$2; $f.kind = kind; $f.t = t; $f.t$1 = t$1; $f.t$2 = t$2; $f.tf = tf; $f.v = v; $f.v$1 = v$1; $f.v$2 = v$2; $f.vf = vf; $f.x = x; $f.x$1 = x$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	toType = function(t) {
		var t;
		if (t === ptrType$1.nil) {
			return $ifaceNil;
		}
		return t;
	};
	ifaceIndir = function(t) {
		var t;
		return ((t.kind & 32) >>> 0) === 0;
	};
	flag.prototype.kind = function() {
		var f;
		f = this.$val;
		return ((((f & 31) >>> 0) >>> 0));
	};
	$ptrType(flag).prototype.kind = function() { return new flag(this.$get()).kind(); };
	flag.prototype.ro = function() {
		var f;
		f = this.$val;
		if (!((((f & 96) >>> 0) === 0))) {
			return 32;
		}
		return 0;
	};
	$ptrType(flag).prototype.ro = function() { return new flag(this.$get()).ro(); };
	Value.ptr.prototype.pointer = function() {
		var v;
		v = this;
		if (!((v.typ.size === 4)) || !v.typ.pointers()) {
			$panic(new $String("can't call pointer on a non-pointer Value"));
		}
		if (!((((v.flag & 128) >>> 0) === 0))) {
			return (v.ptr).$get();
		}
		return v.ptr;
	};
	Value.prototype.pointer = function() { return this.$val.pointer(); };
	ValueError.ptr.prototype.Error = function() {
		var e;
		e = this;
		if (e.Kind === 0) {
			return "reflect: call of " + e.Method + " on zero Value";
		}
		return "reflect: call of " + e.Method + " on " + new Kind(e.Kind).String() + " Value";
	};
	ValueError.prototype.Error = function() { return this.$val.Error(); };
	flag.prototype.mustBe = function(expected) {
		var expected, f;
		f = this.$val;
		if (!((new flag(f).kind() === expected))) {
			$panic(new ValueError.ptr(methodName(), new flag(f).kind()));
		}
	};
	$ptrType(flag).prototype.mustBe = function(expected) { return new flag(this.$get()).mustBe(expected); };
	flag.prototype.mustBeExported = function() {
		var f;
		f = this.$val;
		if (f === 0) {
			$panic(new ValueError.ptr(methodName(), 0));
		}
		if (!((((f & 96) >>> 0) === 0))) {
			$panic(new $String("reflect: " + methodName() + " using value obtained using unexported field"));
		}
	};
	$ptrType(flag).prototype.mustBeExported = function() { return new flag(this.$get()).mustBeExported(); };
	flag.prototype.mustBeAssignable = function() {
		var f;
		f = this.$val;
		if (f === 0) {
			$panic(new ValueError.ptr(methodName(), 0));
		}
		if (!((((f & 96) >>> 0) === 0))) {
			$panic(new $String("reflect: " + methodName() + " using value obtained using unexported field"));
		}
		if (((f & 256) >>> 0) === 0) {
			$panic(new $String("reflect: " + methodName() + " using unaddressable value"));
		}
	};
	$ptrType(flag).prototype.mustBeAssignable = function() { return new flag(this.$get()).mustBeAssignable(); };
	Value.ptr.prototype.Addr = function() {
		var v;
		v = this;
		if (((v.flag & 256) >>> 0) === 0) {
			$panic(new $String("reflect.Value.Addr of unaddressable value"));
		}
		return new Value.ptr(v.typ.ptrTo(), v.ptr, (new flag(v.flag).ro() | 22) >>> 0);
	};
	Value.prototype.Addr = function() { return this.$val.Addr(); };
	Value.ptr.prototype.Bool = function() {
		var v;
		v = this;
		new flag(v.flag).mustBe(1);
		return (v.ptr).$get();
	};
	Value.prototype.Bool = function() { return this.$val.Bool(); };
	Value.ptr.prototype.Bytes = function() {
		var _r, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		new flag(v.flag).mustBe(23);
		_r = v.typ.Elem().Kind(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ if (!((_r === 8))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!((_r === 8))) { */ case 1:
			$panic(new $String("reflect.Value.Bytes of non-byte slice"));
		/* } */ case 2:
		$s = -1; return (v.ptr).$get();
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.Bytes }; } $f._r = _r; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.Bytes = function() { return this.$val.Bytes(); };
	Value.ptr.prototype.runes = function() {
		var _r, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		new flag(v.flag).mustBe(23);
		_r = v.typ.Elem().Kind(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ if (!((_r === 5))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!((_r === 5))) { */ case 1:
			$panic(new $String("reflect.Value.Bytes of non-rune slice"));
		/* } */ case 2:
		$s = -1; return (v.ptr).$get();
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.runes }; } $f._r = _r; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.runes = function() { return this.$val.runes(); };
	Value.ptr.prototype.CanAddr = function() {
		var v;
		v = this;
		return !((((v.flag & 256) >>> 0) === 0));
	};
	Value.prototype.CanAddr = function() { return this.$val.CanAddr(); };
	Value.ptr.prototype.CanSet = function() {
		var v;
		v = this;
		return ((v.flag & 352) >>> 0) === 256;
	};
	Value.prototype.CanSet = function() { return this.$val.CanSet(); };
	Value.ptr.prototype.Call = function(in$1) {
		var _r, in$1, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; in$1 = $f.in$1; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		new flag(v.flag).mustBe(19);
		new flag(v.flag).mustBeExported();
		_r = $clone(v, Value).call("Call", in$1); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.Call }; } $f._r = _r; $f.in$1 = in$1; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.Call = function(in$1) { return this.$val.Call(in$1); };
	Value.ptr.prototype.CallSlice = function(in$1) {
		var _r, in$1, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; in$1 = $f.in$1; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		new flag(v.flag).mustBe(19);
		new flag(v.flag).mustBeExported();
		_r = $clone(v, Value).call("CallSlice", in$1); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.CallSlice }; } $f._r = _r; $f.in$1 = in$1; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.CallSlice = function(in$1) { return this.$val.CallSlice(in$1); };
	Value.ptr.prototype.Complex = function() {
		var _1, k, v, x;
		v = this;
		k = new flag(v.flag).kind();
		_1 = k;
		if (_1 === (15)) {
			return ((x = (v.ptr).$get(), new $Complex128(x.$real, x.$imag)));
		} else if (_1 === (16)) {
			return (v.ptr).$get();
		}
		$panic(new ValueError.ptr("reflect.Value.Complex", new flag(v.flag).kind()));
	};
	Value.prototype.Complex = function() { return this.$val.Complex(); };
	Value.ptr.prototype.FieldByIndex = function(index) {
		var _i, _r, _r$1, _r$2, _r$3, _ref, _v, i, index, v, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _ref = $f._ref; _v = $f._v; i = $f.i; index = $f.index; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		/* */ if (index.$length === 1) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (index.$length === 1) { */ case 1:
			_r = $clone(v, Value).Field((0 >= index.$length ? ($throwRuntimeError("index out of range"), undefined) : index.$array[index.$offset + 0])); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$s = -1; return _r;
		/* } */ case 2:
		new flag(v.flag).mustBe(25);
		_ref = index;
		_i = 0;
		/* while (true) { */ case 4:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 5; continue; }
			i = _i;
			x = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			/* */ if (i > 0) { $s = 6; continue; }
			/* */ $s = 7; continue;
			/* if (i > 0) { */ case 6:
				if (!($clone(v, Value).Kind() === 22)) { _v = false; $s = 10; continue s; }
				_r$1 = v.typ.Elem().Kind(); /* */ $s = 11; case 11: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				_v = _r$1 === 25; case 10:
				/* */ if (_v) { $s = 8; continue; }
				/* */ $s = 9; continue;
				/* if (_v) { */ case 8:
					if ($clone(v, Value).IsNil()) {
						$panic(new $String("reflect: indirection through nil pointer to embedded struct"));
					}
					_r$2 = $clone(v, Value).Elem(); /* */ $s = 12; case 12: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
					v = _r$2;
				/* } */ case 9:
			/* } */ case 7:
			_r$3 = $clone(v, Value).Field(x); /* */ $s = 13; case 13: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			v = _r$3;
			_i++;
		/* } */ $s = 4; continue; case 5:
		$s = -1; return v;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.FieldByIndex }; } $f._i = _i; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._ref = _ref; $f._v = _v; $f.i = i; $f.index = index; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.FieldByIndex = function(index) { return this.$val.FieldByIndex(index); };
	Value.ptr.prototype.FieldByName = function(name$1) {
		var _r, _r$1, _tuple, f, name$1, ok, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; f = $f.f; name$1 = $f.name$1; ok = $f.ok; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		new flag(v.flag).mustBe(25);
		_r = v.typ.FieldByName(name$1); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		f = $clone(_tuple[0], StructField);
		ok = _tuple[1];
		/* */ if (ok) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (ok) { */ case 2:
			_r$1 = $clone(v, Value).FieldByIndex(f.Index); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			$s = -1; return _r$1;
		/* } */ case 3:
		$s = -1; return new Value.ptr(ptrType$1.nil, 0, 0);
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.FieldByName }; } $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f.f = f; $f.name$1 = name$1; $f.ok = ok; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.FieldByName = function(name$1) { return this.$val.FieldByName(name$1); };
	Value.ptr.prototype.FieldByNameFunc = function(match) {
		var _r, _r$1, _tuple, f, match, ok, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; f = $f.f; match = $f.match; ok = $f.ok; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		_r = v.typ.FieldByNameFunc(match); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		f = $clone(_tuple[0], StructField);
		ok = _tuple[1];
		/* */ if (ok) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (ok) { */ case 2:
			_r$1 = $clone(v, Value).FieldByIndex(f.Index); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			$s = -1; return _r$1;
		/* } */ case 3:
		$s = -1; return new Value.ptr(ptrType$1.nil, 0, 0);
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.FieldByNameFunc }; } $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f.f = f; $f.match = match; $f.ok = ok; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.FieldByNameFunc = function(match) { return this.$val.FieldByNameFunc(match); };
	Value.ptr.prototype.Float = function() {
		var _1, k, v;
		v = this;
		k = new flag(v.flag).kind();
		_1 = k;
		if (_1 === (13)) {
			return ((v.ptr).$get());
		} else if (_1 === (14)) {
			return (v.ptr).$get();
		}
		$panic(new ValueError.ptr("reflect.Value.Float", new flag(v.flag).kind()));
	};
	Value.prototype.Float = function() { return this.$val.Float(); };
	Value.ptr.prototype.Int = function() {
		var _1, k, p, v;
		v = this;
		k = new flag(v.flag).kind();
		p = v.ptr;
		_1 = k;
		if (_1 === (2)) {
			return (new $Int64(0, (p).$get()));
		} else if (_1 === (3)) {
			return (new $Int64(0, (p).$get()));
		} else if (_1 === (4)) {
			return (new $Int64(0, (p).$get()));
		} else if (_1 === (5)) {
			return (new $Int64(0, (p).$get()));
		} else if (_1 === (6)) {
			return (p).$get();
		}
		$panic(new ValueError.ptr("reflect.Value.Int", new flag(v.flag).kind()));
	};
	Value.prototype.Int = function() { return this.$val.Int(); };
	Value.ptr.prototype.CanInterface = function() {
		var v;
		v = this;
		if (v.flag === 0) {
			$panic(new ValueError.ptr("reflect.Value.CanInterface", 0));
		}
		return ((v.flag & 96) >>> 0) === 0;
	};
	Value.prototype.CanInterface = function() { return this.$val.CanInterface(); };
	Value.ptr.prototype.Interface = function() {
		var _r, i, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; i = $f.i; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		i = $ifaceNil;
		v = this;
		_r = valueInterface($clone(v, Value), true); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		i = _r;
		$s = -1; return i;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.Interface }; } $f._r = _r; $f.i = i; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.Interface = function() { return this.$val.Interface(); };
	Value.ptr.prototype.IsValid = function() {
		var v;
		v = this;
		return !((v.flag === 0));
	};
	Value.prototype.IsValid = function() { return this.$val.IsValid(); };
	Value.ptr.prototype.Kind = function() {
		var v;
		v = this;
		return new flag(v.flag).kind();
	};
	Value.prototype.Kind = function() { return this.$val.Kind(); };
	Value.ptr.prototype.MapIndex = function(key) {
		var _r, c, e, fl, k, key, tt, typ, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; c = $f.c; e = $f.e; fl = $f.fl; k = $f.k; key = $f.key; tt = $f.tt; typ = $f.typ; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		new flag(v.flag).mustBe(21);
		tt = (v.typ.kindType);
		_r = $clone(key, Value).assignTo("reflect.Value.MapIndex", tt.key, 0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		key = _r;
		k = 0;
		if (!((((key.flag & 128) >>> 0) === 0))) {
			k = key.ptr;
		} else {
			k = ((key.$ptr_ptr || (key.$ptr_ptr = new ptrType$15(function() { return this.$target.ptr; }, function($v) { this.$target.ptr = $v; }, key))));
		}
		e = mapaccess(v.typ, $clone(v, Value).pointer(), k);
		if (e === 0) {
			$s = -1; return new Value.ptr(ptrType$1.nil, 0, 0);
		}
		typ = tt.elem;
		fl = new flag((((v.flag | key.flag) >>> 0))).ro();
		fl = (fl | (((typ.Kind() >>> 0)))) >>> 0;
		if (!ifaceIndir(typ)) {
			$s = -1; return new Value.ptr(typ, (e).$get(), fl);
		}
		c = unsafe_New(typ);
		typedmemmove(typ, c, e);
		$s = -1; return new Value.ptr(typ, c, (fl | 128) >>> 0);
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.MapIndex }; } $f._r = _r; $f.c = c; $f.e = e; $f.fl = fl; $f.k = k; $f.key = key; $f.tt = tt; $f.typ = typ; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.MapIndex = function(key) { return this.$val.MapIndex(key); };
	Value.ptr.prototype.MapKeys = function() {
		var _r, a, c, fl, i, it, key, keyType, m, mlen, tt, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; a = $f.a; c = $f.c; fl = $f.fl; i = $f.i; it = $f.it; key = $f.key; keyType = $f.keyType; m = $f.m; mlen = $f.mlen; tt = $f.tt; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		new flag(v.flag).mustBe(21);
		tt = (v.typ.kindType);
		keyType = tt.key;
		fl = (new flag(v.flag).ro() | ((keyType.Kind() >>> 0))) >>> 0;
		m = $clone(v, Value).pointer();
		mlen = 0;
		if (!(m === 0)) {
			mlen = maplen(m);
		}
		it = mapiterinit(v.typ, m);
		a = $makeSlice(sliceType$9, mlen);
		i = 0;
		i = 0;
		/* while (true) { */ case 1:
			/* if (!(i < a.$length)) { break; } */ if(!(i < a.$length)) { $s = 2; continue; }
			_r = mapiterkey(it); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			key = _r;
			if (key === 0) {
				/* break; */ $s = 2; continue;
			}
			if (ifaceIndir(keyType)) {
				c = unsafe_New(keyType);
				typedmemmove(keyType, c, key);
				((i < 0 || i >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + i] = new Value.ptr(keyType, c, (fl | 128) >>> 0));
			} else {
				((i < 0 || i >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + i] = new Value.ptr(keyType, (key).$get(), fl));
			}
			mapiternext(it);
			i = i + (1) >> 0;
		/* } */ $s = 1; continue; case 2:
		$s = -1; return $subslice(a, 0, i);
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.MapKeys }; } $f._r = _r; $f.a = a; $f.c = c; $f.fl = fl; $f.i = i; $f.it = it; $f.key = key; $f.keyType = keyType; $f.m = m; $f.mlen = mlen; $f.tt = tt; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.MapKeys = function() { return this.$val.MapKeys(); };
	Value.ptr.prototype.Method = function(i) {
		var _r, _v, fl, i, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _v = $f._v; fl = $f.fl; i = $f.i; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		if (v.typ === ptrType$1.nil) {
			$panic(new ValueError.ptr("reflect.Value.Method", 0));
		}
		if (!((((v.flag & 512) >>> 0) === 0))) { _v = true; $s = 3; continue s; }
		_r = v.typ.NumMethod(); /* */ $s = 4; case 4: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_v = ((i >>> 0)) >= ((_r >>> 0)); case 3:
		/* */ if (_v) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (_v) { */ case 1:
			$panic(new $String("reflect: Method index out of range"));
		/* } */ case 2:
		if ((v.typ.Kind() === 20) && $clone(v, Value).IsNil()) {
			$panic(new $String("reflect: Method on nil interface value"));
		}
		fl = (v.flag & 160) >>> 0;
		fl = (fl | (19)) >>> 0;
		fl = (fl | ((((((i >>> 0)) << 10 >>> 0) | 512) >>> 0))) >>> 0;
		$s = -1; return new Value.ptr(v.typ, v.ptr, fl);
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.Method }; } $f._r = _r; $f._v = _v; $f.fl = fl; $f.i = i; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.Method = function(i) { return this.$val.Method(i); };
	Value.ptr.prototype.NumMethod = function() {
		var _r, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		if (v.typ === ptrType$1.nil) {
			$panic(new ValueError.ptr("reflect.Value.NumMethod", 0));
		}
		if (!((((v.flag & 512) >>> 0) === 0))) {
			$s = -1; return 0;
		}
		_r = v.typ.NumMethod(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.NumMethod }; } $f._r = _r; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.NumMethod = function() { return this.$val.NumMethod(); };
	Value.ptr.prototype.MethodByName = function(name$1) {
		var _r, _r$1, _tuple, m, name$1, ok, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; m = $f.m; name$1 = $f.name$1; ok = $f.ok; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		if (v.typ === ptrType$1.nil) {
			$panic(new ValueError.ptr("reflect.Value.MethodByName", 0));
		}
		if (!((((v.flag & 512) >>> 0) === 0))) {
			$s = -1; return new Value.ptr(ptrType$1.nil, 0, 0);
		}
		_r = v.typ.MethodByName(name$1); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		m = $clone(_tuple[0], Method);
		ok = _tuple[1];
		if (!ok) {
			$s = -1; return new Value.ptr(ptrType$1.nil, 0, 0);
		}
		_r$1 = $clone(v, Value).Method(m.Index); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$s = -1; return _r$1;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.MethodByName }; } $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f.m = m; $f.name$1 = name$1; $f.ok = ok; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.MethodByName = function(name$1) { return this.$val.MethodByName(name$1); };
	Value.ptr.prototype.NumField = function() {
		var tt, v;
		v = this;
		new flag(v.flag).mustBe(25);
		tt = (v.typ.kindType);
		return tt.fields.$length;
	};
	Value.prototype.NumField = function() { return this.$val.NumField(); };
	Value.ptr.prototype.OverflowComplex = function(x) {
		var _1, k, v, x;
		v = this;
		k = new flag(v.flag).kind();
		_1 = k;
		if (_1 === (15)) {
			return overflowFloat32(x.$real) || overflowFloat32(x.$imag);
		} else if (_1 === (16)) {
			return false;
		}
		$panic(new ValueError.ptr("reflect.Value.OverflowComplex", new flag(v.flag).kind()));
	};
	Value.prototype.OverflowComplex = function(x) { return this.$val.OverflowComplex(x); };
	Value.ptr.prototype.OverflowFloat = function(x) {
		var _1, k, v, x;
		v = this;
		k = new flag(v.flag).kind();
		_1 = k;
		if (_1 === (13)) {
			return overflowFloat32(x);
		} else if (_1 === (14)) {
			return false;
		}
		$panic(new ValueError.ptr("reflect.Value.OverflowFloat", new flag(v.flag).kind()));
	};
	Value.prototype.OverflowFloat = function(x) { return this.$val.OverflowFloat(x); };
	overflowFloat32 = function(x) {
		var x;
		if (x < 0) {
			x = -x;
		}
		return 3.4028234663852886e+38 < x && x <= 1.7976931348623157e+308;
	};
	Value.ptr.prototype.OverflowInt = function(x) {
		var _1, bitSize, k, trunc, v, x;
		v = this;
		k = new flag(v.flag).kind();
		_1 = k;
		if ((_1 === (2)) || (_1 === (3)) || (_1 === (4)) || (_1 === (5)) || (_1 === (6))) {
			bitSize = $imul(v.typ.size, 8) >>> 0;
			trunc = $shiftRightInt64(($shiftLeft64(x, ((64 - bitSize >>> 0)))), ((64 - bitSize >>> 0)));
			return !((x.$high === trunc.$high && x.$low === trunc.$low));
		}
		$panic(new ValueError.ptr("reflect.Value.OverflowInt", new flag(v.flag).kind()));
	};
	Value.prototype.OverflowInt = function(x) { return this.$val.OverflowInt(x); };
	Value.ptr.prototype.OverflowUint = function(x) {
		var _1, bitSize, k, trunc, v, x;
		v = this;
		k = new flag(v.flag).kind();
		_1 = k;
		if ((_1 === (7)) || (_1 === (12)) || (_1 === (8)) || (_1 === (9)) || (_1 === (10)) || (_1 === (11))) {
			bitSize = $imul(v.typ.size, 8) >>> 0;
			trunc = $shiftRightUint64(($shiftLeft64(x, ((64 - bitSize >>> 0)))), ((64 - bitSize >>> 0)));
			return !((x.$high === trunc.$high && x.$low === trunc.$low));
		}
		$panic(new ValueError.ptr("reflect.Value.OverflowUint", new flag(v.flag).kind()));
	};
	Value.prototype.OverflowUint = function(x) { return this.$val.OverflowUint(x); };
	Value.ptr.prototype.Recv = function() {
		var _r, _tuple, ok, v, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; ok = $f.ok; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		x = new Value.ptr(ptrType$1.nil, 0, 0);
		ok = false;
		v = this;
		new flag(v.flag).mustBe(18);
		new flag(v.flag).mustBeExported();
		_r = $clone(v, Value).recv(false); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		x = _tuple[0];
		ok = _tuple[1];
		$s = -1; return [x, ok];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.Recv }; } $f._r = _r; $f._tuple = _tuple; $f.ok = ok; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.Recv = function() { return this.$val.Recv(); };
	Value.ptr.prototype.recv = function(nb) {
		var _r, _tuple, nb, ok, p, selected, t, tt, v, val, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; nb = $f.nb; ok = $f.ok; p = $f.p; selected = $f.selected; t = $f.t; tt = $f.tt; v = $f.v; val = $f.val; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		val = new Value.ptr(ptrType$1.nil, 0, 0);
		ok = false;
		v = this;
		tt = (v.typ.kindType);
		if ((((tt.dir >> 0)) & 1) === 0) {
			$panic(new $String("reflect: recv on send-only channel"));
		}
		t = tt.elem;
		val = new Value.ptr(t, 0, ((t.Kind() >>> 0)));
		p = 0;
		if (ifaceIndir(t)) {
			p = unsafe_New(t);
			val.ptr = p;
			val.flag = (val.flag | (128)) >>> 0;
		} else {
			p = ((val.$ptr_ptr || (val.$ptr_ptr = new ptrType$15(function() { return this.$target.ptr; }, function($v) { this.$target.ptr = $v; }, val))));
		}
		_r = chanrecv($clone(v, Value).pointer(), nb, p); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		selected = _tuple[0];
		ok = _tuple[1];
		if (!selected) {
			val = new Value.ptr(ptrType$1.nil, 0, 0);
		}
		$s = -1; return [val, ok];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.recv }; } $f._r = _r; $f._tuple = _tuple; $f.nb = nb; $f.ok = ok; $f.p = p; $f.selected = selected; $f.t = t; $f.tt = tt; $f.v = v; $f.val = val; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.recv = function(nb) { return this.$val.recv(nb); };
	Value.ptr.prototype.Send = function(x) {
		var _r, v, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		new flag(v.flag).mustBe(18);
		new flag(v.flag).mustBeExported();
		_r = $clone(v, Value).send($clone(x, Value), false); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r;
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.Send }; } $f._r = _r; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.Send = function(x) { return this.$val.Send(x); };
	Value.ptr.prototype.send = function(x, nb) {
		var _r, _r$1, nb, p, selected, tt, v, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; nb = $f.nb; p = $f.p; selected = $f.selected; tt = $f.tt; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		selected = false;
		v = this;
		tt = (v.typ.kindType);
		if ((((tt.dir >> 0)) & 2) === 0) {
			$panic(new $String("reflect: send on recv-only channel"));
		}
		new flag(x.flag).mustBeExported();
		_r = $clone(x, Value).assignTo("reflect.Value.Send", tt.elem, 0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		x = _r;
		p = 0;
		if (!((((x.flag & 128) >>> 0) === 0))) {
			p = x.ptr;
		} else {
			p = ((x.$ptr_ptr || (x.$ptr_ptr = new ptrType$15(function() { return this.$target.ptr; }, function($v) { this.$target.ptr = $v; }, x))));
		}
		_r$1 = chansend($clone(v, Value).pointer(), p, nb); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		selected = _r$1;
		$s = -1; return selected;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.send }; } $f._r = _r; $f._r$1 = _r$1; $f.nb = nb; $f.p = p; $f.selected = selected; $f.tt = tt; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.send = function(x, nb) { return this.$val.send(x, nb); };
	Value.ptr.prototype.SetBool = function(x) {
		var v, x;
		v = this;
		new flag(v.flag).mustBeAssignable();
		new flag(v.flag).mustBe(1);
		(v.ptr).$set(x);
	};
	Value.prototype.SetBool = function(x) { return this.$val.SetBool(x); };
	Value.ptr.prototype.setRunes = function(x) {
		var _r, v, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		new flag(v.flag).mustBeAssignable();
		new flag(v.flag).mustBe(23);
		_r = v.typ.Elem().Kind(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ if (!((_r === 5))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!((_r === 5))) { */ case 1:
			$panic(new $String("reflect.Value.setRunes of non-rune slice"));
		/* } */ case 2:
		(v.ptr).$set(x);
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.setRunes }; } $f._r = _r; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.setRunes = function(x) { return this.$val.setRunes(x); };
	Value.ptr.prototype.SetComplex = function(x) {
		var _1, k, v, x;
		v = this;
		new flag(v.flag).mustBeAssignable();
		k = new flag(v.flag).kind();
		_1 = k;
		if (_1 === (15)) {
			(v.ptr).$set((new $Complex64(x.$real, x.$imag)));
		} else if (_1 === (16)) {
			(v.ptr).$set(x);
		} else {
			$panic(new ValueError.ptr("reflect.Value.SetComplex", new flag(v.flag).kind()));
		}
	};
	Value.prototype.SetComplex = function(x) { return this.$val.SetComplex(x); };
	Value.ptr.prototype.SetFloat = function(x) {
		var _1, k, v, x;
		v = this;
		new flag(v.flag).mustBeAssignable();
		k = new flag(v.flag).kind();
		_1 = k;
		if (_1 === (13)) {
			(v.ptr).$set(($fround(x)));
		} else if (_1 === (14)) {
			(v.ptr).$set(x);
		} else {
			$panic(new ValueError.ptr("reflect.Value.SetFloat", new flag(v.flag).kind()));
		}
	};
	Value.prototype.SetFloat = function(x) { return this.$val.SetFloat(x); };
	Value.ptr.prototype.SetInt = function(x) {
		var _1, k, v, x;
		v = this;
		new flag(v.flag).mustBeAssignable();
		k = new flag(v.flag).kind();
		_1 = k;
		if (_1 === (2)) {
			(v.ptr).$set((((x.$low + ((x.$high >> 31) * 4294967296)) >> 0)));
		} else if (_1 === (3)) {
			(v.ptr).$set((((x.$low + ((x.$high >> 31) * 4294967296)) << 24 >> 24)));
		} else if (_1 === (4)) {
			(v.ptr).$set((((x.$low + ((x.$high >> 31) * 4294967296)) << 16 >> 16)));
		} else if (_1 === (5)) {
			(v.ptr).$set((((x.$low + ((x.$high >> 31) * 4294967296)) >> 0)));
		} else if (_1 === (6)) {
			(v.ptr).$set(x);
		} else {
			$panic(new ValueError.ptr("reflect.Value.SetInt", new flag(v.flag).kind()));
		}
	};
	Value.prototype.SetInt = function(x) { return this.$val.SetInt(x); };
	Value.ptr.prototype.SetMapIndex = function(key, val) {
		var _r, _r$1, e, k, key, tt, v, val, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; e = $f.e; k = $f.k; key = $f.key; tt = $f.tt; v = $f.v; val = $f.val; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		new flag(v.flag).mustBe(21);
		new flag(v.flag).mustBeExported();
		new flag(key.flag).mustBeExported();
		tt = (v.typ.kindType);
		_r = $clone(key, Value).assignTo("reflect.Value.SetMapIndex", tt.key, 0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		key = _r;
		k = 0;
		if (!((((key.flag & 128) >>> 0) === 0))) {
			k = key.ptr;
		} else {
			k = ((key.$ptr_ptr || (key.$ptr_ptr = new ptrType$15(function() { return this.$target.ptr; }, function($v) { this.$target.ptr = $v; }, key))));
		}
		if (val.typ === ptrType$1.nil) {
			mapdelete(v.typ, $clone(v, Value).pointer(), k);
			$s = -1; return;
		}
		new flag(val.flag).mustBeExported();
		_r$1 = $clone(val, Value).assignTo("reflect.Value.SetMapIndex", tt.elem, 0); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		val = _r$1;
		e = 0;
		if (!((((val.flag & 128) >>> 0) === 0))) {
			e = val.ptr;
		} else {
			e = ((val.$ptr_ptr || (val.$ptr_ptr = new ptrType$15(function() { return this.$target.ptr; }, function($v) { this.$target.ptr = $v; }, val))));
		}
		$r = mapassign(v.typ, $clone(v, Value).pointer(), k, e); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.SetMapIndex }; } $f._r = _r; $f._r$1 = _r$1; $f.e = e; $f.k = k; $f.key = key; $f.tt = tt; $f.v = v; $f.val = val; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.SetMapIndex = function(key, val) { return this.$val.SetMapIndex(key, val); };
	Value.ptr.prototype.SetUint = function(x) {
		var _1, k, v, x;
		v = this;
		new flag(v.flag).mustBeAssignable();
		k = new flag(v.flag).kind();
		_1 = k;
		if (_1 === (7)) {
			(v.ptr).$set(((x.$low >>> 0)));
		} else if (_1 === (8)) {
			(v.ptr).$set(((x.$low << 24 >>> 24)));
		} else if (_1 === (9)) {
			(v.ptr).$set(((x.$low << 16 >>> 16)));
		} else if (_1 === (10)) {
			(v.ptr).$set(((x.$low >>> 0)));
		} else if (_1 === (11)) {
			(v.ptr).$set(x);
		} else if (_1 === (12)) {
			(v.ptr).$set(((x.$low >>> 0)));
		} else {
			$panic(new ValueError.ptr("reflect.Value.SetUint", new flag(v.flag).kind()));
		}
	};
	Value.prototype.SetUint = function(x) { return this.$val.SetUint(x); };
	Value.ptr.prototype.SetPointer = function(x) {
		var v, x;
		v = this;
		new flag(v.flag).mustBeAssignable();
		new flag(v.flag).mustBe(26);
		(v.ptr).$set(x);
	};
	Value.prototype.SetPointer = function(x) { return this.$val.SetPointer(x); };
	Value.ptr.prototype.SetString = function(x) {
		var v, x;
		v = this;
		new flag(v.flag).mustBeAssignable();
		new flag(v.flag).mustBe(24);
		(v.ptr).$set(x);
	};
	Value.prototype.SetString = function(x) { return this.$val.SetString(x); };
	Value.ptr.prototype.String = function() {
		var _1, _r, _r$1, k, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _r = $f._r; _r$1 = $f._r$1; k = $f.k; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		k = new flag(v.flag).kind();
		_1 = k;
		if (_1 === (0)) {
			$s = -1; return "<invalid Value>";
		} else if (_1 === (24)) {
			$s = -1; return (v.ptr).$get();
		}
		_r = $clone(v, Value).Type(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = _r.String(); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$s = -1; return "<" + _r$1 + " Value>";
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.String }; } $f._1 = _1; $f._r = _r; $f._r$1 = _r$1; $f.k = k; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.String = function() { return this.$val.String(); };
	Value.ptr.prototype.TryRecv = function() {
		var _r, _tuple, ok, v, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; ok = $f.ok; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		x = new Value.ptr(ptrType$1.nil, 0, 0);
		ok = false;
		v = this;
		new flag(v.flag).mustBe(18);
		new flag(v.flag).mustBeExported();
		_r = $clone(v, Value).recv(true); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		x = _tuple[0];
		ok = _tuple[1];
		$s = -1; return [x, ok];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.TryRecv }; } $f._r = _r; $f._tuple = _tuple; $f.ok = ok; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.TryRecv = function() { return this.$val.TryRecv(); };
	Value.ptr.prototype.TrySend = function(x) {
		var _r, v, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		new flag(v.flag).mustBe(18);
		new flag(v.flag).mustBeExported();
		_r = $clone(v, Value).send($clone(x, Value), true); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.TrySend }; } $f._r = _r; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.TrySend = function(x) { return this.$val.TrySend(x); };
	Value.ptr.prototype.Type = function() {
		var _r, f, i, m, m$1, ms, tt, v, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; f = $f.f; i = $f.i; m = $f.m; m$1 = $f.m$1; ms = $f.ms; tt = $f.tt; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		f = v.flag;
		if (f === 0) {
			$panic(new ValueError.ptr("reflect.Value.Type", 0));
		}
		if (((f & 512) >>> 0) === 0) {
			$s = -1; return v.typ;
		}
		i = ((v.flag >> 0)) >> 10 >> 0;
		if (v.typ.Kind() === 20) {
			tt = (v.typ.kindType);
			if (((i >>> 0)) >= ((tt.methods.$length >>> 0))) {
				$panic(new $String("reflect: internal error: invalid method index"));
			}
			m = (x = tt.methods, ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i]));
			$s = -1; return v.typ.typeOff(m.typ);
		}
		_r = v.typ.exportedMethods(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		ms = _r;
		if (((i >>> 0)) >= ((ms.$length >>> 0))) {
			$panic(new $String("reflect: internal error: invalid method index"));
		}
		m$1 = $clone(((i < 0 || i >= ms.$length) ? ($throwRuntimeError("index out of range"), undefined) : ms.$array[ms.$offset + i]), method);
		$s = -1; return v.typ.typeOff(m$1.mtyp);
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.Type }; } $f._r = _r; $f.f = f; $f.i = i; $f.m = m; $f.m$1 = m$1; $f.ms = ms; $f.tt = tt; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.Type = function() { return this.$val.Type(); };
	Value.ptr.prototype.Uint = function() {
		var _1, k, p, v, x;
		v = this;
		k = new flag(v.flag).kind();
		p = v.ptr;
		_1 = k;
		if (_1 === (7)) {
			return (new $Uint64(0, (p).$get()));
		} else if (_1 === (8)) {
			return (new $Uint64(0, (p).$get()));
		} else if (_1 === (9)) {
			return (new $Uint64(0, (p).$get()));
		} else if (_1 === (10)) {
			return (new $Uint64(0, (p).$get()));
		} else if (_1 === (11)) {
			return (p).$get();
		} else if (_1 === (12)) {
			return ((x = (p).$get(), new $Uint64(0, x.constructor === Number ? x : 1)));
		}
		$panic(new ValueError.ptr("reflect.Value.Uint", new flag(v.flag).kind()));
	};
	Value.prototype.Uint = function() { return this.$val.Uint(); };
	Value.ptr.prototype.UnsafeAddr = function() {
		var v;
		v = this;
		if (v.typ === ptrType$1.nil) {
			$panic(new ValueError.ptr("reflect.Value.UnsafeAddr", 0));
		}
		if (((v.flag & 256) >>> 0) === 0) {
			$panic(new $String("reflect.Value.UnsafeAddr of unaddressable value"));
		}
		return (v.ptr);
	};
	Value.prototype.UnsafeAddr = function() { return this.$val.UnsafeAddr(); };
	MakeMapWithSize = function(typ, n) {
		var _r, _r$1, m, n, typ, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; m = $f.m; n = $f.n; typ = $f.typ; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = typ.Kind(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ if (!((_r === 21))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!((_r === 21))) { */ case 1:
			$panic(new $String("reflect.MakeMapWithSize of non-map type"));
		/* } */ case 2:
		m = makemap($assertType(typ, ptrType$1), n);
		_r$1 = typ.common(); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$s = -1; return new Value.ptr(_r$1, m, 21);
		/* */ } return; } if ($f === undefined) { $f = { $blk: MakeMapWithSize }; } $f._r = _r; $f._r$1 = _r$1; $f.m = m; $f.n = n; $f.typ = typ; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.MakeMapWithSize = MakeMapWithSize;
	Indirect = function(v) {
		var _r, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		if (!(($clone(v, Value).Kind() === 22))) {
			$s = -1; return v;
		}
		_r = $clone(v, Value).Elem(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Indirect }; } $f._r = _r; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Indirect = Indirect;
	New = function(typ) {
		var _r, _r$1, fl, ptr, typ, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; fl = $f.fl; ptr = $f.ptr; typ = $f.typ; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		if ($interfaceIsEqual(typ, $ifaceNil)) {
			$panic(new $String("reflect: New(nil)"));
		}
		ptr = unsafe_New($assertType(typ, ptrType$1));
		fl = 22;
		_r = typ.common(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = _r.ptrTo(); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$s = -1; return new Value.ptr(_r$1, ptr, fl);
		/* */ } return; } if ($f === undefined) { $f = { $blk: New }; } $f._r = _r; $f._r$1 = _r$1; $f.fl = fl; $f.ptr = ptr; $f.typ = typ; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.New = New;
	Value.ptr.prototype.Convert = function(t) {
		var _r, _r$1, _r$2, _r$3, _r$4, op, t, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; op = $f.op; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		/* */ if (!((((v.flag & 512) >>> 0) === 0))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!((((v.flag & 512) >>> 0) === 0))) { */ case 1:
			_r = makeMethodValue("Convert", $clone(v, Value)); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			v = _r;
		/* } */ case 2:
		_r$1 = t.common(); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$2 = convertOp(_r$1, v.typ); /* */ $s = 5; case 5: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		op = _r$2;
		/* */ if (op === $throwNilPointerError) { $s = 6; continue; }
		/* */ $s = 7; continue;
		/* if (op === $throwNilPointerError) { */ case 6:
			_r$3 = t.String(); /* */ $s = 8; case 8: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			$panic(new $String("reflect.Value.Convert: value of type " + v.typ.String() + " cannot be converted to type " + _r$3));
		/* } */ case 7:
		_r$4 = op($clone(v, Value), t); /* */ $s = 9; case 9: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		$s = -1; return _r$4;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.Convert }; } $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f.op = op; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.Convert = function(t) { return this.$val.Convert(t); };
	convertOp = function(dst, src) {
		var _1, _2, _3, _4, _5, _6, _7, _arg, _arg$1, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _v, _v$1, _v$2, dst, src, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _2 = $f._2; _3 = $f._3; _4 = $f._4; _5 = $f._5; _6 = $f._6; _7 = $f._7; _arg = $f._arg; _arg$1 = $f._arg$1; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _v = $f._v; _v$1 = $f._v$1; _v$2 = $f._v$2; dst = $f.dst; src = $f.src; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			_1 = src.Kind();
			/* */ if ((_1 === (2)) || (_1 === (3)) || (_1 === (4)) || (_1 === (5)) || (_1 === (6))) { $s = 2; continue; }
			/* */ if ((_1 === (7)) || (_1 === (8)) || (_1 === (9)) || (_1 === (10)) || (_1 === (11)) || (_1 === (12))) { $s = 3; continue; }
			/* */ if ((_1 === (13)) || (_1 === (14))) { $s = 4; continue; }
			/* */ if ((_1 === (15)) || (_1 === (16))) { $s = 5; continue; }
			/* */ if (_1 === (24)) { $s = 6; continue; }
			/* */ if (_1 === (23)) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if ((_1 === (2)) || (_1 === (3)) || (_1 === (4)) || (_1 === (5)) || (_1 === (6))) { */ case 2:
				_2 = dst.Kind();
				if ((_2 === (2)) || (_2 === (3)) || (_2 === (4)) || (_2 === (5)) || (_2 === (6)) || (_2 === (7)) || (_2 === (8)) || (_2 === (9)) || (_2 === (10)) || (_2 === (11)) || (_2 === (12))) {
					$s = -1; return cvtInt;
				} else if ((_2 === (13)) || (_2 === (14))) {
					$s = -1; return cvtIntFloat;
				} else if (_2 === (24)) {
					$s = -1; return cvtIntString;
				}
				$s = 8; continue;
			/* } else if ((_1 === (7)) || (_1 === (8)) || (_1 === (9)) || (_1 === (10)) || (_1 === (11)) || (_1 === (12))) { */ case 3:
				_3 = dst.Kind();
				if ((_3 === (2)) || (_3 === (3)) || (_3 === (4)) || (_3 === (5)) || (_3 === (6)) || (_3 === (7)) || (_3 === (8)) || (_3 === (9)) || (_3 === (10)) || (_3 === (11)) || (_3 === (12))) {
					$s = -1; return cvtUint;
				} else if ((_3 === (13)) || (_3 === (14))) {
					$s = -1; return cvtUintFloat;
				} else if (_3 === (24)) {
					$s = -1; return cvtUintString;
				}
				$s = 8; continue;
			/* } else if ((_1 === (13)) || (_1 === (14))) { */ case 4:
				_4 = dst.Kind();
				if ((_4 === (2)) || (_4 === (3)) || (_4 === (4)) || (_4 === (5)) || (_4 === (6))) {
					$s = -1; return cvtFloatInt;
				} else if ((_4 === (7)) || (_4 === (8)) || (_4 === (9)) || (_4 === (10)) || (_4 === (11)) || (_4 === (12))) {
					$s = -1; return cvtFloatUint;
				} else if ((_4 === (13)) || (_4 === (14))) {
					$s = -1; return cvtFloat;
				}
				$s = 8; continue;
			/* } else if ((_1 === (15)) || (_1 === (16))) { */ case 5:
				_5 = dst.Kind();
				if ((_5 === (15)) || (_5 === (16))) {
					$s = -1; return cvtComplex;
				}
				$s = 8; continue;
			/* } else if (_1 === (24)) { */ case 6:
				if (!(dst.Kind() === 23)) { _v = false; $s = 11; continue s; }
				_r = dst.Elem().PkgPath(); /* */ $s = 12; case 12: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				_v = _r === ""; case 11:
				/* */ if (_v) { $s = 9; continue; }
				/* */ $s = 10; continue;
				/* if (_v) { */ case 9:
						_r$1 = dst.Elem().Kind(); /* */ $s = 14; case 14: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
						_6 = _r$1;
						if (_6 === (8)) {
							$s = -1; return cvtStringBytes;
						} else if (_6 === (5)) {
							$s = -1; return cvtStringRunes;
						}
					case 13:
				/* } */ case 10:
				$s = 8; continue;
			/* } else if (_1 === (23)) { */ case 7:
				if (!(dst.Kind() === 24)) { _v$1 = false; $s = 17; continue s; }
				_r$2 = src.Elem().PkgPath(); /* */ $s = 18; case 18: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				_v$1 = _r$2 === ""; case 17:
				/* */ if (_v$1) { $s = 15; continue; }
				/* */ $s = 16; continue;
				/* if (_v$1) { */ case 15:
						_r$3 = src.Elem().Kind(); /* */ $s = 20; case 20: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
						_7 = _r$3;
						if (_7 === (8)) {
							$s = -1; return cvtBytesString;
						} else if (_7 === (5)) {
							$s = -1; return cvtRunesString;
						}
					case 19:
				/* } */ case 16:
			/* } */ case 8:
		case 1:
		_r$4 = haveIdenticalUnderlyingType(dst, src, false); /* */ $s = 23; case 23: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		/* */ if (_r$4) { $s = 21; continue; }
		/* */ $s = 22; continue;
		/* if (_r$4) { */ case 21:
			$s = -1; return cvtDirect;
		/* } */ case 22:
		if (!((dst.Kind() === 22) && dst.Name() === "" && (src.Kind() === 22) && src.Name() === "")) { _v$2 = false; $s = 26; continue s; }
		_r$5 = dst.Elem().common(); /* */ $s = 27; case 27: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		_arg = _r$5;
		_r$6 = src.Elem().common(); /* */ $s = 28; case 28: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
		_arg$1 = _r$6;
		_r$7 = haveIdenticalUnderlyingType(_arg, _arg$1, false); /* */ $s = 29; case 29: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
		_v$2 = _r$7; case 26:
		/* */ if (_v$2) { $s = 24; continue; }
		/* */ $s = 25; continue;
		/* if (_v$2) { */ case 24:
			$s = -1; return cvtDirect;
		/* } */ case 25:
		if (implements$1(dst, src)) {
			if (src.Kind() === 20) {
				$s = -1; return cvtI2I;
			}
			$s = -1; return cvtT2I;
		}
		$s = -1; return $throwNilPointerError;
		/* */ } return; } if ($f === undefined) { $f = { $blk: convertOp }; } $f._1 = _1; $f._2 = _2; $f._3 = _3; $f._4 = _4; $f._5 = _5; $f._6 = _6; $f._7 = _7; $f._arg = _arg; $f._arg$1 = _arg$1; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._v = _v; $f._v$1 = _v$1; $f._v$2 = _v$2; $f.dst = dst; $f.src = src; $f.$s = $s; $f.$r = $r; return $f;
	};
	makeFloat = function(f, v, t) {
		var _1, _r, f, ptr, t, typ, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _r = $f._r; f = $f.f; ptr = $f.ptr; t = $f.t; typ = $f.typ; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = t.common(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		typ = _r;
		ptr = unsafe_New(typ);
		_1 = typ.size;
		if (_1 === (4)) {
			(ptr).$set(($fround(v)));
		} else if (_1 === (8)) {
			(ptr).$set(v);
		}
		$s = -1; return new Value.ptr(typ, ptr, (((f | 128) >>> 0) | ((typ.Kind() >>> 0))) >>> 0);
		/* */ } return; } if ($f === undefined) { $f = { $blk: makeFloat }; } $f._1 = _1; $f._r = _r; $f.f = f; $f.ptr = ptr; $f.t = t; $f.typ = typ; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	makeComplex = function(f, v, t) {
		var _1, _r, f, ptr, t, typ, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _r = $f._r; f = $f.f; ptr = $f.ptr; t = $f.t; typ = $f.typ; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = t.common(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		typ = _r;
		ptr = unsafe_New(typ);
		_1 = typ.size;
		if (_1 === (8)) {
			(ptr).$set((new $Complex64(v.$real, v.$imag)));
		} else if (_1 === (16)) {
			(ptr).$set(v);
		}
		$s = -1; return new Value.ptr(typ, ptr, (((f | 128) >>> 0) | ((typ.Kind() >>> 0))) >>> 0);
		/* */ } return; } if ($f === undefined) { $f = { $blk: makeComplex }; } $f._1 = _1; $f._r = _r; $f.f = f; $f.ptr = ptr; $f.t = t; $f.typ = typ; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	makeString = function(f, v, t) {
		var _r, _r$1, f, ret, t, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; f = $f.f; ret = $f.ret; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = New(t); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = $clone(_r, Value).Elem(); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		ret = _r$1;
		$clone(ret, Value).SetString(v);
		ret.flag = (((ret.flag & ~256) >>> 0) | f) >>> 0;
		$s = -1; return ret;
		/* */ } return; } if ($f === undefined) { $f = { $blk: makeString }; } $f._r = _r; $f._r$1 = _r$1; $f.f = f; $f.ret = ret; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	makeBytes = function(f, v, t) {
		var _r, _r$1, f, ret, t, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; f = $f.f; ret = $f.ret; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = New(t); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = $clone(_r, Value).Elem(); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		ret = _r$1;
		$r = $clone(ret, Value).SetBytes(v); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		ret.flag = (((ret.flag & ~256) >>> 0) | f) >>> 0;
		$s = -1; return ret;
		/* */ } return; } if ($f === undefined) { $f = { $blk: makeBytes }; } $f._r = _r; $f._r$1 = _r$1; $f.f = f; $f.ret = ret; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	makeRunes = function(f, v, t) {
		var _r, _r$1, f, ret, t, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; f = $f.f; ret = $f.ret; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = New(t); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = $clone(_r, Value).Elem(); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		ret = _r$1;
		$r = $clone(ret, Value).setRunes(v); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		ret.flag = (((ret.flag & ~256) >>> 0) | f) >>> 0;
		$s = -1; return ret;
		/* */ } return; } if ($f === undefined) { $f = { $blk: makeRunes }; } $f._r = _r; $f._r$1 = _r$1; $f.f = f; $f.ret = ret; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	cvtInt = function(v, t) {
		var _r, t, v, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; t = $f.t; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = makeInt(new flag(v.flag).ro(), ((x = $clone(v, Value).Int(), new $Uint64(x.$high, x.$low))), t); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: cvtInt }; } $f._r = _r; $f.t = t; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	cvtUint = function(v, t) {
		var _r, t, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = makeInt(new flag(v.flag).ro(), $clone(v, Value).Uint(), t); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: cvtUint }; } $f._r = _r; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	cvtFloatInt = function(v, t) {
		var _r, t, v, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; t = $f.t; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = makeInt(new flag(v.flag).ro(), ((x = (new $Int64(0, $clone(v, Value).Float())), new $Uint64(x.$high, x.$low))), t); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: cvtFloatInt }; } $f._r = _r; $f.t = t; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	cvtFloatUint = function(v, t) {
		var _r, t, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = makeInt(new flag(v.flag).ro(), (new $Uint64(0, $clone(v, Value).Float())), t); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: cvtFloatUint }; } $f._r = _r; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	cvtIntFloat = function(v, t) {
		var _r, t, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = makeFloat(new flag(v.flag).ro(), ($flatten64($clone(v, Value).Int())), t); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: cvtIntFloat }; } $f._r = _r; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	cvtUintFloat = function(v, t) {
		var _r, t, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = makeFloat(new flag(v.flag).ro(), ($flatten64($clone(v, Value).Uint())), t); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: cvtUintFloat }; } $f._r = _r; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	cvtFloat = function(v, t) {
		var _r, t, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = makeFloat(new flag(v.flag).ro(), $clone(v, Value).Float(), t); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: cvtFloat }; } $f._r = _r; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	cvtComplex = function(v, t) {
		var _r, t, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = makeComplex(new flag(v.flag).ro(), $clone(v, Value).Complex(), t); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: cvtComplex }; } $f._r = _r; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	cvtIntString = function(v, t) {
		var _r, t, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = makeString(new flag(v.flag).ro(), ($encodeRune($clone(v, Value).Int().$low)), t); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: cvtIntString }; } $f._r = _r; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	cvtUintString = function(v, t) {
		var _r, t, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = makeString(new flag(v.flag).ro(), ($encodeRune($clone(v, Value).Uint().$low)), t); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: cvtUintString }; } $f._r = _r; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	cvtBytesString = function(v, t) {
		var _arg, _arg$1, _arg$2, _r, _r$1, t, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _r = $f._r; _r$1 = $f._r$1; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_arg = new flag(v.flag).ro();
		_r = $clone(v, Value).Bytes(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_arg$1 = ($bytesToString(_r));
		_arg$2 = t;
		_r$1 = makeString(_arg, _arg$1, _arg$2); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$s = -1; return _r$1;
		/* */ } return; } if ($f === undefined) { $f = { $blk: cvtBytesString }; } $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._r = _r; $f._r$1 = _r$1; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	cvtStringBytes = function(v, t) {
		var _arg, _arg$1, _arg$2, _r, _r$1, t, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _r = $f._r; _r$1 = $f._r$1; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_arg = new flag(v.flag).ro();
		_r = $clone(v, Value).String(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_arg$1 = (new sliceType$15($stringToBytes(_r)));
		_arg$2 = t;
		_r$1 = makeBytes(_arg, _arg$1, _arg$2); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$s = -1; return _r$1;
		/* */ } return; } if ($f === undefined) { $f = { $blk: cvtStringBytes }; } $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._r = _r; $f._r$1 = _r$1; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	cvtRunesString = function(v, t) {
		var _arg, _arg$1, _arg$2, _r, _r$1, t, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _r = $f._r; _r$1 = $f._r$1; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_arg = new flag(v.flag).ro();
		_r = $clone(v, Value).runes(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_arg$1 = ($runesToString(_r));
		_arg$2 = t;
		_r$1 = makeString(_arg, _arg$1, _arg$2); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$s = -1; return _r$1;
		/* */ } return; } if ($f === undefined) { $f = { $blk: cvtRunesString }; } $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._r = _r; $f._r$1 = _r$1; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	cvtStringRunes = function(v, t) {
		var _arg, _arg$1, _arg$2, _r, _r$1, t, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _r = $f._r; _r$1 = $f._r$1; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_arg = new flag(v.flag).ro();
		_r = $clone(v, Value).String(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_arg$1 = (new sliceType$17($stringToRunes(_r)));
		_arg$2 = t;
		_r$1 = makeRunes(_arg, _arg$1, _arg$2); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$s = -1; return _r$1;
		/* */ } return; } if ($f === undefined) { $f = { $blk: cvtStringRunes }; } $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._r = _r; $f._r$1 = _r$1; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	cvtT2I = function(v, typ) {
		var _r, _r$1, _r$2, _r$3, _r$4, target, typ, v, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; target = $f.target; typ = $f.typ; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = typ.common(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = unsafe_New(_r); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		target = _r$1;
		_r$2 = valueInterface($clone(v, Value), false); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		x = _r$2;
		_r$3 = typ.NumMethod(); /* */ $s = 7; case 7: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		/* */ if (_r$3 === 0) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (_r$3 === 0) { */ case 4:
			(target).$set(x);
			$s = 6; continue;
		/* } else { */ case 5:
			ifaceE2I($assertType(typ, ptrType$1), x, target);
		/* } */ case 6:
		_r$4 = typ.common(); /* */ $s = 8; case 8: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		$s = -1; return new Value.ptr(_r$4, target, (((new flag(v.flag).ro() | 128) >>> 0) | 20) >>> 0);
		/* */ } return; } if ($f === undefined) { $f = { $blk: cvtT2I }; } $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f.target = target; $f.typ = typ; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	cvtI2I = function(v, typ) {
		var _r, _r$1, _r$2, ret, typ, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; ret = $f.ret; typ = $f.typ; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		/* */ if ($clone(v, Value).IsNil()) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if ($clone(v, Value).IsNil()) { */ case 1:
			_r = Zero(typ); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			ret = _r;
			ret.flag = (ret.flag | (new flag(v.flag).ro())) >>> 0;
			$s = -1; return ret;
		/* } */ case 2:
		_r$1 = $clone(v, Value).Elem(); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$2 = cvtT2I($clone(_r$1, Value), typ); /* */ $s = 5; case 5: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		$s = -1; return _r$2;
		/* */ } return; } if ($f === undefined) { $f = { $blk: cvtI2I }; } $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.ret = ret; $f.typ = typ; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	ptrType$5.methods = [{prop: "methods", name: "methods", pkg: "reflect", typ: $funcType([], [sliceType$5], false)}];
	ptrType$16.methods = [{prop: "in$", name: "in", pkg: "reflect", typ: $funcType([], [sliceType$2], false)}, {prop: "out", name: "out", pkg: "reflect", typ: $funcType([], [sliceType$2], false)}];
	name.methods = [{prop: "name", name: "name", pkg: "reflect", typ: $funcType([], [$String], false)}, {prop: "tag", name: "tag", pkg: "reflect", typ: $funcType([], [$String], false)}, {prop: "pkgPath", name: "pkgPath", pkg: "reflect", typ: $funcType([], [$String], false)}, {prop: "isExported", name: "isExported", pkg: "reflect", typ: $funcType([], [$Bool], false)}, {prop: "data", name: "data", pkg: "reflect", typ: $funcType([$Int, $String], [ptrType$4], false)}, {prop: "nameLen", name: "nameLen", pkg: "reflect", typ: $funcType([], [$Int], false)}, {prop: "tagLen", name: "tagLen", pkg: "reflect", typ: $funcType([], [$Int], false)}];
	Kind.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$1.methods = [{prop: "uncommon", name: "uncommon", pkg: "reflect", typ: $funcType([], [ptrType$5], false)}, {prop: "nameOff", name: "nameOff", pkg: "reflect", typ: $funcType([nameOff], [name], false)}, {prop: "typeOff", name: "typeOff", pkg: "reflect", typ: $funcType([typeOff], [ptrType$1], false)}, {prop: "ptrTo", name: "ptrTo", pkg: "reflect", typ: $funcType([], [ptrType$1], false)}, {prop: "pointers", name: "pointers", pkg: "reflect", typ: $funcType([], [$Bool], false)}, {prop: "Comparable", name: "Comparable", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Method", name: "Method", pkg: "", typ: $funcType([$Int], [Method], false)}, {prop: "textOff", name: "textOff", pkg: "reflect", typ: $funcType([textOff], [$UnsafePointer], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Size", name: "Size", pkg: "", typ: $funcType([], [$Uintptr], false)}, {prop: "Bits", name: "Bits", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Align", name: "Align", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "FieldAlign", name: "FieldAlign", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Kind", name: "Kind", pkg: "", typ: $funcType([], [Kind], false)}, {prop: "common", name: "common", pkg: "reflect", typ: $funcType([], [ptrType$1], false)}, {prop: "exportedMethods", name: "exportedMethods", pkg: "reflect", typ: $funcType([], [sliceType$5], false)}, {prop: "NumMethod", name: "NumMethod", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "MethodByName", name: "MethodByName", pkg: "", typ: $funcType([$String], [Method, $Bool], false)}, {prop: "PkgPath", name: "PkgPath", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Name", name: "Name", pkg: "", typ: $funcType([], [$String], false)}, {prop: "ChanDir", name: "ChanDir", pkg: "", typ: $funcType([], [ChanDir], false)}, {prop: "IsVariadic", name: "IsVariadic", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Elem", name: "Elem", pkg: "", typ: $funcType([], [Type], false)}, {prop: "Field", name: "Field", pkg: "", typ: $funcType([$Int], [StructField], false)}, {prop: "FieldByIndex", name: "FieldByIndex", pkg: "", typ: $funcType([sliceType$13], [StructField], false)}, {prop: "FieldByName", name: "FieldByName", pkg: "", typ: $funcType([$String], [StructField, $Bool], false)}, {prop: "FieldByNameFunc", name: "FieldByNameFunc", pkg: "", typ: $funcType([funcType$3], [StructField, $Bool], false)}, {prop: "In", name: "In", pkg: "", typ: $funcType([$Int], [Type], false)}, {prop: "Key", name: "Key", pkg: "", typ: $funcType([], [Type], false)}, {prop: "Len", name: "Len", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "NumField", name: "NumField", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "NumIn", name: "NumIn", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "NumOut", name: "NumOut", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Out", name: "Out", pkg: "", typ: $funcType([$Int], [Type], false)}, {prop: "Implements", name: "Implements", pkg: "", typ: $funcType([Type], [$Bool], false)}, {prop: "AssignableTo", name: "AssignableTo", pkg: "", typ: $funcType([Type], [$Bool], false)}, {prop: "ConvertibleTo", name: "ConvertibleTo", pkg: "", typ: $funcType([Type], [$Bool], false)}];
	ChanDir.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$7.methods = [{prop: "Method", name: "Method", pkg: "", typ: $funcType([$Int], [Method], false)}, {prop: "NumMethod", name: "NumMethod", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "MethodByName", name: "MethodByName", pkg: "", typ: $funcType([$String], [Method, $Bool], false)}];
	ptrType$17.methods = [{prop: "offset", name: "offset", pkg: "reflect", typ: $funcType([], [$Uintptr], false)}, {prop: "anon", name: "anon", pkg: "reflect", typ: $funcType([], [$Bool], false)}];
	ptrType$9.methods = [{prop: "Field", name: "Field", pkg: "", typ: $funcType([$Int], [StructField], false)}, {prop: "FieldByIndex", name: "FieldByIndex", pkg: "", typ: $funcType([sliceType$13], [StructField], false)}, {prop: "FieldByNameFunc", name: "FieldByNameFunc", pkg: "", typ: $funcType([funcType$3], [StructField, $Bool], false)}, {prop: "FieldByName", name: "FieldByName", pkg: "", typ: $funcType([$String], [StructField, $Bool], false)}];
	StructTag.methods = [{prop: "Get", name: "Get", pkg: "", typ: $funcType([$String], [$String], false)}, {prop: "Lookup", name: "Lookup", pkg: "", typ: $funcType([$String], [$String, $Bool], false)}];
	Value.methods = [{prop: "object", name: "object", pkg: "reflect", typ: $funcType([], [ptrType$2], false)}, {prop: "assignTo", name: "assignTo", pkg: "reflect", typ: $funcType([$String, ptrType$1, $UnsafePointer], [Value], false)}, {prop: "call", name: "call", pkg: "reflect", typ: $funcType([$String, sliceType$9], [sliceType$9], false)}, {prop: "Cap", name: "Cap", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Elem", name: "Elem", pkg: "", typ: $funcType([], [Value], false)}, {prop: "Field", name: "Field", pkg: "", typ: $funcType([$Int], [Value], false)}, {prop: "Index", name: "Index", pkg: "", typ: $funcType([$Int], [Value], false)}, {prop: "InterfaceData", name: "InterfaceData", pkg: "", typ: $funcType([], [arrayType$12], false)}, {prop: "IsNil", name: "IsNil", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Len", name: "Len", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Pointer", name: "Pointer", pkg: "", typ: $funcType([], [$Uintptr], false)}, {prop: "Set", name: "Set", pkg: "", typ: $funcType([Value], [], false)}, {prop: "SetBytes", name: "SetBytes", pkg: "", typ: $funcType([sliceType$15], [], false)}, {prop: "SetCap", name: "SetCap", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "SetLen", name: "SetLen", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "Slice", name: "Slice", pkg: "", typ: $funcType([$Int, $Int], [Value], false)}, {prop: "Slice3", name: "Slice3", pkg: "", typ: $funcType([$Int, $Int, $Int], [Value], false)}, {prop: "Close", name: "Close", pkg: "", typ: $funcType([], [], false)}, {prop: "pointer", name: "pointer", pkg: "reflect", typ: $funcType([], [$UnsafePointer], false)}, {prop: "Addr", name: "Addr", pkg: "", typ: $funcType([], [Value], false)}, {prop: "Bool", name: "Bool", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Bytes", name: "Bytes", pkg: "", typ: $funcType([], [sliceType$15], false)}, {prop: "runes", name: "runes", pkg: "reflect", typ: $funcType([], [sliceType$17], false)}, {prop: "CanAddr", name: "CanAddr", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "CanSet", name: "CanSet", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Call", name: "Call", pkg: "", typ: $funcType([sliceType$9], [sliceType$9], false)}, {prop: "CallSlice", name: "CallSlice", pkg: "", typ: $funcType([sliceType$9], [sliceType$9], false)}, {prop: "Complex", name: "Complex", pkg: "", typ: $funcType([], [$Complex128], false)}, {prop: "FieldByIndex", name: "FieldByIndex", pkg: "", typ: $funcType([sliceType$13], [Value], false)}, {prop: "FieldByName", name: "FieldByName", pkg: "", typ: $funcType([$String], [Value], false)}, {prop: "FieldByNameFunc", name: "FieldByNameFunc", pkg: "", typ: $funcType([funcType$3], [Value], false)}, {prop: "Float", name: "Float", pkg: "", typ: $funcType([], [$Float64], false)}, {prop: "Int", name: "Int", pkg: "", typ: $funcType([], [$Int64], false)}, {prop: "CanInterface", name: "CanInterface", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Interface", name: "Interface", pkg: "", typ: $funcType([], [$emptyInterface], false)}, {prop: "IsValid", name: "IsValid", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Kind", name: "Kind", pkg: "", typ: $funcType([], [Kind], false)}, {prop: "MapIndex", name: "MapIndex", pkg: "", typ: $funcType([Value], [Value], false)}, {prop: "MapKeys", name: "MapKeys", pkg: "", typ: $funcType([], [sliceType$9], false)}, {prop: "Method", name: "Method", pkg: "", typ: $funcType([$Int], [Value], false)}, {prop: "NumMethod", name: "NumMethod", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "MethodByName", name: "MethodByName", pkg: "", typ: $funcType([$String], [Value], false)}, {prop: "NumField", name: "NumField", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "OverflowComplex", name: "OverflowComplex", pkg: "", typ: $funcType([$Complex128], [$Bool], false)}, {prop: "OverflowFloat", name: "OverflowFloat", pkg: "", typ: $funcType([$Float64], [$Bool], false)}, {prop: "OverflowInt", name: "OverflowInt", pkg: "", typ: $funcType([$Int64], [$Bool], false)}, {prop: "OverflowUint", name: "OverflowUint", pkg: "", typ: $funcType([$Uint64], [$Bool], false)}, {prop: "Recv", name: "Recv", pkg: "", typ: $funcType([], [Value, $Bool], false)}, {prop: "recv", name: "recv", pkg: "reflect", typ: $funcType([$Bool], [Value, $Bool], false)}, {prop: "Send", name: "Send", pkg: "", typ: $funcType([Value], [], false)}, {prop: "send", name: "send", pkg: "reflect", typ: $funcType([Value, $Bool], [$Bool], false)}, {prop: "SetBool", name: "SetBool", pkg: "", typ: $funcType([$Bool], [], false)}, {prop: "setRunes", name: "setRunes", pkg: "reflect", typ: $funcType([sliceType$17], [], false)}, {prop: "SetComplex", name: "SetComplex", pkg: "", typ: $funcType([$Complex128], [], false)}, {prop: "SetFloat", name: "SetFloat", pkg: "", typ: $funcType([$Float64], [], false)}, {prop: "SetInt", name: "SetInt", pkg: "", typ: $funcType([$Int64], [], false)}, {prop: "SetMapIndex", name: "SetMapIndex", pkg: "", typ: $funcType([Value, Value], [], false)}, {prop: "SetUint", name: "SetUint", pkg: "", typ: $funcType([$Uint64], [], false)}, {prop: "SetPointer", name: "SetPointer", pkg: "", typ: $funcType([$UnsafePointer], [], false)}, {prop: "SetString", name: "SetString", pkg: "", typ: $funcType([$String], [], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "TryRecv", name: "TryRecv", pkg: "", typ: $funcType([], [Value, $Bool], false)}, {prop: "TrySend", name: "TrySend", pkg: "", typ: $funcType([Value], [$Bool], false)}, {prop: "Type", name: "Type", pkg: "", typ: $funcType([], [Type], false)}, {prop: "Uint", name: "Uint", pkg: "", typ: $funcType([], [$Uint64], false)}, {prop: "UnsafeAddr", name: "UnsafeAddr", pkg: "", typ: $funcType([], [$Uintptr], false)}, {prop: "Convert", name: "Convert", pkg: "", typ: $funcType([Type], [Value], false)}];
	flag.methods = [{prop: "kind", name: "kind", pkg: "reflect", typ: $funcType([], [Kind], false)}, {prop: "ro", name: "ro", pkg: "reflect", typ: $funcType([], [flag], false)}, {prop: "mustBe", name: "mustBe", pkg: "reflect", typ: $funcType([Kind], [], false)}, {prop: "mustBeExported", name: "mustBeExported", pkg: "reflect", typ: $funcType([], [], false)}, {prop: "mustBeAssignable", name: "mustBeAssignable", pkg: "reflect", typ: $funcType([], [], false)}];
	ptrType$18.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	uncommonType.init("reflect", [{prop: "pkgPath", name: "pkgPath", anonymous: false, exported: false, typ: nameOff, tag: ""}, {prop: "mcount", name: "mcount", anonymous: false, exported: false, typ: $Uint16, tag: ""}, {prop: "_$2", name: "_", anonymous: false, exported: false, typ: $Uint16, tag: ""}, {prop: "moff", name: "moff", anonymous: false, exported: false, typ: $Uint32, tag: ""}, {prop: "_$4", name: "_", anonymous: false, exported: false, typ: $Uint32, tag: ""}, {prop: "_methods", name: "_methods", anonymous: false, exported: false, typ: sliceType$5, tag: ""}]);
	funcType.init("reflect", [{prop: "rtype", name: "rtype", anonymous: true, exported: false, typ: rtype, tag: "reflect:\"func\""}, {prop: "inCount", name: "inCount", anonymous: false, exported: false, typ: $Uint16, tag: ""}, {prop: "outCount", name: "outCount", anonymous: false, exported: false, typ: $Uint16, tag: ""}, {prop: "_in", name: "_in", anonymous: false, exported: false, typ: sliceType$2, tag: ""}, {prop: "_out", name: "_out", anonymous: false, exported: false, typ: sliceType$2, tag: ""}]);
	name.init("reflect", [{prop: "bytes", name: "bytes", anonymous: false, exported: false, typ: ptrType$4, tag: ""}]);
	nameData.init("reflect", [{prop: "name", name: "name", anonymous: false, exported: false, typ: $String, tag: ""}, {prop: "tag", name: "tag", anonymous: false, exported: false, typ: $String, tag: ""}, {prop: "exported", name: "exported", anonymous: false, exported: false, typ: $Bool, tag: ""}]);
	mapIter.init("reflect", [{prop: "t", name: "t", anonymous: false, exported: false, typ: Type, tag: ""}, {prop: "m", name: "m", anonymous: false, exported: false, typ: ptrType$2, tag: ""}, {prop: "keys", name: "keys", anonymous: false, exported: false, typ: ptrType$2, tag: ""}, {prop: "i", name: "i", anonymous: false, exported: false, typ: $Int, tag: ""}]);
	Type.init([{prop: "Align", name: "Align", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "AssignableTo", name: "AssignableTo", pkg: "", typ: $funcType([Type], [$Bool], false)}, {prop: "Bits", name: "Bits", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "ChanDir", name: "ChanDir", pkg: "", typ: $funcType([], [ChanDir], false)}, {prop: "Comparable", name: "Comparable", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "ConvertibleTo", name: "ConvertibleTo", pkg: "", typ: $funcType([Type], [$Bool], false)}, {prop: "Elem", name: "Elem", pkg: "", typ: $funcType([], [Type], false)}, {prop: "Field", name: "Field", pkg: "", typ: $funcType([$Int], [StructField], false)}, {prop: "FieldAlign", name: "FieldAlign", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "FieldByIndex", name: "FieldByIndex", pkg: "", typ: $funcType([sliceType$13], [StructField], false)}, {prop: "FieldByName", name: "FieldByName", pkg: "", typ: $funcType([$String], [StructField, $Bool], false)}, {prop: "FieldByNameFunc", name: "FieldByNameFunc", pkg: "", typ: $funcType([funcType$3], [StructField, $Bool], false)}, {prop: "Implements", name: "Implements", pkg: "", typ: $funcType([Type], [$Bool], false)}, {prop: "In", name: "In", pkg: "", typ: $funcType([$Int], [Type], false)}, {prop: "IsVariadic", name: "IsVariadic", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Key", name: "Key", pkg: "", typ: $funcType([], [Type], false)}, {prop: "Kind", name: "Kind", pkg: "", typ: $funcType([], [Kind], false)}, {prop: "Len", name: "Len", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Method", name: "Method", pkg: "", typ: $funcType([$Int], [Method], false)}, {prop: "MethodByName", name: "MethodByName", pkg: "", typ: $funcType([$String], [Method, $Bool], false)}, {prop: "Name", name: "Name", pkg: "", typ: $funcType([], [$String], false)}, {prop: "NumField", name: "NumField", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "NumIn", name: "NumIn", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "NumMethod", name: "NumMethod", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "NumOut", name: "NumOut", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Out", name: "Out", pkg: "", typ: $funcType([$Int], [Type], false)}, {prop: "PkgPath", name: "PkgPath", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Size", name: "Size", pkg: "", typ: $funcType([], [$Uintptr], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "common", name: "common", pkg: "reflect", typ: $funcType([], [ptrType$1], false)}, {prop: "uncommon", name: "uncommon", pkg: "reflect", typ: $funcType([], [ptrType$5], false)}]);
	rtype.init("reflect", [{prop: "size", name: "size", anonymous: false, exported: false, typ: $Uintptr, tag: ""}, {prop: "ptrdata", name: "ptrdata", anonymous: false, exported: false, typ: $Uintptr, tag: ""}, {prop: "hash", name: "hash", anonymous: false, exported: false, typ: $Uint32, tag: ""}, {prop: "tflag", name: "tflag", anonymous: false, exported: false, typ: tflag, tag: ""}, {prop: "align", name: "align", anonymous: false, exported: false, typ: $Uint8, tag: ""}, {prop: "fieldAlign", name: "fieldAlign", anonymous: false, exported: false, typ: $Uint8, tag: ""}, {prop: "kind", name: "kind", anonymous: false, exported: false, typ: $Uint8, tag: ""}, {prop: "alg", name: "alg", anonymous: false, exported: false, typ: ptrType$3, tag: ""}, {prop: "gcdata", name: "gcdata", anonymous: false, exported: false, typ: ptrType$4, tag: ""}, {prop: "str", name: "str", anonymous: false, exported: false, typ: nameOff, tag: ""}, {prop: "ptrToThis", name: "ptrToThis", anonymous: false, exported: false, typ: typeOff, tag: ""}]);
	typeAlg.init("reflect", [{prop: "hash", name: "hash", anonymous: false, exported: false, typ: funcType$4, tag: ""}, {prop: "equal", name: "equal", anonymous: false, exported: false, typ: funcType$5, tag: ""}]);
	method.init("reflect", [{prop: "name", name: "name", anonymous: false, exported: false, typ: nameOff, tag: ""}, {prop: "mtyp", name: "mtyp", anonymous: false, exported: false, typ: typeOff, tag: ""}, {prop: "ifn", name: "ifn", anonymous: false, exported: false, typ: textOff, tag: ""}, {prop: "tfn", name: "tfn", anonymous: false, exported: false, typ: textOff, tag: ""}]);
	arrayType.init("reflect", [{prop: "rtype", name: "rtype", anonymous: true, exported: false, typ: rtype, tag: "reflect:\"array\""}, {prop: "elem", name: "elem", anonymous: false, exported: false, typ: ptrType$1, tag: ""}, {prop: "slice", name: "slice", anonymous: false, exported: false, typ: ptrType$1, tag: ""}, {prop: "len", name: "len", anonymous: false, exported: false, typ: $Uintptr, tag: ""}]);
	chanType.init("reflect", [{prop: "rtype", name: "rtype", anonymous: true, exported: false, typ: rtype, tag: "reflect:\"chan\""}, {prop: "elem", name: "elem", anonymous: false, exported: false, typ: ptrType$1, tag: ""}, {prop: "dir", name: "dir", anonymous: false, exported: false, typ: $Uintptr, tag: ""}]);
	imethod.init("reflect", [{prop: "name", name: "name", anonymous: false, exported: false, typ: nameOff, tag: ""}, {prop: "typ", name: "typ", anonymous: false, exported: false, typ: typeOff, tag: ""}]);
	interfaceType.init("reflect", [{prop: "rtype", name: "rtype", anonymous: true, exported: false, typ: rtype, tag: "reflect:\"interface\""}, {prop: "pkgPath", name: "pkgPath", anonymous: false, exported: false, typ: name, tag: ""}, {prop: "methods", name: "methods", anonymous: false, exported: false, typ: sliceType$6, tag: ""}]);
	mapType.init("reflect", [{prop: "rtype", name: "rtype", anonymous: true, exported: false, typ: rtype, tag: "reflect:\"map\""}, {prop: "key", name: "key", anonymous: false, exported: false, typ: ptrType$1, tag: ""}, {prop: "elem", name: "elem", anonymous: false, exported: false, typ: ptrType$1, tag: ""}, {prop: "bucket", name: "bucket", anonymous: false, exported: false, typ: ptrType$1, tag: ""}, {prop: "hmap", name: "hmap", anonymous: false, exported: false, typ: ptrType$1, tag: ""}, {prop: "keysize", name: "keysize", anonymous: false, exported: false, typ: $Uint8, tag: ""}, {prop: "indirectkey", name: "indirectkey", anonymous: false, exported: false, typ: $Uint8, tag: ""}, {prop: "valuesize", name: "valuesize", anonymous: false, exported: false, typ: $Uint8, tag: ""}, {prop: "indirectvalue", name: "indirectvalue", anonymous: false, exported: false, typ: $Uint8, tag: ""}, {prop: "bucketsize", name: "bucketsize", anonymous: false, exported: false, typ: $Uint16, tag: ""}, {prop: "reflexivekey", name: "reflexivekey", anonymous: false, exported: false, typ: $Bool, tag: ""}, {prop: "needkeyupdate", name: "needkeyupdate", anonymous: false, exported: false, typ: $Bool, tag: ""}]);
	ptrType.init("reflect", [{prop: "rtype", name: "rtype", anonymous: true, exported: false, typ: rtype, tag: "reflect:\"ptr\""}, {prop: "elem", name: "elem", anonymous: false, exported: false, typ: ptrType$1, tag: ""}]);
	sliceType.init("reflect", [{prop: "rtype", name: "rtype", anonymous: true, exported: false, typ: rtype, tag: "reflect:\"slice\""}, {prop: "elem", name: "elem", anonymous: false, exported: false, typ: ptrType$1, tag: ""}]);
	structField.init("reflect", [{prop: "name", name: "name", anonymous: false, exported: false, typ: name, tag: ""}, {prop: "typ", name: "typ", anonymous: false, exported: false, typ: ptrType$1, tag: ""}, {prop: "offsetAnon", name: "offsetAnon", anonymous: false, exported: false, typ: $Uintptr, tag: ""}]);
	structType.init("reflect", [{prop: "rtype", name: "rtype", anonymous: true, exported: false, typ: rtype, tag: "reflect:\"struct\""}, {prop: "pkgPath", name: "pkgPath", anonymous: false, exported: false, typ: name, tag: ""}, {prop: "fields", name: "fields", anonymous: false, exported: false, typ: sliceType$7, tag: ""}]);
	Method.init("", [{prop: "Name", name: "Name", anonymous: false, exported: true, typ: $String, tag: ""}, {prop: "PkgPath", name: "PkgPath", anonymous: false, exported: true, typ: $String, tag: ""}, {prop: "Type", name: "Type", anonymous: false, exported: true, typ: Type, tag: ""}, {prop: "Func", name: "Func", anonymous: false, exported: true, typ: Value, tag: ""}, {prop: "Index", name: "Index", anonymous: false, exported: true, typ: $Int, tag: ""}]);
	StructField.init("", [{prop: "Name", name: "Name", anonymous: false, exported: true, typ: $String, tag: ""}, {prop: "PkgPath", name: "PkgPath", anonymous: false, exported: true, typ: $String, tag: ""}, {prop: "Type", name: "Type", anonymous: false, exported: true, typ: Type, tag: ""}, {prop: "Tag", name: "Tag", anonymous: false, exported: true, typ: StructTag, tag: ""}, {prop: "Offset", name: "Offset", anonymous: false, exported: true, typ: $Uintptr, tag: ""}, {prop: "Index", name: "Index", anonymous: false, exported: true, typ: sliceType$13, tag: ""}, {prop: "Anonymous", name: "Anonymous", anonymous: false, exported: true, typ: $Bool, tag: ""}]);
	fieldScan.init("reflect", [{prop: "typ", name: "typ", anonymous: false, exported: false, typ: ptrType$9, tag: ""}, {prop: "index", name: "index", anonymous: false, exported: false, typ: sliceType$13, tag: ""}]);
	Value.init("reflect", [{prop: "typ", name: "typ", anonymous: false, exported: false, typ: ptrType$1, tag: ""}, {prop: "ptr", name: "ptr", anonymous: false, exported: false, typ: $UnsafePointer, tag: ""}, {prop: "flag", name: "flag", anonymous: true, exported: false, typ: flag, tag: ""}]);
	ValueError.init("", [{prop: "Method", name: "Method", anonymous: false, exported: true, typ: $String, tag: ""}, {prop: "Kind", name: "Kind", anonymous: false, exported: true, typ: Kind, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = errors.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = js.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = math.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = runtime.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = strconv.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = sync.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = unicode.$init(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = utf8.$init(); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		nameOffList = sliceType$1.nil;
		typeOffList = sliceType$2.nil;
		methodCache = new sync.Map.ptr(new sync.Mutex.ptr(0, 0), new $packages["sync/atomic"].Value.ptr($ifaceNil), false, 0);
		initialized = false;
		uncommonTypeMap = {};
		nameMap = {};
		callHelper = $assertType($internalize($call, $emptyInterface), funcType$1);
		selectHelper = $assertType($internalize($select, $emptyInterface), funcType$1);
		jsObjectPtr = reflectType($jsObjectPtr);
		kindNames = new sliceType$4(["invalid", "bool", "int", "int8", "int16", "int32", "int64", "uint", "uint8", "uint16", "uint32", "uint64", "uintptr", "float32", "float64", "complex64", "complex128", "array", "chan", "func", "interface", "map", "ptr", "slice", "string", "struct", "unsafe.Pointer"]);
		uint8Type = $assertType(TypeOf(new $Uint8(0)), ptrType$1);
		$r = init(); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["sort"] = (function() {
	var $pkg = {}, $init, reflect, IntSlice, StringSlice, sliceType, sliceType$2, Search, SearchInts, SearchStrings, insertionSort, siftDown, heapSort, medianOfThree, doPivot, quickSort, Sort, maxDepth, Ints, Strings;
	reflect = $packages["reflect"];
	IntSlice = $pkg.IntSlice = $newType(12, $kindSlice, "sort.IntSlice", true, "sort", true, null);
	StringSlice = $pkg.StringSlice = $newType(12, $kindSlice, "sort.StringSlice", true, "sort", true, null);
	sliceType = $sliceType($Int);
	sliceType$2 = $sliceType($String);
	Search = function(n, f) {
		var _r, _tmp, _tmp$1, f, h, i, j, n, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; f = $f.f; h = $f.h; i = $f.i; j = $f.j; n = $f.n; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_tmp = 0;
		_tmp$1 = n;
		i = _tmp;
		j = _tmp$1;
		/* while (true) { */ case 1:
			/* if (!(i < j)) { break; } */ if(!(i < j)) { $s = 2; continue; }
			h = ((((((i + j >> 0) >>> 0)) >>> 1 >>> 0) >> 0));
			_r = f(h); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			/* */ if (!_r) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (!_r) { */ case 3:
				i = h + 1 >> 0;
				$s = 5; continue;
			/* } else { */ case 4:
				j = h;
			/* } */ case 5:
		/* } */ $s = 1; continue; case 2:
		$s = -1; return i;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Search }; } $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f.f = f; $f.h = h; $f.i = i; $f.j = j; $f.n = n; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Search = Search;
	SearchInts = function(a, x) {
		var _r, a, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; a = $f.a; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		a = [a];
		x = [x];
		_r = Search(a[0].$length, (function(a, x) { return function(i) {
			var i;
			return ((i < 0 || i >= a[0].$length) ? ($throwRuntimeError("index out of range"), undefined) : a[0].$array[a[0].$offset + i]) >= x[0];
		}; })(a, x)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: SearchInts }; } $f._r = _r; $f.a = a; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.SearchInts = SearchInts;
	SearchStrings = function(a, x) {
		var _r, a, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; a = $f.a; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		a = [a];
		x = [x];
		_r = Search(a[0].$length, (function(a, x) { return function(i) {
			var i;
			return ((i < 0 || i >= a[0].$length) ? ($throwRuntimeError("index out of range"), undefined) : a[0].$array[a[0].$offset + i]) >= x[0];
		}; })(a, x)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: SearchStrings }; } $f._r = _r; $f.a = a; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.SearchStrings = SearchStrings;
	IntSlice.prototype.Search = function(x) {
		var _r, p, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; p = $f.p; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		_r = SearchInts($subslice(new sliceType(p.$array), p.$offset, p.$offset + p.$length), x); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: IntSlice.prototype.Search }; } $f._r = _r; $f.p = p; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	$ptrType(IntSlice).prototype.Search = function(x) { return this.$get().Search(x); };
	StringSlice.prototype.Search = function(x) {
		var _r, p, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; p = $f.p; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		_r = SearchStrings($subslice(new sliceType$2(p.$array), p.$offset, p.$offset + p.$length), x); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: StringSlice.prototype.Search }; } $f._r = _r; $f.p = p; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	$ptrType(StringSlice).prototype.Search = function(x) { return this.$get().Search(x); };
	insertionSort = function(data, a, b) {
		var _r, _v, a, b, data, i, j, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _v = $f._v; a = $f.a; b = $f.b; data = $f.data; i = $f.i; j = $f.j; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		i = a + 1 >> 0;
		/* while (true) { */ case 1:
			/* if (!(i < b)) { break; } */ if(!(i < b)) { $s = 2; continue; }
			j = i;
			/* while (true) { */ case 3:
				if (!(j > a)) { _v = false; $s = 5; continue s; }
				_r = data.Less(j, j - 1 >> 0); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				_v = _r; case 5:
				/* if (!(_v)) { break; } */ if(!(_v)) { $s = 4; continue; }
				$r = data.Swap(j, j - 1 >> 0); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				j = j - (1) >> 0;
			/* } */ $s = 3; continue; case 4:
			i = i + (1) >> 0;
		/* } */ $s = 1; continue; case 2:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: insertionSort }; } $f._r = _r; $f._v = _v; $f.a = a; $f.b = b; $f.data = data; $f.i = i; $f.j = j; $f.$s = $s; $f.$r = $r; return $f;
	};
	siftDown = function(data, lo, hi, first) {
		var _r, _r$1, _v, child, data, first, hi, lo, root, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _v = $f._v; child = $f.child; data = $f.data; first = $f.first; hi = $f.hi; lo = $f.lo; root = $f.root; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		root = lo;
		/* while (true) { */ case 1:
			child = ($imul(2, root)) + 1 >> 0;
			if (child >= hi) {
				/* break; */ $s = 2; continue;
			}
			if (!((child + 1 >> 0) < hi)) { _v = false; $s = 5; continue s; }
			_r = data.Less(first + child >> 0, (first + child >> 0) + 1 >> 0); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_v = _r; case 5:
			/* */ if (_v) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (_v) { */ case 3:
				child = child + (1) >> 0;
			/* } */ case 4:
			_r$1 = data.Less(first + root >> 0, first + child >> 0); /* */ $s = 9; case 9: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			/* */ if (!_r$1) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if (!_r$1) { */ case 7:
				$s = -1; return;
			/* } */ case 8:
			$r = data.Swap(first + root >> 0, first + child >> 0); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			root = child;
		/* } */ $s = 1; continue; case 2:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: siftDown }; } $f._r = _r; $f._r$1 = _r$1; $f._v = _v; $f.child = child; $f.data = data; $f.first = first; $f.hi = hi; $f.lo = lo; $f.root = root; $f.$s = $s; $f.$r = $r; return $f;
	};
	heapSort = function(data, a, b) {
		var _q, a, b, data, first, hi, i, i$1, lo, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _q = $f._q; a = $f.a; b = $f.b; data = $f.data; first = $f.first; hi = $f.hi; i = $f.i; i$1 = $f.i$1; lo = $f.lo; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		first = a;
		lo = 0;
		hi = b - a >> 0;
		i = (_q = ((hi - 1 >> 0)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
		/* while (true) { */ case 1:
			/* if (!(i >= 0)) { break; } */ if(!(i >= 0)) { $s = 2; continue; }
			$r = siftDown(data, i, hi, first); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			i = i - (1) >> 0;
		/* } */ $s = 1; continue; case 2:
		i$1 = hi - 1 >> 0;
		/* while (true) { */ case 4:
			/* if (!(i$1 >= 0)) { break; } */ if(!(i$1 >= 0)) { $s = 5; continue; }
			$r = data.Swap(first, first + i$1 >> 0); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = siftDown(data, lo, i$1, first); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			i$1 = i$1 - (1) >> 0;
		/* } */ $s = 4; continue; case 5:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: heapSort }; } $f._q = _q; $f.a = a; $f.b = b; $f.data = data; $f.first = first; $f.hi = hi; $f.i = i; $f.i$1 = i$1; $f.lo = lo; $f.$s = $s; $f.$r = $r; return $f;
	};
	medianOfThree = function(data, m1, m0, m2) {
		var _r, _r$1, _r$2, data, m0, m1, m2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; data = $f.data; m0 = $f.m0; m1 = $f.m1; m2 = $f.m2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = data.Less(m1, m0); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ if (_r) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (_r) { */ case 1:
			$r = data.Swap(m1, m0); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 2:
		_r$1 = data.Less(m2, m1); /* */ $s = 7; case 7: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		/* */ if (_r$1) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if (_r$1) { */ case 5:
			$r = data.Swap(m2, m1); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_r$2 = data.Less(m1, m0); /* */ $s = 11; case 11: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			/* */ if (_r$2) { $s = 9; continue; }
			/* */ $s = 10; continue;
			/* if (_r$2) { */ case 9:
				$r = data.Swap(m1, m0); /* */ $s = 12; case 12: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 10:
		/* } */ case 6:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: medianOfThree }; } $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.data = data; $f.m0 = m0; $f.m1 = m1; $f.m2 = m2; $f.$s = $s; $f.$r = $r; return $f;
	};
	doPivot = function(data, lo, hi) {
		var _q, _q$1, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _tmp, _tmp$1, _tmp$2, _tmp$3, _v, _v$1, _v$2, _v$3, _v$4, a, b, c, data, dups, hi, lo, m, midhi, midlo, pivot, protect, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _q = $f._q; _q$1 = $f._q$1; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _v = $f._v; _v$1 = $f._v$1; _v$2 = $f._v$2; _v$3 = $f._v$3; _v$4 = $f._v$4; a = $f.a; b = $f.b; c = $f.c; data = $f.data; dups = $f.dups; hi = $f.hi; lo = $f.lo; m = $f.m; midhi = $f.midhi; midlo = $f.midlo; pivot = $f.pivot; protect = $f.protect; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		midlo = 0;
		midhi = 0;
		m = ((((((lo + hi >> 0) >>> 0)) >>> 1 >>> 0) >> 0));
		/* */ if ((hi - lo >> 0) > 40) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if ((hi - lo >> 0) > 40) { */ case 1:
			s = (_q = ((hi - lo >> 0)) / 8, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
			$r = medianOfThree(data, lo, lo + s >> 0, lo + ($imul(2, s)) >> 0); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = medianOfThree(data, m, m - s >> 0, m + s >> 0); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = medianOfThree(data, hi - 1 >> 0, (hi - 1 >> 0) - s >> 0, (hi - 1 >> 0) - ($imul(2, s)) >> 0); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 2:
		$r = medianOfThree(data, lo, m, hi - 1 >> 0); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		pivot = lo;
		_tmp = lo + 1 >> 0;
		_tmp$1 = hi - 1 >> 0;
		a = _tmp;
		c = _tmp$1;
		/* while (true) { */ case 7:
			if (!(a < c)) { _v = false; $s = 9; continue s; }
			_r = data.Less(a, pivot); /* */ $s = 10; case 10: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_v = _r; case 9:
			/* if (!(_v)) { break; } */ if(!(_v)) { $s = 8; continue; }
			a = a + (1) >> 0;
		/* } */ $s = 7; continue; case 8:
		b = a;
		/* while (true) { */ case 11:
			/* while (true) { */ case 13:
				if (!(b < c)) { _v$1 = false; $s = 15; continue s; }
				_r$1 = data.Less(pivot, b); /* */ $s = 16; case 16: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				_v$1 = !_r$1; case 15:
				/* if (!(_v$1)) { break; } */ if(!(_v$1)) { $s = 14; continue; }
				b = b + (1) >> 0;
			/* } */ $s = 13; continue; case 14:
			/* while (true) { */ case 17:
				if (!(b < c)) { _v$2 = false; $s = 19; continue s; }
				_r$2 = data.Less(pivot, c - 1 >> 0); /* */ $s = 20; case 20: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				_v$2 = _r$2; case 19:
				/* if (!(_v$2)) { break; } */ if(!(_v$2)) { $s = 18; continue; }
				c = c - (1) >> 0;
			/* } */ $s = 17; continue; case 18:
			if (b >= c) {
				/* break; */ $s = 12; continue;
			}
			$r = data.Swap(b, c - 1 >> 0); /* */ $s = 21; case 21: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			b = b + (1) >> 0;
			c = c - (1) >> 0;
		/* } */ $s = 11; continue; case 12:
		protect = (hi - c >> 0) < 5;
		/* */ if (!protect && (hi - c >> 0) < (_q$1 = ((hi - lo >> 0)) / 4, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero"))) { $s = 22; continue; }
		/* */ $s = 23; continue;
		/* if (!protect && (hi - c >> 0) < (_q$1 = ((hi - lo >> 0)) / 4, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero"))) { */ case 22:
			dups = 0;
			_r$3 = data.Less(pivot, hi - 1 >> 0); /* */ $s = 26; case 26: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			/* */ if (!_r$3) { $s = 24; continue; }
			/* */ $s = 25; continue;
			/* if (!_r$3) { */ case 24:
				$r = data.Swap(c, hi - 1 >> 0); /* */ $s = 27; case 27: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				c = c + (1) >> 0;
				dups = dups + (1) >> 0;
			/* } */ case 25:
			_r$4 = data.Less(b - 1 >> 0, pivot); /* */ $s = 30; case 30: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			/* */ if (!_r$4) { $s = 28; continue; }
			/* */ $s = 29; continue;
			/* if (!_r$4) { */ case 28:
				b = b - (1) >> 0;
				dups = dups + (1) >> 0;
			/* } */ case 29:
			_r$5 = data.Less(m, pivot); /* */ $s = 33; case 33: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			/* */ if (!_r$5) { $s = 31; continue; }
			/* */ $s = 32; continue;
			/* if (!_r$5) { */ case 31:
				$r = data.Swap(m, b - 1 >> 0); /* */ $s = 34; case 34: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				b = b - (1) >> 0;
				dups = dups + (1) >> 0;
			/* } */ case 32:
			protect = dups > 1;
		/* } */ case 23:
		/* */ if (protect) { $s = 35; continue; }
		/* */ $s = 36; continue;
		/* if (protect) { */ case 35:
			/* while (true) { */ case 37:
				/* while (true) { */ case 39:
					if (!(a < b)) { _v$3 = false; $s = 41; continue s; }
					_r$6 = data.Less(b - 1 >> 0, pivot); /* */ $s = 42; case 42: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
					_v$3 = !_r$6; case 41:
					/* if (!(_v$3)) { break; } */ if(!(_v$3)) { $s = 40; continue; }
					b = b - (1) >> 0;
				/* } */ $s = 39; continue; case 40:
				/* while (true) { */ case 43:
					if (!(a < b)) { _v$4 = false; $s = 45; continue s; }
					_r$7 = data.Less(a, pivot); /* */ $s = 46; case 46: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
					_v$4 = _r$7; case 45:
					/* if (!(_v$4)) { break; } */ if(!(_v$4)) { $s = 44; continue; }
					a = a + (1) >> 0;
				/* } */ $s = 43; continue; case 44:
				if (a >= b) {
					/* break; */ $s = 38; continue;
				}
				$r = data.Swap(a, b - 1 >> 0); /* */ $s = 47; case 47: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				a = a + (1) >> 0;
				b = b - (1) >> 0;
			/* } */ $s = 37; continue; case 38:
		/* } */ case 36:
		$r = data.Swap(pivot, b - 1 >> 0); /* */ $s = 48; case 48: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_tmp$2 = b - 1 >> 0;
		_tmp$3 = c;
		midlo = _tmp$2;
		midhi = _tmp$3;
		$s = -1; return [midlo, midhi];
		/* */ } return; } if ($f === undefined) { $f = { $blk: doPivot }; } $f._q = _q; $f._q$1 = _q$1; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._v = _v; $f._v$1 = _v$1; $f._v$2 = _v$2; $f._v$3 = _v$3; $f._v$4 = _v$4; $f.a = a; $f.b = b; $f.c = c; $f.data = data; $f.dups = dups; $f.hi = hi; $f.lo = lo; $f.m = m; $f.midhi = midhi; $f.midlo = midlo; $f.pivot = pivot; $f.protect = protect; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	quickSort = function(data, a, b, maxDepth$1) {
		var _r, _r$1, _tuple, a, b, data, i, maxDepth$1, mhi, mlo, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; a = $f.a; b = $f.b; data = $f.data; i = $f.i; maxDepth$1 = $f.maxDepth$1; mhi = $f.mhi; mlo = $f.mlo; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		/* while (true) { */ case 1:
			/* if (!((b - a >> 0) > 12)) { break; } */ if(!((b - a >> 0) > 12)) { $s = 2; continue; }
			/* */ if (maxDepth$1 === 0) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (maxDepth$1 === 0) { */ case 3:
				$r = heapSort(data, a, b); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = -1; return;
			/* } */ case 4:
			maxDepth$1 = maxDepth$1 - (1) >> 0;
			_r = doPivot(data, a, b); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r;
			mlo = _tuple[0];
			mhi = _tuple[1];
			/* */ if ((mlo - a >> 0) < (b - mhi >> 0)) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if ((mlo - a >> 0) < (b - mhi >> 0)) { */ case 7:
				$r = quickSort(data, a, mlo, maxDepth$1); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				a = mhi;
				$s = 9; continue;
			/* } else { */ case 8:
				$r = quickSort(data, mhi, b, maxDepth$1); /* */ $s = 11; case 11: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				b = mlo;
			/* } */ case 9:
		/* } */ $s = 1; continue; case 2:
		/* */ if ((b - a >> 0) > 1) { $s = 12; continue; }
		/* */ $s = 13; continue;
		/* if ((b - a >> 0) > 1) { */ case 12:
			i = a + 6 >> 0;
			/* while (true) { */ case 14:
				/* if (!(i < b)) { break; } */ if(!(i < b)) { $s = 15; continue; }
				_r$1 = data.Less(i, i - 6 >> 0); /* */ $s = 18; case 18: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				/* */ if (_r$1) { $s = 16; continue; }
				/* */ $s = 17; continue;
				/* if (_r$1) { */ case 16:
					$r = data.Swap(i, i - 6 >> 0); /* */ $s = 19; case 19: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 17:
				i = i + (1) >> 0;
			/* } */ $s = 14; continue; case 15:
			$r = insertionSort(data, a, b); /* */ $s = 20; case 20: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 13:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: quickSort }; } $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f.a = a; $f.b = b; $f.data = data; $f.i = i; $f.maxDepth$1 = maxDepth$1; $f.mhi = mhi; $f.mlo = mlo; $f.$s = $s; $f.$r = $r; return $f;
	};
	Sort = function(data) {
		var _r, data, n, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; data = $f.data; n = $f.n; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = data.Len(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		n = _r;
		$r = quickSort(data, 0, n, maxDepth(n)); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Sort }; } $f._r = _r; $f.data = data; $f.n = n; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Sort = Sort;
	maxDepth = function(n) {
		var depth, i, n;
		depth = 0;
		i = n;
		while (true) {
			if (!(i > 0)) { break; }
			depth = depth + (1) >> 0;
			i = (i >> $min((1), 31)) >> 0;
		}
		return $imul(depth, 2);
	};
	IntSlice.prototype.Len = function() {
		var p;
		p = this;
		return p.$length;
	};
	$ptrType(IntSlice).prototype.Len = function() { return this.$get().Len(); };
	IntSlice.prototype.Less = function(i, j) {
		var i, j, p;
		p = this;
		return ((i < 0 || i >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + i]) < ((j < 0 || j >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + j]);
	};
	$ptrType(IntSlice).prototype.Less = function(i, j) { return this.$get().Less(i, j); };
	IntSlice.prototype.Swap = function(i, j) {
		var _tmp, _tmp$1, i, j, p;
		p = this;
		_tmp = ((j < 0 || j >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + j]);
		_tmp$1 = ((i < 0 || i >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + i]);
		((i < 0 || i >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + i] = _tmp);
		((j < 0 || j >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + j] = _tmp$1);
	};
	$ptrType(IntSlice).prototype.Swap = function(i, j) { return this.$get().Swap(i, j); };
	IntSlice.prototype.Sort = function() {
		var p, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; p = $f.p; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		$r = Sort(p); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: IntSlice.prototype.Sort }; } $f.p = p; $f.$s = $s; $f.$r = $r; return $f;
	};
	$ptrType(IntSlice).prototype.Sort = function() { return this.$get().Sort(); };
	StringSlice.prototype.Len = function() {
		var p;
		p = this;
		return p.$length;
	};
	$ptrType(StringSlice).prototype.Len = function() { return this.$get().Len(); };
	StringSlice.prototype.Less = function(i, j) {
		var i, j, p;
		p = this;
		return ((i < 0 || i >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + i]) < ((j < 0 || j >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + j]);
	};
	$ptrType(StringSlice).prototype.Less = function(i, j) { return this.$get().Less(i, j); };
	StringSlice.prototype.Swap = function(i, j) {
		var _tmp, _tmp$1, i, j, p;
		p = this;
		_tmp = ((j < 0 || j >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + j]);
		_tmp$1 = ((i < 0 || i >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + i]);
		((i < 0 || i >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + i] = _tmp);
		((j < 0 || j >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + j] = _tmp$1);
	};
	$ptrType(StringSlice).prototype.Swap = function(i, j) { return this.$get().Swap(i, j); };
	StringSlice.prototype.Sort = function() {
		var p, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; p = $f.p; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		$r = Sort(p); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: StringSlice.prototype.Sort }; } $f.p = p; $f.$s = $s; $f.$r = $r; return $f;
	};
	$ptrType(StringSlice).prototype.Sort = function() { return this.$get().Sort(); };
	Ints = function(a) {
		var a, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; a = $f.a; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = Sort(($subslice(new IntSlice(a.$array), a.$offset, a.$offset + a.$length))); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Ints }; } $f.a = a; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Ints = Ints;
	Strings = function(a) {
		var a, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; a = $f.a; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = Sort(($subslice(new StringSlice(a.$array), a.$offset, a.$offset + a.$length))); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Strings }; } $f.a = a; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Strings = Strings;
	IntSlice.methods = [{prop: "Search", name: "Search", pkg: "", typ: $funcType([$Int], [$Int], false)}, {prop: "Len", name: "Len", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Less", name: "Less", pkg: "", typ: $funcType([$Int, $Int], [$Bool], false)}, {prop: "Swap", name: "Swap", pkg: "", typ: $funcType([$Int, $Int], [], false)}, {prop: "Sort", name: "Sort", pkg: "", typ: $funcType([], [], false)}];
	StringSlice.methods = [{prop: "Search", name: "Search", pkg: "", typ: $funcType([$String], [$Int], false)}, {prop: "Len", name: "Len", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Less", name: "Less", pkg: "", typ: $funcType([$Int, $Int], [$Bool], false)}, {prop: "Swap", name: "Swap", pkg: "", typ: $funcType([$Int, $Int], [], false)}, {prop: "Sort", name: "Sort", pkg: "", typ: $funcType([], [], false)}];
	IntSlice.init($Int);
	StringSlice.init($String);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = reflect.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["container/heap"] = (function() {
	var $pkg = {}, $init, sort, Init, Push, Pop, Remove, up, down;
	sort = $packages["sort"];
	Init = function(h) {
		var _q, _r, _r$1, h, i, n, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _q = $f._q; _r = $f._r; _r$1 = $f._r$1; h = $f.h; i = $f.i; n = $f.n; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = h.Len(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		n = _r;
		i = (_q = n / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) - 1 >> 0;
		/* while (true) { */ case 2:
			/* if (!(i >= 0)) { break; } */ if(!(i >= 0)) { $s = 3; continue; }
			_r$1 = down(h, i, n); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_r$1;
			i = i - (1) >> 0;
		/* } */ $s = 2; continue; case 3:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Init }; } $f._q = _q; $f._r = _r; $f._r$1 = _r$1; $f.h = h; $f.i = i; $f.n = n; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Init = Init;
	Push = function(h, x) {
		var _arg, _arg$1, _r, h, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _arg = $f._arg; _arg$1 = $f._arg$1; _r = $f._r; h = $f.h; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = h.Push(x); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_arg = h;
		_r = h.Len(); /* */ $s = 2; case 2: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_arg$1 = _r - 1 >> 0;
		$r = up(_arg, _arg$1); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Push }; } $f._arg = _arg; $f._arg$1 = _arg$1; $f._r = _r; $f.h = h; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Push = Push;
	Pop = function(h) {
		var _r, _r$1, _r$2, h, n, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; h = $f.h; n = $f.n; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = h.Len(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		n = _r - 1 >> 0;
		$r = h.Swap(0, n); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_r$1 = down(h, 0, n); /* */ $s = 3; case 3: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$1;
		_r$2 = h.Pop(); /* */ $s = 4; case 4: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		$s = -1; return _r$2;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Pop }; } $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.h = h; $f.n = n; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Pop = Pop;
	Remove = function(h, i) {
		var _r, _r$1, _r$2, h, i, n, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; h = $f.h; i = $f.i; n = $f.n; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = h.Len(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		n = _r - 1 >> 0;
		/* */ if (!((n === i))) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!((n === i))) { */ case 2:
			$r = h.Swap(i, n); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_r$1 = down(h, i, n); /* */ $s = 7; case 7: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			/* */ if (!_r$1) { $s = 5; continue; }
			/* */ $s = 6; continue;
			/* if (!_r$1) { */ case 5:
				$r = up(h, i); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 6:
		/* } */ case 3:
		_r$2 = h.Pop(); /* */ $s = 9; case 9: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		$s = -1; return _r$2;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Remove }; } $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.h = h; $f.i = i; $f.n = n; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Remove = Remove;
	up = function(h, j) {
		var _q, _r, _v, h, i, j, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _q = $f._q; _r = $f._r; _v = $f._v; h = $f.h; i = $f.i; j = $f.j; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		/* while (true) { */ case 1:
			i = (_q = ((j - 1 >> 0)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
			if (i === j) { _v = true; $s = 5; continue s; }
			_r = h.Less(j, i); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_v = !_r; case 5:
			/* */ if (_v) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (_v) { */ case 3:
				/* break; */ $s = 2; continue;
			/* } */ case 4:
			$r = h.Swap(i, j); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			j = i;
		/* } */ $s = 1; continue; case 2:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: up }; } $f._q = _q; $f._r = _r; $f._v = _v; $f.h = h; $f.i = i; $f.j = j; $f.$s = $s; $f.$r = $r; return $f;
	};
	down = function(h, i0, n) {
		var _r, _r$1, _v, h, i, i0, j, j1, j2, n, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _v = $f._v; h = $f.h; i = $f.i; i0 = $f.i0; j = $f.j; j1 = $f.j1; j2 = $f.j2; n = $f.n; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		i = i0;
		/* while (true) { */ case 1:
			j1 = ($imul(2, i)) + 1 >> 0;
			if (j1 >= n || j1 < 0) {
				/* break; */ $s = 2; continue;
			}
			j = j1;
			j2 = j1 + 1 >> 0;
			if (!(j2 < n)) { _v = false; $s = 5; continue s; }
			_r = h.Less(j2, j1); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_v = _r; case 5:
			/* */ if (_v) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (_v) { */ case 3:
				j = j2;
			/* } */ case 4:
			_r$1 = h.Less(j, i); /* */ $s = 9; case 9: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			/* */ if (!_r$1) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if (!_r$1) { */ case 7:
				/* break; */ $s = 2; continue;
			/* } */ case 8:
			$r = h.Swap(i, j); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			i = j;
		/* } */ $s = 1; continue; case 2:
		$s = -1; return i > i0;
		/* */ } return; } if ($f === undefined) { $f = { $blk: down }; } $f._r = _r; $f._r$1 = _r$1; $f._v = _v; $f.h = h; $f.i = i; $f.i0 = i0; $f.j = j; $f.j1 = j1; $f.j2 = j2; $f.n = n; $f.$s = $s; $f.$r = $r; return $f;
	};
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = sort.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["encoding/binary"] = (function() {
	var $pkg = {}, $init, errors, io, math, reflect, bigEndian, sliceType, overflow;
	errors = $packages["errors"];
	io = $packages["io"];
	math = $packages["math"];
	reflect = $packages["reflect"];
	bigEndian = $pkg.bigEndian = $newType(0, $kindStruct, "binary.bigEndian", true, "encoding/binary", false, function() {
		this.$val = this;
		if (arguments.length === 0) {
			return;
		}
	});
	sliceType = $sliceType($Uint8);
	bigEndian.ptr.prototype.Uint16 = function(b) {
		var b;
		$unused((1 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 1]));
		return ((((1 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 1]) << 16 >>> 16)) | ((((0 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 0]) << 16 >>> 16)) << 8 << 16 >>> 16)) >>> 0;
	};
	bigEndian.prototype.Uint16 = function(b) { return this.$val.Uint16(b); };
	bigEndian.ptr.prototype.PutUint16 = function(b, v) {
		var b, v;
		$unused((1 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 1]));
		(0 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 0] = (((v >>> 8 << 16 >>> 16) << 24 >>> 24)));
		(1 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 1] = ((v << 24 >>> 24)));
	};
	bigEndian.prototype.PutUint16 = function(b, v) { return this.$val.PutUint16(b, v); };
	bigEndian.ptr.prototype.Uint32 = function(b) {
		var b;
		$unused((3 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 3]));
		return ((((((((3 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 3]) >>> 0)) | ((((2 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 2]) >>> 0)) << 8 >>> 0)) >>> 0) | ((((1 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 1]) >>> 0)) << 16 >>> 0)) >>> 0) | ((((0 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 0]) >>> 0)) << 24 >>> 0)) >>> 0;
	};
	bigEndian.prototype.Uint32 = function(b) { return this.$val.Uint32(b); };
	bigEndian.ptr.prototype.PutUint32 = function(b, v) {
		var b, v;
		$unused((3 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 3]));
		(0 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 0] = (((v >>> 24 >>> 0) << 24 >>> 24)));
		(1 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 1] = (((v >>> 16 >>> 0) << 24 >>> 24)));
		(2 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 2] = (((v >>> 8 >>> 0) << 24 >>> 24)));
		(3 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 3] = ((v << 24 >>> 24)));
	};
	bigEndian.prototype.PutUint32 = function(b, v) { return this.$val.PutUint32(b, v); };
	bigEndian.ptr.prototype.Uint64 = function(b) {
		var b, x, x$1, x$10, x$11, x$12, x$13, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9;
		$unused((7 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 7]));
		return (x = (x$1 = (x$2 = (x$3 = (x$4 = (x$5 = (x$6 = (new $Uint64(0, (7 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 7]))), x$7 = $shiftLeft64((new $Uint64(0, (6 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 6]))), 8), new $Uint64(x$6.$high | x$7.$high, (x$6.$low | x$7.$low) >>> 0)), x$8 = $shiftLeft64((new $Uint64(0, (5 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 5]))), 16), new $Uint64(x$5.$high | x$8.$high, (x$5.$low | x$8.$low) >>> 0)), x$9 = $shiftLeft64((new $Uint64(0, (4 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 4]))), 24), new $Uint64(x$4.$high | x$9.$high, (x$4.$low | x$9.$low) >>> 0)), x$10 = $shiftLeft64((new $Uint64(0, (3 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 3]))), 32), new $Uint64(x$3.$high | x$10.$high, (x$3.$low | x$10.$low) >>> 0)), x$11 = $shiftLeft64((new $Uint64(0, (2 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 2]))), 40), new $Uint64(x$2.$high | x$11.$high, (x$2.$low | x$11.$low) >>> 0)), x$12 = $shiftLeft64((new $Uint64(0, (1 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 1]))), 48), new $Uint64(x$1.$high | x$12.$high, (x$1.$low | x$12.$low) >>> 0)), x$13 = $shiftLeft64((new $Uint64(0, (0 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 0]))), 56), new $Uint64(x.$high | x$13.$high, (x.$low | x$13.$low) >>> 0));
	};
	bigEndian.prototype.Uint64 = function(b) { return this.$val.Uint64(b); };
	bigEndian.ptr.prototype.PutUint64 = function(b, v) {
		var b, v;
		$unused((7 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 7]));
		(0 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 0] = (($shiftRightUint64(v, 56).$low << 24 >>> 24)));
		(1 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 1] = (($shiftRightUint64(v, 48).$low << 24 >>> 24)));
		(2 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 2] = (($shiftRightUint64(v, 40).$low << 24 >>> 24)));
		(3 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 3] = (($shiftRightUint64(v, 32).$low << 24 >>> 24)));
		(4 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 4] = (($shiftRightUint64(v, 24).$low << 24 >>> 24)));
		(5 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 5] = (($shiftRightUint64(v, 16).$low << 24 >>> 24)));
		(6 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 6] = (($shiftRightUint64(v, 8).$low << 24 >>> 24)));
		(7 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 7] = ((v.$low << 24 >>> 24)));
	};
	bigEndian.prototype.PutUint64 = function(b, v) { return this.$val.PutUint64(b, v); };
	bigEndian.ptr.prototype.String = function() {
		return "BigEndian";
	};
	bigEndian.prototype.String = function() { return this.$val.String(); };
	bigEndian.ptr.prototype.GoString = function() {
		return "binary.BigEndian";
	};
	bigEndian.prototype.GoString = function() { return this.$val.GoString(); };
	bigEndian.methods = [{prop: "Uint16", name: "Uint16", pkg: "", typ: $funcType([sliceType], [$Uint16], false)}, {prop: "PutUint16", name: "PutUint16", pkg: "", typ: $funcType([sliceType, $Uint16], [], false)}, {prop: "Uint32", name: "Uint32", pkg: "", typ: $funcType([sliceType], [$Uint32], false)}, {prop: "PutUint32", name: "PutUint32", pkg: "", typ: $funcType([sliceType, $Uint32], [], false)}, {prop: "Uint64", name: "Uint64", pkg: "", typ: $funcType([sliceType], [$Uint64], false)}, {prop: "PutUint64", name: "PutUint64", pkg: "", typ: $funcType([sliceType, $Uint64], [], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "GoString", name: "GoString", pkg: "", typ: $funcType([], [$String], false)}];
	bigEndian.init("", []);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = errors.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = io.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = math.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = reflect.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$pkg.BigEndian = new bigEndian.ptr();
		overflow = errors.New("binary: varint overflows a 64-bit integer");
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["syscall"] = (function() {
	var $pkg = {}, $init, js, race, runtime, sync, SockaddrDatalink, mmapper, Errno, Sockaddr, SockaddrInet4, SockaddrInet6, SockaddrUnix, Timespec, Stat_t, RawSockaddrInet4, RawSockaddrInet6, RawSockaddrUnix, RawSockaddrDatalink, RawSockaddr, RawSockaddrAny, _Socklen, Linger, Iovec, IPMreq, IPv6Mreq, Msghdr, sliceType, sliceType$1, ptrType$2, arrayType, arrayType$1, ptrType$11, arrayType$3, arrayType$4, arrayType$5, arrayType$6, arrayType$10, ptrType$16, arrayType$11, ptrType$17, ptrType$18, structType, ptrType$19, ptrType$20, ptrType$26, mapType, funcType$2, funcType$3, ptrType$27, ptrType$28, ptrType$29, ptrType$30, ptrType$31, warningPrinted, lineBuffer, syscallModule, alreadyTriedToLoad, minusOne, envs, freebsdConfArch, minRoutingSockaddrLen, mapper, errEAGAIN, errEINVAL, errENOENT, ioSync, ioSync$24ptr, errors, init, printWarning, printToConsole, Exit, indexByte, runtime_envs, syscall, Syscall, Syscall6, BytePtrFromString, readInt, readIntBE, readIntLE, ParseDirent, CloseOnExec, SetNonblock, msanRead, msanWrite, rsaAlignOf, itoa, uitoa, ReadDirent, anyToSockaddr, Accept, Recvmsg, SendmsgN, Syscall9, direntIno, direntReclen, direntNamlen, Getdirentries, errnoErr, Read, Write, Recvfrom, Sendto, SetsockoptByte, SetsockoptInt, SetsockoptInet4Addr, SetsockoptIPMreq, SetsockoptIPv6Mreq, SetsockoptLinger, accept, setsockopt, Shutdown, recvfrom, sendto, recvmsg, sendmsg, fcntl, getdents, Close, Fchdir, Fchmod, Fchown, Fstat, Fsync, Ftruncate, Lstat, Pread, Pwrite, read, Seek, write, mmap, munmap;
	js = $packages["github.com/gopherjs/gopherjs/js"];
	race = $packages["internal/race"];
	runtime = $packages["runtime"];
	sync = $packages["sync"];
	SockaddrDatalink = $pkg.SockaddrDatalink = $newType(0, $kindStruct, "syscall.SockaddrDatalink", true, "syscall", true, function(Len_, Family_, Index_, Type_, Nlen_, Alen_, Slen_, Data_, raw_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Len = 0;
			this.Family = 0;
			this.Index = 0;
			this.Type = 0;
			this.Nlen = 0;
			this.Alen = 0;
			this.Slen = 0;
			this.Data = arrayType$3.zero();
			this.raw = new RawSockaddrDatalink.ptr(0, 0, 0, 0, 0, 0, 0, arrayType$3.zero());
			return;
		}
		this.Len = Len_;
		this.Family = Family_;
		this.Index = Index_;
		this.Type = Type_;
		this.Nlen = Nlen_;
		this.Alen = Alen_;
		this.Slen = Slen_;
		this.Data = Data_;
		this.raw = raw_;
	});
	mmapper = $pkg.mmapper = $newType(0, $kindStruct, "syscall.mmapper", true, "syscall", false, function(Mutex_, active_, mmap_, munmap_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Mutex = new sync.Mutex.ptr(0, 0);
			this.active = false;
			this.mmap = $throwNilPointerError;
			this.munmap = $throwNilPointerError;
			return;
		}
		this.Mutex = Mutex_;
		this.active = active_;
		this.mmap = mmap_;
		this.munmap = munmap_;
	});
	Errno = $pkg.Errno = $newType(4, $kindUintptr, "syscall.Errno", true, "syscall", true, null);
	Sockaddr = $pkg.Sockaddr = $newType(8, $kindInterface, "syscall.Sockaddr", true, "syscall", true, null);
	SockaddrInet4 = $pkg.SockaddrInet4 = $newType(0, $kindStruct, "syscall.SockaddrInet4", true, "syscall", true, function(Port_, Addr_, raw_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Port = 0;
			this.Addr = arrayType$1.zero();
			this.raw = new RawSockaddrInet4.ptr(0, 0, 0, arrayType$1.zero(), arrayType$6.zero());
			return;
		}
		this.Port = Port_;
		this.Addr = Addr_;
		this.raw = raw_;
	});
	SockaddrInet6 = $pkg.SockaddrInet6 = $newType(0, $kindStruct, "syscall.SockaddrInet6", true, "syscall", true, function(Port_, ZoneId_, Addr_, raw_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Port = 0;
			this.ZoneId = 0;
			this.Addr = arrayType.zero();
			this.raw = new RawSockaddrInet6.ptr(0, 0, 0, 0, arrayType.zero(), 0);
			return;
		}
		this.Port = Port_;
		this.ZoneId = ZoneId_;
		this.Addr = Addr_;
		this.raw = raw_;
	});
	SockaddrUnix = $pkg.SockaddrUnix = $newType(0, $kindStruct, "syscall.SockaddrUnix", true, "syscall", true, function(Name_, raw_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Name = "";
			this.raw = new RawSockaddrUnix.ptr(0, 0, arrayType$11.zero());
			return;
		}
		this.Name = Name_;
		this.raw = raw_;
	});
	Timespec = $pkg.Timespec = $newType(0, $kindStruct, "syscall.Timespec", true, "syscall", true, function(Sec_, Nsec_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Sec = new $Int64(0, 0);
			this.Nsec = new $Int64(0, 0);
			return;
		}
		this.Sec = Sec_;
		this.Nsec = Nsec_;
	});
	Stat_t = $pkg.Stat_t = $newType(0, $kindStruct, "syscall.Stat_t", true, "syscall", true, function(Mode_, Dev_, Ino_, Nlink_, Uid_, Gid_, Rdev_, Atim_, Mtim_, Ctim_, Size_, Blocks_, Blksize_, Flags_, Gen_, Pad_cgo_0_, X__st_birthtim_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Mode = 0;
			this.Dev = 0;
			this.Ino = new $Uint64(0, 0);
			this.Nlink = 0;
			this.Uid = 0;
			this.Gid = 0;
			this.Rdev = 0;
			this.Atim = new Timespec.ptr(new $Int64(0, 0), new $Int64(0, 0));
			this.Mtim = new Timespec.ptr(new $Int64(0, 0), new $Int64(0, 0));
			this.Ctim = new Timespec.ptr(new $Int64(0, 0), new $Int64(0, 0));
			this.Size = new $Int64(0, 0);
			this.Blocks = new $Int64(0, 0);
			this.Blksize = 0;
			this.Flags = 0;
			this.Gen = 0;
			this.Pad_cgo_0 = arrayType$1.zero();
			this.X__st_birthtim = new Timespec.ptr(new $Int64(0, 0), new $Int64(0, 0));
			return;
		}
		this.Mode = Mode_;
		this.Dev = Dev_;
		this.Ino = Ino_;
		this.Nlink = Nlink_;
		this.Uid = Uid_;
		this.Gid = Gid_;
		this.Rdev = Rdev_;
		this.Atim = Atim_;
		this.Mtim = Mtim_;
		this.Ctim = Ctim_;
		this.Size = Size_;
		this.Blocks = Blocks_;
		this.Blksize = Blksize_;
		this.Flags = Flags_;
		this.Gen = Gen_;
		this.Pad_cgo_0 = Pad_cgo_0_;
		this.X__st_birthtim = X__st_birthtim_;
	});
	RawSockaddrInet4 = $pkg.RawSockaddrInet4 = $newType(0, $kindStruct, "syscall.RawSockaddrInet4", true, "syscall", true, function(Len_, Family_, Port_, Addr_, Zero_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Len = 0;
			this.Family = 0;
			this.Port = 0;
			this.Addr = arrayType$1.zero();
			this.Zero = arrayType$6.zero();
			return;
		}
		this.Len = Len_;
		this.Family = Family_;
		this.Port = Port_;
		this.Addr = Addr_;
		this.Zero = Zero_;
	});
	RawSockaddrInet6 = $pkg.RawSockaddrInet6 = $newType(0, $kindStruct, "syscall.RawSockaddrInet6", true, "syscall", true, function(Len_, Family_, Port_, Flowinfo_, Addr_, Scope_id_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Len = 0;
			this.Family = 0;
			this.Port = 0;
			this.Flowinfo = 0;
			this.Addr = arrayType.zero();
			this.Scope_id = 0;
			return;
		}
		this.Len = Len_;
		this.Family = Family_;
		this.Port = Port_;
		this.Flowinfo = Flowinfo_;
		this.Addr = Addr_;
		this.Scope_id = Scope_id_;
	});
	RawSockaddrUnix = $pkg.RawSockaddrUnix = $newType(0, $kindStruct, "syscall.RawSockaddrUnix", true, "syscall", true, function(Len_, Family_, Path_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Len = 0;
			this.Family = 0;
			this.Path = arrayType$11.zero();
			return;
		}
		this.Len = Len_;
		this.Family = Family_;
		this.Path = Path_;
	});
	RawSockaddrDatalink = $pkg.RawSockaddrDatalink = $newType(0, $kindStruct, "syscall.RawSockaddrDatalink", true, "syscall", true, function(Len_, Family_, Index_, Type_, Nlen_, Alen_, Slen_, Data_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Len = 0;
			this.Family = 0;
			this.Index = 0;
			this.Type = 0;
			this.Nlen = 0;
			this.Alen = 0;
			this.Slen = 0;
			this.Data = arrayType$3.zero();
			return;
		}
		this.Len = Len_;
		this.Family = Family_;
		this.Index = Index_;
		this.Type = Type_;
		this.Nlen = Nlen_;
		this.Alen = Alen_;
		this.Slen = Slen_;
		this.Data = Data_;
	});
	RawSockaddr = $pkg.RawSockaddr = $newType(0, $kindStruct, "syscall.RawSockaddr", true, "syscall", true, function(Len_, Family_, Data_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Len = 0;
			this.Family = 0;
			this.Data = arrayType$4.zero();
			return;
		}
		this.Len = Len_;
		this.Family = Family_;
		this.Data = Data_;
	});
	RawSockaddrAny = $pkg.RawSockaddrAny = $newType(0, $kindStruct, "syscall.RawSockaddrAny", true, "syscall", true, function(Addr_, Pad_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Addr = new RawSockaddr.ptr(0, 0, arrayType$4.zero());
			this.Pad = arrayType$5.zero();
			return;
		}
		this.Addr = Addr_;
		this.Pad = Pad_;
	});
	_Socklen = $pkg._Socklen = $newType(4, $kindUint32, "syscall._Socklen", true, "syscall", false, null);
	Linger = $pkg.Linger = $newType(0, $kindStruct, "syscall.Linger", true, "syscall", true, function(Onoff_, Linger_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Onoff = 0;
			this.Linger = 0;
			return;
		}
		this.Onoff = Onoff_;
		this.Linger = Linger_;
	});
	Iovec = $pkg.Iovec = $newType(0, $kindStruct, "syscall.Iovec", true, "syscall", true, function(Base_, Len_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Base = ptrType$2.nil;
			this.Len = new $Uint64(0, 0);
			return;
		}
		this.Base = Base_;
		this.Len = Len_;
	});
	IPMreq = $pkg.IPMreq = $newType(0, $kindStruct, "syscall.IPMreq", true, "syscall", true, function(Multiaddr_, Interface_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Multiaddr = arrayType$1.zero();
			this.Interface = arrayType$1.zero();
			return;
		}
		this.Multiaddr = Multiaddr_;
		this.Interface = Interface_;
	});
	IPv6Mreq = $pkg.IPv6Mreq = $newType(0, $kindStruct, "syscall.IPv6Mreq", true, "syscall", true, function(Multiaddr_, Interface_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Multiaddr = arrayType.zero();
			this.Interface = 0;
			return;
		}
		this.Multiaddr = Multiaddr_;
		this.Interface = Interface_;
	});
	Msghdr = $pkg.Msghdr = $newType(0, $kindStruct, "syscall.Msghdr", true, "syscall", true, function(Name_, Namelen_, Pad_cgo_0_, Iov_, Iovlen_, Pad_cgo_1_, Control_, Controllen_, Flags_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Name = ptrType$2.nil;
			this.Namelen = 0;
			this.Pad_cgo_0 = arrayType$1.zero();
			this.Iov = ptrType$18.nil;
			this.Iovlen = 0;
			this.Pad_cgo_1 = arrayType$1.zero();
			this.Control = ptrType$2.nil;
			this.Controllen = 0;
			this.Flags = 0;
			return;
		}
		this.Name = Name_;
		this.Namelen = Namelen_;
		this.Pad_cgo_0 = Pad_cgo_0_;
		this.Iov = Iov_;
		this.Iovlen = Iovlen_;
		this.Pad_cgo_1 = Pad_cgo_1_;
		this.Control = Control_;
		this.Controllen = Controllen_;
		this.Flags = Flags_;
	});
	sliceType = $sliceType($Uint8);
	sliceType$1 = $sliceType($String);
	ptrType$2 = $ptrType($Uint8);
	arrayType = $arrayType($Uint8, 16);
	arrayType$1 = $arrayType($Uint8, 4);
	ptrType$11 = $ptrType(SockaddrDatalink);
	arrayType$3 = $arrayType($Int8, 24);
	arrayType$4 = $arrayType($Int8, 14);
	arrayType$5 = $arrayType($Int8, 92);
	arrayType$6 = $arrayType($Int8, 8);
	arrayType$10 = $arrayType($Uint8, 32);
	ptrType$16 = $ptrType($Uint16);
	arrayType$11 = $arrayType($Int8, 104);
	ptrType$17 = $ptrType(_Socklen);
	ptrType$18 = $ptrType(Iovec);
	structType = $structType("syscall", [{prop: "addr", name: "addr", anonymous: false, exported: false, typ: $Uintptr, tag: ""}, {prop: "len", name: "len", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "cap", name: "cap", anonymous: false, exported: false, typ: $Int, tag: ""}]);
	ptrType$19 = $ptrType($Int64);
	ptrType$20 = $ptrType($Int32);
	ptrType$26 = $ptrType(mmapper);
	mapType = $mapType(ptrType$2, sliceType);
	funcType$2 = $funcType([$Uintptr, $Uintptr, $Int, $Int, $Int, $Int64], [$Uintptr, $error], false);
	funcType$3 = $funcType([$Uintptr, $Uintptr], [$error], false);
	ptrType$27 = $ptrType(SockaddrInet4);
	ptrType$28 = $ptrType(SockaddrInet6);
	ptrType$29 = $ptrType(SockaddrUnix);
	ptrType$30 = $ptrType(Timespec);
	ptrType$31 = $ptrType(Msghdr);
	init = function() {
		$flushConsole = (function() {
			if (!((lineBuffer.$length === 0))) {
				$global.console.log($externalize(($bytesToString(lineBuffer)), $String));
				lineBuffer = sliceType.nil;
			}
		});
	};
	printWarning = function() {
		if (!warningPrinted) {
			$global.console.error($externalize("warning: system calls not available, see https://github.com/gopherjs/gopherjs/blob/master/doc/syscalls.md", $String));
		}
		warningPrinted = true;
	};
	printToConsole = function(b) {
		var b, goPrintToConsole, i;
		goPrintToConsole = $global.goPrintToConsole;
		if (!(goPrintToConsole === undefined)) {
			goPrintToConsole(b);
			return;
		}
		lineBuffer = $appendSlice(lineBuffer, b);
		while (true) {
			i = indexByte(lineBuffer, 10);
			if (i === -1) {
				break;
			}
			$global.console.log($externalize(($bytesToString($subslice(lineBuffer, 0, i))), $String));
			lineBuffer = $subslice(lineBuffer, (i + 1 >> 0));
		}
	};
	Exit = function(code) {
		var code;
		Syscall(1, ((code >>> 0)), 0, 0);
	};
	$pkg.Exit = Exit;
	indexByte = function(s, c) {
		var _i, _ref, b, c, i, s;
		_ref = s;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			b = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			if (b === c) {
				return i;
			}
			_i++;
		}
		return -1;
	};
	runtime_envs = function() {
		var envkeys, envs$1, i, jsEnv, key, process;
		process = $global.process;
		if (process === undefined) {
			return sliceType$1.nil;
		}
		jsEnv = process.env;
		envkeys = $global.Object.keys(jsEnv);
		envs$1 = $makeSlice(sliceType$1, $parseInt(envkeys.length));
		i = 0;
		while (true) {
			if (!(i < $parseInt(envkeys.length))) { break; }
			key = $internalize(envkeys[i], $String);
			((i < 0 || i >= envs$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : envs$1.$array[envs$1.$offset + i] = key + "=" + $internalize(jsEnv[$externalize(key, $String)], $String));
			i = i + (1) >> 0;
		}
		return envs$1;
	};
	syscall = function(name) {
		var name, require, $deferred;
		/* */ var $err = null; try { $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		$deferred.push([(function() {
			$recover();
		}), []]);
		if (syscallModule === null) {
			if (alreadyTriedToLoad) {
				return null;
			}
			alreadyTriedToLoad = true;
			require = $global.require;
			if (require === undefined) {
				$panic(new $String(""));
			}
			syscallModule = require($externalize("syscall", $String));
		}
		return syscallModule[$externalize(name, $String)];
		/* */ } catch(err) { $err = err; return null; } finally { $callDeferred($deferred, $err); }
	};
	Syscall = function(trap, a1, a2, a3) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, a1, a2, a3, array, err, f, r, r1, r2, slice, trap;
		r1 = 0;
		r2 = 0;
		err = 0;
		f = syscall("Syscall");
		if (!(f === null)) {
			r = f(trap, a1, a2, a3);
			_tmp = ((($parseInt(r[0]) >> 0) >>> 0));
			_tmp$1 = ((($parseInt(r[1]) >> 0) >>> 0));
			_tmp$2 = ((($parseInt(r[2]) >> 0) >>> 0));
			r1 = _tmp;
			r2 = _tmp$1;
			err = _tmp$2;
			return [r1, r2, err];
		}
		if ((trap === 4) && ((a1 === 1) || (a1 === 2))) {
			array = a2;
			slice = $makeSlice(sliceType, $parseInt(array.length));
			slice.$array = array;
			printToConsole(slice);
			_tmp$3 = (($parseInt(array.length) >>> 0));
			_tmp$4 = 0;
			_tmp$5 = 0;
			r1 = _tmp$3;
			r2 = _tmp$4;
			err = _tmp$5;
			return [r1, r2, err];
		}
		if (trap === 1) {
			runtime.Goexit();
		}
		printWarning();
		_tmp$6 = ((minusOne >>> 0));
		_tmp$7 = 0;
		_tmp$8 = 13;
		r1 = _tmp$6;
		r2 = _tmp$7;
		err = _tmp$8;
		return [r1, r2, err];
	};
	$pkg.Syscall = Syscall;
	Syscall6 = function(trap, a1, a2, a3, a4, a5, a6) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, a1, a2, a3, a4, a5, a6, err, f, r, r1, r2, trap;
		r1 = 0;
		r2 = 0;
		err = 0;
		f = syscall("Syscall6");
		if (!(f === null)) {
			r = f(trap, a1, a2, a3, a4, a5, a6);
			_tmp = ((($parseInt(r[0]) >> 0) >>> 0));
			_tmp$1 = ((($parseInt(r[1]) >> 0) >>> 0));
			_tmp$2 = ((($parseInt(r[2]) >> 0) >>> 0));
			r1 = _tmp;
			r2 = _tmp$1;
			err = _tmp$2;
			return [r1, r2, err];
		}
		if (!((trap === 202))) {
			printWarning();
		}
		_tmp$3 = ((minusOne >>> 0));
		_tmp$4 = 0;
		_tmp$5 = 13;
		r1 = _tmp$3;
		r2 = _tmp$4;
		err = _tmp$5;
		return [r1, r2, err];
	};
	$pkg.Syscall6 = Syscall6;
	BytePtrFromString = function(s) {
		var _i, _ref, array, b, i, s;
		array = new ($global.Uint8Array)(s.length + 1 >> 0);
		_ref = (new sliceType($stringToBytes(s)));
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			b = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			if (b === 0) {
				return [ptrType$2.nil, new Errno(22)];
			}
			array[i] = b;
			_i++;
		}
		array[s.length] = 0;
		return [((array)), $ifaceNil];
	};
	$pkg.BytePtrFromString = BytePtrFromString;
	readInt = function(b, off, size) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, b, off, ok, size, u;
		u = new $Uint64(0, 0);
		ok = false;
		if (b.$length < (((off + size >>> 0) >> 0))) {
			_tmp = new $Uint64(0, 0);
			_tmp$1 = false;
			u = _tmp;
			ok = _tmp$1;
			return [u, ok];
		}
		if (false) {
			_tmp$2 = readIntBE($subslice(b, off), size);
			_tmp$3 = true;
			u = _tmp$2;
			ok = _tmp$3;
			return [u, ok];
		}
		_tmp$4 = readIntLE($subslice(b, off), size);
		_tmp$5 = true;
		u = _tmp$4;
		ok = _tmp$5;
		return [u, ok];
	};
	readIntBE = function(b, size) {
		var _1, b, size, x, x$1, x$10, x$11, x$12, x$13, x$14, x$15, x$16, x$17, x$18, x$19, x$2, x$20, x$21, x$3, x$4, x$5, x$6, x$7, x$8, x$9;
		_1 = size;
		if (_1 === (1)) {
			return (new $Uint64(0, (0 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 0])));
		} else if (_1 === (2)) {
			$unused((1 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 1]));
			return (x = (new $Uint64(0, (1 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 1]))), x$1 = $shiftLeft64((new $Uint64(0, (0 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 0]))), 8), new $Uint64(x.$high | x$1.$high, (x.$low | x$1.$low) >>> 0));
		} else if (_1 === (4)) {
			$unused((3 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 3]));
			return (x$2 = (x$3 = (x$4 = (new $Uint64(0, (3 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 3]))), x$5 = $shiftLeft64((new $Uint64(0, (2 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 2]))), 8), new $Uint64(x$4.$high | x$5.$high, (x$4.$low | x$5.$low) >>> 0)), x$6 = $shiftLeft64((new $Uint64(0, (1 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 1]))), 16), new $Uint64(x$3.$high | x$6.$high, (x$3.$low | x$6.$low) >>> 0)), x$7 = $shiftLeft64((new $Uint64(0, (0 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 0]))), 24), new $Uint64(x$2.$high | x$7.$high, (x$2.$low | x$7.$low) >>> 0));
		} else if (_1 === (8)) {
			$unused((7 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 7]));
			return (x$8 = (x$9 = (x$10 = (x$11 = (x$12 = (x$13 = (x$14 = (new $Uint64(0, (7 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 7]))), x$15 = $shiftLeft64((new $Uint64(0, (6 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 6]))), 8), new $Uint64(x$14.$high | x$15.$high, (x$14.$low | x$15.$low) >>> 0)), x$16 = $shiftLeft64((new $Uint64(0, (5 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 5]))), 16), new $Uint64(x$13.$high | x$16.$high, (x$13.$low | x$16.$low) >>> 0)), x$17 = $shiftLeft64((new $Uint64(0, (4 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 4]))), 24), new $Uint64(x$12.$high | x$17.$high, (x$12.$low | x$17.$low) >>> 0)), x$18 = $shiftLeft64((new $Uint64(0, (3 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 3]))), 32), new $Uint64(x$11.$high | x$18.$high, (x$11.$low | x$18.$low) >>> 0)), x$19 = $shiftLeft64((new $Uint64(0, (2 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 2]))), 40), new $Uint64(x$10.$high | x$19.$high, (x$10.$low | x$19.$low) >>> 0)), x$20 = $shiftLeft64((new $Uint64(0, (1 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 1]))), 48), new $Uint64(x$9.$high | x$20.$high, (x$9.$low | x$20.$low) >>> 0)), x$21 = $shiftLeft64((new $Uint64(0, (0 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 0]))), 56), new $Uint64(x$8.$high | x$21.$high, (x$8.$low | x$21.$low) >>> 0));
		} else {
			$panic(new $String("syscall: readInt with unsupported size"));
		}
	};
	readIntLE = function(b, size) {
		var _1, b, size, x, x$1, x$10, x$11, x$12, x$13, x$14, x$15, x$16, x$17, x$18, x$19, x$2, x$20, x$21, x$3, x$4, x$5, x$6, x$7, x$8, x$9;
		_1 = size;
		if (_1 === (1)) {
			return (new $Uint64(0, (0 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 0])));
		} else if (_1 === (2)) {
			$unused((1 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 1]));
			return (x = (new $Uint64(0, (0 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 0]))), x$1 = $shiftLeft64((new $Uint64(0, (1 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 1]))), 8), new $Uint64(x.$high | x$1.$high, (x.$low | x$1.$low) >>> 0));
		} else if (_1 === (4)) {
			$unused((3 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 3]));
			return (x$2 = (x$3 = (x$4 = (new $Uint64(0, (0 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 0]))), x$5 = $shiftLeft64((new $Uint64(0, (1 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 1]))), 8), new $Uint64(x$4.$high | x$5.$high, (x$4.$low | x$5.$low) >>> 0)), x$6 = $shiftLeft64((new $Uint64(0, (2 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 2]))), 16), new $Uint64(x$3.$high | x$6.$high, (x$3.$low | x$6.$low) >>> 0)), x$7 = $shiftLeft64((new $Uint64(0, (3 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 3]))), 24), new $Uint64(x$2.$high | x$7.$high, (x$2.$low | x$7.$low) >>> 0));
		} else if (_1 === (8)) {
			$unused((7 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 7]));
			return (x$8 = (x$9 = (x$10 = (x$11 = (x$12 = (x$13 = (x$14 = (new $Uint64(0, (0 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 0]))), x$15 = $shiftLeft64((new $Uint64(0, (1 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 1]))), 8), new $Uint64(x$14.$high | x$15.$high, (x$14.$low | x$15.$low) >>> 0)), x$16 = $shiftLeft64((new $Uint64(0, (2 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 2]))), 16), new $Uint64(x$13.$high | x$16.$high, (x$13.$low | x$16.$low) >>> 0)), x$17 = $shiftLeft64((new $Uint64(0, (3 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 3]))), 24), new $Uint64(x$12.$high | x$17.$high, (x$12.$low | x$17.$low) >>> 0)), x$18 = $shiftLeft64((new $Uint64(0, (4 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 4]))), 32), new $Uint64(x$11.$high | x$18.$high, (x$11.$low | x$18.$low) >>> 0)), x$19 = $shiftLeft64((new $Uint64(0, (5 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 5]))), 40), new $Uint64(x$10.$high | x$19.$high, (x$10.$low | x$19.$low) >>> 0)), x$20 = $shiftLeft64((new $Uint64(0, (6 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 6]))), 48), new $Uint64(x$9.$high | x$20.$high, (x$9.$low | x$20.$low) >>> 0)), x$21 = $shiftLeft64((new $Uint64(0, (7 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 7]))), 56), new $Uint64(x$8.$high | x$21.$high, (x$8.$low | x$21.$low) >>> 0));
		} else {
			$panic(new $String("syscall: readInt with unsupported size"));
		}
	};
	ParseDirent = function(buf, max, names) {
		var _i, _ref, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tuple, _tuple$1, _tuple$2, buf, c, consumed, count, i, ino, max, name, names, namlen, newnames, ok, origlen, rec, reclen, x, x$1, x$2;
		consumed = 0;
		count = 0;
		newnames = sliceType$1.nil;
		origlen = buf.$length;
		count = 0;
		while (true) {
			if (!(!((max === 0)) && buf.$length > 0)) { break; }
			_tuple = direntReclen(buf);
			reclen = _tuple[0];
			ok = _tuple[1];
			if (!ok || (x = (new $Uint64(0, buf.$length)), (reclen.$high > x.$high || (reclen.$high === x.$high && reclen.$low > x.$low)))) {
				_tmp = origlen;
				_tmp$1 = count;
				_tmp$2 = names;
				consumed = _tmp;
				count = _tmp$1;
				newnames = _tmp$2;
				return [consumed, count, newnames];
			}
			rec = $subslice(buf, 0, $flatten64(reclen));
			buf = $subslice(buf, $flatten64(reclen));
			_tuple$1 = direntIno(rec);
			ino = _tuple$1[0];
			ok = _tuple$1[1];
			if (!ok) {
				break;
			}
			if ((ino.$high === 0 && ino.$low === 0)) {
				continue;
			}
			_tuple$2 = direntNamlen(rec);
			namlen = _tuple$2[0];
			ok = _tuple$2[1];
			if (!ok || (x$1 = new $Uint64(0 + namlen.$high, 24 + namlen.$low), x$2 = (new $Uint64(0, rec.$length)), (x$1.$high > x$2.$high || (x$1.$high === x$2.$high && x$1.$low > x$2.$low)))) {
				break;
			}
			name = $subslice(rec, 24, $flatten64(new $Uint64(0 + namlen.$high, 24 + namlen.$low)));
			_ref = name;
			_i = 0;
			while (true) {
				if (!(_i < _ref.$length)) { break; }
				i = _i;
				c = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
				if (c === 0) {
					name = $subslice(name, 0, i);
					break;
				}
				_i++;
			}
			if (($bytesToString(name)) === "." || ($bytesToString(name)) === "..") {
				continue;
			}
			max = max - (1) >> 0;
			count = count + (1) >> 0;
			names = $append(names, ($bytesToString(name)));
		}
		_tmp$3 = origlen - buf.$length >> 0;
		_tmp$4 = count;
		_tmp$5 = names;
		consumed = _tmp$3;
		count = _tmp$4;
		newnames = _tmp$5;
		return [consumed, count, newnames];
	};
	$pkg.ParseDirent = ParseDirent;
	CloseOnExec = function(fd) {
		var fd;
		fcntl(fd, 2, 1);
	};
	$pkg.CloseOnExec = CloseOnExec;
	SetNonblock = function(fd, nonblocking) {
		var _tuple, _tuple$1, err, fd, flag, nonblocking;
		err = $ifaceNil;
		_tuple = fcntl(fd, 3, 0);
		flag = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			err = err;
			return err;
		}
		if (nonblocking) {
			flag = flag | (4);
		} else {
			flag = (flag & ~(4)) >> 0;
		}
		_tuple$1 = fcntl(fd, 4, flag);
		err = _tuple$1[1];
		err = err;
		return err;
	};
	$pkg.SetNonblock = SetNonblock;
	msanRead = function(addr, len) {
		var addr, len;
	};
	msanWrite = function(addr, len) {
		var addr, len;
	};
	rsaAlignOf = function(salen) {
		var salen, salign;
		salign = 8;
		if (false) {
			salign = 4;
		} else if (false) {
			salign = 8;
		} else if (false) {
			if (freebsdConfArch === "amd64") {
				salign = 8;
			}
		}
		if (salen === 0) {
			return salign;
		}
		return (((salen + salign >> 0) - 1 >> 0)) & (~((salign - 1 >> 0)) >> 0);
	};
	itoa = function(val) {
		var val;
		if (val < 0) {
			return "-" + uitoa(((-val >>> 0)));
		}
		return uitoa(((val >>> 0)));
	};
	uitoa = function(val) {
		var _q, _r, buf, i, val;
		buf = arrayType$10.zero();
		i = 31;
		while (true) {
			if (!(val >= 10)) { break; }
			((i < 0 || i >= buf.length) ? ($throwRuntimeError("index out of range"), undefined) : buf[i] = ((((_r = val % 10, _r === _r ? _r : $throwRuntimeError("integer divide by zero")) + 48 >>> 0) << 24 >>> 24)));
			i = i - (1) >> 0;
			val = (_q = val / (10), (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero"));
		}
		((i < 0 || i >= buf.length) ? ($throwRuntimeError("index out of range"), undefined) : buf[i] = (((val + 48 >>> 0) << 24 >>> 24)));
		return ($bytesToString($subslice(new sliceType(buf), i)));
	};
	Timespec.ptr.prototype.Unix = function() {
		var _tmp, _tmp$1, nsec, sec, ts;
		sec = new $Int64(0, 0);
		nsec = new $Int64(0, 0);
		ts = this;
		_tmp = (ts.Sec);
		_tmp$1 = (ts.Nsec);
		sec = _tmp;
		nsec = _tmp$1;
		return [sec, nsec];
	};
	Timespec.prototype.Unix = function() { return this.$val.Unix(); };
	Timespec.ptr.prototype.Nano = function() {
		var ts, x, x$1;
		ts = this;
		return (x = $mul64((ts.Sec), new $Int64(0, 1000000000)), x$1 = (ts.Nsec), new $Int64(x.$high + x$1.$high, x.$low + x$1.$low));
	};
	Timespec.prototype.Nano = function() { return this.$val.Nano(); };
	ReadDirent = function(fd, buf) {
		var _tuple, base, buf, err, fd, n;
		n = 0;
		err = $ifaceNil;
		base = ((new Uint8Array(8)));
		_tuple = Getdirentries(fd, buf, base);
		n = _tuple[0];
		err = _tuple[1];
		return [n, err];
	};
	$pkg.ReadDirent = ReadDirent;
	SockaddrInet4.ptr.prototype.sockaddr = function() {
		var _array, _struct, _view, i, p, sa, x, x$1, x$2;
		sa = this;
		if (sa.Port < 0 || sa.Port > 65535) {
			return [0, 0, new Errno(22)];
		}
		sa.raw.Len = 16;
		sa.raw.Family = 2;
		p = (((x = sa.raw, (x.$ptr_Port || (x.$ptr_Port = new ptrType$16(function() { return this.$target.Port; }, function($v) { this.$target.Port = $v; }, x))))));
		p.nilCheck, p[0] = (((sa.Port >> 8 >> 0) << 24 >>> 24));
		p.nilCheck, p[1] = ((sa.Port << 24 >>> 24));
		i = 0;
		while (true) {
			if (!(i < 4)) { break; }
			(x$2 = sa.raw.Addr, ((i < 0 || i >= x$2.length) ? ($throwRuntimeError("index out of range"), undefined) : x$2[i] = (x$1 = sa.Addr, ((i < 0 || i >= x$1.length) ? ($throwRuntimeError("index out of range"), undefined) : x$1[i]))));
			i = i + (1) >> 0;
		}
		_array = new Uint8Array(16);
		return [(_array), ((sa.raw.Len >>> 0)), $ifaceNil];
	};
	SockaddrInet4.prototype.sockaddr = function() { return this.$val.sockaddr(); };
	SockaddrInet6.ptr.prototype.sockaddr = function() {
		var _array, _struct, _view, i, p, sa, x, x$1, x$2;
		sa = this;
		if (sa.Port < 0 || sa.Port > 65535) {
			return [0, 0, new Errno(22)];
		}
		sa.raw.Len = 28;
		sa.raw.Family = 24;
		p = (((x = sa.raw, (x.$ptr_Port || (x.$ptr_Port = new ptrType$16(function() { return this.$target.Port; }, function($v) { this.$target.Port = $v; }, x))))));
		p.nilCheck, p[0] = (((sa.Port >> 8 >> 0) << 24 >>> 24));
		p.nilCheck, p[1] = ((sa.Port << 24 >>> 24));
		sa.raw.Scope_id = sa.ZoneId;
		i = 0;
		while (true) {
			if (!(i < 16)) { break; }
			(x$2 = sa.raw.Addr, ((i < 0 || i >= x$2.length) ? ($throwRuntimeError("index out of range"), undefined) : x$2[i] = (x$1 = sa.Addr, ((i < 0 || i >= x$1.length) ? ($throwRuntimeError("index out of range"), undefined) : x$1[i]))));
			i = i + (1) >> 0;
		}
		_array = new Uint8Array(28);
		return [(_array), ((sa.raw.Len >>> 0)), $ifaceNil];
	};
	SockaddrInet6.prototype.sockaddr = function() { return this.$val.sockaddr(); };
	SockaddrUnix.ptr.prototype.sockaddr = function() {
		var _array, _struct, _view, i, n, name, sa, x;
		sa = this;
		name = sa.Name;
		n = name.length;
		if (n >= 104 || (n === 0)) {
			return [0, 0, new Errno(22)];
		}
		sa.raw.Len = (((3 + n >> 0) << 24 >>> 24));
		sa.raw.Family = 1;
		i = 0;
		while (true) {
			if (!(i < n)) { break; }
			(x = sa.raw.Path, ((i < 0 || i >= x.length) ? ($throwRuntimeError("index out of range"), undefined) : x[i] = ((name.charCodeAt(i) << 24 >> 24))));
			i = i + (1) >> 0;
		}
		_array = new Uint8Array(106);
		return [(_array), ((sa.raw.Len >>> 0)), $ifaceNil];
	};
	SockaddrUnix.prototype.sockaddr = function() { return this.$val.sockaddr(); };
	SockaddrDatalink.ptr.prototype.sockaddr = function() {
		var _array, _struct, _view, i, sa, x, x$1;
		sa = this;
		if (sa.Index === 0) {
			return [0, 0, new Errno(22)];
		}
		sa.raw.Len = sa.Len;
		sa.raw.Family = 18;
		sa.raw.Index = sa.Index;
		sa.raw.Type = sa.Type;
		sa.raw.Nlen = sa.Nlen;
		sa.raw.Alen = sa.Alen;
		sa.raw.Slen = sa.Slen;
		i = 0;
		while (true) {
			if (!(i < 24)) { break; }
			(x$1 = sa.raw.Data, ((i < 0 || i >= x$1.length) ? ($throwRuntimeError("index out of range"), undefined) : x$1[i] = (x = sa.Data, ((i < 0 || i >= x.length) ? ($throwRuntimeError("index out of range"), undefined) : x[i]))));
			i = i + (1) >> 0;
		}
		_array = new Uint8Array(32);
		return [(_array), 32, $ifaceNil];
	};
	SockaddrDatalink.prototype.sockaddr = function() { return this.$val.sockaddr(); };
	anyToSockaddr = function(rsa) {
		var _1, _array, _array$1, _array$2, _array$3, _array$4, _array$5, _array$6, _array$7, _struct, _struct$1, _struct$2, _struct$3, _struct$4, _struct$5, _struct$6, _struct$7, _view, _view$1, _view$2, _view$3, _view$4, _view$5, _view$6, _view$7, bytes, i, i$1, i$2, i$3, n, p, p$1, pp, pp$1, pp$2, pp$3, rsa, sa, sa$1, sa$2, sa$3, x, x$1, x$2, x$3, x$4, x$5, x$6;
		_1 = rsa.Addr.Family;
		if (_1 === (18)) {
			_array$1 = new Uint8Array(108);
			pp = ((_array = (_array$1), _struct = new RawSockaddrDatalink.ptr(0, 0, 0, 0, 0, 0, 0, arrayType$3.zero()), _view = new DataView(_array.buffer, _array.byteOffset), _struct.Len = _view.getUint8(0, true), _struct.Family = _view.getUint8(1, true), _struct.Index = _view.getUint16(2, true), _struct.Type = _view.getUint8(4, true), _struct.Nlen = _view.getUint8(5, true), _struct.Alen = _view.getUint8(6, true), _struct.Slen = _view.getUint8(7, true), _struct.Data = new ($nativeArray($kindInt8))(_array.buffer, $min(_array.byteOffset + 8, _array.buffer.byteLength)), _struct));
			_struct$1 = rsa, _view$1 = new DataView(_array$1.buffer, _array$1.byteOffset), _struct$1.Addr.Len = _view$1.getUint8(0, true), _struct$1.Addr.Family = _view$1.getUint8(1, true), _struct$1.Addr.Data = new ($nativeArray($kindInt8))(_array$1.buffer, $min(_array$1.byteOffset + 2, _array$1.buffer.byteLength)), _struct$1.Pad = new ($nativeArray($kindInt8))(_array$1.buffer, $min(_array$1.byteOffset + 16, _array$1.buffer.byteLength));
			sa = new SockaddrDatalink.ptr(0, 0, 0, 0, 0, 0, 0, arrayType$3.zero(), new RawSockaddrDatalink.ptr(0, 0, 0, 0, 0, 0, 0, arrayType$3.zero()));
			sa.Len = pp.Len;
			sa.Family = pp.Family;
			sa.Index = pp.Index;
			sa.Type = pp.Type;
			sa.Nlen = pp.Nlen;
			sa.Alen = pp.Alen;
			sa.Slen = pp.Slen;
			i = 0;
			while (true) {
				if (!(i < 24)) { break; }
				(x$1 = sa.Data, ((i < 0 || i >= x$1.length) ? ($throwRuntimeError("index out of range"), undefined) : x$1[i] = (x = pp.Data, ((i < 0 || i >= x.length) ? ($throwRuntimeError("index out of range"), undefined) : x[i]))));
				i = i + (1) >> 0;
			}
			return [sa, $ifaceNil];
		} else if (_1 === (1)) {
			_array$3 = new Uint8Array(108);
			pp$1 = ((_array$2 = (_array$3), _struct$2 = new RawSockaddrUnix.ptr(0, 0, arrayType$11.zero()), _view$2 = new DataView(_array$2.buffer, _array$2.byteOffset), _struct$2.Len = _view$2.getUint8(0, true), _struct$2.Family = _view$2.getUint8(1, true), _struct$2.Path = new ($nativeArray($kindInt8))(_array$2.buffer, $min(_array$2.byteOffset + 2, _array$2.buffer.byteLength)), _struct$2));
			_struct$3 = rsa, _view$3 = new DataView(_array$3.buffer, _array$3.byteOffset), _struct$3.Addr.Len = _view$3.getUint8(0, true), _struct$3.Addr.Family = _view$3.getUint8(1, true), _struct$3.Addr.Data = new ($nativeArray($kindInt8))(_array$3.buffer, $min(_array$3.byteOffset + 2, _array$3.buffer.byteLength)), _struct$3.Pad = new ($nativeArray($kindInt8))(_array$3.buffer, $min(_array$3.byteOffset + 16, _array$3.buffer.byteLength));
			if (pp$1.Len < 2 || pp$1.Len > 106) {
				return [$ifaceNil, new Errno(22)];
			}
			sa$1 = new SockaddrUnix.ptr("", new RawSockaddrUnix.ptr(0, 0, arrayType$11.zero()));
			n = ((pp$1.Len >> 0)) - 2 >> 0;
			i$1 = 0;
			while (true) {
				if (!(i$1 < n)) { break; }
				if ((x$2 = pp$1.Path, ((i$1 < 0 || i$1 >= x$2.length) ? ($throwRuntimeError("index out of range"), undefined) : x$2[i$1])) === 0) {
					n = i$1;
					break;
				}
				i$1 = i$1 + (1) >> 0;
			}
			bytes = $subslice(new sliceType((($sliceToArray(new sliceType(pp$1.Path))))), 0, n);
			sa$1.Name = ($bytesToString(bytes));
			return [sa$1, $ifaceNil];
		} else if (_1 === (2)) {
			_array$5 = new Uint8Array(108);
			pp$2 = ((_array$4 = (_array$5), _struct$4 = new RawSockaddrInet4.ptr(0, 0, 0, arrayType$1.zero(), arrayType$6.zero()), _view$4 = new DataView(_array$4.buffer, _array$4.byteOffset), _struct$4.Len = _view$4.getUint8(0, true), _struct$4.Family = _view$4.getUint8(1, true), _struct$4.Port = _view$4.getUint16(2, true), _struct$4.Addr = new ($nativeArray($kindUint8))(_array$4.buffer, $min(_array$4.byteOffset + 4, _array$4.buffer.byteLength)), _struct$4.Zero = new ($nativeArray($kindInt8))(_array$4.buffer, $min(_array$4.byteOffset + 8, _array$4.buffer.byteLength)), _struct$4));
			_struct$5 = rsa, _view$5 = new DataView(_array$5.buffer, _array$5.byteOffset), _struct$5.Addr.Len = _view$5.getUint8(0, true), _struct$5.Addr.Family = _view$5.getUint8(1, true), _struct$5.Addr.Data = new ($nativeArray($kindInt8))(_array$5.buffer, $min(_array$5.byteOffset + 2, _array$5.buffer.byteLength)), _struct$5.Pad = new ($nativeArray($kindInt8))(_array$5.buffer, $min(_array$5.byteOffset + 16, _array$5.buffer.byteLength));
			sa$2 = new SockaddrInet4.ptr(0, arrayType$1.zero(), new RawSockaddrInet4.ptr(0, 0, 0, arrayType$1.zero(), arrayType$6.zero()));
			p = (((pp$2.$ptr_Port || (pp$2.$ptr_Port = new ptrType$16(function() { return this.$target.Port; }, function($v) { this.$target.Port = $v; }, pp$2)))));
			sa$2.Port = ((((p.nilCheck, p[0]) >> 0)) << 8 >> 0) + (((p.nilCheck, p[1]) >> 0)) >> 0;
			i$2 = 0;
			while (true) {
				if (!(i$2 < 4)) { break; }
				(x$4 = sa$2.Addr, ((i$2 < 0 || i$2 >= x$4.length) ? ($throwRuntimeError("index out of range"), undefined) : x$4[i$2] = (x$3 = pp$2.Addr, ((i$2 < 0 || i$2 >= x$3.length) ? ($throwRuntimeError("index out of range"), undefined) : x$3[i$2]))));
				i$2 = i$2 + (1) >> 0;
			}
			return [sa$2, $ifaceNil];
		} else if (_1 === (24)) {
			_array$7 = new Uint8Array(108);
			pp$3 = ((_array$6 = (_array$7), _struct$6 = new RawSockaddrInet6.ptr(0, 0, 0, 0, arrayType.zero(), 0), _view$6 = new DataView(_array$6.buffer, _array$6.byteOffset), _struct$6.Len = _view$6.getUint8(0, true), _struct$6.Family = _view$6.getUint8(1, true), _struct$6.Port = _view$6.getUint16(2, true), _struct$6.Flowinfo = _view$6.getUint32(4, true), _struct$6.Addr = new ($nativeArray($kindUint8))(_array$6.buffer, $min(_array$6.byteOffset + 8, _array$6.buffer.byteLength)), _struct$6.Scope_id = _view$6.getUint32(24, true), _struct$6));
			_struct$7 = rsa, _view$7 = new DataView(_array$7.buffer, _array$7.byteOffset), _struct$7.Addr.Len = _view$7.getUint8(0, true), _struct$7.Addr.Family = _view$7.getUint8(1, true), _struct$7.Addr.Data = new ($nativeArray($kindInt8))(_array$7.buffer, $min(_array$7.byteOffset + 2, _array$7.buffer.byteLength)), _struct$7.Pad = new ($nativeArray($kindInt8))(_array$7.buffer, $min(_array$7.byteOffset + 16, _array$7.buffer.byteLength));
			sa$3 = new SockaddrInet6.ptr(0, 0, arrayType.zero(), new RawSockaddrInet6.ptr(0, 0, 0, 0, arrayType.zero(), 0));
			p$1 = (((pp$3.$ptr_Port || (pp$3.$ptr_Port = new ptrType$16(function() { return this.$target.Port; }, function($v) { this.$target.Port = $v; }, pp$3)))));
			sa$3.Port = ((((p$1.nilCheck, p$1[0]) >> 0)) << 8 >> 0) + (((p$1.nilCheck, p$1[1]) >> 0)) >> 0;
			sa$3.ZoneId = pp$3.Scope_id;
			i$3 = 0;
			while (true) {
				if (!(i$3 < 16)) { break; }
				(x$6 = sa$3.Addr, ((i$3 < 0 || i$3 >= x$6.length) ? ($throwRuntimeError("index out of range"), undefined) : x$6[i$3] = (x$5 = pp$3.Addr, ((i$3 < 0 || i$3 >= x$5.length) ? ($throwRuntimeError("index out of range"), undefined) : x$5[i$3]))));
				i$3 = i$3 + (1) >> 0;
			}
			return [sa$3, $ifaceNil];
		}
		return [$ifaceNil, new Errno(47)];
	};
	Accept = function(fd) {
		var _tmp, _tmp$1, _tmp$2, _tuple, _tuple$1, err, fd, len, len$24ptr, nfd, rsa, sa;
		nfd = 0;
		sa = $ifaceNil;
		err = $ifaceNil;
		rsa = new RawSockaddrAny.ptr(new RawSockaddr.ptr(0, 0, arrayType$4.zero()), arrayType$5.zero());
		len = 108;
		_tuple = accept(fd, rsa, (len$24ptr || (len$24ptr = new ptrType$17(function() { return len; }, function($v) { len = $v; }))));
		nfd = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return [nfd, sa, err];
		}
		if (false && (len === 0)) {
			Close(nfd);
			_tmp = 0;
			_tmp$1 = $ifaceNil;
			_tmp$2 = new Errno(53);
			nfd = _tmp;
			sa = _tmp$1;
			err = _tmp$2;
			return [nfd, sa, err];
		}
		_tuple$1 = anyToSockaddr(rsa);
		sa = _tuple$1[0];
		err = _tuple$1[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			Close(nfd);
			nfd = 0;
		}
		return [nfd, sa, err];
	};
	$pkg.Accept = Accept;
	Recvmsg = function(fd, p, oob, flags) {
		var _array, _struct, _tuple, _tuple$1, _view, dummy, dummy$24ptr, err, fd, flags, from, iov, msg, n, oob, oobn, p, recvflags, rsa;
		n = 0;
		oobn = 0;
		recvflags = 0;
		from = $ifaceNil;
		err = $ifaceNil;
		msg = new Msghdr.ptr(ptrType$2.nil, 0, arrayType$1.zero(), ptrType$18.nil, 0, arrayType$1.zero(), ptrType$2.nil, 0, 0);
		rsa = new RawSockaddrAny.ptr(new RawSockaddr.ptr(0, 0, arrayType$4.zero()), arrayType$5.zero());
		_array = new Uint8Array(108);
		msg.Name = ((_array));
		_struct = rsa, _view = new DataView(_array.buffer, _array.byteOffset), _struct.Addr.Len = _view.getUint8(0, true), _struct.Addr.Family = _view.getUint8(1, true), _struct.Addr.Data = new ($nativeArray($kindInt8))(_array.buffer, $min(_array.byteOffset + 2, _array.buffer.byteLength)), _struct.Pad = new ($nativeArray($kindInt8))(_array.buffer, $min(_array.byteOffset + 16, _array.buffer.byteLength));
		msg.Namelen = 108;
		iov = new Iovec.ptr(ptrType$2.nil, new $Uint64(0, 0));
		if (p.$length > 0) {
			iov.Base = (($sliceToArray(p)));
			iov.SetLen(p.$length);
		}
		dummy = 0;
		if (oob.$length > 0) {
			if (p.$length === 0) {
				iov.Base = (dummy$24ptr || (dummy$24ptr = new ptrType$2(function() { return dummy; }, function($v) { dummy = $v; })));
				iov.SetLen(1);
			}
			msg.Control = (($sliceToArray(oob)));
			msg.SetControllen(oob.$length);
		}
		msg.Iov = iov;
		msg.Iovlen = 1;
		_tuple = recvmsg(fd, msg, flags);
		n = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return [n, oobn, recvflags, from, err];
		}
		oobn = ((msg.Controllen >> 0));
		recvflags = ((msg.Flags >> 0));
		if (!((rsa.Addr.Family === 0))) {
			_tuple$1 = anyToSockaddr(rsa);
			from = _tuple$1[0];
			err = _tuple$1[1];
		}
		return [n, oobn, recvflags, from, err];
	};
	$pkg.Recvmsg = Recvmsg;
	SendmsgN = function(fd, p, oob, to, flags) {
		var _r, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tuple, _tuple$1, dummy, err, fd, flags, iov, msg, n, oob, p, ptr, salen, to, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; dummy = $f.dummy; err = $f.err; fd = $f.fd; flags = $f.flags; iov = $f.iov; msg = $f.msg; n = $f.n; oob = $f.oob; p = $f.p; ptr = $f.ptr; salen = $f.salen; to = $f.to; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		dummy = [dummy];
		iov = [iov];
		msg = [msg];
		n = 0;
		err = $ifaceNil;
		ptr = 0;
		salen = 0;
		/* */ if (!($interfaceIsEqual(to, $ifaceNil))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!($interfaceIsEqual(to, $ifaceNil))) { */ case 1:
			_r = to.sockaddr(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r;
			ptr = _tuple[0];
			salen = _tuple[1];
			err = _tuple[2];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				_tmp = 0;
				_tmp$1 = err;
				n = _tmp;
				err = _tmp$1;
				$s = -1; return [n, err];
			}
		/* } */ case 2:
		msg[0] = new Msghdr.ptr(ptrType$2.nil, 0, arrayType$1.zero(), ptrType$18.nil, 0, arrayType$1.zero(), ptrType$2.nil, 0, 0);
		msg[0].Name = ((ptr));
		msg[0].Namelen = ((salen >>> 0));
		iov[0] = new Iovec.ptr(ptrType$2.nil, new $Uint64(0, 0));
		if (p.$length > 0) {
			iov[0].Base = (($sliceToArray(p)));
			iov[0].SetLen(p.$length);
		}
		dummy[0] = 0;
		if (oob.$length > 0) {
			if (p.$length === 0) {
				iov[0].Base = (dummy.$ptr || (dummy.$ptr = new ptrType$2(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, dummy)));
				iov[0].SetLen(1);
			}
			msg[0].Control = (($sliceToArray(oob)));
			msg[0].SetControllen(oob.$length);
		}
		msg[0].Iov = iov[0];
		msg[0].Iovlen = 1;
		_tuple$1 = sendmsg(fd, msg[0], flags);
		n = _tuple$1[0];
		err = _tuple$1[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			_tmp$2 = 0;
			_tmp$3 = err;
			n = _tmp$2;
			err = _tmp$3;
			$s = -1; return [n, err];
		}
		if (oob.$length > 0 && (p.$length === 0)) {
			n = 0;
		}
		_tmp$4 = n;
		_tmp$5 = $ifaceNil;
		n = _tmp$4;
		err = _tmp$5;
		$s = -1; return [n, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: SendmsgN }; } $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.dummy = dummy; $f.err = err; $f.fd = fd; $f.flags = flags; $f.iov = iov; $f.msg = msg; $f.n = n; $f.oob = oob; $f.p = p; $f.ptr = ptr; $f.salen = salen; $f.to = to; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.SendmsgN = SendmsgN;
	Syscall9 = function() {
		$throwRuntimeError("native function not implemented: syscall.Syscall9");
	};
	$pkg.Syscall9 = Syscall9;
	direntIno = function(buf) {
		var buf;
		return readInt(buf, 0, 8);
	};
	direntReclen = function(buf) {
		var buf;
		return readInt(buf, 16, 2);
	};
	direntNamlen = function(buf) {
		var buf;
		return readInt(buf, 19, 1);
	};
	Getdirentries = function(fd, buf, basep) {
		var _tuple, basep, buf, err, fd, n;
		n = 0;
		err = $ifaceNil;
		_tuple = getdents(fd, buf);
		n = _tuple[0];
		err = _tuple[1];
		return [n, err];
	};
	$pkg.Getdirentries = Getdirentries;
	Iovec.ptr.prototype.SetLen = function(length) {
		var iov, length;
		iov = this;
		iov.Len = (new $Uint64(0, length));
	};
	Iovec.prototype.SetLen = function(length) { return this.$val.SetLen(length); };
	Msghdr.ptr.prototype.SetControllen = function(length) {
		var length, msghdr;
		msghdr = this;
		msghdr.Controllen = ((length >>> 0));
	};
	Msghdr.prototype.SetControllen = function(length) { return this.$val.SetControllen(length); };
	mmapper.ptr.prototype.Mmap = function(fd, offset, length, prot, flags) {
		var _key, _r, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tuple, addr, b, data, err, errno, fd, flags, length, m, offset, p, prot, sl, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _key = $f._key; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; _tuple = $f._tuple; addr = $f.addr; b = $f.b; data = $f.data; err = $f.err; errno = $f.errno; fd = $f.fd; flags = $f.flags; length = $f.length; m = $f.m; offset = $f.offset; p = $f.p; prot = $f.prot; sl = $f.sl; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		sl = [sl];
		data = sliceType.nil;
		err = $ifaceNil;
		m = this;
		if (length <= 0) {
			_tmp = sliceType.nil;
			_tmp$1 = new Errno(22);
			data = _tmp;
			err = _tmp$1;
			$s = -1; return [data, err];
		}
		_r = m.mmap(0, ((length >>> 0)), prot, flags, fd, offset); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		addr = _tuple[0];
		errno = _tuple[1];
		if (!($interfaceIsEqual(errno, $ifaceNil))) {
			_tmp$2 = sliceType.nil;
			_tmp$3 = errno;
			data = _tmp$2;
			err = _tmp$3;
			$s = -1; return [data, err];
		}
		sl[0] = new structType.ptr(addr, length, length);
		b = sl[0];
		p = $indexPtr(b.$array, b.$offset + (b.$capacity - 1 >> 0), ptrType$2);
		$r = m.Mutex.Lock(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$deferred.push([$methodVal(m.Mutex, "Unlock"), []]);
		_key = p; (m.active || $throwRuntimeError("assignment to entry in nil map"))[ptrType$2.keyFor(_key)] = { k: _key, v: b };
		_tmp$4 = b;
		_tmp$5 = $ifaceNil;
		data = _tmp$4;
		err = _tmp$5;
		$s = -1; return [data, err];
		/* */ } return; } } catch(err) { $err = err; $s = -1; } finally { $callDeferred($deferred, $err); if (!$curGoroutine.asleep) { return  [data, err]; } if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: mmapper.ptr.prototype.Mmap }; } $f._key = _key; $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f._tuple = _tuple; $f.addr = addr; $f.b = b; $f.data = data; $f.err = err; $f.errno = errno; $f.fd = fd; $f.flags = flags; $f.length = length; $f.m = m; $f.offset = offset; $f.p = p; $f.prot = prot; $f.sl = sl; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	mmapper.prototype.Mmap = function(fd, offset, length, prot, flags) { return this.$val.Mmap(fd, offset, length, prot, flags); };
	mmapper.ptr.prototype.Munmap = function(data) {
		var _entry, _r, b, data, err, errno, m, p, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _entry = $f._entry; _r = $f._r; b = $f.b; data = $f.data; err = $f.err; errno = $f.errno; m = $f.m; p = $f.p; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		err = $ifaceNil;
		m = this;
		if ((data.$length === 0) || !((data.$length === data.$capacity))) {
			err = new Errno(22);
			$s = -1; return err;
		}
		p = $indexPtr(data.$array, data.$offset + (data.$capacity - 1 >> 0), ptrType$2);
		$r = m.Mutex.Lock(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$deferred.push([$methodVal(m.Mutex, "Unlock"), []]);
		b = (_entry = m.active[ptrType$2.keyFor(p)], _entry !== undefined ? _entry.v : sliceType.nil);
		if (b === sliceType.nil || !($indexPtr(b.$array, b.$offset + 0, ptrType$2) === $indexPtr(data.$array, data.$offset + 0, ptrType$2))) {
			err = new Errno(22);
			$s = -1; return err;
		}
		_r = m.munmap((($sliceToArray(b))), ((b.$length >>> 0))); /* */ $s = 2; case 2: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		errno = _r;
		if (!($interfaceIsEqual(errno, $ifaceNil))) {
			err = errno;
			$s = -1; return err;
		}
		delete m.active[ptrType$2.keyFor(p)];
		err = $ifaceNil;
		$s = -1; return err;
		/* */ } return; } } catch(err) { $err = err; $s = -1; } finally { $callDeferred($deferred, $err); if (!$curGoroutine.asleep) { return  err; } if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: mmapper.ptr.prototype.Munmap }; } $f._entry = _entry; $f._r = _r; $f.b = b; $f.data = data; $f.err = err; $f.errno = errno; $f.m = m; $f.p = p; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	mmapper.prototype.Munmap = function(data) { return this.$val.Munmap(data); };
	Errno.prototype.Error = function() {
		var e, s;
		e = this.$val;
		if (0 <= ((e >> 0)) && ((e >> 0)) < 92) {
			s = ((e < 0 || e >= errors.length) ? ($throwRuntimeError("index out of range"), undefined) : errors[e]);
			if (!(s === "")) {
				return s;
			}
		}
		return "errno " + itoa(((e >> 0)));
	};
	$ptrType(Errno).prototype.Error = function() { return new Errno(this.$get()).Error(); };
	Errno.prototype.Temporary = function() {
		var e;
		e = this.$val;
		return (e === 4) || (e === 24) || (e === 54) || (e === 53) || new Errno(e).Timeout();
	};
	$ptrType(Errno).prototype.Temporary = function() { return new Errno(this.$get()).Temporary(); };
	Errno.prototype.Timeout = function() {
		var e;
		e = this.$val;
		return (e === 35) || (e === 35) || (e === 60);
	};
	$ptrType(Errno).prototype.Timeout = function() { return new Errno(this.$get()).Timeout(); };
	errnoErr = function(e) {
		var _1, e;
		_1 = e;
		if (_1 === (0)) {
			return $ifaceNil;
		} else if (_1 === (35)) {
			return errEAGAIN;
		} else if (_1 === (22)) {
			return errEINVAL;
		} else if (_1 === (2)) {
			return errENOENT;
		}
		return new Errno(e);
	};
	Read = function(fd, p) {
		var _tuple, err, fd, n, p;
		n = 0;
		err = $ifaceNil;
		_tuple = read(fd, p);
		n = _tuple[0];
		err = _tuple[1];
		if (false) {
			if (n > 0) {
				race.WriteRange(($sliceToArray(p)), n);
			}
			if ($interfaceIsEqual(err, $ifaceNil)) {
				race.Acquire(((ioSync$24ptr || (ioSync$24ptr = new ptrType$19(function() { return ioSync; }, function($v) { ioSync = $v; })))));
			}
		}
		if (false && n > 0) {
			msanWrite(($sliceToArray(p)), n);
		}
		return [n, err];
	};
	$pkg.Read = Read;
	Write = function(fd, p) {
		var _tuple, err, fd, n, p;
		n = 0;
		err = $ifaceNil;
		if (false) {
			race.ReleaseMerge(((ioSync$24ptr || (ioSync$24ptr = new ptrType$19(function() { return ioSync; }, function($v) { ioSync = $v; })))));
		}
		_tuple = write(fd, p);
		n = _tuple[0];
		err = _tuple[1];
		if (false && n > 0) {
			race.ReadRange(($sliceToArray(p)), n);
		}
		if (false && n > 0) {
			msanRead(($sliceToArray(p)), n);
		}
		return [n, err];
	};
	$pkg.Write = Write;
	Recvfrom = function(fd, p, flags) {
		var _tuple, _tuple$1, err, fd, flags, from, len, len$24ptr, n, p, rsa;
		n = 0;
		from = $ifaceNil;
		err = $ifaceNil;
		rsa = new RawSockaddrAny.ptr(new RawSockaddr.ptr(0, 0, arrayType$4.zero()), arrayType$5.zero());
		len = 108;
		_tuple = recvfrom(fd, p, flags, rsa, (len$24ptr || (len$24ptr = new ptrType$17(function() { return len; }, function($v) { len = $v; }))));
		n = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return [n, from, err];
		}
		if (!((rsa.Addr.Family === 0))) {
			_tuple$1 = anyToSockaddr(rsa);
			from = _tuple$1[0];
			err = _tuple$1[1];
		}
		return [n, from, err];
	};
	$pkg.Recvfrom = Recvfrom;
	Sendto = function(fd, p, flags, to) {
		var _r, _tuple, err, fd, flags, n, p, ptr, to, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; err = $f.err; fd = $f.fd; flags = $f.flags; n = $f.n; p = $f.p; ptr = $f.ptr; to = $f.to; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		err = $ifaceNil;
		_r = to.sockaddr(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		ptr = _tuple[0];
		n = _tuple[1];
		err = _tuple[2];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			err = err;
			$s = -1; return err;
		}
		err = sendto(fd, p, flags, ptr, n);
		$s = -1; return err;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Sendto }; } $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.fd = fd; $f.flags = flags; $f.n = n; $f.p = p; $f.ptr = ptr; $f.to = to; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Sendto = Sendto;
	SetsockoptByte = function(fd, level, opt, value) {
		var err, fd, level, opt, value, value$24ptr;
		err = $ifaceNil;
		err = setsockopt(fd, level, opt, ((value$24ptr || (value$24ptr = new ptrType$2(function() { return value; }, function($v) { value = $v; })))), 1);
		return err;
	};
	$pkg.SetsockoptByte = SetsockoptByte;
	SetsockoptInt = function(fd, level, opt, value) {
		var err, fd, level, n, n$24ptr, opt, value;
		err = $ifaceNil;
		n = ((value >> 0));
		err = setsockopt(fd, level, opt, ((n$24ptr || (n$24ptr = new ptrType$20(function() { return n; }, function($v) { n = $v; })))), 4);
		return err;
	};
	$pkg.SetsockoptInt = SetsockoptInt;
	SetsockoptInet4Addr = function(fd, level, opt, value) {
		var err, fd, level, opt, value;
		err = $ifaceNil;
		err = setsockopt(fd, level, opt, ($sliceToArray(new sliceType(value))), 4);
		return err;
	};
	$pkg.SetsockoptInet4Addr = SetsockoptInet4Addr;
	SetsockoptIPMreq = function(fd, level, opt, mreq) {
		var _array, _struct, _view, err, fd, level, mreq, opt;
		err = $ifaceNil;
		_array = new Uint8Array(8);
		err = setsockopt(fd, level, opt, (_array), 8);
		_struct = mreq, _view = new DataView(_array.buffer, _array.byteOffset), _struct.Multiaddr = new ($nativeArray($kindUint8))(_array.buffer, $min(_array.byteOffset + 0, _array.buffer.byteLength)), _struct.Interface = new ($nativeArray($kindUint8))(_array.buffer, $min(_array.byteOffset + 4, _array.buffer.byteLength));
		return err;
	};
	$pkg.SetsockoptIPMreq = SetsockoptIPMreq;
	SetsockoptIPv6Mreq = function(fd, level, opt, mreq) {
		var _array, _struct, _view, err, fd, level, mreq, opt;
		err = $ifaceNil;
		_array = new Uint8Array(20);
		err = setsockopt(fd, level, opt, (_array), 20);
		_struct = mreq, _view = new DataView(_array.buffer, _array.byteOffset), _struct.Multiaddr = new ($nativeArray($kindUint8))(_array.buffer, $min(_array.byteOffset + 0, _array.buffer.byteLength)), _struct.Interface = _view.getUint32(16, true);
		return err;
	};
	$pkg.SetsockoptIPv6Mreq = SetsockoptIPv6Mreq;
	SetsockoptLinger = function(fd, level, opt, l) {
		var _array, _struct, _view, err, fd, l, level, opt;
		err = $ifaceNil;
		_array = new Uint8Array(8);
		err = setsockopt(fd, level, opt, (_array), 8);
		_struct = l, _view = new DataView(_array.buffer, _array.byteOffset), _struct.Onoff = _view.getInt32(0, true), _struct.Linger = _view.getInt32(4, true);
		return err;
	};
	$pkg.SetsockoptLinger = SetsockoptLinger;
	accept = function(s, rsa, addrlen) {
		var _array, _struct, _tuple, _view, addrlen, e1, err, fd, r0, rsa, s;
		fd = 0;
		err = $ifaceNil;
		_array = new Uint8Array(108);
		_tuple = Syscall(30, ((s >>> 0)), ((_array)), ((addrlen)));
		_struct = rsa, _view = new DataView(_array.buffer, _array.byteOffset), _struct.Addr.Len = _view.getUint8(0, true), _struct.Addr.Family = _view.getUint8(1, true), _struct.Addr.Data = new ($nativeArray($kindInt8))(_array.buffer, $min(_array.byteOffset + 2, _array.buffer.byteLength)), _struct.Pad = new ($nativeArray($kindInt8))(_array.buffer, $min(_array.byteOffset + 16, _array.buffer.byteLength));
		r0 = _tuple[0];
		e1 = _tuple[2];
		fd = ((r0 >> 0));
		if (!((e1 === 0))) {
			err = errnoErr(e1);
		}
		return [fd, err];
	};
	setsockopt = function(s, level, name, val, vallen) {
		var _tuple, e1, err, level, name, s, val, vallen;
		err = $ifaceNil;
		_tuple = Syscall6(105, ((s >>> 0)), ((level >>> 0)), ((name >>> 0)), (val), (vallen), 0);
		e1 = _tuple[2];
		if (!((e1 === 0))) {
			err = errnoErr(e1);
		}
		return err;
	};
	Shutdown = function(s, how) {
		var _tuple, e1, err, how, s;
		err = $ifaceNil;
		_tuple = Syscall(134, ((s >>> 0)), ((how >>> 0)), 0);
		e1 = _tuple[2];
		if (!((e1 === 0))) {
			err = errnoErr(e1);
		}
		return err;
	};
	$pkg.Shutdown = Shutdown;
	recvfrom = function(fd, p, flags, from, fromlen) {
		var _array, _p0, _struct, _tuple, _view, e1, err, fd, flags, from, fromlen, n, p, r0;
		n = 0;
		err = $ifaceNil;
		_p0 = 0;
		if (p.$length > 0) {
			_p0 = ($sliceToArray(p));
		} else {
			_p0 = (new Uint8Array(0));
		}
		_array = new Uint8Array(108);
		_tuple = Syscall6(29, ((fd >>> 0)), (_p0), ((p.$length >>> 0)), ((flags >>> 0)), ((_array)), ((fromlen)));
		_struct = from, _view = new DataView(_array.buffer, _array.byteOffset), _struct.Addr.Len = _view.getUint8(0, true), _struct.Addr.Family = _view.getUint8(1, true), _struct.Addr.Data = new ($nativeArray($kindInt8))(_array.buffer, $min(_array.byteOffset + 2, _array.buffer.byteLength)), _struct.Pad = new ($nativeArray($kindInt8))(_array.buffer, $min(_array.byteOffset + 16, _array.buffer.byteLength));
		r0 = _tuple[0];
		e1 = _tuple[2];
		n = ((r0 >> 0));
		if (!((e1 === 0))) {
			err = errnoErr(e1);
		}
		return [n, err];
	};
	sendto = function(s, buf, flags, to, addrlen) {
		var _p0, _tuple, addrlen, buf, e1, err, flags, s, to;
		err = $ifaceNil;
		_p0 = 0;
		if (buf.$length > 0) {
			_p0 = ($sliceToArray(buf));
		} else {
			_p0 = (new Uint8Array(0));
		}
		_tuple = Syscall6(133, ((s >>> 0)), (_p0), ((buf.$length >>> 0)), ((flags >>> 0)), (to), ((addrlen >>> 0)));
		e1 = _tuple[2];
		if (!((e1 === 0))) {
			err = errnoErr(e1);
		}
		return err;
	};
	recvmsg = function(s, msg, flags) {
		var _array, _struct, _tuple, _view, e1, err, flags, msg, n, r0, s;
		n = 0;
		err = $ifaceNil;
		_array = new Uint8Array(36);
		_tuple = Syscall(27, ((s >>> 0)), ((_array)), ((flags >>> 0)));
		_struct = msg, _view = new DataView(_array.buffer, _array.byteOffset), _struct.Namelen = _view.getUint32(4, true), _struct.Pad_cgo_0 = new ($nativeArray($kindUint8))(_array.buffer, $min(_array.byteOffset + 8, _array.buffer.byteLength)), _struct.Iovlen = _view.getUint32(16, true), _struct.Pad_cgo_1 = new ($nativeArray($kindUint8))(_array.buffer, $min(_array.byteOffset + 20, _array.buffer.byteLength)), _struct.Controllen = _view.getUint32(28, true), _struct.Flags = _view.getInt32(32, true);
		r0 = _tuple[0];
		e1 = _tuple[2];
		n = ((r0 >> 0));
		if (!((e1 === 0))) {
			err = errnoErr(e1);
		}
		return [n, err];
	};
	sendmsg = function(s, msg, flags) {
		var _array, _struct, _tuple, _view, e1, err, flags, msg, n, r0, s;
		n = 0;
		err = $ifaceNil;
		_array = new Uint8Array(36);
		_tuple = Syscall(28, ((s >>> 0)), ((_array)), ((flags >>> 0)));
		_struct = msg, _view = new DataView(_array.buffer, _array.byteOffset), _struct.Namelen = _view.getUint32(4, true), _struct.Pad_cgo_0 = new ($nativeArray($kindUint8))(_array.buffer, $min(_array.byteOffset + 8, _array.buffer.byteLength)), _struct.Iovlen = _view.getUint32(16, true), _struct.Pad_cgo_1 = new ($nativeArray($kindUint8))(_array.buffer, $min(_array.byteOffset + 20, _array.buffer.byteLength)), _struct.Controllen = _view.getUint32(28, true), _struct.Flags = _view.getInt32(32, true);
		r0 = _tuple[0];
		e1 = _tuple[2];
		n = ((r0 >> 0));
		if (!((e1 === 0))) {
			err = errnoErr(e1);
		}
		return [n, err];
	};
	fcntl = function(fd, cmd, arg) {
		var _tuple, arg, cmd, e1, err, fd, r0, val;
		val = 0;
		err = $ifaceNil;
		_tuple = Syscall(92, ((fd >>> 0)), ((cmd >>> 0)), ((arg >>> 0)));
		r0 = _tuple[0];
		e1 = _tuple[2];
		val = ((r0 >> 0));
		if (!((e1 === 0))) {
			err = errnoErr(e1);
		}
		return [val, err];
	};
	getdents = function(fd, buf) {
		var _p0, _tuple, buf, e1, err, fd, n, r0;
		n = 0;
		err = $ifaceNil;
		_p0 = 0;
		if (buf.$length > 0) {
			_p0 = ($sliceToArray(buf));
		} else {
			_p0 = (new Uint8Array(0));
		}
		_tuple = Syscall(99, ((fd >>> 0)), (_p0), ((buf.$length >>> 0)));
		r0 = _tuple[0];
		e1 = _tuple[2];
		n = ((r0 >> 0));
		if (!((e1 === 0))) {
			err = errnoErr(e1);
		}
		return [n, err];
	};
	Close = function(fd) {
		var _tuple, e1, err, fd;
		err = $ifaceNil;
		_tuple = Syscall(6, ((fd >>> 0)), 0, 0);
		e1 = _tuple[2];
		if (!((e1 === 0))) {
			err = errnoErr(e1);
		}
		return err;
	};
	$pkg.Close = Close;
	Fchdir = function(fd) {
		var _tuple, e1, err, fd;
		err = $ifaceNil;
		_tuple = Syscall(13, ((fd >>> 0)), 0, 0);
		e1 = _tuple[2];
		if (!((e1 === 0))) {
			err = errnoErr(e1);
		}
		return err;
	};
	$pkg.Fchdir = Fchdir;
	Fchmod = function(fd, mode) {
		var _tuple, e1, err, fd, mode;
		err = $ifaceNil;
		_tuple = Syscall(124, ((fd >>> 0)), ((mode >>> 0)), 0);
		e1 = _tuple[2];
		if (!((e1 === 0))) {
			err = errnoErr(e1);
		}
		return err;
	};
	$pkg.Fchmod = Fchmod;
	Fchown = function(fd, uid, gid) {
		var _tuple, e1, err, fd, gid, uid;
		err = $ifaceNil;
		_tuple = Syscall(123, ((fd >>> 0)), ((uid >>> 0)), ((gid >>> 0)));
		e1 = _tuple[2];
		if (!((e1 === 0))) {
			err = errnoErr(e1);
		}
		return err;
	};
	$pkg.Fchown = Fchown;
	Fstat = function(fd, stat) {
		var _array, _struct, _tuple, _view, e1, err, fd, stat;
		err = $ifaceNil;
		_array = new Uint8Array(128);
		_tuple = Syscall(53, ((fd >>> 0)), ((_array)), 0);
		_struct = stat, _view = new DataView(_array.buffer, _array.byteOffset), _struct.Mode = _view.getUint32(0, true), _struct.Dev = _view.getInt32(4, true), _struct.Ino = new $Uint64(_view.getUint32(12, true), _view.getUint32(8, true)), _struct.Nlink = _view.getUint32(16, true), _struct.Uid = _view.getUint32(20, true), _struct.Gid = _view.getUint32(24, true), _struct.Rdev = _view.getInt32(28, true), _struct.Atim.Sec = new $Int64(_view.getUint32(36, true), _view.getUint32(32, true)), _struct.Atim.Nsec = new $Int64(_view.getUint32(44, true), _view.getUint32(40, true)), _struct.Mtim.Sec = new $Int64(_view.getUint32(52, true), _view.getUint32(48, true)), _struct.Mtim.Nsec = new $Int64(_view.getUint32(60, true), _view.getUint32(56, true)), _struct.Ctim.Sec = new $Int64(_view.getUint32(68, true), _view.getUint32(64, true)), _struct.Ctim.Nsec = new $Int64(_view.getUint32(76, true), _view.getUint32(72, true)), _struct.Size = new $Int64(_view.getUint32(84, true), _view.getUint32(80, true)), _struct.Blocks = new $Int64(_view.getUint32(92, true), _view.getUint32(88, true)), _struct.Blksize = _view.getUint32(96, true), _struct.Flags = _view.getUint32(100, true), _struct.Gen = _view.getUint32(104, true), _struct.Pad_cgo_0 = new ($nativeArray($kindUint8))(_array.buffer, $min(_array.byteOffset + 108, _array.buffer.byteLength)), _struct.X__st_birthtim.Sec = new $Int64(_view.getUint32(116, true), _view.getUint32(112, true)), _struct.X__st_birthtim.Nsec = new $Int64(_view.getUint32(124, true), _view.getUint32(120, true));
		e1 = _tuple[2];
		if (!((e1 === 0))) {
			err = errnoErr(e1);
		}
		return err;
	};
	$pkg.Fstat = Fstat;
	Fsync = function(fd) {
		var _tuple, e1, err, fd;
		err = $ifaceNil;
		_tuple = Syscall(95, ((fd >>> 0)), 0, 0);
		e1 = _tuple[2];
		if (!((e1 === 0))) {
			err = errnoErr(e1);
		}
		return err;
	};
	$pkg.Fsync = Fsync;
	Ftruncate = function(fd, length) {
		var _tuple, e1, err, fd, length;
		err = $ifaceNil;
		_tuple = Syscall(201, ((fd >>> 0)), 0, ((length.$low >>> 0)));
		e1 = _tuple[2];
		if (!((e1 === 0))) {
			err = errnoErr(e1);
		}
		return err;
	};
	$pkg.Ftruncate = Ftruncate;
	Lstat = function(path, stat) {
		var _array, _p0, _struct, _tuple, _tuple$1, _view, e1, err, path, stat;
		err = $ifaceNil;
		_p0 = ptrType$2.nil;
		_tuple = BytePtrFromString(path);
		_p0 = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return err;
		}
		_array = new Uint8Array(128);
		_tuple$1 = Syscall(40, ((_p0)), ((_array)), 0);
		_struct = stat, _view = new DataView(_array.buffer, _array.byteOffset), _struct.Mode = _view.getUint32(0, true), _struct.Dev = _view.getInt32(4, true), _struct.Ino = new $Uint64(_view.getUint32(12, true), _view.getUint32(8, true)), _struct.Nlink = _view.getUint32(16, true), _struct.Uid = _view.getUint32(20, true), _struct.Gid = _view.getUint32(24, true), _struct.Rdev = _view.getInt32(28, true), _struct.Atim.Sec = new $Int64(_view.getUint32(36, true), _view.getUint32(32, true)), _struct.Atim.Nsec = new $Int64(_view.getUint32(44, true), _view.getUint32(40, true)), _struct.Mtim.Sec = new $Int64(_view.getUint32(52, true), _view.getUint32(48, true)), _struct.Mtim.Nsec = new $Int64(_view.getUint32(60, true), _view.getUint32(56, true)), _struct.Ctim.Sec = new $Int64(_view.getUint32(68, true), _view.getUint32(64, true)), _struct.Ctim.Nsec = new $Int64(_view.getUint32(76, true), _view.getUint32(72, true)), _struct.Size = new $Int64(_view.getUint32(84, true), _view.getUint32(80, true)), _struct.Blocks = new $Int64(_view.getUint32(92, true), _view.getUint32(88, true)), _struct.Blksize = _view.getUint32(96, true), _struct.Flags = _view.getUint32(100, true), _struct.Gen = _view.getUint32(104, true), _struct.Pad_cgo_0 = new ($nativeArray($kindUint8))(_array.buffer, $min(_array.byteOffset + 108, _array.buffer.byteLength)), _struct.X__st_birthtim.Sec = new $Int64(_view.getUint32(116, true), _view.getUint32(112, true)), _struct.X__st_birthtim.Nsec = new $Int64(_view.getUint32(124, true), _view.getUint32(120, true));
		e1 = _tuple$1[2];
		if (!((e1 === 0))) {
			err = errnoErr(e1);
		}
		return err;
	};
	$pkg.Lstat = Lstat;
	Pread = function(fd, p, offset) {
		var _p0, _tuple, e1, err, fd, n, offset, p, r0;
		n = 0;
		err = $ifaceNil;
		_p0 = 0;
		if (p.$length > 0) {
			_p0 = ($sliceToArray(p));
		} else {
			_p0 = (new Uint8Array(0));
		}
		_tuple = Syscall6(173, ((fd >>> 0)), (_p0), ((p.$length >>> 0)), 0, ((offset.$low >>> 0)), 0);
		r0 = _tuple[0];
		e1 = _tuple[2];
		n = ((r0 >> 0));
		if (!((e1 === 0))) {
			err = errnoErr(e1);
		}
		return [n, err];
	};
	$pkg.Pread = Pread;
	Pwrite = function(fd, p, offset) {
		var _p0, _tuple, e1, err, fd, n, offset, p, r0;
		n = 0;
		err = $ifaceNil;
		_p0 = 0;
		if (p.$length > 0) {
			_p0 = ($sliceToArray(p));
		} else {
			_p0 = (new Uint8Array(0));
		}
		_tuple = Syscall6(174, ((fd >>> 0)), (_p0), ((p.$length >>> 0)), 0, ((offset.$low >>> 0)), 0);
		r0 = _tuple[0];
		e1 = _tuple[2];
		n = ((r0 >> 0));
		if (!((e1 === 0))) {
			err = errnoErr(e1);
		}
		return [n, err];
	};
	$pkg.Pwrite = Pwrite;
	read = function(fd, p) {
		var _p0, _tuple, e1, err, fd, n, p, r0;
		n = 0;
		err = $ifaceNil;
		_p0 = 0;
		if (p.$length > 0) {
			_p0 = ($sliceToArray(p));
		} else {
			_p0 = (new Uint8Array(0));
		}
		_tuple = Syscall(3, ((fd >>> 0)), (_p0), ((p.$length >>> 0)));
		r0 = _tuple[0];
		e1 = _tuple[2];
		n = ((r0 >> 0));
		if (!((e1 === 0))) {
			err = errnoErr(e1);
		}
		return [n, err];
	};
	Seek = function(fd, offset, whence) {
		var _tuple, e1, err, fd, newoffset, offset, r0, whence;
		newoffset = new $Int64(0, 0);
		err = $ifaceNil;
		_tuple = Syscall6(199, ((fd >>> 0)), 0, ((offset.$low >>> 0)), ((whence >>> 0)), 0, 0);
		r0 = _tuple[0];
		e1 = _tuple[2];
		newoffset = (new $Int64(0, r0.constructor === Number ? r0 : 1));
		if (!((e1 === 0))) {
			err = errnoErr(e1);
		}
		return [newoffset, err];
	};
	$pkg.Seek = Seek;
	write = function(fd, p) {
		var _p0, _tuple, e1, err, fd, n, p, r0;
		n = 0;
		err = $ifaceNil;
		_p0 = 0;
		if (p.$length > 0) {
			_p0 = ($sliceToArray(p));
		} else {
			_p0 = (new Uint8Array(0));
		}
		_tuple = Syscall(4, ((fd >>> 0)), (_p0), ((p.$length >>> 0)));
		r0 = _tuple[0];
		e1 = _tuple[2];
		n = ((r0 >> 0));
		if (!((e1 === 0))) {
			err = errnoErr(e1);
		}
		return [n, err];
	};
	mmap = function(addr, length, prot, flag, fd, pos) {
		var _tuple, addr, e1, err, fd, flag, length, pos, prot, r0, ret;
		ret = 0;
		err = $ifaceNil;
		_tuple = Syscall9(197, (addr), (length), ((prot >>> 0)), ((flag >>> 0)), ((fd >>> 0)), 0, ((pos.$low >>> 0)), 0, 0);
		r0 = _tuple[0];
		e1 = _tuple[2];
		ret = (r0);
		if (!((e1 === 0))) {
			err = errnoErr(e1);
		}
		return [ret, err];
	};
	munmap = function(addr, length) {
		var _tuple, addr, e1, err, length;
		err = $ifaceNil;
		_tuple = Syscall(73, (addr), (length), 0);
		e1 = _tuple[2];
		if (!((e1 === 0))) {
			err = errnoErr(e1);
		}
		return err;
	};
	ptrType$11.methods = [{prop: "sockaddr", name: "sockaddr", pkg: "syscall", typ: $funcType([], [$UnsafePointer, _Socklen, $error], false)}];
	ptrType$26.methods = [{prop: "Mmap", name: "Mmap", pkg: "", typ: $funcType([$Int, $Int64, $Int, $Int, $Int], [sliceType, $error], false)}, {prop: "Munmap", name: "Munmap", pkg: "", typ: $funcType([sliceType], [$error], false)}];
	Errno.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Temporary", name: "Temporary", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Timeout", name: "Timeout", pkg: "", typ: $funcType([], [$Bool], false)}];
	ptrType$27.methods = [{prop: "sockaddr", name: "sockaddr", pkg: "syscall", typ: $funcType([], [$UnsafePointer, _Socklen, $error], false)}];
	ptrType$28.methods = [{prop: "sockaddr", name: "sockaddr", pkg: "syscall", typ: $funcType([], [$UnsafePointer, _Socklen, $error], false)}];
	ptrType$29.methods = [{prop: "sockaddr", name: "sockaddr", pkg: "syscall", typ: $funcType([], [$UnsafePointer, _Socklen, $error], false)}];
	ptrType$30.methods = [{prop: "Unix", name: "Unix", pkg: "", typ: $funcType([], [$Int64, $Int64], false)}, {prop: "Nano", name: "Nano", pkg: "", typ: $funcType([], [$Int64], false)}];
	ptrType$18.methods = [{prop: "SetLen", name: "SetLen", pkg: "", typ: $funcType([$Int], [], false)}];
	ptrType$31.methods = [{prop: "SetControllen", name: "SetControllen", pkg: "", typ: $funcType([$Int], [], false)}];
	SockaddrDatalink.init("syscall", [{prop: "Len", name: "Len", anonymous: false, exported: true, typ: $Uint8, tag: ""}, {prop: "Family", name: "Family", anonymous: false, exported: true, typ: $Uint8, tag: ""}, {prop: "Index", name: "Index", anonymous: false, exported: true, typ: $Uint16, tag: ""}, {prop: "Type", name: "Type", anonymous: false, exported: true, typ: $Uint8, tag: ""}, {prop: "Nlen", name: "Nlen", anonymous: false, exported: true, typ: $Uint8, tag: ""}, {prop: "Alen", name: "Alen", anonymous: false, exported: true, typ: $Uint8, tag: ""}, {prop: "Slen", name: "Slen", anonymous: false, exported: true, typ: $Uint8, tag: ""}, {prop: "Data", name: "Data", anonymous: false, exported: true, typ: arrayType$3, tag: ""}, {prop: "raw", name: "raw", anonymous: false, exported: false, typ: RawSockaddrDatalink, tag: ""}]);
	mmapper.init("syscall", [{prop: "Mutex", name: "Mutex", anonymous: true, exported: true, typ: sync.Mutex, tag: ""}, {prop: "active", name: "active", anonymous: false, exported: false, typ: mapType, tag: ""}, {prop: "mmap", name: "mmap", anonymous: false, exported: false, typ: funcType$2, tag: ""}, {prop: "munmap", name: "munmap", anonymous: false, exported: false, typ: funcType$3, tag: ""}]);
	Sockaddr.init([{prop: "sockaddr", name: "sockaddr", pkg: "syscall", typ: $funcType([], [$UnsafePointer, _Socklen, $error], false)}]);
	SockaddrInet4.init("syscall", [{prop: "Port", name: "Port", anonymous: false, exported: true, typ: $Int, tag: ""}, {prop: "Addr", name: "Addr", anonymous: false, exported: true, typ: arrayType$1, tag: ""}, {prop: "raw", name: "raw", anonymous: false, exported: false, typ: RawSockaddrInet4, tag: ""}]);
	SockaddrInet6.init("syscall", [{prop: "Port", name: "Port", anonymous: false, exported: true, typ: $Int, tag: ""}, {prop: "ZoneId", name: "ZoneId", anonymous: false, exported: true, typ: $Uint32, tag: ""}, {prop: "Addr", name: "Addr", anonymous: false, exported: true, typ: arrayType, tag: ""}, {prop: "raw", name: "raw", anonymous: false, exported: false, typ: RawSockaddrInet6, tag: ""}]);
	SockaddrUnix.init("syscall", [{prop: "Name", name: "Name", anonymous: false, exported: true, typ: $String, tag: ""}, {prop: "raw", name: "raw", anonymous: false, exported: false, typ: RawSockaddrUnix, tag: ""}]);
	Timespec.init("", [{prop: "Sec", name: "Sec", anonymous: false, exported: true, typ: $Int64, tag: ""}, {prop: "Nsec", name: "Nsec", anonymous: false, exported: true, typ: $Int64, tag: ""}]);
	Stat_t.init("", [{prop: "Mode", name: "Mode", anonymous: false, exported: true, typ: $Uint32, tag: ""}, {prop: "Dev", name: "Dev", anonymous: false, exported: true, typ: $Int32, tag: ""}, {prop: "Ino", name: "Ino", anonymous: false, exported: true, typ: $Uint64, tag: ""}, {prop: "Nlink", name: "Nlink", anonymous: false, exported: true, typ: $Uint32, tag: ""}, {prop: "Uid", name: "Uid", anonymous: false, exported: true, typ: $Uint32, tag: ""}, {prop: "Gid", name: "Gid", anonymous: false, exported: true, typ: $Uint32, tag: ""}, {prop: "Rdev", name: "Rdev", anonymous: false, exported: true, typ: $Int32, tag: ""}, {prop: "Atim", name: "Atim", anonymous: false, exported: true, typ: Timespec, tag: ""}, {prop: "Mtim", name: "Mtim", anonymous: false, exported: true, typ: Timespec, tag: ""}, {prop: "Ctim", name: "Ctim", anonymous: false, exported: true, typ: Timespec, tag: ""}, {prop: "Size", name: "Size", anonymous: false, exported: true, typ: $Int64, tag: ""}, {prop: "Blocks", name: "Blocks", anonymous: false, exported: true, typ: $Int64, tag: ""}, {prop: "Blksize", name: "Blksize", anonymous: false, exported: true, typ: $Uint32, tag: ""}, {prop: "Flags", name: "Flags", anonymous: false, exported: true, typ: $Uint32, tag: ""}, {prop: "Gen", name: "Gen", anonymous: false, exported: true, typ: $Uint32, tag: ""}, {prop: "Pad_cgo_0", name: "Pad_cgo_0", anonymous: false, exported: true, typ: arrayType$1, tag: ""}, {prop: "X__st_birthtim", name: "X__st_birthtim", anonymous: false, exported: true, typ: Timespec, tag: ""}]);
	RawSockaddrInet4.init("", [{prop: "Len", name: "Len", anonymous: false, exported: true, typ: $Uint8, tag: ""}, {prop: "Family", name: "Family", anonymous: false, exported: true, typ: $Uint8, tag: ""}, {prop: "Port", name: "Port", anonymous: false, exported: true, typ: $Uint16, tag: ""}, {prop: "Addr", name: "Addr", anonymous: false, exported: true, typ: arrayType$1, tag: ""}, {prop: "Zero", name: "Zero", anonymous: false, exported: true, typ: arrayType$6, tag: ""}]);
	RawSockaddrInet6.init("", [{prop: "Len", name: "Len", anonymous: false, exported: true, typ: $Uint8, tag: ""}, {prop: "Family", name: "Family", anonymous: false, exported: true, typ: $Uint8, tag: ""}, {prop: "Port", name: "Port", anonymous: false, exported: true, typ: $Uint16, tag: ""}, {prop: "Flowinfo", name: "Flowinfo", anonymous: false, exported: true, typ: $Uint32, tag: ""}, {prop: "Addr", name: "Addr", anonymous: false, exported: true, typ: arrayType, tag: ""}, {prop: "Scope_id", name: "Scope_id", anonymous: false, exported: true, typ: $Uint32, tag: ""}]);
	RawSockaddrUnix.init("", [{prop: "Len", name: "Len", anonymous: false, exported: true, typ: $Uint8, tag: ""}, {prop: "Family", name: "Family", anonymous: false, exported: true, typ: $Uint8, tag: ""}, {prop: "Path", name: "Path", anonymous: false, exported: true, typ: arrayType$11, tag: ""}]);
	RawSockaddrDatalink.init("", [{prop: "Len", name: "Len", anonymous: false, exported: true, typ: $Uint8, tag: ""}, {prop: "Family", name: "Family", anonymous: false, exported: true, typ: $Uint8, tag: ""}, {prop: "Index", name: "Index", anonymous: false, exported: true, typ: $Uint16, tag: ""}, {prop: "Type", name: "Type", anonymous: false, exported: true, typ: $Uint8, tag: ""}, {prop: "Nlen", name: "Nlen", anonymous: false, exported: true, typ: $Uint8, tag: ""}, {prop: "Alen", name: "Alen", anonymous: false, exported: true, typ: $Uint8, tag: ""}, {prop: "Slen", name: "Slen", anonymous: false, exported: true, typ: $Uint8, tag: ""}, {prop: "Data", name: "Data", anonymous: false, exported: true, typ: arrayType$3, tag: ""}]);
	RawSockaddr.init("", [{prop: "Len", name: "Len", anonymous: false, exported: true, typ: $Uint8, tag: ""}, {prop: "Family", name: "Family", anonymous: false, exported: true, typ: $Uint8, tag: ""}, {prop: "Data", name: "Data", anonymous: false, exported: true, typ: arrayType$4, tag: ""}]);
	RawSockaddrAny.init("", [{prop: "Addr", name: "Addr", anonymous: false, exported: true, typ: RawSockaddr, tag: ""}, {prop: "Pad", name: "Pad", anonymous: false, exported: true, typ: arrayType$5, tag: ""}]);
	Linger.init("", [{prop: "Onoff", name: "Onoff", anonymous: false, exported: true, typ: $Int32, tag: ""}, {prop: "Linger", name: "Linger", anonymous: false, exported: true, typ: $Int32, tag: ""}]);
	Iovec.init("", [{prop: "Base", name: "Base", anonymous: false, exported: true, typ: ptrType$2, tag: ""}, {prop: "Len", name: "Len", anonymous: false, exported: true, typ: $Uint64, tag: ""}]);
	IPMreq.init("", [{prop: "Multiaddr", name: "Multiaddr", anonymous: false, exported: true, typ: arrayType$1, tag: ""}, {prop: "Interface", name: "Interface", anonymous: false, exported: true, typ: arrayType$1, tag: ""}]);
	IPv6Mreq.init("", [{prop: "Multiaddr", name: "Multiaddr", anonymous: false, exported: true, typ: arrayType, tag: ""}, {prop: "Interface", name: "Interface", anonymous: false, exported: true, typ: $Uint32, tag: ""}]);
	Msghdr.init("", [{prop: "Name", name: "Name", anonymous: false, exported: true, typ: ptrType$2, tag: ""}, {prop: "Namelen", name: "Namelen", anonymous: false, exported: true, typ: $Uint32, tag: ""}, {prop: "Pad_cgo_0", name: "Pad_cgo_0", anonymous: false, exported: true, typ: arrayType$1, tag: ""}, {prop: "Iov", name: "Iov", anonymous: false, exported: true, typ: ptrType$18, tag: ""}, {prop: "Iovlen", name: "Iovlen", anonymous: false, exported: true, typ: $Uint32, tag: ""}, {prop: "Pad_cgo_1", name: "Pad_cgo_1", anonymous: false, exported: true, typ: arrayType$1, tag: ""}, {prop: "Control", name: "Control", anonymous: false, exported: true, typ: ptrType$2, tag: ""}, {prop: "Controllen", name: "Controllen", anonymous: false, exported: true, typ: $Uint32, tag: ""}, {prop: "Flags", name: "Flags", anonymous: false, exported: true, typ: $Int32, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = js.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = race.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = runtime.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = sync.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		lineBuffer = sliceType.nil;
		syscallModule = null;
		freebsdConfArch = "";
		ioSync = new $Int64(0, 0);
		warningPrinted = false;
		alreadyTriedToLoad = false;
		minusOne = -1;
		envs = runtime_envs();
		$pkg.Stdin = 0;
		$pkg.Stdout = 1;
		$pkg.Stderr = 2;
		errEAGAIN = new Errno(35);
		errEINVAL = new Errno(22);
		errENOENT = new Errno(2);
		errors = $toNativeArray($kindString, ["", "operation not permitted", "no such file or directory", "no such process", "interrupted system call", "input/output error", "device not configured", "argument list too long", "exec format error", "bad file descriptor", "no child processes", "resource deadlock avoided", "cannot allocate memory", "permission denied", "bad address", "block device required", "device busy", "file exists", "cross-device link", "operation not supported by device", "not a directory", "is a directory", "invalid argument", "too many open files in system", "too many open files", "inappropriate ioctl for device", "text file busy", "file too large", "no space left on device", "illegal seek", "read-only file system", "too many links", "broken pipe", "numerical argument out of domain", "result too large", "resource temporarily unavailable", "operation now in progress", "operation already in progress", "socket operation on non-socket", "destination address required", "message too long", "protocol wrong type for socket", "protocol not available", "protocol not supported", "socket type not supported", "operation not supported", "protocol family not supported", "address family not supported by protocol family", "address already in use", "can't assign requested address", "network is down", "network is unreachable", "network dropped connection on reset", "software caused connection abort", "connection reset by peer", "no buffer space available", "socket is already connected", "socket is not connected", "can't send after socket shutdown", "too many references: can't splice", "connection timed out", "connection refused", "too many levels of symbolic links", "file name too long", "host is down", "no route to host", "directory not empty", "too many processes", "too many users", "disc quota exceeded", "stale NFS file handle", "too many levels of remote in path", "RPC struct is bad", "RPC version wrong", "RPC prog. not avail", "program version wrong", "bad procedure for program", "no locks available", "function not implemented", "inappropriate file type or format", "authentication error", "need authenticator", "IPsec processing failure", "attribute not found", "illegal byte sequence", "no medium found", "wrong medium type", "value too large to be stored in data type", "operation canceled", "identifier removed", "no message of desired type", "not supported"]);
		mapper = new mmapper.ptr(new sync.Mutex.ptr(0, 0), {}, mmap, munmap);
		minRoutingSockaddrLen = rsaAlignOf(0);
		init();
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["github.com/gopherjs/gopherjs/nosync"] = (function() {
	var $pkg = {}, $init, Map, Mutex, Once, Pool, funcType, ptrType, mapType, ptrType$1, funcType$1, ptrType$4, sliceType, ptrType$5, funcType$2;
	Map = $pkg.Map = $newType(0, $kindStruct, "nosync.Map", true, "github.com/gopherjs/gopherjs/nosync", true, function(m_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.m = false;
			return;
		}
		this.m = m_;
	});
	Mutex = $pkg.Mutex = $newType(0, $kindStruct, "nosync.Mutex", true, "github.com/gopherjs/gopherjs/nosync", true, function(locked_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.locked = false;
			return;
		}
		this.locked = locked_;
	});
	Once = $pkg.Once = $newType(0, $kindStruct, "nosync.Once", true, "github.com/gopherjs/gopherjs/nosync", true, function(doing_, done_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.doing = false;
			this.done = false;
			return;
		}
		this.doing = doing_;
		this.done = done_;
	});
	Pool = $pkg.Pool = $newType(0, $kindStruct, "nosync.Pool", true, "github.com/gopherjs/gopherjs/nosync", true, function(store_, New_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.store = sliceType.nil;
			this.New = $throwNilPointerError;
			return;
		}
		this.store = store_;
		this.New = New_;
	});
	funcType = $funcType([$emptyInterface, $emptyInterface], [$Bool], false);
	ptrType = $ptrType(Map);
	mapType = $mapType($emptyInterface, $emptyInterface);
	ptrType$1 = $ptrType(Mutex);
	funcType$1 = $funcType([], [], false);
	ptrType$4 = $ptrType(Once);
	sliceType = $sliceType($emptyInterface);
	ptrType$5 = $ptrType(Pool);
	funcType$2 = $funcType([], [$emptyInterface], false);
	Map.ptr.prototype.Load = function(key) {
		var _entry, _tmp, _tmp$1, _tuple, key, m, ok, value;
		value = $ifaceNil;
		ok = false;
		m = this;
		_tuple = (_entry = m.m[$emptyInterface.keyFor(key)], _entry !== undefined ? [_entry.v, true] : [$ifaceNil, false]);
		value = _tuple[0];
		ok = _tuple[1];
		_tmp = value;
		_tmp$1 = ok;
		value = _tmp;
		ok = _tmp$1;
		return [value, ok];
	};
	Map.prototype.Load = function(key) { return this.$val.Load(key); };
	Map.ptr.prototype.Store = function(key, value) {
		var _key, key, m, value;
		m = this;
		if (m.m === false) {
			m.m = {};
		}
		_key = key; (m.m || $throwRuntimeError("assignment to entry in nil map"))[$emptyInterface.keyFor(_key)] = { k: _key, v: value };
	};
	Map.prototype.Store = function(key, value) { return this.$val.Store(key, value); };
	Map.ptr.prototype.LoadOrStore = function(key, value) {
		var _entry, _key, _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple, actual, key, loaded, m, ok, value, value$1;
		actual = $ifaceNil;
		loaded = false;
		m = this;
		_tuple = (_entry = m.m[$emptyInterface.keyFor(key)], _entry !== undefined ? [_entry.v, true] : [$ifaceNil, false]);
		value$1 = _tuple[0];
		ok = _tuple[1];
		if (ok) {
			_tmp = value$1;
			_tmp$1 = true;
			actual = _tmp;
			loaded = _tmp$1;
			return [actual, loaded];
		}
		if (m.m === false) {
			m.m = {};
		}
		_key = key; (m.m || $throwRuntimeError("assignment to entry in nil map"))[$emptyInterface.keyFor(_key)] = { k: _key, v: value };
		_tmp$2 = value;
		_tmp$3 = false;
		actual = _tmp$2;
		loaded = _tmp$3;
		return [actual, loaded];
	};
	Map.prototype.LoadOrStore = function(key, value) { return this.$val.LoadOrStore(key, value); };
	Map.ptr.prototype.Delete = function(key) {
		var key, m;
		m = this;
		if (m.m === false) {
			return;
		}
		delete m.m[$emptyInterface.keyFor(key)];
	};
	Map.prototype.Delete = function(key) { return this.$val.Delete(key); };
	Map.ptr.prototype.Range = function(f) {
		var _entry, _i, _keys, _r, _ref, f, k, m, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _entry = $f._entry; _i = $f._i; _keys = $f._keys; _r = $f._r; _ref = $f._ref; f = $f.f; k = $f.k; m = $f.m; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		m = this;
		_ref = m.m;
		_i = 0;
		_keys = $keys(_ref);
		/* while (true) { */ case 1:
			/* if (!(_i < _keys.length)) { break; } */ if(!(_i < _keys.length)) { $s = 2; continue; }
			_entry = _ref[_keys[_i]];
			if (_entry === undefined) {
				_i++;
				/* continue; */ $s = 1; continue;
			}
			k = _entry.k;
			v = _entry.v;
			_r = f(k, v); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			/* */ if (!_r) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (!_r) { */ case 3:
				/* break; */ $s = 2; continue;
			/* } */ case 4:
			_i++;
		/* } */ $s = 1; continue; case 2:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Map.ptr.prototype.Range }; } $f._entry = _entry; $f._i = _i; $f._keys = _keys; $f._r = _r; $f._ref = _ref; $f.f = f; $f.k = k; $f.m = m; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Map.prototype.Range = function(f) { return this.$val.Range(f); };
	Mutex.ptr.prototype.Lock = function() {
		var m;
		m = this;
		if (m.locked) {
			$panic(new $String("nosync: mutex is already locked"));
		}
		m.locked = true;
	};
	Mutex.prototype.Lock = function() { return this.$val.Lock(); };
	Mutex.ptr.prototype.Unlock = function() {
		var m;
		m = this;
		if (!m.locked) {
			$panic(new $String("nosync: unlock of unlocked mutex"));
		}
		m.locked = false;
	};
	Mutex.prototype.Unlock = function() { return this.$val.Unlock(); };
	Once.ptr.prototype.Do = function(f) {
		var f, o, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; f = $f.f; o = $f.o; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		o = [o];
		o[0] = this;
		if (o[0].done) {
			$s = -1; return;
		}
		if (o[0].doing) {
			$panic(new $String("nosync: Do called within f"));
		}
		o[0].doing = true;
		$deferred.push([(function(o) { return function() {
			o[0].doing = false;
			o[0].done = true;
		}; })(o), []]);
		$r = f(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } } catch(err) { $err = err; $s = -1; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: Once.ptr.prototype.Do }; } $f.f = f; $f.o = o; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	Once.prototype.Do = function(f) { return this.$val.Do(f); };
	Pool.ptr.prototype.Get = function() {
		var _r, p, x, x$1, x$2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; p = $f.p; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		/* */ if (p.store.$length === 0) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (p.store.$length === 0) { */ case 1:
			/* */ if (!(p.New === $throwNilPointerError)) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (!(p.New === $throwNilPointerError)) { */ case 3:
				_r = p.New(); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				$s = -1; return _r;
			/* } */ case 4:
			$s = -1; return $ifaceNil;
		/* } */ case 2:
		x$2 = (x = p.store, x$1 = p.store.$length - 1 >> 0, ((x$1 < 0 || x$1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + x$1]));
		p.store = $subslice(p.store, 0, (p.store.$length - 1 >> 0));
		$s = -1; return x$2;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Pool.ptr.prototype.Get }; } $f._r = _r; $f.p = p; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.$s = $s; $f.$r = $r; return $f;
	};
	Pool.prototype.Get = function() { return this.$val.Get(); };
	Pool.ptr.prototype.Put = function(x) {
		var p, x;
		p = this;
		if ($interfaceIsEqual(x, $ifaceNil)) {
			return;
		}
		p.store = $append(p.store, x);
	};
	Pool.prototype.Put = function(x) { return this.$val.Put(x); };
	ptrType.methods = [{prop: "Load", name: "Load", pkg: "", typ: $funcType([$emptyInterface], [$emptyInterface, $Bool], false)}, {prop: "Store", name: "Store", pkg: "", typ: $funcType([$emptyInterface, $emptyInterface], [], false)}, {prop: "LoadOrStore", name: "LoadOrStore", pkg: "", typ: $funcType([$emptyInterface, $emptyInterface], [$emptyInterface, $Bool], false)}, {prop: "Delete", name: "Delete", pkg: "", typ: $funcType([$emptyInterface], [], false)}, {prop: "Range", name: "Range", pkg: "", typ: $funcType([funcType], [], false)}];
	ptrType$1.methods = [{prop: "Lock", name: "Lock", pkg: "", typ: $funcType([], [], false)}, {prop: "Unlock", name: "Unlock", pkg: "", typ: $funcType([], [], false)}];
	ptrType$4.methods = [{prop: "Do", name: "Do", pkg: "", typ: $funcType([funcType$1], [], false)}];
	ptrType$5.methods = [{prop: "Get", name: "Get", pkg: "", typ: $funcType([], [$emptyInterface], false)}, {prop: "Put", name: "Put", pkg: "", typ: $funcType([$emptyInterface], [], false)}];
	Map.init("github.com/gopherjs/gopherjs/nosync", [{prop: "m", name: "m", anonymous: false, exported: false, typ: mapType, tag: ""}]);
	Mutex.init("github.com/gopherjs/gopherjs/nosync", [{prop: "locked", name: "locked", anonymous: false, exported: false, typ: $Bool, tag: ""}]);
	Once.init("github.com/gopherjs/gopherjs/nosync", [{prop: "doing", name: "doing", anonymous: false, exported: false, typ: $Bool, tag: ""}, {prop: "done", name: "done", anonymous: false, exported: false, typ: $Bool, tag: ""}]);
	Pool.init("github.com/gopherjs/gopherjs/nosync", [{prop: "store", name: "store", anonymous: false, exported: false, typ: sliceType, tag: ""}, {prop: "New", name: "New", anonymous: false, exported: true, typ: funcType$2, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["time"] = (function() {
	var $pkg = {}, $init, errors, js, nosync, runtime, syscall, ParseError, Time, Month, Weekday, Duration, Location, zone, zoneTrans, sliceType, sliceType$1, ptrType, sliceType$2, structType, arrayType, sliceType$3, arrayType$1, arrayType$2, ptrType$2, arrayType$3, ptrType$4, ptrType$7, zoneSources, std0x, longDayNames, shortDayNames, shortMonthNames, longMonthNames, atoiError, errBad, errLeadingInt, months, days, daysBefore, utcLoc, utcLoc$24ptr, localLoc, localLoc$24ptr, localOnce, errLocation, badData, init, initLocal, runtimeNano, now, Sleep, indexByte, startsWithLowerCase, nextStdChunk, match, lookup, appendInt, atoi, formatNano, quote, isDigit, getnum, cutspace, skip, Parse, parse, parseTimeZone, parseGMT, parseNanoseconds, leadingInt, absWeekday, absClock, fmtFrac, fmtInt, lessThanHalf, absDate, daysIn, Now, unixTime, Unix, isLeap, norm, Date, div, FixedZone;
	errors = $packages["errors"];
	js = $packages["github.com/gopherjs/gopherjs/js"];
	nosync = $packages["github.com/gopherjs/gopherjs/nosync"];
	runtime = $packages["runtime"];
	syscall = $packages["syscall"];
	ParseError = $pkg.ParseError = $newType(0, $kindStruct, "time.ParseError", true, "time", true, function(Layout_, Value_, LayoutElem_, ValueElem_, Message_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Layout = "";
			this.Value = "";
			this.LayoutElem = "";
			this.ValueElem = "";
			this.Message = "";
			return;
		}
		this.Layout = Layout_;
		this.Value = Value_;
		this.LayoutElem = LayoutElem_;
		this.ValueElem = ValueElem_;
		this.Message = Message_;
	});
	Time = $pkg.Time = $newType(0, $kindStruct, "time.Time", true, "time", true, function(wall_, ext_, loc_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.wall = new $Uint64(0, 0);
			this.ext = new $Int64(0, 0);
			this.loc = ptrType$2.nil;
			return;
		}
		this.wall = wall_;
		this.ext = ext_;
		this.loc = loc_;
	});
	Month = $pkg.Month = $newType(4, $kindInt, "time.Month", true, "time", true, null);
	Weekday = $pkg.Weekday = $newType(4, $kindInt, "time.Weekday", true, "time", true, null);
	Duration = $pkg.Duration = $newType(8, $kindInt64, "time.Duration", true, "time", true, null);
	Location = $pkg.Location = $newType(0, $kindStruct, "time.Location", true, "time", true, function(name_, zone_, tx_, cacheStart_, cacheEnd_, cacheZone_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.name = "";
			this.zone = sliceType.nil;
			this.tx = sliceType$1.nil;
			this.cacheStart = new $Int64(0, 0);
			this.cacheEnd = new $Int64(0, 0);
			this.cacheZone = ptrType.nil;
			return;
		}
		this.name = name_;
		this.zone = zone_;
		this.tx = tx_;
		this.cacheStart = cacheStart_;
		this.cacheEnd = cacheEnd_;
		this.cacheZone = cacheZone_;
	});
	zone = $pkg.zone = $newType(0, $kindStruct, "time.zone", true, "time", false, function(name_, offset_, isDST_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.name = "";
			this.offset = 0;
			this.isDST = false;
			return;
		}
		this.name = name_;
		this.offset = offset_;
		this.isDST = isDST_;
	});
	zoneTrans = $pkg.zoneTrans = $newType(0, $kindStruct, "time.zoneTrans", true, "time", false, function(when_, index_, isstd_, isutc_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.when = new $Int64(0, 0);
			this.index = 0;
			this.isstd = false;
			this.isutc = false;
			return;
		}
		this.when = when_;
		this.index = index_;
		this.isstd = isstd_;
		this.isutc = isutc_;
	});
	sliceType = $sliceType(zone);
	sliceType$1 = $sliceType(zoneTrans);
	ptrType = $ptrType(zone);
	sliceType$2 = $sliceType($String);
	structType = $structType("", []);
	arrayType = $arrayType($Uint8, 20);
	sliceType$3 = $sliceType($Uint8);
	arrayType$1 = $arrayType($Uint8, 9);
	arrayType$2 = $arrayType($Uint8, 64);
	ptrType$2 = $ptrType(Location);
	arrayType$3 = $arrayType($Uint8, 32);
	ptrType$4 = $ptrType(ParseError);
	ptrType$7 = $ptrType(Time);
	init = function() {
		$unused(Unix(new $Int64(0, 0), new $Int64(0, 0)));
	};
	initLocal = function() {
		var d, i, j, s;
		d = new ($global.Date)();
		s = $internalize(d, $String);
		i = indexByte(s, 40);
		j = indexByte(s, 41);
		if ((i === -1) || (j === -1)) {
			localLoc.name = "UTC";
			return;
		}
		localLoc.name = $substring(s, (i + 1 >> 0), j);
		localLoc.zone = new sliceType([new zone.ptr(localLoc.name, $imul(($parseInt(d.getTimezoneOffset()) >> 0), -60), false)]);
	};
	runtimeNano = function() {
		return $mul64($internalize(new ($global.Date)().getTime(), $Int64), new $Int64(0, 1000000));
	};
	now = function() {
		var _tmp, _tmp$1, _tmp$2, mono, n, nsec, sec, x;
		sec = new $Int64(0, 0);
		nsec = 0;
		mono = new $Int64(0, 0);
		n = runtimeNano();
		_tmp = $div64(n, new $Int64(0, 1000000000), false);
		_tmp$1 = (((x = $div64(n, new $Int64(0, 1000000000), true), x.$low + ((x.$high >> 31) * 4294967296)) >> 0));
		_tmp$2 = n;
		sec = _tmp;
		nsec = _tmp$1;
		mono = _tmp$2;
		return [sec, nsec, mono];
	};
	Sleep = function(d) {
		var _r, c, d, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; c = $f.c; d = $f.d; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		c = [c];
		c[0] = new $Chan(structType, 0);
		$setTimeout((function(c) { return function() {
			$close(c[0]);
		}; })(c), (((x = $div64(d, new Duration(0, 1000000), false), x.$low + ((x.$high >> 31) * 4294967296)) >> 0)));
		_r = $recv(c[0]); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r[0];
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Sleep }; } $f._r = _r; $f.c = c; $f.d = d; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Sleep = Sleep;
	indexByte = function(s, c) {
		var c, s;
		return $parseInt(s.indexOf($global.String.fromCharCode(c))) >> 0;
	};
	startsWithLowerCase = function(str) {
		var c, str;
		if (str.length === 0) {
			return false;
		}
		c = str.charCodeAt(0);
		return 97 <= c && c <= 122;
	};
	nextStdChunk = function(layout) {
		var _1, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$15, _tmp$16, _tmp$17, _tmp$18, _tmp$19, _tmp$2, _tmp$20, _tmp$21, _tmp$22, _tmp$23, _tmp$24, _tmp$25, _tmp$26, _tmp$27, _tmp$28, _tmp$29, _tmp$3, _tmp$30, _tmp$31, _tmp$32, _tmp$33, _tmp$34, _tmp$35, _tmp$36, _tmp$37, _tmp$38, _tmp$39, _tmp$4, _tmp$40, _tmp$41, _tmp$42, _tmp$43, _tmp$44, _tmp$45, _tmp$46, _tmp$47, _tmp$48, _tmp$49, _tmp$5, _tmp$50, _tmp$51, _tmp$52, _tmp$53, _tmp$54, _tmp$55, _tmp$56, _tmp$57, _tmp$58, _tmp$59, _tmp$6, _tmp$60, _tmp$61, _tmp$62, _tmp$63, _tmp$64, _tmp$65, _tmp$66, _tmp$67, _tmp$68, _tmp$69, _tmp$7, _tmp$70, _tmp$71, _tmp$72, _tmp$73, _tmp$74, _tmp$75, _tmp$76, _tmp$77, _tmp$78, _tmp$79, _tmp$8, _tmp$80, _tmp$81, _tmp$82, _tmp$83, _tmp$84, _tmp$85, _tmp$86, _tmp$9, c, ch, i, j, layout, prefix, std, std$1, suffix, x;
		prefix = "";
		std = 0;
		suffix = "";
		i = 0;
		while (true) {
			if (!(i < layout.length)) { break; }
			c = ((layout.charCodeAt(i) >> 0));
			_1 = c;
			if (_1 === (74)) {
				if (layout.length >= (i + 3 >> 0) && $substring(layout, i, (i + 3 >> 0)) === "Jan") {
					if (layout.length >= (i + 7 >> 0) && $substring(layout, i, (i + 7 >> 0)) === "January") {
						_tmp = $substring(layout, 0, i);
						_tmp$1 = 257;
						_tmp$2 = $substring(layout, (i + 7 >> 0));
						prefix = _tmp;
						std = _tmp$1;
						suffix = _tmp$2;
						return [prefix, std, suffix];
					}
					if (!startsWithLowerCase($substring(layout, (i + 3 >> 0)))) {
						_tmp$3 = $substring(layout, 0, i);
						_tmp$4 = 258;
						_tmp$5 = $substring(layout, (i + 3 >> 0));
						prefix = _tmp$3;
						std = _tmp$4;
						suffix = _tmp$5;
						return [prefix, std, suffix];
					}
				}
			} else if (_1 === (77)) {
				if (layout.length >= (i + 3 >> 0)) {
					if ($substring(layout, i, (i + 3 >> 0)) === "Mon") {
						if (layout.length >= (i + 6 >> 0) && $substring(layout, i, (i + 6 >> 0)) === "Monday") {
							_tmp$6 = $substring(layout, 0, i);
							_tmp$7 = 261;
							_tmp$8 = $substring(layout, (i + 6 >> 0));
							prefix = _tmp$6;
							std = _tmp$7;
							suffix = _tmp$8;
							return [prefix, std, suffix];
						}
						if (!startsWithLowerCase($substring(layout, (i + 3 >> 0)))) {
							_tmp$9 = $substring(layout, 0, i);
							_tmp$10 = 262;
							_tmp$11 = $substring(layout, (i + 3 >> 0));
							prefix = _tmp$9;
							std = _tmp$10;
							suffix = _tmp$11;
							return [prefix, std, suffix];
						}
					}
					if ($substring(layout, i, (i + 3 >> 0)) === "MST") {
						_tmp$12 = $substring(layout, 0, i);
						_tmp$13 = 21;
						_tmp$14 = $substring(layout, (i + 3 >> 0));
						prefix = _tmp$12;
						std = _tmp$13;
						suffix = _tmp$14;
						return [prefix, std, suffix];
					}
				}
			} else if (_1 === (48)) {
				if (layout.length >= (i + 2 >> 0) && 49 <= layout.charCodeAt((i + 1 >> 0)) && layout.charCodeAt((i + 1 >> 0)) <= 54) {
					_tmp$15 = $substring(layout, 0, i);
					_tmp$16 = (x = layout.charCodeAt((i + 1 >> 0)) - 49 << 24 >>> 24, ((x < 0 || x >= std0x.length) ? ($throwRuntimeError("index out of range"), undefined) : std0x[x]));
					_tmp$17 = $substring(layout, (i + 2 >> 0));
					prefix = _tmp$15;
					std = _tmp$16;
					suffix = _tmp$17;
					return [prefix, std, suffix];
				}
			} else if (_1 === (49)) {
				if (layout.length >= (i + 2 >> 0) && (layout.charCodeAt((i + 1 >> 0)) === 53)) {
					_tmp$18 = $substring(layout, 0, i);
					_tmp$19 = 522;
					_tmp$20 = $substring(layout, (i + 2 >> 0));
					prefix = _tmp$18;
					std = _tmp$19;
					suffix = _tmp$20;
					return [prefix, std, suffix];
				}
				_tmp$21 = $substring(layout, 0, i);
				_tmp$22 = 259;
				_tmp$23 = $substring(layout, (i + 1 >> 0));
				prefix = _tmp$21;
				std = _tmp$22;
				suffix = _tmp$23;
				return [prefix, std, suffix];
			} else if (_1 === (50)) {
				if (layout.length >= (i + 4 >> 0) && $substring(layout, i, (i + 4 >> 0)) === "2006") {
					_tmp$24 = $substring(layout, 0, i);
					_tmp$25 = 273;
					_tmp$26 = $substring(layout, (i + 4 >> 0));
					prefix = _tmp$24;
					std = _tmp$25;
					suffix = _tmp$26;
					return [prefix, std, suffix];
				}
				_tmp$27 = $substring(layout, 0, i);
				_tmp$28 = 263;
				_tmp$29 = $substring(layout, (i + 1 >> 0));
				prefix = _tmp$27;
				std = _tmp$28;
				suffix = _tmp$29;
				return [prefix, std, suffix];
			} else if (_1 === (95)) {
				if (layout.length >= (i + 2 >> 0) && (layout.charCodeAt((i + 1 >> 0)) === 50)) {
					if (layout.length >= (i + 5 >> 0) && $substring(layout, (i + 1 >> 0), (i + 5 >> 0)) === "2006") {
						_tmp$30 = $substring(layout, 0, (i + 1 >> 0));
						_tmp$31 = 273;
						_tmp$32 = $substring(layout, (i + 5 >> 0));
						prefix = _tmp$30;
						std = _tmp$31;
						suffix = _tmp$32;
						return [prefix, std, suffix];
					}
					_tmp$33 = $substring(layout, 0, i);
					_tmp$34 = 264;
					_tmp$35 = $substring(layout, (i + 2 >> 0));
					prefix = _tmp$33;
					std = _tmp$34;
					suffix = _tmp$35;
					return [prefix, std, suffix];
				}
			} else if (_1 === (51)) {
				_tmp$36 = $substring(layout, 0, i);
				_tmp$37 = 523;
				_tmp$38 = $substring(layout, (i + 1 >> 0));
				prefix = _tmp$36;
				std = _tmp$37;
				suffix = _tmp$38;
				return [prefix, std, suffix];
			} else if (_1 === (52)) {
				_tmp$39 = $substring(layout, 0, i);
				_tmp$40 = 525;
				_tmp$41 = $substring(layout, (i + 1 >> 0));
				prefix = _tmp$39;
				std = _tmp$40;
				suffix = _tmp$41;
				return [prefix, std, suffix];
			} else if (_1 === (53)) {
				_tmp$42 = $substring(layout, 0, i);
				_tmp$43 = 527;
				_tmp$44 = $substring(layout, (i + 1 >> 0));
				prefix = _tmp$42;
				std = _tmp$43;
				suffix = _tmp$44;
				return [prefix, std, suffix];
			} else if (_1 === (80)) {
				if (layout.length >= (i + 2 >> 0) && (layout.charCodeAt((i + 1 >> 0)) === 77)) {
					_tmp$45 = $substring(layout, 0, i);
					_tmp$46 = 531;
					_tmp$47 = $substring(layout, (i + 2 >> 0));
					prefix = _tmp$45;
					std = _tmp$46;
					suffix = _tmp$47;
					return [prefix, std, suffix];
				}
			} else if (_1 === (112)) {
				if (layout.length >= (i + 2 >> 0) && (layout.charCodeAt((i + 1 >> 0)) === 109)) {
					_tmp$48 = $substring(layout, 0, i);
					_tmp$49 = 532;
					_tmp$50 = $substring(layout, (i + 2 >> 0));
					prefix = _tmp$48;
					std = _tmp$49;
					suffix = _tmp$50;
					return [prefix, std, suffix];
				}
			} else if (_1 === (45)) {
				if (layout.length >= (i + 7 >> 0) && $substring(layout, i, (i + 7 >> 0)) === "-070000") {
					_tmp$51 = $substring(layout, 0, i);
					_tmp$52 = 28;
					_tmp$53 = $substring(layout, (i + 7 >> 0));
					prefix = _tmp$51;
					std = _tmp$52;
					suffix = _tmp$53;
					return [prefix, std, suffix];
				}
				if (layout.length >= (i + 9 >> 0) && $substring(layout, i, (i + 9 >> 0)) === "-07:00:00") {
					_tmp$54 = $substring(layout, 0, i);
					_tmp$55 = 31;
					_tmp$56 = $substring(layout, (i + 9 >> 0));
					prefix = _tmp$54;
					std = _tmp$55;
					suffix = _tmp$56;
					return [prefix, std, suffix];
				}
				if (layout.length >= (i + 5 >> 0) && $substring(layout, i, (i + 5 >> 0)) === "-0700") {
					_tmp$57 = $substring(layout, 0, i);
					_tmp$58 = 27;
					_tmp$59 = $substring(layout, (i + 5 >> 0));
					prefix = _tmp$57;
					std = _tmp$58;
					suffix = _tmp$59;
					return [prefix, std, suffix];
				}
				if (layout.length >= (i + 6 >> 0) && $substring(layout, i, (i + 6 >> 0)) === "-07:00") {
					_tmp$60 = $substring(layout, 0, i);
					_tmp$61 = 30;
					_tmp$62 = $substring(layout, (i + 6 >> 0));
					prefix = _tmp$60;
					std = _tmp$61;
					suffix = _tmp$62;
					return [prefix, std, suffix];
				}
				if (layout.length >= (i + 3 >> 0) && $substring(layout, i, (i + 3 >> 0)) === "-07") {
					_tmp$63 = $substring(layout, 0, i);
					_tmp$64 = 29;
					_tmp$65 = $substring(layout, (i + 3 >> 0));
					prefix = _tmp$63;
					std = _tmp$64;
					suffix = _tmp$65;
					return [prefix, std, suffix];
				}
			} else if (_1 === (90)) {
				if (layout.length >= (i + 7 >> 0) && $substring(layout, i, (i + 7 >> 0)) === "Z070000") {
					_tmp$66 = $substring(layout, 0, i);
					_tmp$67 = 23;
					_tmp$68 = $substring(layout, (i + 7 >> 0));
					prefix = _tmp$66;
					std = _tmp$67;
					suffix = _tmp$68;
					return [prefix, std, suffix];
				}
				if (layout.length >= (i + 9 >> 0) && $substring(layout, i, (i + 9 >> 0)) === "Z07:00:00") {
					_tmp$69 = $substring(layout, 0, i);
					_tmp$70 = 26;
					_tmp$71 = $substring(layout, (i + 9 >> 0));
					prefix = _tmp$69;
					std = _tmp$70;
					suffix = _tmp$71;
					return [prefix, std, suffix];
				}
				if (layout.length >= (i + 5 >> 0) && $substring(layout, i, (i + 5 >> 0)) === "Z0700") {
					_tmp$72 = $substring(layout, 0, i);
					_tmp$73 = 22;
					_tmp$74 = $substring(layout, (i + 5 >> 0));
					prefix = _tmp$72;
					std = _tmp$73;
					suffix = _tmp$74;
					return [prefix, std, suffix];
				}
				if (layout.length >= (i + 6 >> 0) && $substring(layout, i, (i + 6 >> 0)) === "Z07:00") {
					_tmp$75 = $substring(layout, 0, i);
					_tmp$76 = 25;
					_tmp$77 = $substring(layout, (i + 6 >> 0));
					prefix = _tmp$75;
					std = _tmp$76;
					suffix = _tmp$77;
					return [prefix, std, suffix];
				}
				if (layout.length >= (i + 3 >> 0) && $substring(layout, i, (i + 3 >> 0)) === "Z07") {
					_tmp$78 = $substring(layout, 0, i);
					_tmp$79 = 24;
					_tmp$80 = $substring(layout, (i + 3 >> 0));
					prefix = _tmp$78;
					std = _tmp$79;
					suffix = _tmp$80;
					return [prefix, std, suffix];
				}
			} else if (_1 === (46)) {
				if ((i + 1 >> 0) < layout.length && ((layout.charCodeAt((i + 1 >> 0)) === 48) || (layout.charCodeAt((i + 1 >> 0)) === 57))) {
					ch = layout.charCodeAt((i + 1 >> 0));
					j = i + 1 >> 0;
					while (true) {
						if (!(j < layout.length && (layout.charCodeAt(j) === ch))) { break; }
						j = j + (1) >> 0;
					}
					if (!isDigit(layout, j)) {
						std$1 = 32;
						if (layout.charCodeAt((i + 1 >> 0)) === 57) {
							std$1 = 33;
						}
						std$1 = std$1 | ((((j - ((i + 1 >> 0)) >> 0)) << 16 >> 0));
						_tmp$81 = $substring(layout, 0, i);
						_tmp$82 = std$1;
						_tmp$83 = $substring(layout, j);
						prefix = _tmp$81;
						std = _tmp$82;
						suffix = _tmp$83;
						return [prefix, std, suffix];
					}
				}
			}
			i = i + (1) >> 0;
		}
		_tmp$84 = layout;
		_tmp$85 = 0;
		_tmp$86 = "";
		prefix = _tmp$84;
		std = _tmp$85;
		suffix = _tmp$86;
		return [prefix, std, suffix];
	};
	match = function(s1, s2) {
		var c1, c2, i, s1, s2;
		i = 0;
		while (true) {
			if (!(i < s1.length)) { break; }
			c1 = s1.charCodeAt(i);
			c2 = s2.charCodeAt(i);
			if (!((c1 === c2))) {
				c1 = (c1 | (32)) >>> 0;
				c2 = (c2 | (32)) >>> 0;
				if (!((c1 === c2)) || c1 < 97 || c1 > 122) {
					return false;
				}
			}
			i = i + (1) >> 0;
		}
		return true;
	};
	lookup = function(tab, val) {
		var _i, _ref, i, tab, v, val;
		_ref = tab;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			v = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			if (val.length >= v.length && match($substring(val, 0, v.length), v)) {
				return [i, $substring(val, v.length), $ifaceNil];
			}
			_i++;
		}
		return [-1, val, errBad];
	};
	appendInt = function(b, x, width) {
		var _q, b, buf, i, q, u, w, width, x;
		u = ((x >>> 0));
		if (x < 0) {
			b = $append(b, 45);
			u = ((-x >>> 0));
		}
		buf = arrayType.zero();
		i = 20;
		while (true) {
			if (!(u >= 10)) { break; }
			i = i - (1) >> 0;
			q = (_q = u / 10, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero"));
			((i < 0 || i >= buf.length) ? ($throwRuntimeError("index out of range"), undefined) : buf[i] = ((((48 + u >>> 0) - (q * 10 >>> 0) >>> 0) << 24 >>> 24)));
			u = q;
		}
		i = i - (1) >> 0;
		((i < 0 || i >= buf.length) ? ($throwRuntimeError("index out of range"), undefined) : buf[i] = (((48 + u >>> 0) << 24 >>> 24)));
		w = 20 - i >> 0;
		while (true) {
			if (!(w < width)) { break; }
			b = $append(b, 48);
			w = w + (1) >> 0;
		}
		return $appendSlice(b, $subslice(new sliceType$3(buf), i));
	};
	atoi = function(s) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple, err, neg, q, rem, s, x;
		x = 0;
		err = $ifaceNil;
		neg = false;
		if (!(s === "") && ((s.charCodeAt(0) === 45) || (s.charCodeAt(0) === 43))) {
			neg = s.charCodeAt(0) === 45;
			s = $substring(s, 1);
		}
		_tuple = leadingInt(s);
		q = _tuple[0];
		rem = _tuple[1];
		err = _tuple[2];
		x = (((q.$low + ((q.$high >> 31) * 4294967296)) >> 0));
		if (!($interfaceIsEqual(err, $ifaceNil)) || !(rem === "")) {
			_tmp = 0;
			_tmp$1 = atoiError;
			x = _tmp;
			err = _tmp$1;
			return [x, err];
		}
		if (neg) {
			x = -x;
		}
		_tmp$2 = x;
		_tmp$3 = $ifaceNil;
		x = _tmp$2;
		err = _tmp$3;
		return [x, err];
	};
	formatNano = function(b, nanosec, n, trim) {
		var _q, _r, b, buf, n, nanosec, start, trim, u, x;
		u = nanosec;
		buf = arrayType$1.zero();
		start = 9;
		while (true) {
			if (!(start > 0)) { break; }
			start = start - (1) >> 0;
			((start < 0 || start >= buf.length) ? ($throwRuntimeError("index out of range"), undefined) : buf[start] = ((((_r = u % 10, _r === _r ? _r : $throwRuntimeError("integer divide by zero")) + 48 >>> 0) << 24 >>> 24)));
			u = (_q = u / (10), (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero"));
		}
		if (n > 9) {
			n = 9;
		}
		if (trim) {
			while (true) {
				if (!(n > 0 && ((x = n - 1 >> 0, ((x < 0 || x >= buf.length) ? ($throwRuntimeError("index out of range"), undefined) : buf[x])) === 48))) { break; }
				n = n - (1) >> 0;
			}
			if (n === 0) {
				return b;
			}
		}
		b = $append(b, 46);
		return $appendSlice(b, $subslice(new sliceType$3(buf), 0, n));
	};
	Time.ptr.prototype.String = function() {
		var _r, _tmp, _tmp$1, _tmp$2, _tmp$3, buf, m0, m1, m2, s, sign, t, wid, x, x$1, x$2, x$3, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; buf = $f.buf; m0 = $f.m0; m1 = $f.m1; m2 = $f.m2; s = $f.s; sign = $f.sign; t = $f.t; wid = $f.wid; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		_r = $clone(t, Time).Format("2006-01-02 15:04:05.999999999 -0700 MST"); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		s = _r;
		if (!((x = (x$1 = t.wall, new $Uint64(x$1.$high & 2147483648, (x$1.$low & 0) >>> 0)), (x.$high === 0 && x.$low === 0)))) {
			m2 = ((x$2 = t.ext, new $Uint64(x$2.$high, x$2.$low)));
			sign = 43;
			if ((x$3 = t.ext, (x$3.$high < 0 || (x$3.$high === 0 && x$3.$low < 0)))) {
				sign = 45;
				m2 = new $Uint64(-m2.$high, -m2.$low);
			}
			_tmp = $div64(m2, new $Uint64(0, 1000000000), false);
			_tmp$1 = $div64(m2, new $Uint64(0, 1000000000), true);
			m1 = _tmp;
			m2 = _tmp$1;
			_tmp$2 = $div64(m1, new $Uint64(0, 1000000000), false);
			_tmp$3 = $div64(m1, new $Uint64(0, 1000000000), true);
			m0 = _tmp$2;
			m1 = _tmp$3;
			buf = sliceType$3.nil;
			buf = $appendSlice(buf, " m=");
			buf = $append(buf, sign);
			wid = 0;
			if (!((m0.$high === 0 && m0.$low === 0))) {
				buf = appendInt(buf, ((m0.$low >> 0)), 0);
				wid = 9;
			}
			buf = appendInt(buf, ((m1.$low >> 0)), wid);
			buf = $append(buf, 46);
			buf = appendInt(buf, ((m2.$low >> 0)), 9);
			s = s + (($bytesToString(buf)));
		}
		$s = -1; return s;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.String }; } $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f.buf = buf; $f.m0 = m0; $f.m1 = m1; $f.m2 = m2; $f.s = s; $f.sign = sign; $f.t = t; $f.wid = wid; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.String = function() { return this.$val.String(); };
	Time.ptr.prototype.Format = function(layout) {
		var _r, b, buf, layout, max, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; b = $f.b; buf = $f.buf; layout = $f.layout; max = $f.max; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		b = sliceType$3.nil;
		max = layout.length + 10 >> 0;
		if (max < 64) {
			buf = arrayType$2.zero();
			b = $subslice(new sliceType$3(buf), 0, 0);
		} else {
			b = $makeSlice(sliceType$3, 0, max);
		}
		_r = $clone(t, Time).AppendFormat(b, layout); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		b = _r;
		$s = -1; return ($bytesToString(b));
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.Format }; } $f._r = _r; $f.b = b; $f.buf = buf; $f.layout = layout; $f.max = max; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.Format = function(layout) { return this.$val.Format(layout); };
	Time.ptr.prototype.AppendFormat = function(b, layout) {
		var _1, _q, _q$1, _q$2, _q$3, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _tuple, _tuple$1, _tuple$2, _tuple$3, abs, absoffset, b, day, hour, hr, hr$1, layout, m, min, month, name, offset, prefix, s, sec, std, suffix, t, y, year, zone$1, zone$2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _q = $f._q; _q$1 = $f._q$1; _q$2 = $f._q$2; _q$3 = $f._q$3; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; abs = $f.abs; absoffset = $f.absoffset; b = $f.b; day = $f.day; hour = $f.hour; hr = $f.hr; hr$1 = $f.hr$1; layout = $f.layout; m = $f.m; min = $f.min; month = $f.month; name = $f.name; offset = $f.offset; prefix = $f.prefix; s = $f.s; sec = $f.sec; std = $f.std; suffix = $f.suffix; t = $f.t; y = $f.y; year = $f.year; zone$1 = $f.zone$1; zone$2 = $f.zone$2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		_r = $clone(t, Time).locabs(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		name = _tuple[0];
		offset = _tuple[1];
		abs = _tuple[2];
		year = -1;
		month = 0;
		day = 0;
		hour = -1;
		min = 0;
		sec = 0;
		while (true) {
			if (!(!(layout === ""))) { break; }
			_tuple$1 = nextStdChunk(layout);
			prefix = _tuple$1[0];
			std = _tuple$1[1];
			suffix = _tuple$1[2];
			if (!(prefix === "")) {
				b = $appendSlice(b, prefix);
			}
			if (std === 0) {
				break;
			}
			layout = suffix;
			if (year < 0 && !(((std & 256) === 0))) {
				_tuple$2 = absDate(abs, true);
				year = _tuple$2[0];
				month = _tuple$2[1];
				day = _tuple$2[2];
			}
			if (hour < 0 && !(((std & 512) === 0))) {
				_tuple$3 = absClock(abs);
				hour = _tuple$3[0];
				min = _tuple$3[1];
				sec = _tuple$3[2];
			}
			switch (0) { default:
				_1 = std & 65535;
				if (_1 === (274)) {
					y = year;
					if (y < 0) {
						y = -y;
					}
					b = appendInt(b, (_r$1 = y % 100, _r$1 === _r$1 ? _r$1 : $throwRuntimeError("integer divide by zero")), 2);
				} else if (_1 === (273)) {
					b = appendInt(b, year, 4);
				} else if (_1 === (258)) {
					b = $appendSlice(b, $substring(new Month(month).String(), 0, 3));
				} else if (_1 === (257)) {
					m = new Month(month).String();
					b = $appendSlice(b, m);
				} else if (_1 === (259)) {
					b = appendInt(b, ((month >> 0)), 0);
				} else if (_1 === (260)) {
					b = appendInt(b, ((month >> 0)), 2);
				} else if (_1 === (262)) {
					b = $appendSlice(b, $substring(new Weekday(absWeekday(abs)).String(), 0, 3));
				} else if (_1 === (261)) {
					s = new Weekday(absWeekday(abs)).String();
					b = $appendSlice(b, s);
				} else if (_1 === (263)) {
					b = appendInt(b, day, 0);
				} else if (_1 === (264)) {
					if (day < 10) {
						b = $append(b, 32);
					}
					b = appendInt(b, day, 0);
				} else if (_1 === (265)) {
					b = appendInt(b, day, 2);
				} else if (_1 === (522)) {
					b = appendInt(b, hour, 2);
				} else if (_1 === (523)) {
					hr = (_r$2 = hour % 12, _r$2 === _r$2 ? _r$2 : $throwRuntimeError("integer divide by zero"));
					if (hr === 0) {
						hr = 12;
					}
					b = appendInt(b, hr, 0);
				} else if (_1 === (524)) {
					hr$1 = (_r$3 = hour % 12, _r$3 === _r$3 ? _r$3 : $throwRuntimeError("integer divide by zero"));
					if (hr$1 === 0) {
						hr$1 = 12;
					}
					b = appendInt(b, hr$1, 2);
				} else if (_1 === (525)) {
					b = appendInt(b, min, 0);
				} else if (_1 === (526)) {
					b = appendInt(b, min, 2);
				} else if (_1 === (527)) {
					b = appendInt(b, sec, 0);
				} else if (_1 === (528)) {
					b = appendInt(b, sec, 2);
				} else if (_1 === (531)) {
					if (hour >= 12) {
						b = $appendSlice(b, "PM");
					} else {
						b = $appendSlice(b, "AM");
					}
				} else if (_1 === (532)) {
					if (hour >= 12) {
						b = $appendSlice(b, "pm");
					} else {
						b = $appendSlice(b, "am");
					}
				} else if ((_1 === (22)) || (_1 === (25)) || (_1 === (23)) || (_1 === (24)) || (_1 === (26)) || (_1 === (27)) || (_1 === (30)) || (_1 === (28)) || (_1 === (29)) || (_1 === (31))) {
					if ((offset === 0) && ((std === 22) || (std === 25) || (std === 23) || (std === 24) || (std === 26))) {
						b = $append(b, 90);
						break;
					}
					zone$1 = (_q = offset / 60, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
					absoffset = offset;
					if (zone$1 < 0) {
						b = $append(b, 45);
						zone$1 = -zone$1;
						absoffset = -absoffset;
					} else {
						b = $append(b, 43);
					}
					b = appendInt(b, (_q$1 = zone$1 / 60, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero")), 2);
					if ((std === 25) || (std === 30) || (std === 26) || (std === 31)) {
						b = $append(b, 58);
					}
					if (!((std === 29)) && !((std === 24))) {
						b = appendInt(b, (_r$4 = zone$1 % 60, _r$4 === _r$4 ? _r$4 : $throwRuntimeError("integer divide by zero")), 2);
					}
					if ((std === 23) || (std === 28) || (std === 31) || (std === 26)) {
						if ((std === 31) || (std === 26)) {
							b = $append(b, 58);
						}
						b = appendInt(b, (_r$5 = absoffset % 60, _r$5 === _r$5 ? _r$5 : $throwRuntimeError("integer divide by zero")), 2);
					}
				} else if (_1 === (21)) {
					if (!(name === "")) {
						b = $appendSlice(b, name);
						break;
					}
					zone$2 = (_q$2 = offset / 60, (_q$2 === _q$2 && _q$2 !== 1/0 && _q$2 !== -1/0) ? _q$2 >> 0 : $throwRuntimeError("integer divide by zero"));
					if (zone$2 < 0) {
						b = $append(b, 45);
						zone$2 = -zone$2;
					} else {
						b = $append(b, 43);
					}
					b = appendInt(b, (_q$3 = zone$2 / 60, (_q$3 === _q$3 && _q$3 !== 1/0 && _q$3 !== -1/0) ? _q$3 >> 0 : $throwRuntimeError("integer divide by zero")), 2);
					b = appendInt(b, (_r$6 = zone$2 % 60, _r$6 === _r$6 ? _r$6 : $throwRuntimeError("integer divide by zero")), 2);
				} else if ((_1 === (32)) || (_1 === (33))) {
					b = formatNano(b, (($clone(t, Time).Nanosecond() >>> 0)), std >> 16 >> 0, (std & 65535) === 33);
				}
			}
		}
		$s = -1; return b;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.AppendFormat }; } $f._1 = _1; $f._q = _q; $f._q$1 = _q$1; $f._q$2 = _q$2; $f._q$3 = _q$3; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f.abs = abs; $f.absoffset = absoffset; $f.b = b; $f.day = day; $f.hour = hour; $f.hr = hr; $f.hr$1 = hr$1; $f.layout = layout; $f.m = m; $f.min = min; $f.month = month; $f.name = name; $f.offset = offset; $f.prefix = prefix; $f.s = s; $f.sec = sec; $f.std = std; $f.suffix = suffix; $f.t = t; $f.y = y; $f.year = year; $f.zone$1 = zone$1; $f.zone$2 = zone$2; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.AppendFormat = function(b, layout) { return this.$val.AppendFormat(b, layout); };
	quote = function(s) {
		var s;
		return "\"" + s + "\"";
	};
	ParseError.ptr.prototype.Error = function() {
		var e;
		e = this;
		if (e.Message === "") {
			return "parsing time " + quote(e.Value) + " as " + quote(e.Layout) + ": cannot parse " + quote(e.ValueElem) + " as " + quote(e.LayoutElem);
		}
		return "parsing time " + quote(e.Value) + e.Message;
	};
	ParseError.prototype.Error = function() { return this.$val.Error(); };
	isDigit = function(s, i) {
		var c, i, s;
		if (s.length <= i) {
			return false;
		}
		c = s.charCodeAt(i);
		return 48 <= c && c <= 57;
	};
	getnum = function(s, fixed) {
		var fixed, s;
		if (!isDigit(s, 0)) {
			return [0, s, errBad];
		}
		if (!isDigit(s, 1)) {
			if (fixed) {
				return [0, s, errBad];
			}
			return [(((s.charCodeAt(0) - 48 << 24 >>> 24) >> 0)), $substring(s, 1), $ifaceNil];
		}
		return [($imul((((s.charCodeAt(0) - 48 << 24 >>> 24) >> 0)), 10)) + (((s.charCodeAt(1) - 48 << 24 >>> 24) >> 0)) >> 0, $substring(s, 2), $ifaceNil];
	};
	cutspace = function(s) {
		var s;
		while (true) {
			if (!(s.length > 0 && (s.charCodeAt(0) === 32))) { break; }
			s = $substring(s, 1);
		}
		return s;
	};
	skip = function(value, prefix) {
		var prefix, value;
		while (true) {
			if (!(prefix.length > 0)) { break; }
			if (prefix.charCodeAt(0) === 32) {
				if (value.length > 0 && !((value.charCodeAt(0) === 32))) {
					return [value, errBad];
				}
				prefix = cutspace(prefix);
				value = cutspace(value);
				continue;
			}
			if ((value.length === 0) || !((value.charCodeAt(0) === prefix.charCodeAt(0)))) {
				return [value, errBad];
			}
			prefix = $substring(prefix, 1);
			value = $substring(value, 1);
		}
		return [value, $ifaceNil];
	};
	Parse = function(layout, value) {
		var _r, layout, value, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; layout = $f.layout; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = parse(layout, value, $pkg.UTC, $pkg.Local); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Parse }; } $f._r = _r; $f.layout = layout; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Parse = Parse;
	parse = function(layout, value, defaultLocation, local) {
		var _1, _2, _3, _4, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$15, _tmp$16, _tmp$17, _tmp$18, _tmp$19, _tmp$2, _tmp$20, _tmp$21, _tmp$22, _tmp$23, _tmp$24, _tmp$25, _tmp$26, _tmp$27, _tmp$28, _tmp$29, _tmp$3, _tmp$30, _tmp$31, _tmp$32, _tmp$33, _tmp$34, _tmp$35, _tmp$36, _tmp$37, _tmp$38, _tmp$39, _tmp$4, _tmp$40, _tmp$41, _tmp$42, _tmp$43, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tuple, _tuple$1, _tuple$10, _tuple$11, _tuple$12, _tuple$13, _tuple$14, _tuple$15, _tuple$16, _tuple$17, _tuple$18, _tuple$19, _tuple$2, _tuple$20, _tuple$21, _tuple$22, _tuple$23, _tuple$24, _tuple$3, _tuple$4, _tuple$5, _tuple$6, _tuple$7, _tuple$8, _tuple$9, alayout, amSet, avalue, day, defaultLocation, err, hour, hour$1, hr, i, layout, local, min, min$1, mm, month, n, n$1, name, ndigit, nsec, offset, offset$1, ok, ok$1, p, pmSet, prefix, rangeErrString, sec, seconds, sign, ss, std, stdstr, suffix, t, t$1, value, x, x$1, year, z, zoneName, zoneOffset, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _2 = $f._2; _3 = $f._3; _4 = $f._4; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$10 = $f._tmp$10; _tmp$11 = $f._tmp$11; _tmp$12 = $f._tmp$12; _tmp$13 = $f._tmp$13; _tmp$14 = $f._tmp$14; _tmp$15 = $f._tmp$15; _tmp$16 = $f._tmp$16; _tmp$17 = $f._tmp$17; _tmp$18 = $f._tmp$18; _tmp$19 = $f._tmp$19; _tmp$2 = $f._tmp$2; _tmp$20 = $f._tmp$20; _tmp$21 = $f._tmp$21; _tmp$22 = $f._tmp$22; _tmp$23 = $f._tmp$23; _tmp$24 = $f._tmp$24; _tmp$25 = $f._tmp$25; _tmp$26 = $f._tmp$26; _tmp$27 = $f._tmp$27; _tmp$28 = $f._tmp$28; _tmp$29 = $f._tmp$29; _tmp$3 = $f._tmp$3; _tmp$30 = $f._tmp$30; _tmp$31 = $f._tmp$31; _tmp$32 = $f._tmp$32; _tmp$33 = $f._tmp$33; _tmp$34 = $f._tmp$34; _tmp$35 = $f._tmp$35; _tmp$36 = $f._tmp$36; _tmp$37 = $f._tmp$37; _tmp$38 = $f._tmp$38; _tmp$39 = $f._tmp$39; _tmp$4 = $f._tmp$4; _tmp$40 = $f._tmp$40; _tmp$41 = $f._tmp$41; _tmp$42 = $f._tmp$42; _tmp$43 = $f._tmp$43; _tmp$5 = $f._tmp$5; _tmp$6 = $f._tmp$6; _tmp$7 = $f._tmp$7; _tmp$8 = $f._tmp$8; _tmp$9 = $f._tmp$9; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$10 = $f._tuple$10; _tuple$11 = $f._tuple$11; _tuple$12 = $f._tuple$12; _tuple$13 = $f._tuple$13; _tuple$14 = $f._tuple$14; _tuple$15 = $f._tuple$15; _tuple$16 = $f._tuple$16; _tuple$17 = $f._tuple$17; _tuple$18 = $f._tuple$18; _tuple$19 = $f._tuple$19; _tuple$2 = $f._tuple$2; _tuple$20 = $f._tuple$20; _tuple$21 = $f._tuple$21; _tuple$22 = $f._tuple$22; _tuple$23 = $f._tuple$23; _tuple$24 = $f._tuple$24; _tuple$3 = $f._tuple$3; _tuple$4 = $f._tuple$4; _tuple$5 = $f._tuple$5; _tuple$6 = $f._tuple$6; _tuple$7 = $f._tuple$7; _tuple$8 = $f._tuple$8; _tuple$9 = $f._tuple$9; alayout = $f.alayout; amSet = $f.amSet; avalue = $f.avalue; day = $f.day; defaultLocation = $f.defaultLocation; err = $f.err; hour = $f.hour; hour$1 = $f.hour$1; hr = $f.hr; i = $f.i; layout = $f.layout; local = $f.local; min = $f.min; min$1 = $f.min$1; mm = $f.mm; month = $f.month; n = $f.n; n$1 = $f.n$1; name = $f.name; ndigit = $f.ndigit; nsec = $f.nsec; offset = $f.offset; offset$1 = $f.offset$1; ok = $f.ok; ok$1 = $f.ok$1; p = $f.p; pmSet = $f.pmSet; prefix = $f.prefix; rangeErrString = $f.rangeErrString; sec = $f.sec; seconds = $f.seconds; sign = $f.sign; ss = $f.ss; std = $f.std; stdstr = $f.stdstr; suffix = $f.suffix; t = $f.t; t$1 = $f.t$1; value = $f.value; x = $f.x; x$1 = $f.x$1; year = $f.year; z = $f.z; zoneName = $f.zoneName; zoneOffset = $f.zoneOffset; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_tmp = layout;
		_tmp$1 = value;
		alayout = _tmp;
		avalue = _tmp$1;
		rangeErrString = "";
		amSet = false;
		pmSet = false;
		year = 0;
		month = 1;
		day = 1;
		hour = 0;
		min = 0;
		sec = 0;
		nsec = 0;
		z = ptrType$2.nil;
		zoneOffset = -1;
		zoneName = "";
		while (true) {
			err = $ifaceNil;
			_tuple = nextStdChunk(layout);
			prefix = _tuple[0];
			std = _tuple[1];
			suffix = _tuple[2];
			stdstr = $substring(layout, prefix.length, (layout.length - suffix.length >> 0));
			_tuple$1 = skip(value, prefix);
			value = _tuple$1[0];
			err = _tuple$1[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				$s = -1; return [new Time.ptr(new $Uint64(0, 0), new $Int64(0, 0), ptrType$2.nil), new ParseError.ptr(alayout, avalue, prefix, value, "")];
			}
			if (std === 0) {
				if (!((value.length === 0))) {
					$s = -1; return [new Time.ptr(new $Uint64(0, 0), new $Int64(0, 0), ptrType$2.nil), new ParseError.ptr(alayout, avalue, "", value, ": extra text: " + value)];
				}
				break;
			}
			layout = suffix;
			p = "";
			switch (0) { default:
				_1 = std & 65535;
				if (_1 === (274)) {
					if (value.length < 2) {
						err = errBad;
						break;
					}
					_tmp$2 = $substring(value, 0, 2);
					_tmp$3 = $substring(value, 2);
					p = _tmp$2;
					value = _tmp$3;
					_tuple$2 = atoi(p);
					year = _tuple$2[0];
					err = _tuple$2[1];
					if (year >= 69) {
						year = year + (1900) >> 0;
					} else {
						year = year + (2000) >> 0;
					}
				} else if (_1 === (273)) {
					if (value.length < 4 || !isDigit(value, 0)) {
						err = errBad;
						break;
					}
					_tmp$4 = $substring(value, 0, 4);
					_tmp$5 = $substring(value, 4);
					p = _tmp$4;
					value = _tmp$5;
					_tuple$3 = atoi(p);
					year = _tuple$3[0];
					err = _tuple$3[1];
				} else if (_1 === (258)) {
					_tuple$4 = lookup(shortMonthNames, value);
					month = _tuple$4[0];
					value = _tuple$4[1];
					err = _tuple$4[2];
					month = month + (1) >> 0;
				} else if (_1 === (257)) {
					_tuple$5 = lookup(longMonthNames, value);
					month = _tuple$5[0];
					value = _tuple$5[1];
					err = _tuple$5[2];
					month = month + (1) >> 0;
				} else if ((_1 === (259)) || (_1 === (260))) {
					_tuple$6 = getnum(value, std === 260);
					month = _tuple$6[0];
					value = _tuple$6[1];
					err = _tuple$6[2];
					if (month <= 0 || 12 < month) {
						rangeErrString = "month";
					}
				} else if (_1 === (262)) {
					_tuple$7 = lookup(shortDayNames, value);
					value = _tuple$7[1];
					err = _tuple$7[2];
				} else if (_1 === (261)) {
					_tuple$8 = lookup(longDayNames, value);
					value = _tuple$8[1];
					err = _tuple$8[2];
				} else if ((_1 === (263)) || (_1 === (264)) || (_1 === (265))) {
					if ((std === 264) && value.length > 0 && (value.charCodeAt(0) === 32)) {
						value = $substring(value, 1);
					}
					_tuple$9 = getnum(value, std === 265);
					day = _tuple$9[0];
					value = _tuple$9[1];
					err = _tuple$9[2];
					if (day < 0) {
						rangeErrString = "day";
					}
				} else if (_1 === (522)) {
					_tuple$10 = getnum(value, false);
					hour = _tuple$10[0];
					value = _tuple$10[1];
					err = _tuple$10[2];
					if (hour < 0 || 24 <= hour) {
						rangeErrString = "hour";
					}
				} else if ((_1 === (523)) || (_1 === (524))) {
					_tuple$11 = getnum(value, std === 524);
					hour = _tuple$11[0];
					value = _tuple$11[1];
					err = _tuple$11[2];
					if (hour < 0 || 12 < hour) {
						rangeErrString = "hour";
					}
				} else if ((_1 === (525)) || (_1 === (526))) {
					_tuple$12 = getnum(value, std === 526);
					min = _tuple$12[0];
					value = _tuple$12[1];
					err = _tuple$12[2];
					if (min < 0 || 60 <= min) {
						rangeErrString = "minute";
					}
				} else if ((_1 === (527)) || (_1 === (528))) {
					_tuple$13 = getnum(value, std === 528);
					sec = _tuple$13[0];
					value = _tuple$13[1];
					err = _tuple$13[2];
					if (sec < 0 || 60 <= sec) {
						rangeErrString = "second";
						break;
					}
					if (value.length >= 2 && (value.charCodeAt(0) === 46) && isDigit(value, 1)) {
						_tuple$14 = nextStdChunk(layout);
						std = _tuple$14[1];
						std = std & (65535);
						if ((std === 32) || (std === 33)) {
							break;
						}
						n = 2;
						while (true) {
							if (!(n < value.length && isDigit(value, n))) { break; }
							n = n + (1) >> 0;
						}
						_tuple$15 = parseNanoseconds(value, n);
						nsec = _tuple$15[0];
						rangeErrString = _tuple$15[1];
						err = _tuple$15[2];
						value = $substring(value, n);
					}
				} else if (_1 === (531)) {
					if (value.length < 2) {
						err = errBad;
						break;
					}
					_tmp$6 = $substring(value, 0, 2);
					_tmp$7 = $substring(value, 2);
					p = _tmp$6;
					value = _tmp$7;
					_2 = p;
					if (_2 === ("PM")) {
						pmSet = true;
					} else if (_2 === ("AM")) {
						amSet = true;
					} else {
						err = errBad;
					}
				} else if (_1 === (532)) {
					if (value.length < 2) {
						err = errBad;
						break;
					}
					_tmp$8 = $substring(value, 0, 2);
					_tmp$9 = $substring(value, 2);
					p = _tmp$8;
					value = _tmp$9;
					_3 = p;
					if (_3 === ("pm")) {
						pmSet = true;
					} else if (_3 === ("am")) {
						amSet = true;
					} else {
						err = errBad;
					}
				} else if ((_1 === (22)) || (_1 === (25)) || (_1 === (23)) || (_1 === (24)) || (_1 === (26)) || (_1 === (27)) || (_1 === (29)) || (_1 === (30)) || (_1 === (28)) || (_1 === (31))) {
					if (((std === 22) || (std === 24) || (std === 25)) && value.length >= 1 && (value.charCodeAt(0) === 90)) {
						value = $substring(value, 1);
						z = $pkg.UTC;
						break;
					}
					_tmp$10 = "";
					_tmp$11 = "";
					_tmp$12 = "";
					_tmp$13 = "";
					sign = _tmp$10;
					hour$1 = _tmp$11;
					min$1 = _tmp$12;
					seconds = _tmp$13;
					if ((std === 25) || (std === 30)) {
						if (value.length < 6) {
							err = errBad;
							break;
						}
						if (!((value.charCodeAt(3) === 58))) {
							err = errBad;
							break;
						}
						_tmp$14 = $substring(value, 0, 1);
						_tmp$15 = $substring(value, 1, 3);
						_tmp$16 = $substring(value, 4, 6);
						_tmp$17 = "00";
						_tmp$18 = $substring(value, 6);
						sign = _tmp$14;
						hour$1 = _tmp$15;
						min$1 = _tmp$16;
						seconds = _tmp$17;
						value = _tmp$18;
					} else if ((std === 29) || (std === 24)) {
						if (value.length < 3) {
							err = errBad;
							break;
						}
						_tmp$19 = $substring(value, 0, 1);
						_tmp$20 = $substring(value, 1, 3);
						_tmp$21 = "00";
						_tmp$22 = "00";
						_tmp$23 = $substring(value, 3);
						sign = _tmp$19;
						hour$1 = _tmp$20;
						min$1 = _tmp$21;
						seconds = _tmp$22;
						value = _tmp$23;
					} else if ((std === 26) || (std === 31)) {
						if (value.length < 9) {
							err = errBad;
							break;
						}
						if (!((value.charCodeAt(3) === 58)) || !((value.charCodeAt(6) === 58))) {
							err = errBad;
							break;
						}
						_tmp$24 = $substring(value, 0, 1);
						_tmp$25 = $substring(value, 1, 3);
						_tmp$26 = $substring(value, 4, 6);
						_tmp$27 = $substring(value, 7, 9);
						_tmp$28 = $substring(value, 9);
						sign = _tmp$24;
						hour$1 = _tmp$25;
						min$1 = _tmp$26;
						seconds = _tmp$27;
						value = _tmp$28;
					} else if ((std === 23) || (std === 28)) {
						if (value.length < 7) {
							err = errBad;
							break;
						}
						_tmp$29 = $substring(value, 0, 1);
						_tmp$30 = $substring(value, 1, 3);
						_tmp$31 = $substring(value, 3, 5);
						_tmp$32 = $substring(value, 5, 7);
						_tmp$33 = $substring(value, 7);
						sign = _tmp$29;
						hour$1 = _tmp$30;
						min$1 = _tmp$31;
						seconds = _tmp$32;
						value = _tmp$33;
					} else {
						if (value.length < 5) {
							err = errBad;
							break;
						}
						_tmp$34 = $substring(value, 0, 1);
						_tmp$35 = $substring(value, 1, 3);
						_tmp$36 = $substring(value, 3, 5);
						_tmp$37 = "00";
						_tmp$38 = $substring(value, 5);
						sign = _tmp$34;
						hour$1 = _tmp$35;
						min$1 = _tmp$36;
						seconds = _tmp$37;
						value = _tmp$38;
					}
					_tmp$39 = 0;
					_tmp$40 = 0;
					_tmp$41 = 0;
					hr = _tmp$39;
					mm = _tmp$40;
					ss = _tmp$41;
					_tuple$16 = atoi(hour$1);
					hr = _tuple$16[0];
					err = _tuple$16[1];
					if ($interfaceIsEqual(err, $ifaceNil)) {
						_tuple$17 = atoi(min$1);
						mm = _tuple$17[0];
						err = _tuple$17[1];
					}
					if ($interfaceIsEqual(err, $ifaceNil)) {
						_tuple$18 = atoi(seconds);
						ss = _tuple$18[0];
						err = _tuple$18[1];
					}
					zoneOffset = ($imul(((($imul(hr, 60)) + mm >> 0)), 60)) + ss >> 0;
					_4 = sign.charCodeAt(0);
					if (_4 === (43)) {
					} else if (_4 === (45)) {
						zoneOffset = -zoneOffset;
					} else {
						err = errBad;
					}
				} else if (_1 === (21)) {
					if (value.length >= 3 && $substring(value, 0, 3) === "UTC") {
						z = $pkg.UTC;
						value = $substring(value, 3);
						break;
					}
					_tuple$19 = parseTimeZone(value);
					n$1 = _tuple$19[0];
					ok = _tuple$19[1];
					if (!ok) {
						err = errBad;
						break;
					}
					_tmp$42 = $substring(value, 0, n$1);
					_tmp$43 = $substring(value, n$1);
					zoneName = _tmp$42;
					value = _tmp$43;
				} else if (_1 === (32)) {
					ndigit = 1 + ((std >> 16 >> 0)) >> 0;
					if (value.length < ndigit) {
						err = errBad;
						break;
					}
					_tuple$20 = parseNanoseconds(value, ndigit);
					nsec = _tuple$20[0];
					rangeErrString = _tuple$20[1];
					err = _tuple$20[2];
					value = $substring(value, ndigit);
				} else if (_1 === (33)) {
					if (value.length < 2 || !((value.charCodeAt(0) === 46)) || value.charCodeAt(1) < 48 || 57 < value.charCodeAt(1)) {
						break;
					}
					i = 0;
					while (true) {
						if (!(i < 9 && (i + 1 >> 0) < value.length && 48 <= value.charCodeAt((i + 1 >> 0)) && value.charCodeAt((i + 1 >> 0)) <= 57)) { break; }
						i = i + (1) >> 0;
					}
					_tuple$21 = parseNanoseconds(value, 1 + i >> 0);
					nsec = _tuple$21[0];
					rangeErrString = _tuple$21[1];
					err = _tuple$21[2];
					value = $substring(value, (1 + i >> 0));
				}
			}
			if (!(rangeErrString === "")) {
				$s = -1; return [new Time.ptr(new $Uint64(0, 0), new $Int64(0, 0), ptrType$2.nil), new ParseError.ptr(alayout, avalue, stdstr, value, ": " + rangeErrString + " out of range")];
			}
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				$s = -1; return [new Time.ptr(new $Uint64(0, 0), new $Int64(0, 0), ptrType$2.nil), new ParseError.ptr(alayout, avalue, stdstr, value, "")];
			}
		}
		if (pmSet && hour < 12) {
			hour = hour + (12) >> 0;
		} else if (amSet && (hour === 12)) {
			hour = 0;
		}
		if (day < 1 || day > daysIn(((month >> 0)), year)) {
			$s = -1; return [new Time.ptr(new $Uint64(0, 0), new $Int64(0, 0), ptrType$2.nil), new ParseError.ptr(alayout, avalue, "", value, ": day out of range")];
		}
		/* */ if (!(z === ptrType$2.nil)) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!(z === ptrType$2.nil)) { */ case 1:
			_r = Date(year, ((month >> 0)), day, hour, min, sec, nsec, z); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$s = -1; return [_r, $ifaceNil];
		/* } */ case 2:
		/* */ if (!((zoneOffset === -1))) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (!((zoneOffset === -1))) { */ case 4:
			_r$1 = Date(year, ((month >> 0)), day, hour, min, sec, nsec, $pkg.UTC); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			t = $clone(_r$1, Time);
			t.addSec((x = (new $Int64(0, zoneOffset)), new $Int64(-x.$high, -x.$low)));
			_r$2 = local.lookup(t.unixSec()); /* */ $s = 7; case 7: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_tuple$22 = _r$2;
			name = _tuple$22[0];
			offset = _tuple$22[1];
			if ((offset === zoneOffset) && (zoneName === "" || name === zoneName)) {
				t.setLoc(local);
				$s = -1; return [t, $ifaceNil];
			}
			t.setLoc(FixedZone(zoneName, zoneOffset));
			$s = -1; return [t, $ifaceNil];
		/* } */ case 5:
		/* */ if (!(zoneName === "")) { $s = 8; continue; }
		/* */ $s = 9; continue;
		/* if (!(zoneName === "")) { */ case 8:
			_r$3 = Date(year, ((month >> 0)), day, hour, min, sec, nsec, $pkg.UTC); /* */ $s = 10; case 10: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			t$1 = $clone(_r$3, Time);
			_r$4 = local.lookupName(zoneName, t$1.unixSec()); /* */ $s = 11; case 11: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			_tuple$23 = _r$4;
			offset$1 = _tuple$23[0];
			ok$1 = _tuple$23[1];
			if (ok$1) {
				t$1.addSec((x$1 = (new $Int64(0, offset$1)), new $Int64(-x$1.$high, -x$1.$low)));
				t$1.setLoc(local);
				$s = -1; return [t$1, $ifaceNil];
			}
			if (zoneName.length > 3 && $substring(zoneName, 0, 3) === "GMT") {
				_tuple$24 = atoi($substring(zoneName, 3));
				offset$1 = _tuple$24[0];
				offset$1 = $imul(offset$1, (3600));
			}
			t$1.setLoc(FixedZone(zoneName, offset$1));
			$s = -1; return [t$1, $ifaceNil];
		/* } */ case 9:
		_r$5 = Date(year, ((month >> 0)), day, hour, min, sec, nsec, defaultLocation); /* */ $s = 12; case 12: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		$s = -1; return [_r$5, $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: parse }; } $f._1 = _1; $f._2 = _2; $f._3 = _3; $f._4 = _4; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$10 = _tmp$10; $f._tmp$11 = _tmp$11; $f._tmp$12 = _tmp$12; $f._tmp$13 = _tmp$13; $f._tmp$14 = _tmp$14; $f._tmp$15 = _tmp$15; $f._tmp$16 = _tmp$16; $f._tmp$17 = _tmp$17; $f._tmp$18 = _tmp$18; $f._tmp$19 = _tmp$19; $f._tmp$2 = _tmp$2; $f._tmp$20 = _tmp$20; $f._tmp$21 = _tmp$21; $f._tmp$22 = _tmp$22; $f._tmp$23 = _tmp$23; $f._tmp$24 = _tmp$24; $f._tmp$25 = _tmp$25; $f._tmp$26 = _tmp$26; $f._tmp$27 = _tmp$27; $f._tmp$28 = _tmp$28; $f._tmp$29 = _tmp$29; $f._tmp$3 = _tmp$3; $f._tmp$30 = _tmp$30; $f._tmp$31 = _tmp$31; $f._tmp$32 = _tmp$32; $f._tmp$33 = _tmp$33; $f._tmp$34 = _tmp$34; $f._tmp$35 = _tmp$35; $f._tmp$36 = _tmp$36; $f._tmp$37 = _tmp$37; $f._tmp$38 = _tmp$38; $f._tmp$39 = _tmp$39; $f._tmp$4 = _tmp$4; $f._tmp$40 = _tmp$40; $f._tmp$41 = _tmp$41; $f._tmp$42 = _tmp$42; $f._tmp$43 = _tmp$43; $f._tmp$5 = _tmp$5; $f._tmp$6 = _tmp$6; $f._tmp$7 = _tmp$7; $f._tmp$8 = _tmp$8; $f._tmp$9 = _tmp$9; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$10 = _tuple$10; $f._tuple$11 = _tuple$11; $f._tuple$12 = _tuple$12; $f._tuple$13 = _tuple$13; $f._tuple$14 = _tuple$14; $f._tuple$15 = _tuple$15; $f._tuple$16 = _tuple$16; $f._tuple$17 = _tuple$17; $f._tuple$18 = _tuple$18; $f._tuple$19 = _tuple$19; $f._tuple$2 = _tuple$2; $f._tuple$20 = _tuple$20; $f._tuple$21 = _tuple$21; $f._tuple$22 = _tuple$22; $f._tuple$23 = _tuple$23; $f._tuple$24 = _tuple$24; $f._tuple$3 = _tuple$3; $f._tuple$4 = _tuple$4; $f._tuple$5 = _tuple$5; $f._tuple$6 = _tuple$6; $f._tuple$7 = _tuple$7; $f._tuple$8 = _tuple$8; $f._tuple$9 = _tuple$9; $f.alayout = alayout; $f.amSet = amSet; $f.avalue = avalue; $f.day = day; $f.defaultLocation = defaultLocation; $f.err = err; $f.hour = hour; $f.hour$1 = hour$1; $f.hr = hr; $f.i = i; $f.layout = layout; $f.local = local; $f.min = min; $f.min$1 = min$1; $f.mm = mm; $f.month = month; $f.n = n; $f.n$1 = n$1; $f.name = name; $f.ndigit = ndigit; $f.nsec = nsec; $f.offset = offset; $f.offset$1 = offset$1; $f.ok = ok; $f.ok$1 = ok$1; $f.p = p; $f.pmSet = pmSet; $f.prefix = prefix; $f.rangeErrString = rangeErrString; $f.sec = sec; $f.seconds = seconds; $f.sign = sign; $f.ss = ss; $f.std = std; $f.stdstr = stdstr; $f.suffix = suffix; $f.t = t; $f.t$1 = t$1; $f.value = value; $f.x = x; $f.x$1 = x$1; $f.year = year; $f.z = z; $f.zoneName = zoneName; $f.zoneOffset = zoneOffset; $f.$s = $s; $f.$r = $r; return $f;
	};
	parseTimeZone = function(value) {
		var _1, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$15, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, c, length, nUpper, ok, value;
		length = 0;
		ok = false;
		if (value.length < 3) {
			_tmp = 0;
			_tmp$1 = false;
			length = _tmp;
			ok = _tmp$1;
			return [length, ok];
		}
		if (value.length >= 4 && ($substring(value, 0, 4) === "ChST" || $substring(value, 0, 4) === "MeST")) {
			_tmp$2 = 4;
			_tmp$3 = true;
			length = _tmp$2;
			ok = _tmp$3;
			return [length, ok];
		}
		if ($substring(value, 0, 3) === "GMT") {
			length = parseGMT(value);
			_tmp$4 = length;
			_tmp$5 = true;
			length = _tmp$4;
			ok = _tmp$5;
			return [length, ok];
		}
		nUpper = 0;
		nUpper = 0;
		while (true) {
			if (!(nUpper < 6)) { break; }
			if (nUpper >= value.length) {
				break;
			}
			c = value.charCodeAt(nUpper);
			if (c < 65 || 90 < c) {
				break;
			}
			nUpper = nUpper + (1) >> 0;
		}
		_1 = nUpper;
		if ((_1 === (0)) || (_1 === (1)) || (_1 === (2)) || (_1 === (6))) {
			_tmp$6 = 0;
			_tmp$7 = false;
			length = _tmp$6;
			ok = _tmp$7;
			return [length, ok];
		} else if (_1 === (5)) {
			if (value.charCodeAt(4) === 84) {
				_tmp$8 = 5;
				_tmp$9 = true;
				length = _tmp$8;
				ok = _tmp$9;
				return [length, ok];
			}
		} else if (_1 === (4)) {
			if ((value.charCodeAt(3) === 84) || $substring(value, 0, 4) === "WITA") {
				_tmp$10 = 4;
				_tmp$11 = true;
				length = _tmp$10;
				ok = _tmp$11;
				return [length, ok];
			}
		} else if (_1 === (3)) {
			_tmp$12 = 3;
			_tmp$13 = true;
			length = _tmp$12;
			ok = _tmp$13;
			return [length, ok];
		}
		_tmp$14 = 0;
		_tmp$15 = false;
		length = _tmp$14;
		ok = _tmp$15;
		return [length, ok];
	};
	parseGMT = function(value) {
		var _tuple, err, rem, sign, value, x;
		value = $substring(value, 3);
		if (value.length === 0) {
			return 3;
		}
		sign = value.charCodeAt(0);
		if (!((sign === 45)) && !((sign === 43))) {
			return 3;
		}
		_tuple = leadingInt($substring(value, 1));
		x = _tuple[0];
		rem = _tuple[1];
		err = _tuple[2];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return 3;
		}
		if (sign === 45) {
			x = new $Int64(-x.$high, -x.$low);
		}
		if ((x.$high === 0 && x.$low === 0) || (x.$high < -1 || (x.$high === -1 && x.$low < 4294967282)) || (0 < x.$high || (0 === x.$high && 12 < x.$low))) {
			return 3;
		}
		return (3 + value.length >> 0) - rem.length >> 0;
	};
	parseNanoseconds = function(value, nbytes) {
		var _tuple, err, i, nbytes, ns, rangeErrString, scaleDigits, value;
		ns = 0;
		rangeErrString = "";
		err = $ifaceNil;
		if (!((value.charCodeAt(0) === 46))) {
			err = errBad;
			return [ns, rangeErrString, err];
		}
		_tuple = atoi($substring(value, 1, nbytes));
		ns = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return [ns, rangeErrString, err];
		}
		if (ns < 0 || 1000000000 <= ns) {
			rangeErrString = "fractional second";
			return [ns, rangeErrString, err];
		}
		scaleDigits = 10 - nbytes >> 0;
		i = 0;
		while (true) {
			if (!(i < scaleDigits)) { break; }
			ns = $imul(ns, (10));
			i = i + (1) >> 0;
		}
		return [ns, rangeErrString, err];
	};
	leadingInt = function(s) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, c, err, i, rem, s, x, x$1, x$2, x$3;
		x = new $Int64(0, 0);
		rem = "";
		err = $ifaceNil;
		i = 0;
		while (true) {
			if (!(i < s.length)) { break; }
			c = s.charCodeAt(i);
			if (c < 48 || c > 57) {
				break;
			}
			if ((x.$high > 214748364 || (x.$high === 214748364 && x.$low > 3435973836))) {
				_tmp = new $Int64(0, 0);
				_tmp$1 = "";
				_tmp$2 = errLeadingInt;
				x = _tmp;
				rem = _tmp$1;
				err = _tmp$2;
				return [x, rem, err];
			}
			x = (x$1 = (x$2 = $mul64(x, new $Int64(0, 10)), x$3 = (new $Int64(0, c)), new $Int64(x$2.$high + x$3.$high, x$2.$low + x$3.$low)), new $Int64(x$1.$high - 0, x$1.$low - 48));
			if ((x.$high < 0 || (x.$high === 0 && x.$low < 0))) {
				_tmp$3 = new $Int64(0, 0);
				_tmp$4 = "";
				_tmp$5 = errLeadingInt;
				x = _tmp$3;
				rem = _tmp$4;
				err = _tmp$5;
				return [x, rem, err];
			}
			i = i + (1) >> 0;
		}
		_tmp$6 = x;
		_tmp$7 = $substring(s, i);
		_tmp$8 = $ifaceNil;
		x = _tmp$6;
		rem = _tmp$7;
		err = _tmp$8;
		return [x, rem, err];
	};
	Time.ptr.prototype.nsec = function() {
		var t, x;
		t = this;
		return (((x = t.wall, new $Uint64(x.$high & 0, (x.$low & 1073741823) >>> 0)).$low >> 0));
	};
	Time.prototype.nsec = function() { return this.$val.nsec(); };
	Time.ptr.prototype.sec = function() {
		var t, x, x$1, x$2, x$3;
		t = this;
		if (!((x = (x$1 = t.wall, new $Uint64(x$1.$high & 2147483648, (x$1.$low & 0) >>> 0)), (x.$high === 0 && x.$low === 0)))) {
			return (x$2 = ((x$3 = $shiftRightUint64($shiftLeft64(t.wall, 1), 31), new $Int64(x$3.$high, x$3.$low))), new $Int64(13 + x$2.$high, 3618733952 + x$2.$low));
		}
		return (t.ext);
	};
	Time.prototype.sec = function() { return this.$val.sec(); };
	Time.ptr.prototype.unixSec = function() {
		var t, x;
		t = this;
		return (x = t.sec(), new $Int64(x.$high + -15, x.$low + 2288912640));
	};
	Time.prototype.unixSec = function() { return this.$val.unixSec(); };
	Time.ptr.prototype.addSec = function(d) {
		var d, dsec, sec, t, x, x$1, x$2, x$3, x$4, x$5, x$6, x$7, x$8;
		t = this;
		if (!((x = (x$1 = t.wall, new $Uint64(x$1.$high & 2147483648, (x$1.$low & 0) >>> 0)), (x.$high === 0 && x.$low === 0)))) {
			sec = ((x$2 = $shiftRightUint64($shiftLeft64(t.wall, 1), 31), new $Int64(x$2.$high, x$2.$low)));
			dsec = new $Int64(sec.$high + d.$high, sec.$low + d.$low);
			if ((0 < dsec.$high || (0 === dsec.$high && 0 <= dsec.$low)) && (dsec.$high < 1 || (dsec.$high === 1 && dsec.$low <= 4294967295))) {
				t.wall = (x$3 = (x$4 = (x$5 = t.wall, new $Uint64(x$5.$high & 0, (x$5.$low & 1073741823) >>> 0)), x$6 = $shiftLeft64((new $Uint64(dsec.$high, dsec.$low)), 30), new $Uint64(x$4.$high | x$6.$high, (x$4.$low | x$6.$low) >>> 0)), new $Uint64(x$3.$high | 2147483648, (x$3.$low | 0) >>> 0));
				return;
			}
			t.stripMono();
		}
		t.ext = (x$7 = t.ext, x$8 = d, new $Int64(x$7.$high + x$8.$high, x$7.$low + x$8.$low));
	};
	Time.prototype.addSec = function(d) { return this.$val.addSec(d); };
	Time.ptr.prototype.setLoc = function(loc) {
		var loc, t;
		t = this;
		if (loc === utcLoc) {
			loc = ptrType$2.nil;
		}
		t.stripMono();
		t.loc = loc;
	};
	Time.prototype.setLoc = function(loc) { return this.$val.setLoc(loc); };
	Time.ptr.prototype.stripMono = function() {
		var t, x, x$1, x$2, x$3;
		t = this;
		if (!((x = (x$1 = t.wall, new $Uint64(x$1.$high & 2147483648, (x$1.$low & 0) >>> 0)), (x.$high === 0 && x.$low === 0)))) {
			t.ext = t.sec();
			t.wall = (x$2 = t.wall, x$3 = new $Uint64(0, 1073741823), new $Uint64(x$2.$high & x$3.$high, (x$2.$low & x$3.$low) >>> 0));
		}
	};
	Time.prototype.stripMono = function() { return this.$val.stripMono(); };
	Time.ptr.prototype.After = function(u) {
		var t, ts, u, us, x, x$1, x$2, x$3, x$4, x$5;
		t = this;
		if (!((x = (x$1 = (x$2 = t.wall, x$3 = u.wall, new $Uint64(x$2.$high & x$3.$high, (x$2.$low & x$3.$low) >>> 0)), new $Uint64(x$1.$high & 2147483648, (x$1.$low & 0) >>> 0)), (x.$high === 0 && x.$low === 0)))) {
			return (x$4 = t.ext, x$5 = u.ext, (x$4.$high > x$5.$high || (x$4.$high === x$5.$high && x$4.$low > x$5.$low)));
		}
		ts = t.sec();
		us = u.sec();
		return (ts.$high > us.$high || (ts.$high === us.$high && ts.$low > us.$low)) || (ts.$high === us.$high && ts.$low === us.$low) && t.nsec() > u.nsec();
	};
	Time.prototype.After = function(u) { return this.$val.After(u); };
	Time.ptr.prototype.Before = function(u) {
		var t, u, x, x$1, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9;
		t = this;
		if (!((x = (x$1 = (x$2 = t.wall, x$3 = u.wall, new $Uint64(x$2.$high & x$3.$high, (x$2.$low & x$3.$low) >>> 0)), new $Uint64(x$1.$high & 2147483648, (x$1.$low & 0) >>> 0)), (x.$high === 0 && x.$low === 0)))) {
			return (x$4 = t.ext, x$5 = u.ext, (x$4.$high < x$5.$high || (x$4.$high === x$5.$high && x$4.$low < x$5.$low)));
		}
		return (x$6 = t.sec(), x$7 = u.sec(), (x$6.$high < x$7.$high || (x$6.$high === x$7.$high && x$6.$low < x$7.$low))) || (x$8 = t.sec(), x$9 = u.sec(), (x$8.$high === x$9.$high && x$8.$low === x$9.$low)) && t.nsec() < u.nsec();
	};
	Time.prototype.Before = function(u) { return this.$val.Before(u); };
	Time.ptr.prototype.Equal = function(u) {
		var t, u, x, x$1, x$2, x$3, x$4, x$5, x$6, x$7;
		t = this;
		if (!((x = (x$1 = (x$2 = t.wall, x$3 = u.wall, new $Uint64(x$2.$high & x$3.$high, (x$2.$low & x$3.$low) >>> 0)), new $Uint64(x$1.$high & 2147483648, (x$1.$low & 0) >>> 0)), (x.$high === 0 && x.$low === 0)))) {
			return (x$4 = t.ext, x$5 = u.ext, (x$4.$high === x$5.$high && x$4.$low === x$5.$low));
		}
		return (x$6 = t.sec(), x$7 = u.sec(), (x$6.$high === x$7.$high && x$6.$low === x$7.$low)) && (t.nsec() === u.nsec());
	};
	Time.prototype.Equal = function(u) { return this.$val.Equal(u); };
	Month.prototype.String = function() {
		var buf, m, n, x;
		m = this.$val;
		if (1 <= m && m <= 12) {
			return (x = m - 1 >> 0, ((x < 0 || x >= months.length) ? ($throwRuntimeError("index out of range"), undefined) : months[x]));
		}
		buf = $makeSlice(sliceType$3, 20);
		n = fmtInt(buf, (new $Uint64(0, m)));
		return "%!Month(" + ($bytesToString($subslice(buf, n))) + ")";
	};
	$ptrType(Month).prototype.String = function() { return new Month(this.$get()).String(); };
	Weekday.prototype.String = function() {
		var d;
		d = this.$val;
		return ((d < 0 || d >= days.length) ? ($throwRuntimeError("index out of range"), undefined) : days[d]);
	};
	$ptrType(Weekday).prototype.String = function() { return new Weekday(this.$get()).String(); };
	Time.ptr.prototype.IsZero = function() {
		var t, x;
		t = this;
		return (x = t.sec(), (x.$high === 0 && x.$low === 0)) && (t.nsec() === 0);
	};
	Time.prototype.IsZero = function() { return this.$val.IsZero(); };
	Time.ptr.prototype.abs = function() {
		var _r, _r$1, _tuple, l, offset, sec, t, x, x$1, x$2, x$3, x$4, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; l = $f.l; offset = $f.offset; sec = $f.sec; t = $f.t; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		l = t.loc;
		/* */ if (l === ptrType$2.nil || l === localLoc) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (l === ptrType$2.nil || l === localLoc) { */ case 1:
			_r = l.get(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			l = _r;
		/* } */ case 2:
		sec = t.unixSec();
		/* */ if (!(l === utcLoc)) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (!(l === utcLoc)) { */ case 4:
			/* */ if (!(l.cacheZone === ptrType.nil) && (x = l.cacheStart, (x.$high < sec.$high || (x.$high === sec.$high && x.$low <= sec.$low))) && (x$1 = l.cacheEnd, (sec.$high < x$1.$high || (sec.$high === x$1.$high && sec.$low < x$1.$low)))) { $s = 6; continue; }
			/* */ $s = 7; continue;
			/* if (!(l.cacheZone === ptrType.nil) && (x = l.cacheStart, (x.$high < sec.$high || (x.$high === sec.$high && x.$low <= sec.$low))) && (x$1 = l.cacheEnd, (sec.$high < x$1.$high || (sec.$high === x$1.$high && sec.$low < x$1.$low)))) { */ case 6:
				sec = (x$2 = (new $Int64(0, l.cacheZone.offset)), new $Int64(sec.$high + x$2.$high, sec.$low + x$2.$low));
				$s = 8; continue;
			/* } else { */ case 7:
				_r$1 = l.lookup(sec); /* */ $s = 9; case 9: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				_tuple = _r$1;
				offset = _tuple[1];
				sec = (x$3 = (new $Int64(0, offset)), new $Int64(sec.$high + x$3.$high, sec.$low + x$3.$low));
			/* } */ case 8:
		/* } */ case 5:
		$s = -1; return ((x$4 = new $Int64(sec.$high + 2147483646, sec.$low + 450480384), new $Uint64(x$4.$high, x$4.$low)));
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.abs }; } $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f.l = l; $f.offset = offset; $f.sec = sec; $f.t = t; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.abs = function() { return this.$val.abs(); };
	Time.ptr.prototype.locabs = function() {
		var _r, _r$1, _tuple, abs, l, name, offset, sec, t, x, x$1, x$2, x$3, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; abs = $f.abs; l = $f.l; name = $f.name; offset = $f.offset; sec = $f.sec; t = $f.t; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		name = "";
		offset = 0;
		abs = new $Uint64(0, 0);
		t = this;
		l = t.loc;
		/* */ if (l === ptrType$2.nil || l === localLoc) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (l === ptrType$2.nil || l === localLoc) { */ case 1:
			_r = l.get(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			l = _r;
		/* } */ case 2:
		sec = t.unixSec();
		/* */ if (!(l === utcLoc)) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (!(l === utcLoc)) { */ case 4:
			/* */ if (!(l.cacheZone === ptrType.nil) && (x = l.cacheStart, (x.$high < sec.$high || (x.$high === sec.$high && x.$low <= sec.$low))) && (x$1 = l.cacheEnd, (sec.$high < x$1.$high || (sec.$high === x$1.$high && sec.$low < x$1.$low)))) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if (!(l.cacheZone === ptrType.nil) && (x = l.cacheStart, (x.$high < sec.$high || (x.$high === sec.$high && x.$low <= sec.$low))) && (x$1 = l.cacheEnd, (sec.$high < x$1.$high || (sec.$high === x$1.$high && sec.$low < x$1.$low)))) { */ case 7:
				name = l.cacheZone.name;
				offset = l.cacheZone.offset;
				$s = 9; continue;
			/* } else { */ case 8:
				_r$1 = l.lookup(sec); /* */ $s = 10; case 10: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				_tuple = _r$1;
				name = _tuple[0];
				offset = _tuple[1];
			/* } */ case 9:
			sec = (x$2 = (new $Int64(0, offset)), new $Int64(sec.$high + x$2.$high, sec.$low + x$2.$low));
			$s = 6; continue;
		/* } else { */ case 5:
			name = "UTC";
		/* } */ case 6:
		abs = ((x$3 = new $Int64(sec.$high + 2147483646, sec.$low + 450480384), new $Uint64(x$3.$high, x$3.$low)));
		$s = -1; return [name, offset, abs];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.locabs }; } $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f.abs = abs; $f.l = l; $f.name = name; $f.offset = offset; $f.sec = sec; $f.t = t; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.locabs = function() { return this.$val.locabs(); };
	Time.ptr.prototype.Date = function() {
		var _r, _tuple, day, month, t, year, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; day = $f.day; month = $f.month; t = $f.t; year = $f.year; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		year = 0;
		month = 0;
		day = 0;
		t = this;
		_r = $clone(t, Time).date(true); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		year = _tuple[0];
		month = _tuple[1];
		day = _tuple[2];
		$s = -1; return [year, month, day];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.Date }; } $f._r = _r; $f._tuple = _tuple; $f.day = day; $f.month = month; $f.t = t; $f.year = year; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.Date = function() { return this.$val.Date(); };
	Time.ptr.prototype.Year = function() {
		var _r, _tuple, t, year, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; t = $f.t; year = $f.year; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		_r = $clone(t, Time).date(false); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		year = _tuple[0];
		$s = -1; return year;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.Year }; } $f._r = _r; $f._tuple = _tuple; $f.t = t; $f.year = year; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.Year = function() { return this.$val.Year(); };
	Time.ptr.prototype.Month = function() {
		var _r, _tuple, month, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; month = $f.month; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		_r = $clone(t, Time).date(true); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		month = _tuple[1];
		$s = -1; return month;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.Month }; } $f._r = _r; $f._tuple = _tuple; $f.month = month; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.Month = function() { return this.$val.Month(); };
	Time.ptr.prototype.Day = function() {
		var _r, _tuple, day, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; day = $f.day; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		_r = $clone(t, Time).date(true); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		day = _tuple[2];
		$s = -1; return day;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.Day }; } $f._r = _r; $f._tuple = _tuple; $f.day = day; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.Day = function() { return this.$val.Day(); };
	Time.ptr.prototype.Weekday = function() {
		var _r, _r$1, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		_r = $clone(t, Time).abs(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = absWeekday(_r); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$s = -1; return _r$1;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.Weekday }; } $f._r = _r; $f._r$1 = _r$1; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.Weekday = function() { return this.$val.Weekday(); };
	absWeekday = function(abs) {
		var _q, abs, sec;
		sec = $div64((new $Uint64(abs.$high + 0, abs.$low + 86400)), new $Uint64(0, 604800), true);
		return (((_q = ((sec.$low >> 0)) / 86400, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) >> 0));
	};
	Time.ptr.prototype.ISOWeek = function() {
		var _q, _r, _r$1, _r$2, _r$3, _r$4, _tuple, day, dec31wday, jan1wday, month, t, wday, week, yday, year, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _q = $f._q; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _tuple = $f._tuple; day = $f.day; dec31wday = $f.dec31wday; jan1wday = $f.jan1wday; month = $f.month; t = $f.t; wday = $f.wday; week = $f.week; yday = $f.yday; year = $f.year; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		year = 0;
		week = 0;
		t = this;
		_r = $clone(t, Time).date(true); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		year = _tuple[0];
		month = _tuple[1];
		day = _tuple[2];
		yday = _tuple[3];
		_r$2 = $clone(t, Time).Weekday(); /* */ $s = 2; case 2: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		wday = (_r$1 = (((_r$2 + 6 >> 0) >> 0)) % 7, _r$1 === _r$1 ? _r$1 : $throwRuntimeError("integer divide by zero"));
		week = (_q = (((yday - wday >> 0) + 7 >> 0)) / 7, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
		jan1wday = (_r$3 = (((wday - yday >> 0) + 371 >> 0)) % 7, _r$3 === _r$3 ? _r$3 : $throwRuntimeError("integer divide by zero"));
		if (1 <= jan1wday && jan1wday <= 3) {
			week = week + (1) >> 0;
		}
		if (week === 0) {
			year = year - (1) >> 0;
			week = 52;
			if ((jan1wday === 4) || ((jan1wday === 5) && isLeap(year))) {
				week = week + (1) >> 0;
			}
		}
		if ((month === 12) && day >= 29 && wday < 3) {
			dec31wday = (_r$4 = (((wday + 31 >> 0) - day >> 0)) % 7, _r$4 === _r$4 ? _r$4 : $throwRuntimeError("integer divide by zero"));
			if (0 <= dec31wday && dec31wday <= 2) {
				year = year + (1) >> 0;
				week = 1;
			}
		}
		$s = -1; return [year, week];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.ISOWeek }; } $f._q = _q; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._tuple = _tuple; $f.day = day; $f.dec31wday = dec31wday; $f.jan1wday = jan1wday; $f.month = month; $f.t = t; $f.wday = wday; $f.week = week; $f.yday = yday; $f.year = year; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.ISOWeek = function() { return this.$val.ISOWeek(); };
	Time.ptr.prototype.Clock = function() {
		var _r, _r$1, _tuple, hour, min, sec, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; hour = $f.hour; min = $f.min; sec = $f.sec; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		hour = 0;
		min = 0;
		sec = 0;
		t = this;
		_r = $clone(t, Time).abs(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = absClock(_r); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple = _r$1;
		hour = _tuple[0];
		min = _tuple[1];
		sec = _tuple[2];
		$s = -1; return [hour, min, sec];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.Clock }; } $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f.hour = hour; $f.min = min; $f.sec = sec; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.Clock = function() { return this.$val.Clock(); };
	absClock = function(abs) {
		var _q, _q$1, abs, hour, min, sec;
		hour = 0;
		min = 0;
		sec = 0;
		sec = (($div64(abs, new $Uint64(0, 86400), true).$low >> 0));
		hour = (_q = sec / 3600, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
		sec = sec - (($imul(hour, 3600))) >> 0;
		min = (_q$1 = sec / 60, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero"));
		sec = sec - (($imul(min, 60))) >> 0;
		return [hour, min, sec];
	};
	Time.ptr.prototype.Hour = function() {
		var _q, _r, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _q = $f._q; _r = $f._r; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		_r = $clone(t, Time).abs(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return (_q = (($div64(_r, new $Uint64(0, 86400), true).$low >> 0)) / 3600, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.Hour }; } $f._q = _q; $f._r = _r; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.Hour = function() { return this.$val.Hour(); };
	Time.ptr.prototype.Minute = function() {
		var _q, _r, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _q = $f._q; _r = $f._r; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		_r = $clone(t, Time).abs(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return (_q = (($div64(_r, new $Uint64(0, 3600), true).$low >> 0)) / 60, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.Minute }; } $f._q = _q; $f._r = _r; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.Minute = function() { return this.$val.Minute(); };
	Time.ptr.prototype.Second = function() {
		var _r, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		_r = $clone(t, Time).abs(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return (($div64(_r, new $Uint64(0, 60), true).$low >> 0));
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.Second }; } $f._r = _r; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.Second = function() { return this.$val.Second(); };
	Time.ptr.prototype.Nanosecond = function() {
		var t;
		t = this;
		return ((t.nsec() >> 0));
	};
	Time.prototype.Nanosecond = function() { return this.$val.Nanosecond(); };
	Time.ptr.prototype.YearDay = function() {
		var _r, _tuple, t, yday, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; t = $f.t; yday = $f.yday; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		_r = $clone(t, Time).date(false); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		yday = _tuple[3];
		$s = -1; return yday + 1 >> 0;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.YearDay }; } $f._r = _r; $f._tuple = _tuple; $f.t = t; $f.yday = yday; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.YearDay = function() { return this.$val.YearDay(); };
	Duration.prototype.String = function() {
		var _tuple, _tuple$1, buf, d, neg, prec, u, w;
		d = this;
		buf = arrayType$3.zero();
		w = 32;
		u = (new $Uint64(d.$high, d.$low));
		neg = (d.$high < 0 || (d.$high === 0 && d.$low < 0));
		if (neg) {
			u = new $Uint64(-u.$high, -u.$low);
		}
		if ((u.$high < 0 || (u.$high === 0 && u.$low < 1000000000))) {
			prec = 0;
			w = w - (1) >> 0;
			((w < 0 || w >= buf.length) ? ($throwRuntimeError("index out of range"), undefined) : buf[w] = 115);
			w = w - (1) >> 0;
			if ((u.$high === 0 && u.$low === 0)) {
				return "0s";
			} else if ((u.$high < 0 || (u.$high === 0 && u.$low < 1000))) {
				prec = 0;
				((w < 0 || w >= buf.length) ? ($throwRuntimeError("index out of range"), undefined) : buf[w] = 110);
			} else if ((u.$high < 0 || (u.$high === 0 && u.$low < 1000000))) {
				prec = 3;
				w = w - (1) >> 0;
				$copyString($subslice(new sliceType$3(buf), w), "\xC2\xB5");
			} else {
				prec = 6;
				((w < 0 || w >= buf.length) ? ($throwRuntimeError("index out of range"), undefined) : buf[w] = 109);
			}
			_tuple = fmtFrac($subslice(new sliceType$3(buf), 0, w), u, prec);
			w = _tuple[0];
			u = _tuple[1];
			w = fmtInt($subslice(new sliceType$3(buf), 0, w), u);
		} else {
			w = w - (1) >> 0;
			((w < 0 || w >= buf.length) ? ($throwRuntimeError("index out of range"), undefined) : buf[w] = 115);
			_tuple$1 = fmtFrac($subslice(new sliceType$3(buf), 0, w), u, 9);
			w = _tuple$1[0];
			u = _tuple$1[1];
			w = fmtInt($subslice(new sliceType$3(buf), 0, w), $div64(u, new $Uint64(0, 60), true));
			u = $div64(u, (new $Uint64(0, 60)), false);
			if ((u.$high > 0 || (u.$high === 0 && u.$low > 0))) {
				w = w - (1) >> 0;
				((w < 0 || w >= buf.length) ? ($throwRuntimeError("index out of range"), undefined) : buf[w] = 109);
				w = fmtInt($subslice(new sliceType$3(buf), 0, w), $div64(u, new $Uint64(0, 60), true));
				u = $div64(u, (new $Uint64(0, 60)), false);
				if ((u.$high > 0 || (u.$high === 0 && u.$low > 0))) {
					w = w - (1) >> 0;
					((w < 0 || w >= buf.length) ? ($throwRuntimeError("index out of range"), undefined) : buf[w] = 104);
					w = fmtInt($subslice(new sliceType$3(buf), 0, w), u);
				}
			}
		}
		if (neg) {
			w = w - (1) >> 0;
			((w < 0 || w >= buf.length) ? ($throwRuntimeError("index out of range"), undefined) : buf[w] = 45);
		}
		return ($bytesToString($subslice(new sliceType$3(buf), w)));
	};
	$ptrType(Duration).prototype.String = function() { return this.$get().String(); };
	fmtFrac = function(buf, v, prec) {
		var _tmp, _tmp$1, buf, digit, i, nv, nw, prec, print, v, w;
		nw = 0;
		nv = new $Uint64(0, 0);
		w = buf.$length;
		print = false;
		i = 0;
		while (true) {
			if (!(i < prec)) { break; }
			digit = $div64(v, new $Uint64(0, 10), true);
			print = print || !((digit.$high === 0 && digit.$low === 0));
			if (print) {
				w = w - (1) >> 0;
				((w < 0 || w >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + w] = (((digit.$low << 24 >>> 24)) + 48 << 24 >>> 24));
			}
			v = $div64(v, (new $Uint64(0, 10)), false);
			i = i + (1) >> 0;
		}
		if (print) {
			w = w - (1) >> 0;
			((w < 0 || w >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + w] = 46);
		}
		_tmp = w;
		_tmp$1 = v;
		nw = _tmp;
		nv = _tmp$1;
		return [nw, nv];
	};
	fmtInt = function(buf, v) {
		var buf, v, w;
		w = buf.$length;
		if ((v.$high === 0 && v.$low === 0)) {
			w = w - (1) >> 0;
			((w < 0 || w >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + w] = 48);
		} else {
			while (true) {
				if (!((v.$high > 0 || (v.$high === 0 && v.$low > 0)))) { break; }
				w = w - (1) >> 0;
				((w < 0 || w >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + w] = ((($div64(v, new $Uint64(0, 10), true).$low << 24 >>> 24)) + 48 << 24 >>> 24));
				v = $div64(v, (new $Uint64(0, 10)), false);
			}
		}
		return w;
	};
	Duration.prototype.Nanoseconds = function() {
		var d;
		d = this;
		return (new $Int64(d.$high, d.$low));
	};
	$ptrType(Duration).prototype.Nanoseconds = function() { return this.$get().Nanoseconds(); };
	Duration.prototype.Seconds = function() {
		var d, nsec, sec;
		d = this;
		sec = $div64(d, new Duration(0, 1000000000), false);
		nsec = $div64(d, new Duration(0, 1000000000), true);
		return ($flatten64(sec)) + ($flatten64(nsec)) / 1e+09;
	};
	$ptrType(Duration).prototype.Seconds = function() { return this.$get().Seconds(); };
	Duration.prototype.Minutes = function() {
		var d, min, nsec;
		d = this;
		min = $div64(d, new Duration(13, 4165425152), false);
		nsec = $div64(d, new Duration(13, 4165425152), true);
		return ($flatten64(min)) + ($flatten64(nsec)) / 6e+10;
	};
	$ptrType(Duration).prototype.Minutes = function() { return this.$get().Minutes(); };
	Duration.prototype.Hours = function() {
		var d, hour, nsec;
		d = this;
		hour = $div64(d, new Duration(838, 817405952), false);
		nsec = $div64(d, new Duration(838, 817405952), true);
		return ($flatten64(hour)) + ($flatten64(nsec)) / 3.6e+12;
	};
	$ptrType(Duration).prototype.Hours = function() { return this.$get().Hours(); };
	Duration.prototype.Truncate = function(m) {
		var d, m, x;
		d = this;
		if ((m.$high < 0 || (m.$high === 0 && m.$low <= 0))) {
			return d;
		}
		return (x = $div64(d, m, true), new Duration(d.$high - x.$high, d.$low - x.$low));
	};
	$ptrType(Duration).prototype.Truncate = function(m) { return this.$get().Truncate(m); };
	lessThanHalf = function(x, y) {
		var x, x$1, x$2, x$3, x$4, y;
		return (x$1 = (x$2 = (new $Uint64(x.$high, x.$low)), x$3 = (new $Uint64(x.$high, x.$low)), new $Uint64(x$2.$high + x$3.$high, x$2.$low + x$3.$low)), x$4 = (new $Uint64(y.$high, y.$low)), (x$1.$high < x$4.$high || (x$1.$high === x$4.$high && x$1.$low < x$4.$low)));
	};
	Duration.prototype.Round = function(m) {
		var d, d1, d1$1, m, r, x, x$1;
		d = this;
		if ((m.$high < 0 || (m.$high === 0 && m.$low <= 0))) {
			return d;
		}
		r = $div64(d, m, true);
		if ((d.$high < 0 || (d.$high === 0 && d.$low < 0))) {
			r = new Duration(-r.$high, -r.$low);
			if (lessThanHalf(r, m)) {
				return new Duration(d.$high + r.$high, d.$low + r.$low);
			}
			d1 = (x = new Duration(d.$high - m.$high, d.$low - m.$low), new Duration(x.$high + r.$high, x.$low + r.$low));
			if ((d1.$high < d.$high || (d1.$high === d.$high && d1.$low < d.$low))) {
				return d1;
			}
			return new Duration(-2147483648, 0);
		}
		if (lessThanHalf(r, m)) {
			return new Duration(d.$high - r.$high, d.$low - r.$low);
		}
		d1$1 = (x$1 = new Duration(d.$high + m.$high, d.$low + m.$low), new Duration(x$1.$high - r.$high, x$1.$low - r.$low));
		if ((d1$1.$high > d.$high || (d1$1.$high === d.$high && d1$1.$low > d.$low))) {
			return d1$1;
		}
		return new Duration(2147483647, 4294967295);
	};
	$ptrType(Duration).prototype.Round = function(m) { return this.$get().Round(m); };
	Time.ptr.prototype.Add = function(d) {
		var d, dsec, nsec, t, te, x, x$1, x$10, x$11, x$12, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9;
		t = this;
		dsec = ((x = $div64(d, new Duration(0, 1000000000), false), new $Int64(x.$high, x.$low)));
		nsec = t.nsec() + (((x$1 = $div64(d, new Duration(0, 1000000000), true), x$1.$low + ((x$1.$high >> 31) * 4294967296)) >> 0)) >> 0;
		if (nsec >= 1000000000) {
			dsec = (x$2 = new $Int64(0, 1), new $Int64(dsec.$high + x$2.$high, dsec.$low + x$2.$low));
			nsec = nsec - (1000000000) >> 0;
		} else if (nsec < 0) {
			dsec = (x$3 = new $Int64(0, 1), new $Int64(dsec.$high - x$3.$high, dsec.$low - x$3.$low));
			nsec = nsec + (1000000000) >> 0;
		}
		t.wall = (x$4 = (x$5 = t.wall, new $Uint64(x$5.$high & ~0, (x$5.$low & ~1073741823) >>> 0)), x$6 = (new $Uint64(0, nsec)), new $Uint64(x$4.$high | x$6.$high, (x$4.$low | x$6.$low) >>> 0));
		t.addSec(dsec);
		if (!((x$7 = (x$8 = t.wall, new $Uint64(x$8.$high & 2147483648, (x$8.$low & 0) >>> 0)), (x$7.$high === 0 && x$7.$low === 0)))) {
			te = (x$9 = t.ext, x$10 = (new $Int64(d.$high, d.$low)), new $Int64(x$9.$high + x$10.$high, x$9.$low + x$10.$low));
			if ((d.$high < 0 || (d.$high === 0 && d.$low < 0)) && (x$11 = (t.ext), (te.$high > x$11.$high || (te.$high === x$11.$high && te.$low > x$11.$low))) || (d.$high > 0 || (d.$high === 0 && d.$low > 0)) && (x$12 = (t.ext), (te.$high < x$12.$high || (te.$high === x$12.$high && te.$low < x$12.$low)))) {
				t.stripMono();
			} else {
				t.ext = te;
			}
		}
		return t;
	};
	Time.prototype.Add = function(d) { return this.$val.Add(d); };
	Time.ptr.prototype.Sub = function(u) {
		var d, d$1, t, te, u, ue, x, x$1, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9;
		t = this;
		if (!((x = (x$1 = (x$2 = t.wall, x$3 = u.wall, new $Uint64(x$2.$high & x$3.$high, (x$2.$low & x$3.$low) >>> 0)), new $Uint64(x$1.$high & 2147483648, (x$1.$low & 0) >>> 0)), (x.$high === 0 && x.$low === 0)))) {
			te = (t.ext);
			ue = (u.ext);
			d = ((x$4 = new $Int64(te.$high - ue.$high, te.$low - ue.$low), new Duration(x$4.$high, x$4.$low)));
			if ((d.$high < 0 || (d.$high === 0 && d.$low < 0)) && (te.$high > ue.$high || (te.$high === ue.$high && te.$low > ue.$low))) {
				return new Duration(2147483647, 4294967295);
			}
			if ((d.$high > 0 || (d.$high === 0 && d.$low > 0)) && (te.$high < ue.$high || (te.$high === ue.$high && te.$low < ue.$low))) {
				return new Duration(-2147483648, 0);
			}
			return d;
		}
		d$1 = (x$5 = $mul64(((x$6 = (x$7 = t.sec(), x$8 = u.sec(), new $Int64(x$7.$high - x$8.$high, x$7.$low - x$8.$low)), new Duration(x$6.$high, x$6.$low))), new Duration(0, 1000000000)), x$9 = (new Duration(0, (t.nsec() - u.nsec() >> 0))), new Duration(x$5.$high + x$9.$high, x$5.$low + x$9.$low));
		if ($clone($clone(u, Time).Add(d$1), Time).Equal($clone(t, Time))) {
			return d$1;
		} else if ($clone(t, Time).Before($clone(u, Time))) {
			return new Duration(-2147483648, 0);
		} else {
			return new Duration(2147483647, 4294967295);
		}
	};
	Time.prototype.Sub = function(u) { return this.$val.Sub(u); };
	Time.ptr.prototype.AddDate = function(years, months$1, days$1) {
		var _r, _r$1, _r$2, _tuple, _tuple$1, day, days$1, hour, min, month, months$1, sec, t, year, years, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; day = $f.day; days$1 = $f.days$1; hour = $f.hour; min = $f.min; month = $f.month; months$1 = $f.months$1; sec = $f.sec; t = $f.t; year = $f.year; years = $f.years; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		_r = $clone(t, Time).Date(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		year = _tuple[0];
		month = _tuple[1];
		day = _tuple[2];
		_r$1 = $clone(t, Time).Clock(); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple$1 = _r$1;
		hour = _tuple$1[0];
		min = _tuple$1[1];
		sec = _tuple$1[2];
		_r$2 = Date(year + years >> 0, month + ((months$1 >> 0)) >> 0, day + days$1 >> 0, hour, min, sec, ((t.nsec() >> 0)), $clone(t, Time).Location()); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		$s = -1; return _r$2;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.AddDate }; } $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.day = day; $f.days$1 = days$1; $f.hour = hour; $f.min = min; $f.month = month; $f.months$1 = months$1; $f.sec = sec; $f.t = t; $f.year = year; $f.years = years; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.AddDate = function(years, months$1, days$1) { return this.$val.AddDate(years, months$1, days$1); };
	Time.ptr.prototype.date = function(full) {
		var _r, _r$1, _tuple, day, full, month, t, yday, year, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; day = $f.day; full = $f.full; month = $f.month; t = $f.t; yday = $f.yday; year = $f.year; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		year = 0;
		month = 0;
		day = 0;
		yday = 0;
		t = this;
		_r = $clone(t, Time).abs(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = absDate(_r, full); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple = _r$1;
		year = _tuple[0];
		month = _tuple[1];
		day = _tuple[2];
		yday = _tuple[3];
		$s = -1; return [year, month, day, yday];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.date }; } $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f.day = day; $f.full = full; $f.month = month; $f.t = t; $f.yday = yday; $f.year = year; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.date = function(full) { return this.$val.date(full); };
	absDate = function(abs, full) {
		var _q, abs, begin, d, day, end, full, month, n, x, x$1, x$10, x$11, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9, y, yday, year;
		year = 0;
		month = 0;
		day = 0;
		yday = 0;
		d = $div64(abs, new $Uint64(0, 86400), false);
		n = $div64(d, new $Uint64(0, 146097), false);
		y = $mul64(new $Uint64(0, 400), n);
		d = (x = $mul64(new $Uint64(0, 146097), n), new $Uint64(d.$high - x.$high, d.$low - x.$low));
		n = $div64(d, new $Uint64(0, 36524), false);
		n = (x$1 = $shiftRightUint64(n, 2), new $Uint64(n.$high - x$1.$high, n.$low - x$1.$low));
		y = (x$2 = $mul64(new $Uint64(0, 100), n), new $Uint64(y.$high + x$2.$high, y.$low + x$2.$low));
		d = (x$3 = $mul64(new $Uint64(0, 36524), n), new $Uint64(d.$high - x$3.$high, d.$low - x$3.$low));
		n = $div64(d, new $Uint64(0, 1461), false);
		y = (x$4 = $mul64(new $Uint64(0, 4), n), new $Uint64(y.$high + x$4.$high, y.$low + x$4.$low));
		d = (x$5 = $mul64(new $Uint64(0, 1461), n), new $Uint64(d.$high - x$5.$high, d.$low - x$5.$low));
		n = $div64(d, new $Uint64(0, 365), false);
		n = (x$6 = $shiftRightUint64(n, 2), new $Uint64(n.$high - x$6.$high, n.$low - x$6.$low));
		y = (x$7 = n, new $Uint64(y.$high + x$7.$high, y.$low + x$7.$low));
		d = (x$8 = $mul64(new $Uint64(0, 365), n), new $Uint64(d.$high - x$8.$high, d.$low - x$8.$low));
		year = (((x$9 = (x$10 = (new $Int64(y.$high, y.$low)), new $Int64(x$10.$high + -69, x$10.$low + 4075721025)), x$9.$low + ((x$9.$high >> 31) * 4294967296)) >> 0));
		yday = ((d.$low >> 0));
		if (!full) {
			return [year, month, day, yday];
		}
		day = yday;
		if (isLeap(year)) {
			if (day > 59) {
				day = day - (1) >> 0;
			} else if ((day === 59)) {
				month = 2;
				day = 29;
				return [year, month, day, yday];
			}
		}
		month = (((_q = day / 31, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) >> 0));
		end = (((x$11 = month + 1 >> 0, ((x$11 < 0 || x$11 >= daysBefore.length) ? ($throwRuntimeError("index out of range"), undefined) : daysBefore[x$11])) >> 0));
		begin = 0;
		if (day >= end) {
			month = month + (1) >> 0;
			begin = end;
		} else {
			begin = ((((month < 0 || month >= daysBefore.length) ? ($throwRuntimeError("index out of range"), undefined) : daysBefore[month]) >> 0));
		}
		month = month + (1) >> 0;
		day = (day - begin >> 0) + 1 >> 0;
		return [year, month, day, yday];
	};
	daysIn = function(m, year) {
		var m, x, year;
		if ((m === 2) && isLeap(year)) {
			return 29;
		}
		return (((((m < 0 || m >= daysBefore.length) ? ($throwRuntimeError("index out of range"), undefined) : daysBefore[m]) - (x = m - 1 >> 0, ((x < 0 || x >= daysBefore.length) ? ($throwRuntimeError("index out of range"), undefined) : daysBefore[x])) >> 0) >> 0));
	};
	Now = function() {
		var _tuple, mono, nsec, sec, x, x$1, x$2, x$3, x$4;
		_tuple = now();
		sec = _tuple[0];
		nsec = _tuple[1];
		mono = _tuple[2];
		sec = (x = new $Int64(0, 2682288000), new $Int64(sec.$high + x.$high, sec.$low + x.$low));
		if (!((x$1 = $shiftRightUint64((new $Uint64(sec.$high, sec.$low)), 33), (x$1.$high === 0 && x$1.$low === 0)))) {
			return new Time.ptr((new $Uint64(0, nsec)), new $Int64(sec.$high + 13, sec.$low + 3618733952), $pkg.Local);
		}
		return new Time.ptr((x$2 = (x$3 = $shiftLeft64((new $Uint64(sec.$high, sec.$low)), 30), new $Uint64(2147483648 | x$3.$high, (0 | x$3.$low) >>> 0)), x$4 = (new $Uint64(0, nsec)), new $Uint64(x$2.$high | x$4.$high, (x$2.$low | x$4.$low) >>> 0)), mono, $pkg.Local);
	};
	$pkg.Now = Now;
	unixTime = function(sec, nsec) {
		var nsec, sec;
		return new Time.ptr((new $Uint64(0, nsec)), new $Int64(sec.$high + 14, sec.$low + 2006054656), $pkg.Local);
	};
	Time.ptr.prototype.UTC = function() {
		var t;
		t = this;
		t.setLoc(utcLoc);
		return t;
	};
	Time.prototype.UTC = function() { return this.$val.UTC(); };
	Time.ptr.prototype.Local = function() {
		var t;
		t = this;
		t.setLoc($pkg.Local);
		return t;
	};
	Time.prototype.Local = function() { return this.$val.Local(); };
	Time.ptr.prototype.In = function(loc) {
		var loc, t;
		t = this;
		if (loc === ptrType$2.nil) {
			$panic(new $String("time: missing Location in call to Time.In"));
		}
		t.setLoc(loc);
		return t;
	};
	Time.prototype.In = function(loc) { return this.$val.In(loc); };
	Time.ptr.prototype.Location = function() {
		var l, t;
		t = this;
		l = t.loc;
		if (l === ptrType$2.nil) {
			l = $pkg.UTC;
		}
		return l;
	};
	Time.prototype.Location = function() { return this.$val.Location(); };
	Time.ptr.prototype.Zone = function() {
		var _r, _tuple, name, offset, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; name = $f.name; offset = $f.offset; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		name = "";
		offset = 0;
		t = this;
		_r = t.loc.lookup(t.unixSec()); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		name = _tuple[0];
		offset = _tuple[1];
		$s = -1; return [name, offset];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.Zone }; } $f._r = _r; $f._tuple = _tuple; $f.name = name; $f.offset = offset; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.Zone = function() { return this.$val.Zone(); };
	Time.ptr.prototype.Unix = function() {
		var t;
		t = this;
		return t.unixSec();
	};
	Time.prototype.Unix = function() { return this.$val.Unix(); };
	Time.ptr.prototype.UnixNano = function() {
		var t, x, x$1;
		t = this;
		return (x = $mul64((t.unixSec()), new $Int64(0, 1000000000)), x$1 = (new $Int64(0, t.nsec())), new $Int64(x.$high + x$1.$high, x.$low + x$1.$low));
	};
	Time.prototype.UnixNano = function() { return this.$val.UnixNano(); };
	Time.ptr.prototype.MarshalBinary = function() {
		var _q, _r, _r$1, _tuple, enc, nsec, offset, offsetMin, sec, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _q = $f._q; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; enc = $f.enc; nsec = $f.nsec; offset = $f.offset; offsetMin = $f.offsetMin; sec = $f.sec; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		offsetMin = 0;
		/* */ if ($clone(t, Time).Location() === $pkg.UTC) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if ($clone(t, Time).Location() === $pkg.UTC) { */ case 1:
			offsetMin = -1;
			$s = 3; continue;
		/* } else { */ case 2:
			_r = $clone(t, Time).Zone(); /* */ $s = 4; case 4: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r;
			offset = _tuple[1];
			if (!(((_r$1 = offset % 60, _r$1 === _r$1 ? _r$1 : $throwRuntimeError("integer divide by zero")) === 0))) {
				$s = -1; return [sliceType$3.nil, errors.New("Time.MarshalBinary: zone offset has fractional minute")];
			}
			offset = (_q = offset / (60), (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
			if (offset < -32768 || (offset === -1) || offset > 32767) {
				$s = -1; return [sliceType$3.nil, errors.New("Time.MarshalBinary: unexpected zone offset")];
			}
			offsetMin = ((offset << 16 >> 16));
		/* } */ case 3:
		sec = t.sec();
		nsec = t.nsec();
		enc = new sliceType$3([1, (($shiftRightInt64(sec, 56).$low << 24 >>> 24)), (($shiftRightInt64(sec, 48).$low << 24 >>> 24)), (($shiftRightInt64(sec, 40).$low << 24 >>> 24)), (($shiftRightInt64(sec, 32).$low << 24 >>> 24)), (($shiftRightInt64(sec, 24).$low << 24 >>> 24)), (($shiftRightInt64(sec, 16).$low << 24 >>> 24)), (($shiftRightInt64(sec, 8).$low << 24 >>> 24)), ((sec.$low << 24 >>> 24)), (((nsec >> 24 >> 0) << 24 >>> 24)), (((nsec >> 16 >> 0) << 24 >>> 24)), (((nsec >> 8 >> 0) << 24 >>> 24)), ((nsec << 24 >>> 24)), (((offsetMin >> 8 << 16 >> 16) << 24 >>> 24)), ((offsetMin << 24 >>> 24))]);
		$s = -1; return [enc, $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.MarshalBinary }; } $f._q = _q; $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f.enc = enc; $f.nsec = nsec; $f.offset = offset; $f.offsetMin = offsetMin; $f.sec = sec; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.MarshalBinary = function() { return this.$val.MarshalBinary(); };
	Time.ptr.prototype.UnmarshalBinary = function(data) {
		var _r, _tuple, buf, data, localoff, nsec, offset, sec, t, x, x$1, x$10, x$11, x$12, x$13, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; buf = $f.buf; data = $f.data; localoff = $f.localoff; nsec = $f.nsec; offset = $f.offset; sec = $f.sec; t = $f.t; x = $f.x; x$1 = $f.x$1; x$10 = $f.x$10; x$11 = $f.x$11; x$12 = $f.x$12; x$13 = $f.x$13; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; x$6 = $f.x$6; x$7 = $f.x$7; x$8 = $f.x$8; x$9 = $f.x$9; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		buf = data;
		if (buf.$length === 0) {
			$s = -1; return errors.New("Time.UnmarshalBinary: no data");
		}
		if (!(((0 >= buf.$length ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + 0]) === 1))) {
			$s = -1; return errors.New("Time.UnmarshalBinary: unsupported version");
		}
		if (!((buf.$length === 15))) {
			$s = -1; return errors.New("Time.UnmarshalBinary: invalid length");
		}
		buf = $subslice(buf, 1);
		sec = (x = (x$1 = (x$2 = (x$3 = (x$4 = (x$5 = (x$6 = (new $Int64(0, (7 >= buf.$length ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + 7]))), x$7 = $shiftLeft64((new $Int64(0, (6 >= buf.$length ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + 6]))), 8), new $Int64(x$6.$high | x$7.$high, (x$6.$low | x$7.$low) >>> 0)), x$8 = $shiftLeft64((new $Int64(0, (5 >= buf.$length ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + 5]))), 16), new $Int64(x$5.$high | x$8.$high, (x$5.$low | x$8.$low) >>> 0)), x$9 = $shiftLeft64((new $Int64(0, (4 >= buf.$length ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + 4]))), 24), new $Int64(x$4.$high | x$9.$high, (x$4.$low | x$9.$low) >>> 0)), x$10 = $shiftLeft64((new $Int64(0, (3 >= buf.$length ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + 3]))), 32), new $Int64(x$3.$high | x$10.$high, (x$3.$low | x$10.$low) >>> 0)), x$11 = $shiftLeft64((new $Int64(0, (2 >= buf.$length ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + 2]))), 40), new $Int64(x$2.$high | x$11.$high, (x$2.$low | x$11.$low) >>> 0)), x$12 = $shiftLeft64((new $Int64(0, (1 >= buf.$length ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + 1]))), 48), new $Int64(x$1.$high | x$12.$high, (x$1.$low | x$12.$low) >>> 0)), x$13 = $shiftLeft64((new $Int64(0, (0 >= buf.$length ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + 0]))), 56), new $Int64(x.$high | x$13.$high, (x.$low | x$13.$low) >>> 0));
		buf = $subslice(buf, 8);
		nsec = (((((3 >= buf.$length ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + 3]) >> 0)) | ((((2 >= buf.$length ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + 2]) >> 0)) << 8 >> 0)) | ((((1 >= buf.$length ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + 1]) >> 0)) << 16 >> 0)) | ((((0 >= buf.$length ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + 0]) >> 0)) << 24 >> 0);
		buf = $subslice(buf, 4);
		offset = $imul(((((((1 >= buf.$length ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + 1]) << 16 >> 16)) | ((((0 >= buf.$length ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + 0]) << 16 >> 16)) << 8 << 16 >> 16)) >> 0)), 60);
		Time.copy(t, new Time.ptr(new $Uint64(0, 0), new $Int64(0, 0), ptrType$2.nil));
		t.wall = (new $Uint64(0, nsec));
		t.ext = sec;
		/* */ if (offset === -60) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (offset === -60) { */ case 1:
			t.setLoc(utcLoc);
			$s = 3; continue;
		/* } else { */ case 2:
			_r = $pkg.Local.lookup(t.unixSec()); /* */ $s = 4; case 4: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r;
			localoff = _tuple[1];
			if (offset === localoff) {
				t.setLoc($pkg.Local);
			} else {
				t.setLoc(FixedZone("", offset));
			}
		/* } */ case 3:
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.UnmarshalBinary }; } $f._r = _r; $f._tuple = _tuple; $f.buf = buf; $f.data = data; $f.localoff = localoff; $f.nsec = nsec; $f.offset = offset; $f.sec = sec; $f.t = t; $f.x = x; $f.x$1 = x$1; $f.x$10 = x$10; $f.x$11 = x$11; $f.x$12 = x$12; $f.x$13 = x$13; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.x$6 = x$6; $f.x$7 = x$7; $f.x$8 = x$8; $f.x$9 = x$9; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.UnmarshalBinary = function(data) { return this.$val.UnmarshalBinary(data); };
	Time.ptr.prototype.GobEncode = function() {
		var _r, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		_r = $clone(t, Time).MarshalBinary(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.GobEncode }; } $f._r = _r; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.GobEncode = function() { return this.$val.GobEncode(); };
	Time.ptr.prototype.GobDecode = function(data) {
		var _r, data, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; data = $f.data; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		_r = t.UnmarshalBinary(data); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.GobDecode }; } $f._r = _r; $f.data = data; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.GobDecode = function(data) { return this.$val.GobDecode(data); };
	Time.ptr.prototype.MarshalJSON = function() {
		var _r, _r$1, b, t, y, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; b = $f.b; t = $f.t; y = $f.y; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		_r = $clone(t, Time).Year(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		y = _r;
		if (y < 0 || y >= 10000) {
			$s = -1; return [sliceType$3.nil, errors.New("Time.MarshalJSON: year outside of range [0,9999]")];
		}
		b = $makeSlice(sliceType$3, 0, 37);
		b = $append(b, 34);
		_r$1 = $clone(t, Time).AppendFormat(b, "2006-01-02T15:04:05.999999999Z07:00"); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		b = _r$1;
		b = $append(b, 34);
		$s = -1; return [b, $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.MarshalJSON }; } $f._r = _r; $f._r$1 = _r$1; $f.b = b; $f.t = t; $f.y = y; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.MarshalJSON = function() { return this.$val.MarshalJSON(); };
	Time.ptr.prototype.UnmarshalJSON = function(data) {
		var _r, _tuple, data, err, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; data = $f.data; err = $f.err; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		if (($bytesToString(data)) === "null") {
			$s = -1; return $ifaceNil;
		}
		err = $ifaceNil;
		_r = Parse("\"2006-01-02T15:04:05Z07:00\"", ($bytesToString(data))); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		Time.copy(t, _tuple[0]);
		err = _tuple[1];
		$s = -1; return err;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.UnmarshalJSON }; } $f._r = _r; $f._tuple = _tuple; $f.data = data; $f.err = err; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.UnmarshalJSON = function(data) { return this.$val.UnmarshalJSON(data); };
	Time.ptr.prototype.MarshalText = function() {
		var _r, _r$1, b, t, y, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; b = $f.b; t = $f.t; y = $f.y; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		_r = $clone(t, Time).Year(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		y = _r;
		if (y < 0 || y >= 10000) {
			$s = -1; return [sliceType$3.nil, errors.New("Time.MarshalText: year outside of range [0,9999]")];
		}
		b = $makeSlice(sliceType$3, 0, 35);
		_r$1 = $clone(t, Time).AppendFormat(b, "2006-01-02T15:04:05.999999999Z07:00"); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$s = -1; return [_r$1, $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.MarshalText }; } $f._r = _r; $f._r$1 = _r$1; $f.b = b; $f.t = t; $f.y = y; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.MarshalText = function() { return this.$val.MarshalText(); };
	Time.ptr.prototype.UnmarshalText = function(data) {
		var _r, _tuple, data, err, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; data = $f.data; err = $f.err; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		err = $ifaceNil;
		_r = Parse("2006-01-02T15:04:05Z07:00", ($bytesToString(data))); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		Time.copy(t, _tuple[0]);
		err = _tuple[1];
		$s = -1; return err;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.UnmarshalText }; } $f._r = _r; $f._tuple = _tuple; $f.data = data; $f.err = err; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.UnmarshalText = function(data) { return this.$val.UnmarshalText(data); };
	Unix = function(sec, nsec) {
		var n, nsec, sec, x, x$1, x$2, x$3;
		if ((nsec.$high < 0 || (nsec.$high === 0 && nsec.$low < 0)) || (nsec.$high > 0 || (nsec.$high === 0 && nsec.$low >= 1000000000))) {
			n = $div64(nsec, new $Int64(0, 1000000000), false);
			sec = (x = n, new $Int64(sec.$high + x.$high, sec.$low + x.$low));
			nsec = (x$1 = $mul64(n, new $Int64(0, 1000000000)), new $Int64(nsec.$high - x$1.$high, nsec.$low - x$1.$low));
			if ((nsec.$high < 0 || (nsec.$high === 0 && nsec.$low < 0))) {
				nsec = (x$2 = new $Int64(0, 1000000000), new $Int64(nsec.$high + x$2.$high, nsec.$low + x$2.$low));
				sec = (x$3 = new $Int64(0, 1), new $Int64(sec.$high - x$3.$high, sec.$low - x$3.$low));
			}
		}
		return unixTime(sec, (((nsec.$low + ((nsec.$high >> 31) * 4294967296)) >> 0)));
	};
	$pkg.Unix = Unix;
	isLeap = function(year) {
		var _r, _r$1, _r$2, year;
		return ((_r = year % 4, _r === _r ? _r : $throwRuntimeError("integer divide by zero")) === 0) && (!(((_r$1 = year % 100, _r$1 === _r$1 ? _r$1 : $throwRuntimeError("integer divide by zero")) === 0)) || ((_r$2 = year % 400, _r$2 === _r$2 ? _r$2 : $throwRuntimeError("integer divide by zero")) === 0));
	};
	norm = function(hi, lo, base) {
		var _q, _q$1, _tmp, _tmp$1, base, hi, lo, n, n$1, nhi, nlo;
		nhi = 0;
		nlo = 0;
		if (lo < 0) {
			n = (_q = ((-lo - 1 >> 0)) / base, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) + 1 >> 0;
			hi = hi - (n) >> 0;
			lo = lo + (($imul(n, base))) >> 0;
		}
		if (lo >= base) {
			n$1 = (_q$1 = lo / base, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero"));
			hi = hi + (n$1) >> 0;
			lo = lo - (($imul(n$1, base))) >> 0;
		}
		_tmp = hi;
		_tmp$1 = lo;
		nhi = _tmp;
		nlo = _tmp$1;
		return [nhi, nlo];
	};
	Date = function(year, month, day, hour, min, sec, nsec, loc) {
		var _r, _r$1, _r$2, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, _tuple$5, _tuple$6, _tuple$7, abs, d, day, end, hour, loc, m, min, month, n, nsec, offset, sec, start, t, unix, utc, x, x$1, x$10, x$11, x$12, x$13, x$14, x$15, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9, y, year, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; _tuple$4 = $f._tuple$4; _tuple$5 = $f._tuple$5; _tuple$6 = $f._tuple$6; _tuple$7 = $f._tuple$7; abs = $f.abs; d = $f.d; day = $f.day; end = $f.end; hour = $f.hour; loc = $f.loc; m = $f.m; min = $f.min; month = $f.month; n = $f.n; nsec = $f.nsec; offset = $f.offset; sec = $f.sec; start = $f.start; t = $f.t; unix = $f.unix; utc = $f.utc; x = $f.x; x$1 = $f.x$1; x$10 = $f.x$10; x$11 = $f.x$11; x$12 = $f.x$12; x$13 = $f.x$13; x$14 = $f.x$14; x$15 = $f.x$15; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; x$6 = $f.x$6; x$7 = $f.x$7; x$8 = $f.x$8; x$9 = $f.x$9; y = $f.y; year = $f.year; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		if (loc === ptrType$2.nil) {
			$panic(new $String("time: missing Location in call to Date"));
		}
		m = ((month >> 0)) - 1 >> 0;
		_tuple = norm(year, m, 12);
		year = _tuple[0];
		m = _tuple[1];
		month = ((m >> 0)) + 1 >> 0;
		_tuple$1 = norm(sec, nsec, 1000000000);
		sec = _tuple$1[0];
		nsec = _tuple$1[1];
		_tuple$2 = norm(min, sec, 60);
		min = _tuple$2[0];
		sec = _tuple$2[1];
		_tuple$3 = norm(hour, min, 60);
		hour = _tuple$3[0];
		min = _tuple$3[1];
		_tuple$4 = norm(day, hour, 24);
		day = _tuple$4[0];
		hour = _tuple$4[1];
		y = ((x = (x$1 = (new $Int64(0, year)), new $Int64(x$1.$high - -69, x$1.$low - 4075721025)), new $Uint64(x.$high, x.$low)));
		n = $div64(y, new $Uint64(0, 400), false);
		y = (x$2 = $mul64(new $Uint64(0, 400), n), new $Uint64(y.$high - x$2.$high, y.$low - x$2.$low));
		d = $mul64(new $Uint64(0, 146097), n);
		n = $div64(y, new $Uint64(0, 100), false);
		y = (x$3 = $mul64(new $Uint64(0, 100), n), new $Uint64(y.$high - x$3.$high, y.$low - x$3.$low));
		d = (x$4 = $mul64(new $Uint64(0, 36524), n), new $Uint64(d.$high + x$4.$high, d.$low + x$4.$low));
		n = $div64(y, new $Uint64(0, 4), false);
		y = (x$5 = $mul64(new $Uint64(0, 4), n), new $Uint64(y.$high - x$5.$high, y.$low - x$5.$low));
		d = (x$6 = $mul64(new $Uint64(0, 1461), n), new $Uint64(d.$high + x$6.$high, d.$low + x$6.$low));
		n = y;
		d = (x$7 = $mul64(new $Uint64(0, 365), n), new $Uint64(d.$high + x$7.$high, d.$low + x$7.$low));
		d = (x$8 = (new $Uint64(0, (x$9 = month - 1 >> 0, ((x$9 < 0 || x$9 >= daysBefore.length) ? ($throwRuntimeError("index out of range"), undefined) : daysBefore[x$9])))), new $Uint64(d.$high + x$8.$high, d.$low + x$8.$low));
		if (isLeap(year) && month >= 3) {
			d = (x$10 = new $Uint64(0, 1), new $Uint64(d.$high + x$10.$high, d.$low + x$10.$low));
		}
		d = (x$11 = (new $Uint64(0, (day - 1 >> 0))), new $Uint64(d.$high + x$11.$high, d.$low + x$11.$low));
		abs = $mul64(d, new $Uint64(0, 86400));
		abs = (x$12 = (new $Uint64(0, ((($imul(hour, 3600)) + ($imul(min, 60)) >> 0) + sec >> 0))), new $Uint64(abs.$high + x$12.$high, abs.$low + x$12.$low));
		unix = (x$13 = (new $Int64(abs.$high, abs.$low)), new $Int64(x$13.$high + -2147483647, x$13.$low + 3844486912));
		_r = loc.lookup(unix); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple$5 = _r;
		offset = _tuple$5[1];
		start = _tuple$5[3];
		end = _tuple$5[4];
		/* */ if (!((offset === 0))) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!((offset === 0))) { */ case 2:
				utc = (x$14 = (new $Int64(0, offset)), new $Int64(unix.$high - x$14.$high, unix.$low - x$14.$low));
				/* */ if ((utc.$high < start.$high || (utc.$high === start.$high && utc.$low < start.$low))) { $s = 5; continue; }
				/* */ if ((utc.$high > end.$high || (utc.$high === end.$high && utc.$low >= end.$low))) { $s = 6; continue; }
				/* */ $s = 7; continue;
				/* if ((utc.$high < start.$high || (utc.$high === start.$high && utc.$low < start.$low))) { */ case 5:
					_r$1 = loc.lookup(new $Int64(start.$high - 0, start.$low - 1)); /* */ $s = 8; case 8: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
					_tuple$6 = _r$1;
					offset = _tuple$6[1];
					$s = 7; continue;
				/* } else if ((utc.$high > end.$high || (utc.$high === end.$high && utc.$low >= end.$low))) { */ case 6:
					_r$2 = loc.lookup(end); /* */ $s = 9; case 9: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
					_tuple$7 = _r$2;
					offset = _tuple$7[1];
				/* } */ case 7:
			case 4:
			unix = (x$15 = (new $Int64(0, offset)), new $Int64(unix.$high - x$15.$high, unix.$low - x$15.$low));
		/* } */ case 3:
		t = $clone(unixTime(unix, ((nsec >> 0))), Time);
		t.setLoc(loc);
		$s = -1; return t;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Date }; } $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f._tuple$4 = _tuple$4; $f._tuple$5 = _tuple$5; $f._tuple$6 = _tuple$6; $f._tuple$7 = _tuple$7; $f.abs = abs; $f.d = d; $f.day = day; $f.end = end; $f.hour = hour; $f.loc = loc; $f.m = m; $f.min = min; $f.month = month; $f.n = n; $f.nsec = nsec; $f.offset = offset; $f.sec = sec; $f.start = start; $f.t = t; $f.unix = unix; $f.utc = utc; $f.x = x; $f.x$1 = x$1; $f.x$10 = x$10; $f.x$11 = x$11; $f.x$12 = x$12; $f.x$13 = x$13; $f.x$14 = x$14; $f.x$15 = x$15; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.x$6 = x$6; $f.x$7 = x$7; $f.x$8 = x$8; $f.x$9 = x$9; $f.y = y; $f.year = year; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Date = Date;
	Time.ptr.prototype.Truncate = function(d) {
		var _tuple, d, r, t;
		t = this;
		t.stripMono();
		if ((d.$high < 0 || (d.$high === 0 && d.$low <= 0))) {
			return t;
		}
		_tuple = div($clone(t, Time), d);
		r = _tuple[1];
		return $clone(t, Time).Add(new Duration(-r.$high, -r.$low));
	};
	Time.prototype.Truncate = function(d) { return this.$val.Truncate(d); };
	Time.ptr.prototype.Round = function(d) {
		var _tuple, d, r, t;
		t = this;
		t.stripMono();
		if ((d.$high < 0 || (d.$high === 0 && d.$low <= 0))) {
			return t;
		}
		_tuple = div($clone(t, Time), d);
		r = _tuple[1];
		if (lessThanHalf(r, d)) {
			return $clone(t, Time).Add(new Duration(-r.$high, -r.$low));
		}
		return $clone(t, Time).Add(new Duration(d.$high - r.$high, d.$low - r.$low));
	};
	Time.prototype.Round = function(d) { return this.$val.Round(d); };
	div = function(t, d) {
		var _q, _r, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, d, d0, d1, d1$1, neg, nsec, qmod2, r, sec, sec$1, t, tmp, u0, u0x, u1, x, x$1, x$10, x$11, x$12, x$13, x$14, x$15, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9;
		qmod2 = 0;
		r = new Duration(0, 0);
		neg = false;
		nsec = t.nsec();
		sec = t.sec();
		if ((sec.$high < 0 || (sec.$high === 0 && sec.$low < 0))) {
			neg = true;
			sec = new $Int64(-sec.$high, -sec.$low);
			nsec = -nsec;
			if (nsec < 0) {
				nsec = nsec + (1000000000) >> 0;
				sec = (x = new $Int64(0, 1), new $Int64(sec.$high - x.$high, sec.$low - x.$low));
			}
		}
		if ((d.$high < 0 || (d.$high === 0 && d.$low < 1000000000)) && (x$1 = $div64(new Duration(0, 1000000000), (new Duration(d.$high + d.$high, d.$low + d.$low)), true), (x$1.$high === 0 && x$1.$low === 0))) {
			qmod2 = (((_q = nsec / (((d.$low + ((d.$high >> 31) * 4294967296)) >> 0)), (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) >> 0)) & 1;
			r = (new Duration(0, (_r = nsec % (((d.$low + ((d.$high >> 31) * 4294967296)) >> 0)), _r === _r ? _r : $throwRuntimeError("integer divide by zero"))));
		} else if ((x$2 = $div64(d, new Duration(0, 1000000000), true), (x$2.$high === 0 && x$2.$low === 0))) {
			d1 = ((x$3 = $div64(d, new Duration(0, 1000000000), false), new $Int64(x$3.$high, x$3.$low)));
			qmod2 = (((x$4 = $div64(sec, d1, false), x$4.$low + ((x$4.$high >> 31) * 4294967296)) >> 0)) & 1;
			r = (x$5 = $mul64(((x$6 = $div64(sec, d1, true), new Duration(x$6.$high, x$6.$low))), new Duration(0, 1000000000)), x$7 = (new Duration(0, nsec)), new Duration(x$5.$high + x$7.$high, x$5.$low + x$7.$low));
		} else {
			sec$1 = (new $Uint64(sec.$high, sec.$low));
			tmp = $mul64(($shiftRightUint64(sec$1, 32)), new $Uint64(0, 1000000000));
			u1 = $shiftRightUint64(tmp, 32);
			u0 = $shiftLeft64(tmp, 32);
			tmp = $mul64((new $Uint64(sec$1.$high & 0, (sec$1.$low & 4294967295) >>> 0)), new $Uint64(0, 1000000000));
			_tmp = u0;
			_tmp$1 = new $Uint64(u0.$high + tmp.$high, u0.$low + tmp.$low);
			u0x = _tmp;
			u0 = _tmp$1;
			if ((u0.$high < u0x.$high || (u0.$high === u0x.$high && u0.$low < u0x.$low))) {
				u1 = (x$8 = new $Uint64(0, 1), new $Uint64(u1.$high + x$8.$high, u1.$low + x$8.$low));
			}
			_tmp$2 = u0;
			_tmp$3 = (x$9 = (new $Uint64(0, nsec)), new $Uint64(u0.$high + x$9.$high, u0.$low + x$9.$low));
			u0x = _tmp$2;
			u0 = _tmp$3;
			if ((u0.$high < u0x.$high || (u0.$high === u0x.$high && u0.$low < u0x.$low))) {
				u1 = (x$10 = new $Uint64(0, 1), new $Uint64(u1.$high + x$10.$high, u1.$low + x$10.$low));
			}
			d1$1 = (new $Uint64(d.$high, d.$low));
			while (true) {
				if (!(!((x$11 = $shiftRightUint64(d1$1, 63), (x$11.$high === 0 && x$11.$low === 1))))) { break; }
				d1$1 = $shiftLeft64(d1$1, (1));
			}
			d0 = new $Uint64(0, 0);
			while (true) {
				qmod2 = 0;
				if ((u1.$high > d1$1.$high || (u1.$high === d1$1.$high && u1.$low > d1$1.$low)) || (u1.$high === d1$1.$high && u1.$low === d1$1.$low) && (u0.$high > d0.$high || (u0.$high === d0.$high && u0.$low >= d0.$low))) {
					qmod2 = 1;
					_tmp$4 = u0;
					_tmp$5 = new $Uint64(u0.$high - d0.$high, u0.$low - d0.$low);
					u0x = _tmp$4;
					u0 = _tmp$5;
					if ((u0.$high > u0x.$high || (u0.$high === u0x.$high && u0.$low > u0x.$low))) {
						u1 = (x$12 = new $Uint64(0, 1), new $Uint64(u1.$high - x$12.$high, u1.$low - x$12.$low));
					}
					u1 = (x$13 = d1$1, new $Uint64(u1.$high - x$13.$high, u1.$low - x$13.$low));
				}
				if ((d1$1.$high === 0 && d1$1.$low === 0) && (x$14 = (new $Uint64(d.$high, d.$low)), (d0.$high === x$14.$high && d0.$low === x$14.$low))) {
					break;
				}
				d0 = $shiftRightUint64(d0, (1));
				d0 = (x$15 = $shiftLeft64((new $Uint64(d1$1.$high & 0, (d1$1.$low & 1) >>> 0)), 63), new $Uint64(d0.$high | x$15.$high, (d0.$low | x$15.$low) >>> 0));
				d1$1 = $shiftRightUint64(d1$1, (1));
			}
			r = (new Duration(u0.$high, u0.$low));
		}
		if (neg && !((r.$high === 0 && r.$low === 0))) {
			qmod2 = (qmod2 ^ (1)) >> 0;
			r = new Duration(d.$high - r.$high, d.$low - r.$low);
		}
		return [qmod2, r];
	};
	Location.ptr.prototype.get = function() {
		var l, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; l = $f.l; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		l = this;
		if (l === ptrType$2.nil) {
			$s = -1; return utcLoc;
		}
		/* */ if (l === localLoc) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (l === localLoc) { */ case 1:
			$r = localOnce.Do(initLocal); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 2:
		$s = -1; return l;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Location.ptr.prototype.get }; } $f.l = l; $f.$s = $s; $f.$r = $r; return $f;
	};
	Location.prototype.get = function() { return this.$val.get(); };
	Location.ptr.prototype.String = function() {
		var _r, l, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; l = $f.l; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		l = this;
		_r = l.get(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r.name;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Location.ptr.prototype.String }; } $f._r = _r; $f.l = l; $f.$s = $s; $f.$r = $r; return $f;
	};
	Location.prototype.String = function() { return this.$val.String(); };
	FixedZone = function(name, offset) {
		var l, name, offset, x;
		l = new Location.ptr(name, new sliceType([new zone.ptr(name, offset, false)]), new sliceType$1([new zoneTrans.ptr(new $Int64(-2147483648, 0), 0, false, false)]), new $Int64(-2147483648, 0), new $Int64(2147483647, 4294967295), ptrType.nil);
		l.cacheZone = (x = l.zone, (0 >= x.$length ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + 0]));
		return l;
	};
	$pkg.FixedZone = FixedZone;
	Location.ptr.prototype.lookup = function(sec) {
		var _q, _r, end, hi, isDST, l, lim, lo, m, name, offset, sec, start, tx, x, x$1, x$2, x$3, x$4, x$5, x$6, x$7, x$8, zone$1, zone$2, zone$3, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _q = $f._q; _r = $f._r; end = $f.end; hi = $f.hi; isDST = $f.isDST; l = $f.l; lim = $f.lim; lo = $f.lo; m = $f.m; name = $f.name; offset = $f.offset; sec = $f.sec; start = $f.start; tx = $f.tx; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; x$6 = $f.x$6; x$7 = $f.x$7; x$8 = $f.x$8; zone$1 = $f.zone$1; zone$2 = $f.zone$2; zone$3 = $f.zone$3; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		name = "";
		offset = 0;
		isDST = false;
		start = new $Int64(0, 0);
		end = new $Int64(0, 0);
		l = this;
		_r = l.get(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		l = _r;
		if (l.zone.$length === 0) {
			name = "UTC";
			offset = 0;
			isDST = false;
			start = new $Int64(-2147483648, 0);
			end = new $Int64(2147483647, 4294967295);
			$s = -1; return [name, offset, isDST, start, end];
		}
		zone$1 = l.cacheZone;
		if (!(zone$1 === ptrType.nil) && (x = l.cacheStart, (x.$high < sec.$high || (x.$high === sec.$high && x.$low <= sec.$low))) && (x$1 = l.cacheEnd, (sec.$high < x$1.$high || (sec.$high === x$1.$high && sec.$low < x$1.$low)))) {
			name = zone$1.name;
			offset = zone$1.offset;
			isDST = zone$1.isDST;
			start = l.cacheStart;
			end = l.cacheEnd;
			$s = -1; return [name, offset, isDST, start, end];
		}
		if ((l.tx.$length === 0) || (x$2 = (x$3 = l.tx, (0 >= x$3.$length ? ($throwRuntimeError("index out of range"), undefined) : x$3.$array[x$3.$offset + 0])).when, (sec.$high < x$2.$high || (sec.$high === x$2.$high && sec.$low < x$2.$low)))) {
			zone$2 = (x$4 = l.zone, x$5 = l.lookupFirstZone(), ((x$5 < 0 || x$5 >= x$4.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$4.$array[x$4.$offset + x$5]));
			name = zone$2.name;
			offset = zone$2.offset;
			isDST = zone$2.isDST;
			start = new $Int64(-2147483648, 0);
			if (l.tx.$length > 0) {
				end = (x$6 = l.tx, (0 >= x$6.$length ? ($throwRuntimeError("index out of range"), undefined) : x$6.$array[x$6.$offset + 0])).when;
			} else {
				end = new $Int64(2147483647, 4294967295);
			}
			$s = -1; return [name, offset, isDST, start, end];
		}
		tx = l.tx;
		end = new $Int64(2147483647, 4294967295);
		lo = 0;
		hi = tx.$length;
		while (true) {
			if (!((hi - lo >> 0) > 1)) { break; }
			m = lo + (_q = ((hi - lo >> 0)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) >> 0;
			lim = ((m < 0 || m >= tx.$length) ? ($throwRuntimeError("index out of range"), undefined) : tx.$array[tx.$offset + m]).when;
			if ((sec.$high < lim.$high || (sec.$high === lim.$high && sec.$low < lim.$low))) {
				end = lim;
				hi = m;
			} else {
				lo = m;
			}
		}
		zone$3 = (x$7 = l.zone, x$8 = ((lo < 0 || lo >= tx.$length) ? ($throwRuntimeError("index out of range"), undefined) : tx.$array[tx.$offset + lo]).index, ((x$8 < 0 || x$8 >= x$7.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$7.$array[x$7.$offset + x$8]));
		name = zone$3.name;
		offset = zone$3.offset;
		isDST = zone$3.isDST;
		start = ((lo < 0 || lo >= tx.$length) ? ($throwRuntimeError("index out of range"), undefined) : tx.$array[tx.$offset + lo]).when;
		$s = -1; return [name, offset, isDST, start, end];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Location.ptr.prototype.lookup }; } $f._q = _q; $f._r = _r; $f.end = end; $f.hi = hi; $f.isDST = isDST; $f.l = l; $f.lim = lim; $f.lo = lo; $f.m = m; $f.name = name; $f.offset = offset; $f.sec = sec; $f.start = start; $f.tx = tx; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.x$6 = x$6; $f.x$7 = x$7; $f.x$8 = x$8; $f.zone$1 = zone$1; $f.zone$2 = zone$2; $f.zone$3 = zone$3; $f.$s = $s; $f.$r = $r; return $f;
	};
	Location.prototype.lookup = function(sec) { return this.$val.lookup(sec); };
	Location.ptr.prototype.lookupFirstZone = function() {
		var _i, _ref, l, x, x$1, x$2, x$3, x$4, x$5, zi, zi$1;
		l = this;
		if (!l.firstZoneUsed()) {
			return 0;
		}
		if (l.tx.$length > 0 && (x = l.zone, x$1 = (x$2 = l.tx, (0 >= x$2.$length ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + 0])).index, ((x$1 < 0 || x$1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + x$1])).isDST) {
			zi = (((x$3 = l.tx, (0 >= x$3.$length ? ($throwRuntimeError("index out of range"), undefined) : x$3.$array[x$3.$offset + 0])).index >> 0)) - 1 >> 0;
			while (true) {
				if (!(zi >= 0)) { break; }
				if (!(x$4 = l.zone, ((zi < 0 || zi >= x$4.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$4.$array[x$4.$offset + zi])).isDST) {
					return zi;
				}
				zi = zi - (1) >> 0;
			}
		}
		_ref = l.zone;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			zi$1 = _i;
			if (!(x$5 = l.zone, ((zi$1 < 0 || zi$1 >= x$5.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$5.$array[x$5.$offset + zi$1])).isDST) {
				return zi$1;
			}
			_i++;
		}
		return 0;
	};
	Location.prototype.lookupFirstZone = function() { return this.$val.lookupFirstZone(); };
	Location.ptr.prototype.firstZoneUsed = function() {
		var _i, _ref, l, tx;
		l = this;
		_ref = l.tx;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			tx = $clone(((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]), zoneTrans);
			if (tx.index === 0) {
				return true;
			}
			_i++;
		}
		return false;
	};
	Location.prototype.firstZoneUsed = function() { return this.$val.firstZoneUsed(); };
	Location.ptr.prototype.lookupName = function(name, unix) {
		var _i, _i$1, _r, _r$1, _ref, _ref$1, _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple, i, i$1, l, nam, name, offset, offset$1, ok, unix, x, x$1, x$2, zone$1, zone$2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _i$1 = $f._i$1; _r = $f._r; _r$1 = $f._r$1; _ref = $f._ref; _ref$1 = $f._ref$1; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tuple = $f._tuple; i = $f.i; i$1 = $f.i$1; l = $f.l; nam = $f.nam; name = $f.name; offset = $f.offset; offset$1 = $f.offset$1; ok = $f.ok; unix = $f.unix; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; zone$1 = $f.zone$1; zone$2 = $f.zone$2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		offset = 0;
		ok = false;
		l = this;
		_r = l.get(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		l = _r;
		_ref = l.zone;
		_i = 0;
		/* while (true) { */ case 2:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 3; continue; }
			i = _i;
			zone$1 = (x = l.zone, ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i]));
			/* */ if (zone$1.name === name) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (zone$1.name === name) { */ case 4:
				_r$1 = l.lookup((x$1 = (new $Int64(0, zone$1.offset)), new $Int64(unix.$high - x$1.$high, unix.$low - x$1.$low))); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				_tuple = _r$1;
				nam = _tuple[0];
				offset$1 = _tuple[1];
				if (nam === zone$1.name) {
					_tmp = offset$1;
					_tmp$1 = true;
					offset = _tmp;
					ok = _tmp$1;
					$s = -1; return [offset, ok];
				}
			/* } */ case 5:
			_i++;
		/* } */ $s = 2; continue; case 3:
		_ref$1 = l.zone;
		_i$1 = 0;
		while (true) {
			if (!(_i$1 < _ref$1.$length)) { break; }
			i$1 = _i$1;
			zone$2 = (x$2 = l.zone, ((i$1 < 0 || i$1 >= x$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + i$1]));
			if (zone$2.name === name) {
				_tmp$2 = zone$2.offset;
				_tmp$3 = true;
				offset = _tmp$2;
				ok = _tmp$3;
				$s = -1; return [offset, ok];
			}
			_i$1++;
		}
		$s = -1; return [offset, ok];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Location.ptr.prototype.lookupName }; } $f._i = _i; $f._i$1 = _i$1; $f._r = _r; $f._r$1 = _r$1; $f._ref = _ref; $f._ref$1 = _ref$1; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tuple = _tuple; $f.i = i; $f.i$1 = i$1; $f.l = l; $f.nam = nam; $f.name = name; $f.offset = offset; $f.offset$1 = offset$1; $f.ok = ok; $f.unix = unix; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.zone$1 = zone$1; $f.zone$2 = zone$2; $f.$s = $s; $f.$r = $r; return $f;
	};
	Location.prototype.lookupName = function(name, unix) { return this.$val.lookupName(name, unix); };
	ptrType$4.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	Time.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Format", name: "Format", pkg: "", typ: $funcType([$String], [$String], false)}, {prop: "AppendFormat", name: "AppendFormat", pkg: "", typ: $funcType([sliceType$3, $String], [sliceType$3], false)}, {prop: "After", name: "After", pkg: "", typ: $funcType([Time], [$Bool], false)}, {prop: "Before", name: "Before", pkg: "", typ: $funcType([Time], [$Bool], false)}, {prop: "Equal", name: "Equal", pkg: "", typ: $funcType([Time], [$Bool], false)}, {prop: "IsZero", name: "IsZero", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "abs", name: "abs", pkg: "time", typ: $funcType([], [$Uint64], false)}, {prop: "locabs", name: "locabs", pkg: "time", typ: $funcType([], [$String, $Int, $Uint64], false)}, {prop: "Date", name: "Date", pkg: "", typ: $funcType([], [$Int, Month, $Int], false)}, {prop: "Year", name: "Year", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Month", name: "Month", pkg: "", typ: $funcType([], [Month], false)}, {prop: "Day", name: "Day", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Weekday", name: "Weekday", pkg: "", typ: $funcType([], [Weekday], false)}, {prop: "ISOWeek", name: "ISOWeek", pkg: "", typ: $funcType([], [$Int, $Int], false)}, {prop: "Clock", name: "Clock", pkg: "", typ: $funcType([], [$Int, $Int, $Int], false)}, {prop: "Hour", name: "Hour", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Minute", name: "Minute", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Second", name: "Second", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Nanosecond", name: "Nanosecond", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "YearDay", name: "YearDay", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Add", name: "Add", pkg: "", typ: $funcType([Duration], [Time], false)}, {prop: "Sub", name: "Sub", pkg: "", typ: $funcType([Time], [Duration], false)}, {prop: "AddDate", name: "AddDate", pkg: "", typ: $funcType([$Int, $Int, $Int], [Time], false)}, {prop: "date", name: "date", pkg: "time", typ: $funcType([$Bool], [$Int, Month, $Int, $Int], false)}, {prop: "UTC", name: "UTC", pkg: "", typ: $funcType([], [Time], false)}, {prop: "Local", name: "Local", pkg: "", typ: $funcType([], [Time], false)}, {prop: "In", name: "In", pkg: "", typ: $funcType([ptrType$2], [Time], false)}, {prop: "Location", name: "Location", pkg: "", typ: $funcType([], [ptrType$2], false)}, {prop: "Zone", name: "Zone", pkg: "", typ: $funcType([], [$String, $Int], false)}, {prop: "Unix", name: "Unix", pkg: "", typ: $funcType([], [$Int64], false)}, {prop: "UnixNano", name: "UnixNano", pkg: "", typ: $funcType([], [$Int64], false)}, {prop: "MarshalBinary", name: "MarshalBinary", pkg: "", typ: $funcType([], [sliceType$3, $error], false)}, {prop: "GobEncode", name: "GobEncode", pkg: "", typ: $funcType([], [sliceType$3, $error], false)}, {prop: "MarshalJSON", name: "MarshalJSON", pkg: "", typ: $funcType([], [sliceType$3, $error], false)}, {prop: "MarshalText", name: "MarshalText", pkg: "", typ: $funcType([], [sliceType$3, $error], false)}, {prop: "Truncate", name: "Truncate", pkg: "", typ: $funcType([Duration], [Time], false)}, {prop: "Round", name: "Round", pkg: "", typ: $funcType([Duration], [Time], false)}];
	ptrType$7.methods = [{prop: "nsec", name: "nsec", pkg: "time", typ: $funcType([], [$Int32], false)}, {prop: "sec", name: "sec", pkg: "time", typ: $funcType([], [$Int64], false)}, {prop: "unixSec", name: "unixSec", pkg: "time", typ: $funcType([], [$Int64], false)}, {prop: "addSec", name: "addSec", pkg: "time", typ: $funcType([$Int64], [], false)}, {prop: "setLoc", name: "setLoc", pkg: "time", typ: $funcType([ptrType$2], [], false)}, {prop: "stripMono", name: "stripMono", pkg: "time", typ: $funcType([], [], false)}, {prop: "setMono", name: "setMono", pkg: "time", typ: $funcType([$Int64], [], false)}, {prop: "mono", name: "mono", pkg: "time", typ: $funcType([], [$Int64], false)}, {prop: "UnmarshalBinary", name: "UnmarshalBinary", pkg: "", typ: $funcType([sliceType$3], [$error], false)}, {prop: "GobDecode", name: "GobDecode", pkg: "", typ: $funcType([sliceType$3], [$error], false)}, {prop: "UnmarshalJSON", name: "UnmarshalJSON", pkg: "", typ: $funcType([sliceType$3], [$error], false)}, {prop: "UnmarshalText", name: "UnmarshalText", pkg: "", typ: $funcType([sliceType$3], [$error], false)}];
	Month.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	Weekday.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	Duration.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Nanoseconds", name: "Nanoseconds", pkg: "", typ: $funcType([], [$Int64], false)}, {prop: "Seconds", name: "Seconds", pkg: "", typ: $funcType([], [$Float64], false)}, {prop: "Minutes", name: "Minutes", pkg: "", typ: $funcType([], [$Float64], false)}, {prop: "Hours", name: "Hours", pkg: "", typ: $funcType([], [$Float64], false)}, {prop: "Truncate", name: "Truncate", pkg: "", typ: $funcType([Duration], [Duration], false)}, {prop: "Round", name: "Round", pkg: "", typ: $funcType([Duration], [Duration], false)}];
	ptrType$2.methods = [{prop: "get", name: "get", pkg: "time", typ: $funcType([], [ptrType$2], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "lookup", name: "lookup", pkg: "time", typ: $funcType([$Int64], [$String, $Int, $Bool, $Int64, $Int64], false)}, {prop: "lookupFirstZone", name: "lookupFirstZone", pkg: "time", typ: $funcType([], [$Int], false)}, {prop: "firstZoneUsed", name: "firstZoneUsed", pkg: "time", typ: $funcType([], [$Bool], false)}, {prop: "lookupName", name: "lookupName", pkg: "time", typ: $funcType([$String, $Int64], [$Int, $Bool], false)}];
	ParseError.init("", [{prop: "Layout", name: "Layout", anonymous: false, exported: true, typ: $String, tag: ""}, {prop: "Value", name: "Value", anonymous: false, exported: true, typ: $String, tag: ""}, {prop: "LayoutElem", name: "LayoutElem", anonymous: false, exported: true, typ: $String, tag: ""}, {prop: "ValueElem", name: "ValueElem", anonymous: false, exported: true, typ: $String, tag: ""}, {prop: "Message", name: "Message", anonymous: false, exported: true, typ: $String, tag: ""}]);
	Time.init("time", [{prop: "wall", name: "wall", anonymous: false, exported: false, typ: $Uint64, tag: ""}, {prop: "ext", name: "ext", anonymous: false, exported: false, typ: $Int64, tag: ""}, {prop: "loc", name: "loc", anonymous: false, exported: false, typ: ptrType$2, tag: ""}]);
	Location.init("time", [{prop: "name", name: "name", anonymous: false, exported: false, typ: $String, tag: ""}, {prop: "zone", name: "zone", anonymous: false, exported: false, typ: sliceType, tag: ""}, {prop: "tx", name: "tx", anonymous: false, exported: false, typ: sliceType$1, tag: ""}, {prop: "cacheStart", name: "cacheStart", anonymous: false, exported: false, typ: $Int64, tag: ""}, {prop: "cacheEnd", name: "cacheEnd", anonymous: false, exported: false, typ: $Int64, tag: ""}, {prop: "cacheZone", name: "cacheZone", anonymous: false, exported: false, typ: ptrType, tag: ""}]);
	zone.init("time", [{prop: "name", name: "name", anonymous: false, exported: false, typ: $String, tag: ""}, {prop: "offset", name: "offset", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "isDST", name: "isDST", anonymous: false, exported: false, typ: $Bool, tag: ""}]);
	zoneTrans.init("time", [{prop: "when", name: "when", anonymous: false, exported: false, typ: $Int64, tag: ""}, {prop: "index", name: "index", anonymous: false, exported: false, typ: $Uint8, tag: ""}, {prop: "isstd", name: "isstd", anonymous: false, exported: false, typ: $Bool, tag: ""}, {prop: "isutc", name: "isutc", anonymous: false, exported: false, typ: $Bool, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = errors.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = js.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = nosync.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = runtime.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = syscall.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		localLoc = new Location.ptr("", sliceType.nil, sliceType$1.nil, new $Int64(0, 0), new $Int64(0, 0), ptrType.nil);
		localOnce = new nosync.Once.ptr(false, false);
		zoneSources = new sliceType$2([runtime.GOROOT() + "/lib/time/zoneinfo.zip"]);
		std0x = $toNativeArray($kindInt, [260, 265, 524, 526, 528, 274]);
		longDayNames = new sliceType$2(["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"]);
		shortDayNames = new sliceType$2(["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"]);
		shortMonthNames = new sliceType$2(["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"]);
		longMonthNames = new sliceType$2(["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"]);
		atoiError = errors.New("time: invalid number");
		errBad = errors.New("bad value for field");
		errLeadingInt = errors.New("time: bad [0-9]*");
		months = $toNativeArray($kindString, ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"]);
		days = $toNativeArray($kindString, ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"]);
		daysBefore = $toNativeArray($kindInt32, [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334, 365]);
		utcLoc = new Location.ptr("UTC", sliceType.nil, sliceType$1.nil, new $Int64(0, 0), new $Int64(0, 0), ptrType.nil);
		$pkg.UTC = utcLoc;
		$pkg.Local = localLoc;
		errLocation = errors.New("time: invalid location name");
		badData = errors.New("malformed time zone information");
		$unused(new sliceType$2(["/usr/share/zoneinfo/", "/usr/share/lib/zoneinfo/", "/usr/lib/locale/TZ/", runtime.GOROOT() + "/lib/time/zoneinfo.zip"]));
		init();
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["internal/poll"] = (function() {
	var $pkg = {}, $init, errors, io, runtime, atomic, syscall, time, pollDesc, TimeoutError, fdMutex, FD, ptrType, chanType, sliceType, ptrType$1, arrayType, sliceType$1, ptrType$2, ptrType$3, ptrType$4, ptrType$5, ptrType$6, ptrType$7, sliceType$2, ptrType$8, funcType, funcType$1, ptrType$9, ptrType$10, ptrType$11, sliceType$3, ptrType$12, semWaiters, runtime_Semacquire, runtime_Semrelease, errClosing, consume, accept;
	errors = $packages["errors"];
	io = $packages["io"];
	runtime = $packages["runtime"];
	atomic = $packages["sync/atomic"];
	syscall = $packages["syscall"];
	time = $packages["time"];
	pollDesc = $pkg.pollDesc = $newType(0, $kindStruct, "poll.pollDesc", true, "internal/poll", false, function(closing_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.closing = false;
			return;
		}
		this.closing = closing_;
	});
	TimeoutError = $pkg.TimeoutError = $newType(0, $kindStruct, "poll.TimeoutError", true, "internal/poll", true, function() {
		this.$val = this;
		if (arguments.length === 0) {
			return;
		}
	});
	fdMutex = $pkg.fdMutex = $newType(0, $kindStruct, "poll.fdMutex", true, "internal/poll", false, function(state_, rsema_, wsema_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.state = new $Uint64(0, 0);
			this.rsema = 0;
			this.wsema = 0;
			return;
		}
		this.state = state_;
		this.rsema = rsema_;
		this.wsema = wsema_;
	});
	FD = $pkg.FD = $newType(0, $kindStruct, "poll.FD", true, "internal/poll", true, function(fdmu_, Sysfd_, pd_, iovecs_, csema_, IsStream_, ZeroReadIsEOF_, isFile_, isBlocking_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.fdmu = new fdMutex.ptr(new $Uint64(0, 0), 0, 0);
			this.Sysfd = 0;
			this.pd = new pollDesc.ptr(false);
			this.iovecs = ptrType$2.nil;
			this.csema = 0;
			this.IsStream = false;
			this.ZeroReadIsEOF = false;
			this.isFile = false;
			this.isBlocking = false;
			return;
		}
		this.fdmu = fdmu_;
		this.Sysfd = Sysfd_;
		this.pd = pd_;
		this.iovecs = iovecs_;
		this.csema = csema_;
		this.IsStream = IsStream_;
		this.ZeroReadIsEOF = ZeroReadIsEOF_;
		this.isFile = isFile_;
		this.isBlocking = isBlocking_;
	});
	ptrType = $ptrType($Uint32);
	chanType = $chanType($Bool, false, false);
	sliceType = $sliceType(chanType);
	ptrType$1 = $ptrType($Uint64);
	arrayType = $arrayType($Uint8, 4);
	sliceType$1 = $sliceType(syscall.Iovec);
	ptrType$2 = $ptrType(sliceType$1);
	ptrType$3 = $ptrType($Uint8);
	ptrType$4 = $ptrType(FD);
	ptrType$5 = $ptrType(pollDesc);
	ptrType$6 = $ptrType(TimeoutError);
	ptrType$7 = $ptrType(fdMutex);
	sliceType$2 = $sliceType($Uint8);
	ptrType$8 = $ptrType(syscall.Stat_t);
	funcType = $funcType([$Uintptr], [], false);
	funcType$1 = $funcType([$Uintptr], [$Bool], false);
	ptrType$9 = $ptrType(syscall.Linger);
	ptrType$10 = $ptrType(syscall.IPMreq);
	ptrType$11 = $ptrType(syscall.IPv6Mreq);
	sliceType$3 = $sliceType(sliceType$2);
	ptrType$12 = $ptrType(sliceType$3);
	pollDesc.ptr.prototype.init = function(fd) {
		var fd, pd;
		pd = this;
		return $ifaceNil;
	};
	pollDesc.prototype.init = function(fd) { return this.$val.init(fd); };
	pollDesc.ptr.prototype.close = function() {
		var pd;
		pd = this;
	};
	pollDesc.prototype.close = function() { return this.$val.close(); };
	pollDesc.ptr.prototype.evict = function() {
		var pd;
		pd = this;
		pd.closing = true;
	};
	pollDesc.prototype.evict = function() { return this.$val.evict(); };
	pollDesc.ptr.prototype.prepare = function(mode, isFile) {
		var isFile, mode, pd;
		pd = this;
		if (pd.closing) {
			return errClosing(isFile);
		}
		return $ifaceNil;
	};
	pollDesc.prototype.prepare = function(mode, isFile) { return this.$val.prepare(mode, isFile); };
	pollDesc.ptr.prototype.prepareRead = function(isFile) {
		var isFile, pd;
		pd = this;
		return pd.prepare(114, isFile);
	};
	pollDesc.prototype.prepareRead = function(isFile) { return this.$val.prepareRead(isFile); };
	pollDesc.ptr.prototype.prepareWrite = function(isFile) {
		var isFile, pd;
		pd = this;
		return pd.prepare(119, isFile);
	};
	pollDesc.prototype.prepareWrite = function(isFile) { return this.$val.prepareWrite(isFile); };
	pollDesc.ptr.prototype.wait = function(mode, isFile) {
		var isFile, mode, pd;
		pd = this;
		if (pd.closing) {
			return errClosing(isFile);
		}
		return $pkg.ErrTimeout;
	};
	pollDesc.prototype.wait = function(mode, isFile) { return this.$val.wait(mode, isFile); };
	pollDesc.ptr.prototype.waitRead = function(isFile) {
		var isFile, pd;
		pd = this;
		return pd.wait(114, isFile);
	};
	pollDesc.prototype.waitRead = function(isFile) { return this.$val.waitRead(isFile); };
	pollDesc.ptr.prototype.waitWrite = function(isFile) {
		var isFile, pd;
		pd = this;
		return pd.wait(119, isFile);
	};
	pollDesc.prototype.waitWrite = function(isFile) { return this.$val.waitWrite(isFile); };
	pollDesc.ptr.prototype.pollable = function() {
		return true;
	};
	pollDesc.prototype.pollable = function() { return this.$val.pollable(); };
	FD.ptr.prototype.SetDeadline = function(t) {
		var t;
		return $ifaceNil;
	};
	FD.prototype.SetDeadline = function(t) { return this.$val.SetDeadline(t); };
	FD.ptr.prototype.SetReadDeadline = function(t) {
		var t;
		return $ifaceNil;
	};
	FD.prototype.SetReadDeadline = function(t) { return this.$val.SetReadDeadline(t); };
	FD.ptr.prototype.SetWriteDeadline = function(t) {
		var t;
		return $ifaceNil;
	};
	FD.prototype.SetWriteDeadline = function(t) { return this.$val.SetWriteDeadline(t); };
	runtime_Semacquire = function(s) {
		var _entry, _key, _r, ch, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _entry = $f._entry; _key = $f._key; _r = $f._r; ch = $f.ch; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		/* */ if (s.$get() === 0) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (s.$get() === 0) { */ case 1:
			ch = new $Chan($Bool, 0);
			_key = s; (semWaiters || $throwRuntimeError("assignment to entry in nil map"))[ptrType.keyFor(_key)] = { k: _key, v: $append((_entry = semWaiters[ptrType.keyFor(s)], _entry !== undefined ? _entry.v : sliceType.nil), ch) };
			_r = $recv(ch); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_r[0];
		/* } */ case 2:
		s.$set(s.$get() - (1) >>> 0);
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: runtime_Semacquire }; } $f._entry = _entry; $f._key = _key; $f._r = _r; $f.ch = ch; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	runtime_Semrelease = function(s) {
		var _entry, _key, ch, s, w, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _entry = $f._entry; _key = $f._key; ch = $f.ch; s = $f.s; w = $f.w; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s.$set(s.$get() + (1) >>> 0);
		w = (_entry = semWaiters[ptrType.keyFor(s)], _entry !== undefined ? _entry.v : sliceType.nil);
		if (w.$length === 0) {
			$s = -1; return;
		}
		ch = (0 >= w.$length ? ($throwRuntimeError("index out of range"), undefined) : w.$array[w.$offset + 0]);
		w = $subslice(w, 1);
		_key = s; (semWaiters || $throwRuntimeError("assignment to entry in nil map"))[ptrType.keyFor(_key)] = { k: _key, v: w };
		if (w.$length === 0) {
			delete semWaiters[ptrType.keyFor(s)];
		}
		$r = $send(ch, true); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: runtime_Semrelease }; } $f._entry = _entry; $f._key = _key; $f.ch = ch; $f.s = s; $f.w = w; $f.$s = $s; $f.$r = $r; return $f;
	};
	errClosing = function(isFile) {
		var isFile;
		if (isFile) {
			return $pkg.ErrFileClosing;
		}
		return $pkg.ErrNetClosing;
	};
	TimeoutError.ptr.prototype.Error = function() {
		var e;
		e = this;
		return "i/o timeout";
	};
	TimeoutError.prototype.Error = function() { return this.$val.Error(); };
	TimeoutError.ptr.prototype.Timeout = function() {
		var e;
		e = this;
		return true;
	};
	TimeoutError.prototype.Timeout = function() { return this.$val.Timeout(); };
	TimeoutError.ptr.prototype.Temporary = function() {
		var e;
		e = this;
		return true;
	};
	TimeoutError.prototype.Temporary = function() { return this.$val.Temporary(); };
	consume = function(v, n) {
		var ln0, n, v, x, x$1, x$2, x$3;
		while (true) {
			if (!(v.$get().$length > 0)) { break; }
			ln0 = (new $Int64(0, (x = v.$get(), (0 >= x.$length ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + 0])).$length));
			if ((ln0.$high > n.$high || (ln0.$high === n.$high && ln0.$low > n.$low))) {
				(x$2 = v.$get(), (0 >= x$2.$length ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + 0] = $subslice((x$1 = v.$get(), (0 >= x$1.$length ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + 0])), $flatten64(n))));
				return;
			}
			n = (x$3 = ln0, new $Int64(n.$high - x$3.$high, n.$low - x$3.$low));
			v.$set($subslice((v.$get()), 1));
		}
	};
	fdMutex.ptr.prototype.incref = function() {
		var mu, new$1, old, x, x$1;
		mu = this;
		while (true) {
			old = atomic.LoadUint64((mu.$ptr_state || (mu.$ptr_state = new ptrType$1(function() { return this.$target.state; }, function($v) { this.$target.state = $v; }, mu))));
			if (!((x = new $Uint64(old.$high & 0, (old.$low & 1) >>> 0), (x.$high === 0 && x.$low === 0)))) {
				return false;
			}
			new$1 = new $Uint64(old.$high + 0, old.$low + 8);
			if ((x$1 = new $Uint64(new$1.$high & 0, (new$1.$low & 8388600) >>> 0), (x$1.$high === 0 && x$1.$low === 0))) {
				$panic(new $String("inconsistent poll.fdMutex"));
			}
			if (atomic.CompareAndSwapUint64((mu.$ptr_state || (mu.$ptr_state = new ptrType$1(function() { return this.$target.state; }, function($v) { this.$target.state = $v; }, mu))), old, new$1)) {
				return true;
			}
		}
	};
	fdMutex.prototype.incref = function() { return this.$val.incref(); };
	fdMutex.ptr.prototype.increfAndClose = function() {
		var mu, new$1, old, x, x$1, x$2, x$3, x$4, x$5, x$6, x$7, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; mu = $f.mu; new$1 = $f.new$1; old = $f.old; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; x$6 = $f.x$6; x$7 = $f.x$7; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		mu = this;
		/* while (true) { */ case 1:
			old = atomic.LoadUint64((mu.$ptr_state || (mu.$ptr_state = new ptrType$1(function() { return this.$target.state; }, function($v) { this.$target.state = $v; }, mu))));
			if (!((x = new $Uint64(old.$high & 0, (old.$low & 1) >>> 0), (x.$high === 0 && x.$low === 0)))) {
				$s = -1; return false;
			}
			new$1 = (x$1 = new $Uint64(old.$high | 0, (old.$low | 1) >>> 0), new $Uint64(x$1.$high + 0, x$1.$low + 8));
			if ((x$2 = new $Uint64(new$1.$high & 0, (new$1.$low & 8388600) >>> 0), (x$2.$high === 0 && x$2.$low === 0))) {
				$panic(new $String("inconsistent poll.fdMutex"));
			}
			new$1 = (x$3 = new $Uint64(2147483647, 4286578688), new $Uint64(new$1.$high & ~x$3.$high, (new$1.$low & ~x$3.$low) >>> 0));
			/* */ if (atomic.CompareAndSwapUint64((mu.$ptr_state || (mu.$ptr_state = new ptrType$1(function() { return this.$target.state; }, function($v) { this.$target.state = $v; }, mu))), old, new$1)) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (atomic.CompareAndSwapUint64((mu.$ptr_state || (mu.$ptr_state = new ptrType$1(function() { return this.$target.state; }, function($v) { this.$target.state = $v; }, mu))), old, new$1)) { */ case 3:
				/* while (true) { */ case 5:
					/* if (!(!((x$4 = new $Uint64(old.$high & 2047, (old.$low & 4286578688) >>> 0), (x$4.$high === 0 && x$4.$low === 0))))) { break; } */ if(!(!((x$4 = new $Uint64(old.$high & 2047, (old.$low & 4286578688) >>> 0), (x$4.$high === 0 && x$4.$low === 0))))) { $s = 6; continue; }
					old = (x$5 = new $Uint64(0, 8388608), new $Uint64(old.$high - x$5.$high, old.$low - x$5.$low));
					$r = runtime_Semrelease((mu.$ptr_rsema || (mu.$ptr_rsema = new ptrType(function() { return this.$target.rsema; }, function($v) { this.$target.rsema = $v; }, mu)))); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ $s = 5; continue; case 6:
				/* while (true) { */ case 8:
					/* if (!(!((x$6 = new $Uint64(old.$high & 2147481600, (old.$low & 0) >>> 0), (x$6.$high === 0 && x$6.$low === 0))))) { break; } */ if(!(!((x$6 = new $Uint64(old.$high & 2147481600, (old.$low & 0) >>> 0), (x$6.$high === 0 && x$6.$low === 0))))) { $s = 9; continue; }
					old = (x$7 = new $Uint64(2048, 0), new $Uint64(old.$high - x$7.$high, old.$low - x$7.$low));
					$r = runtime_Semrelease((mu.$ptr_wsema || (mu.$ptr_wsema = new ptrType(function() { return this.$target.wsema; }, function($v) { this.$target.wsema = $v; }, mu)))); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ $s = 8; continue; case 9:
				$s = -1; return true;
			/* } */ case 4:
		/* } */ $s = 1; continue; case 2:
		$s = -1; return false;
		/* */ } return; } if ($f === undefined) { $f = { $blk: fdMutex.ptr.prototype.increfAndClose }; } $f.mu = mu; $f.new$1 = new$1; $f.old = old; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.x$6 = x$6; $f.x$7 = x$7; $f.$s = $s; $f.$r = $r; return $f;
	};
	fdMutex.prototype.increfAndClose = function() { return this.$val.increfAndClose(); };
	fdMutex.ptr.prototype.decref = function() {
		var mu, new$1, old, x, x$1;
		mu = this;
		while (true) {
			old = atomic.LoadUint64((mu.$ptr_state || (mu.$ptr_state = new ptrType$1(function() { return this.$target.state; }, function($v) { this.$target.state = $v; }, mu))));
			if ((x = new $Uint64(old.$high & 0, (old.$low & 8388600) >>> 0), (x.$high === 0 && x.$low === 0))) {
				$panic(new $String("inconsistent poll.fdMutex"));
			}
			new$1 = new $Uint64(old.$high - 0, old.$low - 8);
			if (atomic.CompareAndSwapUint64((mu.$ptr_state || (mu.$ptr_state = new ptrType$1(function() { return this.$target.state; }, function($v) { this.$target.state = $v; }, mu))), old, new$1)) {
				return (x$1 = new $Uint64(new$1.$high & 0, (new$1.$low & 8388601) >>> 0), (x$1.$high === 0 && x$1.$low === 1));
			}
		}
	};
	fdMutex.prototype.decref = function() { return this.$val.decref(); };
	fdMutex.ptr.prototype.rwlock = function(read) {
		var _tmp, _tmp$1, _tmp$2, mu, mutexBit, mutexMask, mutexSema, mutexWait, new$1, old, read, x, x$1, x$2, x$3, x$4, x$5, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; mu = $f.mu; mutexBit = $f.mutexBit; mutexMask = $f.mutexMask; mutexSema = $f.mutexSema; mutexWait = $f.mutexWait; new$1 = $f.new$1; old = $f.old; read = $f.read; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		mu = this;
		_tmp = new $Uint64(0, 0);
		_tmp$1 = new $Uint64(0, 0);
		_tmp$2 = new $Uint64(0, 0);
		mutexBit = _tmp;
		mutexWait = _tmp$1;
		mutexMask = _tmp$2;
		mutexSema = ptrType.nil;
		if (read) {
			mutexBit = new $Uint64(0, 2);
			mutexWait = new $Uint64(0, 8388608);
			mutexMask = new $Uint64(2047, 4286578688);
			mutexSema = (mu.$ptr_rsema || (mu.$ptr_rsema = new ptrType(function() { return this.$target.rsema; }, function($v) { this.$target.rsema = $v; }, mu)));
		} else {
			mutexBit = new $Uint64(0, 4);
			mutexWait = new $Uint64(2048, 0);
			mutexMask = new $Uint64(2147481600, 0);
			mutexSema = (mu.$ptr_wsema || (mu.$ptr_wsema = new ptrType(function() { return this.$target.wsema; }, function($v) { this.$target.wsema = $v; }, mu)));
		}
		/* while (true) { */ case 1:
			old = atomic.LoadUint64((mu.$ptr_state || (mu.$ptr_state = new ptrType$1(function() { return this.$target.state; }, function($v) { this.$target.state = $v; }, mu))));
			if (!((x = new $Uint64(old.$high & 0, (old.$low & 1) >>> 0), (x.$high === 0 && x.$low === 0)))) {
				$s = -1; return false;
			}
			new$1 = new $Uint64(0, 0);
			if ((x$1 = new $Uint64(old.$high & mutexBit.$high, (old.$low & mutexBit.$low) >>> 0), (x$1.$high === 0 && x$1.$low === 0))) {
				new$1 = (x$2 = new $Uint64(old.$high | mutexBit.$high, (old.$low | mutexBit.$low) >>> 0), new $Uint64(x$2.$high + 0, x$2.$low + 8));
				if ((x$3 = new $Uint64(new$1.$high & 0, (new$1.$low & 8388600) >>> 0), (x$3.$high === 0 && x$3.$low === 0))) {
					$panic(new $String("inconsistent poll.fdMutex"));
				}
			} else {
				new$1 = new $Uint64(old.$high + mutexWait.$high, old.$low + mutexWait.$low);
				if ((x$4 = new $Uint64(new$1.$high & mutexMask.$high, (new$1.$low & mutexMask.$low) >>> 0), (x$4.$high === 0 && x$4.$low === 0))) {
					$panic(new $String("inconsistent poll.fdMutex"));
				}
			}
			/* */ if (atomic.CompareAndSwapUint64((mu.$ptr_state || (mu.$ptr_state = new ptrType$1(function() { return this.$target.state; }, function($v) { this.$target.state = $v; }, mu))), old, new$1)) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (atomic.CompareAndSwapUint64((mu.$ptr_state || (mu.$ptr_state = new ptrType$1(function() { return this.$target.state; }, function($v) { this.$target.state = $v; }, mu))), old, new$1)) { */ case 3:
				if ((x$5 = new $Uint64(old.$high & mutexBit.$high, (old.$low & mutexBit.$low) >>> 0), (x$5.$high === 0 && x$5.$low === 0))) {
					$s = -1; return true;
				}
				$r = runtime_Semacquire(mutexSema); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 4:
		/* } */ $s = 1; continue; case 2:
		$s = -1; return false;
		/* */ } return; } if ($f === undefined) { $f = { $blk: fdMutex.ptr.prototype.rwlock }; } $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f.mu = mu; $f.mutexBit = mutexBit; $f.mutexMask = mutexMask; $f.mutexSema = mutexSema; $f.mutexWait = mutexWait; $f.new$1 = new$1; $f.old = old; $f.read = read; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.$s = $s; $f.$r = $r; return $f;
	};
	fdMutex.prototype.rwlock = function(read) { return this.$val.rwlock(read); };
	fdMutex.ptr.prototype.rwunlock = function(read) {
		var _tmp, _tmp$1, _tmp$2, mu, mutexBit, mutexMask, mutexSema, mutexWait, new$1, old, read, x, x$1, x$2, x$3, x$4, x$5, x$6, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; mu = $f.mu; mutexBit = $f.mutexBit; mutexMask = $f.mutexMask; mutexSema = $f.mutexSema; mutexWait = $f.mutexWait; new$1 = $f.new$1; old = $f.old; read = $f.read; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; x$6 = $f.x$6; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		mu = this;
		_tmp = new $Uint64(0, 0);
		_tmp$1 = new $Uint64(0, 0);
		_tmp$2 = new $Uint64(0, 0);
		mutexBit = _tmp;
		mutexWait = _tmp$1;
		mutexMask = _tmp$2;
		mutexSema = ptrType.nil;
		if (read) {
			mutexBit = new $Uint64(0, 2);
			mutexWait = new $Uint64(0, 8388608);
			mutexMask = new $Uint64(2047, 4286578688);
			mutexSema = (mu.$ptr_rsema || (mu.$ptr_rsema = new ptrType(function() { return this.$target.rsema; }, function($v) { this.$target.rsema = $v; }, mu)));
		} else {
			mutexBit = new $Uint64(0, 4);
			mutexWait = new $Uint64(2048, 0);
			mutexMask = new $Uint64(2147481600, 0);
			mutexSema = (mu.$ptr_wsema || (mu.$ptr_wsema = new ptrType(function() { return this.$target.wsema; }, function($v) { this.$target.wsema = $v; }, mu)));
		}
		/* while (true) { */ case 1:
			old = atomic.LoadUint64((mu.$ptr_state || (mu.$ptr_state = new ptrType$1(function() { return this.$target.state; }, function($v) { this.$target.state = $v; }, mu))));
			if ((x = new $Uint64(old.$high & mutexBit.$high, (old.$low & mutexBit.$low) >>> 0), (x.$high === 0 && x.$low === 0)) || (x$1 = new $Uint64(old.$high & 0, (old.$low & 8388600) >>> 0), (x$1.$high === 0 && x$1.$low === 0))) {
				$panic(new $String("inconsistent poll.fdMutex"));
			}
			new$1 = (x$2 = new $Uint64(old.$high & ~mutexBit.$high, (old.$low & ~mutexBit.$low) >>> 0), new $Uint64(x$2.$high - 0, x$2.$low - 8));
			if (!((x$3 = new $Uint64(old.$high & mutexMask.$high, (old.$low & mutexMask.$low) >>> 0), (x$3.$high === 0 && x$3.$low === 0)))) {
				new$1 = (x$4 = mutexWait, new $Uint64(new$1.$high - x$4.$high, new$1.$low - x$4.$low));
			}
			/* */ if (atomic.CompareAndSwapUint64((mu.$ptr_state || (mu.$ptr_state = new ptrType$1(function() { return this.$target.state; }, function($v) { this.$target.state = $v; }, mu))), old, new$1)) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (atomic.CompareAndSwapUint64((mu.$ptr_state || (mu.$ptr_state = new ptrType$1(function() { return this.$target.state; }, function($v) { this.$target.state = $v; }, mu))), old, new$1)) { */ case 3:
				/* */ if (!((x$5 = new $Uint64(old.$high & mutexMask.$high, (old.$low & mutexMask.$low) >>> 0), (x$5.$high === 0 && x$5.$low === 0)))) { $s = 5; continue; }
				/* */ $s = 6; continue;
				/* if (!((x$5 = new $Uint64(old.$high & mutexMask.$high, (old.$low & mutexMask.$low) >>> 0), (x$5.$high === 0 && x$5.$low === 0)))) { */ case 5:
					$r = runtime_Semrelease(mutexSema); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 6:
				$s = -1; return (x$6 = new $Uint64(new$1.$high & 0, (new$1.$low & 8388601) >>> 0), (x$6.$high === 0 && x$6.$low === 1));
			/* } */ case 4:
		/* } */ $s = 1; continue; case 2:
		$s = -1; return false;
		/* */ } return; } if ($f === undefined) { $f = { $blk: fdMutex.ptr.prototype.rwunlock }; } $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f.mu = mu; $f.mutexBit = mutexBit; $f.mutexMask = mutexMask; $f.mutexSema = mutexSema; $f.mutexWait = mutexWait; $f.new$1 = new$1; $f.old = old; $f.read = read; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.x$6 = x$6; $f.$s = $s; $f.$r = $r; return $f;
	};
	fdMutex.prototype.rwunlock = function(read) { return this.$val.rwunlock(read); };
	FD.ptr.prototype.incref = function() {
		var fd;
		fd = this;
		if (!fd.fdmu.incref()) {
			return errClosing(fd.isFile);
		}
		return $ifaceNil;
	};
	FD.prototype.incref = function() { return this.$val.incref(); };
	FD.ptr.prototype.decref = function() {
		var _r, fd, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; fd = $f.fd; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		fd = this;
		/* */ if (fd.fdmu.decref()) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (fd.fdmu.decref()) { */ case 1:
			_r = fd.destroy(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$s = -1; return _r;
		/* } */ case 2:
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: FD.ptr.prototype.decref }; } $f._r = _r; $f.fd = fd; $f.$s = $s; $f.$r = $r; return $f;
	};
	FD.prototype.decref = function() { return this.$val.decref(); };
	FD.ptr.prototype.readLock = function() {
		var _r, fd, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; fd = $f.fd; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		fd = this;
		_r = fd.fdmu.rwlock(true); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ if (!_r) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!_r) { */ case 1:
			$s = -1; return errClosing(fd.isFile);
		/* } */ case 2:
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: FD.ptr.prototype.readLock }; } $f._r = _r; $f.fd = fd; $f.$s = $s; $f.$r = $r; return $f;
	};
	FD.prototype.readLock = function() { return this.$val.readLock(); };
	FD.ptr.prototype.readUnlock = function() {
		var _r, _r$1, fd, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; fd = $f.fd; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		fd = this;
		_r = fd.fdmu.rwunlock(true); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ if (_r) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (_r) { */ case 1:
			_r$1 = fd.destroy(); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_r$1;
		/* } */ case 2:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: FD.ptr.prototype.readUnlock }; } $f._r = _r; $f._r$1 = _r$1; $f.fd = fd; $f.$s = $s; $f.$r = $r; return $f;
	};
	FD.prototype.readUnlock = function() { return this.$val.readUnlock(); };
	FD.ptr.prototype.writeLock = function() {
		var _r, fd, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; fd = $f.fd; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		fd = this;
		_r = fd.fdmu.rwlock(false); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ if (!_r) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!_r) { */ case 1:
			$s = -1; return errClosing(fd.isFile);
		/* } */ case 2:
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: FD.ptr.prototype.writeLock }; } $f._r = _r; $f.fd = fd; $f.$s = $s; $f.$r = $r; return $f;
	};
	FD.prototype.writeLock = function() { return this.$val.writeLock(); };
	FD.ptr.prototype.writeUnlock = function() {
		var _r, _r$1, fd, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; fd = $f.fd; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		fd = this;
		_r = fd.fdmu.rwunlock(false); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ if (_r) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (_r) { */ case 1:
			_r$1 = fd.destroy(); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_r$1;
		/* } */ case 2:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: FD.ptr.prototype.writeUnlock }; } $f._r = _r; $f._r$1 = _r$1; $f.fd = fd; $f.$s = $s; $f.$r = $r; return $f;
	};
	FD.prototype.writeUnlock = function() { return this.$val.writeUnlock(); };
	FD.ptr.prototype.eofError = function(n, err) {
		var err, fd, n;
		fd = this;
		if ((n === 0) && $interfaceIsEqual(err, $ifaceNil) && fd.ZeroReadIsEOF) {
			return io.EOF;
		}
		return err;
	};
	FD.prototype.eofError = function(n, err) { return this.$val.eofError(n, err); };
	FD.ptr.prototype.Fchmod = function(mode) {
		var err, fd, mode, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; err = $f.err; fd = $f.fd; mode = $f.mode; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		fd = this;
		err = fd.incref();
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
		}
		$deferred.push([$methodVal(fd, "decref"), []]);
		$s = -1; return syscall.Fchmod(fd.Sysfd, mode);
		/* */ } return; } } catch(err) { $err = err; $s = -1; return $ifaceNil; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: FD.ptr.prototype.Fchmod }; } $f.err = err; $f.fd = fd; $f.mode = mode; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	FD.prototype.Fchmod = function(mode) { return this.$val.Fchmod(mode); };
	FD.ptr.prototype.Fchown = function(uid, gid) {
		var err, fd, gid, uid, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; err = $f.err; fd = $f.fd; gid = $f.gid; uid = $f.uid; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		fd = this;
		err = fd.incref();
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
		}
		$deferred.push([$methodVal(fd, "decref"), []]);
		$s = -1; return syscall.Fchown(fd.Sysfd, uid, gid);
		/* */ } return; } } catch(err) { $err = err; $s = -1; return $ifaceNil; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: FD.ptr.prototype.Fchown }; } $f.err = err; $f.fd = fd; $f.gid = gid; $f.uid = uid; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	FD.prototype.Fchown = function(uid, gid) { return this.$val.Fchown(uid, gid); };
	FD.ptr.prototype.Ftruncate = function(size) {
		var err, fd, size, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; err = $f.err; fd = $f.fd; size = $f.size; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		fd = this;
		err = fd.incref();
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
		}
		$deferred.push([$methodVal(fd, "decref"), []]);
		$s = -1; return syscall.Ftruncate(fd.Sysfd, size);
		/* */ } return; } } catch(err) { $err = err; $s = -1; return $ifaceNil; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: FD.ptr.prototype.Ftruncate }; } $f.err = err; $f.fd = fd; $f.size = size; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	FD.prototype.Ftruncate = function(size) { return this.$val.Ftruncate(size); };
	FD.ptr.prototype.Fsync = function() {
		var err, fd, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; err = $f.err; fd = $f.fd; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		fd = this;
		err = fd.incref();
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
		}
		$deferred.push([$methodVal(fd, "decref"), []]);
		$s = -1; return syscall.Fsync(fd.Sysfd);
		/* */ } return; } } catch(err) { $err = err; $s = -1; return $ifaceNil; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: FD.ptr.prototype.Fsync }; } $f.err = err; $f.fd = fd; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	FD.prototype.Fsync = function() { return this.$val.Fsync(); };
	FD.ptr.prototype.Init = function(net, pollable) {
		var fd, net, pollable;
		fd = this;
		if (net === "file") {
			fd.isFile = true;
		}
		if (!pollable) {
			fd.isBlocking = true;
			return $ifaceNil;
		}
		return fd.pd.init(fd);
	};
	FD.prototype.Init = function(net, pollable) { return this.$val.Init(net, pollable); };
	FD.ptr.prototype.destroy = function() {
		var _r, err, fd, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; err = $f.err; fd = $f.fd; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		fd = this;
		fd.pd.close();
		_r = $pkg.CloseFunc(fd.Sysfd); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		err = _r;
		fd.Sysfd = -1;
		$r = runtime_Semrelease((fd.$ptr_csema || (fd.$ptr_csema = new ptrType(function() { return this.$target.csema; }, function($v) { this.$target.csema = $v; }, fd)))); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return err;
		/* */ } return; } if ($f === undefined) { $f = { $blk: FD.ptr.prototype.destroy }; } $f._r = _r; $f.err = err; $f.fd = fd; $f.$s = $s; $f.$r = $r; return $f;
	};
	FD.prototype.destroy = function() { return this.$val.destroy(); };
	FD.ptr.prototype.Close = function() {
		var _r, _r$1, err, fd, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; err = $f.err; fd = $f.fd; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		fd = this;
		_r = fd.fdmu.increfAndClose(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ if (!_r) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!_r) { */ case 1:
			$s = -1; return errClosing(fd.isFile);
		/* } */ case 2:
		fd.pd.evict();
		_r$1 = fd.decref(); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		err = _r$1;
		/* */ if (!fd.isBlocking) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if (!fd.isBlocking) { */ case 5:
			$r = runtime_Semacquire((fd.$ptr_csema || (fd.$ptr_csema = new ptrType(function() { return this.$target.csema; }, function($v) { this.$target.csema = $v; }, fd)))); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 6:
		$s = -1; return err;
		/* */ } return; } if ($f === undefined) { $f = { $blk: FD.ptr.prototype.Close }; } $f._r = _r; $f._r$1 = _r$1; $f.err = err; $f.fd = fd; $f.$s = $s; $f.$r = $r; return $f;
	};
	FD.prototype.Close = function() { return this.$val.Close(); };
	FD.ptr.prototype.Shutdown = function(how) {
		var err, fd, how, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; err = $f.err; fd = $f.fd; how = $f.how; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		fd = this;
		err = fd.incref();
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
		}
		$deferred.push([$methodVal(fd, "decref"), []]);
		$s = -1; return syscall.Shutdown(fd.Sysfd, how);
		/* */ } return; } } catch(err) { $err = err; $s = -1; return $ifaceNil; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: FD.ptr.prototype.Shutdown }; } $f.err = err; $f.fd = fd; $f.how = how; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	FD.prototype.Shutdown = function(how) { return this.$val.Shutdown(how); };
	FD.ptr.prototype.SetBlocking = function() {
		var err, fd, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; err = $f.err; fd = $f.fd; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		fd = this;
		err = fd.incref();
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
		}
		$deferred.push([$methodVal(fd, "decref"), []]);
		fd.isBlocking = true;
		$s = -1; return syscall.SetNonblock(fd.Sysfd, false);
		/* */ } return; } } catch(err) { $err = err; $s = -1; return $ifaceNil; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: FD.ptr.prototype.SetBlocking }; } $f.err = err; $f.fd = fd; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	FD.prototype.SetBlocking = function() { return this.$val.SetBlocking(); };
	FD.ptr.prototype.Read = function(p) {
		var _r, _tuple, err, err$1, err$2, fd, n, p, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; err = $f.err; err$1 = $f.err$1; err$2 = $f.err$2; fd = $f.fd; n = $f.n; p = $f.p; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		fd = this;
		_r = fd.readLock(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		err = _r;
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [0, err];
		}
		$deferred.push([$methodVal(fd, "readUnlock"), []]);
		if (p.$length === 0) {
			$s = -1; return [0, $ifaceNil];
		}
		err$1 = fd.pd.prepareRead(fd.isFile);
		if (!($interfaceIsEqual(err$1, $ifaceNil))) {
			$s = -1; return [0, err$1];
		}
		if (fd.IsStream && p.$length > 1073741824) {
			p = $subslice(p, 0, 1073741824);
		}
		while (true) {
			_tuple = syscall.Read(fd.Sysfd, p);
			n = _tuple[0];
			err$2 = _tuple[1];
			if (!($interfaceIsEqual(err$2, $ifaceNil))) {
				n = 0;
				if ($interfaceIsEqual(err$2, new syscall.Errno(35)) && fd.pd.pollable()) {
					err$2 = fd.pd.waitRead(fd.isFile);
					if ($interfaceIsEqual(err$2, $ifaceNil)) {
						continue;
					}
				}
				if (false && $interfaceIsEqual(err$2, new syscall.Errno(4))) {
					continue;
				}
			}
			err$2 = fd.eofError(n, err$2);
			$s = -1; return [n, err$2];
		}
		$s = -1; return [0, $ifaceNil];
		/* */ } return; } } catch(err) { $err = err; $s = -1; return [0, $ifaceNil]; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: FD.ptr.prototype.Read }; } $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.err$1 = err$1; $f.err$2 = err$2; $f.fd = fd; $f.n = n; $f.p = p; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	FD.prototype.Read = function(p) { return this.$val.Read(p); };
	FD.ptr.prototype.Pread = function(p, off) {
		var _r, _tuple, err, err$1, fd, n, off, p, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; err = $f.err; err$1 = $f.err$1; fd = $f.fd; n = $f.n; off = $f.off; p = $f.p; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		fd = this;
		err = fd.incref();
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [0, err];
		}
		if (fd.IsStream && p.$length > 1073741824) {
			p = $subslice(p, 0, 1073741824);
		}
		_tuple = syscall.Pread(fd.Sysfd, p, off);
		n = _tuple[0];
		err$1 = _tuple[1];
		if (!($interfaceIsEqual(err$1, $ifaceNil))) {
			n = 0;
		}
		_r = fd.decref(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r;
		err$1 = fd.eofError(n, err$1);
		$s = -1; return [n, err$1];
		/* */ } return; } if ($f === undefined) { $f = { $blk: FD.ptr.prototype.Pread }; } $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.err$1 = err$1; $f.fd = fd; $f.n = n; $f.off = off; $f.p = p; $f.$s = $s; $f.$r = $r; return $f;
	};
	FD.prototype.Pread = function(p, off) { return this.$val.Pread(p, off); };
	FD.ptr.prototype.ReadFrom = function(p) {
		var _r, _tuple, err, err$1, err$2, fd, n, p, sa, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; err = $f.err; err$1 = $f.err$1; err$2 = $f.err$2; fd = $f.fd; n = $f.n; p = $f.p; sa = $f.sa; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		fd = this;
		_r = fd.readLock(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		err = _r;
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [0, $ifaceNil, err];
		}
		$deferred.push([$methodVal(fd, "readUnlock"), []]);
		err$1 = fd.pd.prepareRead(fd.isFile);
		if (!($interfaceIsEqual(err$1, $ifaceNil))) {
			$s = -1; return [0, $ifaceNil, err$1];
		}
		while (true) {
			_tuple = syscall.Recvfrom(fd.Sysfd, p, 0);
			n = _tuple[0];
			sa = _tuple[1];
			err$2 = _tuple[2];
			if (!($interfaceIsEqual(err$2, $ifaceNil))) {
				n = 0;
				if ($interfaceIsEqual(err$2, new syscall.Errno(35)) && fd.pd.pollable()) {
					err$2 = fd.pd.waitRead(fd.isFile);
					if ($interfaceIsEqual(err$2, $ifaceNil)) {
						continue;
					}
				}
			}
			err$2 = fd.eofError(n, err$2);
			$s = -1; return [n, sa, err$2];
		}
		$s = -1; return [0, $ifaceNil, $ifaceNil];
		/* */ } return; } } catch(err) { $err = err; $s = -1; return [0, $ifaceNil, $ifaceNil]; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: FD.ptr.prototype.ReadFrom }; } $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.err$1 = err$1; $f.err$2 = err$2; $f.fd = fd; $f.n = n; $f.p = p; $f.sa = sa; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	FD.prototype.ReadFrom = function(p) { return this.$val.ReadFrom(p); };
	FD.ptr.prototype.ReadMsg = function(p, oob) {
		var _r, _tuple, err, err$1, err$2, fd, flags, n, oob, oobn, p, sa, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; err = $f.err; err$1 = $f.err$1; err$2 = $f.err$2; fd = $f.fd; flags = $f.flags; n = $f.n; oob = $f.oob; oobn = $f.oobn; p = $f.p; sa = $f.sa; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		fd = this;
		_r = fd.readLock(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		err = _r;
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [0, 0, 0, $ifaceNil, err];
		}
		$deferred.push([$methodVal(fd, "readUnlock"), []]);
		err$1 = fd.pd.prepareRead(fd.isFile);
		if (!($interfaceIsEqual(err$1, $ifaceNil))) {
			$s = -1; return [0, 0, 0, $ifaceNil, err$1];
		}
		while (true) {
			_tuple = syscall.Recvmsg(fd.Sysfd, p, oob, 0);
			n = _tuple[0];
			oobn = _tuple[1];
			flags = _tuple[2];
			sa = _tuple[3];
			err$2 = _tuple[4];
			if (!($interfaceIsEqual(err$2, $ifaceNil))) {
				if ($interfaceIsEqual(err$2, new syscall.Errno(35)) && fd.pd.pollable()) {
					err$2 = fd.pd.waitRead(fd.isFile);
					if ($interfaceIsEqual(err$2, $ifaceNil)) {
						continue;
					}
				}
			}
			err$2 = fd.eofError(n, err$2);
			$s = -1; return [n, oobn, flags, sa, err$2];
		}
		$s = -1; return [0, 0, 0, $ifaceNil, $ifaceNil];
		/* */ } return; } } catch(err) { $err = err; $s = -1; return [0, 0, 0, $ifaceNil, $ifaceNil]; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: FD.ptr.prototype.ReadMsg }; } $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.err$1 = err$1; $f.err$2 = err$2; $f.fd = fd; $f.flags = flags; $f.n = n; $f.oob = oob; $f.oobn = oobn; $f.p = p; $f.sa = sa; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	FD.prototype.ReadMsg = function(p, oob) { return this.$val.ReadMsg(p, oob); };
	FD.ptr.prototype.Write = function(p) {
		var _r, _tuple, err, err$1, err$2, fd, max, n, nn, p, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; err = $f.err; err$1 = $f.err$1; err$2 = $f.err$2; fd = $f.fd; max = $f.max; n = $f.n; nn = $f.nn; p = $f.p; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		fd = this;
		_r = fd.writeLock(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		err = _r;
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [0, err];
		}
		$deferred.push([$methodVal(fd, "writeUnlock"), []]);
		err$1 = fd.pd.prepareWrite(fd.isFile);
		if (!($interfaceIsEqual(err$1, $ifaceNil))) {
			$s = -1; return [0, err$1];
		}
		nn = 0;
		while (true) {
			max = p.$length;
			if (fd.IsStream && (max - nn >> 0) > 1073741824) {
				max = nn + 1073741824 >> 0;
			}
			_tuple = syscall.Write(fd.Sysfd, $subslice(p, nn, max));
			n = _tuple[0];
			err$2 = _tuple[1];
			if (n > 0) {
				nn = nn + (n) >> 0;
			}
			if (nn === p.$length) {
				$s = -1; return [nn, err$2];
			}
			if ($interfaceIsEqual(err$2, new syscall.Errno(35)) && fd.pd.pollable()) {
				err$2 = fd.pd.waitWrite(fd.isFile);
				if ($interfaceIsEqual(err$2, $ifaceNil)) {
					continue;
				}
			}
			if (!($interfaceIsEqual(err$2, $ifaceNil))) {
				$s = -1; return [nn, err$2];
			}
			if (n === 0) {
				$s = -1; return [nn, io.ErrUnexpectedEOF];
			}
		}
		$s = -1; return [0, $ifaceNil];
		/* */ } return; } } catch(err) { $err = err; $s = -1; return [0, $ifaceNil]; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: FD.ptr.prototype.Write }; } $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.err$1 = err$1; $f.err$2 = err$2; $f.fd = fd; $f.max = max; $f.n = n; $f.nn = nn; $f.p = p; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	FD.prototype.Write = function(p) { return this.$val.Write(p); };
	FD.ptr.prototype.Pwrite = function(p, off) {
		var _tuple, err, err$1, fd, max, n, nn, off, p, x, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _tuple = $f._tuple; err = $f.err; err$1 = $f.err$1; fd = $f.fd; max = $f.max; n = $f.n; nn = $f.nn; off = $f.off; p = $f.p; x = $f.x; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		fd = this;
		err = fd.incref();
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [0, err];
		}
		$deferred.push([$methodVal(fd, "decref"), []]);
		nn = 0;
		while (true) {
			max = p.$length;
			if (fd.IsStream && (max - nn >> 0) > 1073741824) {
				max = nn + 1073741824 >> 0;
			}
			_tuple = syscall.Pwrite(fd.Sysfd, $subslice(p, nn, max), (x = (new $Int64(0, nn)), new $Int64(off.$high + x.$high, off.$low + x.$low)));
			n = _tuple[0];
			err$1 = _tuple[1];
			if (n > 0) {
				nn = nn + (n) >> 0;
			}
			if (nn === p.$length) {
				$s = -1; return [nn, err$1];
			}
			if (!($interfaceIsEqual(err$1, $ifaceNil))) {
				$s = -1; return [nn, err$1];
			}
			if (n === 0) {
				$s = -1; return [nn, io.ErrUnexpectedEOF];
			}
		}
		$s = -1; return [0, $ifaceNil];
		/* */ } return; } } catch(err) { $err = err; $s = -1; return [0, $ifaceNil]; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: FD.ptr.prototype.Pwrite }; } $f._tuple = _tuple; $f.err = err; $f.err$1 = err$1; $f.fd = fd; $f.max = max; $f.n = n; $f.nn = nn; $f.off = off; $f.p = p; $f.x = x; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	FD.prototype.Pwrite = function(p, off) { return this.$val.Pwrite(p, off); };
	FD.ptr.prototype.WriteTo = function(p, sa) {
		var _r, _r$1, err, err$1, err$2, fd, p, sa, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; err = $f.err; err$1 = $f.err$1; err$2 = $f.err$2; fd = $f.fd; p = $f.p; sa = $f.sa; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		fd = this;
		_r = fd.writeLock(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		err = _r;
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [0, err];
		}
		$deferred.push([$methodVal(fd, "writeUnlock"), []]);
		err$1 = fd.pd.prepareWrite(fd.isFile);
		if (!($interfaceIsEqual(err$1, $ifaceNil))) {
			$s = -1; return [0, err$1];
		}
		/* while (true) { */ case 2:
			_r$1 = syscall.Sendto(fd.Sysfd, p, 0, sa); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			err$2 = _r$1;
			if ($interfaceIsEqual(err$2, new syscall.Errno(35)) && fd.pd.pollable()) {
				err$2 = fd.pd.waitWrite(fd.isFile);
				if ($interfaceIsEqual(err$2, $ifaceNil)) {
					/* continue; */ $s = 2; continue;
				}
			}
			if (!($interfaceIsEqual(err$2, $ifaceNil))) {
				$s = -1; return [0, err$2];
			}
			$s = -1; return [p.$length, $ifaceNil];
		/* } */ $s = 2; continue; case 3:
		$s = -1; return [0, $ifaceNil];
		/* */ } return; } } catch(err) { $err = err; $s = -1; return [0, $ifaceNil]; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: FD.ptr.prototype.WriteTo }; } $f._r = _r; $f._r$1 = _r$1; $f.err = err; $f.err$1 = err$1; $f.err$2 = err$2; $f.fd = fd; $f.p = p; $f.sa = sa; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	FD.prototype.WriteTo = function(p, sa) { return this.$val.WriteTo(p, sa); };
	FD.ptr.prototype.WriteMsg = function(p, oob, sa) {
		var _r, _r$1, _tuple, err, err$1, err$2, fd, n, oob, p, sa, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; err = $f.err; err$1 = $f.err$1; err$2 = $f.err$2; fd = $f.fd; n = $f.n; oob = $f.oob; p = $f.p; sa = $f.sa; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		fd = this;
		_r = fd.writeLock(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		err = _r;
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [0, 0, err];
		}
		$deferred.push([$methodVal(fd, "writeUnlock"), []]);
		err$1 = fd.pd.prepareWrite(fd.isFile);
		if (!($interfaceIsEqual(err$1, $ifaceNil))) {
			$s = -1; return [0, 0, err$1];
		}
		/* while (true) { */ case 2:
			_r$1 = syscall.SendmsgN(fd.Sysfd, p, oob, sa, 0); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_tuple = _r$1;
			n = _tuple[0];
			err$2 = _tuple[1];
			if ($interfaceIsEqual(err$2, new syscall.Errno(35)) && fd.pd.pollable()) {
				err$2 = fd.pd.waitWrite(fd.isFile);
				if ($interfaceIsEqual(err$2, $ifaceNil)) {
					/* continue; */ $s = 2; continue;
				}
			}
			if (!($interfaceIsEqual(err$2, $ifaceNil))) {
				$s = -1; return [n, 0, err$2];
			}
			$s = -1; return [n, oob.$length, err$2];
		/* } */ $s = 2; continue; case 3:
		$s = -1; return [0, 0, $ifaceNil];
		/* */ } return; } } catch(err) { $err = err; $s = -1; return [0, 0, $ifaceNil]; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: FD.ptr.prototype.WriteMsg }; } $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f.err = err; $f.err$1 = err$1; $f.err$2 = err$2; $f.fd = fd; $f.n = n; $f.oob = oob; $f.p = p; $f.sa = sa; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	FD.prototype.WriteMsg = function(p, oob, sa) { return this.$val.WriteMsg(p, oob, sa); };
	FD.ptr.prototype.Accept = function() {
		var _1, _r, _r$1, _tuple, err, err$1, err$2, errcall, fd, rsa, s, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; err = $f.err; err$1 = $f.err$1; err$2 = $f.err$2; errcall = $f.errcall; fd = $f.fd; rsa = $f.rsa; s = $f.s; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		fd = this;
		_r = fd.readLock(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		err = _r;
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [-1, $ifaceNil, "", err];
		}
		$deferred.push([$methodVal(fd, "readUnlock"), []]);
		err$1 = fd.pd.prepareRead(fd.isFile);
		if (!($interfaceIsEqual(err$1, $ifaceNil))) {
			$s = -1; return [-1, $ifaceNil, "", err$1];
		}
		/* while (true) { */ case 2:
			_r$1 = accept(fd.Sysfd); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_tuple = _r$1;
			s = _tuple[0];
			rsa = _tuple[1];
			errcall = _tuple[2];
			err$2 = _tuple[3];
			if ($interfaceIsEqual(err$2, $ifaceNil)) {
				$s = -1; return [s, rsa, "", err$2];
			}
			_1 = err$2;
			if ($interfaceIsEqual(_1, new syscall.Errno((35)))) {
				if (fd.pd.pollable()) {
					err$2 = fd.pd.waitRead(fd.isFile);
					if ($interfaceIsEqual(err$2, $ifaceNil)) {
						/* continue; */ $s = 2; continue;
					}
				}
			} else if ($interfaceIsEqual(_1, new syscall.Errno((53)))) {
				/* continue; */ $s = 2; continue;
			}
			$s = -1; return [-1, $ifaceNil, errcall, err$2];
		/* } */ $s = 2; continue; case 3:
		$s = -1; return [0, $ifaceNil, "", $ifaceNil];
		/* */ } return; } } catch(err) { $err = err; $s = -1; return [0, $ifaceNil, "", $ifaceNil]; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: FD.ptr.prototype.Accept }; } $f._1 = _1; $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f.err = err; $f.err$1 = err$1; $f.err$2 = err$2; $f.errcall = errcall; $f.fd = fd; $f.rsa = rsa; $f.s = s; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	FD.prototype.Accept = function() { return this.$val.Accept(); };
	FD.ptr.prototype.Seek = function(offset, whence) {
		var err, fd, offset, whence, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; err = $f.err; fd = $f.fd; offset = $f.offset; whence = $f.whence; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		fd = this;
		err = fd.incref();
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [new $Int64(0, 0), err];
		}
		$deferred.push([$methodVal(fd, "decref"), []]);
		$s = -1; return syscall.Seek(fd.Sysfd, offset, whence);
		/* */ } return; } } catch(err) { $err = err; $s = -1; return [new $Int64(0, 0), $ifaceNil]; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: FD.ptr.prototype.Seek }; } $f.err = err; $f.fd = fd; $f.offset = offset; $f.whence = whence; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	FD.prototype.Seek = function(offset, whence) { return this.$val.Seek(offset, whence); };
	FD.ptr.prototype.ReadDirent = function(buf) {
		var _tuple, buf, err, err$1, fd, n, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _tuple = $f._tuple; buf = $f.buf; err = $f.err; err$1 = $f.err$1; fd = $f.fd; n = $f.n; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		fd = this;
		err = fd.incref();
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [0, err];
		}
		$deferred.push([$methodVal(fd, "decref"), []]);
		while (true) {
			_tuple = syscall.ReadDirent(fd.Sysfd, buf);
			n = _tuple[0];
			err$1 = _tuple[1];
			if (!($interfaceIsEqual(err$1, $ifaceNil))) {
				n = 0;
				if ($interfaceIsEqual(err$1, new syscall.Errno(35)) && fd.pd.pollable()) {
					err$1 = fd.pd.waitRead(fd.isFile);
					if ($interfaceIsEqual(err$1, $ifaceNil)) {
						continue;
					}
				}
			}
			$s = -1; return [n, err$1];
		}
		$s = -1; return [0, $ifaceNil];
		/* */ } return; } } catch(err) { $err = err; $s = -1; return [0, $ifaceNil]; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: FD.ptr.prototype.ReadDirent }; } $f._tuple = _tuple; $f.buf = buf; $f.err = err; $f.err$1 = err$1; $f.fd = fd; $f.n = n; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	FD.prototype.ReadDirent = function(buf) { return this.$val.ReadDirent(buf); };
	FD.ptr.prototype.Fchdir = function() {
		var err, fd, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; err = $f.err; fd = $f.fd; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		fd = this;
		err = fd.incref();
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
		}
		$deferred.push([$methodVal(fd, "decref"), []]);
		$s = -1; return syscall.Fchdir(fd.Sysfd);
		/* */ } return; } } catch(err) { $err = err; $s = -1; return $ifaceNil; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: FD.ptr.prototype.Fchdir }; } $f.err = err; $f.fd = fd; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	FD.prototype.Fchdir = function() { return this.$val.Fchdir(); };
	FD.ptr.prototype.Fstat = function(s) {
		var err, fd, s, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; err = $f.err; fd = $f.fd; s = $f.s; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		fd = this;
		err = fd.incref();
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
		}
		$deferred.push([$methodVal(fd, "decref"), []]);
		$s = -1; return syscall.Fstat(fd.Sysfd, s);
		/* */ } return; } } catch(err) { $err = err; $s = -1; return $ifaceNil; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: FD.ptr.prototype.Fstat }; } $f.err = err; $f.fd = fd; $f.s = s; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	FD.prototype.Fstat = function(s) { return this.$val.Fstat(s); };
	FD.ptr.prototype.WaitWrite = function() {
		var fd;
		fd = this;
		return fd.pd.waitWrite(fd.isFile);
	};
	FD.prototype.WaitWrite = function() { return this.$val.WaitWrite(); };
	FD.ptr.prototype.WriteOnce = function(p) {
		var _r, err, fd, p, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; err = $f.err; fd = $f.fd; p = $f.p; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		fd = this;
		_r = fd.writeLock(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		err = _r;
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [0, err];
		}
		$deferred.push([$methodVal(fd, "writeUnlock"), []]);
		$s = -1; return syscall.Write(fd.Sysfd, p);
		/* */ } return; } } catch(err) { $err = err; $s = -1; return [0, $ifaceNil]; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: FD.ptr.prototype.WriteOnce }; } $f._r = _r; $f.err = err; $f.fd = fd; $f.p = p; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	FD.prototype.WriteOnce = function(p) { return this.$val.WriteOnce(p); };
	FD.ptr.prototype.RawControl = function(f) {
		var err, f, fd, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; err = $f.err; f = $f.f; fd = $f.fd; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		fd = this;
		err = fd.incref();
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
		}
		$deferred.push([$methodVal(fd, "decref"), []]);
		$r = f(((fd.Sysfd >>> 0))); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return $ifaceNil;
		/* */ } return; } } catch(err) { $err = err; $s = -1; return $ifaceNil; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: FD.ptr.prototype.RawControl }; } $f.err = err; $f.f = f; $f.fd = fd; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	FD.prototype.RawControl = function(f) { return this.$val.RawControl(f); };
	FD.ptr.prototype.RawRead = function(f) {
		var _r, _r$1, err, err$1, err$2, f, fd, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; err = $f.err; err$1 = $f.err$1; err$2 = $f.err$2; f = $f.f; fd = $f.fd; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		fd = this;
		_r = fd.readLock(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		err = _r;
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
		}
		$deferred.push([$methodVal(fd, "readUnlock"), []]);
		err$1 = fd.pd.prepareRead(fd.isFile);
		if (!($interfaceIsEqual(err$1, $ifaceNil))) {
			$s = -1; return err$1;
		}
		/* while (true) { */ case 2:
			_r$1 = f(((fd.Sysfd >>> 0))); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			/* */ if (_r$1) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (_r$1) { */ case 4:
				$s = -1; return $ifaceNil;
			/* } */ case 5:
			err$2 = fd.pd.waitRead(fd.isFile);
			if (!($interfaceIsEqual(err$2, $ifaceNil))) {
				$s = -1; return err$2;
			}
		/* } */ $s = 2; continue; case 3:
		$s = -1; return $ifaceNil;
		/* */ } return; } } catch(err) { $err = err; $s = -1; return $ifaceNil; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: FD.ptr.prototype.RawRead }; } $f._r = _r; $f._r$1 = _r$1; $f.err = err; $f.err$1 = err$1; $f.err$2 = err$2; $f.f = f; $f.fd = fd; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	FD.prototype.RawRead = function(f) { return this.$val.RawRead(f); };
	FD.ptr.prototype.RawWrite = function(f) {
		var _r, _r$1, err, err$1, err$2, f, fd, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; err = $f.err; err$1 = $f.err$1; err$2 = $f.err$2; f = $f.f; fd = $f.fd; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		fd = this;
		_r = fd.writeLock(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		err = _r;
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
		}
		$deferred.push([$methodVal(fd, "writeUnlock"), []]);
		err$1 = fd.pd.prepareWrite(fd.isFile);
		if (!($interfaceIsEqual(err$1, $ifaceNil))) {
			$s = -1; return err$1;
		}
		/* while (true) { */ case 2:
			_r$1 = f(((fd.Sysfd >>> 0))); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			/* */ if (_r$1) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (_r$1) { */ case 4:
				$s = -1; return $ifaceNil;
			/* } */ case 5:
			err$2 = fd.pd.waitWrite(fd.isFile);
			if (!($interfaceIsEqual(err$2, $ifaceNil))) {
				$s = -1; return err$2;
			}
		/* } */ $s = 2; continue; case 3:
		$s = -1; return $ifaceNil;
		/* */ } return; } } catch(err) { $err = err; $s = -1; return $ifaceNil; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: FD.ptr.prototype.RawWrite }; } $f._r = _r; $f._r$1 = _r$1; $f.err = err; $f.err$1 = err$1; $f.err$2 = err$2; $f.f = f; $f.fd = fd; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	FD.prototype.RawWrite = function(f) { return this.$val.RawWrite(f); };
	FD.ptr.prototype.SetsockoptInt = function(level, name, arg) {
		var arg, err, fd, level, name, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; arg = $f.arg; err = $f.err; fd = $f.fd; level = $f.level; name = $f.name; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		fd = this;
		err = fd.incref();
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
		}
		$deferred.push([$methodVal(fd, "decref"), []]);
		$s = -1; return syscall.SetsockoptInt(fd.Sysfd, level, name, arg);
		/* */ } return; } } catch(err) { $err = err; $s = -1; return $ifaceNil; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: FD.ptr.prototype.SetsockoptInt }; } $f.arg = arg; $f.err = err; $f.fd = fd; $f.level = level; $f.name = name; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	FD.prototype.SetsockoptInt = function(level, name, arg) { return this.$val.SetsockoptInt(level, name, arg); };
	FD.ptr.prototype.SetsockoptInet4Addr = function(level, name, arg) {
		var arg, err, fd, level, name, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; arg = $f.arg; err = $f.err; fd = $f.fd; level = $f.level; name = $f.name; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		fd = this;
		err = fd.incref();
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
		}
		$deferred.push([$methodVal(fd, "decref"), []]);
		$s = -1; return syscall.SetsockoptInet4Addr(fd.Sysfd, level, name, $clone(arg, arrayType));
		/* */ } return; } } catch(err) { $err = err; $s = -1; return $ifaceNil; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: FD.ptr.prototype.SetsockoptInet4Addr }; } $f.arg = arg; $f.err = err; $f.fd = fd; $f.level = level; $f.name = name; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	FD.prototype.SetsockoptInet4Addr = function(level, name, arg) { return this.$val.SetsockoptInet4Addr(level, name, arg); };
	FD.ptr.prototype.SetsockoptLinger = function(level, name, l) {
		var err, fd, l, level, name, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; err = $f.err; fd = $f.fd; l = $f.l; level = $f.level; name = $f.name; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		fd = this;
		err = fd.incref();
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
		}
		$deferred.push([$methodVal(fd, "decref"), []]);
		$s = -1; return syscall.SetsockoptLinger(fd.Sysfd, level, name, l);
		/* */ } return; } } catch(err) { $err = err; $s = -1; return $ifaceNil; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: FD.ptr.prototype.SetsockoptLinger }; } $f.err = err; $f.fd = fd; $f.l = l; $f.level = level; $f.name = name; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	FD.prototype.SetsockoptLinger = function(level, name, l) { return this.$val.SetsockoptLinger(level, name, l); };
	FD.ptr.prototype.SetsockoptByte = function(level, name, arg) {
		var arg, err, fd, level, name, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; arg = $f.arg; err = $f.err; fd = $f.fd; level = $f.level; name = $f.name; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		fd = this;
		err = fd.incref();
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
		}
		$deferred.push([$methodVal(fd, "decref"), []]);
		$s = -1; return syscall.SetsockoptByte(fd.Sysfd, level, name, arg);
		/* */ } return; } } catch(err) { $err = err; $s = -1; return $ifaceNil; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: FD.ptr.prototype.SetsockoptByte }; } $f.arg = arg; $f.err = err; $f.fd = fd; $f.level = level; $f.name = name; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	FD.prototype.SetsockoptByte = function(level, name, arg) { return this.$val.SetsockoptByte(level, name, arg); };
	FD.ptr.prototype.SetsockoptIPMreq = function(level, name, mreq) {
		var err, fd, level, mreq, name, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; err = $f.err; fd = $f.fd; level = $f.level; mreq = $f.mreq; name = $f.name; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		fd = this;
		err = fd.incref();
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
		}
		$deferred.push([$methodVal(fd, "decref"), []]);
		$s = -1; return syscall.SetsockoptIPMreq(fd.Sysfd, level, name, mreq);
		/* */ } return; } } catch(err) { $err = err; $s = -1; return $ifaceNil; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: FD.ptr.prototype.SetsockoptIPMreq }; } $f.err = err; $f.fd = fd; $f.level = level; $f.mreq = mreq; $f.name = name; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	FD.prototype.SetsockoptIPMreq = function(level, name, mreq) { return this.$val.SetsockoptIPMreq(level, name, mreq); };
	FD.ptr.prototype.SetsockoptIPv6Mreq = function(level, name, mreq) {
		var err, fd, level, mreq, name, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; err = $f.err; fd = $f.fd; level = $f.level; mreq = $f.mreq; name = $f.name; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		fd = this;
		err = fd.incref();
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
		}
		$deferred.push([$methodVal(fd, "decref"), []]);
		$s = -1; return syscall.SetsockoptIPv6Mreq(fd.Sysfd, level, name, mreq);
		/* */ } return; } } catch(err) { $err = err; $s = -1; return $ifaceNil; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: FD.ptr.prototype.SetsockoptIPv6Mreq }; } $f.err = err; $f.fd = fd; $f.level = level; $f.mreq = mreq; $f.name = name; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	FD.prototype.SetsockoptIPv6Mreq = function(level, name, mreq) { return this.$val.SetsockoptIPv6Mreq(level, name, mreq); };
	accept = function(s) {
		var _r, _r$1, _tuple, err, ns, s, sa, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; err = $f.err; ns = $f.ns; s = $f.s; sa = $f.sa; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = $pkg.AcceptFunc(s); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		ns = _tuple[0];
		sa = _tuple[1];
		err = _tuple[2];
		if ($interfaceIsEqual(err, $ifaceNil)) {
			syscall.CloseOnExec(ns);
		}
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [-1, $ifaceNil, "accept", err];
		}
		err = syscall.SetNonblock(ns, true);
		/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 2:
			_r$1 = $pkg.CloseFunc(ns); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_r$1;
			$s = -1; return [-1, $ifaceNil, "setnonblock", err];
		/* } */ case 3:
		$s = -1; return [ns, sa, "", $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: accept }; } $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f.err = err; $f.ns = ns; $f.s = s; $f.sa = sa; $f.$s = $s; $f.$r = $r; return $f;
	};
	FD.ptr.prototype.Writev = function(v) {
		var _i, _r, _ref, _tuple, chunk, e0, err, err$1, err$2, fd, iovecs, maxVec, n, v, wrote, x, x$1, x$2, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _r = $f._r; _ref = $f._ref; _tuple = $f._tuple; chunk = $f.chunk; e0 = $f.e0; err = $f.err; err$1 = $f.err$1; err$2 = $f.err$2; fd = $f.fd; iovecs = $f.iovecs; maxVec = $f.maxVec; n = $f.n; v = $f.v; wrote = $f.wrote; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		iovecs = [iovecs];
		fd = this;
		_r = fd.writeLock(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		err = _r;
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [new $Int64(0, 0), err];
		}
		$deferred.push([$methodVal(fd, "writeUnlock"), []]);
		err$1 = fd.pd.prepareWrite(fd.isFile);
		if (!($interfaceIsEqual(err$1, $ifaceNil))) {
			$s = -1; return [new $Int64(0, 0), err$1];
		}
		iovecs[0] = sliceType$1.nil;
		if (!(fd.iovecs === ptrType$2.nil)) {
			iovecs[0] = fd.iovecs.$get();
		}
		maxVec = 1024;
		n = new $Int64(0, 0);
		err$2 = $ifaceNil;
		/* while (true) { */ case 2:
			/* if (!(v.$get().$length > 0)) { break; } */ if(!(v.$get().$length > 0)) { $s = 3; continue; }
			iovecs[0] = $subslice(iovecs[0], 0, 0);
			_ref = v.$get();
			_i = 0;
			/* while (true) { */ case 4:
				/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 5; continue; }
				chunk = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
				if (chunk.$length === 0) {
					_i++;
					/* continue; */ $s = 4; continue;
				}
				iovecs[0] = $append(iovecs[0], new syscall.Iovec.ptr($indexPtr(chunk.$array, chunk.$offset + 0, ptrType$3), new $Uint64(0, 0)));
				if (fd.IsStream && chunk.$length > 1073741824) {
					(x = iovecs[0].$length - 1 >> 0, ((x < 0 || x >= iovecs[0].$length) ? ($throwRuntimeError("index out of range"), undefined) : iovecs[0].$array[iovecs[0].$offset + x])).SetLen(1073741824);
					/* break; */ $s = 5; continue;
				}
				(x$1 = iovecs[0].$length - 1 >> 0, ((x$1 < 0 || x$1 >= iovecs[0].$length) ? ($throwRuntimeError("index out of range"), undefined) : iovecs[0].$array[iovecs[0].$offset + x$1])).SetLen(chunk.$length);
				if (iovecs[0].$length === maxVec) {
					/* break; */ $s = 5; continue;
				}
				_i++;
			/* } */ $s = 4; continue; case 5:
			if (iovecs[0].$length === 0) {
				/* break; */ $s = 3; continue;
			}
			fd.iovecs = (iovecs.$ptr || (iovecs.$ptr = new ptrType$2(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, iovecs)));
			_tuple = syscall.Syscall(121, ((fd.Sysfd >>> 0)), (($sliceToArray(iovecs[0]))), ((iovecs[0].$length >>> 0)));
			wrote = _tuple[0];
			e0 = _tuple[2];
			if (wrote === 4294967295) {
				wrote = 0;
			}
			$r = $pkg.TestHookDidWritev(((wrote >> 0))); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			n = (x$2 = (new $Int64(0, wrote.constructor === Number ? wrote : 1)), new $Int64(n.$high + x$2.$high, n.$low + x$2.$low));
			consume(v, (new $Int64(0, wrote.constructor === Number ? wrote : 1)));
			if (e0 === 35) {
				err$2 = fd.pd.waitWrite(fd.isFile);
				if ($interfaceIsEqual(err$2, $ifaceNil)) {
					/* continue; */ $s = 2; continue;
				}
			} else if (!((e0 === 0))) {
				err$2 = new syscall.Errno((e0));
			}
			if (!($interfaceIsEqual(err$2, $ifaceNil))) {
				/* break; */ $s = 3; continue;
			}
			if ((n.$high === 0 && n.$low === 0)) {
				err$2 = io.ErrUnexpectedEOF;
				/* break; */ $s = 3; continue;
			}
		/* } */ $s = 2; continue; case 3:
		$s = -1; return [n, err$2];
		/* */ } return; } } catch(err) { $err = err; $s = -1; return [new $Int64(0, 0), $ifaceNil]; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: FD.ptr.prototype.Writev }; } $f._i = _i; $f._r = _r; $f._ref = _ref; $f._tuple = _tuple; $f.chunk = chunk; $f.e0 = e0; $f.err = err; $f.err$1 = err$1; $f.err$2 = err$2; $f.fd = fd; $f.iovecs = iovecs; $f.maxVec = maxVec; $f.n = n; $f.v = v; $f.wrote = wrote; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	FD.prototype.Writev = function(v) { return this.$val.Writev(v); };
	ptrType$5.methods = [{prop: "init", name: "init", pkg: "internal/poll", typ: $funcType([ptrType$4], [$error], false)}, {prop: "close", name: "close", pkg: "internal/poll", typ: $funcType([], [], false)}, {prop: "evict", name: "evict", pkg: "internal/poll", typ: $funcType([], [], false)}, {prop: "prepare", name: "prepare", pkg: "internal/poll", typ: $funcType([$Int, $Bool], [$error], false)}, {prop: "prepareRead", name: "prepareRead", pkg: "internal/poll", typ: $funcType([$Bool], [$error], false)}, {prop: "prepareWrite", name: "prepareWrite", pkg: "internal/poll", typ: $funcType([$Bool], [$error], false)}, {prop: "wait", name: "wait", pkg: "internal/poll", typ: $funcType([$Int, $Bool], [$error], false)}, {prop: "waitRead", name: "waitRead", pkg: "internal/poll", typ: $funcType([$Bool], [$error], false)}, {prop: "waitWrite", name: "waitWrite", pkg: "internal/poll", typ: $funcType([$Bool], [$error], false)}, {prop: "waitCanceled", name: "waitCanceled", pkg: "internal/poll", typ: $funcType([$Int], [], false)}, {prop: "pollable", name: "pollable", pkg: "internal/poll", typ: $funcType([], [$Bool], false)}];
	ptrType$6.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Timeout", name: "Timeout", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Temporary", name: "Temporary", pkg: "", typ: $funcType([], [$Bool], false)}];
	ptrType$7.methods = [{prop: "incref", name: "incref", pkg: "internal/poll", typ: $funcType([], [$Bool], false)}, {prop: "increfAndClose", name: "increfAndClose", pkg: "internal/poll", typ: $funcType([], [$Bool], false)}, {prop: "decref", name: "decref", pkg: "internal/poll", typ: $funcType([], [$Bool], false)}, {prop: "rwlock", name: "rwlock", pkg: "internal/poll", typ: $funcType([$Bool], [$Bool], false)}, {prop: "rwunlock", name: "rwunlock", pkg: "internal/poll", typ: $funcType([$Bool], [$Bool], false)}];
	ptrType$4.methods = [{prop: "SetDeadline", name: "SetDeadline", pkg: "", typ: $funcType([time.Time], [$error], false)}, {prop: "SetReadDeadline", name: "SetReadDeadline", pkg: "", typ: $funcType([time.Time], [$error], false)}, {prop: "SetWriteDeadline", name: "SetWriteDeadline", pkg: "", typ: $funcType([time.Time], [$error], false)}, {prop: "incref", name: "incref", pkg: "internal/poll", typ: $funcType([], [$error], false)}, {prop: "decref", name: "decref", pkg: "internal/poll", typ: $funcType([], [$error], false)}, {prop: "readLock", name: "readLock", pkg: "internal/poll", typ: $funcType([], [$error], false)}, {prop: "readUnlock", name: "readUnlock", pkg: "internal/poll", typ: $funcType([], [], false)}, {prop: "writeLock", name: "writeLock", pkg: "internal/poll", typ: $funcType([], [$error], false)}, {prop: "writeUnlock", name: "writeUnlock", pkg: "internal/poll", typ: $funcType([], [], false)}, {prop: "eofError", name: "eofError", pkg: "internal/poll", typ: $funcType([$Int, $error], [$error], false)}, {prop: "Fchmod", name: "Fchmod", pkg: "", typ: $funcType([$Uint32], [$error], false)}, {prop: "Fchown", name: "Fchown", pkg: "", typ: $funcType([$Int, $Int], [$error], false)}, {prop: "Ftruncate", name: "Ftruncate", pkg: "", typ: $funcType([$Int64], [$error], false)}, {prop: "Fsync", name: "Fsync", pkg: "", typ: $funcType([], [$error], false)}, {prop: "Init", name: "Init", pkg: "", typ: $funcType([$String, $Bool], [$error], false)}, {prop: "destroy", name: "destroy", pkg: "internal/poll", typ: $funcType([], [$error], false)}, {prop: "Close", name: "Close", pkg: "", typ: $funcType([], [$error], false)}, {prop: "Shutdown", name: "Shutdown", pkg: "", typ: $funcType([$Int], [$error], false)}, {prop: "SetBlocking", name: "SetBlocking", pkg: "", typ: $funcType([], [$error], false)}, {prop: "Read", name: "Read", pkg: "", typ: $funcType([sliceType$2], [$Int, $error], false)}, {prop: "Pread", name: "Pread", pkg: "", typ: $funcType([sliceType$2, $Int64], [$Int, $error], false)}, {prop: "ReadFrom", name: "ReadFrom", pkg: "", typ: $funcType([sliceType$2], [$Int, syscall.Sockaddr, $error], false)}, {prop: "ReadMsg", name: "ReadMsg", pkg: "", typ: $funcType([sliceType$2, sliceType$2], [$Int, $Int, $Int, syscall.Sockaddr, $error], false)}, {prop: "Write", name: "Write", pkg: "", typ: $funcType([sliceType$2], [$Int, $error], false)}, {prop: "Pwrite", name: "Pwrite", pkg: "", typ: $funcType([sliceType$2, $Int64], [$Int, $error], false)}, {prop: "WriteTo", name: "WriteTo", pkg: "", typ: $funcType([sliceType$2, syscall.Sockaddr], [$Int, $error], false)}, {prop: "WriteMsg", name: "WriteMsg", pkg: "", typ: $funcType([sliceType$2, sliceType$2, syscall.Sockaddr], [$Int, $Int, $error], false)}, {prop: "Accept", name: "Accept", pkg: "", typ: $funcType([], [$Int, syscall.Sockaddr, $String, $error], false)}, {prop: "Seek", name: "Seek", pkg: "", typ: $funcType([$Int64, $Int], [$Int64, $error], false)}, {prop: "ReadDirent", name: "ReadDirent", pkg: "", typ: $funcType([sliceType$2], [$Int, $error], false)}, {prop: "Fchdir", name: "Fchdir", pkg: "", typ: $funcType([], [$error], false)}, {prop: "Fstat", name: "Fstat", pkg: "", typ: $funcType([ptrType$8], [$error], false)}, {prop: "WaitWrite", name: "WaitWrite", pkg: "", typ: $funcType([], [$error], false)}, {prop: "WriteOnce", name: "WriteOnce", pkg: "", typ: $funcType([sliceType$2], [$Int, $error], false)}, {prop: "RawControl", name: "RawControl", pkg: "", typ: $funcType([funcType], [$error], false)}, {prop: "RawRead", name: "RawRead", pkg: "", typ: $funcType([funcType$1], [$error], false)}, {prop: "RawWrite", name: "RawWrite", pkg: "", typ: $funcType([funcType$1], [$error], false)}, {prop: "SetsockoptInt", name: "SetsockoptInt", pkg: "", typ: $funcType([$Int, $Int, $Int], [$error], false)}, {prop: "SetsockoptInet4Addr", name: "SetsockoptInet4Addr", pkg: "", typ: $funcType([$Int, $Int, arrayType], [$error], false)}, {prop: "SetsockoptLinger", name: "SetsockoptLinger", pkg: "", typ: $funcType([$Int, $Int, ptrType$9], [$error], false)}, {prop: "SetsockoptByte", name: "SetsockoptByte", pkg: "", typ: $funcType([$Int, $Int, $Uint8], [$error], false)}, {prop: "SetsockoptIPMreq", name: "SetsockoptIPMreq", pkg: "", typ: $funcType([$Int, $Int, ptrType$10], [$error], false)}, {prop: "SetsockoptIPv6Mreq", name: "SetsockoptIPv6Mreq", pkg: "", typ: $funcType([$Int, $Int, ptrType$11], [$error], false)}, {prop: "Writev", name: "Writev", pkg: "", typ: $funcType([ptrType$12], [$Int64, $error], false)}];
	pollDesc.init("internal/poll", [{prop: "closing", name: "closing", anonymous: false, exported: false, typ: $Bool, tag: ""}]);
	TimeoutError.init("", []);
	fdMutex.init("internal/poll", [{prop: "state", name: "state", anonymous: false, exported: false, typ: $Uint64, tag: ""}, {prop: "rsema", name: "rsema", anonymous: false, exported: false, typ: $Uint32, tag: ""}, {prop: "wsema", name: "wsema", anonymous: false, exported: false, typ: $Uint32, tag: ""}]);
	FD.init("internal/poll", [{prop: "fdmu", name: "fdmu", anonymous: false, exported: false, typ: fdMutex, tag: ""}, {prop: "Sysfd", name: "Sysfd", anonymous: false, exported: true, typ: $Int, tag: ""}, {prop: "pd", name: "pd", anonymous: false, exported: false, typ: pollDesc, tag: ""}, {prop: "iovecs", name: "iovecs", anonymous: false, exported: false, typ: ptrType$2, tag: ""}, {prop: "csema", name: "csema", anonymous: false, exported: false, typ: $Uint32, tag: ""}, {prop: "IsStream", name: "IsStream", anonymous: false, exported: true, typ: $Bool, tag: ""}, {prop: "ZeroReadIsEOF", name: "ZeroReadIsEOF", anonymous: false, exported: true, typ: $Bool, tag: ""}, {prop: "isFile", name: "isFile", anonymous: false, exported: false, typ: $Bool, tag: ""}, {prop: "isBlocking", name: "isBlocking", anonymous: false, exported: false, typ: $Bool, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = errors.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = io.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = runtime.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = atomic.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = syscall.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = time.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		semWaiters = {};
		$pkg.ErrNetClosing = errors.New("use of closed network connection");
		$pkg.ErrFileClosing = errors.New("use of closed file");
		$pkg.ErrNoDeadline = errors.New("file type does not support deadline");
		$pkg.ErrTimeout = new TimeoutError.ptr();
		$pkg.TestHookDidWritev = (function(wrote) {
			var wrote;
		});
		$pkg.CloseFunc = syscall.Close;
		$pkg.AcceptFunc = syscall.Accept;
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["internal/testlog"] = (function() {
	var $pkg = {}, $init, atomic, Interface, ptrType, logger, Logger, Stat;
	atomic = $packages["sync/atomic"];
	Interface = $pkg.Interface = $newType(8, $kindInterface, "testlog.Interface", true, "internal/testlog", true, null);
	ptrType = $ptrType(Interface);
	Logger = function() {
		var impl;
		impl = logger.Load();
		if ($interfaceIsEqual(impl, $ifaceNil)) {
			return $ifaceNil;
		}
		return $assertType(impl, ptrType).$get();
	};
	$pkg.Logger = Logger;
	Stat = function(name) {
		var log, name, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; log = $f.log; name = $f.name; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		log = Logger();
		/* */ if (!($interfaceIsEqual(log, $ifaceNil))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!($interfaceIsEqual(log, $ifaceNil))) { */ case 1:
			$r = log.Stat(name); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 2:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Stat }; } $f.log = log; $f.name = name; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Stat = Stat;
	Interface.init([{prop: "Chdir", name: "Chdir", pkg: "", typ: $funcType([$String], [], false)}, {prop: "Getenv", name: "Getenv", pkg: "", typ: $funcType([$String], [], false)}, {prop: "Open", name: "Open", pkg: "", typ: $funcType([$String], [], false)}, {prop: "Stat", name: "Stat", pkg: "", typ: $funcType([$String], [], false)}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = atomic.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		logger = new atomic.Value.ptr($ifaceNil);
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["os"] = (function() {
	var $pkg = {}, $init, errors, js, poll, testlog, io, runtime, sync, atomic, syscall, time, timeout, PathError, SyscallError, LinkError, file, dirInfo, File, FileInfo, FileMode, fileStat, sliceType, ptrType, sliceType$1, ptrType$1, sliceType$2, ptrType$2, ptrType$3, ptrType$4, sliceType$5, ptrType$12, ptrType$13, funcType$1, ptrType$15, arrayType$2, arrayType$4, ptrType$16, errFinished, lstat, runtime_args, init, runtime_beforeExit, NewSyscallError, IsNotExist, underlyingError, wrapSyscallError, isNotExist, sigpipe, syscallMode, NewFile, newFile, epipecheck, IsPathSeparator, basename, init$1, Exit, Lstat, fillFileStatFromSys, timespecToTime, lstatNolog;
	errors = $packages["errors"];
	js = $packages["github.com/gopherjs/gopherjs/js"];
	poll = $packages["internal/poll"];
	testlog = $packages["internal/testlog"];
	io = $packages["io"];
	runtime = $packages["runtime"];
	sync = $packages["sync"];
	atomic = $packages["sync/atomic"];
	syscall = $packages["syscall"];
	time = $packages["time"];
	timeout = $pkg.timeout = $newType(8, $kindInterface, "os.timeout", true, "os", false, null);
	PathError = $pkg.PathError = $newType(0, $kindStruct, "os.PathError", true, "os", true, function(Op_, Path_, Err_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Op = "";
			this.Path = "";
			this.Err = $ifaceNil;
			return;
		}
		this.Op = Op_;
		this.Path = Path_;
		this.Err = Err_;
	});
	SyscallError = $pkg.SyscallError = $newType(0, $kindStruct, "os.SyscallError", true, "os", true, function(Syscall_, Err_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Syscall = "";
			this.Err = $ifaceNil;
			return;
		}
		this.Syscall = Syscall_;
		this.Err = Err_;
	});
	LinkError = $pkg.LinkError = $newType(0, $kindStruct, "os.LinkError", true, "os", true, function(Op_, Old_, New_, Err_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Op = "";
			this.Old = "";
			this.New = "";
			this.Err = $ifaceNil;
			return;
		}
		this.Op = Op_;
		this.Old = Old_;
		this.New = New_;
		this.Err = Err_;
	});
	file = $pkg.file = $newType(0, $kindStruct, "os.file", true, "os", false, function(pfd_, name_, dirinfo_, nonblock_, stdoutOrErr_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.pfd = new poll.FD.ptr(new poll.fdMutex.ptr(new $Uint64(0, 0), 0, 0), 0, new poll.pollDesc.ptr(false), ptrType$12.nil, 0, false, false, false, false);
			this.name = "";
			this.dirinfo = ptrType$1.nil;
			this.nonblock = false;
			this.stdoutOrErr = false;
			return;
		}
		this.pfd = pfd_;
		this.name = name_;
		this.dirinfo = dirinfo_;
		this.nonblock = nonblock_;
		this.stdoutOrErr = stdoutOrErr_;
	});
	dirInfo = $pkg.dirInfo = $newType(0, $kindStruct, "os.dirInfo", true, "os", false, function(buf_, nbuf_, bufp_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.buf = sliceType$2.nil;
			this.nbuf = 0;
			this.bufp = 0;
			return;
		}
		this.buf = buf_;
		this.nbuf = nbuf_;
		this.bufp = bufp_;
	});
	File = $pkg.File = $newType(0, $kindStruct, "os.File", true, "os", true, function(file_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.file = ptrType$13.nil;
			return;
		}
		this.file = file_;
	});
	FileInfo = $pkg.FileInfo = $newType(8, $kindInterface, "os.FileInfo", true, "os", true, null);
	FileMode = $pkg.FileMode = $newType(4, $kindUint32, "os.FileMode", true, "os", true, null);
	fileStat = $pkg.fileStat = $newType(0, $kindStruct, "os.fileStat", true, "os", false, function(name_, size_, mode_, modTime_, sys_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.name = "";
			this.size = new $Int64(0, 0);
			this.mode = 0;
			this.modTime = new time.Time.ptr(new $Uint64(0, 0), new $Int64(0, 0), ptrType$15.nil);
			this.sys = new syscall.Stat_t.ptr(0, 0, new $Uint64(0, 0), 0, 0, 0, 0, new syscall.Timespec.ptr(new $Int64(0, 0), new $Int64(0, 0)), new syscall.Timespec.ptr(new $Int64(0, 0), new $Int64(0, 0)), new syscall.Timespec.ptr(new $Int64(0, 0), new $Int64(0, 0)), new $Int64(0, 0), new $Int64(0, 0), 0, 0, 0, arrayType$2.zero(), new syscall.Timespec.ptr(new $Int64(0, 0), new $Int64(0, 0)));
			return;
		}
		this.name = name_;
		this.size = size_;
		this.mode = mode_;
		this.modTime = modTime_;
		this.sys = sys_;
	});
	sliceType = $sliceType($String);
	ptrType = $ptrType(File);
	sliceType$1 = $sliceType(FileInfo);
	ptrType$1 = $ptrType(dirInfo);
	sliceType$2 = $sliceType($Uint8);
	ptrType$2 = $ptrType(PathError);
	ptrType$3 = $ptrType(LinkError);
	ptrType$4 = $ptrType(SyscallError);
	sliceType$5 = $sliceType(syscall.Iovec);
	ptrType$12 = $ptrType(sliceType$5);
	ptrType$13 = $ptrType(file);
	funcType$1 = $funcType([ptrType$13], [$error], false);
	ptrType$15 = $ptrType(time.Location);
	arrayType$2 = $arrayType($Uint8, 4);
	arrayType$4 = $arrayType($Uint8, 32);
	ptrType$16 = $ptrType(fileStat);
	runtime_args = function() {
		return $pkg.Args;
	};
	init = function() {
		var argv, i, process;
		process = $global.process;
		if (!(process === undefined)) {
			argv = process.argv;
			$pkg.Args = $makeSlice(sliceType, ($parseInt(argv.length) - 1 >> 0));
			i = 0;
			while (true) {
				if (!(i < ($parseInt(argv.length) - 1 >> 0))) { break; }
				((i < 0 || i >= $pkg.Args.$length) ? ($throwRuntimeError("index out of range"), undefined) : $pkg.Args.$array[$pkg.Args.$offset + i] = $internalize(argv[(i + 1 >> 0)], $String));
				i = i + (1) >> 0;
			}
		}
		if ($pkg.Args.$length === 0) {
			$pkg.Args = new sliceType(["?"]);
		}
	};
	runtime_beforeExit = function() {
	};
	File.ptr.prototype.Readdir = function(n) {
		var _r, f, n, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; f = $f.f; n = $f.n; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		f = this;
		if (f === ptrType.nil) {
			$s = -1; return [sliceType$1.nil, $pkg.ErrInvalid];
		}
		_r = f.readdir(n); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: File.ptr.prototype.Readdir }; } $f._r = _r; $f.f = f; $f.n = n; $f.$s = $s; $f.$r = $r; return $f;
	};
	File.prototype.Readdir = function(n) { return this.$val.Readdir(n); };
	File.ptr.prototype.Readdirnames = function(n) {
		var _r, _tmp, _tmp$1, _tuple, err, f, n, names, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tuple = $f._tuple; err = $f.err; f = $f.f; n = $f.n; names = $f.names; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		names = sliceType.nil;
		err = $ifaceNil;
		f = this;
		if (f === ptrType.nil) {
			_tmp = sliceType.nil;
			_tmp$1 = $pkg.ErrInvalid;
			names = _tmp;
			err = _tmp$1;
			$s = -1; return [names, err];
		}
		_r = f.readdirnames(n); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		names = _tuple[0];
		err = _tuple[1];
		$s = -1; return [names, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: File.ptr.prototype.Readdirnames }; } $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tuple = _tuple; $f.err = err; $f.f = f; $f.n = n; $f.names = names; $f.$s = $s; $f.$r = $r; return $f;
	};
	File.prototype.Readdirnames = function(n) { return this.$val.Readdirnames(n); };
	File.ptr.prototype.readdir = function(n) {
		var _i, _r, _r$1, _ref, _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple, _tuple$1, dirname, err, f, fi, filename, fip, lerr, n, names, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _r = $f._r; _r$1 = $f._r$1; _ref = $f._ref; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; dirname = $f.dirname; err = $f.err; f = $f.f; fi = $f.fi; filename = $f.filename; fip = $f.fip; lerr = $f.lerr; n = $f.n; names = $f.names; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		fi = sliceType$1.nil;
		err = $ifaceNil;
		f = this;
		dirname = f.file.name;
		if (dirname === "") {
			dirname = ".";
		}
		_r = f.Readdirnames(n); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		names = _tuple[0];
		err = _tuple[1];
		fi = $makeSlice(sliceType$1, 0, names.$length);
		_ref = names;
		_i = 0;
		/* while (true) { */ case 2:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 3; continue; }
			filename = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			_r$1 = lstat(dirname + "/" + filename); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_tuple$1 = _r$1;
			fip = _tuple$1[0];
			lerr = _tuple$1[1];
			if (IsNotExist(lerr)) {
				_i++;
				/* continue; */ $s = 2; continue;
			}
			if (!($interfaceIsEqual(lerr, $ifaceNil))) {
				_tmp = fi;
				_tmp$1 = lerr;
				fi = _tmp;
				err = _tmp$1;
				$s = -1; return [fi, err];
			}
			fi = $append(fi, fip);
			_i++;
		/* } */ $s = 2; continue; case 3:
		if ((fi.$length === 0) && $interfaceIsEqual(err, $ifaceNil) && n > 0) {
			err = io.EOF;
		}
		_tmp$2 = fi;
		_tmp$3 = err;
		fi = _tmp$2;
		err = _tmp$3;
		$s = -1; return [fi, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: File.ptr.prototype.readdir }; } $f._i = _i; $f._r = _r; $f._r$1 = _r$1; $f._ref = _ref; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.dirname = dirname; $f.err = err; $f.f = f; $f.fi = fi; $f.filename = filename; $f.fip = fip; $f.lerr = lerr; $f.n = n; $f.names = names; $f.$s = $s; $f.$r = $r; return $f;
	};
	File.prototype.readdir = function(n) { return this.$val.readdir(n); };
	File.ptr.prototype.readdirnames = function(n) {
		var _r, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tuple, _tuple$1, d, err, errno, f, n, names, nb, nc, size, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; _tmp$6 = $f._tmp$6; _tmp$7 = $f._tmp$7; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; d = $f.d; err = $f.err; errno = $f.errno; f = $f.f; n = $f.n; names = $f.names; nb = $f.nb; nc = $f.nc; size = $f.size; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		names = sliceType.nil;
		err = $ifaceNil;
		f = this;
		if (f.file.dirinfo === ptrType$1.nil) {
			f.file.dirinfo = new dirInfo.ptr(sliceType$2.nil, 0, 0);
			f.file.dirinfo.buf = $makeSlice(sliceType$2, 4096);
		}
		d = f.file.dirinfo;
		size = n;
		if (size <= 0) {
			size = 100;
			n = -1;
		}
		names = $makeSlice(sliceType, 0, size);
		/* while (true) { */ case 1:
			/* if (!(!((n === 0)))) { break; } */ if(!(!((n === 0)))) { $s = 2; continue; }
			/* */ if (d.bufp >= d.nbuf) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (d.bufp >= d.nbuf) { */ case 3:
				d.bufp = 0;
				errno = $ifaceNil;
				_r = f.file.pfd.ReadDirent(d.buf); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				_tuple = _r;
				d.nbuf = _tuple[0];
				errno = _tuple[1];
				runtime.KeepAlive(f);
				if (!($interfaceIsEqual(errno, $ifaceNil))) {
					_tmp = names;
					_tmp$1 = wrapSyscallError("readdirent", errno);
					names = _tmp;
					err = _tmp$1;
					$s = -1; return [names, err];
				}
				if (d.nbuf <= 0) {
					/* break; */ $s = 2; continue;
				}
			/* } */ case 4:
			_tmp$2 = 0;
			_tmp$3 = 0;
			nb = _tmp$2;
			nc = _tmp$3;
			_tuple$1 = syscall.ParseDirent($subslice(d.buf, d.bufp, d.nbuf), n, names);
			nb = _tuple$1[0];
			nc = _tuple$1[1];
			names = _tuple$1[2];
			d.bufp = d.bufp + (nb) >> 0;
			n = n - (nc) >> 0;
		/* } */ $s = 1; continue; case 2:
		if (n >= 0 && (names.$length === 0)) {
			_tmp$4 = names;
			_tmp$5 = io.EOF;
			names = _tmp$4;
			err = _tmp$5;
			$s = -1; return [names, err];
		}
		_tmp$6 = names;
		_tmp$7 = $ifaceNil;
		names = _tmp$6;
		err = _tmp$7;
		$s = -1; return [names, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: File.ptr.prototype.readdirnames }; } $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f._tmp$6 = _tmp$6; $f._tmp$7 = _tmp$7; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.d = d; $f.err = err; $f.errno = errno; $f.f = f; $f.n = n; $f.names = names; $f.nb = nb; $f.nc = nc; $f.size = size; $f.$s = $s; $f.$r = $r; return $f;
	};
	File.prototype.readdirnames = function(n) { return this.$val.readdirnames(n); };
	PathError.ptr.prototype.Error = function() {
		var _r, e, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; e = $f.e; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		e = this;
		_r = e.Err.Error(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return e.Op + " " + e.Path + ": " + _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: PathError.ptr.prototype.Error }; } $f._r = _r; $f.e = e; $f.$s = $s; $f.$r = $r; return $f;
	};
	PathError.prototype.Error = function() { return this.$val.Error(); };
	PathError.ptr.prototype.Timeout = function() {
		var _r, _tuple, _v, e, ok, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; _v = $f._v; e = $f.e; ok = $f.ok; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		e = this;
		_tuple = $assertType(e.Err, timeout, true);
		t = _tuple[0];
		ok = _tuple[1];
		if (!(ok)) { _v = false; $s = 1; continue s; }
		_r = t.Timeout(); /* */ $s = 2; case 2: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_v = _r; case 1:
		$s = -1; return _v;
		/* */ } return; } if ($f === undefined) { $f = { $blk: PathError.ptr.prototype.Timeout }; } $f._r = _r; $f._tuple = _tuple; $f._v = _v; $f.e = e; $f.ok = ok; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	PathError.prototype.Timeout = function() { return this.$val.Timeout(); };
	SyscallError.ptr.prototype.Error = function() {
		var _r, e, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; e = $f.e; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		e = this;
		_r = e.Err.Error(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return e.Syscall + ": " + _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: SyscallError.ptr.prototype.Error }; } $f._r = _r; $f.e = e; $f.$s = $s; $f.$r = $r; return $f;
	};
	SyscallError.prototype.Error = function() { return this.$val.Error(); };
	SyscallError.ptr.prototype.Timeout = function() {
		var _r, _tuple, _v, e, ok, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; _v = $f._v; e = $f.e; ok = $f.ok; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		e = this;
		_tuple = $assertType(e.Err, timeout, true);
		t = _tuple[0];
		ok = _tuple[1];
		if (!(ok)) { _v = false; $s = 1; continue s; }
		_r = t.Timeout(); /* */ $s = 2; case 2: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_v = _r; case 1:
		$s = -1; return _v;
		/* */ } return; } if ($f === undefined) { $f = { $blk: SyscallError.ptr.prototype.Timeout }; } $f._r = _r; $f._tuple = _tuple; $f._v = _v; $f.e = e; $f.ok = ok; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	SyscallError.prototype.Timeout = function() { return this.$val.Timeout(); };
	NewSyscallError = function(syscall$1, err) {
		var err, syscall$1;
		if ($interfaceIsEqual(err, $ifaceNil)) {
			return $ifaceNil;
		}
		return new SyscallError.ptr(syscall$1, err);
	};
	$pkg.NewSyscallError = NewSyscallError;
	IsNotExist = function(err) {
		var err;
		return isNotExist(err);
	};
	$pkg.IsNotExist = IsNotExist;
	underlyingError = function(err) {
		var _ref, err, err$1, err$2, err$3;
		_ref = err;
		if ($assertType(_ref, ptrType$2, true)[1]) {
			err$1 = _ref.$val;
			return err$1.Err;
		} else if ($assertType(_ref, ptrType$3, true)[1]) {
			err$2 = _ref.$val;
			return err$2.Err;
		} else if ($assertType(_ref, ptrType$4, true)[1]) {
			err$3 = _ref.$val;
			return err$3.Err;
		}
		return err;
	};
	wrapSyscallError = function(name, err) {
		var _tuple, err, name, ok;
		_tuple = $assertType(err, syscall.Errno, true);
		ok = _tuple[1];
		if (ok) {
			err = NewSyscallError(name, err);
		}
		return err;
	};
	isNotExist = function(err) {
		var err;
		err = underlyingError(err);
		return $interfaceIsEqual(err, new syscall.Errno(2)) || $interfaceIsEqual(err, $pkg.ErrNotExist);
	};
	File.ptr.prototype.Name = function() {
		var f;
		f = this;
		return f.file.name;
	};
	File.prototype.Name = function() { return this.$val.Name(); };
	LinkError.ptr.prototype.Error = function() {
		var _r, e, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; e = $f.e; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		e = this;
		_r = e.Err.Error(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return e.Op + " " + e.Old + " " + e.New + ": " + _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: LinkError.ptr.prototype.Error }; } $f._r = _r; $f.e = e; $f.$s = $s; $f.$r = $r; return $f;
	};
	LinkError.prototype.Error = function() { return this.$val.Error(); };
	File.ptr.prototype.Read = function(b) {
		var _r, _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple, b, e, err, err$1, f, n, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tuple = $f._tuple; b = $f.b; e = $f.e; err = $f.err; err$1 = $f.err$1; f = $f.f; n = $f.n; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = 0;
		err = $ifaceNil;
		f = this;
		err$1 = f.checkValid("read");
		if (!($interfaceIsEqual(err$1, $ifaceNil))) {
			_tmp = 0;
			_tmp$1 = err$1;
			n = _tmp;
			err = _tmp$1;
			$s = -1; return [n, err];
		}
		_r = f.read(b); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		n = _tuple[0];
		e = _tuple[1];
		_tmp$2 = n;
		_tmp$3 = f.wrapErr("read", e);
		n = _tmp$2;
		err = _tmp$3;
		$s = -1; return [n, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: File.ptr.prototype.Read }; } $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tuple = _tuple; $f.b = b; $f.e = e; $f.err = err; $f.err$1 = err$1; $f.f = f; $f.n = n; $f.$s = $s; $f.$r = $r; return $f;
	};
	File.prototype.Read = function(b) { return this.$val.Read(b); };
	File.ptr.prototype.ReadAt = function(b, off) {
		var _r, _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple, b, e, err, err$1, f, m, n, off, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tuple = $f._tuple; b = $f.b; e = $f.e; err = $f.err; err$1 = $f.err$1; f = $f.f; m = $f.m; n = $f.n; off = $f.off; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = 0;
		err = $ifaceNil;
		f = this;
		err$1 = f.checkValid("read");
		if (!($interfaceIsEqual(err$1, $ifaceNil))) {
			_tmp = 0;
			_tmp$1 = err$1;
			n = _tmp;
			err = _tmp$1;
			$s = -1; return [n, err];
		}
		if ((off.$high < 0 || (off.$high === 0 && off.$low < 0))) {
			_tmp$2 = 0;
			_tmp$3 = new PathError.ptr("readat", f.file.name, errors.New("negative offset"));
			n = _tmp$2;
			err = _tmp$3;
			$s = -1; return [n, err];
		}
		/* while (true) { */ case 1:
			/* if (!(b.$length > 0)) { break; } */ if(!(b.$length > 0)) { $s = 2; continue; }
			_r = f.pread(b, off); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r;
			m = _tuple[0];
			e = _tuple[1];
			if (!($interfaceIsEqual(e, $ifaceNil))) {
				err = f.wrapErr("read", e);
				/* break; */ $s = 2; continue;
			}
			n = n + (m) >> 0;
			b = $subslice(b, m);
			off = (x = (new $Int64(0, m)), new $Int64(off.$high + x.$high, off.$low + x.$low));
		/* } */ $s = 1; continue; case 2:
		$s = -1; return [n, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: File.ptr.prototype.ReadAt }; } $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tuple = _tuple; $f.b = b; $f.e = e; $f.err = err; $f.err$1 = err$1; $f.f = f; $f.m = m; $f.n = n; $f.off = off; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	File.prototype.ReadAt = function(b, off) { return this.$val.ReadAt(b, off); };
	File.ptr.prototype.Write = function(b) {
		var _r, _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple, b, e, err, err$1, f, n, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tuple = $f._tuple; b = $f.b; e = $f.e; err = $f.err; err$1 = $f.err$1; f = $f.f; n = $f.n; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = 0;
		err = $ifaceNil;
		f = this;
		err$1 = f.checkValid("write");
		if (!($interfaceIsEqual(err$1, $ifaceNil))) {
			_tmp = 0;
			_tmp$1 = err$1;
			n = _tmp;
			err = _tmp$1;
			$s = -1; return [n, err];
		}
		_r = f.write(b); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		n = _tuple[0];
		e = _tuple[1];
		if (n < 0) {
			n = 0;
		}
		if (!((n === b.$length))) {
			err = io.ErrShortWrite;
		}
		epipecheck(f, e);
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			err = f.wrapErr("write", e);
		}
		_tmp$2 = n;
		_tmp$3 = err;
		n = _tmp$2;
		err = _tmp$3;
		$s = -1; return [n, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: File.ptr.prototype.Write }; } $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tuple = _tuple; $f.b = b; $f.e = e; $f.err = err; $f.err$1 = err$1; $f.f = f; $f.n = n; $f.$s = $s; $f.$r = $r; return $f;
	};
	File.prototype.Write = function(b) { return this.$val.Write(b); };
	File.ptr.prototype.WriteAt = function(b, off) {
		var _r, _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple, b, e, err, err$1, f, m, n, off, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tuple = $f._tuple; b = $f.b; e = $f.e; err = $f.err; err$1 = $f.err$1; f = $f.f; m = $f.m; n = $f.n; off = $f.off; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = 0;
		err = $ifaceNil;
		f = this;
		err$1 = f.checkValid("write");
		if (!($interfaceIsEqual(err$1, $ifaceNil))) {
			_tmp = 0;
			_tmp$1 = err$1;
			n = _tmp;
			err = _tmp$1;
			$s = -1; return [n, err];
		}
		if ((off.$high < 0 || (off.$high === 0 && off.$low < 0))) {
			_tmp$2 = 0;
			_tmp$3 = new PathError.ptr("writeat", f.file.name, errors.New("negative offset"));
			n = _tmp$2;
			err = _tmp$3;
			$s = -1; return [n, err];
		}
		/* while (true) { */ case 1:
			/* if (!(b.$length > 0)) { break; } */ if(!(b.$length > 0)) { $s = 2; continue; }
			_r = f.pwrite(b, off); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r;
			m = _tuple[0];
			e = _tuple[1];
			if (!($interfaceIsEqual(e, $ifaceNil))) {
				err = f.wrapErr("write", e);
				/* break; */ $s = 2; continue;
			}
			n = n + (m) >> 0;
			b = $subslice(b, m);
			off = (x = (new $Int64(0, m)), new $Int64(off.$high + x.$high, off.$low + x.$low));
		/* } */ $s = 1; continue; case 2:
		$s = -1; return [n, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: File.ptr.prototype.WriteAt }; } $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tuple = _tuple; $f.b = b; $f.e = e; $f.err = err; $f.err$1 = err$1; $f.f = f; $f.m = m; $f.n = n; $f.off = off; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	File.prototype.WriteAt = function(b, off) { return this.$val.WriteAt(b, off); };
	File.ptr.prototype.Seek = function(offset, whence) {
		var _r, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tuple, e, err, err$1, f, offset, r, ret, whence, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; _tuple = $f._tuple; e = $f.e; err = $f.err; err$1 = $f.err$1; f = $f.f; offset = $f.offset; r = $f.r; ret = $f.ret; whence = $f.whence; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		ret = new $Int64(0, 0);
		err = $ifaceNil;
		f = this;
		err$1 = f.checkValid("seek");
		if (!($interfaceIsEqual(err$1, $ifaceNil))) {
			_tmp = new $Int64(0, 0);
			_tmp$1 = err$1;
			ret = _tmp;
			err = _tmp$1;
			$s = -1; return [ret, err];
		}
		_r = f.seek(offset, whence); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		r = _tuple[0];
		e = _tuple[1];
		if ($interfaceIsEqual(e, $ifaceNil) && !(f.file.dirinfo === ptrType$1.nil) && !((r.$high === 0 && r.$low === 0))) {
			e = new syscall.Errno(21);
		}
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			_tmp$2 = new $Int64(0, 0);
			_tmp$3 = f.wrapErr("seek", e);
			ret = _tmp$2;
			err = _tmp$3;
			$s = -1; return [ret, err];
		}
		_tmp$4 = r;
		_tmp$5 = $ifaceNil;
		ret = _tmp$4;
		err = _tmp$5;
		$s = -1; return [ret, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: File.ptr.prototype.Seek }; } $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f._tuple = _tuple; $f.e = e; $f.err = err; $f.err$1 = err$1; $f.f = f; $f.offset = offset; $f.r = r; $f.ret = ret; $f.whence = whence; $f.$s = $s; $f.$r = $r; return $f;
	};
	File.prototype.Seek = function(offset, whence) { return this.$val.Seek(offset, whence); };
	File.ptr.prototype.WriteString = function(s) {
		var _r, _tuple, err, f, n, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; err = $f.err; f = $f.f; n = $f.n; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = 0;
		err = $ifaceNil;
		f = this;
		_r = f.Write((new sliceType$2($stringToBytes(s)))); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		n = _tuple[0];
		err = _tuple[1];
		$s = -1; return [n, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: File.ptr.prototype.WriteString }; } $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.f = f; $f.n = n; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	File.prototype.WriteString = function(s) { return this.$val.WriteString(s); };
	File.ptr.prototype.wrapErr = function(op, err) {
		var err, f, op;
		f = this;
		if ($interfaceIsEqual(err, $ifaceNil) || $interfaceIsEqual(err, io.EOF)) {
			return err;
		}
		if ($interfaceIsEqual(err, poll.ErrFileClosing)) {
			err = $pkg.ErrClosed;
		}
		return new PathError.ptr(op, f.file.name, err);
	};
	File.prototype.wrapErr = function(op, err) { return this.$val.wrapErr(op, err); };
	File.ptr.prototype.Chmod = function(mode) {
		var _r, f, mode, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; f = $f.f; mode = $f.mode; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		f = this;
		_r = f.chmod(mode); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: File.ptr.prototype.Chmod }; } $f._r = _r; $f.f = f; $f.mode = mode; $f.$s = $s; $f.$r = $r; return $f;
	};
	File.prototype.Chmod = function(mode) { return this.$val.Chmod(mode); };
	File.ptr.prototype.SetDeadline = function(t) {
		var f, t;
		f = this;
		return f.setDeadline($clone(t, time.Time));
	};
	File.prototype.SetDeadline = function(t) { return this.$val.SetDeadline(t); };
	File.ptr.prototype.SetReadDeadline = function(t) {
		var f, t;
		f = this;
		return f.setReadDeadline($clone(t, time.Time));
	};
	File.prototype.SetReadDeadline = function(t) { return this.$val.SetReadDeadline(t); };
	File.ptr.prototype.SetWriteDeadline = function(t) {
		var f, t;
		f = this;
		return f.setWriteDeadline($clone(t, time.Time));
	};
	File.prototype.SetWriteDeadline = function(t) { return this.$val.SetWriteDeadline(t); };
	sigpipe = function() {
		$throwRuntimeError("native function not implemented: os.sigpipe");
	};
	syscallMode = function(i) {
		var i, o;
		o = 0;
		o = (o | (((new FileMode(i).Perm() >>> 0)))) >>> 0;
		if (!((((i & 8388608) >>> 0) === 0))) {
			o = (o | (2048)) >>> 0;
		}
		if (!((((i & 4194304) >>> 0) === 0))) {
			o = (o | (1024)) >>> 0;
		}
		if (!((((i & 1048576) >>> 0) === 0))) {
			o = (o | (512)) >>> 0;
		}
		return o;
	};
	File.ptr.prototype.chmod = function(mode) {
		var _r, e, err, f, mode, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; e = $f.e; err = $f.err; f = $f.f; mode = $f.mode; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		f = this;
		err = f.checkValid("chmod");
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
		}
		_r = f.file.pfd.Fchmod(syscallMode(mode)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		e = _r;
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			$s = -1; return f.wrapErr("chmod", e);
		}
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: File.ptr.prototype.chmod }; } $f._r = _r; $f.e = e; $f.err = err; $f.f = f; $f.mode = mode; $f.$s = $s; $f.$r = $r; return $f;
	};
	File.prototype.chmod = function(mode) { return this.$val.chmod(mode); };
	File.ptr.prototype.Chown = function(uid, gid) {
		var _r, e, err, f, gid, uid, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; e = $f.e; err = $f.err; f = $f.f; gid = $f.gid; uid = $f.uid; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		f = this;
		err = f.checkValid("chown");
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
		}
		_r = f.file.pfd.Fchown(uid, gid); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		e = _r;
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			$s = -1; return f.wrapErr("chown", e);
		}
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: File.ptr.prototype.Chown }; } $f._r = _r; $f.e = e; $f.err = err; $f.f = f; $f.gid = gid; $f.uid = uid; $f.$s = $s; $f.$r = $r; return $f;
	};
	File.prototype.Chown = function(uid, gid) { return this.$val.Chown(uid, gid); };
	File.ptr.prototype.Truncate = function(size) {
		var _r, e, err, f, size, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; e = $f.e; err = $f.err; f = $f.f; size = $f.size; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		f = this;
		err = f.checkValid("truncate");
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
		}
		_r = f.file.pfd.Ftruncate(size); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		e = _r;
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			$s = -1; return f.wrapErr("truncate", e);
		}
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: File.ptr.prototype.Truncate }; } $f._r = _r; $f.e = e; $f.err = err; $f.f = f; $f.size = size; $f.$s = $s; $f.$r = $r; return $f;
	};
	File.prototype.Truncate = function(size) { return this.$val.Truncate(size); };
	File.ptr.prototype.Sync = function() {
		var _r, e, err, f, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; e = $f.e; err = $f.err; f = $f.f; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		f = this;
		err = f.checkValid("sync");
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
		}
		_r = f.file.pfd.Fsync(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		e = _r;
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			$s = -1; return f.wrapErr("sync", e);
		}
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: File.ptr.prototype.Sync }; } $f._r = _r; $f.e = e; $f.err = err; $f.f = f; $f.$s = $s; $f.$r = $r; return $f;
	};
	File.prototype.Sync = function() { return this.$val.Sync(); };
	File.ptr.prototype.Chdir = function() {
		var _r, e, err, f, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; e = $f.e; err = $f.err; f = $f.f; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		f = this;
		err = f.checkValid("chdir");
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
		}
		_r = f.file.pfd.Fchdir(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		e = _r;
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			$s = -1; return f.wrapErr("chdir", e);
		}
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: File.ptr.prototype.Chdir }; } $f._r = _r; $f.e = e; $f.err = err; $f.f = f; $f.$s = $s; $f.$r = $r; return $f;
	};
	File.prototype.Chdir = function() { return this.$val.Chdir(); };
	File.ptr.prototype.setDeadline = function(t) {
		var err, f, t;
		f = this;
		err = f.checkValid("SetDeadline");
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return err;
		}
		return f.file.pfd.SetDeadline($clone(t, time.Time));
	};
	File.prototype.setDeadline = function(t) { return this.$val.setDeadline(t); };
	File.ptr.prototype.setReadDeadline = function(t) {
		var err, f, t;
		f = this;
		err = f.checkValid("SetReadDeadline");
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return err;
		}
		return f.file.pfd.SetReadDeadline($clone(t, time.Time));
	};
	File.prototype.setReadDeadline = function(t) { return this.$val.setReadDeadline(t); };
	File.ptr.prototype.setWriteDeadline = function(t) {
		var err, f, t;
		f = this;
		err = f.checkValid("SetWriteDeadline");
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return err;
		}
		return f.file.pfd.SetWriteDeadline($clone(t, time.Time));
	};
	File.prototype.setWriteDeadline = function(t) { return this.$val.setWriteDeadline(t); };
	File.ptr.prototype.checkValid = function(op) {
		var f, op;
		f = this;
		if (f === ptrType.nil) {
			return $pkg.ErrInvalid;
		}
		return $ifaceNil;
	};
	File.prototype.checkValid = function(op) { return this.$val.checkValid(op); };
	File.ptr.prototype.Fd = function() {
		var _r, f, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; f = $f.f; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		f = this;
		if (f === ptrType.nil) {
			$s = -1; return 4294967295;
		}
		/* */ if (f.file.nonblock) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (f.file.nonblock) { */ case 1:
			_r = f.file.pfd.SetBlocking(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_r;
		/* } */ case 2:
		$s = -1; return ((f.file.pfd.Sysfd >>> 0));
		/* */ } return; } if ($f === undefined) { $f = { $blk: File.ptr.prototype.Fd }; } $f._r = _r; $f.f = f; $f.$s = $s; $f.$r = $r; return $f;
	};
	File.prototype.Fd = function() { return this.$val.Fd(); };
	NewFile = function(fd, name) {
		var fd, name;
		return newFile(fd, name, 0);
	};
	$pkg.NewFile = NewFile;
	newFile = function(fd, name, kind) {
		var err, err$1, f, fd, fdi, kind, name, pollable;
		fdi = ((fd >> 0));
		if (fdi < 0) {
			return ptrType.nil;
		}
		f = new File.ptr(new file.ptr(new poll.FD.ptr(new poll.fdMutex.ptr(new $Uint64(0, 0), 0, 0), fdi, new poll.pollDesc.ptr(false), ptrType$12.nil, 0, true, true, false, false), name, ptrType$1.nil, false, (fdi === 1) || (fdi === 2)));
		if (false && (kind === 1)) {
			kind = 0;
		}
		pollable = (kind === 1) || (kind === 2);
		err = f.file.pfd.Init("file", pollable);
		if (!($interfaceIsEqual(err, $ifaceNil))) {
		} else if (pollable) {
			err$1 = syscall.SetNonblock(fdi, true);
			if ($interfaceIsEqual(err$1, $ifaceNil)) {
				f.file.nonblock = true;
			}
		}
		runtime.SetFinalizer(f.file, new funcType$1($methodExpr(ptrType$13, "close")));
		return f;
	};
	epipecheck = function(file$1, e) {
		var e, file$1;
		if ($interfaceIsEqual(e, new syscall.Errno(32)) && file$1.file.stdoutOrErr) {
			sigpipe();
		}
	};
	File.ptr.prototype.Close = function() {
		var _r, f, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; f = $f.f; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		f = this;
		if (f === ptrType.nil) {
			$s = -1; return $pkg.ErrInvalid;
		}
		_r = f.file.close(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: File.ptr.prototype.Close }; } $f._r = _r; $f.f = f; $f.$s = $s; $f.$r = $r; return $f;
	};
	File.prototype.Close = function() { return this.$val.Close(); };
	file.ptr.prototype.close = function() {
		var _r, e, err, file$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; e = $f.e; err = $f.err; file$1 = $f.file$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		file$1 = this;
		if (file$1 === ptrType$13.nil) {
			$s = -1; return new syscall.Errno(22);
		}
		err = $ifaceNil;
		_r = file$1.pfd.Close(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		e = _r;
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			if ($interfaceIsEqual(e, poll.ErrFileClosing)) {
				e = $pkg.ErrClosed;
			}
			err = new PathError.ptr("close", file$1.name, e);
		}
		runtime.SetFinalizer(file$1, $ifaceNil);
		$s = -1; return err;
		/* */ } return; } if ($f === undefined) { $f = { $blk: file.ptr.prototype.close }; } $f._r = _r; $f.e = e; $f.err = err; $f.file$1 = file$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	file.prototype.close = function() { return this.$val.close(); };
	File.ptr.prototype.read = function(b) {
		var _r, _tmp, _tmp$1, _tuple, b, err, f, n, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tuple = $f._tuple; b = $f.b; err = $f.err; f = $f.f; n = $f.n; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = 0;
		err = $ifaceNil;
		f = this;
		_r = f.file.pfd.Read(b); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		n = _tuple[0];
		err = _tuple[1];
		runtime.KeepAlive(f);
		_tmp = n;
		_tmp$1 = err;
		n = _tmp;
		err = _tmp$1;
		$s = -1; return [n, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: File.ptr.prototype.read }; } $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tuple = _tuple; $f.b = b; $f.err = err; $f.f = f; $f.n = n; $f.$s = $s; $f.$r = $r; return $f;
	};
	File.prototype.read = function(b) { return this.$val.read(b); };
	File.ptr.prototype.pread = function(b, off) {
		var _r, _tmp, _tmp$1, _tuple, b, err, f, n, off, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tuple = $f._tuple; b = $f.b; err = $f.err; f = $f.f; n = $f.n; off = $f.off; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = 0;
		err = $ifaceNil;
		f = this;
		_r = f.file.pfd.Pread(b, off); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		n = _tuple[0];
		err = _tuple[1];
		runtime.KeepAlive(f);
		_tmp = n;
		_tmp$1 = err;
		n = _tmp;
		err = _tmp$1;
		$s = -1; return [n, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: File.ptr.prototype.pread }; } $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tuple = _tuple; $f.b = b; $f.err = err; $f.f = f; $f.n = n; $f.off = off; $f.$s = $s; $f.$r = $r; return $f;
	};
	File.prototype.pread = function(b, off) { return this.$val.pread(b, off); };
	File.ptr.prototype.write = function(b) {
		var _r, _tmp, _tmp$1, _tuple, b, err, f, n, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tuple = $f._tuple; b = $f.b; err = $f.err; f = $f.f; n = $f.n; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = 0;
		err = $ifaceNil;
		f = this;
		_r = f.file.pfd.Write(b); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		n = _tuple[0];
		err = _tuple[1];
		runtime.KeepAlive(f);
		_tmp = n;
		_tmp$1 = err;
		n = _tmp;
		err = _tmp$1;
		$s = -1; return [n, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: File.ptr.prototype.write }; } $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tuple = _tuple; $f.b = b; $f.err = err; $f.f = f; $f.n = n; $f.$s = $s; $f.$r = $r; return $f;
	};
	File.prototype.write = function(b) { return this.$val.write(b); };
	File.ptr.prototype.pwrite = function(b, off) {
		var _r, _tmp, _tmp$1, _tuple, b, err, f, n, off, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tuple = $f._tuple; b = $f.b; err = $f.err; f = $f.f; n = $f.n; off = $f.off; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = 0;
		err = $ifaceNil;
		f = this;
		_r = f.file.pfd.Pwrite(b, off); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		n = _tuple[0];
		err = _tuple[1];
		runtime.KeepAlive(f);
		_tmp = n;
		_tmp$1 = err;
		n = _tmp;
		err = _tmp$1;
		$s = -1; return [n, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: File.ptr.prototype.pwrite }; } $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tuple = _tuple; $f.b = b; $f.err = err; $f.f = f; $f.n = n; $f.off = off; $f.$s = $s; $f.$r = $r; return $f;
	};
	File.prototype.pwrite = function(b, off) { return this.$val.pwrite(b, off); };
	File.ptr.prototype.seek = function(offset, whence) {
		var _r, _tmp, _tmp$1, _tuple, err, f, offset, ret, whence, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tuple = $f._tuple; err = $f.err; f = $f.f; offset = $f.offset; ret = $f.ret; whence = $f.whence; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		ret = new $Int64(0, 0);
		err = $ifaceNil;
		f = this;
		_r = f.file.pfd.Seek(offset, whence); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		ret = _tuple[0];
		err = _tuple[1];
		runtime.KeepAlive(f);
		_tmp = ret;
		_tmp$1 = err;
		ret = _tmp;
		err = _tmp$1;
		$s = -1; return [ret, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: File.ptr.prototype.seek }; } $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tuple = _tuple; $f.err = err; $f.f = f; $f.offset = offset; $f.ret = ret; $f.whence = whence; $f.$s = $s; $f.$r = $r; return $f;
	};
	File.prototype.seek = function(offset, whence) { return this.$val.seek(offset, whence); };
	IsPathSeparator = function(c) {
		var c;
		return 47 === c;
	};
	$pkg.IsPathSeparator = IsPathSeparator;
	basename = function(name) {
		var i, name;
		i = name.length - 1 >> 0;
		while (true) {
			if (!(i > 0 && (name.charCodeAt(i) === 47))) { break; }
			name = $substring(name, 0, i);
			i = i - (1) >> 0;
		}
		i = i - (1) >> 0;
		while (true) {
			if (!(i >= 0)) { break; }
			if (name.charCodeAt(i) === 47) {
				name = $substring(name, (i + 1 >> 0));
				break;
			}
			i = i - (1) >> 0;
		}
		return name;
	};
	init$1 = function() {
		if (false) {
			return;
		}
		$pkg.Args = runtime_args();
	};
	Exit = function(code) {
		var code;
		if (code === 0) {
			runtime_beforeExit();
		}
		syscall.Exit(code);
	};
	$pkg.Exit = Exit;
	Lstat = function(name) {
		var name, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; name = $f.name; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = testlog.Stat(name); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return lstatNolog(name);
		/* */ } return; } if ($f === undefined) { $f = { $blk: Lstat }; } $f.name = name; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Lstat = Lstat;
	fillFileStatFromSys = function(fs, name) {
		var _1, fs, name;
		fs.name = basename(name);
		fs.size = fs.sys.Size;
		time.Time.copy(fs.modTime, timespecToTime($clone(fs.sys.Mtim, syscall.Timespec)));
		fs.mode = ((((fs.sys.Mode & 511) >>> 0) >>> 0));
		_1 = (fs.sys.Mode & 61440) >>> 0;
		if (_1 === (24576)) {
			fs.mode = (fs.mode | (67108864)) >>> 0;
		} else if (_1 === (8192)) {
			fs.mode = (fs.mode | (69206016)) >>> 0;
		} else if (_1 === (16384)) {
			fs.mode = (fs.mode | (2147483648)) >>> 0;
		} else if (_1 === (4096)) {
			fs.mode = (fs.mode | (33554432)) >>> 0;
		} else if (_1 === (40960)) {
			fs.mode = (fs.mode | (134217728)) >>> 0;
		} else if (_1 === (32768)) {
		} else if (_1 === (49152)) {
			fs.mode = (fs.mode | (16777216)) >>> 0;
		}
		if (!((((fs.sys.Mode & 1024) >>> 0) === 0))) {
			fs.mode = (fs.mode | (4194304)) >>> 0;
		}
		if (!((((fs.sys.Mode & 2048) >>> 0) === 0))) {
			fs.mode = (fs.mode | (8388608)) >>> 0;
		}
		if (!((((fs.sys.Mode & 512) >>> 0) === 0))) {
			fs.mode = (fs.mode | (1048576)) >>> 0;
		}
	};
	timespecToTime = function(ts) {
		var ts;
		return time.Unix(ts.Sec, (ts.Nsec));
	};
	File.ptr.prototype.Stat = function() {
		var _r, err, f, fs, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; err = $f.err; f = $f.f; fs = $f.fs; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		fs = [fs];
		f = this;
		if (f === ptrType.nil) {
			$s = -1; return [$ifaceNil, $pkg.ErrInvalid];
		}
		fs[0] = new fileStat.ptr("", new $Int64(0, 0), 0, new time.Time.ptr(new $Uint64(0, 0), new $Int64(0, 0), ptrType$15.nil), new syscall.Stat_t.ptr(0, 0, new $Uint64(0, 0), 0, 0, 0, 0, new syscall.Timespec.ptr(new $Int64(0, 0), new $Int64(0, 0)), new syscall.Timespec.ptr(new $Int64(0, 0), new $Int64(0, 0)), new syscall.Timespec.ptr(new $Int64(0, 0), new $Int64(0, 0)), new $Int64(0, 0), new $Int64(0, 0), 0, 0, 0, arrayType$2.zero(), new syscall.Timespec.ptr(new $Int64(0, 0), new $Int64(0, 0))));
		_r = f.file.pfd.Fstat(fs[0].sys); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		err = _r;
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [$ifaceNil, new PathError.ptr("stat", f.file.name, err)];
		}
		fillFileStatFromSys(fs[0], f.file.name);
		$s = -1; return [fs[0], $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: File.ptr.prototype.Stat }; } $f._r = _r; $f.err = err; $f.f = f; $f.fs = fs; $f.$s = $s; $f.$r = $r; return $f;
	};
	File.prototype.Stat = function() { return this.$val.Stat(); };
	lstatNolog = function(name) {
		var err, fs, name;
		fs = new fileStat.ptr("", new $Int64(0, 0), 0, new time.Time.ptr(new $Uint64(0, 0), new $Int64(0, 0), ptrType$15.nil), new syscall.Stat_t.ptr(0, 0, new $Uint64(0, 0), 0, 0, 0, 0, new syscall.Timespec.ptr(new $Int64(0, 0), new $Int64(0, 0)), new syscall.Timespec.ptr(new $Int64(0, 0), new $Int64(0, 0)), new syscall.Timespec.ptr(new $Int64(0, 0), new $Int64(0, 0)), new $Int64(0, 0), new $Int64(0, 0), 0, 0, 0, arrayType$2.zero(), new syscall.Timespec.ptr(new $Int64(0, 0), new $Int64(0, 0))));
		err = syscall.Lstat(name, fs.sys);
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return [$ifaceNil, new PathError.ptr("lstat", name, err)];
		}
		fillFileStatFromSys(fs, name);
		return [fs, $ifaceNil];
	};
	FileMode.prototype.String = function() {
		var _i, _i$1, _ref, _ref$1, _rune, _rune$1, buf, c, c$1, i, i$1, m, w, y, y$1;
		m = this.$val;
		buf = arrayType$4.zero();
		w = 0;
		_ref = "dalTLDpSugct";
		_i = 0;
		while (true) {
			if (!(_i < _ref.length)) { break; }
			_rune = $decodeRune(_ref, _i);
			i = _i;
			c = _rune[0];
			if (!((((m & (((y = (((31 - i >> 0) >>> 0)), y < 32 ? (1 << y) : 0) >>> 0))) >>> 0) === 0))) {
				((w < 0 || w >= buf.length) ? ($throwRuntimeError("index out of range"), undefined) : buf[w] = ((c << 24 >>> 24)));
				w = w + (1) >> 0;
			}
			_i += _rune[1];
		}
		if (w === 0) {
			((w < 0 || w >= buf.length) ? ($throwRuntimeError("index out of range"), undefined) : buf[w] = 45);
			w = w + (1) >> 0;
		}
		_ref$1 = "rwxrwxrwx";
		_i$1 = 0;
		while (true) {
			if (!(_i$1 < _ref$1.length)) { break; }
			_rune$1 = $decodeRune(_ref$1, _i$1);
			i$1 = _i$1;
			c$1 = _rune$1[0];
			if (!((((m & (((y$1 = (((8 - i$1 >> 0) >>> 0)), y$1 < 32 ? (1 << y$1) : 0) >>> 0))) >>> 0) === 0))) {
				((w < 0 || w >= buf.length) ? ($throwRuntimeError("index out of range"), undefined) : buf[w] = ((c$1 << 24 >>> 24)));
			} else {
				((w < 0 || w >= buf.length) ? ($throwRuntimeError("index out of range"), undefined) : buf[w] = 45);
			}
			w = w + (1) >> 0;
			_i$1 += _rune$1[1];
		}
		return ($bytesToString($subslice(new sliceType$2(buf), 0, w)));
	};
	$ptrType(FileMode).prototype.String = function() { return new FileMode(this.$get()).String(); };
	FileMode.prototype.IsDir = function() {
		var m;
		m = this.$val;
		return !((((m & 2147483648) >>> 0) === 0));
	};
	$ptrType(FileMode).prototype.IsDir = function() { return new FileMode(this.$get()).IsDir(); };
	FileMode.prototype.IsRegular = function() {
		var m;
		m = this.$val;
		return ((m & 2399141888) >>> 0) === 0;
	};
	$ptrType(FileMode).prototype.IsRegular = function() { return new FileMode(this.$get()).IsRegular(); };
	FileMode.prototype.Perm = function() {
		var m;
		m = this.$val;
		return (m & 511) >>> 0;
	};
	$ptrType(FileMode).prototype.Perm = function() { return new FileMode(this.$get()).Perm(); };
	fileStat.ptr.prototype.Name = function() {
		var fs;
		fs = this;
		return fs.name;
	};
	fileStat.prototype.Name = function() { return this.$val.Name(); };
	fileStat.ptr.prototype.IsDir = function() {
		var fs;
		fs = this;
		return new FileMode(fs.Mode()).IsDir();
	};
	fileStat.prototype.IsDir = function() { return this.$val.IsDir(); };
	fileStat.ptr.prototype.Size = function() {
		var fs;
		fs = this;
		return fs.size;
	};
	fileStat.prototype.Size = function() { return this.$val.Size(); };
	fileStat.ptr.prototype.Mode = function() {
		var fs;
		fs = this;
		return fs.mode;
	};
	fileStat.prototype.Mode = function() { return this.$val.Mode(); };
	fileStat.ptr.prototype.ModTime = function() {
		var fs;
		fs = this;
		return fs.modTime;
	};
	fileStat.prototype.ModTime = function() { return this.$val.ModTime(); };
	fileStat.ptr.prototype.Sys = function() {
		var fs;
		fs = this;
		return fs.sys;
	};
	fileStat.prototype.Sys = function() { return this.$val.Sys(); };
	ptrType$2.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Timeout", name: "Timeout", pkg: "", typ: $funcType([], [$Bool], false)}];
	ptrType$4.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Timeout", name: "Timeout", pkg: "", typ: $funcType([], [$Bool], false)}];
	ptrType$3.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$13.methods = [{prop: "close", name: "close", pkg: "os", typ: $funcType([], [$error], false)}];
	ptrType.methods = [{prop: "Readdir", name: "Readdir", pkg: "", typ: $funcType([$Int], [sliceType$1, $error], false)}, {prop: "Readdirnames", name: "Readdirnames", pkg: "", typ: $funcType([$Int], [sliceType, $error], false)}, {prop: "readdir", name: "readdir", pkg: "os", typ: $funcType([$Int], [sliceType$1, $error], false)}, {prop: "readdirnames", name: "readdirnames", pkg: "os", typ: $funcType([$Int], [sliceType, $error], false)}, {prop: "Name", name: "Name", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Read", name: "Read", pkg: "", typ: $funcType([sliceType$2], [$Int, $error], false)}, {prop: "ReadAt", name: "ReadAt", pkg: "", typ: $funcType([sliceType$2, $Int64], [$Int, $error], false)}, {prop: "Write", name: "Write", pkg: "", typ: $funcType([sliceType$2], [$Int, $error], false)}, {prop: "WriteAt", name: "WriteAt", pkg: "", typ: $funcType([sliceType$2, $Int64], [$Int, $error], false)}, {prop: "Seek", name: "Seek", pkg: "", typ: $funcType([$Int64, $Int], [$Int64, $error], false)}, {prop: "WriteString", name: "WriteString", pkg: "", typ: $funcType([$String], [$Int, $error], false)}, {prop: "wrapErr", name: "wrapErr", pkg: "os", typ: $funcType([$String, $error], [$error], false)}, {prop: "Chmod", name: "Chmod", pkg: "", typ: $funcType([FileMode], [$error], false)}, {prop: "SetDeadline", name: "SetDeadline", pkg: "", typ: $funcType([time.Time], [$error], false)}, {prop: "SetReadDeadline", name: "SetReadDeadline", pkg: "", typ: $funcType([time.Time], [$error], false)}, {prop: "SetWriteDeadline", name: "SetWriteDeadline", pkg: "", typ: $funcType([time.Time], [$error], false)}, {prop: "chmod", name: "chmod", pkg: "os", typ: $funcType([FileMode], [$error], false)}, {prop: "Chown", name: "Chown", pkg: "", typ: $funcType([$Int, $Int], [$error], false)}, {prop: "Truncate", name: "Truncate", pkg: "", typ: $funcType([$Int64], [$error], false)}, {prop: "Sync", name: "Sync", pkg: "", typ: $funcType([], [$error], false)}, {prop: "Chdir", name: "Chdir", pkg: "", typ: $funcType([], [$error], false)}, {prop: "setDeadline", name: "setDeadline", pkg: "os", typ: $funcType([time.Time], [$error], false)}, {prop: "setReadDeadline", name: "setReadDeadline", pkg: "os", typ: $funcType([time.Time], [$error], false)}, {prop: "setWriteDeadline", name: "setWriteDeadline", pkg: "os", typ: $funcType([time.Time], [$error], false)}, {prop: "checkValid", name: "checkValid", pkg: "os", typ: $funcType([$String], [$error], false)}, {prop: "Fd", name: "Fd", pkg: "", typ: $funcType([], [$Uintptr], false)}, {prop: "Close", name: "Close", pkg: "", typ: $funcType([], [$error], false)}, {prop: "read", name: "read", pkg: "os", typ: $funcType([sliceType$2], [$Int, $error], false)}, {prop: "pread", name: "pread", pkg: "os", typ: $funcType([sliceType$2, $Int64], [$Int, $error], false)}, {prop: "write", name: "write", pkg: "os", typ: $funcType([sliceType$2], [$Int, $error], false)}, {prop: "pwrite", name: "pwrite", pkg: "os", typ: $funcType([sliceType$2, $Int64], [$Int, $error], false)}, {prop: "seek", name: "seek", pkg: "os", typ: $funcType([$Int64, $Int], [$Int64, $error], false)}, {prop: "Stat", name: "Stat", pkg: "", typ: $funcType([], [FileInfo, $error], false)}];
	FileMode.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "IsDir", name: "IsDir", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "IsRegular", name: "IsRegular", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Perm", name: "Perm", pkg: "", typ: $funcType([], [FileMode], false)}];
	ptrType$16.methods = [{prop: "Name", name: "Name", pkg: "", typ: $funcType([], [$String], false)}, {prop: "IsDir", name: "IsDir", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Size", name: "Size", pkg: "", typ: $funcType([], [$Int64], false)}, {prop: "Mode", name: "Mode", pkg: "", typ: $funcType([], [FileMode], false)}, {prop: "ModTime", name: "ModTime", pkg: "", typ: $funcType([], [time.Time], false)}, {prop: "Sys", name: "Sys", pkg: "", typ: $funcType([], [$emptyInterface], false)}];
	timeout.init([{prop: "Timeout", name: "Timeout", pkg: "", typ: $funcType([], [$Bool], false)}]);
	PathError.init("", [{prop: "Op", name: "Op", anonymous: false, exported: true, typ: $String, tag: ""}, {prop: "Path", name: "Path", anonymous: false, exported: true, typ: $String, tag: ""}, {prop: "Err", name: "Err", anonymous: false, exported: true, typ: $error, tag: ""}]);
	SyscallError.init("", [{prop: "Syscall", name: "Syscall", anonymous: false, exported: true, typ: $String, tag: ""}, {prop: "Err", name: "Err", anonymous: false, exported: true, typ: $error, tag: ""}]);
	LinkError.init("", [{prop: "Op", name: "Op", anonymous: false, exported: true, typ: $String, tag: ""}, {prop: "Old", name: "Old", anonymous: false, exported: true, typ: $String, tag: ""}, {prop: "New", name: "New", anonymous: false, exported: true, typ: $String, tag: ""}, {prop: "Err", name: "Err", anonymous: false, exported: true, typ: $error, tag: ""}]);
	file.init("os", [{prop: "pfd", name: "pfd", anonymous: false, exported: false, typ: poll.FD, tag: ""}, {prop: "name", name: "name", anonymous: false, exported: false, typ: $String, tag: ""}, {prop: "dirinfo", name: "dirinfo", anonymous: false, exported: false, typ: ptrType$1, tag: ""}, {prop: "nonblock", name: "nonblock", anonymous: false, exported: false, typ: $Bool, tag: ""}, {prop: "stdoutOrErr", name: "stdoutOrErr", anonymous: false, exported: false, typ: $Bool, tag: ""}]);
	dirInfo.init("os", [{prop: "buf", name: "buf", anonymous: false, exported: false, typ: sliceType$2, tag: ""}, {prop: "nbuf", name: "nbuf", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "bufp", name: "bufp", anonymous: false, exported: false, typ: $Int, tag: ""}]);
	File.init("os", [{prop: "file", name: "file", anonymous: true, exported: false, typ: ptrType$13, tag: ""}]);
	FileInfo.init([{prop: "IsDir", name: "IsDir", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "ModTime", name: "ModTime", pkg: "", typ: $funcType([], [time.Time], false)}, {prop: "Mode", name: "Mode", pkg: "", typ: $funcType([], [FileMode], false)}, {prop: "Name", name: "Name", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Size", name: "Size", pkg: "", typ: $funcType([], [$Int64], false)}, {prop: "Sys", name: "Sys", pkg: "", typ: $funcType([], [$emptyInterface], false)}]);
	fileStat.init("os", [{prop: "name", name: "name", anonymous: false, exported: false, typ: $String, tag: ""}, {prop: "size", name: "size", anonymous: false, exported: false, typ: $Int64, tag: ""}, {prop: "mode", name: "mode", anonymous: false, exported: false, typ: FileMode, tag: ""}, {prop: "modTime", name: "modTime", anonymous: false, exported: false, typ: time.Time, tag: ""}, {prop: "sys", name: "sys", anonymous: false, exported: false, typ: syscall.Stat_t, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = errors.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = js.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = poll.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = testlog.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = io.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = runtime.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = sync.$init(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = atomic.$init(); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = syscall.$init(); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = time.$init(); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$pkg.Args = sliceType.nil;
		$pkg.ErrInvalid = errors.New("invalid argument");
		$pkg.ErrPermission = errors.New("permission denied");
		$pkg.ErrExist = errors.New("file already exists");
		$pkg.ErrNotExist = errors.New("file does not exist");
		$pkg.ErrClosed = errors.New("file already closed");
		errFinished = errors.New("os: process already finished");
		$pkg.Stdin = NewFile(((syscall.Stdin >>> 0)), "/dev/stdin");
		$pkg.Stdout = NewFile(((syscall.Stdout >>> 0)), "/dev/stdout");
		$pkg.Stderr = NewFile(((syscall.Stderr >>> 0)), "/dev/stderr");
		lstat = Lstat;
		init();
		init$1();
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["fmt"] = (function() {
	var $pkg = {}, $init, errors, io, math, os, reflect, strconv, sync, utf8, fmtFlags, fmt, State, Formatter, Stringer, GoStringer, buffer, pp, ScanState, scanError, ss, ssave, sliceType, ptrType, ptrType$1, arrayType, arrayType$1, sliceType$1, sliceType$2, arrayType$2, ptrType$2, ptrType$5, ptrType$25, funcType, ppFree, space, ssFree, complexError, boolError, newPrinter, Fprintf, Sprintf, Errorf, Fprint, Sprint, Sprintln, getField, tooLarge, parsenum, intFromArg, parseArgNumber, isSpace, notSpace, indexRune;
	errors = $packages["errors"];
	io = $packages["io"];
	math = $packages["math"];
	os = $packages["os"];
	reflect = $packages["reflect"];
	strconv = $packages["strconv"];
	sync = $packages["sync"];
	utf8 = $packages["unicode/utf8"];
	fmtFlags = $pkg.fmtFlags = $newType(0, $kindStruct, "fmt.fmtFlags", true, "fmt", false, function(widPresent_, precPresent_, minus_, plus_, sharp_, space_, zero_, plusV_, sharpV_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.widPresent = false;
			this.precPresent = false;
			this.minus = false;
			this.plus = false;
			this.sharp = false;
			this.space = false;
			this.zero = false;
			this.plusV = false;
			this.sharpV = false;
			return;
		}
		this.widPresent = widPresent_;
		this.precPresent = precPresent_;
		this.minus = minus_;
		this.plus = plus_;
		this.sharp = sharp_;
		this.space = space_;
		this.zero = zero_;
		this.plusV = plusV_;
		this.sharpV = sharpV_;
	});
	fmt = $pkg.fmt = $newType(0, $kindStruct, "fmt.fmt", true, "fmt", false, function(buf_, fmtFlags_, wid_, prec_, intbuf_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.buf = ptrType$1.nil;
			this.fmtFlags = new fmtFlags.ptr(false, false, false, false, false, false, false, false, false);
			this.wid = 0;
			this.prec = 0;
			this.intbuf = arrayType.zero();
			return;
		}
		this.buf = buf_;
		this.fmtFlags = fmtFlags_;
		this.wid = wid_;
		this.prec = prec_;
		this.intbuf = intbuf_;
	});
	State = $pkg.State = $newType(8, $kindInterface, "fmt.State", true, "fmt", true, null);
	Formatter = $pkg.Formatter = $newType(8, $kindInterface, "fmt.Formatter", true, "fmt", true, null);
	Stringer = $pkg.Stringer = $newType(8, $kindInterface, "fmt.Stringer", true, "fmt", true, null);
	GoStringer = $pkg.GoStringer = $newType(8, $kindInterface, "fmt.GoStringer", true, "fmt", true, null);
	buffer = $pkg.buffer = $newType(12, $kindSlice, "fmt.buffer", true, "fmt", false, null);
	pp = $pkg.pp = $newType(0, $kindStruct, "fmt.pp", true, "fmt", false, function(buf_, arg_, value_, fmt_, reordered_, goodArgNum_, panicking_, erroring_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.buf = buffer.nil;
			this.arg = $ifaceNil;
			this.value = new reflect.Value.ptr(ptrType.nil, 0, 0);
			this.fmt = new fmt.ptr(ptrType$1.nil, new fmtFlags.ptr(false, false, false, false, false, false, false, false, false), 0, 0, arrayType.zero());
			this.reordered = false;
			this.goodArgNum = false;
			this.panicking = false;
			this.erroring = false;
			return;
		}
		this.buf = buf_;
		this.arg = arg_;
		this.value = value_;
		this.fmt = fmt_;
		this.reordered = reordered_;
		this.goodArgNum = goodArgNum_;
		this.panicking = panicking_;
		this.erroring = erroring_;
	});
	ScanState = $pkg.ScanState = $newType(8, $kindInterface, "fmt.ScanState", true, "fmt", true, null);
	scanError = $pkg.scanError = $newType(0, $kindStruct, "fmt.scanError", true, "fmt", false, function(err_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.err = $ifaceNil;
			return;
		}
		this.err = err_;
	});
	ss = $pkg.ss = $newType(0, $kindStruct, "fmt.ss", true, "fmt", false, function(rs_, buf_, count_, atEOF_, ssave_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.rs = $ifaceNil;
			this.buf = buffer.nil;
			this.count = 0;
			this.atEOF = false;
			this.ssave = new ssave.ptr(false, false, false, 0, 0, 0);
			return;
		}
		this.rs = rs_;
		this.buf = buf_;
		this.count = count_;
		this.atEOF = atEOF_;
		this.ssave = ssave_;
	});
	ssave = $pkg.ssave = $newType(0, $kindStruct, "fmt.ssave", true, "fmt", false, function(validSave_, nlIsEnd_, nlIsSpace_, argLimit_, limit_, maxWid_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.validSave = false;
			this.nlIsEnd = false;
			this.nlIsSpace = false;
			this.argLimit = 0;
			this.limit = 0;
			this.maxWid = 0;
			return;
		}
		this.validSave = validSave_;
		this.nlIsEnd = nlIsEnd_;
		this.nlIsSpace = nlIsSpace_;
		this.argLimit = argLimit_;
		this.limit = limit_;
		this.maxWid = maxWid_;
	});
	sliceType = $sliceType($emptyInterface);
	ptrType = $ptrType(reflect.rtype);
	ptrType$1 = $ptrType(buffer);
	arrayType = $arrayType($Uint8, 68);
	arrayType$1 = $arrayType($Uint16, 2);
	sliceType$1 = $sliceType(arrayType$1);
	sliceType$2 = $sliceType($Uint8);
	arrayType$2 = $arrayType($Uint8, 5);
	ptrType$2 = $ptrType(pp);
	ptrType$5 = $ptrType(ss);
	ptrType$25 = $ptrType(fmt);
	funcType = $funcType([$Int32], [$Bool], false);
	fmt.ptr.prototype.clearflags = function() {
		var f;
		f = this;
		fmtFlags.copy(f.fmtFlags, new fmtFlags.ptr(false, false, false, false, false, false, false, false, false));
	};
	fmt.prototype.clearflags = function() { return this.$val.clearflags(); };
	fmt.ptr.prototype.init = function(buf) {
		var buf, f;
		f = this;
		f.buf = buf;
		f.clearflags();
	};
	fmt.prototype.init = function(buf) { return this.$val.init(buf); };
	fmt.ptr.prototype.writePadding = function(n) {
		var _i, _ref, buf, f, i, n, newLen, oldLen, padByte, padding;
		f = this;
		if (n <= 0) {
			return;
		}
		buf = f.buf.$get();
		oldLen = buf.$length;
		newLen = oldLen + n >> 0;
		if (newLen > buf.$capacity) {
			buf = $makeSlice(buffer, (($imul(buf.$capacity, 2)) + n >> 0));
			$copySlice(buf, f.buf.$get());
		}
		padByte = 32;
		if (f.fmtFlags.zero) {
			padByte = 48;
		}
		padding = $subslice(buf, oldLen, newLen);
		_ref = padding;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			((i < 0 || i >= padding.$length) ? ($throwRuntimeError("index out of range"), undefined) : padding.$array[padding.$offset + i] = padByte);
			_i++;
		}
		f.buf.$set($subslice(buf, 0, newLen));
	};
	fmt.prototype.writePadding = function(n) { return this.$val.writePadding(n); };
	fmt.ptr.prototype.pad = function(b) {
		var b, f, width;
		f = this;
		if (!f.fmtFlags.widPresent || (f.wid === 0)) {
			f.buf.Write(b);
			return;
		}
		width = f.wid - utf8.RuneCount(b) >> 0;
		if (!f.fmtFlags.minus) {
			f.writePadding(width);
			f.buf.Write(b);
		} else {
			f.buf.Write(b);
			f.writePadding(width);
		}
	};
	fmt.prototype.pad = function(b) { return this.$val.pad(b); };
	fmt.ptr.prototype.padString = function(s) {
		var f, s, width;
		f = this;
		if (!f.fmtFlags.widPresent || (f.wid === 0)) {
			f.buf.WriteString(s);
			return;
		}
		width = f.wid - utf8.RuneCountInString(s) >> 0;
		if (!f.fmtFlags.minus) {
			f.writePadding(width);
			f.buf.WriteString(s);
		} else {
			f.buf.WriteString(s);
			f.writePadding(width);
		}
	};
	fmt.prototype.padString = function(s) { return this.$val.padString(s); };
	fmt.ptr.prototype.fmt_boolean = function(v) {
		var f, v;
		f = this;
		if (v) {
			f.padString("true");
		} else {
			f.padString("false");
		}
	};
	fmt.prototype.fmt_boolean = function(v) { return this.$val.fmt_boolean(v); };
	fmt.ptr.prototype.fmt_unicode = function(u) {
		var buf, f, i, oldZero, prec, u, width;
		f = this;
		buf = $subslice(new sliceType$2(f.intbuf), 0);
		prec = 4;
		if (f.fmtFlags.precPresent && f.prec > 4) {
			prec = f.prec;
			width = (((2 + prec >> 0) + 2 >> 0) + 4 >> 0) + 1 >> 0;
			if (width > buf.$length) {
				buf = $makeSlice(sliceType$2, width);
			}
		}
		i = buf.$length;
		if (f.fmtFlags.sharp && (u.$high < 0 || (u.$high === 0 && u.$low <= 1114111)) && strconv.IsPrint(((u.$low >> 0)))) {
			i = i - (1) >> 0;
			((i < 0 || i >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + i] = 39);
			i = i - (utf8.RuneLen(((u.$low >> 0)))) >> 0;
			utf8.EncodeRune($subslice(buf, i), ((u.$low >> 0)));
			i = i - (1) >> 0;
			((i < 0 || i >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + i] = 39);
			i = i - (1) >> 0;
			((i < 0 || i >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + i] = 32);
		}
		while (true) {
			if (!((u.$high > 0 || (u.$high === 0 && u.$low >= 16)))) { break; }
			i = i - (1) >> 0;
			((i < 0 || i >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + i] = "0123456789ABCDEFX".charCodeAt($flatten64(new $Uint64(u.$high & 0, (u.$low & 15) >>> 0))));
			prec = prec - (1) >> 0;
			u = $shiftRightUint64(u, (4));
		}
		i = i - (1) >> 0;
		((i < 0 || i >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + i] = "0123456789ABCDEFX".charCodeAt($flatten64(u)));
		prec = prec - (1) >> 0;
		while (true) {
			if (!(prec > 0)) { break; }
			i = i - (1) >> 0;
			((i < 0 || i >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + i] = 48);
			prec = prec - (1) >> 0;
		}
		i = i - (1) >> 0;
		((i < 0 || i >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + i] = 43);
		i = i - (1) >> 0;
		((i < 0 || i >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + i] = 85);
		oldZero = f.fmtFlags.zero;
		f.fmtFlags.zero = false;
		f.pad($subslice(buf, i));
		f.fmtFlags.zero = oldZero;
	};
	fmt.prototype.fmt_unicode = function(u) { return this.$val.fmt_unicode(u); };
	fmt.ptr.prototype.fmt_integer = function(u, base, isSigned, digits) {
		var _1, _2, base, buf, digits, f, i, isSigned, negative, next, oldZero, oldZero$1, prec, u, width, x, x$1, x$2, x$3, x$4;
		f = this;
		negative = isSigned && (x = (new $Int64(u.$high, u.$low)), (x.$high < 0 || (x.$high === 0 && x.$low < 0)));
		if (negative) {
			u = new $Uint64(-u.$high, -u.$low);
		}
		buf = $subslice(new sliceType$2(f.intbuf), 0);
		if (f.fmtFlags.widPresent || f.fmtFlags.precPresent) {
			width = (3 + f.wid >> 0) + f.prec >> 0;
			if (width > buf.$length) {
				buf = $makeSlice(sliceType$2, width);
			}
		}
		prec = 0;
		if (f.fmtFlags.precPresent) {
			prec = f.prec;
			if ((prec === 0) && (u.$high === 0 && u.$low === 0)) {
				oldZero = f.fmtFlags.zero;
				f.fmtFlags.zero = false;
				f.writePadding(f.wid);
				f.fmtFlags.zero = oldZero;
				return;
			}
		} else if (f.fmtFlags.zero && f.fmtFlags.widPresent) {
			prec = f.wid;
			if (negative || f.fmtFlags.plus || f.fmtFlags.space) {
				prec = prec - (1) >> 0;
			}
		}
		i = buf.$length;
		_1 = base;
		if (_1 === (10)) {
			while (true) {
				if (!((u.$high > 0 || (u.$high === 0 && u.$low >= 10)))) { break; }
				i = i - (1) >> 0;
				next = $div64(u, new $Uint64(0, 10), false);
				((i < 0 || i >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + i] = (((x$1 = new $Uint64(0 + u.$high, 48 + u.$low), x$2 = $mul64(next, new $Uint64(0, 10)), new $Uint64(x$1.$high - x$2.$high, x$1.$low - x$2.$low)).$low << 24 >>> 24)));
				u = next;
			}
		} else if (_1 === (16)) {
			while (true) {
				if (!((u.$high > 0 || (u.$high === 0 && u.$low >= 16)))) { break; }
				i = i - (1) >> 0;
				((i < 0 || i >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + i] = digits.charCodeAt($flatten64(new $Uint64(u.$high & 0, (u.$low & 15) >>> 0))));
				u = $shiftRightUint64(u, (4));
			}
		} else if (_1 === (8)) {
			while (true) {
				if (!((u.$high > 0 || (u.$high === 0 && u.$low >= 8)))) { break; }
				i = i - (1) >> 0;
				((i < 0 || i >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + i] = (((x$3 = new $Uint64(u.$high & 0, (u.$low & 7) >>> 0), new $Uint64(0 + x$3.$high, 48 + x$3.$low)).$low << 24 >>> 24)));
				u = $shiftRightUint64(u, (3));
			}
		} else if (_1 === (2)) {
			while (true) {
				if (!((u.$high > 0 || (u.$high === 0 && u.$low >= 2)))) { break; }
				i = i - (1) >> 0;
				((i < 0 || i >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + i] = (((x$4 = new $Uint64(u.$high & 0, (u.$low & 1) >>> 0), new $Uint64(0 + x$4.$high, 48 + x$4.$low)).$low << 24 >>> 24)));
				u = $shiftRightUint64(u, (1));
			}
		} else {
			$panic(new $String("fmt: unknown base; can't happen"));
		}
		i = i - (1) >> 0;
		((i < 0 || i >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + i] = digits.charCodeAt($flatten64(u)));
		while (true) {
			if (!(i > 0 && prec > (buf.$length - i >> 0))) { break; }
			i = i - (1) >> 0;
			((i < 0 || i >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + i] = 48);
		}
		if (f.fmtFlags.sharp) {
			_2 = base;
			if (_2 === (8)) {
				if (!((((i < 0 || i >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + i]) === 48))) {
					i = i - (1) >> 0;
					((i < 0 || i >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + i] = 48);
				}
			} else if (_2 === (16)) {
				i = i - (1) >> 0;
				((i < 0 || i >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + i] = digits.charCodeAt(16));
				i = i - (1) >> 0;
				((i < 0 || i >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + i] = 48);
			}
		}
		if (negative) {
			i = i - (1) >> 0;
			((i < 0 || i >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + i] = 45);
		} else if (f.fmtFlags.plus) {
			i = i - (1) >> 0;
			((i < 0 || i >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + i] = 43);
		} else if (f.fmtFlags.space) {
			i = i - (1) >> 0;
			((i < 0 || i >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + i] = 32);
		}
		oldZero$1 = f.fmtFlags.zero;
		f.fmtFlags.zero = false;
		f.pad($subslice(buf, i));
		f.fmtFlags.zero = oldZero$1;
	};
	fmt.prototype.fmt_integer = function(u, base, isSigned, digits) { return this.$val.fmt_integer(u, base, isSigned, digits); };
	fmt.ptr.prototype.truncate = function(s) {
		var _i, _ref, _rune, f, i, n, s;
		f = this;
		if (f.fmtFlags.precPresent) {
			n = f.prec;
			_ref = s;
			_i = 0;
			while (true) {
				if (!(_i < _ref.length)) { break; }
				_rune = $decodeRune(_ref, _i);
				i = _i;
				n = n - (1) >> 0;
				if (n < 0) {
					return $substring(s, 0, i);
				}
				_i += _rune[1];
			}
		}
		return s;
	};
	fmt.prototype.truncate = function(s) { return this.$val.truncate(s); };
	fmt.ptr.prototype.fmt_s = function(s) {
		var f, s;
		f = this;
		s = f.truncate(s);
		f.padString(s);
	};
	fmt.prototype.fmt_s = function(s) { return this.$val.fmt_s(s); };
	fmt.ptr.prototype.fmt_sbx = function(s, b, digits) {
		var b, buf, c, digits, f, i, length, s, width;
		f = this;
		length = b.$length;
		if (b === sliceType$2.nil) {
			length = s.length;
		}
		if (f.fmtFlags.precPresent && f.prec < length) {
			length = f.prec;
		}
		width = $imul(2, length);
		if (width > 0) {
			if (f.fmtFlags.space) {
				if (f.fmtFlags.sharp) {
					width = $imul(width, (2));
				}
				width = width + ((length - 1 >> 0)) >> 0;
			} else if (f.fmtFlags.sharp) {
				width = width + (2) >> 0;
			}
		} else {
			if (f.fmtFlags.widPresent) {
				f.writePadding(f.wid);
			}
			return;
		}
		if (f.fmtFlags.widPresent && f.wid > width && !f.fmtFlags.minus) {
			f.writePadding(f.wid - width >> 0);
		}
		buf = f.buf.$get();
		if (f.fmtFlags.sharp) {
			buf = $append(buf, 48, digits.charCodeAt(16));
		}
		c = 0;
		i = 0;
		while (true) {
			if (!(i < length)) { break; }
			if (f.fmtFlags.space && i > 0) {
				buf = $append(buf, 32);
				if (f.fmtFlags.sharp) {
					buf = $append(buf, 48, digits.charCodeAt(16));
				}
			}
			if (!(b === sliceType$2.nil)) {
				c = ((i < 0 || i >= b.$length) ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + i]);
			} else {
				c = s.charCodeAt(i);
			}
			buf = $append(buf, digits.charCodeAt((c >>> 4 << 24 >>> 24)), digits.charCodeAt(((c & 15) >>> 0)));
			i = i + (1) >> 0;
		}
		f.buf.$set(buf);
		if (f.fmtFlags.widPresent && f.wid > width && f.fmtFlags.minus) {
			f.writePadding(f.wid - width >> 0);
		}
	};
	fmt.prototype.fmt_sbx = function(s, b, digits) { return this.$val.fmt_sbx(s, b, digits); };
	fmt.ptr.prototype.fmt_sx = function(s, digits) {
		var digits, f, s;
		f = this;
		f.fmt_sbx(s, sliceType$2.nil, digits);
	};
	fmt.prototype.fmt_sx = function(s, digits) { return this.$val.fmt_sx(s, digits); };
	fmt.ptr.prototype.fmt_bx = function(b, digits) {
		var b, digits, f;
		f = this;
		f.fmt_sbx("", b, digits);
	};
	fmt.prototype.fmt_bx = function(b, digits) { return this.$val.fmt_bx(b, digits); };
	fmt.ptr.prototype.fmt_q = function(s) {
		var buf, f, s;
		f = this;
		s = f.truncate(s);
		if (f.fmtFlags.sharp && strconv.CanBackquote(s)) {
			f.padString("`" + s + "`");
			return;
		}
		buf = $subslice(new sliceType$2(f.intbuf), 0, 0);
		if (f.fmtFlags.plus) {
			f.pad(strconv.AppendQuoteToASCII(buf, s));
		} else {
			f.pad(strconv.AppendQuote(buf, s));
		}
	};
	fmt.prototype.fmt_q = function(s) { return this.$val.fmt_q(s); };
	fmt.ptr.prototype.fmt_c = function(c) {
		var buf, c, f, r, w;
		f = this;
		r = ((c.$low >> 0));
		if ((c.$high > 0 || (c.$high === 0 && c.$low > 1114111))) {
			r = 65533;
		}
		buf = $subslice(new sliceType$2(f.intbuf), 0, 0);
		w = utf8.EncodeRune($subslice(buf, 0, 4), r);
		f.pad($subslice(buf, 0, w));
	};
	fmt.prototype.fmt_c = function(c) { return this.$val.fmt_c(c); };
	fmt.ptr.prototype.fmt_qc = function(c) {
		var buf, c, f, r;
		f = this;
		r = ((c.$low >> 0));
		if ((c.$high > 0 || (c.$high === 0 && c.$low > 1114111))) {
			r = 65533;
		}
		buf = $subslice(new sliceType$2(f.intbuf), 0, 0);
		if (f.fmtFlags.plus) {
			f.pad(strconv.AppendQuoteRuneToASCII(buf, r));
		} else {
			f.pad(strconv.AppendQuoteRune(buf, r));
		}
	};
	fmt.prototype.fmt_qc = function(c) { return this.$val.fmt_qc(c); };
	fmt.ptr.prototype.fmt_float = function(v, size, verb, prec) {
		var _1, _2, digits, f, hasDecimalPoint, i, num, oldZero, prec, size, tail, tailBuf, v, verb;
		f = this;
		if (f.fmtFlags.precPresent) {
			prec = f.prec;
		}
		num = strconv.AppendFloat($subslice(new sliceType$2(f.intbuf), 0, 1), v, ((verb << 24 >>> 24)), prec, size);
		if (((1 >= num.$length ? ($throwRuntimeError("index out of range"), undefined) : num.$array[num.$offset + 1]) === 45) || ((1 >= num.$length ? ($throwRuntimeError("index out of range"), undefined) : num.$array[num.$offset + 1]) === 43)) {
			num = $subslice(num, 1);
		} else {
			(0 >= num.$length ? ($throwRuntimeError("index out of range"), undefined) : num.$array[num.$offset + 0] = 43);
		}
		if (f.fmtFlags.space && ((0 >= num.$length ? ($throwRuntimeError("index out of range"), undefined) : num.$array[num.$offset + 0]) === 43) && !f.fmtFlags.plus) {
			(0 >= num.$length ? ($throwRuntimeError("index out of range"), undefined) : num.$array[num.$offset + 0] = 32);
		}
		if (((1 >= num.$length ? ($throwRuntimeError("index out of range"), undefined) : num.$array[num.$offset + 1]) === 73) || ((1 >= num.$length ? ($throwRuntimeError("index out of range"), undefined) : num.$array[num.$offset + 1]) === 78)) {
			oldZero = f.fmtFlags.zero;
			f.fmtFlags.zero = false;
			if (((1 >= num.$length ? ($throwRuntimeError("index out of range"), undefined) : num.$array[num.$offset + 1]) === 78) && !f.fmtFlags.space && !f.fmtFlags.plus) {
				num = $subslice(num, 1);
			}
			f.pad(num);
			f.fmtFlags.zero = oldZero;
			return;
		}
		if (f.fmtFlags.sharp && !((verb === 98))) {
			digits = 0;
			_1 = verb;
			if ((_1 === (118)) || (_1 === (103)) || (_1 === (71))) {
				digits = prec;
				if (digits === -1) {
					digits = 6;
				}
			}
			tailBuf = arrayType$2.zero();
			tail = $subslice(new sliceType$2(tailBuf), 0, 0);
			hasDecimalPoint = false;
			i = 1;
			while (true) {
				if (!(i < num.$length)) { break; }
				_2 = ((i < 0 || i >= num.$length) ? ($throwRuntimeError("index out of range"), undefined) : num.$array[num.$offset + i]);
				if (_2 === (46)) {
					hasDecimalPoint = true;
				} else if ((_2 === (101)) || (_2 === (69))) {
					tail = $appendSlice(tail, $subslice(num, i));
					num = $subslice(num, 0, i);
				} else {
					digits = digits - (1) >> 0;
				}
				i = i + (1) >> 0;
			}
			if (!hasDecimalPoint) {
				num = $append(num, 46);
			}
			while (true) {
				if (!(digits > 0)) { break; }
				num = $append(num, 48);
				digits = digits - (1) >> 0;
			}
			num = $appendSlice(num, tail);
		}
		if (f.fmtFlags.plus || !(((0 >= num.$length ? ($throwRuntimeError("index out of range"), undefined) : num.$array[num.$offset + 0]) === 43))) {
			if (f.fmtFlags.zero && f.fmtFlags.widPresent && f.wid > num.$length) {
				f.buf.WriteByte((0 >= num.$length ? ($throwRuntimeError("index out of range"), undefined) : num.$array[num.$offset + 0]));
				f.writePadding(f.wid - num.$length >> 0);
				f.buf.Write($subslice(num, 1));
				return;
			}
			f.pad(num);
			return;
		}
		f.pad($subslice(num, 1));
	};
	fmt.prototype.fmt_float = function(v, size, verb, prec) { return this.$val.fmt_float(v, size, verb, prec); };
	$ptrType(buffer).prototype.Write = function(p) {
		var b, p;
		b = this;
		b.$set($appendSlice(b.$get(), p));
	};
	$ptrType(buffer).prototype.WriteString = function(s) {
		var b, s;
		b = this;
		b.$set($appendSlice(b.$get(), s));
	};
	$ptrType(buffer).prototype.WriteByte = function(c) {
		var b, c;
		b = this;
		b.$set($append(b.$get(), c));
	};
	$ptrType(buffer).prototype.WriteRune = function(r) {
		var b, bp, n, r, w, x;
		bp = this;
		if (r < 128) {
			bp.$set($append(bp.$get(), ((r << 24 >>> 24))));
			return;
		}
		b = bp.$get();
		n = b.$length;
		while (true) {
			if (!((n + 4 >> 0) > b.$capacity)) { break; }
			b = $append(b, 0);
		}
		w = utf8.EncodeRune((x = $subslice(b, n, (n + 4 >> 0)), $subslice(new sliceType$2(x.$array), x.$offset, x.$offset + x.$length)), r);
		bp.$set($subslice(b, 0, (n + w >> 0)));
	};
	newPrinter = function() {
		var _r, p, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; p = $f.p; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = ppFree.Get(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		p = $assertType(_r, ptrType$2);
		p.panicking = false;
		p.erroring = false;
		p.fmt.init((p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))));
		$s = -1; return p;
		/* */ } return; } if ($f === undefined) { $f = { $blk: newPrinter }; } $f._r = _r; $f.p = p; $f.$s = $s; $f.$r = $r; return $f;
	};
	pp.ptr.prototype.free = function() {
		var p;
		p = this;
		p.buf = $subslice(p.buf, 0, 0);
		p.arg = $ifaceNil;
		p.value = new reflect.Value.ptr(ptrType.nil, 0, 0);
		ppFree.Put(p);
	};
	pp.prototype.free = function() { return this.$val.free(); };
	pp.ptr.prototype.Width = function() {
		var _tmp, _tmp$1, ok, p, wid;
		wid = 0;
		ok = false;
		p = this;
		_tmp = p.fmt.wid;
		_tmp$1 = p.fmt.fmtFlags.widPresent;
		wid = _tmp;
		ok = _tmp$1;
		return [wid, ok];
	};
	pp.prototype.Width = function() { return this.$val.Width(); };
	pp.ptr.prototype.Precision = function() {
		var _tmp, _tmp$1, ok, p, prec;
		prec = 0;
		ok = false;
		p = this;
		_tmp = p.fmt.prec;
		_tmp$1 = p.fmt.fmtFlags.precPresent;
		prec = _tmp;
		ok = _tmp$1;
		return [prec, ok];
	};
	pp.prototype.Precision = function() { return this.$val.Precision(); };
	pp.ptr.prototype.Flag = function(b) {
		var _1, b, p;
		p = this;
		_1 = b;
		if (_1 === (45)) {
			return p.fmt.fmtFlags.minus;
		} else if (_1 === (43)) {
			return p.fmt.fmtFlags.plus || p.fmt.fmtFlags.plusV;
		} else if (_1 === (35)) {
			return p.fmt.fmtFlags.sharp || p.fmt.fmtFlags.sharpV;
		} else if (_1 === (32)) {
			return p.fmt.fmtFlags.space;
		} else if (_1 === (48)) {
			return p.fmt.fmtFlags.zero;
		}
		return false;
	};
	pp.prototype.Flag = function(b) { return this.$val.Flag(b); };
	pp.ptr.prototype.Write = function(b) {
		var _tmp, _tmp$1, b, err, p, ret;
		ret = 0;
		err = $ifaceNil;
		p = this;
		(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).Write(b);
		_tmp = b.$length;
		_tmp$1 = $ifaceNil;
		ret = _tmp;
		err = _tmp$1;
		return [ret, err];
	};
	pp.prototype.Write = function(b) { return this.$val.Write(b); };
	pp.ptr.prototype.WriteString = function(s) {
		var _tmp, _tmp$1, err, p, ret, s;
		ret = 0;
		err = $ifaceNil;
		p = this;
		(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString(s);
		_tmp = s.length;
		_tmp$1 = $ifaceNil;
		ret = _tmp;
		err = _tmp$1;
		return [ret, err];
	};
	pp.prototype.WriteString = function(s) { return this.$val.WriteString(s); };
	Fprintf = function(w, format, a) {
		var _r, _r$1, _tuple, a, err, format, n, p, w, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; a = $f.a; err = $f.err; format = $f.format; n = $f.n; p = $f.p; w = $f.w; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = 0;
		err = $ifaceNil;
		_r = newPrinter(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		p = _r;
		$r = p.doPrintf(format, a); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_r$1 = w.Write((x = p.buf, $subslice(new sliceType$2(x.$array), x.$offset, x.$offset + x.$length))); /* */ $s = 3; case 3: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple = _r$1;
		n = _tuple[0];
		err = _tuple[1];
		p.free();
		$s = -1; return [n, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Fprintf }; } $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f.a = a; $f.err = err; $f.format = format; $f.n = n; $f.p = p; $f.w = w; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Fprintf = Fprintf;
	Sprintf = function(format, a) {
		var _r, a, format, p, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; a = $f.a; format = $f.format; p = $f.p; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = newPrinter(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		p = _r;
		$r = p.doPrintf(format, a); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		s = ($bytesToString(p.buf));
		p.free();
		$s = -1; return s;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Sprintf }; } $f._r = _r; $f.a = a; $f.format = format; $f.p = p; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Sprintf = Sprintf;
	Errorf = function(format, a) {
		var _r, _r$1, a, format, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; a = $f.a; format = $f.format; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = Sprintf(format, a); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = errors.New(_r); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$s = -1; return _r$1;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Errorf }; } $f._r = _r; $f._r$1 = _r$1; $f.a = a; $f.format = format; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Errorf = Errorf;
	Fprint = function(w, a) {
		var _r, _r$1, _tuple, a, err, n, p, w, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; a = $f.a; err = $f.err; n = $f.n; p = $f.p; w = $f.w; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = 0;
		err = $ifaceNil;
		_r = newPrinter(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		p = _r;
		$r = p.doPrint(a); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_r$1 = w.Write((x = p.buf, $subslice(new sliceType$2(x.$array), x.$offset, x.$offset + x.$length))); /* */ $s = 3; case 3: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple = _r$1;
		n = _tuple[0];
		err = _tuple[1];
		p.free();
		$s = -1; return [n, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Fprint }; } $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f.a = a; $f.err = err; $f.n = n; $f.p = p; $f.w = w; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Fprint = Fprint;
	Sprint = function(a) {
		var _r, a, p, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; a = $f.a; p = $f.p; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = newPrinter(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		p = _r;
		$r = p.doPrint(a); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		s = ($bytesToString(p.buf));
		p.free();
		$s = -1; return s;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Sprint }; } $f._r = _r; $f.a = a; $f.p = p; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Sprint = Sprint;
	Sprintln = function(a) {
		var _r, a, p, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; a = $f.a; p = $f.p; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = newPrinter(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		p = _r;
		$r = p.doPrintln(a); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		s = ($bytesToString(p.buf));
		p.free();
		$s = -1; return s;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Sprintln }; } $f._r = _r; $f.a = a; $f.p = p; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Sprintln = Sprintln;
	getField = function(v, i) {
		var _r, _r$1, i, v, val, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; i = $f.i; v = $f.v; val = $f.val; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = $clone(v, reflect.Value).Field(i); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		val = _r;
		/* */ if (($clone(val, reflect.Value).Kind() === 20) && !$clone(val, reflect.Value).IsNil()) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (($clone(val, reflect.Value).Kind() === 20) && !$clone(val, reflect.Value).IsNil()) { */ case 2:
			_r$1 = $clone(val, reflect.Value).Elem(); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			val = _r$1;
		/* } */ case 3:
		$s = -1; return val;
		/* */ } return; } if ($f === undefined) { $f = { $blk: getField }; } $f._r = _r; $f._r$1 = _r$1; $f.i = i; $f.v = v; $f.val = val; $f.$s = $s; $f.$r = $r; return $f;
	};
	tooLarge = function(x) {
		var x;
		return x > 1000000 || x < -1000000;
	};
	parsenum = function(s, start, end) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, end, isnum, newi, num, s, start;
		num = 0;
		isnum = false;
		newi = 0;
		if (start >= end) {
			_tmp = 0;
			_tmp$1 = false;
			_tmp$2 = end;
			num = _tmp;
			isnum = _tmp$1;
			newi = _tmp$2;
			return [num, isnum, newi];
		}
		newi = start;
		while (true) {
			if (!(newi < end && 48 <= s.charCodeAt(newi) && s.charCodeAt(newi) <= 57)) { break; }
			if (tooLarge(num)) {
				_tmp$3 = 0;
				_tmp$4 = false;
				_tmp$5 = end;
				num = _tmp$3;
				isnum = _tmp$4;
				newi = _tmp$5;
				return [num, isnum, newi];
			}
			num = ($imul(num, 10)) + (((s.charCodeAt(newi) - 48 << 24 >>> 24) >> 0)) >> 0;
			isnum = true;
			newi = newi + (1) >> 0;
		}
		return [num, isnum, newi];
	};
	pp.ptr.prototype.unknownType = function(v) {
		var _r, _r$1, p, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; p = $f.p; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		if (!$clone(v, reflect.Value).IsValid()) {
			(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString("<nil>");
			$s = -1; return;
		}
		(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(63);
		_r = $clone(v, reflect.Value).Type(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = _r.String(); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$r = (p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString(_r$1); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(63);
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: pp.ptr.prototype.unknownType }; } $f._r = _r; $f._r$1 = _r$1; $f.p = p; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	pp.prototype.unknownType = function(v) { return this.$val.unknownType(v); };
	pp.ptr.prototype.badVerb = function(verb) {
		var _r, _r$1, _r$2, p, verb, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; p = $f.p; verb = $f.verb; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		p.erroring = true;
		(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString("%!");
		(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteRune(verb);
		(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(40);
			/* */ if (!($interfaceIsEqual(p.arg, $ifaceNil))) { $s = 2; continue; }
			/* */ if ($clone(p.value, reflect.Value).IsValid()) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (!($interfaceIsEqual(p.arg, $ifaceNil))) { */ case 2:
				_r = reflect.TypeOf(p.arg).String(); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				$r = (p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString(_r); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(61);
				$r = p.printArg(p.arg, 118); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 5; continue;
			/* } else if ($clone(p.value, reflect.Value).IsValid()) { */ case 3:
				_r$1 = $clone(p.value, reflect.Value).Type(); /* */ $s = 9; case 9: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				_r$2 = _r$1.String(); /* */ $s = 10; case 10: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				$r = (p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString(_r$2); /* */ $s = 11; case 11: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(61);
				$r = p.printValue($clone(p.value, reflect.Value), 118, 0); /* */ $s = 12; case 12: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 5; continue;
			/* } else { */ case 4:
				(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString("<nil>");
			/* } */ case 5:
		case 1:
		(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(41);
		p.erroring = false;
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: pp.ptr.prototype.badVerb }; } $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.p = p; $f.verb = verb; $f.$s = $s; $f.$r = $r; return $f;
	};
	pp.prototype.badVerb = function(verb) { return this.$val.badVerb(verb); };
	pp.ptr.prototype.fmtBool = function(v, verb) {
		var _1, p, v, verb, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; p = $f.p; v = $f.v; verb = $f.verb; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
			_1 = verb;
			/* */ if ((_1 === (116)) || (_1 === (118))) { $s = 2; continue; }
			/* */ $s = 3; continue;
			/* if ((_1 === (116)) || (_1 === (118))) { */ case 2:
				p.fmt.fmt_boolean(v);
				$s = 4; continue;
			/* } else { */ case 3:
				$r = p.badVerb(verb); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 4:
		case 1:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: pp.ptr.prototype.fmtBool }; } $f._1 = _1; $f.p = p; $f.v = v; $f.verb = verb; $f.$s = $s; $f.$r = $r; return $f;
	};
	pp.prototype.fmtBool = function(v, verb) { return this.$val.fmtBool(v, verb); };
	pp.ptr.prototype.fmt0x64 = function(v, leading0x) {
		var leading0x, p, sharp, v;
		p = this;
		sharp = p.fmt.fmtFlags.sharp;
		p.fmt.fmtFlags.sharp = leading0x;
		p.fmt.fmt_integer(v, 16, false, "0123456789abcdefx");
		p.fmt.fmtFlags.sharp = sharp;
	};
	pp.prototype.fmt0x64 = function(v, leading0x) { return this.$val.fmt0x64(v, leading0x); };
	pp.ptr.prototype.fmtInteger = function(v, isSigned, verb) {
		var _1, isSigned, p, v, verb, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; isSigned = $f.isSigned; p = $f.p; v = $f.v; verb = $f.verb; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
			_1 = verb;
			/* */ if (_1 === (118)) { $s = 2; continue; }
			/* */ if (_1 === (100)) { $s = 3; continue; }
			/* */ if (_1 === (98)) { $s = 4; continue; }
			/* */ if (_1 === (111)) { $s = 5; continue; }
			/* */ if (_1 === (120)) { $s = 6; continue; }
			/* */ if (_1 === (88)) { $s = 7; continue; }
			/* */ if (_1 === (99)) { $s = 8; continue; }
			/* */ if (_1 === (113)) { $s = 9; continue; }
			/* */ if (_1 === (85)) { $s = 10; continue; }
			/* */ $s = 11; continue;
			/* if (_1 === (118)) { */ case 2:
				if (p.fmt.fmtFlags.sharpV && !isSigned) {
					p.fmt0x64(v, true);
				} else {
					p.fmt.fmt_integer(v, 10, isSigned, "0123456789abcdefx");
				}
				$s = 12; continue;
			/* } else if (_1 === (100)) { */ case 3:
				p.fmt.fmt_integer(v, 10, isSigned, "0123456789abcdefx");
				$s = 12; continue;
			/* } else if (_1 === (98)) { */ case 4:
				p.fmt.fmt_integer(v, 2, isSigned, "0123456789abcdefx");
				$s = 12; continue;
			/* } else if (_1 === (111)) { */ case 5:
				p.fmt.fmt_integer(v, 8, isSigned, "0123456789abcdefx");
				$s = 12; continue;
			/* } else if (_1 === (120)) { */ case 6:
				p.fmt.fmt_integer(v, 16, isSigned, "0123456789abcdefx");
				$s = 12; continue;
			/* } else if (_1 === (88)) { */ case 7:
				p.fmt.fmt_integer(v, 16, isSigned, "0123456789ABCDEFX");
				$s = 12; continue;
			/* } else if (_1 === (99)) { */ case 8:
				p.fmt.fmt_c(v);
				$s = 12; continue;
			/* } else if (_1 === (113)) { */ case 9:
				/* */ if ((v.$high < 0 || (v.$high === 0 && v.$low <= 1114111))) { $s = 13; continue; }
				/* */ $s = 14; continue;
				/* if ((v.$high < 0 || (v.$high === 0 && v.$low <= 1114111))) { */ case 13:
					p.fmt.fmt_qc(v);
					$s = 15; continue;
				/* } else { */ case 14:
					$r = p.badVerb(verb); /* */ $s = 16; case 16: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 15:
				$s = 12; continue;
			/* } else if (_1 === (85)) { */ case 10:
				p.fmt.fmt_unicode(v);
				$s = 12; continue;
			/* } else { */ case 11:
				$r = p.badVerb(verb); /* */ $s = 17; case 17: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 12:
		case 1:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: pp.ptr.prototype.fmtInteger }; } $f._1 = _1; $f.isSigned = isSigned; $f.p = p; $f.v = v; $f.verb = verb; $f.$s = $s; $f.$r = $r; return $f;
	};
	pp.prototype.fmtInteger = function(v, isSigned, verb) { return this.$val.fmtInteger(v, isSigned, verb); };
	pp.ptr.prototype.fmtFloat = function(v, size, verb) {
		var _1, p, size, v, verb, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; p = $f.p; size = $f.size; v = $f.v; verb = $f.verb; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
			_1 = verb;
			/* */ if (_1 === (118)) { $s = 2; continue; }
			/* */ if ((_1 === (98)) || (_1 === (103)) || (_1 === (71))) { $s = 3; continue; }
			/* */ if ((_1 === (102)) || (_1 === (101)) || (_1 === (69))) { $s = 4; continue; }
			/* */ if (_1 === (70)) { $s = 5; continue; }
			/* */ $s = 6; continue;
			/* if (_1 === (118)) { */ case 2:
				p.fmt.fmt_float(v, size, 103, -1);
				$s = 7; continue;
			/* } else if ((_1 === (98)) || (_1 === (103)) || (_1 === (71))) { */ case 3:
				p.fmt.fmt_float(v, size, verb, -1);
				$s = 7; continue;
			/* } else if ((_1 === (102)) || (_1 === (101)) || (_1 === (69))) { */ case 4:
				p.fmt.fmt_float(v, size, verb, 6);
				$s = 7; continue;
			/* } else if (_1 === (70)) { */ case 5:
				p.fmt.fmt_float(v, size, 102, 6);
				$s = 7; continue;
			/* } else { */ case 6:
				$r = p.badVerb(verb); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 7:
		case 1:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: pp.ptr.prototype.fmtFloat }; } $f._1 = _1; $f.p = p; $f.size = size; $f.v = v; $f.verb = verb; $f.$s = $s; $f.$r = $r; return $f;
	};
	pp.prototype.fmtFloat = function(v, size, verb) { return this.$val.fmtFloat(v, size, verb); };
	pp.ptr.prototype.fmtComplex = function(v, size, verb) {
		var _1, _q, _q$1, oldPlus, p, size, v, verb, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _q = $f._q; _q$1 = $f._q$1; oldPlus = $f.oldPlus; p = $f.p; size = $f.size; v = $f.v; verb = $f.verb; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
			_1 = verb;
			/* */ if ((_1 === (118)) || (_1 === (98)) || (_1 === (103)) || (_1 === (71)) || (_1 === (102)) || (_1 === (70)) || (_1 === (101)) || (_1 === (69))) { $s = 2; continue; }
			/* */ $s = 3; continue;
			/* if ((_1 === (118)) || (_1 === (98)) || (_1 === (103)) || (_1 === (71)) || (_1 === (102)) || (_1 === (70)) || (_1 === (101)) || (_1 === (69))) { */ case 2:
				oldPlus = p.fmt.fmtFlags.plus;
				(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(40);
				$r = p.fmtFloat(v.$real, (_q = size / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")), verb); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				p.fmt.fmtFlags.plus = true;
				$r = p.fmtFloat(v.$imag, (_q$1 = size / 2, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero")), verb); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString("i)");
				p.fmt.fmtFlags.plus = oldPlus;
				$s = 4; continue;
			/* } else { */ case 3:
				$r = p.badVerb(verb); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 4:
		case 1:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: pp.ptr.prototype.fmtComplex }; } $f._1 = _1; $f._q = _q; $f._q$1 = _q$1; $f.oldPlus = oldPlus; $f.p = p; $f.size = size; $f.v = v; $f.verb = verb; $f.$s = $s; $f.$r = $r; return $f;
	};
	pp.prototype.fmtComplex = function(v, size, verb) { return this.$val.fmtComplex(v, size, verb); };
	pp.ptr.prototype.fmtString = function(v, verb) {
		var _1, p, v, verb, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; p = $f.p; v = $f.v; verb = $f.verb; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
			_1 = verb;
			/* */ if (_1 === (118)) { $s = 2; continue; }
			/* */ if (_1 === (115)) { $s = 3; continue; }
			/* */ if (_1 === (120)) { $s = 4; continue; }
			/* */ if (_1 === (88)) { $s = 5; continue; }
			/* */ if (_1 === (113)) { $s = 6; continue; }
			/* */ $s = 7; continue;
			/* if (_1 === (118)) { */ case 2:
				if (p.fmt.fmtFlags.sharpV) {
					p.fmt.fmt_q(v);
				} else {
					p.fmt.fmt_s(v);
				}
				$s = 8; continue;
			/* } else if (_1 === (115)) { */ case 3:
				p.fmt.fmt_s(v);
				$s = 8; continue;
			/* } else if (_1 === (120)) { */ case 4:
				p.fmt.fmt_sx(v, "0123456789abcdefx");
				$s = 8; continue;
			/* } else if (_1 === (88)) { */ case 5:
				p.fmt.fmt_sx(v, "0123456789ABCDEFX");
				$s = 8; continue;
			/* } else if (_1 === (113)) { */ case 6:
				p.fmt.fmt_q(v);
				$s = 8; continue;
			/* } else { */ case 7:
				$r = p.badVerb(verb); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 8:
		case 1:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: pp.ptr.prototype.fmtString }; } $f._1 = _1; $f.p = p; $f.v = v; $f.verb = verb; $f.$s = $s; $f.$r = $r; return $f;
	};
	pp.prototype.fmtString = function(v, verb) { return this.$val.fmtString(v, verb); };
	pp.ptr.prototype.fmtBytes = function(v, verb, typeString) {
		var _1, _i, _i$1, _r, _ref, _ref$1, c, c$1, i, i$1, p, typeString, v, verb, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _i = $f._i; _i$1 = $f._i$1; _r = $f._r; _ref = $f._ref; _ref$1 = $f._ref$1; c = $f.c; c$1 = $f.c$1; i = $f.i; i$1 = $f.i$1; p = $f.p; typeString = $f.typeString; v = $f.v; verb = $f.verb; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
			_1 = verb;
			/* */ if ((_1 === (118)) || (_1 === (100))) { $s = 2; continue; }
			/* */ if (_1 === (115)) { $s = 3; continue; }
			/* */ if (_1 === (120)) { $s = 4; continue; }
			/* */ if (_1 === (88)) { $s = 5; continue; }
			/* */ if (_1 === (113)) { $s = 6; continue; }
			/* */ $s = 7; continue;
			/* if ((_1 === (118)) || (_1 === (100))) { */ case 2:
				if (p.fmt.fmtFlags.sharpV) {
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString(typeString);
					if (v === sliceType$2.nil) {
						(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString("(nil)");
						$s = -1; return;
					}
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(123);
					_ref = v;
					_i = 0;
					while (true) {
						if (!(_i < _ref.$length)) { break; }
						i = _i;
						c = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
						if (i > 0) {
							(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString(", ");
						}
						p.fmt0x64((new $Uint64(0, c)), true);
						_i++;
					}
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(125);
				} else {
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(91);
					_ref$1 = v;
					_i$1 = 0;
					while (true) {
						if (!(_i$1 < _ref$1.$length)) { break; }
						i$1 = _i$1;
						c$1 = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$1.$array[_ref$1.$offset + _i$1]);
						if (i$1 > 0) {
							(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(32);
						}
						p.fmt.fmt_integer((new $Uint64(0, c$1)), 10, false, "0123456789abcdefx");
						_i$1++;
					}
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(93);
				}
				$s = 8; continue;
			/* } else if (_1 === (115)) { */ case 3:
				p.fmt.fmt_s(($bytesToString(v)));
				$s = 8; continue;
			/* } else if (_1 === (120)) { */ case 4:
				p.fmt.fmt_bx(v, "0123456789abcdefx");
				$s = 8; continue;
			/* } else if (_1 === (88)) { */ case 5:
				p.fmt.fmt_bx(v, "0123456789ABCDEFX");
				$s = 8; continue;
			/* } else if (_1 === (113)) { */ case 6:
				p.fmt.fmt_q(($bytesToString(v)));
				$s = 8; continue;
			/* } else { */ case 7:
				_r = reflect.ValueOf(v); /* */ $s = 9; case 9: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				$r = p.printValue($clone(_r, reflect.Value), verb, 0); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 8:
		case 1:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: pp.ptr.prototype.fmtBytes }; } $f._1 = _1; $f._i = _i; $f._i$1 = _i$1; $f._r = _r; $f._ref = _ref; $f._ref$1 = _ref$1; $f.c = c; $f.c$1 = c$1; $f.i = i; $f.i$1 = i$1; $f.p = p; $f.typeString = typeString; $f.v = v; $f.verb = verb; $f.$s = $s; $f.$r = $r; return $f;
	};
	pp.prototype.fmtBytes = function(v, verb, typeString) { return this.$val.fmtBytes(v, verb, typeString); };
	pp.ptr.prototype.fmtPointer = function(value, verb) {
		var _1, _2, _r, _r$1, p, u, value, verb, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _2 = $f._2; _r = $f._r; _r$1 = $f._r$1; p = $f.p; u = $f.u; value = $f.value; verb = $f.verb; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		u = 0;
			_1 = $clone(value, reflect.Value).Kind();
			/* */ if ((_1 === (18)) || (_1 === (19)) || (_1 === (21)) || (_1 === (22)) || (_1 === (23)) || (_1 === (26))) { $s = 2; continue; }
			/* */ $s = 3; continue;
			/* if ((_1 === (18)) || (_1 === (19)) || (_1 === (21)) || (_1 === (22)) || (_1 === (23)) || (_1 === (26))) { */ case 2:
				u = $clone(value, reflect.Value).Pointer();
				$s = 4; continue;
			/* } else { */ case 3:
				$r = p.badVerb(verb); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = -1; return;
			/* } */ case 4:
		case 1:
			_2 = verb;
			/* */ if (_2 === (118)) { $s = 7; continue; }
			/* */ if (_2 === (112)) { $s = 8; continue; }
			/* */ if ((_2 === (98)) || (_2 === (111)) || (_2 === (100)) || (_2 === (120)) || (_2 === (88))) { $s = 9; continue; }
			/* */ $s = 10; continue;
			/* if (_2 === (118)) { */ case 7:
				/* */ if (p.fmt.fmtFlags.sharpV) { $s = 12; continue; }
				/* */ $s = 13; continue;
				/* if (p.fmt.fmtFlags.sharpV) { */ case 12:
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(40);
					_r = $clone(value, reflect.Value).Type(); /* */ $s = 15; case 15: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
					_r$1 = _r.String(); /* */ $s = 16; case 16: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
					$r = (p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString(_r$1); /* */ $s = 17; case 17: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString(")(");
					if (u === 0) {
						(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString("nil");
					} else {
						p.fmt0x64((new $Uint64(0, u.constructor === Number ? u : 1)), true);
					}
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(41);
					$s = 14; continue;
				/* } else { */ case 13:
					if (u === 0) {
						p.fmt.padString("<nil>");
					} else {
						p.fmt0x64((new $Uint64(0, u.constructor === Number ? u : 1)), !p.fmt.fmtFlags.sharp);
					}
				/* } */ case 14:
				$s = 11; continue;
			/* } else if (_2 === (112)) { */ case 8:
				p.fmt0x64((new $Uint64(0, u.constructor === Number ? u : 1)), !p.fmt.fmtFlags.sharp);
				$s = 11; continue;
			/* } else if ((_2 === (98)) || (_2 === (111)) || (_2 === (100)) || (_2 === (120)) || (_2 === (88))) { */ case 9:
				$r = p.fmtInteger((new $Uint64(0, u.constructor === Number ? u : 1)), false, verb); /* */ $s = 18; case 18: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 11; continue;
			/* } else { */ case 10:
				$r = p.badVerb(verb); /* */ $s = 19; case 19: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 11:
		case 6:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: pp.ptr.prototype.fmtPointer }; } $f._1 = _1; $f._2 = _2; $f._r = _r; $f._r$1 = _r$1; $f.p = p; $f.u = u; $f.value = value; $f.verb = verb; $f.$s = $s; $f.$r = $r; return $f;
	};
	pp.prototype.fmtPointer = function(value, verb) { return this.$val.fmtPointer(value, verb); };
	pp.ptr.prototype.catchPanic = function(arg, verb) {
		var _r, arg, err, oldFlags, p, v, verb, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; arg = $f.arg; err = $f.err; oldFlags = $f.oldFlags; p = $f.p; v = $f.v; verb = $f.verb; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		err = $recover();
		/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 1:
			_r = reflect.ValueOf(arg); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			v = _r;
			if (($clone(v, reflect.Value).Kind() === 22) && $clone(v, reflect.Value).IsNil()) {
				(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString("<nil>");
				$s = -1; return;
			}
			if (p.panicking) {
				$panic(err);
			}
			oldFlags = $clone(p.fmt.fmtFlags, fmtFlags);
			p.fmt.clearflags();
			(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString("%!");
			(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteRune(verb);
			(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString("(PANIC=");
			p.panicking = true;
			$r = p.printArg(err, 118); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			p.panicking = false;
			(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(41);
			fmtFlags.copy(p.fmt.fmtFlags, oldFlags);
		/* } */ case 2:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: pp.ptr.prototype.catchPanic }; } $f._r = _r; $f.arg = arg; $f.err = err; $f.oldFlags = oldFlags; $f.p = p; $f.v = v; $f.verb = verb; $f.$s = $s; $f.$r = $r; return $f;
	};
	pp.prototype.catchPanic = function(arg, verb) { return this.$val.catchPanic(arg, verb); };
	pp.ptr.prototype.handleMethods = function(verb) {
		var _1, _r, _r$1, _r$2, _ref, _tuple, _tuple$1, formatter, handled, ok, ok$1, p, stringer, v, v$1, verb, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _ref = $f._ref; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; formatter = $f.formatter; handled = $f.handled; ok = $f.ok; ok$1 = $f.ok$1; p = $f.p; stringer = $f.stringer; v = $f.v; v$1 = $f.v$1; verb = $f.verb; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		handled = false;
		p = this;
		if (p.erroring) {
			$s = -1; return handled;
		}
		_tuple = $assertType(p.arg, Formatter, true);
		formatter = _tuple[0];
		ok = _tuple[1];
		/* */ if (ok) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (ok) { */ case 1:
			handled = true;
			$deferred.push([$methodVal(p, "catchPanic"), [p.arg, verb]]);
			$r = formatter.Format(p, verb); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = -1; return handled;
		/* } */ case 2:
		/* */ if (p.fmt.fmtFlags.sharpV) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (p.fmt.fmtFlags.sharpV) { */ case 4:
			_tuple$1 = $assertType(p.arg, GoStringer, true);
			stringer = _tuple$1[0];
			ok$1 = _tuple$1[1];
			/* */ if (ok$1) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if (ok$1) { */ case 7:
				handled = true;
				$deferred.push([$methodVal(p, "catchPanic"), [p.arg, verb]]);
				_r = stringer.GoString(); /* */ $s = 9; case 9: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				$r = p.fmt.fmt_s(_r); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = -1; return handled;
			/* } */ case 8:
			$s = 6; continue;
		/* } else { */ case 5:
				_1 = verb;
				/* */ if ((_1 === (118)) || (_1 === (115)) || (_1 === (120)) || (_1 === (88)) || (_1 === (113))) { $s = 12; continue; }
				/* */ $s = 13; continue;
				/* if ((_1 === (118)) || (_1 === (115)) || (_1 === (120)) || (_1 === (88)) || (_1 === (113))) { */ case 12:
					_ref = p.arg;
					/* */ if ($assertType(_ref, $error, true)[1]) { $s = 14; continue; }
					/* */ if ($assertType(_ref, Stringer, true)[1]) { $s = 15; continue; }
					/* */ $s = 16; continue;
					/* if ($assertType(_ref, $error, true)[1]) { */ case 14:
						v = _ref;
						handled = true;
						$deferred.push([$methodVal(p, "catchPanic"), [p.arg, verb]]);
						_r$1 = v.Error(); /* */ $s = 17; case 17: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
						$r = p.fmtString(_r$1, verb); /* */ $s = 18; case 18: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						$s = -1; return handled;
					/* } else if ($assertType(_ref, Stringer, true)[1]) { */ case 15:
						v$1 = _ref;
						handled = true;
						$deferred.push([$methodVal(p, "catchPanic"), [p.arg, verb]]);
						_r$2 = v$1.String(); /* */ $s = 19; case 19: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
						$r = p.fmtString(_r$2, verb); /* */ $s = 20; case 20: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						$s = -1; return handled;
					/* } */ case 16:
				/* } */ case 13:
			case 11:
		/* } */ case 6:
		handled = false;
		$s = -1; return handled;
		/* */ } return; } } catch(err) { $err = err; $s = -1; } finally { $callDeferred($deferred, $err); if (!$curGoroutine.asleep) { return  handled; } if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: pp.ptr.prototype.handleMethods }; } $f._1 = _1; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._ref = _ref; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.formatter = formatter; $f.handled = handled; $f.ok = ok; $f.ok$1 = ok$1; $f.p = p; $f.stringer = stringer; $f.v = v; $f.v$1 = v$1; $f.verb = verb; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	pp.prototype.handleMethods = function(verb) { return this.$val.handleMethods(verb); };
	pp.ptr.prototype.printArg = function(arg, verb) {
		var _1, _2, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _ref, arg, f, f$1, f$10, f$11, f$12, f$13, f$14, f$15, f$16, f$17, f$18, f$19, f$2, f$3, f$4, f$5, f$6, f$7, f$8, f$9, p, verb, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _2 = $f._2; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _ref = $f._ref; arg = $f.arg; f = $f.f; f$1 = $f.f$1; f$10 = $f.f$10; f$11 = $f.f$11; f$12 = $f.f$12; f$13 = $f.f$13; f$14 = $f.f$14; f$15 = $f.f$15; f$16 = $f.f$16; f$17 = $f.f$17; f$18 = $f.f$18; f$19 = $f.f$19; f$2 = $f.f$2; f$3 = $f.f$3; f$4 = $f.f$4; f$5 = $f.f$5; f$6 = $f.f$6; f$7 = $f.f$7; f$8 = $f.f$8; f$9 = $f.f$9; p = $f.p; verb = $f.verb; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		p.arg = arg;
		p.value = new reflect.Value.ptr(ptrType.nil, 0, 0);
		/* */ if ($interfaceIsEqual(arg, $ifaceNil)) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if ($interfaceIsEqual(arg, $ifaceNil)) { */ case 1:
				_1 = verb;
				/* */ if ((_1 === (84)) || (_1 === (118))) { $s = 4; continue; }
				/* */ $s = 5; continue;
				/* if ((_1 === (84)) || (_1 === (118))) { */ case 4:
					p.fmt.padString("<nil>");
					$s = 6; continue;
				/* } else { */ case 5:
					$r = p.badVerb(verb); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 6:
			case 3:
			$s = -1; return;
		/* } */ case 2:
			_2 = verb;
			/* */ if (_2 === (84)) { $s = 9; continue; }
			/* */ if (_2 === (112)) { $s = 10; continue; }
			/* */ $s = 11; continue;
			/* if (_2 === (84)) { */ case 9:
				_r = reflect.TypeOf(arg).String(); /* */ $s = 12; case 12: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				$r = p.fmt.fmt_s(_r); /* */ $s = 13; case 13: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = -1; return;
			/* } else if (_2 === (112)) { */ case 10:
				_r$1 = reflect.ValueOf(arg); /* */ $s = 14; case 14: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				$r = p.fmtPointer($clone(_r$1, reflect.Value), 112); /* */ $s = 15; case 15: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = -1; return;
			/* } */ case 11:
		case 8:
		_ref = arg;
		/* */ if ($assertType(_ref, $Bool, true)[1]) { $s = 16; continue; }
		/* */ if ($assertType(_ref, $Float32, true)[1]) { $s = 17; continue; }
		/* */ if ($assertType(_ref, $Float64, true)[1]) { $s = 18; continue; }
		/* */ if ($assertType(_ref, $Complex64, true)[1]) { $s = 19; continue; }
		/* */ if ($assertType(_ref, $Complex128, true)[1]) { $s = 20; continue; }
		/* */ if ($assertType(_ref, $Int, true)[1]) { $s = 21; continue; }
		/* */ if ($assertType(_ref, $Int8, true)[1]) { $s = 22; continue; }
		/* */ if ($assertType(_ref, $Int16, true)[1]) { $s = 23; continue; }
		/* */ if ($assertType(_ref, $Int32, true)[1]) { $s = 24; continue; }
		/* */ if ($assertType(_ref, $Int64, true)[1]) { $s = 25; continue; }
		/* */ if ($assertType(_ref, $Uint, true)[1]) { $s = 26; continue; }
		/* */ if ($assertType(_ref, $Uint8, true)[1]) { $s = 27; continue; }
		/* */ if ($assertType(_ref, $Uint16, true)[1]) { $s = 28; continue; }
		/* */ if ($assertType(_ref, $Uint32, true)[1]) { $s = 29; continue; }
		/* */ if ($assertType(_ref, $Uint64, true)[1]) { $s = 30; continue; }
		/* */ if ($assertType(_ref, $Uintptr, true)[1]) { $s = 31; continue; }
		/* */ if ($assertType(_ref, $String, true)[1]) { $s = 32; continue; }
		/* */ if ($assertType(_ref, sliceType$2, true)[1]) { $s = 33; continue; }
		/* */ if ($assertType(_ref, reflect.Value, true)[1]) { $s = 34; continue; }
		/* */ $s = 35; continue;
		/* if ($assertType(_ref, $Bool, true)[1]) { */ case 16:
			f = _ref.$val;
			$r = p.fmtBool(f, verb); /* */ $s = 37; case 37: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 36; continue;
		/* } else if ($assertType(_ref, $Float32, true)[1]) { */ case 17:
			f$1 = _ref.$val;
			$r = p.fmtFloat((f$1), 32, verb); /* */ $s = 38; case 38: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 36; continue;
		/* } else if ($assertType(_ref, $Float64, true)[1]) { */ case 18:
			f$2 = _ref.$val;
			$r = p.fmtFloat(f$2, 64, verb); /* */ $s = 39; case 39: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 36; continue;
		/* } else if ($assertType(_ref, $Complex64, true)[1]) { */ case 19:
			f$3 = _ref.$val;
			$r = p.fmtComplex((new $Complex128(f$3.$real, f$3.$imag)), 64, verb); /* */ $s = 40; case 40: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 36; continue;
		/* } else if ($assertType(_ref, $Complex128, true)[1]) { */ case 20:
			f$4 = _ref.$val;
			$r = p.fmtComplex(f$4, 128, verb); /* */ $s = 41; case 41: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 36; continue;
		/* } else if ($assertType(_ref, $Int, true)[1]) { */ case 21:
			f$5 = _ref.$val;
			$r = p.fmtInteger((new $Uint64(0, f$5)), true, verb); /* */ $s = 42; case 42: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 36; continue;
		/* } else if ($assertType(_ref, $Int8, true)[1]) { */ case 22:
			f$6 = _ref.$val;
			$r = p.fmtInteger((new $Uint64(0, f$6)), true, verb); /* */ $s = 43; case 43: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 36; continue;
		/* } else if ($assertType(_ref, $Int16, true)[1]) { */ case 23:
			f$7 = _ref.$val;
			$r = p.fmtInteger((new $Uint64(0, f$7)), true, verb); /* */ $s = 44; case 44: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 36; continue;
		/* } else if ($assertType(_ref, $Int32, true)[1]) { */ case 24:
			f$8 = _ref.$val;
			$r = p.fmtInteger((new $Uint64(0, f$8)), true, verb); /* */ $s = 45; case 45: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 36; continue;
		/* } else if ($assertType(_ref, $Int64, true)[1]) { */ case 25:
			f$9 = _ref.$val;
			$r = p.fmtInteger((new $Uint64(f$9.$high, f$9.$low)), true, verb); /* */ $s = 46; case 46: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 36; continue;
		/* } else if ($assertType(_ref, $Uint, true)[1]) { */ case 26:
			f$10 = _ref.$val;
			$r = p.fmtInteger((new $Uint64(0, f$10)), false, verb); /* */ $s = 47; case 47: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 36; continue;
		/* } else if ($assertType(_ref, $Uint8, true)[1]) { */ case 27:
			f$11 = _ref.$val;
			$r = p.fmtInteger((new $Uint64(0, f$11)), false, verb); /* */ $s = 48; case 48: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 36; continue;
		/* } else if ($assertType(_ref, $Uint16, true)[1]) { */ case 28:
			f$12 = _ref.$val;
			$r = p.fmtInteger((new $Uint64(0, f$12)), false, verb); /* */ $s = 49; case 49: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 36; continue;
		/* } else if ($assertType(_ref, $Uint32, true)[1]) { */ case 29:
			f$13 = _ref.$val;
			$r = p.fmtInteger((new $Uint64(0, f$13)), false, verb); /* */ $s = 50; case 50: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 36; continue;
		/* } else if ($assertType(_ref, $Uint64, true)[1]) { */ case 30:
			f$14 = _ref.$val;
			$r = p.fmtInteger(f$14, false, verb); /* */ $s = 51; case 51: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 36; continue;
		/* } else if ($assertType(_ref, $Uintptr, true)[1]) { */ case 31:
			f$15 = _ref.$val;
			$r = p.fmtInteger((new $Uint64(0, f$15.constructor === Number ? f$15 : 1)), false, verb); /* */ $s = 52; case 52: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 36; continue;
		/* } else if ($assertType(_ref, $String, true)[1]) { */ case 32:
			f$16 = _ref.$val;
			$r = p.fmtString(f$16, verb); /* */ $s = 53; case 53: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 36; continue;
		/* } else if ($assertType(_ref, sliceType$2, true)[1]) { */ case 33:
			f$17 = _ref.$val;
			$r = p.fmtBytes(f$17, verb, "[]byte"); /* */ $s = 54; case 54: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 36; continue;
		/* } else if ($assertType(_ref, reflect.Value, true)[1]) { */ case 34:
			f$18 = _ref.$val;
			/* */ if ($clone(f$18, reflect.Value).IsValid() && $clone(f$18, reflect.Value).CanInterface()) { $s = 55; continue; }
			/* */ $s = 56; continue;
			/* if ($clone(f$18, reflect.Value).IsValid() && $clone(f$18, reflect.Value).CanInterface()) { */ case 55:
				_r$2 = $clone(f$18, reflect.Value).Interface(); /* */ $s = 57; case 57: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				p.arg = _r$2;
				_r$3 = p.handleMethods(verb); /* */ $s = 60; case 60: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				/* */ if (_r$3) { $s = 58; continue; }
				/* */ $s = 59; continue;
				/* if (_r$3) { */ case 58:
					$s = -1; return;
				/* } */ case 59:
			/* } */ case 56:
			$r = p.printValue($clone(f$18, reflect.Value), verb, 0); /* */ $s = 61; case 61: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 36; continue;
		/* } else { */ case 35:
			f$19 = _ref;
			_r$4 = p.handleMethods(verb); /* */ $s = 64; case 64: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			/* */ if (!_r$4) { $s = 62; continue; }
			/* */ $s = 63; continue;
			/* if (!_r$4) { */ case 62:
				_r$5 = reflect.ValueOf(f$19); /* */ $s = 65; case 65: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
				$r = p.printValue($clone(_r$5, reflect.Value), verb, 0); /* */ $s = 66; case 66: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 63:
		/* } */ case 36:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: pp.ptr.prototype.printArg }; } $f._1 = _1; $f._2 = _2; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._ref = _ref; $f.arg = arg; $f.f = f; $f.f$1 = f$1; $f.f$10 = f$10; $f.f$11 = f$11; $f.f$12 = f$12; $f.f$13 = f$13; $f.f$14 = f$14; $f.f$15 = f$15; $f.f$16 = f$16; $f.f$17 = f$17; $f.f$18 = f$18; $f.f$19 = f$19; $f.f$2 = f$2; $f.f$3 = f$3; $f.f$4 = f$4; $f.f$5 = f$5; $f.f$6 = f$6; $f.f$7 = f$7; $f.f$8 = f$8; $f.f$9 = f$9; $f.p = p; $f.verb = verb; $f.$s = $s; $f.$r = $r; return $f;
	};
	pp.prototype.printArg = function(arg, verb) { return this.$val.printArg(arg, verb); };
	pp.ptr.prototype.printValue = function(value, verb, depth) {
		var _1, _2, _3, _4, _arg, _arg$1, _arg$2, _i, _i$1, _r, _r$1, _r$10, _r$11, _r$12, _r$13, _r$14, _r$15, _r$16, _r$17, _r$18, _r$19, _r$2, _r$20, _r$21, _r$22, _r$23, _r$24, _r$25, _r$26, _r$27, _r$28, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _ref, _ref$1, a, bytes, depth, f, i, i$1, i$2, i$3, i$4, key, keys, name, p, t, value, value$1, verb, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _2 = $f._2; _3 = $f._3; _4 = $f._4; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _i = $f._i; _i$1 = $f._i$1; _r = $f._r; _r$1 = $f._r$1; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$12 = $f._r$12; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _r$17 = $f._r$17; _r$18 = $f._r$18; _r$19 = $f._r$19; _r$2 = $f._r$2; _r$20 = $f._r$20; _r$21 = $f._r$21; _r$22 = $f._r$22; _r$23 = $f._r$23; _r$24 = $f._r$24; _r$25 = $f._r$25; _r$26 = $f._r$26; _r$27 = $f._r$27; _r$28 = $f._r$28; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _ref = $f._ref; _ref$1 = $f._ref$1; a = $f.a; bytes = $f.bytes; depth = $f.depth; f = $f.f; i = $f.i; i$1 = $f.i$1; i$2 = $f.i$2; i$3 = $f.i$3; i$4 = $f.i$4; key = $f.key; keys = $f.keys; name = $f.name; p = $f.p; t = $f.t; value = $f.value; value$1 = $f.value$1; verb = $f.verb; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		/* */ if (depth > 0 && $clone(value, reflect.Value).IsValid() && $clone(value, reflect.Value).CanInterface()) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (depth > 0 && $clone(value, reflect.Value).IsValid() && $clone(value, reflect.Value).CanInterface()) { */ case 1:
			_r = $clone(value, reflect.Value).Interface(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			p.arg = _r;
			_r$1 = p.handleMethods(verb); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			/* */ if (_r$1) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (_r$1) { */ case 4:
				$s = -1; return;
			/* } */ case 5:
		/* } */ case 2:
		p.arg = $ifaceNil;
		p.value = value;
			f = value;
			_1 = $clone(value, reflect.Value).Kind();
			/* */ if (_1 === (0)) { $s = 8; continue; }
			/* */ if (_1 === (1)) { $s = 9; continue; }
			/* */ if ((_1 === (2)) || (_1 === (3)) || (_1 === (4)) || (_1 === (5)) || (_1 === (6))) { $s = 10; continue; }
			/* */ if ((_1 === (7)) || (_1 === (8)) || (_1 === (9)) || (_1 === (10)) || (_1 === (11)) || (_1 === (12))) { $s = 11; continue; }
			/* */ if (_1 === (13)) { $s = 12; continue; }
			/* */ if (_1 === (14)) { $s = 13; continue; }
			/* */ if (_1 === (15)) { $s = 14; continue; }
			/* */ if (_1 === (16)) { $s = 15; continue; }
			/* */ if (_1 === (24)) { $s = 16; continue; }
			/* */ if (_1 === (21)) { $s = 17; continue; }
			/* */ if (_1 === (25)) { $s = 18; continue; }
			/* */ if (_1 === (20)) { $s = 19; continue; }
			/* */ if ((_1 === (17)) || (_1 === (23))) { $s = 20; continue; }
			/* */ if (_1 === (22)) { $s = 21; continue; }
			/* */ if ((_1 === (18)) || (_1 === (19)) || (_1 === (26))) { $s = 22; continue; }
			/* */ $s = 23; continue;
			/* if (_1 === (0)) { */ case 8:
				/* */ if (depth === 0) { $s = 25; continue; }
				/* */ $s = 26; continue;
				/* if (depth === 0) { */ case 25:
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString("<invalid reflect.Value>");
					$s = 27; continue;
				/* } else { */ case 26:
						_2 = verb;
						/* */ if (_2 === (118)) { $s = 29; continue; }
						/* */ $s = 30; continue;
						/* if (_2 === (118)) { */ case 29:
							(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString("<nil>");
							$s = 31; continue;
						/* } else { */ case 30:
							$r = p.badVerb(verb); /* */ $s = 32; case 32: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						/* } */ case 31:
					case 28:
				/* } */ case 27:
				$s = 24; continue;
			/* } else if (_1 === (1)) { */ case 9:
				$r = p.fmtBool($clone(f, reflect.Value).Bool(), verb); /* */ $s = 33; case 33: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 24; continue;
			/* } else if ((_1 === (2)) || (_1 === (3)) || (_1 === (4)) || (_1 === (5)) || (_1 === (6))) { */ case 10:
				$r = p.fmtInteger(((x = $clone(f, reflect.Value).Int(), new $Uint64(x.$high, x.$low))), true, verb); /* */ $s = 34; case 34: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 24; continue;
			/* } else if ((_1 === (7)) || (_1 === (8)) || (_1 === (9)) || (_1 === (10)) || (_1 === (11)) || (_1 === (12))) { */ case 11:
				$r = p.fmtInteger($clone(f, reflect.Value).Uint(), false, verb); /* */ $s = 35; case 35: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 24; continue;
			/* } else if (_1 === (13)) { */ case 12:
				$r = p.fmtFloat($clone(f, reflect.Value).Float(), 32, verb); /* */ $s = 36; case 36: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 24; continue;
			/* } else if (_1 === (14)) { */ case 13:
				$r = p.fmtFloat($clone(f, reflect.Value).Float(), 64, verb); /* */ $s = 37; case 37: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 24; continue;
			/* } else if (_1 === (15)) { */ case 14:
				$r = p.fmtComplex($clone(f, reflect.Value).Complex(), 64, verb); /* */ $s = 38; case 38: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 24; continue;
			/* } else if (_1 === (16)) { */ case 15:
				$r = p.fmtComplex($clone(f, reflect.Value).Complex(), 128, verb); /* */ $s = 39; case 39: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 24; continue;
			/* } else if (_1 === (24)) { */ case 16:
				_r$2 = $clone(f, reflect.Value).String(); /* */ $s = 40; case 40: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				$r = p.fmtString(_r$2, verb); /* */ $s = 41; case 41: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 24; continue;
			/* } else if (_1 === (21)) { */ case 17:
				/* */ if (p.fmt.fmtFlags.sharpV) { $s = 42; continue; }
				/* */ $s = 43; continue;
				/* if (p.fmt.fmtFlags.sharpV) { */ case 42:
					_r$3 = $clone(f, reflect.Value).Type(); /* */ $s = 45; case 45: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
					_r$4 = _r$3.String(); /* */ $s = 46; case 46: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
					$r = (p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString(_r$4); /* */ $s = 47; case 47: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					if ($clone(f, reflect.Value).IsNil()) {
						(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString("(nil)");
						$s = -1; return;
					}
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(123);
					$s = 44; continue;
				/* } else { */ case 43:
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString("map[");
				/* } */ case 44:
				_r$5 = $clone(f, reflect.Value).MapKeys(); /* */ $s = 48; case 48: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
				keys = _r$5;
				_ref = keys;
				_i = 0;
				/* while (true) { */ case 49:
					/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 50; continue; }
					i = _i;
					key = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
					if (i > 0) {
						if (p.fmt.fmtFlags.sharpV) {
							(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString(", ");
						} else {
							(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(32);
						}
					}
					$r = p.printValue($clone(key, reflect.Value), verb, depth + 1 >> 0); /* */ $s = 51; case 51: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(58);
					_r$6 = $clone(f, reflect.Value).MapIndex($clone(key, reflect.Value)); /* */ $s = 52; case 52: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
					$r = p.printValue($clone(_r$6, reflect.Value), verb, depth + 1 >> 0); /* */ $s = 53; case 53: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					_i++;
				/* } */ $s = 49; continue; case 50:
				if (p.fmt.fmtFlags.sharpV) {
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(125);
				} else {
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(93);
				}
				$s = 24; continue;
			/* } else if (_1 === (25)) { */ case 18:
				/* */ if (p.fmt.fmtFlags.sharpV) { $s = 54; continue; }
				/* */ $s = 55; continue;
				/* if (p.fmt.fmtFlags.sharpV) { */ case 54:
					_r$7 = $clone(f, reflect.Value).Type(); /* */ $s = 56; case 56: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
					_r$8 = _r$7.String(); /* */ $s = 57; case 57: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
					$r = (p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString(_r$8); /* */ $s = 58; case 58: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 55:
				(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(123);
				i$1 = 0;
				/* while (true) { */ case 59:
					/* if (!(i$1 < $clone(f, reflect.Value).NumField())) { break; } */ if(!(i$1 < $clone(f, reflect.Value).NumField())) { $s = 60; continue; }
					if (i$1 > 0) {
						if (p.fmt.fmtFlags.sharpV) {
							(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString(", ");
						} else {
							(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(32);
						}
					}
					/* */ if (p.fmt.fmtFlags.plusV || p.fmt.fmtFlags.sharpV) { $s = 61; continue; }
					/* */ $s = 62; continue;
					/* if (p.fmt.fmtFlags.plusV || p.fmt.fmtFlags.sharpV) { */ case 61:
						_r$9 = $clone(f, reflect.Value).Type(); /* */ $s = 63; case 63: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
						_r$10 = _r$9.Field(i$1); /* */ $s = 64; case 64: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
						name = _r$10.Name;
						if (!(name === "")) {
							(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString(name);
							(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(58);
						}
					/* } */ case 62:
					_r$11 = getField($clone(f, reflect.Value), i$1); /* */ $s = 65; case 65: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
					$r = p.printValue($clone(_r$11, reflect.Value), verb, depth + 1 >> 0); /* */ $s = 66; case 66: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					i$1 = i$1 + (1) >> 0;
				/* } */ $s = 59; continue; case 60:
				(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(125);
				$s = 24; continue;
			/* } else if (_1 === (20)) { */ case 19:
				_r$12 = $clone(f, reflect.Value).Elem(); /* */ $s = 67; case 67: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }
				value$1 = _r$12;
				/* */ if (!$clone(value$1, reflect.Value).IsValid()) { $s = 68; continue; }
				/* */ $s = 69; continue;
				/* if (!$clone(value$1, reflect.Value).IsValid()) { */ case 68:
					/* */ if (p.fmt.fmtFlags.sharpV) { $s = 71; continue; }
					/* */ $s = 72; continue;
					/* if (p.fmt.fmtFlags.sharpV) { */ case 71:
						_r$13 = $clone(f, reflect.Value).Type(); /* */ $s = 74; case 74: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
						_r$14 = _r$13.String(); /* */ $s = 75; case 75: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
						$r = (p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString(_r$14); /* */ $s = 76; case 76: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString("(nil)");
						$s = 73; continue;
					/* } else { */ case 72:
						(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString("<nil>");
					/* } */ case 73:
					$s = 70; continue;
				/* } else { */ case 69:
					$r = p.printValue($clone(value$1, reflect.Value), verb, depth + 1 >> 0); /* */ $s = 77; case 77: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 70:
				$s = 24; continue;
			/* } else if ((_1 === (17)) || (_1 === (23))) { */ case 20:
					_3 = verb;
					/* */ if ((_3 === (115)) || (_3 === (113)) || (_3 === (120)) || (_3 === (88))) { $s = 79; continue; }
					/* */ $s = 80; continue;
					/* if ((_3 === (115)) || (_3 === (113)) || (_3 === (120)) || (_3 === (88))) { */ case 79:
						_r$15 = $clone(f, reflect.Value).Type(); /* */ $s = 81; case 81: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
						t = _r$15;
						_r$16 = t.Elem(); /* */ $s = 84; case 84: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
						_r$17 = _r$16.Kind(); /* */ $s = 85; case 85: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }
						/* */ if (_r$17 === 8) { $s = 82; continue; }
						/* */ $s = 83; continue;
						/* if (_r$17 === 8) { */ case 82:
							bytes = sliceType$2.nil;
							/* */ if ($clone(f, reflect.Value).Kind() === 23) { $s = 86; continue; }
							/* */ if ($clone(f, reflect.Value).CanAddr()) { $s = 87; continue; }
							/* */ $s = 88; continue;
							/* if ($clone(f, reflect.Value).Kind() === 23) { */ case 86:
								_r$18 = $clone(f, reflect.Value).Bytes(); /* */ $s = 90; case 90: if($c) { $c = false; _r$18 = _r$18.$blk(); } if (_r$18 && _r$18.$blk !== undefined) { break s; }
								bytes = _r$18;
								$s = 89; continue;
							/* } else if ($clone(f, reflect.Value).CanAddr()) { */ case 87:
								_r$19 = $clone(f, reflect.Value).Slice(0, $clone(f, reflect.Value).Len()); /* */ $s = 91; case 91: if($c) { $c = false; _r$19 = _r$19.$blk(); } if (_r$19 && _r$19.$blk !== undefined) { break s; }
								_r$20 = $clone(_r$19, reflect.Value).Bytes(); /* */ $s = 92; case 92: if($c) { $c = false; _r$20 = _r$20.$blk(); } if (_r$20 && _r$20.$blk !== undefined) { break s; }
								bytes = _r$20;
								$s = 89; continue;
							/* } else { */ case 88:
								bytes = $makeSlice(sliceType$2, $clone(f, reflect.Value).Len());
								_ref$1 = bytes;
								_i$1 = 0;
								/* while (true) { */ case 93:
									/* if (!(_i$1 < _ref$1.$length)) { break; } */ if(!(_i$1 < _ref$1.$length)) { $s = 94; continue; }
									i$2 = _i$1;
									_r$21 = $clone(f, reflect.Value).Index(i$2); /* */ $s = 95; case 95: if($c) { $c = false; _r$21 = _r$21.$blk(); } if (_r$21 && _r$21.$blk !== undefined) { break s; }
									_r$22 = $clone(_r$21, reflect.Value).Uint(); /* */ $s = 96; case 96: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
									((i$2 < 0 || i$2 >= bytes.$length) ? ($throwRuntimeError("index out of range"), undefined) : bytes.$array[bytes.$offset + i$2] = ((_r$22.$low << 24 >>> 24)));
									_i$1++;
								/* } */ $s = 93; continue; case 94:
							/* } */ case 89:
							_arg = bytes;
							_arg$1 = verb;
							_r$23 = t.String(); /* */ $s = 97; case 97: if($c) { $c = false; _r$23 = _r$23.$blk(); } if (_r$23 && _r$23.$blk !== undefined) { break s; }
							_arg$2 = _r$23;
							$r = p.fmtBytes(_arg, _arg$1, _arg$2); /* */ $s = 98; case 98: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
							$s = -1; return;
						/* } */ case 83:
					/* } */ case 80:
				case 78:
				/* */ if (p.fmt.fmtFlags.sharpV) { $s = 99; continue; }
				/* */ $s = 100; continue;
				/* if (p.fmt.fmtFlags.sharpV) { */ case 99:
					_r$24 = $clone(f, reflect.Value).Type(); /* */ $s = 102; case 102: if($c) { $c = false; _r$24 = _r$24.$blk(); } if (_r$24 && _r$24.$blk !== undefined) { break s; }
					_r$25 = _r$24.String(); /* */ $s = 103; case 103: if($c) { $c = false; _r$25 = _r$25.$blk(); } if (_r$25 && _r$25.$blk !== undefined) { break s; }
					$r = (p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString(_r$25); /* */ $s = 104; case 104: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					if (($clone(f, reflect.Value).Kind() === 23) && $clone(f, reflect.Value).IsNil()) {
						(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString("(nil)");
						$s = -1; return;
					}
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(123);
					i$3 = 0;
					/* while (true) { */ case 105:
						/* if (!(i$3 < $clone(f, reflect.Value).Len())) { break; } */ if(!(i$3 < $clone(f, reflect.Value).Len())) { $s = 106; continue; }
						if (i$3 > 0) {
							(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString(", ");
						}
						_r$26 = $clone(f, reflect.Value).Index(i$3); /* */ $s = 107; case 107: if($c) { $c = false; _r$26 = _r$26.$blk(); } if (_r$26 && _r$26.$blk !== undefined) { break s; }
						$r = p.printValue($clone(_r$26, reflect.Value), verb, depth + 1 >> 0); /* */ $s = 108; case 108: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						i$3 = i$3 + (1) >> 0;
					/* } */ $s = 105; continue; case 106:
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(125);
					$s = 101; continue;
				/* } else { */ case 100:
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(91);
					i$4 = 0;
					/* while (true) { */ case 109:
						/* if (!(i$4 < $clone(f, reflect.Value).Len())) { break; } */ if(!(i$4 < $clone(f, reflect.Value).Len())) { $s = 110; continue; }
						if (i$4 > 0) {
							(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(32);
						}
						_r$27 = $clone(f, reflect.Value).Index(i$4); /* */ $s = 111; case 111: if($c) { $c = false; _r$27 = _r$27.$blk(); } if (_r$27 && _r$27.$blk !== undefined) { break s; }
						$r = p.printValue($clone(_r$27, reflect.Value), verb, depth + 1 >> 0); /* */ $s = 112; case 112: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						i$4 = i$4 + (1) >> 0;
					/* } */ $s = 109; continue; case 110:
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(93);
				/* } */ case 101:
				$s = 24; continue;
			/* } else if (_1 === (22)) { */ case 21:
				/* */ if ((depth === 0) && !(($clone(f, reflect.Value).Pointer() === 0))) { $s = 113; continue; }
				/* */ $s = 114; continue;
				/* if ((depth === 0) && !(($clone(f, reflect.Value).Pointer() === 0))) { */ case 113:
						_r$28 = $clone(f, reflect.Value).Elem(); /* */ $s = 116; case 116: if($c) { $c = false; _r$28 = _r$28.$blk(); } if (_r$28 && _r$28.$blk !== undefined) { break s; }
						a = _r$28;
						_4 = $clone(a, reflect.Value).Kind();
						/* */ if ((_4 === (17)) || (_4 === (23)) || (_4 === (25)) || (_4 === (21))) { $s = 117; continue; }
						/* */ $s = 118; continue;
						/* if ((_4 === (17)) || (_4 === (23)) || (_4 === (25)) || (_4 === (21))) { */ case 117:
							(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(38);
							$r = p.printValue($clone(a, reflect.Value), verb, depth + 1 >> 0); /* */ $s = 119; case 119: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
							$s = -1; return;
						/* } */ case 118:
					case 115:
				/* } */ case 114:
				$r = p.fmtPointer($clone(f, reflect.Value), verb); /* */ $s = 120; case 120: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 24; continue;
			/* } else if ((_1 === (18)) || (_1 === (19)) || (_1 === (26))) { */ case 22:
				$r = p.fmtPointer($clone(f, reflect.Value), verb); /* */ $s = 121; case 121: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 24; continue;
			/* } else { */ case 23:
				$r = p.unknownType($clone(f, reflect.Value)); /* */ $s = 122; case 122: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 24:
		case 7:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: pp.ptr.prototype.printValue }; } $f._1 = _1; $f._2 = _2; $f._3 = _3; $f._4 = _4; $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._i = _i; $f._i$1 = _i$1; $f._r = _r; $f._r$1 = _r$1; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$12 = _r$12; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._r$17 = _r$17; $f._r$18 = _r$18; $f._r$19 = _r$19; $f._r$2 = _r$2; $f._r$20 = _r$20; $f._r$21 = _r$21; $f._r$22 = _r$22; $f._r$23 = _r$23; $f._r$24 = _r$24; $f._r$25 = _r$25; $f._r$26 = _r$26; $f._r$27 = _r$27; $f._r$28 = _r$28; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._ref = _ref; $f._ref$1 = _ref$1; $f.a = a; $f.bytes = bytes; $f.depth = depth; $f.f = f; $f.i = i; $f.i$1 = i$1; $f.i$2 = i$2; $f.i$3 = i$3; $f.i$4 = i$4; $f.key = key; $f.keys = keys; $f.name = name; $f.p = p; $f.t = t; $f.value = value; $f.value$1 = value$1; $f.verb = verb; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	pp.prototype.printValue = function(value, verb, depth) { return this.$val.printValue(value, verb, depth); };
	intFromArg = function(a, argNum) {
		var _1, _r, _tuple, a, argNum, isInt, n, n$1, newArgNum, num, v, x, x$1, x$2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _r = $f._r; _tuple = $f._tuple; a = $f.a; argNum = $f.argNum; isInt = $f.isInt; n = $f.n; n$1 = $f.n$1; newArgNum = $f.newArgNum; num = $f.num; v = $f.v; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		num = 0;
		isInt = false;
		newArgNum = 0;
		newArgNum = argNum;
		/* */ if (argNum < a.$length) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (argNum < a.$length) { */ case 1:
			_tuple = $assertType(((argNum < 0 || argNum >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + argNum]), $Int, true);
			num = _tuple[0];
			isInt = _tuple[1];
			/* */ if (!isInt) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (!isInt) { */ case 3:
					_r = reflect.ValueOf(((argNum < 0 || argNum >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + argNum])); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
					v = _r;
					_1 = $clone(v, reflect.Value).Kind();
					if ((_1 === (2)) || (_1 === (3)) || (_1 === (4)) || (_1 === (5)) || (_1 === (6))) {
						n = $clone(v, reflect.Value).Int();
						if ((x = (new $Int64(0, (((n.$low + ((n.$high >> 31) * 4294967296)) >> 0)))), (x.$high === n.$high && x.$low === n.$low))) {
							num = (((n.$low + ((n.$high >> 31) * 4294967296)) >> 0));
							isInt = true;
						}
					} else if ((_1 === (7)) || (_1 === (8)) || (_1 === (9)) || (_1 === (10)) || (_1 === (11)) || (_1 === (12))) {
						n$1 = $clone(v, reflect.Value).Uint();
						if ((x$1 = (new $Int64(n$1.$high, n$1.$low)), (x$1.$high > 0 || (x$1.$high === 0 && x$1.$low >= 0))) && (x$2 = (new $Uint64(0, ((n$1.$low >> 0)))), (x$2.$high === n$1.$high && x$2.$low === n$1.$low))) {
							num = ((n$1.$low >> 0));
							isInt = true;
						}
					}
				case 5:
			/* } */ case 4:
			newArgNum = argNum + 1 >> 0;
			if (tooLarge(num)) {
				num = 0;
				isInt = false;
			}
		/* } */ case 2:
		$s = -1; return [num, isInt, newArgNum];
		/* */ } return; } if ($f === undefined) { $f = { $blk: intFromArg }; } $f._1 = _1; $f._r = _r; $f._tuple = _tuple; $f.a = a; $f.argNum = argNum; $f.isInt = isInt; $f.n = n; $f.n$1 = n$1; $f.newArgNum = newArgNum; $f.num = num; $f.v = v; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.$s = $s; $f.$r = $r; return $f;
	};
	parseArgNumber = function(format) {
		var _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tuple, format, i, index, newi, ok, ok$1, wid, width;
		index = 0;
		wid = 0;
		ok = false;
		if (format.length < 3) {
			_tmp = 0;
			_tmp$1 = 1;
			_tmp$2 = false;
			index = _tmp;
			wid = _tmp$1;
			ok = _tmp$2;
			return [index, wid, ok];
		}
		i = 1;
		while (true) {
			if (!(i < format.length)) { break; }
			if (format.charCodeAt(i) === 93) {
				_tuple = parsenum(format, 1, i);
				width = _tuple[0];
				ok$1 = _tuple[1];
				newi = _tuple[2];
				if (!ok$1 || !((newi === i))) {
					_tmp$3 = 0;
					_tmp$4 = i + 1 >> 0;
					_tmp$5 = false;
					index = _tmp$3;
					wid = _tmp$4;
					ok = _tmp$5;
					return [index, wid, ok];
				}
				_tmp$6 = width - 1 >> 0;
				_tmp$7 = i + 1 >> 0;
				_tmp$8 = true;
				index = _tmp$6;
				wid = _tmp$7;
				ok = _tmp$8;
				return [index, wid, ok];
			}
			i = i + (1) >> 0;
		}
		_tmp$9 = 0;
		_tmp$10 = 1;
		_tmp$11 = false;
		index = _tmp$9;
		wid = _tmp$10;
		ok = _tmp$11;
		return [index, wid, ok];
	};
	pp.ptr.prototype.argNumber = function(argNum, format, i, numArgs) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tuple, argNum, format, found, i, index, newArgNum, newi, numArgs, ok, p, wid;
		newArgNum = 0;
		newi = 0;
		found = false;
		p = this;
		if (format.length <= i || !((format.charCodeAt(i) === 91))) {
			_tmp = argNum;
			_tmp$1 = i;
			_tmp$2 = false;
			newArgNum = _tmp;
			newi = _tmp$1;
			found = _tmp$2;
			return [newArgNum, newi, found];
		}
		p.reordered = true;
		_tuple = parseArgNumber($substring(format, i));
		index = _tuple[0];
		wid = _tuple[1];
		ok = _tuple[2];
		if (ok && 0 <= index && index < numArgs) {
			_tmp$3 = index;
			_tmp$4 = i + wid >> 0;
			_tmp$5 = true;
			newArgNum = _tmp$3;
			newi = _tmp$4;
			found = _tmp$5;
			return [newArgNum, newi, found];
		}
		p.goodArgNum = false;
		_tmp$6 = argNum;
		_tmp$7 = i + wid >> 0;
		_tmp$8 = ok;
		newArgNum = _tmp$6;
		newi = _tmp$7;
		found = _tmp$8;
		return [newArgNum, newi, found];
	};
	pp.prototype.argNumber = function(argNum, format, i, numArgs) { return this.$val.argNumber(argNum, format, i, numArgs); };
	pp.ptr.prototype.badArgNum = function(verb) {
		var p, verb;
		p = this;
		(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString("%!");
		(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteRune(verb);
		(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString("(BADINDEX)");
	};
	pp.prototype.badArgNum = function(verb) { return this.$val.badArgNum(verb); };
	pp.ptr.prototype.missingArg = function(verb) {
		var p, verb;
		p = this;
		(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString("%!");
		(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteRune(verb);
		(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString("(MISSING)");
	};
	pp.prototype.missingArg = function(verb) { return this.$val.missingArg(verb); };
	pp.ptr.prototype.doPrintf = function(format, a) {
		var _1, _i, _r, _r$1, _r$2, _ref, _tmp, _tmp$1, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, _tuple$5, _tuple$6, _tuple$7, a, afterIndex, arg, argNum, c, end, format, i, i$1, lasti, p, size, verb, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _i = $f._i; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _ref = $f._ref; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; _tuple$4 = $f._tuple$4; _tuple$5 = $f._tuple$5; _tuple$6 = $f._tuple$6; _tuple$7 = $f._tuple$7; a = $f.a; afterIndex = $f.afterIndex; arg = $f.arg; argNum = $f.argNum; c = $f.c; end = $f.end; format = $f.format; i = $f.i; i$1 = $f.i$1; lasti = $f.lasti; p = $f.p; size = $f.size; verb = $f.verb; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		end = format.length;
		argNum = 0;
		afterIndex = false;
		p.reordered = false;
		i = 0;
		/* while (true) { */ case 1:
			/* if (!(i < end)) { break; } */ if(!(i < end)) { $s = 2; continue; }
			p.goodArgNum = true;
			lasti = i;
			while (true) {
				if (!(i < end && !((format.charCodeAt(i) === 37)))) { break; }
				i = i + (1) >> 0;
			}
			if (i > lasti) {
				(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString($substring(format, lasti, i));
			}
			if (i >= end) {
				/* break; */ $s = 2; continue;
			}
			i = i + (1) >> 0;
			p.fmt.clearflags();
			/* while (true) { */ case 3:
				/* if (!(i < end)) { break; } */ if(!(i < end)) { $s = 4; continue; }
				c = format.charCodeAt(i);
					_1 = c;
					/* */ if (_1 === (35)) { $s = 6; continue; }
					/* */ if (_1 === (48)) { $s = 7; continue; }
					/* */ if (_1 === (43)) { $s = 8; continue; }
					/* */ if (_1 === (45)) { $s = 9; continue; }
					/* */ if (_1 === (32)) { $s = 10; continue; }
					/* */ $s = 11; continue;
					/* if (_1 === (35)) { */ case 6:
						p.fmt.fmtFlags.sharp = true;
						$s = 12; continue;
					/* } else if (_1 === (48)) { */ case 7:
						p.fmt.fmtFlags.zero = !p.fmt.fmtFlags.minus;
						$s = 12; continue;
					/* } else if (_1 === (43)) { */ case 8:
						p.fmt.fmtFlags.plus = true;
						$s = 12; continue;
					/* } else if (_1 === (45)) { */ case 9:
						p.fmt.fmtFlags.minus = true;
						p.fmt.fmtFlags.zero = false;
						$s = 12; continue;
					/* } else if (_1 === (32)) { */ case 10:
						p.fmt.fmtFlags.space = true;
						$s = 12; continue;
					/* } else { */ case 11:
						/* */ if (97 <= c && c <= 122 && argNum < a.$length) { $s = 13; continue; }
						/* */ $s = 14; continue;
						/* if (97 <= c && c <= 122 && argNum < a.$length) { */ case 13:
							if (c === 118) {
								p.fmt.fmtFlags.sharpV = p.fmt.fmtFlags.sharp;
								p.fmt.fmtFlags.sharp = false;
								p.fmt.fmtFlags.plusV = p.fmt.fmtFlags.plus;
								p.fmt.fmtFlags.plus = false;
							}
							$r = p.printArg(((argNum < 0 || argNum >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + argNum]), ((c >> 0))); /* */ $s = 15; case 15: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
							argNum = argNum + (1) >> 0;
							i = i + (1) >> 0;
							/* continue formatLoop; */ $s = 1; continue s;
						/* } */ case 14:
						/* break simpleFormat; */ $s = 4; continue s;
					/* } */ case 12:
				case 5:
				i = i + (1) >> 0;
			/* } */ $s = 3; continue; case 4:
			_tuple = p.argNumber(argNum, format, i, a.$length);
			argNum = _tuple[0];
			i = _tuple[1];
			afterIndex = _tuple[2];
			/* */ if (i < end && (format.charCodeAt(i) === 42)) { $s = 16; continue; }
			/* */ $s = 17; continue;
			/* if (i < end && (format.charCodeAt(i) === 42)) { */ case 16:
				i = i + (1) >> 0;
				_r = intFromArg(a, argNum); /* */ $s = 19; case 19: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				_tuple$1 = _r;
				p.fmt.wid = _tuple$1[0];
				p.fmt.fmtFlags.widPresent = _tuple$1[1];
				argNum = _tuple$1[2];
				if (!p.fmt.fmtFlags.widPresent) {
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString("%!(BADWIDTH)");
				}
				if (p.fmt.wid < 0) {
					p.fmt.wid = -p.fmt.wid;
					p.fmt.fmtFlags.minus = true;
					p.fmt.fmtFlags.zero = false;
				}
				afterIndex = false;
				$s = 18; continue;
			/* } else { */ case 17:
				_tuple$2 = parsenum(format, i, end);
				p.fmt.wid = _tuple$2[0];
				p.fmt.fmtFlags.widPresent = _tuple$2[1];
				i = _tuple$2[2];
				if (afterIndex && p.fmt.fmtFlags.widPresent) {
					p.goodArgNum = false;
				}
			/* } */ case 18:
			/* */ if ((i + 1 >> 0) < end && (format.charCodeAt(i) === 46)) { $s = 20; continue; }
			/* */ $s = 21; continue;
			/* if ((i + 1 >> 0) < end && (format.charCodeAt(i) === 46)) { */ case 20:
				i = i + (1) >> 0;
				if (afterIndex) {
					p.goodArgNum = false;
				}
				_tuple$3 = p.argNumber(argNum, format, i, a.$length);
				argNum = _tuple$3[0];
				i = _tuple$3[1];
				afterIndex = _tuple$3[2];
				/* */ if (i < end && (format.charCodeAt(i) === 42)) { $s = 22; continue; }
				/* */ $s = 23; continue;
				/* if (i < end && (format.charCodeAt(i) === 42)) { */ case 22:
					i = i + (1) >> 0;
					_r$1 = intFromArg(a, argNum); /* */ $s = 25; case 25: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
					_tuple$4 = _r$1;
					p.fmt.prec = _tuple$4[0];
					p.fmt.fmtFlags.precPresent = _tuple$4[1];
					argNum = _tuple$4[2];
					if (p.fmt.prec < 0) {
						p.fmt.prec = 0;
						p.fmt.fmtFlags.precPresent = false;
					}
					if (!p.fmt.fmtFlags.precPresent) {
						(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString("%!(BADPREC)");
					}
					afterIndex = false;
					$s = 24; continue;
				/* } else { */ case 23:
					_tuple$5 = parsenum(format, i, end);
					p.fmt.prec = _tuple$5[0];
					p.fmt.fmtFlags.precPresent = _tuple$5[1];
					i = _tuple$5[2];
					if (!p.fmt.fmtFlags.precPresent) {
						p.fmt.prec = 0;
						p.fmt.fmtFlags.precPresent = true;
					}
				/* } */ case 24:
			/* } */ case 21:
			if (!afterIndex) {
				_tuple$6 = p.argNumber(argNum, format, i, a.$length);
				argNum = _tuple$6[0];
				i = _tuple$6[1];
				afterIndex = _tuple$6[2];
			}
			if (i >= end) {
				(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString("%!(NOVERB)");
				/* break; */ $s = 2; continue;
			}
			_tmp = ((format.charCodeAt(i) >> 0));
			_tmp$1 = 1;
			verb = _tmp;
			size = _tmp$1;
			if (verb >= 128) {
				_tuple$7 = utf8.DecodeRuneInString($substring(format, i));
				verb = _tuple$7[0];
				size = _tuple$7[1];
			}
			i = i + (size) >> 0;
				/* */ if ((verb === 37)) { $s = 27; continue; }
				/* */ if (!p.goodArgNum) { $s = 28; continue; }
				/* */ if (argNum >= a.$length) { $s = 29; continue; }
				/* */ if ((verb === 118)) { $s = 30; continue; }
				/* */ $s = 31; continue;
				/* if ((verb === 37)) { */ case 27:
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(37);
					$s = 32; continue;
				/* } else if (!p.goodArgNum) { */ case 28:
					p.badArgNum(verb);
					$s = 32; continue;
				/* } else if (argNum >= a.$length) { */ case 29:
					p.missingArg(verb);
					$s = 32; continue;
				/* } else if ((verb === 118)) { */ case 30:
					p.fmt.fmtFlags.sharpV = p.fmt.fmtFlags.sharp;
					p.fmt.fmtFlags.sharp = false;
					p.fmt.fmtFlags.plusV = p.fmt.fmtFlags.plus;
					p.fmt.fmtFlags.plus = false;
					$r = p.printArg(((argNum < 0 || argNum >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + argNum]), verb); /* */ $s = 33; case 33: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					argNum = argNum + (1) >> 0;
					$s = 32; continue;
				/* } else { */ case 31:
					$r = p.printArg(((argNum < 0 || argNum >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + argNum]), verb); /* */ $s = 34; case 34: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					argNum = argNum + (1) >> 0;
				/* } */ case 32:
			case 26:
		/* } */ $s = 1; continue; case 2:
		/* */ if (!p.reordered && argNum < a.$length) { $s = 35; continue; }
		/* */ $s = 36; continue;
		/* if (!p.reordered && argNum < a.$length) { */ case 35:
			p.fmt.clearflags();
			(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString("%!(EXTRA ");
			_ref = $subslice(a, argNum);
			_i = 0;
			/* while (true) { */ case 37:
				/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 38; continue; }
				i$1 = _i;
				arg = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
				if (i$1 > 0) {
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString(", ");
				}
				/* */ if ($interfaceIsEqual(arg, $ifaceNil)) { $s = 39; continue; }
				/* */ $s = 40; continue;
				/* if ($interfaceIsEqual(arg, $ifaceNil)) { */ case 39:
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString("<nil>");
					$s = 41; continue;
				/* } else { */ case 40:
					_r$2 = reflect.TypeOf(arg).String(); /* */ $s = 42; case 42: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
					$r = (p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString(_r$2); /* */ $s = 43; case 43: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(61);
					$r = p.printArg(arg, 118); /* */ $s = 44; case 44: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 41:
				_i++;
			/* } */ $s = 37; continue; case 38:
			(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(41);
		/* } */ case 36:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: pp.ptr.prototype.doPrintf }; } $f._1 = _1; $f._i = _i; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._ref = _ref; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f._tuple$4 = _tuple$4; $f._tuple$5 = _tuple$5; $f._tuple$6 = _tuple$6; $f._tuple$7 = _tuple$7; $f.a = a; $f.afterIndex = afterIndex; $f.arg = arg; $f.argNum = argNum; $f.c = c; $f.end = end; $f.format = format; $f.i = i; $f.i$1 = i$1; $f.lasti = lasti; $f.p = p; $f.size = size; $f.verb = verb; $f.$s = $s; $f.$r = $r; return $f;
	};
	pp.prototype.doPrintf = function(format, a) { return this.$val.doPrintf(format, a); };
	pp.ptr.prototype.doPrint = function(a) {
		var _i, _r, _ref, _v, a, arg, argNum, isString, p, prevString, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _r = $f._r; _ref = $f._ref; _v = $f._v; a = $f.a; arg = $f.arg; argNum = $f.argNum; isString = $f.isString; p = $f.p; prevString = $f.prevString; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		prevString = false;
		_ref = a;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			argNum = _i;
			arg = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			if (!(!($interfaceIsEqual(arg, $ifaceNil)))) { _v = false; $s = 3; continue s; }
			_r = reflect.TypeOf(arg).Kind(); /* */ $s = 4; case 4: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_v = _r === 24; case 3:
			isString = _v;
			if (argNum > 0 && !isString && !prevString) {
				(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(32);
			}
			$r = p.printArg(arg, 118); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			prevString = isString;
			_i++;
		/* } */ $s = 1; continue; case 2:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: pp.ptr.prototype.doPrint }; } $f._i = _i; $f._r = _r; $f._ref = _ref; $f._v = _v; $f.a = a; $f.arg = arg; $f.argNum = argNum; $f.isString = isString; $f.p = p; $f.prevString = prevString; $f.$s = $s; $f.$r = $r; return $f;
	};
	pp.prototype.doPrint = function(a) { return this.$val.doPrint(a); };
	pp.ptr.prototype.doPrintln = function(a) {
		var _i, _ref, a, arg, argNum, p, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _ref = $f._ref; a = $f.a; arg = $f.arg; argNum = $f.argNum; p = $f.p; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		_ref = a;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			argNum = _i;
			arg = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			if (argNum > 0) {
				(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(32);
			}
			$r = p.printArg(arg, 118); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_i++;
		/* } */ $s = 1; continue; case 2:
		(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(10);
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: pp.ptr.prototype.doPrintln }; } $f._i = _i; $f._ref = _ref; $f.a = a; $f.arg = arg; $f.argNum = argNum; $f.p = p; $f.$s = $s; $f.$r = $r; return $f;
	};
	pp.prototype.doPrintln = function(a) { return this.$val.doPrintln(a); };
	ss.ptr.prototype.Read = function(buf) {
		var _tmp, _tmp$1, buf, err, n, s;
		n = 0;
		err = $ifaceNil;
		s = this;
		_tmp = 0;
		_tmp$1 = errors.New("ScanState's Read should not be called. Use ReadRune");
		n = _tmp;
		err = _tmp$1;
		return [n, err];
	};
	ss.prototype.Read = function(buf) { return this.$val.Read(buf); };
	ss.ptr.prototype.ReadRune = function() {
		var _r, _tuple, err, r, s, size, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; err = $f.err; r = $f.r; s = $f.s; size = $f.size; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		r = 0;
		size = 0;
		err = $ifaceNil;
		s = this;
		if (s.atEOF || s.count >= s.ssave.argLimit) {
			err = io.EOF;
			$s = -1; return [r, size, err];
		}
		_r = s.rs.ReadRune(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		r = _tuple[0];
		size = _tuple[1];
		err = _tuple[2];
		if ($interfaceIsEqual(err, $ifaceNil)) {
			s.count = s.count + (1) >> 0;
			if (s.ssave.nlIsEnd && (r === 10)) {
				s.atEOF = true;
			}
		} else if ($interfaceIsEqual(err, io.EOF)) {
			s.atEOF = true;
		}
		$s = -1; return [r, size, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: ss.ptr.prototype.ReadRune }; } $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.r = r; $f.s = s; $f.size = size; $f.$s = $s; $f.$r = $r; return $f;
	};
	ss.prototype.ReadRune = function() { return this.$val.ReadRune(); };
	ss.ptr.prototype.Width = function() {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, ok, s, wid;
		wid = 0;
		ok = false;
		s = this;
		if (s.ssave.maxWid === 1073741824) {
			_tmp = 0;
			_tmp$1 = false;
			wid = _tmp;
			ok = _tmp$1;
			return [wid, ok];
		}
		_tmp$2 = s.ssave.maxWid;
		_tmp$3 = true;
		wid = _tmp$2;
		ok = _tmp$3;
		return [wid, ok];
	};
	ss.prototype.Width = function() { return this.$val.Width(); };
	ss.ptr.prototype.getRune = function() {
		var _r, _tuple, err, r, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; err = $f.err; r = $f.r; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		r = 0;
		s = this;
		_r = s.ReadRune(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		r = _tuple[0];
		err = _tuple[2];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			if ($interfaceIsEqual(err, io.EOF)) {
				r = -1;
				$s = -1; return r;
			}
			s.error(err);
		}
		$s = -1; return r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: ss.ptr.prototype.getRune }; } $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.r = r; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	ss.prototype.getRune = function() { return this.$val.getRune(); };
	ss.ptr.prototype.UnreadRune = function() {
		var _r, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = s.rs.UnreadRune(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r;
		s.atEOF = false;
		s.count = s.count - (1) >> 0;
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: ss.ptr.prototype.UnreadRune }; } $f._r = _r; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	ss.prototype.UnreadRune = function() { return this.$val.UnreadRune(); };
	ss.ptr.prototype.error = function(err) {
		var err, s, x;
		s = this;
		$panic((x = new scanError.ptr(err), new x.constructor.elem(x)));
	};
	ss.prototype.error = function(err) { return this.$val.error(err); };
	ss.ptr.prototype.errorString = function(err) {
		var err, s, x;
		s = this;
		$panic((x = new scanError.ptr(errors.New(err)), new x.constructor.elem(x)));
	};
	ss.prototype.errorString = function(err) { return this.$val.errorString(err); };
	ss.ptr.prototype.Token = function(skipSpace, f) {
		var _r, err, f, s, skipSpace, tok, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; err = $f.err; f = $f.f; s = $f.s; skipSpace = $f.skipSpace; tok = $f.tok; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		err = [err];
		tok = sliceType$2.nil;
		err[0] = $ifaceNil;
		s = this;
		$deferred.push([(function(err) { return function() {
			var _tuple, e, ok, se;
			e = $recover();
			if (!($interfaceIsEqual(e, $ifaceNil))) {
				_tuple = $assertType(e, scanError, true);
				se = $clone(_tuple[0], scanError);
				ok = _tuple[1];
				if (ok) {
					err[0] = se.err;
				} else {
					$panic(e);
				}
			}
		}; })(err), []]);
		if (f === $throwNilPointerError) {
			f = notSpace;
		}
		s.buf = $subslice(s.buf, 0, 0);
		_r = s.token(skipSpace, f); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		tok = _r;
		$s = -1; return [tok, err[0]];
		/* */ } return; } } catch(err) { $err = err; $s = -1; } finally { $callDeferred($deferred, $err); if (!$curGoroutine.asleep) { return  [tok, err[0]]; } if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: ss.ptr.prototype.Token }; } $f._r = _r; $f.err = err; $f.f = f; $f.s = s; $f.skipSpace = skipSpace; $f.tok = tok; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	ss.prototype.Token = function(skipSpace, f) { return this.$val.Token(skipSpace, f); };
	isSpace = function(r) {
		var _i, _ref, r, rng, rx;
		if (r >= 65536) {
			return false;
		}
		rx = ((r << 16 >>> 16));
		_ref = space;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			rng = $clone(((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]), arrayType$1);
			if (rx < rng[0]) {
				return false;
			}
			if (rx <= rng[1]) {
				return true;
			}
			_i++;
		}
		return false;
	};
	notSpace = function(r) {
		var r;
		return !isSpace(r);
	};
	ss.ptr.prototype.free = function(old) {
		var old, s;
		s = this;
		if (old.validSave) {
			ssave.copy(s.ssave, old);
			return;
		}
		if (s.buf.$capacity > 1024) {
			return;
		}
		s.buf = $subslice(s.buf, 0, 0);
		s.rs = $ifaceNil;
		ssFree.Put(s);
	};
	ss.prototype.free = function(old) { return this.$val.free(old); };
	ss.ptr.prototype.SkipSpace = function() {
		var _r, _r$1, _r$2, _v, r, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _v = $f._v; r = $f.r; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		/* while (true) { */ case 1:
			_r = s.getRune(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			r = _r;
			if (r === -1) {
				$s = -1; return;
			}
			if (!(r === 13)) { _v = false; $s = 6; continue s; }
			_r$1 = s.peek("\n"); /* */ $s = 7; case 7: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_v = _r$1; case 6:
			/* */ if (_v) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (_v) { */ case 4:
				/* continue; */ $s = 1; continue;
			/* } */ case 5:
			/* */ if (r === 10) { $s = 8; continue; }
			/* */ $s = 9; continue;
			/* if (r === 10) { */ case 8:
				if (s.ssave.nlIsSpace) {
					/* continue; */ $s = 1; continue;
				}
				s.errorString("unexpected newline");
				$s = -1; return;
			/* } */ case 9:
			/* */ if (!isSpace(r)) { $s = 10; continue; }
			/* */ $s = 11; continue;
			/* if (!isSpace(r)) { */ case 10:
				_r$2 = s.UnreadRune(); /* */ $s = 12; case 12: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				_r$2;
				/* break; */ $s = 2; continue;
			/* } */ case 11:
		/* } */ $s = 1; continue; case 2:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: ss.ptr.prototype.SkipSpace }; } $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._v = _v; $f.r = r; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	ss.prototype.SkipSpace = function() { return this.$val.SkipSpace(); };
	ss.ptr.prototype.token = function(skipSpace, f) {
		var _r, _r$1, _r$2, f, r, s, skipSpace, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; f = $f.f; r = $f.r; s = $f.s; skipSpace = $f.skipSpace; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		/* */ if (skipSpace) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (skipSpace) { */ case 1:
			$r = s.SkipSpace(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 2:
		/* while (true) { */ case 4:
			_r = s.getRune(); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			r = _r;
			if (r === -1) {
				/* break; */ $s = 5; continue;
			}
			_r$1 = f(r); /* */ $s = 9; case 9: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			/* */ if (!_r$1) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if (!_r$1) { */ case 7:
				_r$2 = s.UnreadRune(); /* */ $s = 10; case 10: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				_r$2;
				/* break; */ $s = 5; continue;
			/* } */ case 8:
			(s.$ptr_buf || (s.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, s))).WriteRune(r);
		/* } */ $s = 4; continue; case 5:
		$s = -1; return (x = s.buf, $subslice(new sliceType$2(x.$array), x.$offset, x.$offset + x.$length));
		/* */ } return; } if ($f === undefined) { $f = { $blk: ss.ptr.prototype.token }; } $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.f = f; $f.r = r; $f.s = s; $f.skipSpace = skipSpace; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	ss.prototype.token = function(skipSpace, f) { return this.$val.token(skipSpace, f); };
	indexRune = function(s, r) {
		var _i, _ref, _rune, c, i, r, s;
		_ref = s;
		_i = 0;
		while (true) {
			if (!(_i < _ref.length)) { break; }
			_rune = $decodeRune(_ref, _i);
			i = _i;
			c = _rune[0];
			if (c === r) {
				return i;
			}
			_i += _rune[1];
		}
		return -1;
	};
	ss.ptr.prototype.peek = function(ok) {
		var _r, _r$1, ok, r, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; ok = $f.ok; r = $f.r; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = s.getRune(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		r = _r;
		/* */ if (!((r === -1))) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!((r === -1))) { */ case 2:
			_r$1 = s.UnreadRune(); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_r$1;
		/* } */ case 3:
		$s = -1; return indexRune(ok, r) >= 0;
		/* */ } return; } if ($f === undefined) { $f = { $blk: ss.ptr.prototype.peek }; } $f._r = _r; $f._r$1 = _r$1; $f.ok = ok; $f.r = r; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	ss.prototype.peek = function(ok) { return this.$val.peek(ok); };
	ptrType$25.methods = [{prop: "clearflags", name: "clearflags", pkg: "fmt", typ: $funcType([], [], false)}, {prop: "init", name: "init", pkg: "fmt", typ: $funcType([ptrType$1], [], false)}, {prop: "writePadding", name: "writePadding", pkg: "fmt", typ: $funcType([$Int], [], false)}, {prop: "pad", name: "pad", pkg: "fmt", typ: $funcType([sliceType$2], [], false)}, {prop: "padString", name: "padString", pkg: "fmt", typ: $funcType([$String], [], false)}, {prop: "fmt_boolean", name: "fmt_boolean", pkg: "fmt", typ: $funcType([$Bool], [], false)}, {prop: "fmt_unicode", name: "fmt_unicode", pkg: "fmt", typ: $funcType([$Uint64], [], false)}, {prop: "fmt_integer", name: "fmt_integer", pkg: "fmt", typ: $funcType([$Uint64, $Int, $Bool, $String], [], false)}, {prop: "truncate", name: "truncate", pkg: "fmt", typ: $funcType([$String], [$String], false)}, {prop: "fmt_s", name: "fmt_s", pkg: "fmt", typ: $funcType([$String], [], false)}, {prop: "fmt_sbx", name: "fmt_sbx", pkg: "fmt", typ: $funcType([$String, sliceType$2, $String], [], false)}, {prop: "fmt_sx", name: "fmt_sx", pkg: "fmt", typ: $funcType([$String, $String], [], false)}, {prop: "fmt_bx", name: "fmt_bx", pkg: "fmt", typ: $funcType([sliceType$2, $String], [], false)}, {prop: "fmt_q", name: "fmt_q", pkg: "fmt", typ: $funcType([$String], [], false)}, {prop: "fmt_c", name: "fmt_c", pkg: "fmt", typ: $funcType([$Uint64], [], false)}, {prop: "fmt_qc", name: "fmt_qc", pkg: "fmt", typ: $funcType([$Uint64], [], false)}, {prop: "fmt_float", name: "fmt_float", pkg: "fmt", typ: $funcType([$Float64, $Int, $Int32, $Int], [], false)}];
	ptrType$1.methods = [{prop: "Write", name: "Write", pkg: "", typ: $funcType([sliceType$2], [], false)}, {prop: "WriteString", name: "WriteString", pkg: "", typ: $funcType([$String], [], false)}, {prop: "WriteByte", name: "WriteByte", pkg: "", typ: $funcType([$Uint8], [], false)}, {prop: "WriteRune", name: "WriteRune", pkg: "", typ: $funcType([$Int32], [], false)}];
	ptrType$2.methods = [{prop: "free", name: "free", pkg: "fmt", typ: $funcType([], [], false)}, {prop: "Width", name: "Width", pkg: "", typ: $funcType([], [$Int, $Bool], false)}, {prop: "Precision", name: "Precision", pkg: "", typ: $funcType([], [$Int, $Bool], false)}, {prop: "Flag", name: "Flag", pkg: "", typ: $funcType([$Int], [$Bool], false)}, {prop: "Write", name: "Write", pkg: "", typ: $funcType([sliceType$2], [$Int, $error], false)}, {prop: "WriteString", name: "WriteString", pkg: "", typ: $funcType([$String], [$Int, $error], false)}, {prop: "unknownType", name: "unknownType", pkg: "fmt", typ: $funcType([reflect.Value], [], false)}, {prop: "badVerb", name: "badVerb", pkg: "fmt", typ: $funcType([$Int32], [], false)}, {prop: "fmtBool", name: "fmtBool", pkg: "fmt", typ: $funcType([$Bool, $Int32], [], false)}, {prop: "fmt0x64", name: "fmt0x64", pkg: "fmt", typ: $funcType([$Uint64, $Bool], [], false)}, {prop: "fmtInteger", name: "fmtInteger", pkg: "fmt", typ: $funcType([$Uint64, $Bool, $Int32], [], false)}, {prop: "fmtFloat", name: "fmtFloat", pkg: "fmt", typ: $funcType([$Float64, $Int, $Int32], [], false)}, {prop: "fmtComplex", name: "fmtComplex", pkg: "fmt", typ: $funcType([$Complex128, $Int, $Int32], [], false)}, {prop: "fmtString", name: "fmtString", pkg: "fmt", typ: $funcType([$String, $Int32], [], false)}, {prop: "fmtBytes", name: "fmtBytes", pkg: "fmt", typ: $funcType([sliceType$2, $Int32, $String], [], false)}, {prop: "fmtPointer", name: "fmtPointer", pkg: "fmt", typ: $funcType([reflect.Value, $Int32], [], false)}, {prop: "catchPanic", name: "catchPanic", pkg: "fmt", typ: $funcType([$emptyInterface, $Int32], [], false)}, {prop: "handleMethods", name: "handleMethods", pkg: "fmt", typ: $funcType([$Int32], [$Bool], false)}, {prop: "printArg", name: "printArg", pkg: "fmt", typ: $funcType([$emptyInterface, $Int32], [], false)}, {prop: "printValue", name: "printValue", pkg: "fmt", typ: $funcType([reflect.Value, $Int32, $Int], [], false)}, {prop: "argNumber", name: "argNumber", pkg: "fmt", typ: $funcType([$Int, $String, $Int, $Int], [$Int, $Int, $Bool], false)}, {prop: "badArgNum", name: "badArgNum", pkg: "fmt", typ: $funcType([$Int32], [], false)}, {prop: "missingArg", name: "missingArg", pkg: "fmt", typ: $funcType([$Int32], [], false)}, {prop: "doPrintf", name: "doPrintf", pkg: "fmt", typ: $funcType([$String, sliceType], [], false)}, {prop: "doPrint", name: "doPrint", pkg: "fmt", typ: $funcType([sliceType], [], false)}, {prop: "doPrintln", name: "doPrintln", pkg: "fmt", typ: $funcType([sliceType], [], false)}];
	ptrType$5.methods = [{prop: "Read", name: "Read", pkg: "", typ: $funcType([sliceType$2], [$Int, $error], false)}, {prop: "ReadRune", name: "ReadRune", pkg: "", typ: $funcType([], [$Int32, $Int, $error], false)}, {prop: "Width", name: "Width", pkg: "", typ: $funcType([], [$Int, $Bool], false)}, {prop: "getRune", name: "getRune", pkg: "fmt", typ: $funcType([], [$Int32], false)}, {prop: "mustReadRune", name: "mustReadRune", pkg: "fmt", typ: $funcType([], [$Int32], false)}, {prop: "UnreadRune", name: "UnreadRune", pkg: "", typ: $funcType([], [$error], false)}, {prop: "error", name: "error", pkg: "fmt", typ: $funcType([$error], [], false)}, {prop: "errorString", name: "errorString", pkg: "fmt", typ: $funcType([$String], [], false)}, {prop: "Token", name: "Token", pkg: "", typ: $funcType([$Bool, funcType], [sliceType$2, $error], false)}, {prop: "free", name: "free", pkg: "fmt", typ: $funcType([ssave], [], false)}, {prop: "SkipSpace", name: "SkipSpace", pkg: "", typ: $funcType([], [], false)}, {prop: "token", name: "token", pkg: "fmt", typ: $funcType([$Bool, funcType], [sliceType$2], false)}, {prop: "consume", name: "consume", pkg: "fmt", typ: $funcType([$String, $Bool], [$Bool], false)}, {prop: "peek", name: "peek", pkg: "fmt", typ: $funcType([$String], [$Bool], false)}, {prop: "notEOF", name: "notEOF", pkg: "fmt", typ: $funcType([], [], false)}, {prop: "accept", name: "accept", pkg: "fmt", typ: $funcType([$String], [$Bool], false)}, {prop: "okVerb", name: "okVerb", pkg: "fmt", typ: $funcType([$Int32, $String, $String], [$Bool], false)}, {prop: "scanBool", name: "scanBool", pkg: "fmt", typ: $funcType([$Int32], [$Bool], false)}, {prop: "getBase", name: "getBase", pkg: "fmt", typ: $funcType([$Int32], [$Int, $String], false)}, {prop: "scanNumber", name: "scanNumber", pkg: "fmt", typ: $funcType([$String, $Bool], [$String], false)}, {prop: "scanRune", name: "scanRune", pkg: "fmt", typ: $funcType([$Int], [$Int64], false)}, {prop: "scanBasePrefix", name: "scanBasePrefix", pkg: "fmt", typ: $funcType([], [$Int, $String, $Bool], false)}, {prop: "scanInt", name: "scanInt", pkg: "fmt", typ: $funcType([$Int32, $Int], [$Int64], false)}, {prop: "scanUint", name: "scanUint", pkg: "fmt", typ: $funcType([$Int32, $Int], [$Uint64], false)}, {prop: "floatToken", name: "floatToken", pkg: "fmt", typ: $funcType([], [$String], false)}, {prop: "complexTokens", name: "complexTokens", pkg: "fmt", typ: $funcType([], [$String, $String], false)}, {prop: "convertFloat", name: "convertFloat", pkg: "fmt", typ: $funcType([$String, $Int], [$Float64], false)}, {prop: "scanComplex", name: "scanComplex", pkg: "fmt", typ: $funcType([$Int32, $Int], [$Complex128], false)}, {prop: "convertString", name: "convertString", pkg: "fmt", typ: $funcType([$Int32], [$String], false)}, {prop: "quotedString", name: "quotedString", pkg: "fmt", typ: $funcType([], [$String], false)}, {prop: "hexByte", name: "hexByte", pkg: "fmt", typ: $funcType([], [$Uint8, $Bool], false)}, {prop: "hexString", name: "hexString", pkg: "fmt", typ: $funcType([], [$String], false)}, {prop: "scanOne", name: "scanOne", pkg: "fmt", typ: $funcType([$Int32, $emptyInterface], [], false)}, {prop: "doScan", name: "doScan", pkg: "fmt", typ: $funcType([sliceType], [$Int, $error], false)}, {prop: "advance", name: "advance", pkg: "fmt", typ: $funcType([$String], [$Int], false)}, {prop: "doScanf", name: "doScanf", pkg: "fmt", typ: $funcType([$String, sliceType], [$Int, $error], false)}];
	fmtFlags.init("fmt", [{prop: "widPresent", name: "widPresent", anonymous: false, exported: false, typ: $Bool, tag: ""}, {prop: "precPresent", name: "precPresent", anonymous: false, exported: false, typ: $Bool, tag: ""}, {prop: "minus", name: "minus", anonymous: false, exported: false, typ: $Bool, tag: ""}, {prop: "plus", name: "plus", anonymous: false, exported: false, typ: $Bool, tag: ""}, {prop: "sharp", name: "sharp", anonymous: false, exported: false, typ: $Bool, tag: ""}, {prop: "space", name: "space", anonymous: false, exported: false, typ: $Bool, tag: ""}, {prop: "zero", name: "zero", anonymous: false, exported: false, typ: $Bool, tag: ""}, {prop: "plusV", name: "plusV", anonymous: false, exported: false, typ: $Bool, tag: ""}, {prop: "sharpV", name: "sharpV", anonymous: false, exported: false, typ: $Bool, tag: ""}]);
	fmt.init("fmt", [{prop: "buf", name: "buf", anonymous: false, exported: false, typ: ptrType$1, tag: ""}, {prop: "fmtFlags", name: "fmtFlags", anonymous: true, exported: false, typ: fmtFlags, tag: ""}, {prop: "wid", name: "wid", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "prec", name: "prec", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "intbuf", name: "intbuf", anonymous: false, exported: false, typ: arrayType, tag: ""}]);
	State.init([{prop: "Flag", name: "Flag", pkg: "", typ: $funcType([$Int], [$Bool], false)}, {prop: "Precision", name: "Precision", pkg: "", typ: $funcType([], [$Int, $Bool], false)}, {prop: "Width", name: "Width", pkg: "", typ: $funcType([], [$Int, $Bool], false)}, {prop: "Write", name: "Write", pkg: "", typ: $funcType([sliceType$2], [$Int, $error], false)}]);
	Formatter.init([{prop: "Format", name: "Format", pkg: "", typ: $funcType([State, $Int32], [], false)}]);
	Stringer.init([{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}]);
	GoStringer.init([{prop: "GoString", name: "GoString", pkg: "", typ: $funcType([], [$String], false)}]);
	buffer.init($Uint8);
	pp.init("fmt", [{prop: "buf", name: "buf", anonymous: false, exported: false, typ: buffer, tag: ""}, {prop: "arg", name: "arg", anonymous: false, exported: false, typ: $emptyInterface, tag: ""}, {prop: "value", name: "value", anonymous: false, exported: false, typ: reflect.Value, tag: ""}, {prop: "fmt", name: "fmt", anonymous: false, exported: false, typ: fmt, tag: ""}, {prop: "reordered", name: "reordered", anonymous: false, exported: false, typ: $Bool, tag: ""}, {prop: "goodArgNum", name: "goodArgNum", anonymous: false, exported: false, typ: $Bool, tag: ""}, {prop: "panicking", name: "panicking", anonymous: false, exported: false, typ: $Bool, tag: ""}, {prop: "erroring", name: "erroring", anonymous: false, exported: false, typ: $Bool, tag: ""}]);
	ScanState.init([{prop: "Read", name: "Read", pkg: "", typ: $funcType([sliceType$2], [$Int, $error], false)}, {prop: "ReadRune", name: "ReadRune", pkg: "", typ: $funcType([], [$Int32, $Int, $error], false)}, {prop: "SkipSpace", name: "SkipSpace", pkg: "", typ: $funcType([], [], false)}, {prop: "Token", name: "Token", pkg: "", typ: $funcType([$Bool, funcType], [sliceType$2, $error], false)}, {prop: "UnreadRune", name: "UnreadRune", pkg: "", typ: $funcType([], [$error], false)}, {prop: "Width", name: "Width", pkg: "", typ: $funcType([], [$Int, $Bool], false)}]);
	scanError.init("fmt", [{prop: "err", name: "err", anonymous: false, exported: false, typ: $error, tag: ""}]);
	ss.init("fmt", [{prop: "rs", name: "rs", anonymous: false, exported: false, typ: io.RuneScanner, tag: ""}, {prop: "buf", name: "buf", anonymous: false, exported: false, typ: buffer, tag: ""}, {prop: "count", name: "count", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "atEOF", name: "atEOF", anonymous: false, exported: false, typ: $Bool, tag: ""}, {prop: "ssave", name: "ssave", anonymous: true, exported: false, typ: ssave, tag: ""}]);
	ssave.init("fmt", [{prop: "validSave", name: "validSave", anonymous: false, exported: false, typ: $Bool, tag: ""}, {prop: "nlIsEnd", name: "nlIsEnd", anonymous: false, exported: false, typ: $Bool, tag: ""}, {prop: "nlIsSpace", name: "nlIsSpace", anonymous: false, exported: false, typ: $Bool, tag: ""}, {prop: "argLimit", name: "argLimit", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "limit", name: "limit", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "maxWid", name: "maxWid", anonymous: false, exported: false, typ: $Int, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = errors.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = io.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = math.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = os.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = reflect.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = strconv.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = sync.$init(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = utf8.$init(); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		ppFree = new sync.Pool.ptr(0, 0, sliceType.nil, (function() {
			return new pp.ptr(buffer.nil, $ifaceNil, new reflect.Value.ptr(ptrType.nil, 0, 0), new fmt.ptr(ptrType$1.nil, new fmtFlags.ptr(false, false, false, false, false, false, false, false, false), 0, 0, arrayType.zero()), false, false, false, false);
		}));
		space = new sliceType$1([$toNativeArray($kindUint16, [9, 13]), $toNativeArray($kindUint16, [32, 32]), $toNativeArray($kindUint16, [133, 133]), $toNativeArray($kindUint16, [160, 160]), $toNativeArray($kindUint16, [5760, 5760]), $toNativeArray($kindUint16, [8192, 8202]), $toNativeArray($kindUint16, [8232, 8233]), $toNativeArray($kindUint16, [8239, 8239]), $toNativeArray($kindUint16, [8287, 8287]), $toNativeArray($kindUint16, [12288, 12288])]);
		ssFree = new sync.Pool.ptr(0, 0, sliceType.nil, (function() {
			return new ss.ptr($ifaceNil, buffer.nil, 0, false, new ssave.ptr(false, false, false, 0, 0, 0));
		}));
		complexError = errors.New("syntax error scanning complex number");
		boolError = errors.New("syntax error scanning boolean");
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["math/bits"] = (function() {
	var $pkg = {}, $init, deBruijn32tab, deBruijn64tab, len8tab, LeadingZeros, LeadingZeros64, TrailingZeros, TrailingZeros32, TrailingZeros64, ReverseBytes64, Len, Len32, Len64;
	LeadingZeros = function(x) {
		var x;
		return 32 - Len(x) >> 0;
	};
	$pkg.LeadingZeros = LeadingZeros;
	LeadingZeros64 = function(x) {
		var x;
		return 64 - Len64(x) >> 0;
	};
	$pkg.LeadingZeros64 = LeadingZeros64;
	TrailingZeros = function(x) {
		var x;
		if (true) {
			return TrailingZeros32(((x >>> 0)));
		}
		return TrailingZeros64((new $Uint64(0, x)));
	};
	$pkg.TrailingZeros = TrailingZeros;
	TrailingZeros32 = function(x) {
		var x, x$1;
		if (x === 0) {
			return 32;
		}
		return (((x$1 = ($imul((((x & (-x >>> 0)) >>> 0)), 125613361) >>> 0) >>> 27 >>> 0, ((x$1 < 0 || x$1 >= deBruijn32tab.length) ? ($throwRuntimeError("index out of range"), undefined) : deBruijn32tab[x$1])) >> 0));
	};
	$pkg.TrailingZeros32 = TrailingZeros32;
	TrailingZeros64 = function(x) {
		var x, x$1, x$2;
		if ((x.$high === 0 && x.$low === 0)) {
			return 64;
		}
		return (((x$1 = $shiftRightUint64($mul64(((x$2 = new $Uint64(-x.$high, -x.$low), new $Uint64(x.$high & x$2.$high, (x.$low & x$2.$low) >>> 0))), new $Uint64(66559345, 3033172745)), 58), (($flatten64(x$1) < 0 || $flatten64(x$1) >= deBruijn64tab.length) ? ($throwRuntimeError("index out of range"), undefined) : deBruijn64tab[$flatten64(x$1)])) >> 0));
	};
	$pkg.TrailingZeros64 = TrailingZeros64;
	ReverseBytes64 = function(x) {
		var x, x$1, x$2, x$3, x$4, x$5, x$6, x$7, x$8;
		x = (x$1 = (x$2 = $shiftRightUint64(x, 8), new $Uint64(x$2.$high & 16711935, (x$2.$low & 16711935) >>> 0)), x$3 = $shiftLeft64(new $Uint64(x.$high & 16711935, (x.$low & 16711935) >>> 0), 8), new $Uint64(x$1.$high | x$3.$high, (x$1.$low | x$3.$low) >>> 0));
		x = (x$4 = (x$5 = $shiftRightUint64(x, 16), new $Uint64(x$5.$high & 65535, (x$5.$low & 65535) >>> 0)), x$6 = $shiftLeft64(new $Uint64(x.$high & 65535, (x.$low & 65535) >>> 0), 16), new $Uint64(x$4.$high | x$6.$high, (x$4.$low | x$6.$low) >>> 0));
		return (x$7 = $shiftRightUint64(x, 32), x$8 = $shiftLeft64(x, 32), new $Uint64(x$7.$high | x$8.$high, (x$7.$low | x$8.$low) >>> 0));
	};
	$pkg.ReverseBytes64 = ReverseBytes64;
	Len = function(x) {
		var x;
		if (true) {
			return Len32(((x >>> 0)));
		}
		return Len64((new $Uint64(0, x)));
	};
	$pkg.Len = Len;
	Len32 = function(x) {
		var n, x, y, y$1;
		n = 0;
		if (x >= 65536) {
			x = (y = (16), y < 32 ? (x >>> y) : 0) >>> 0;
			n = 16;
		}
		if (x >= 256) {
			x = (y$1 = (8), y$1 < 32 ? (x >>> y$1) : 0) >>> 0;
			n = n + (8) >> 0;
		}
		n = n + ((((x < 0 || x >= len8tab.length) ? ($throwRuntimeError("index out of range"), undefined) : len8tab[x]) >> 0)) >> 0;
		return n;
	};
	$pkg.Len32 = Len32;
	Len64 = function(x) {
		var n, x;
		n = 0;
		if ((x.$high > 1 || (x.$high === 1 && x.$low >= 0))) {
			x = $shiftRightUint64(x, (32));
			n = 32;
		}
		if ((x.$high > 0 || (x.$high === 0 && x.$low >= 65536))) {
			x = $shiftRightUint64(x, (16));
			n = n + (16) >> 0;
		}
		if ((x.$high > 0 || (x.$high === 0 && x.$low >= 256))) {
			x = $shiftRightUint64(x, (8));
			n = n + (8) >> 0;
		}
		n = n + (((($flatten64(x) < 0 || $flatten64(x) >= len8tab.length) ? ($throwRuntimeError("index out of range"), undefined) : len8tab[$flatten64(x)]) >> 0)) >> 0;
		return n;
	};
	$pkg.Len64 = Len64;
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		deBruijn32tab = $toNativeArray($kindUint8, [0, 1, 28, 2, 29, 14, 24, 3, 30, 22, 20, 15, 25, 17, 4, 8, 31, 27, 13, 23, 21, 19, 16, 7, 26, 12, 18, 6, 11, 5, 10, 9]);
		deBruijn64tab = $toNativeArray($kindUint8, [0, 1, 56, 2, 57, 49, 28, 3, 61, 58, 42, 50, 38, 29, 17, 4, 62, 47, 59, 36, 45, 43, 51, 22, 53, 39, 33, 30, 24, 18, 12, 5, 63, 55, 48, 27, 60, 41, 37, 16, 46, 35, 44, 21, 52, 32, 23, 11, 54, 26, 40, 15, 34, 20, 31, 10, 25, 14, 19, 9, 13, 8, 7, 6]);
		len8tab = $toNativeArray($kindUint8, [0, 1, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8]);
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["math/rand"] = (function() {
	var $pkg = {}, $init, nosync, math, Source, Source64, Rand, lockedSource, rngSource, arrayType, ptrType, ptrType$1, sliceType, ptrType$2, ptrType$3, funcType, sliceType$1, ptrType$5, ke, we, fe, kn, wn, fn, globalRand, rng_cooked, absInt32, NewSource, New, read, seedrand;
	nosync = $packages["github.com/gopherjs/gopherjs/nosync"];
	math = $packages["math"];
	Source = $pkg.Source = $newType(8, $kindInterface, "rand.Source", true, "math/rand", true, null);
	Source64 = $pkg.Source64 = $newType(8, $kindInterface, "rand.Source64", true, "math/rand", true, null);
	Rand = $pkg.Rand = $newType(0, $kindStruct, "rand.Rand", true, "math/rand", true, function(src_, s64_, readVal_, readPos_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.src = $ifaceNil;
			this.s64 = $ifaceNil;
			this.readVal = new $Int64(0, 0);
			this.readPos = 0;
			return;
		}
		this.src = src_;
		this.s64 = s64_;
		this.readVal = readVal_;
		this.readPos = readPos_;
	});
	lockedSource = $pkg.lockedSource = $newType(0, $kindStruct, "rand.lockedSource", true, "math/rand", false, function(lk_, src_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.lk = new nosync.Mutex.ptr(false);
			this.src = $ifaceNil;
			return;
		}
		this.lk = lk_;
		this.src = src_;
	});
	rngSource = $pkg.rngSource = $newType(0, $kindStruct, "rand.rngSource", true, "math/rand", false, function(tap_, feed_, vec_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.tap = 0;
			this.feed = 0;
			this.vec = arrayType.zero();
			return;
		}
		this.tap = tap_;
		this.feed = feed_;
		this.vec = vec_;
	});
	arrayType = $arrayType($Int64, 607);
	ptrType = $ptrType(lockedSource);
	ptrType$1 = $ptrType($Int8);
	sliceType = $sliceType($Int);
	ptrType$2 = $ptrType($Int64);
	ptrType$3 = $ptrType(Rand);
	funcType = $funcType([$Int, $Int], [], false);
	sliceType$1 = $sliceType($Uint8);
	ptrType$5 = $ptrType(rngSource);
	Rand.ptr.prototype.ExpFloat64 = function() {
		var _r, _r$1, _r$2, _r$3, i, j, r, x, x$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; i = $f.i; j = $f.j; r = $f.r; x = $f.x; x$1 = $f.x$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		r = this;
		/* while (true) { */ case 1:
			_r = r.Uint32(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			j = _r;
			i = (j & 255) >>> 0;
			x = (j) * (((i < 0 || i >= we.length) ? ($throwRuntimeError("index out of range"), undefined) : we[i]));
			if (j < ((i < 0 || i >= ke.length) ? ($throwRuntimeError("index out of range"), undefined) : ke[i])) {
				$s = -1; return x;
			}
			/* */ if (i === 0) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (i === 0) { */ case 4:
				_r$1 = r.Float64(); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				_r$2 = math.Log(_r$1); /* */ $s = 7; case 7: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				$s = -1; return 7.69711747013105 - _r$2;
			/* } */ case 5:
			_r$3 = r.Float64(); /* */ $s = 10; case 10: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			/* */ if ($fround(((i < 0 || i >= fe.length) ? ($throwRuntimeError("index out of range"), undefined) : fe[i]) + $fround(($fround(_r$3)) * ($fround((x$1 = i - 1 >>> 0, ((x$1 < 0 || x$1 >= fe.length) ? ($throwRuntimeError("index out of range"), undefined) : fe[x$1])) - ((i < 0 || i >= fe.length) ? ($throwRuntimeError("index out of range"), undefined) : fe[i]))))) < ($fround(math.Exp(-x)))) { $s = 8; continue; }
			/* */ $s = 9; continue;
			/* if ($fround(((i < 0 || i >= fe.length) ? ($throwRuntimeError("index out of range"), undefined) : fe[i]) + $fround(($fround(_r$3)) * ($fround((x$1 = i - 1 >>> 0, ((x$1 < 0 || x$1 >= fe.length) ? ($throwRuntimeError("index out of range"), undefined) : fe[x$1])) - ((i < 0 || i >= fe.length) ? ($throwRuntimeError("index out of range"), undefined) : fe[i]))))) < ($fround(math.Exp(-x)))) { */ case 8:
				$s = -1; return x;
			/* } */ case 9:
		/* } */ $s = 1; continue; case 2:
		$s = -1; return 0;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Rand.ptr.prototype.ExpFloat64 }; } $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f.i = i; $f.j = j; $f.r = r; $f.x = x; $f.x$1 = x$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	Rand.prototype.ExpFloat64 = function() { return this.$val.ExpFloat64(); };
	absInt32 = function(i) {
		var i;
		if (i < 0) {
			return ((-i >>> 0));
		}
		return ((i >>> 0));
	};
	Rand.ptr.prototype.NormFloat64 = function() {
		var _r, _r$1, _r$2, _r$3, _r$4, _r$5, i, j, r, x, x$1, y, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; i = $f.i; j = $f.j; r = $f.r; x = $f.x; x$1 = $f.x$1; y = $f.y; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		r = this;
		/* while (true) { */ case 1:
			_r = r.Uint32(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			j = ((_r >> 0));
			i = j & 127;
			x = (j) * (((i < 0 || i >= wn.length) ? ($throwRuntimeError("index out of range"), undefined) : wn[i]));
			if (absInt32(j) < ((i < 0 || i >= kn.length) ? ($throwRuntimeError("index out of range"), undefined) : kn[i])) {
				$s = -1; return x;
			}
			/* */ if (i === 0) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (i === 0) { */ case 4:
				/* while (true) { */ case 6:
					_r$1 = r.Float64(); /* */ $s = 8; case 8: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
					_r$2 = math.Log(_r$1); /* */ $s = 9; case 9: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
					x = -_r$2 * 0.29047645161474317;
					_r$3 = r.Float64(); /* */ $s = 10; case 10: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
					_r$4 = math.Log(_r$3); /* */ $s = 11; case 11: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
					y = -_r$4;
					if (y + y >= x * x) {
						/* break; */ $s = 7; continue;
					}
				/* } */ $s = 6; continue; case 7:
				if (j > 0) {
					$s = -1; return 3.442619855899 + x;
				}
				$s = -1; return -3.442619855899 - x;
			/* } */ case 5:
			_r$5 = r.Float64(); /* */ $s = 14; case 14: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			/* */ if ($fround(((i < 0 || i >= fn.length) ? ($throwRuntimeError("index out of range"), undefined) : fn[i]) + $fround(($fround(_r$5)) * ($fround((x$1 = i - 1 >> 0, ((x$1 < 0 || x$1 >= fn.length) ? ($throwRuntimeError("index out of range"), undefined) : fn[x$1])) - ((i < 0 || i >= fn.length) ? ($throwRuntimeError("index out of range"), undefined) : fn[i]))))) < ($fround(math.Exp(-0.5 * x * x)))) { $s = 12; continue; }
			/* */ $s = 13; continue;
			/* if ($fround(((i < 0 || i >= fn.length) ? ($throwRuntimeError("index out of range"), undefined) : fn[i]) + $fround(($fround(_r$5)) * ($fround((x$1 = i - 1 >> 0, ((x$1 < 0 || x$1 >= fn.length) ? ($throwRuntimeError("index out of range"), undefined) : fn[x$1])) - ((i < 0 || i >= fn.length) ? ($throwRuntimeError("index out of range"), undefined) : fn[i]))))) < ($fround(math.Exp(-0.5 * x * x)))) { */ case 12:
				$s = -1; return x;
			/* } */ case 13:
		/* } */ $s = 1; continue; case 2:
		$s = -1; return 0;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Rand.ptr.prototype.NormFloat64 }; } $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f.i = i; $f.j = j; $f.r = r; $f.x = x; $f.x$1 = x$1; $f.y = y; $f.$s = $s; $f.$r = $r; return $f;
	};
	Rand.prototype.NormFloat64 = function() { return this.$val.NormFloat64(); };
	NewSource = function(seed) {
		var rng, seed;
		rng = new rngSource.ptr(0, 0, arrayType.zero());
		rng.Seed(seed);
		return rng;
	};
	$pkg.NewSource = NewSource;
	New = function(src) {
		var _tuple, s64, src;
		_tuple = $assertType(src, Source64, true);
		s64 = _tuple[0];
		return new Rand.ptr(src, s64, new $Int64(0, 0), 0);
	};
	$pkg.New = New;
	Rand.ptr.prototype.Seed = function(seed) {
		var _tuple, lk, ok, r, seed, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _tuple = $f._tuple; lk = $f.lk; ok = $f.ok; r = $f.r; seed = $f.seed; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		r = this;
		_tuple = $assertType(r.src, ptrType, true);
		lk = _tuple[0];
		ok = _tuple[1];
		/* */ if (ok) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (ok) { */ case 1:
			$r = lk.seedPos(seed, (r.$ptr_readPos || (r.$ptr_readPos = new ptrType$1(function() { return this.$target.readPos; }, function($v) { this.$target.readPos = $v; }, r)))); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = -1; return;
		/* } */ case 2:
		$r = r.src.Seed(seed); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		r.readPos = 0;
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Rand.ptr.prototype.Seed }; } $f._tuple = _tuple; $f.lk = lk; $f.ok = ok; $f.r = r; $f.seed = seed; $f.$s = $s; $f.$r = $r; return $f;
	};
	Rand.prototype.Seed = function(seed) { return this.$val.Seed(seed); };
	Rand.ptr.prototype.Int63 = function() {
		var _r, r, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; r = $f.r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		r = this;
		_r = r.src.Int63(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Rand.ptr.prototype.Int63 }; } $f._r = _r; $f.r = r; $f.$s = $s; $f.$r = $r; return $f;
	};
	Rand.prototype.Int63 = function() { return this.$val.Int63(); };
	Rand.ptr.prototype.Uint32 = function() {
		var _r, r, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; r = $f.r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		r = this;
		_r = r.Int63(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return (($shiftRightInt64(_r, 31).$low >>> 0));
		/* */ } return; } if ($f === undefined) { $f = { $blk: Rand.ptr.prototype.Uint32 }; } $f._r = _r; $f.r = r; $f.$s = $s; $f.$r = $r; return $f;
	};
	Rand.prototype.Uint32 = function() { return this.$val.Uint32(); };
	Rand.ptr.prototype.Uint64 = function() {
		var _r, _r$1, _r$2, r, x, x$1, x$2, x$3, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; r = $f.r; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		r = this;
		/* */ if (!($interfaceIsEqual(r.s64, $ifaceNil))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!($interfaceIsEqual(r.s64, $ifaceNil))) { */ case 1:
			_r = r.s64.Uint64(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$s = -1; return _r;
		/* } */ case 2:
		_r$1 = r.Int63(); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$2 = r.Int63(); /* */ $s = 5; case 5: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		$s = -1; return (x = $shiftRightUint64(((x$1 = _r$1, new $Uint64(x$1.$high, x$1.$low))), 31), x$2 = $shiftLeft64(((x$3 = _r$2, new $Uint64(x$3.$high, x$3.$low))), 32), new $Uint64(x.$high | x$2.$high, (x.$low | x$2.$low) >>> 0));
		/* */ } return; } if ($f === undefined) { $f = { $blk: Rand.ptr.prototype.Uint64 }; } $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.r = r; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.$s = $s; $f.$r = $r; return $f;
	};
	Rand.prototype.Uint64 = function() { return this.$val.Uint64(); };
	Rand.ptr.prototype.Int31 = function() {
		var _r, r, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; r = $f.r; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		r = this;
		_r = r.Int63(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return (((x = $shiftRightInt64(_r, 32), x.$low + ((x.$high >> 31) * 4294967296)) >> 0));
		/* */ } return; } if ($f === undefined) { $f = { $blk: Rand.ptr.prototype.Int31 }; } $f._r = _r; $f.r = r; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Rand.prototype.Int31 = function() { return this.$val.Int31(); };
	Rand.ptr.prototype.Int = function() {
		var _r, r, u, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; r = $f.r; u = $f.u; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		r = this;
		_r = r.Int63(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		u = ((_r.$low >>> 0));
		$s = -1; return ((((u << 1 >>> 0) >>> 1 >>> 0) >> 0));
		/* */ } return; } if ($f === undefined) { $f = { $blk: Rand.ptr.prototype.Int }; } $f._r = _r; $f.r = r; $f.u = u; $f.$s = $s; $f.$r = $r; return $f;
	};
	Rand.prototype.Int = function() { return this.$val.Int(); };
	Rand.ptr.prototype.Int63n = function(n) {
		var _r, _r$1, _r$2, max, n, r, v, x, x$1, x$2, x$3, x$4, x$5, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; max = $f.max; n = $f.n; r = $f.r; v = $f.v; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		r = this;
		if ((n.$high < 0 || (n.$high === 0 && n.$low <= 0))) {
			$panic(new $String("invalid argument to Int63n"));
		}
		/* */ if ((x = (x$1 = new $Int64(n.$high - 0, n.$low - 1), new $Int64(n.$high & x$1.$high, (n.$low & x$1.$low) >>> 0)), (x.$high === 0 && x.$low === 0))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if ((x = (x$1 = new $Int64(n.$high - 0, n.$low - 1), new $Int64(n.$high & x$1.$high, (n.$low & x$1.$low) >>> 0)), (x.$high === 0 && x.$low === 0))) { */ case 1:
			_r = r.Int63(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$s = -1; return (x$2 = _r, x$3 = new $Int64(n.$high - 0, n.$low - 1), new $Int64(x$2.$high & x$3.$high, (x$2.$low & x$3.$low) >>> 0));
		/* } */ case 2:
		max = ((x$4 = (x$5 = $div64(new $Uint64(2147483648, 0), (new $Uint64(n.$high, n.$low)), true), new $Uint64(2147483647 - x$5.$high, 4294967295 - x$5.$low)), new $Int64(x$4.$high, x$4.$low)));
		_r$1 = r.Int63(); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		v = _r$1;
		/* while (true) { */ case 5:
			/* if (!((v.$high > max.$high || (v.$high === max.$high && v.$low > max.$low)))) { break; } */ if(!((v.$high > max.$high || (v.$high === max.$high && v.$low > max.$low)))) { $s = 6; continue; }
			_r$2 = r.Int63(); /* */ $s = 7; case 7: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			v = _r$2;
		/* } */ $s = 5; continue; case 6:
		$s = -1; return $div64(v, n, true);
		/* */ } return; } if ($f === undefined) { $f = { $blk: Rand.ptr.prototype.Int63n }; } $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.max = max; $f.n = n; $f.r = r; $f.v = v; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.$s = $s; $f.$r = $r; return $f;
	};
	Rand.prototype.Int63n = function(n) { return this.$val.Int63n(n); };
	Rand.ptr.prototype.Int31n = function(n) {
		var _r, _r$1, _r$2, _r$3, _r$4, max, n, r, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; max = $f.max; n = $f.n; r = $f.r; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		r = this;
		if (n <= 0) {
			$panic(new $String("invalid argument to Int31n"));
		}
		/* */ if ((n & ((n - 1 >> 0))) === 0) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if ((n & ((n - 1 >> 0))) === 0) { */ case 1:
			_r = r.Int31(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$s = -1; return _r & ((n - 1 >> 0));
		/* } */ case 2:
		max = (((2147483647 - (_r$1 = 2147483648 % ((n >>> 0)), _r$1 === _r$1 ? _r$1 : $throwRuntimeError("integer divide by zero")) >>> 0) >> 0));
		_r$2 = r.Int31(); /* */ $s = 4; case 4: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		v = _r$2;
		/* while (true) { */ case 5:
			/* if (!(v > max)) { break; } */ if(!(v > max)) { $s = 6; continue; }
			_r$3 = r.Int31(); /* */ $s = 7; case 7: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			v = _r$3;
		/* } */ $s = 5; continue; case 6:
		$s = -1; return (_r$4 = v % n, _r$4 === _r$4 ? _r$4 : $throwRuntimeError("integer divide by zero"));
		/* */ } return; } if ($f === undefined) { $f = { $blk: Rand.ptr.prototype.Int31n }; } $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f.max = max; $f.n = n; $f.r = r; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Rand.prototype.Int31n = function(n) { return this.$val.Int31n(n); };
	Rand.ptr.prototype.int31n = function(n) {
		var _r, _r$1, _r$2, low, n, prod, r, thresh, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; low = $f.low; n = $f.n; prod = $f.prod; r = $f.r; thresh = $f.thresh; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		r = this;
		_r = r.Uint32(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		v = _r;
		prod = $mul64((new $Uint64(0, v)), (new $Uint64(0, n)));
		low = ((prod.$low >>> 0));
		/* */ if (low < ((n >>> 0))) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (low < ((n >>> 0))) { */ case 2:
			thresh = (_r$1 = ((-n >>> 0)) % ((n >>> 0)), _r$1 === _r$1 ? _r$1 : $throwRuntimeError("integer divide by zero"));
			/* while (true) { */ case 4:
				/* if (!(low < thresh)) { break; } */ if(!(low < thresh)) { $s = 5; continue; }
				_r$2 = r.Uint32(); /* */ $s = 6; case 6: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				v = _r$2;
				prod = $mul64((new $Uint64(0, v)), (new $Uint64(0, n)));
				low = ((prod.$low >>> 0));
			/* } */ $s = 4; continue; case 5:
		/* } */ case 3:
		$s = -1; return (($shiftRightUint64(prod, 32).$low >> 0));
		/* */ } return; } if ($f === undefined) { $f = { $blk: Rand.ptr.prototype.int31n }; } $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.low = low; $f.n = n; $f.prod = prod; $f.r = r; $f.thresh = thresh; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Rand.prototype.int31n = function(n) { return this.$val.int31n(n); };
	Rand.ptr.prototype.Intn = function(n) {
		var _r, _r$1, n, r, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; n = $f.n; r = $f.r; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		r = this;
		if (n <= 0) {
			$panic(new $String("invalid argument to Intn"));
		}
		/* */ if (n <= 2147483647) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (n <= 2147483647) { */ case 1:
			_r = r.Int31n(((n >> 0))); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$s = -1; return ((_r >> 0));
		/* } */ case 2:
		_r$1 = r.Int63n((new $Int64(0, n))); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$s = -1; return (((x = _r$1, x.$low + ((x.$high >> 31) * 4294967296)) >> 0));
		/* */ } return; } if ($f === undefined) { $f = { $blk: Rand.ptr.prototype.Intn }; } $f._r = _r; $f._r$1 = _r$1; $f.n = n; $f.r = r; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Rand.prototype.Intn = function(n) { return this.$val.Intn(n); };
	Rand.ptr.prototype.Float64 = function() {
		var _r, f, r, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; f = $f.f; r = $f.r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		r = this;
		/* again: */ case 1:
		_r = r.Int63(); /* */ $s = 2; case 2: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		f = ($flatten64(_r)) / 9.223372036854776e+18;
		/* */ if (f === 1) { $s = 3; continue; }
		/* */ $s = 4; continue;
		/* if (f === 1) { */ case 3:
			/* goto again */ $s = 1; continue;
		/* } */ case 4:
		$s = -1; return f;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Rand.ptr.prototype.Float64 }; } $f._r = _r; $f.f = f; $f.r = r; $f.$s = $s; $f.$r = $r; return $f;
	};
	Rand.prototype.Float64 = function() { return this.$val.Float64(); };
	Rand.ptr.prototype.Float32 = function() {
		var _r, f, r, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; f = $f.f; r = $f.r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		r = this;
		/* again: */ case 1:
		_r = r.Float64(); /* */ $s = 2; case 2: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		f = ($fround(_r));
		/* */ if (f === 1) { $s = 3; continue; }
		/* */ $s = 4; continue;
		/* if (f === 1) { */ case 3:
			/* goto again */ $s = 1; continue;
		/* } */ case 4:
		$s = -1; return f;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Rand.ptr.prototype.Float32 }; } $f._r = _r; $f.f = f; $f.r = r; $f.$s = $s; $f.$r = $r; return $f;
	};
	Rand.prototype.Float32 = function() { return this.$val.Float32(); };
	Rand.ptr.prototype.Perm = function(n) {
		var _r, i, j, m, n, r, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; i = $f.i; j = $f.j; m = $f.m; n = $f.n; r = $f.r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		r = this;
		m = $makeSlice(sliceType, n);
		i = 0;
		/* while (true) { */ case 1:
			/* if (!(i < n)) { break; } */ if(!(i < n)) { $s = 2; continue; }
			_r = r.Intn(i + 1 >> 0); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			j = _r;
			((i < 0 || i >= m.$length) ? ($throwRuntimeError("index out of range"), undefined) : m.$array[m.$offset + i] = ((j < 0 || j >= m.$length) ? ($throwRuntimeError("index out of range"), undefined) : m.$array[m.$offset + j]));
			((j < 0 || j >= m.$length) ? ($throwRuntimeError("index out of range"), undefined) : m.$array[m.$offset + j] = i);
			i = i + (1) >> 0;
		/* } */ $s = 1; continue; case 2:
		$s = -1; return m;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Rand.ptr.prototype.Perm }; } $f._r = _r; $f.i = i; $f.j = j; $f.m = m; $f.n = n; $f.r = r; $f.$s = $s; $f.$r = $r; return $f;
	};
	Rand.prototype.Perm = function(n) { return this.$val.Perm(n); };
	Rand.ptr.prototype.Shuffle = function(n, swap) {
		var _r, _r$1, i, j, j$1, n, r, swap, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; i = $f.i; j = $f.j; j$1 = $f.j$1; n = $f.n; r = $f.r; swap = $f.swap; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		r = this;
		if (n < 0) {
			$panic(new $String("invalid argument to Shuffle"));
		}
		i = n - 1 >> 0;
		/* while (true) { */ case 1:
			/* if (!(i > 2147483646)) { break; } */ if(!(i > 2147483646)) { $s = 2; continue; }
			_r = r.Int63n((new $Int64(0, (i + 1 >> 0)))); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			j = (((x = _r, x.$low + ((x.$high >> 31) * 4294967296)) >> 0));
			$r = swap(i, j); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			i = i - (1) >> 0;
		/* } */ $s = 1; continue; case 2:
		/* while (true) { */ case 5:
			/* if (!(i > 0)) { break; } */ if(!(i > 0)) { $s = 6; continue; }
			_r$1 = r.int31n((((i + 1 >> 0) >> 0))); /* */ $s = 7; case 7: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			j$1 = ((_r$1 >> 0));
			$r = swap(i, j$1); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			i = i - (1) >> 0;
		/* } */ $s = 5; continue; case 6:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Rand.ptr.prototype.Shuffle }; } $f._r = _r; $f._r$1 = _r$1; $f.i = i; $f.j = j; $f.j$1 = j$1; $f.n = n; $f.r = r; $f.swap = swap; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Rand.prototype.Shuffle = function(n, swap) { return this.$val.Shuffle(n, swap); };
	Rand.ptr.prototype.Read = function(p) {
		var _r, _r$1, _tuple, _tuple$1, _tuple$2, err, lk, n, ok, p, r, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; err = $f.err; lk = $f.lk; n = $f.n; ok = $f.ok; p = $f.p; r = $f.r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = 0;
		err = $ifaceNil;
		r = this;
		_tuple = $assertType(r.src, ptrType, true);
		lk = _tuple[0];
		ok = _tuple[1];
		/* */ if (ok) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (ok) { */ case 1:
			_r = lk.read(p, (r.$ptr_readVal || (r.$ptr_readVal = new ptrType$2(function() { return this.$target.readVal; }, function($v) { this.$target.readVal = $v; }, r))), (r.$ptr_readPos || (r.$ptr_readPos = new ptrType$1(function() { return this.$target.readPos; }, function($v) { this.$target.readPos = $v; }, r)))); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple$1 = _r;
			n = _tuple$1[0];
			err = _tuple$1[1];
			$s = -1; return [n, err];
		/* } */ case 2:
		_r$1 = read(p, $methodVal(r, "Int63"), (r.$ptr_readVal || (r.$ptr_readVal = new ptrType$2(function() { return this.$target.readVal; }, function($v) { this.$target.readVal = $v; }, r))), (r.$ptr_readPos || (r.$ptr_readPos = new ptrType$1(function() { return this.$target.readPos; }, function($v) { this.$target.readPos = $v; }, r)))); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple$2 = _r$1;
		n = _tuple$2[0];
		err = _tuple$2[1];
		$s = -1; return [n, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Rand.ptr.prototype.Read }; } $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f.err = err; $f.lk = lk; $f.n = n; $f.ok = ok; $f.p = p; $f.r = r; $f.$s = $s; $f.$r = $r; return $f;
	};
	Rand.prototype.Read = function(p) { return this.$val.Read(p); };
	read = function(p, int63, readVal, readPos) {
		var _r, err, int63, n, p, pos, readPos, readVal, val, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; err = $f.err; int63 = $f.int63; n = $f.n; p = $f.p; pos = $f.pos; readPos = $f.readPos; readVal = $f.readVal; val = $f.val; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = 0;
		err = $ifaceNil;
		pos = readPos.$get();
		val = readVal.$get();
		n = 0;
		/* while (true) { */ case 1:
			/* if (!(n < p.$length)) { break; } */ if(!(n < p.$length)) { $s = 2; continue; }
			/* */ if (pos === 0) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (pos === 0) { */ case 3:
				_r = int63(); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				val = _r;
				pos = 7;
			/* } */ case 4:
			((n < 0 || n >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + n] = ((val.$low << 24 >>> 24)));
			val = $shiftRightInt64(val, (8));
			pos = pos - (1) << 24 >> 24;
			n = n + (1) >> 0;
		/* } */ $s = 1; continue; case 2:
		readPos.$set(pos);
		readVal.$set(val);
		$s = -1; return [n, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: read }; } $f._r = _r; $f.err = err; $f.int63 = int63; $f.n = n; $f.p = p; $f.pos = pos; $f.readPos = readPos; $f.readVal = readVal; $f.val = val; $f.$s = $s; $f.$r = $r; return $f;
	};
	lockedSource.ptr.prototype.Int63 = function() {
		var _r, n, r, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; n = $f.n; r = $f.r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = new $Int64(0, 0);
		r = this;
		r.lk.Lock();
		_r = r.src.Int63(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		n = _r;
		r.lk.Unlock();
		$s = -1; return n;
		/* */ } return; } if ($f === undefined) { $f = { $blk: lockedSource.ptr.prototype.Int63 }; } $f._r = _r; $f.n = n; $f.r = r; $f.$s = $s; $f.$r = $r; return $f;
	};
	lockedSource.prototype.Int63 = function() { return this.$val.Int63(); };
	lockedSource.ptr.prototype.Uint64 = function() {
		var _r, n, r, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; n = $f.n; r = $f.r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = new $Uint64(0, 0);
		r = this;
		r.lk.Lock();
		_r = r.src.Uint64(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		n = _r;
		r.lk.Unlock();
		$s = -1; return n;
		/* */ } return; } if ($f === undefined) { $f = { $blk: lockedSource.ptr.prototype.Uint64 }; } $f._r = _r; $f.n = n; $f.r = r; $f.$s = $s; $f.$r = $r; return $f;
	};
	lockedSource.prototype.Uint64 = function() { return this.$val.Uint64(); };
	lockedSource.ptr.prototype.Seed = function(seed) {
		var r, seed, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; r = $f.r; seed = $f.seed; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		r = this;
		r.lk.Lock();
		$r = r.src.Seed(seed); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		r.lk.Unlock();
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: lockedSource.ptr.prototype.Seed }; } $f.r = r; $f.seed = seed; $f.$s = $s; $f.$r = $r; return $f;
	};
	lockedSource.prototype.Seed = function(seed) { return this.$val.Seed(seed); };
	lockedSource.ptr.prototype.seedPos = function(seed, readPos) {
		var r, readPos, seed, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; r = $f.r; readPos = $f.readPos; seed = $f.seed; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		r = this;
		r.lk.Lock();
		$r = r.src.Seed(seed); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		readPos.$set(0);
		r.lk.Unlock();
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: lockedSource.ptr.prototype.seedPos }; } $f.r = r; $f.readPos = readPos; $f.seed = seed; $f.$s = $s; $f.$r = $r; return $f;
	};
	lockedSource.prototype.seedPos = function(seed, readPos) { return this.$val.seedPos(seed, readPos); };
	lockedSource.ptr.prototype.read = function(p, readVal, readPos) {
		var _r, _tuple, err, n, p, r, readPos, readVal, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; err = $f.err; n = $f.n; p = $f.p; r = $f.r; readPos = $f.readPos; readVal = $f.readVal; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = 0;
		err = $ifaceNil;
		r = this;
		r.lk.Lock();
		_r = read(p, $methodVal(r.src, "Int63"), readVal, readPos); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		n = _tuple[0];
		err = _tuple[1];
		r.lk.Unlock();
		$s = -1; return [n, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: lockedSource.ptr.prototype.read }; } $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.n = n; $f.p = p; $f.r = r; $f.readPos = readPos; $f.readVal = readVal; $f.$s = $s; $f.$r = $r; return $f;
	};
	lockedSource.prototype.read = function(p, readVal, readPos) { return this.$val.read(p, readVal, readPos); };
	seedrand = function(x) {
		var _q, _r, hi, lo, x;
		hi = (_q = x / 44488, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
		lo = (_r = x % 44488, _r === _r ? _r : $throwRuntimeError("integer divide by zero"));
		x = ($imul(48271, lo)) - ($imul(3399, hi)) >> 0;
		if (x < 0) {
			x = x + (2147483647) >> 0;
		}
		return x;
	};
	rngSource.ptr.prototype.Seed = function(seed) {
		var i, rng, seed, u, x, x$1, x$2, x$3, x$4, x$5;
		rng = this;
		rng.tap = 0;
		rng.feed = 334;
		seed = $div64(seed, new $Int64(0, 2147483647), true);
		if ((seed.$high < 0 || (seed.$high === 0 && seed.$low < 0))) {
			seed = (x = new $Int64(0, 2147483647), new $Int64(seed.$high + x.$high, seed.$low + x.$low));
		}
		if ((seed.$high === 0 && seed.$low === 0)) {
			seed = new $Int64(0, 89482311);
		}
		x$1 = (((seed.$low + ((seed.$high >> 31) * 4294967296)) >> 0));
		i = -20;
		while (true) {
			if (!(i < 607)) { break; }
			x$1 = seedrand(x$1);
			if (i >= 0) {
				u = new $Int64(0, 0);
				u = $shiftLeft64((new $Int64(0, x$1)), 40);
				x$1 = seedrand(x$1);
				u = (x$2 = $shiftLeft64((new $Int64(0, x$1)), 20), new $Int64(u.$high ^ x$2.$high, (u.$low ^ x$2.$low) >>> 0));
				x$1 = seedrand(x$1);
				u = (x$3 = (new $Int64(0, x$1)), new $Int64(u.$high ^ x$3.$high, (u.$low ^ x$3.$low) >>> 0));
				u = (x$4 = ((i < 0 || i >= rng_cooked.length) ? ($throwRuntimeError("index out of range"), undefined) : rng_cooked[i]), new $Int64(u.$high ^ x$4.$high, (u.$low ^ x$4.$low) >>> 0));
				(x$5 = rng.vec, ((i < 0 || i >= x$5.length) ? ($throwRuntimeError("index out of range"), undefined) : x$5[i] = u));
			}
			i = i + (1) >> 0;
		}
	};
	rngSource.prototype.Seed = function(seed) { return this.$val.Seed(seed); };
	rngSource.ptr.prototype.Int63 = function() {
		var rng, x, x$1;
		rng = this;
		return ((x = (x$1 = rng.Uint64(), new $Uint64(x$1.$high & 2147483647, (x$1.$low & 4294967295) >>> 0)), new $Int64(x.$high, x.$low)));
	};
	rngSource.prototype.Int63 = function() { return this.$val.Int63(); };
	rngSource.ptr.prototype.Uint64 = function() {
		var rng, x, x$1, x$2, x$3, x$4, x$5, x$6, x$7, x$8;
		rng = this;
		rng.tap = rng.tap - (1) >> 0;
		if (rng.tap < 0) {
			rng.tap = rng.tap + (607) >> 0;
		}
		rng.feed = rng.feed - (1) >> 0;
		if (rng.feed < 0) {
			rng.feed = rng.feed + (607) >> 0;
		}
		x$6 = (x = (x$1 = rng.vec, x$2 = rng.feed, ((x$2 < 0 || x$2 >= x$1.length) ? ($throwRuntimeError("index out of range"), undefined) : x$1[x$2])), x$3 = (x$4 = rng.vec, x$5 = rng.tap, ((x$5 < 0 || x$5 >= x$4.length) ? ($throwRuntimeError("index out of range"), undefined) : x$4[x$5])), new $Int64(x.$high + x$3.$high, x.$low + x$3.$low));
		(x$7 = rng.vec, x$8 = rng.feed, ((x$8 < 0 || x$8 >= x$7.length) ? ($throwRuntimeError("index out of range"), undefined) : x$7[x$8] = x$6));
		return (new $Uint64(x$6.$high, x$6.$low));
	};
	rngSource.prototype.Uint64 = function() { return this.$val.Uint64(); };
	ptrType$3.methods = [{prop: "ExpFloat64", name: "ExpFloat64", pkg: "", typ: $funcType([], [$Float64], false)}, {prop: "NormFloat64", name: "NormFloat64", pkg: "", typ: $funcType([], [$Float64], false)}, {prop: "Seed", name: "Seed", pkg: "", typ: $funcType([$Int64], [], false)}, {prop: "Int63", name: "Int63", pkg: "", typ: $funcType([], [$Int64], false)}, {prop: "Uint32", name: "Uint32", pkg: "", typ: $funcType([], [$Uint32], false)}, {prop: "Uint64", name: "Uint64", pkg: "", typ: $funcType([], [$Uint64], false)}, {prop: "Int31", name: "Int31", pkg: "", typ: $funcType([], [$Int32], false)}, {prop: "Int", name: "Int", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Int63n", name: "Int63n", pkg: "", typ: $funcType([$Int64], [$Int64], false)}, {prop: "Int31n", name: "Int31n", pkg: "", typ: $funcType([$Int32], [$Int32], false)}, {prop: "int31n", name: "int31n", pkg: "math/rand", typ: $funcType([$Int32], [$Int32], false)}, {prop: "Intn", name: "Intn", pkg: "", typ: $funcType([$Int], [$Int], false)}, {prop: "Float64", name: "Float64", pkg: "", typ: $funcType([], [$Float64], false)}, {prop: "Float32", name: "Float32", pkg: "", typ: $funcType([], [$Float32], false)}, {prop: "Perm", name: "Perm", pkg: "", typ: $funcType([$Int], [sliceType], false)}, {prop: "Shuffle", name: "Shuffle", pkg: "", typ: $funcType([$Int, funcType], [], false)}, {prop: "Read", name: "Read", pkg: "", typ: $funcType([sliceType$1], [$Int, $error], false)}];
	ptrType.methods = [{prop: "Int63", name: "Int63", pkg: "", typ: $funcType([], [$Int64], false)}, {prop: "Uint64", name: "Uint64", pkg: "", typ: $funcType([], [$Uint64], false)}, {prop: "Seed", name: "Seed", pkg: "", typ: $funcType([$Int64], [], false)}, {prop: "seedPos", name: "seedPos", pkg: "math/rand", typ: $funcType([$Int64, ptrType$1], [], false)}, {prop: "read", name: "read", pkg: "math/rand", typ: $funcType([sliceType$1, ptrType$2, ptrType$1], [$Int, $error], false)}];
	ptrType$5.methods = [{prop: "Seed", name: "Seed", pkg: "", typ: $funcType([$Int64], [], false)}, {prop: "Int63", name: "Int63", pkg: "", typ: $funcType([], [$Int64], false)}, {prop: "Uint64", name: "Uint64", pkg: "", typ: $funcType([], [$Uint64], false)}];
	Source.init([{prop: "Int63", name: "Int63", pkg: "", typ: $funcType([], [$Int64], false)}, {prop: "Seed", name: "Seed", pkg: "", typ: $funcType([$Int64], [], false)}]);
	Source64.init([{prop: "Int63", name: "Int63", pkg: "", typ: $funcType([], [$Int64], false)}, {prop: "Seed", name: "Seed", pkg: "", typ: $funcType([$Int64], [], false)}, {prop: "Uint64", name: "Uint64", pkg: "", typ: $funcType([], [$Uint64], false)}]);
	Rand.init("math/rand", [{prop: "src", name: "src", anonymous: false, exported: false, typ: Source, tag: ""}, {prop: "s64", name: "s64", anonymous: false, exported: false, typ: Source64, tag: ""}, {prop: "readVal", name: "readVal", anonymous: false, exported: false, typ: $Int64, tag: ""}, {prop: "readPos", name: "readPos", anonymous: false, exported: false, typ: $Int8, tag: ""}]);
	lockedSource.init("math/rand", [{prop: "lk", name: "lk", anonymous: false, exported: false, typ: nosync.Mutex, tag: ""}, {prop: "src", name: "src", anonymous: false, exported: false, typ: Source64, tag: ""}]);
	rngSource.init("math/rand", [{prop: "tap", name: "tap", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "feed", name: "feed", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "vec", name: "vec", anonymous: false, exported: false, typ: arrayType, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = nosync.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = math.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		ke = $toNativeArray($kindUint32, [3801129273, 0, 2615860924, 3279400049, 3571300752, 3733536696, 3836274812, 3906990442, 3958562475, 3997804264, 4028649213, 4053523342, 4074002619, 4091154507, 4105727352, 4118261130, 4129155133, 4138710916, 4147160435, 4154685009, 4161428406, 4167506077, 4173011791, 4178022498, 4182601930, 4186803325, 4190671498, 4194244443, 4197554582, 4200629752, 4203493986, 4206168142, 4208670408, 4211016720, 4213221098, 4215295924, 4217252177, 4219099625, 4220846988, 4222502074, 4224071896, 4225562770, 4226980400, 4228329951, 4229616109, 4230843138, 4232014925, 4233135020, 4234206673, 4235232866, 4236216336, 4237159604, 4238064994, 4238934652, 4239770563, 4240574564, 4241348362, 4242093539, 4242811568, 4243503822, 4244171579, 4244816032, 4245438297, 4246039419, 4246620374, 4247182079, 4247725394, 4248251127, 4248760037, 4249252839, 4249730206, 4250192773, 4250641138, 4251075867, 4251497493, 4251906522, 4252303431, 4252688672, 4253062674, 4253425844, 4253778565, 4254121205, 4254454110, 4254777611, 4255092022, 4255397640, 4255694750, 4255983622, 4256264513, 4256537670, 4256803325, 4257061702, 4257313014, 4257557464, 4257795244, 4258026541, 4258251531, 4258470383, 4258683258, 4258890309, 4259091685, 4259287526, 4259477966, 4259663135, 4259843154, 4260018142, 4260188212, 4260353470, 4260514019, 4260669958, 4260821380, 4260968374, 4261111028, 4261249421, 4261383632, 4261513736, 4261639802, 4261761900, 4261880092, 4261994441, 4262105003, 4262211835, 4262314988, 4262414513, 4262510454, 4262602857, 4262691764, 4262777212, 4262859239, 4262937878, 4263013162, 4263085118, 4263153776, 4263219158, 4263281289, 4263340187, 4263395872, 4263448358, 4263497660, 4263543789, 4263586755, 4263626565, 4263663224, 4263696735, 4263727099, 4263754314, 4263778377, 4263799282, 4263817020, 4263831582, 4263842955, 4263851124, 4263856071, 4263857776, 4263856218, 4263851370, 4263843206, 4263831695, 4263816804, 4263798497, 4263776735, 4263751476, 4263722676, 4263690284, 4263654251, 4263614520, 4263571032, 4263523724, 4263472530, 4263417377, 4263358192, 4263294892, 4263227394, 4263155608, 4263079437, 4262998781, 4262913534, 4262823581, 4262728804, 4262629075, 4262524261, 4262414220, 4262298801, 4262177846, 4262051187, 4261918645, 4261780032, 4261635148, 4261483780, 4261325704, 4261160681, 4260988457, 4260808763, 4260621313, 4260425802, 4260221905, 4260009277, 4259787550, 4259556329, 4259315195, 4259063697, 4258801357, 4258527656, 4258242044, 4257943926, 4257632664, 4257307571, 4256967906, 4256612870, 4256241598, 4255853155, 4255446525, 4255020608, 4254574202, 4254106002, 4253614578, 4253098370, 4252555662, 4251984571, 4251383021, 4250748722, 4250079132, 4249371435, 4248622490, 4247828790, 4246986404, 4246090910, 4245137315, 4244119963, 4243032411, 4241867296, 4240616155, 4239269214, 4237815118, 4236240596, 4234530035, 4232664930, 4230623176, 4228378137, 4225897409, 4223141146, 4220059768, 4216590757, 4212654085, 4208145538, 4202926710, 4196809522, 4189531420, 4180713890, 4169789475, 4155865042, 4137444620, 4111806704, 4073393724, 4008685917, 3873074895]);
		we = $toNativeArray($kindFloat32, [2.0249555365836613e-09, 1.4866739783681027e-11, 2.4409616689036184e-11, 3.1968806074589295e-11, 3.844677007314168e-11, 4.42282044321729e-11, 4.951644302919611e-11, 5.443358958023836e-11, 5.905943789574764e-11, 6.34494193296753e-11, 6.764381416113352e-11, 7.167294535648239e-11, 7.556032188826833e-11, 7.932458162551725e-11, 8.298078890689453e-11, 8.654132271912474e-11, 9.001651507523079e-11, 9.341507428706208e-11, 9.674443190998971e-11, 1.0001099254308699e-10, 1.0322031424037093e-10, 1.0637725422757427e-10, 1.0948611461891744e-10, 1.1255067711157807e-10, 1.1557434870246297e-10, 1.1856014781042035e-10, 1.2151082917633005e-10, 1.2442885610752796e-10, 1.2731647680563896e-10, 1.3017574518325858e-10, 1.330085347417409e-10, 1.3581656632677408e-10, 1.386014220061682e-10, 1.413645728254309e-10, 1.4410737880776736e-10, 1.4683107507629245e-10, 1.4953686899854546e-10, 1.522258291641876e-10, 1.5489899640730442e-10, 1.575573282952547e-10, 1.6020171300645814e-10, 1.628330109637588e-10, 1.6545202707884954e-10, 1.68059510752272e-10, 1.7065616975120435e-10, 1.73242697965037e-10, 1.758197337720091e-10, 1.783878739169964e-10, 1.8094774290045024e-10, 1.834998542005195e-10, 1.8604476292871652e-10, 1.8858298256319017e-10, 1.9111498494872592e-10, 1.9364125580789704e-10, 1.9616222535212557e-10, 1.9867835154840918e-10, 2.011900368525943e-10, 2.0369768372052732e-10, 2.062016807302669e-10, 2.0870240258208383e-10, 2.1120022397624894e-10, 2.136955057352452e-10, 2.1618855317040442e-10, 2.1867974098199738e-10, 2.2116936060356807e-10, 2.2365774510202385e-10, 2.2614519978869652e-10, 2.2863201609713002e-10, 2.3111849933865614e-10, 2.3360494094681883e-10, 2.3609159072179864e-10, 2.3857874009713953e-10, 2.4106666662859766e-10, 2.4355562011635357e-10, 2.460458781161634e-10, 2.485376904282077e-10, 2.5103127909709144e-10, 2.5352694943414633e-10, 2.560248957284017e-10, 2.585253955356137e-10, 2.610286709003873e-10, 2.6353494386732734e-10, 2.6604446423661443e-10, 2.6855745405285347e-10, 2.71074163116225e-10, 2.7359478571575835e-10, 2.7611959940720965e-10, 2.786487707240326e-10, 2.8118254946640775e-10, 2.8372118543451563e-10, 2.8626484516180994e-10, 2.8881380620404684e-10, 2.9136826285025563e-10, 2.9392840938946563e-10, 2.96494523377433e-10, 2.990667713476114e-10, 3.016454031001814e-10, 3.042306406797479e-10, 3.068226783753403e-10, 3.09421765987139e-10, 3.12028125559749e-10, 3.1464195138219964e-10, 3.17263521010247e-10, 3.1989300097734485e-10, 3.225306410836737e-10, 3.2517669112941405e-10, 3.2783134540359526e-10, 3.3049485370639786e-10, 3.3316743808242677e-10, 3.3584937608743815e-10, 3.385408342548857e-10, 3.4124211789610115e-10, 3.4395342130011386e-10, 3.4667499426710435e-10, 3.494071143528288e-10, 3.521500313574677e-10, 3.54903967325626e-10, 3.576691720574843e-10, 3.6044595086437425e-10, 3.632345535464765e-10, 3.660352021483959e-10, 3.688482297370399e-10, 3.716738583570134e-10, 3.7451239331964814e-10, 3.773641121807003e-10, 3.802292924959261e-10, 3.831082673322328e-10, 3.8600128648980103e-10, 3.8890865527996255e-10, 3.9183070676962473e-10, 3.9476774627011935e-10, 3.977200790927782e-10, 4.006880383045086e-10, 4.0367195697221803e-10, 4.066721681628138e-10, 4.0968900494320337e-10, 4.127228558914453e-10, 4.15774054074447e-10, 4.188429603146915e-10, 4.2192993543466173e-10, 4.25035395767992e-10, 4.2815970213716525e-10, 4.313032986313914e-10, 4.3446651831757777e-10, 4.376498607960855e-10, 4.408536868893975e-10, 4.4407846844229937e-10, 4.4732464954400086e-10, 4.5059267428371186e-10, 4.538830145062178e-10, 4.5719619756745544e-10, 4.605326675566346e-10, 4.638929240741163e-10, 4.672775499869886e-10, 4.706869893844612e-10, 4.74121908400349e-10, 4.775827511238617e-10, 4.810701836888143e-10, 4.845848167178701e-10, 4.881271498113904e-10, 4.916979601254923e-10, 4.952977472605369e-10, 4.989272883726414e-10, 5.025872495956207e-10, 5.062783525744408e-10, 5.100013189540675e-10, 5.13756870379467e-10, 5.175458395179078e-10, 5.21369003525507e-10, 5.252272505806843e-10, 5.29121357839557e-10, 5.330522134805449e-10, 5.3702081670437e-10, 5.41028055689452e-10, 5.450749851476644e-10, 5.491624932574268e-10, 5.532918012640664e-10, 5.574638528571541e-10, 5.616799247931681e-10, 5.659410717839819e-10, 5.702485705860738e-10, 5.746036979559221e-10, 5.790077306500052e-10, 5.83462111958255e-10, 5.879682296594524e-10, 5.925275825546805e-10, 5.971417249561739e-10, 6.01812211176167e-10, 6.065408175714992e-10, 6.113292094767075e-10, 6.16179329782085e-10, 6.21092954844471e-10, 6.260721940876124e-10, 6.311191569352559e-10, 6.362359528111483e-10, 6.414249686947926e-10, 6.466885360545405e-10, 6.520292639144998e-10, 6.574497612987784e-10, 6.629528592760892e-10, 6.685415554485985e-10, 6.742187919073217e-10, 6.799880103436351e-10, 6.858525969377638e-10, 6.918161599145378e-10, 6.978825850545434e-10, 7.040559801829716e-10, 7.103406751696184e-10, 7.167412219288849e-10, 7.232625609532306e-10, 7.2990985477972e-10, 7.366885990123251e-10, 7.436047333442275e-10, 7.506645305355164e-10, 7.57874762946642e-10, 7.652426470272644e-10, 7.727759543385559e-10, 7.804830115532013e-10, 7.883728114777e-10, 7.964550685635174e-10, 8.047402189070851e-10, 8.132396422944055e-10, 8.219657177122031e-10, 8.309318788590758e-10, 8.401527806789488e-10, 8.496445214056791e-10, 8.594246980742071e-10, 8.695127395874636e-10, 8.799300732498239e-10, 8.90700457834015e-10, 9.01850316648023e-10, 9.134091816243028e-10, 9.254100818978372e-10, 9.37890431984556e-10, 9.508922538259412e-10, 9.64463842123564e-10, 9.78660263939446e-10, 9.935448019859905e-10, 1.0091912860943353e-09, 1.0256859805934937e-09, 1.0431305819125214e-09, 1.0616465484503124e-09, 1.0813799855569073e-09, 1.1025096391392708e-09, 1.1252564435793033e-09, 1.149898620766976e-09, 1.176793218427008e-09, 1.2064089727203964e-09, 1.2393785997488749e-09, 1.2765849488616254e-09, 1.319313880365769e-09, 1.36954347862428e-09, 1.4305497897382224e-09, 1.5083649884672923e-09, 1.6160853766322703e-09, 1.7921247819074893e-09]);
		fe = $toNativeArray($kindFloat32, [1, 0.9381436705589294, 0.900469958782196, 0.8717043399810791, 0.847785472869873, 0.8269932866096497, 0.8084216713905334, 0.7915276288986206, 0.7759568691253662, 0.7614634037017822, 0.7478685975074768, 0.7350381016731262, 0.7228676676750183, 0.7112747430801392, 0.7001926302909851, 0.6895664930343628, 0.6793505549430847, 0.669506311416626, 0.6600008606910706, 0.6508058309555054, 0.6418967247009277, 0.633251965045929, 0.62485271692276, 0.6166821718215942, 0.608725368976593, 0.6009689569473267, 0.5934008955955505, 0.5860103368759155, 0.5787873864173889, 0.5717230439186096, 0.5648092031478882, 0.5580382943153381, 0.5514034032821655, 0.5448982119560242, 0.5385168790817261, 0.5322538614273071, 0.526104211807251, 0.5200631618499756, 0.5141264200210571, 0.5082897543907166, 0.5025495290756226, 0.4969019889831543, 0.4913438558578491, 0.4858720004558563, 0.48048335313796997, 0.4751752018928528, 0.4699448347091675, 0.4647897481918335, 0.4597076177597046, 0.4546961486339569, 0.4497532546520233, 0.44487687945365906, 0.4400651156902313, 0.4353161156177521, 0.4306281507015228, 0.42599955201148987, 0.42142874002456665, 0.4169141948223114, 0.4124544560909271, 0.40804818272590637, 0.4036940038204193, 0.39939069747924805, 0.3951369822025299, 0.39093172550201416, 0.38677382469177246, 0.38266217708587646, 0.378595769405365, 0.37457355856895447, 0.37059465050697327, 0.366658091545105, 0.362762987613678, 0.358908474445343, 0.35509374737739563, 0.35131800174713135, 0.3475804924964905, 0.34388044476509094, 0.34021714329719543, 0.33658990263938904, 0.3329980671405792, 0.3294409513473511, 0.32591795921325684, 0.32242849469184875, 0.3189719021320343, 0.3155476748943329, 0.31215524673461914, 0.3087940812110901, 0.30546361207962036, 0.30216339230537415, 0.29889291524887085, 0.29565170407295227, 0.2924392819404602, 0.2892552316188812, 0.28609907627105713, 0.2829704284667969, 0.27986884117126465, 0.2767939269542694, 0.2737452983856201, 0.2707225978374481, 0.26772540807724, 0.26475343108177185, 0.2618062496185303, 0.258883535861969, 0.2559850215911865, 0.25311028957366943, 0.25025907158851624, 0.24743106961250305, 0.2446259707212448, 0.24184346199035645, 0.23908329010009766, 0.23634515702724457, 0.2336287796497345, 0.23093391954898834, 0.22826029360294342, 0.22560766339302063, 0.22297576069831848, 0.22036437690258026, 0.21777324378490448, 0.21520215272903442, 0.212650865316391, 0.21011915802955627, 0.20760682225227356, 0.20511364936828613, 0.20263944566249847, 0.20018397271633148, 0.19774706661701202, 0.1953285187482834, 0.19292815029621124, 0.19054576754570007, 0.18818120658397675, 0.18583425879478455, 0.18350479006767273, 0.18119260668754578, 0.17889754474163055, 0.17661945521831512, 0.17435817420482635, 0.1721135377883911, 0.16988539695739746, 0.16767361760139465, 0.16547803580760956, 0.16329853236675262, 0.16113494336605072, 0.1589871346950531, 0.15685498714447021, 0.15473836660385132, 0.15263713896274567, 0.1505511850118637, 0.1484803706407547, 0.14642459154129028, 0.1443837285041809, 0.14235764741897583, 0.1403462439775467, 0.13834942877292633, 0.136367067694664, 0.13439907133579254, 0.1324453204870224, 0.1305057406425476, 0.12858019769191742, 0.12666863203048706, 0.12477091699838638, 0.12288697808980942, 0.1210167184472084, 0.11916005611419678, 0.11731690168380737, 0.11548716574907303, 0.11367076635360718, 0.11186762899160385, 0.11007767915725708, 0.1083008274435997, 0.10653700679540634, 0.10478614270687103, 0.1030481606721878, 0.10132300108671188, 0.0996105819940567, 0.09791085124015808, 0.09622374176979065, 0.09454918652772903, 0.09288713335990906, 0.09123751521110535, 0.08960027992725372, 0.08797537535429001, 0.08636274188756943, 0.0847623273730278, 0.08317409455776215, 0.08159798383712769, 0.08003395050764084, 0.07848194986581802, 0.07694194465875626, 0.07541389018297195, 0.07389774918556213, 0.07239348441362381, 0.070901058614254, 0.06942043453454971, 0.06795158982276917, 0.06649449467658997, 0.06504911929368973, 0.06361543387174606, 0.06219341605901718, 0.06078304722905159, 0.0593843050301075, 0.05799717456102371, 0.05662164092063904, 0.05525768920779228, 0.05390531197190285, 0.05256449431180954, 0.05123523622751236, 0.04991753399372101, 0.04861138388514519, 0.047316793352365494, 0.04603376239538193, 0.044762298464775085, 0.04350241273641586, 0.04225412383675575, 0.04101744294166565, 0.039792392402887344, 0.03857899457216263, 0.03737728297710419, 0.03618728369474411, 0.03500903770327568, 0.03384258225560188, 0.0326879620552063, 0.031545232981443405, 0.030414443463087082, 0.0292956605553627, 0.028188949450850487, 0.027094384655356407, 0.02601204626262188, 0.024942025542259216, 0.023884421214461327, 0.022839335724711418, 0.021806888282299042, 0.020787203684449196, 0.019780423492193222, 0.018786700442433357, 0.017806200310587883, 0.016839107498526573, 0.015885621309280396, 0.014945968054234982, 0.01402039173990488, 0.013109165243804455, 0.012212592177093029, 0.011331013403832912, 0.010464809834957123, 0.009614413604140282, 0.008780314587056637, 0.007963077165186405, 0.007163353264331818, 0.0063819061033427715, 0.005619642324745655, 0.004877655766904354, 0.004157294984906912, 0.003460264764726162, 0.0027887988835573196, 0.0021459676790982485, 0.001536299823783338, 0.0009672692976891994, 0.0004541343660093844]);
		kn = $toNativeArray($kindUint32, [1991057938, 0, 1611602771, 1826899878, 1918584482, 1969227037, 2001281515, 2023368125, 2039498179, 2051788381, 2061460127, 2069267110, 2075699398, 2081089314, 2085670119, 2089610331, 2093034710, 2096037586, 2098691595, 2101053571, 2103168620, 2105072996, 2106796166, 2108362327, 2109791536, 2111100552, 2112303493, 2113412330, 2114437283, 2115387130, 2116269447, 2117090813, 2117856962, 2118572919, 2119243101, 2119871411, 2120461303, 2121015852, 2121537798, 2122029592, 2122493434, 2122931299, 2123344971, 2123736059, 2124106020, 2124456175, 2124787725, 2125101763, 2125399283, 2125681194, 2125948325, 2126201433, 2126441213, 2126668298, 2126883268, 2127086657, 2127278949, 2127460589, 2127631985, 2127793506, 2127945490, 2128088244, 2128222044, 2128347141, 2128463758, 2128572095, 2128672327, 2128764606, 2128849065, 2128925811, 2128994934, 2129056501, 2129110560, 2129157136, 2129196237, 2129227847, 2129251929, 2129268426, 2129277255, 2129278312, 2129271467, 2129256561, 2129233410, 2129201800, 2129161480, 2129112170, 2129053545, 2128985244, 2128906855, 2128817916, 2128717911, 2128606255, 2128482298, 2128345305, 2128194452, 2128028813, 2127847342, 2127648860, 2127432031, 2127195339, 2126937058, 2126655214, 2126347546, 2126011445, 2125643893, 2125241376, 2124799783, 2124314271, 2123779094, 2123187386, 2122530867, 2121799464, 2120980787, 2120059418, 2119015917, 2117825402, 2116455471, 2114863093, 2112989789, 2110753906, 2108037662, 2104664315, 2100355223, 2094642347, 2086670106, 2074676188, 2054300022, 2010539237]);
		wn = $toNativeArray($kindFloat32, [1.7290404663583558e-09, 1.2680928529462676e-10, 1.689751810696194e-10, 1.9862687883343e-10, 2.223243117382978e-10, 2.4244936613904144e-10, 2.601613091623989e-10, 2.761198769629658e-10, 2.9073962681813725e-10, 3.042996965518796e-10, 3.169979556627567e-10, 3.289802041894774e-10, 3.4035738116777736e-10, 3.5121602848242617e-10, 3.61625090983253e-10, 3.7164057942185025e-10, 3.813085680537398e-10, 3.906675816178762e-10, 3.997501218933053e-10, 4.0858399996679395e-10, 4.1719308563337165e-10, 4.255982233303257e-10, 4.3381759295968436e-10, 4.4186720948857783e-10, 4.497613115272969e-10, 4.57512583373898e-10, 4.6513240481438345e-10, 4.726310454117311e-10, 4.800177477726209e-10, 4.873009773476156e-10, 4.944885056978876e-10, 5.015873272284921e-10, 5.086040477664255e-10, 5.155446070048697e-10, 5.224146670812502e-10, 5.292193350214802e-10, 5.359634958068682e-10, 5.426517013518151e-10, 5.492881705038144e-10, 5.558769555769061e-10, 5.624218868405251e-10, 5.689264614971989e-10, 5.75394121238304e-10, 5.818281967329142e-10, 5.882316855831959e-10, 5.946076964136182e-10, 6.009590047817426e-10, 6.072883862451306e-10, 6.135985053390414e-10, 6.19892026598734e-10, 6.261713370037114e-10, 6.324390455780815e-10, 6.386973727678935e-10, 6.449488165749528e-10, 6.511955974453087e-10, 6.574400468473129e-10, 6.636843297158634e-10, 6.699307220081607e-10, 6.761814441702541e-10, 6.824387166481927e-10, 6.887046488657234e-10, 6.949815167800466e-10, 7.012714853260604e-10, 7.075767749498141e-10, 7.13899661608508e-10, 7.202424212593428e-10, 7.266072743483676e-10, 7.329966078550854e-10, 7.394128087589991e-10, 7.458582640396116e-10, 7.523354716987285e-10, 7.588469852493063e-10, 7.653954137154528e-10, 7.719834771435785e-10, 7.786139510912449e-10, 7.852897221383159e-10, 7.920137878869582e-10, 7.987892014504894e-10, 8.056192379868321e-10, 8.125072836762115e-10, 8.194568912323064e-10, 8.264716688799467e-10, 8.3355555791087e-10, 8.407127216614185e-10, 8.479473234679347e-10, 8.552640262671218e-10, 8.626675485068347e-10, 8.701631637464402e-10, 8.777562010564566e-10, 8.854524335966119e-10, 8.932581896381464e-10, 9.011799639857543e-10, 9.092249730890956e-10, 9.174008219758889e-10, 9.25715837318819e-10, 9.341788453909317e-10, 9.42799727177146e-10, 9.515889187738935e-10, 9.605578554783278e-10, 9.697193048552322e-10, 9.790869226478094e-10, 9.886760299337993e-10, 9.985036131254788e-10, 1.008588212947359e-09, 1.0189509236369076e-09, 1.0296150598776421e-09, 1.040606933955246e-09, 1.0519566329136865e-09, 1.0636980185552147e-09, 1.0758701707302976e-09, 1.0885182755160372e-09, 1.101694735439196e-09, 1.115461056855338e-09, 1.1298901814171813e-09, 1.1450695946990663e-09, 1.1611052119775422e-09, 1.178127595480305e-09, 1.1962995039027646e-09, 1.2158286599728285e-09, 1.2369856250415978e-09, 1.2601323318151003e-09, 1.2857697129220469e-09, 1.3146201904845611e-09, 1.3477839955200466e-09, 1.3870635751089821e-09, 1.43574030442295e-09, 1.5008658760251592e-09, 1.6030947680434338e-09]);
		fn = $toNativeArray($kindFloat32, [1, 0.963599681854248, 0.9362826943397522, 0.9130436182022095, 0.8922816514968872, 0.8732430338859558, 0.8555005788803101, 0.8387836217880249, 0.8229072093963623, 0.8077383041381836, 0.7931770086288452, 0.7791460752487183, 0.7655841708183289, 0.7524415850639343, 0.7396772503852844, 0.7272568941116333, 0.7151514887809753, 0.7033361196517944, 0.6917891502380371, 0.6804918646812439, 0.6694276928901672, 0.6585819721221924, 0.6479418277740479, 0.6374954581260681, 0.6272324919700623, 0.6171433925628662, 0.6072195172309875, 0.5974531769752502, 0.5878370404243469, 0.5783646702766418, 0.5690299868583679, 0.5598273873329163, 0.550751805305481, 0.5417983531951904, 0.5329626798629761, 0.5242405533790588, 0.5156282186508179, 0.5071220397949219, 0.49871864914894104, 0.4904148280620575, 0.48220765590667725, 0.47409430146217346, 0.466072142124176, 0.45813870429992676, 0.45029163360595703, 0.44252872467041016, 0.4348478317260742, 0.42724698781967163, 0.41972434520721436, 0.41227802634239197, 0.40490642189979553, 0.39760786294937134, 0.3903807997703552, 0.3832238018512726, 0.3761354684829712, 0.3691144585609436, 0.36215949058532715, 0.3552693724632263, 0.3484429717063904, 0.3416791558265686, 0.33497685194015503, 0.32833510637283325, 0.3217529058456421, 0.3152293860912323, 0.30876362323760986, 0.3023548424243927, 0.2960021495819092, 0.2897048592567444, 0.28346219658851624, 0.2772735059261322, 0.271138072013855, 0.2650552988052368, 0.25902456045150757, 0.25304529070854187, 0.24711695313453674, 0.24123899638652802, 0.23541094362735748, 0.22963231801986694, 0.22390270233154297, 0.21822164952754974, 0.21258877217769623, 0.20700371265411377, 0.20146611332893372, 0.1959756463766098, 0.19053204357624054, 0.18513499200344086, 0.17978426814079285, 0.1744796335697174, 0.16922089457511902, 0.16400785744190216, 0.1588403731584549, 0.15371830761432648, 0.14864157140254974, 0.14361007511615753, 0.13862377405166626, 0.13368265330791473, 0.12878671288490295, 0.12393598258495331, 0.11913054436445236, 0.11437050998210907, 0.10965602099895477, 0.1049872562289238, 0.10036443918943405, 0.09578784555196762, 0.09125780314207077, 0.08677466958761215, 0.08233889937400818, 0.07795098423957825, 0.07361150532960892, 0.06932111829519272, 0.06508058309555054, 0.06089077144861221, 0.05675266310572624, 0.05266740173101425, 0.048636294901371, 0.044660862535238266, 0.040742866694927216, 0.03688438981771469, 0.03308788686990738, 0.029356317594647408, 0.025693291798233986, 0.02210330404341221, 0.018592102453112602, 0.015167297795414925, 0.011839478276669979, 0.0086244847625494, 0.005548994988203049, 0.0026696291752159595]);
		rng_cooked = $toNativeArray($kindInt64, [new $Int64(-973649357, 3952672746), new $Int64(-1065661887, 3130416987), new $Int64(324977939, 3414273807), new $Int64(1241840476, 2806224363), new $Int64(-1477934308, 1997590414), new $Int64(2103305448, 2402795971), new $Int64(1663160183, 1140819369), new $Int64(1120601685, 1788868961), new $Int64(1848035537, 1089001426), new $Int64(1235702047, 873593504), new $Int64(1911387977, 581324885), new $Int64(-1654874170, 1609182556), new $Int64(1069394745, 1241596776), new $Int64(1895445337, 1771189259), new $Int64(-1374618802, 3467012610), new $Int64(-140526423, 2344407434), new $Int64(-1745367887, 782467244), new $Int64(26335124, 3404933915), new $Int64(1063924276, 618867887), new $Int64(-968700782, 520164395), new $Int64(-1591572833, 1341358184), new $Int64(-1515085039, 665794848), new $Int64(1527227641, 3183648150), new $Int64(1781176124, 696329606), new $Int64(1789146075, 4151988961), new $Int64(-2087444114, 998951326), new $Int64(-612324923, 1364957564), new $Int64(63173359, 4090230633), new $Int64(-1498029007, 4009697548), new $Int64(248009524, 2569622517), new $Int64(778703922, 3742421481), new $Int64(-1109106023, 1506914633), new $Int64(1738099768, 1983412561), new $Int64(236311649, 1436266083), new $Int64(-1111517500, 3922894967), new $Int64(-1336974714, 1792680179), new $Int64(563141142, 1188796351), new $Int64(1349617468, 405968250), new $Int64(1044074554, 433754187), new $Int64(870549669, 4073162024), new $Int64(-1094251604, 433121399), new $Int64(2451824, 4162580594), new $Int64(-137262572, 4132415622), new $Int64(-1536231048, 3033822028), new $Int64(2016407895, 824682382), new $Int64(2366218, 3583765414), new $Int64(-624604839, 535386927), new $Int64(1637219058, 2286693689), new $Int64(1453075389, 2968466525), new $Int64(193683513, 1351410206), new $Int64(-283806096, 1412813499), new $Int64(492736522, 4126267639), new $Int64(512765208, 2105529399), new $Int64(2132966268, 2413882233), new $Int64(947457634, 32226200), new $Int64(1149341356, 2032329073), new $Int64(106485445, 1356518208), new $Int64(-2067810156, 3430061722), new $Int64(-1484435135, 3820169661), new $Int64(-1665985194, 2981816134), new $Int64(1017155588, 4184371017), new $Int64(206574701, 2119206761), new $Int64(-852109057, 2472200560), new $Int64(-560457548, 2853524696), new $Int64(1307803389, 1681119904), new $Int64(-174986835, 95608918), new $Int64(392686347, 3690479145), new $Int64(-1205570926, 1397922290), new $Int64(-1159314025, 1516129515), new $Int64(-320178155, 1547420459), new $Int64(1311333971, 1470949486), new $Int64(-1953469798, 1336785672), new $Int64(-45086614, 4131677129), new $Int64(-1392278100, 4246329084), new $Int64(-1142500187, 3788585631), new $Int64(-66478285, 3080389532), new $Int64(-646438364, 2215402037), new $Int64(391002300, 1171593935), new $Int64(1408774047, 1423855166), new $Int64(-519177718, 2276716302), new $Int64(-368453140, 2068027241), new $Int64(1369359303, 3427553297), new $Int64(189241615, 3289637845), new $Int64(1057480830, 3486407650), new $Int64(-1512910664, 3071877822), new $Int64(1159653919, 3363620705), new $Int64(-934256930, 4159821533), new $Int64(-76621938, 1894661), new $Int64(-674493898, 1156868282), new $Int64(348271067, 776219088), new $Int64(-501428838, 2425634259), new $Int64(1716021749, 680510161), new $Int64(-574263456, 1310101429), new $Int64(1095885995, 2964454134), new $Int64(-325695512, 3467098407), new $Int64(1990672920, 2109628894), new $Int64(-2139648704, 1232604732), new $Int64(-1838070714, 3261916179), new $Int64(1699175360, 434597899), new $Int64(235436061, 1624796439), new $Int64(-1626402839, 3589632480), new $Int64(1198416575, 864579159), new $Int64(-1938748161, 1380889830), new $Int64(619206309, 2654509477), new $Int64(1419738251, 1468209306), new $Int64(-1744284772, 100794388), new $Int64(-1191421458, 2991674471), new $Int64(-208666741, 2224662036), new $Int64(-173659161, 977097250), new $Int64(1351320195, 726419512), new $Int64(-183459897, 1747974366), new $Int64(-753095183, 1556430604), new $Int64(-1049492215, 1080776742), new $Int64(-385846958, 280794874), new $Int64(117767733, 919835643), new $Int64(-967009426, 3434019658), new $Int64(-1951414480, 2461941785), new $Int64(133215641, 3615001066), new $Int64(417204809, 3103414427), new $Int64(790056561, 3380809712), new $Int64(-1267681408, 2724693469), new $Int64(547796833, 598827710), new $Int64(-1846559452, 3452273442), new $Int64(-75778224, 649274915), new $Int64(-801301329, 2585724112), new $Int64(-1510934263, 3165579553), new $Int64(1185578221, 2635894283), new $Int64(-52910178, 2053289721), new $Int64(985976581, 3169337108), new $Int64(1170569632, 144717764), new $Int64(1079216270, 1383666384), new $Int64(-124804942, 681540375), new $Int64(1375448925, 537050586), new $Int64(-1964768344, 315246468), new $Int64(226402871, 849323088), new $Int64(-885062465, 45543944), new $Int64(-946445250, 2319052083), new $Int64(-40708194, 3613090841), new $Int64(560472520, 2992171180), new $Int64(-381863169, 2068244785), new $Int64(917538188, 4239862634), new $Int64(-1369555809, 3892253031), new $Int64(720683925, 958186149), new $Int64(-423297785, 1877702262), new $Int64(1357886971, 837674867), new $Int64(1837048883, 1507589294), new $Int64(1905518400, 873336795), new $Int64(-1879761037, 2764496274), new $Int64(-1806480530, 4196182374), new $Int64(-1066765755, 550964545), new $Int64(818747069, 420611474), new $Int64(-1924830376, 204265180), new $Int64(1549974541, 1787046383), new $Int64(1215581865, 3102292318), new $Int64(418321538, 1552199393), new $Int64(1243493047, 980542004), new $Int64(267284263, 3293718720), new $Int64(1179528763, 3771917473), new $Int64(599484404, 2195808264), new $Int64(252818753, 3894702887), new $Int64(-1367475956, 2099949527), new $Int64(1424094358, 338442522), new $Int64(490737398, 637158004), new $Int64(-1727621530, 281976339), new $Int64(574970164, 3619802330), new $Int64(-431930823, 3084554784), new $Int64(-1264611183, 4129772886), new $Int64(-2104399043, 1680378557), new $Int64(-1621962591, 3339087776), new $Int64(1680500332, 4220317857), new $Int64(-1935828963, 2959322499), new $Int64(1675600481, 1488354890), new $Int64(-834863562, 3958162143), new $Int64(-1226511573, 2773705983), new $Int64(1876039582, 225908689), new $Int64(-1183735113, 908216283), new $Int64(-605696219, 3574646075), new $Int64(-1827723091, 1936937569), new $Int64(1519770881, 75492235), new $Int64(816689472, 1935193178), new $Int64(2142521206, 2018250883), new $Int64(455141620, 3943126022), new $Int64(-601399488, 3066544345), new $Int64(1932392669, 2793082663), new $Int64(-1239009361, 3297036421), new $Int64(1640597065, 2206987825), new $Int64(-553246738, 807894872), new $Int64(-1781325307, 766252117), new $Int64(2060649606, 3833114345), new $Int64(845619743, 1255067973), new $Int64(1201145605, 741697208), new $Int64(-1476242608, 2810093753), new $Int64(1109032642, 4229340371), new $Int64(1462188720, 1361684224), new $Int64(-1159399429, 1906263026), new $Int64(475781207, 3904421704), new $Int64(-623537128, 1769075545), new $Int64(1062308525, 2621599764), new $Int64(1279509432, 3431891480), new $Int64(-1742751146, 1871896503), new $Int64(128756421, 1412808876), new $Int64(1605404688, 952876175), new $Int64(-230443691, 1824438899), new $Int64(1662295856, 1005035476), new $Int64(-156574141, 527508597), new $Int64(1288873303, 3066806859), new $Int64(565995893, 3244940914), new $Int64(-889746188, 209092916), new $Int64(-247669406, 1242699167), new $Int64(-713830396, 456723774), new $Int64(1776978905, 1001252870), new $Int64(1468772157, 2026725874), new $Int64(857254202, 2137562569), new $Int64(765939740, 3183366709), new $Int64(1533887628, 2612072960), new $Int64(56977098, 1727148468), new $Int64(-1197583895, 3803658212), new $Int64(1883670356, 479946959), new $Int64(685713571, 1562982345), new $Int64(-1946242443, 1766109365), new $Int64(700596547, 3257093788), new $Int64(-184714929, 2365720207), new $Int64(93384808, 3742754173), new $Int64(-458385235, 2878193673), new $Int64(1096135042, 2174002182), new $Int64(-834260953, 3573511231), new $Int64(-754572527, 1760299077), new $Int64(-1375627191, 2260779833), new $Int64(-866019274, 1452805722), new $Int64(-1229671918, 2940011802), new $Int64(1890251082, 1886183802), new $Int64(893897673, 2514369088), new $Int64(1644345561, 3924317791), new $Int64(-1974867432, 500935732), new $Int64(1403501753, 676580929), new $Int64(-1565912283, 1184984890), new $Int64(-691968413, 1271474274), new $Int64(-1828754738, 3163791473), new $Int64(2051027584, 2842487377), new $Int64(1511537551, 2170968612), new $Int64(573262976, 3535856740), new $Int64(-2053227187, 1488599718), new $Int64(-1180531831, 3408913763), new $Int64(-2086531912, 2501050084), new $Int64(-875130448, 1639124157), new $Int64(-2009482504, 4088176393), new $Int64(1574896563, 3989947576), new $Int64(-165243708, 3414355209), new $Int64(-792329287, 2275136352), new $Int64(-2057774345, 2151835223), new $Int64(-931144933, 1654534827), new $Int64(-679921451, 377892833), new $Int64(-482716010, 660204544), new $Int64(85706799, 390828249), new $Int64(-1422172693, 3402783878), new $Int64(-1468634160, 3717936603), new $Int64(1113532086, 2211058823), new $Int64(1564224320, 2692150867), new $Int64(1952770442, 1928910388), new $Int64(788716862, 3931011137), new $Int64(1083670504, 1112701047), new $Int64(-68150572, 2452299106), new $Int64(-896164822, 2337204777), new $Int64(1774877857, 273889282), new $Int64(1798719843, 1462008793), new $Int64(2138834788, 1554494002), new $Int64(-1194967131, 182675323), new $Int64(-1598554764, 1882802136), new $Int64(589279648, 3700220025), new $Int64(381039426, 3083431543), new $Int64(-851859191, 3622207527), new $Int64(338126939, 432729309), new $Int64(-1667470126, 2391914317), new $Int64(-1849558151, 235747924), new $Int64(2120733629, 3088823825), new $Int64(-745079795, 2314658321), new $Int64(1165929723, 2957634338), new $Int64(501323675, 4117056981), new $Int64(1564699815, 1482500298), new $Int64(-740826490, 840489337), new $Int64(799522364, 3483178565), new $Int64(532129761, 2074004656), new $Int64(724246478, 3643392642), new $Int64(-665153481, 1583624461), new $Int64(-885822954, 287473085), new $Int64(1667835381, 3136843981), new $Int64(1138806821, 1266970974), new $Int64(135185781, 1998688839), new $Int64(392094735, 1492900209), new $Int64(1031326774, 1538112737), new $Int64(-2070568842, 2207265429), new $Int64(-1886797613, 963263315), new $Int64(1671145500, 2295892134), new $Int64(1068469660, 2002560897), new $Int64(-356250305, 1369254035), new $Int64(33436120, 3353312708), new $Int64(57507843, 947771099), new $Int64(-1945755145, 1747061399), new $Int64(1507240140, 2047354631), new $Int64(720000810, 4165367136), new $Int64(479265078, 3388864963), new $Int64(-952181250, 286492130), new $Int64(2045622690, 2795735007), new $Int64(-715730566, 3703961339), new $Int64(-148436487, 1797825479), new $Int64(1429039600, 1116589674), new $Int64(-1665420098, 2593309206), new $Int64(1329049334, 3404995677), new $Int64(-750579440, 3453462936), new $Int64(1014767077, 3016498634), new $Int64(75698599, 1650371545), new $Int64(1592007860, 212344364), new $Int64(1127766888, 3843932156), new $Int64(-748019856, 3573129983), new $Int64(-890581831, 665897820), new $Int64(1071492673, 1675628772), new $Int64(243225682, 2831752928), new $Int64(2120298836, 1486294219), new $Int64(-1954407413, 268782709), new $Int64(-1002123503, 4186179080), new $Int64(624342951, 1613720397), new $Int64(857179861, 2703686015), new $Int64(-911618704, 2205342611), new $Int64(-672703993, 1411666394), new $Int64(-1528454899, 677744900), new $Int64(-1876628533, 4172867247), new $Int64(135494707, 2163418403), new $Int64(849547544, 2841526879), new $Int64(-1117516959, 1082141470), new $Int64(-1770111792, 4046134367), new $Int64(51415528, 2142943655), new $Int64(-249824333, 3124627521), new $Int64(998228909, 219992939), new $Int64(-1078790951, 1756846531), new $Int64(1283749206, 1225118210), new $Int64(-525858006, 1647770243), new $Int64(-2035959705, 444807907), new $Int64(2036369448, 3952076173), new $Int64(53201823, 1461839639), new $Int64(315761893, 3699250910), new $Int64(702974850, 1373688981), new $Int64(734022261, 147523747), new $Int64(-2047330906, 1211276581), new $Int64(1294440951, 2548832680), new $Int64(1144696256, 1995631888), new $Int64(-1992983070, 2011457303), new $Int64(-1351022674, 3057425772), new $Int64(667839456, 81484597), new $Int64(-1681980888, 3646681560), new $Int64(-1372462725, 635548515), new $Int64(602489502, 2508044581), new $Int64(-1794220117, 1014917157), new $Int64(719992433, 3214891315), new $Int64(-1294799037, 959582252), new $Int64(226415134, 3347040449), new $Int64(-362868096, 4102971975), new $Int64(397887437, 4078022210), new $Int64(-536803826, 2851767182), new $Int64(-1398321012, 1540160644), new $Int64(-1549098876, 1057290595), new $Int64(-112592988, 3907769253), new $Int64(579300318, 4248952684), new $Int64(-1054576049, 132554364), new $Int64(-1085862414, 1029351092), new $Int64(697840928, 2583007416), new $Int64(298619124, 1486185789), new $Int64(55905697, 2871589073), new $Int64(2017643612, 723203291), new $Int64(146250550, 2494333952), new $Int64(-1082993397, 2230939180), new $Int64(-1804568072, 3943232912), new $Int64(1768732449, 2181367922), new $Int64(-729261111, 2889274791), new $Int64(1824032949, 2046728161), new $Int64(1653899792, 1376052477), new $Int64(1022327048, 381236993), new $Int64(-1113097690, 3188942166), new $Int64(-74480109, 350070824), new $Int64(144881592, 61758415), new $Int64(-741824226, 3492950336), new $Int64(-2030042720, 3093818430), new $Int64(-453590535, 2962480613), new $Int64(-1912050708, 3154871160), new $Int64(-1636478569, 3228564679), new $Int64(610731502, 888276216), new $Int64(-946702974, 3574998604), new $Int64(-1277068380, 1967526716), new $Int64(-1556147941, 1554691298), new $Int64(-1573024234, 339944798), new $Int64(1223764147, 1154515356), new $Int64(1825645307, 967516237), new $Int64(1546195135, 596588202), new $Int64(-1867600880, 3764362170), new $Int64(-1655392592, 266611402), new $Int64(-393255880, 2047856075), new $Int64(-1000726433, 21444105), new $Int64(-949424754, 3065563181), new $Int64(-232418803, 1140663212), new $Int64(633187674, 2323741028), new $Int64(2126290159, 3103873707), new $Int64(1008658319, 2766828349), new $Int64(-485587503, 1970872996), new $Int64(1628585413, 3766615585), new $Int64(-595148528, 2036813414), new $Int64(-1994877121, 3105536507), new $Int64(13954645, 3396176938), new $Int64(-721402003, 1377154485), new $Int64(-61839181, 3807014186), new $Int64(543009040, 3710110597), new $Int64(-1751425519, 916420443), new $Int64(734556788, 2103831255), new $Int64(-1766161494, 717331943), new $Int64(-1574598896, 3550505941), new $Int64(45939673, 378749927), new $Int64(-1997615719, 611017331), new $Int64(592130075, 758907650), new $Int64(1012992349, 154266815), new $Int64(-1040454942, 1407468696), new $Int64(-1678191250, 970098704), new $Int64(-285057486, 1971660656), new $Int64(998365243, 3332747885), new $Int64(1947089649, 1935189867), new $Int64(1510248801, 203520055), new $Int64(-1305165746, 3916463034), new $Int64(-388598655, 3474113316), new $Int64(1036101639, 316544223), new $Int64(-1773744891, 1650844677), new $Int64(-907191419, 4267565603), new $Int64(-1070275024, 2501167616), new $Int64(-1520651863, 3929401789), new $Int64(-2091360852, 337170252), new $Int64(-960502090, 2061966842), new $Int64(-304190848, 2508461464), new $Int64(-1941471116, 2791377107), new $Int64(1240791848, 1227227588), new $Int64(1813978778, 1709681848), new $Int64(1153692192, 3768820575), new $Int64(-1002297449, 2887126398), new $Int64(-1447111334, 296561685), new $Int64(700300844, 3729960077), new $Int64(-1572311344, 372833036), new $Int64(2078875613, 2409779288), new $Int64(1829161290, 555274064), new $Int64(-1105595719, 4239804901), new $Int64(1839403216, 3723486978), new $Int64(-1649093095, 2145871984), new $Int64(-1582765715, 3565480803), new $Int64(-1568653827, 2197313814), new $Int64(974785092, 3613674566), new $Int64(438638731, 3042093666), new $Int64(-96556264, 3324034321), new $Int64(869420878, 3708873369), new $Int64(946682149, 1698090092), new $Int64(1618900382, 4213940712), new $Int64(-1843479747, 2087477361), new $Int64(-1766167800, 2407950639), new $Int64(-1296225558, 3942568569), new $Int64(-1223900450, 4088074412), new $Int64(723260036, 2964773675), new $Int64(-673921829, 1539178386), new $Int64(1062961552, 2694849566), new $Int64(460977733, 2120273838), new $Int64(-1604570740, 2484608657), new $Int64(880846449, 2956190677), new $Int64(1970902366, 4223313749), new $Int64(662161910, 3502682327), new $Int64(705634754, 4133891139), new $Int64(-1031359300, 1166449596), new $Int64(1038247601, 3362705993), new $Int64(93734798, 3892921029), new $Int64(1876124043, 786869787), new $Int64(1057490746, 1046342263), new $Int64(242763728, 493777327), new $Int64(-853573201, 3304827646), new $Int64(616460742, 125356352), new $Int64(499300063, 74094113), new $Int64(-795586925, 2500816079), new $Int64(-490248444, 514015239), new $Int64(1377565129, 543520454), new $Int64(-2039776725, 3614531153), new $Int64(2056746300, 2356753985), new $Int64(1390062617, 2018141668), new $Int64(131272971, 2087974891), new $Int64(-1502927041, 3166972343), new $Int64(372256200, 1517638666), new $Int64(-935275664, 173466846), new $Int64(-695774461, 4241513471), new $Int64(-1413550842, 2783126920), new $Int64(1972004134, 4167264826), new $Int64(29260506, 3907395640), new $Int64(-910901561, 1539634186), new $Int64(-595957298, 178241987), new $Int64(-113277636, 182168164), new $Int64(-1102530459, 2386154934), new $Int64(1379126408, 4077374341), new $Int64(-2114679722, 1732699140), new $Int64(-421057745, 1041306002), new $Int64(1860414813, 2068001749), new $Int64(1005320202, 3208962910), new $Int64(844054010, 697710380), new $Int64(-1509359403, 2228431183), new $Int64(-810313977, 3554678728), new $Int64(-750989047, 173470263), new $Int64(-85886265, 3848297795), new $Int64(-926936977, 246236185), new $Int64(-1984190461, 2066374846), new $Int64(1771673660, 312890749), new $Int64(703378057, 3573310289), new $Int64(-598851901, 143166754), new $Int64(613554316, 2081511079), new $Int64(1197802104, 486038032), new $Int64(-1906483789, 2982218564), new $Int64(364901986, 1000939191), new $Int64(1902782651, 2750454885), new $Int64(-671844857, 3375313137), new $Int64(-1643868040, 881302957), new $Int64(-1508784745, 2514186393), new $Int64(-1703622845, 360024739), new $Int64(1399671872, 292500025), new $Int64(1381210821, 2276300752), new $Int64(521803381, 4069087683), new $Int64(-1938982667, 1637778212), new $Int64(720490469, 1676670893), new $Int64(1067262482, 3855174429), new $Int64(2114075974, 2067248671), new $Int64(-89426259, 2884561259), new $Int64(-805741095, 2456511185), new $Int64(983726246, 561175414), new $Int64(-1719489563, 432588903), new $Int64(885133709, 4059399550), new $Int64(-93096266, 1075014784), new $Int64(-1733832628, 2728058415), new $Int64(1839142064, 1299703678), new $Int64(1262333188, 2347583393), new $Int64(1285481956, 2468164145), new $Int64(-1158354011, 1140014346), new $Int64(2033889184, 1936972070), new $Int64(-1737578993, 3870530098), new $Int64(-484494257, 1717789158), new $Int64(-232997156, 1153452491), new $Int64(-990424416, 3948827651), new $Int64(-1357145630, 2101413152), new $Int64(1495744672, 3854091229), new $Int64(83644069, 4215565463), new $Int64(-1385277313, 1202710438), new $Int64(-564909037, 2072216740), new $Int64(705690639, 2066751068), new $Int64(-2113583312, 173902580), new $Int64(-741983806, 142459001), new $Int64(172391592, 1889151926), new $Int64(-498943125, 3034199774), new $Int64(1618587731, 516490102), new $Int64(93114264, 3692577783), new $Int64(-2078821353, 2953948865), new $Int64(-320938673, 4041040923), new $Int64(-1942517976, 592046130), new $Int64(-705643640, 384297211), new $Int64(-2051649464, 265863924), new $Int64(2101717619, 1333136237), new $Int64(1499611781, 1406273556), new $Int64(1074670496, 426305476), new $Int64(125704633, 2750898176), new $Int64(488068495, 1633944332), new $Int64(2037723464, 3236349343), new $Int64(-1703423246, 4013676611), new $Int64(1718532237, 2265047407), new $Int64(1433593806, 875071080), new $Int64(-343047503, 1418843655), new $Int64(2009228711, 451657300), new $Int64(1229446621, 1866374663), new $Int64(1653472867, 1551455622), new $Int64(577191481, 3560962459), new $Int64(1669204077, 3347903778), new $Int64(-298327194, 2675874918), new $Int64(-1831355577, 2762991672), new $Int64(530492383, 3689068477), new $Int64(844089962, 4071997905), new $Int64(1508155730, 1381702441), new $Int64(2089931018, 2373284878), new $Int64(-864267462, 2143983064), new $Int64(308739063, 1938207195), new $Int64(1754949306, 1188152253), new $Int64(1272345009, 615870490), new $Int64(742653194, 2662252621), new $Int64(1477718295, 3839976789), new $Int64(-2091334213, 306752547), new $Int64(-1426688067, 2162363077), new $Int64(-57052633, 2767224719), new $Int64(-1471624099, 2628837712), new $Int64(1678405918, 2967771969), new $Int64(1694285728, 499792248), new $Int64(-1744131281, 4285253508), new $Int64(962357072, 2856511070), new $Int64(679471692, 2526409716), new $Int64(-1793706473, 1240875658), new $Int64(-914893422, 2577342868), new $Int64(-1001298215, 4136853496), new $Int64(-1477114974, 2403540137), new $Int64(1372824515, 1371410668), new $Int64(-176562048, 371758825), new $Int64(-441063112, 1528834084), new $Int64(-71688630, 1504757260), new $Int64(-1461820072, 699052551), new $Int64(-505543539, 3347789870), new $Int64(1951619734, 3430604759), new $Int64(2119672219, 1935601723), new $Int64(966789690, 834676166)]);
		globalRand = New(new lockedSource.ptr(new nosync.Mutex.ptr(false), $assertType(NewSource(new $Int64(0, 1)), Source64)));
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["strings"] = (function() {
	var $pkg = {}, $init, errors, js, io, unicode, utf8, Reader, sliceType, sliceType$3, ptrType$7, IndexByte, Index, Count, NewReader, explode, ContainsRune, IndexRune, genSplit, Split, Join, Repeat, Replace;
	errors = $packages["errors"];
	js = $packages["github.com/gopherjs/gopherjs/js"];
	io = $packages["io"];
	unicode = $packages["unicode"];
	utf8 = $packages["unicode/utf8"];
	Reader = $pkg.Reader = $newType(0, $kindStruct, "strings.Reader", true, "strings", true, function(s_, i_, prevRune_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.s = "";
			this.i = new $Int64(0, 0);
			this.prevRune = 0;
			return;
		}
		this.s = s_;
		this.i = i_;
		this.prevRune = prevRune_;
	});
	sliceType = $sliceType($Uint8);
	sliceType$3 = $sliceType($String);
	ptrType$7 = $ptrType(Reader);
	IndexByte = function(s, c) {
		var c, s;
		return $parseInt(s.indexOf($global.String.fromCharCode(c))) >> 0;
	};
	$pkg.IndexByte = IndexByte;
	Index = function(s, sep) {
		var s, sep;
		return $parseInt(s.indexOf(sep)) >> 0;
	};
	$pkg.Index = Index;
	Count = function(s, sep) {
		var n, pos, s, sep;
		n = 0;
		if ((sep.length === 0)) {
			return utf8.RuneCountInString(s) + 1 >> 0;
		} else if (sep.length > s.length) {
			return 0;
		} else if ((sep.length === s.length)) {
			if (sep === s) {
				return 1;
			}
			return 0;
		}
		while (true) {
			pos = Index(s, sep);
			if (pos === -1) {
				break;
			}
			n = n + (1) >> 0;
			s = $substring(s, (pos + sep.length >> 0));
		}
		return n;
	};
	$pkg.Count = Count;
	Reader.ptr.prototype.Len = function() {
		var r, x, x$1, x$2, x$3, x$4;
		r = this;
		if ((x = r.i, x$1 = (new $Int64(0, r.s.length)), (x.$high > x$1.$high || (x.$high === x$1.$high && x.$low >= x$1.$low)))) {
			return 0;
		}
		return (((x$2 = (x$3 = (new $Int64(0, r.s.length)), x$4 = r.i, new $Int64(x$3.$high - x$4.$high, x$3.$low - x$4.$low)), x$2.$low + ((x$2.$high >> 31) * 4294967296)) >> 0));
	};
	Reader.prototype.Len = function() { return this.$val.Len(); };
	Reader.ptr.prototype.Size = function() {
		var r;
		r = this;
		return (new $Int64(0, r.s.length));
	};
	Reader.prototype.Size = function() { return this.$val.Size(); };
	Reader.ptr.prototype.Read = function(b) {
		var _tmp, _tmp$1, b, err, n, r, x, x$1, x$2, x$3;
		n = 0;
		err = $ifaceNil;
		r = this;
		if ((x = r.i, x$1 = (new $Int64(0, r.s.length)), (x.$high > x$1.$high || (x.$high === x$1.$high && x.$low >= x$1.$low)))) {
			_tmp = 0;
			_tmp$1 = io.EOF;
			n = _tmp;
			err = _tmp$1;
			return [n, err];
		}
		r.prevRune = -1;
		n = $copyString(b, $substring(r.s, $flatten64(r.i)));
		r.i = (x$2 = r.i, x$3 = (new $Int64(0, n)), new $Int64(x$2.$high + x$3.$high, x$2.$low + x$3.$low));
		return [n, err];
	};
	Reader.prototype.Read = function(b) { return this.$val.Read(b); };
	Reader.ptr.prototype.ReadAt = function(b, off) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, b, err, n, off, r, x;
		n = 0;
		err = $ifaceNil;
		r = this;
		if ((off.$high < 0 || (off.$high === 0 && off.$low < 0))) {
			_tmp = 0;
			_tmp$1 = errors.New("strings.Reader.ReadAt: negative offset");
			n = _tmp;
			err = _tmp$1;
			return [n, err];
		}
		if ((x = (new $Int64(0, r.s.length)), (off.$high > x.$high || (off.$high === x.$high && off.$low >= x.$low)))) {
			_tmp$2 = 0;
			_tmp$3 = io.EOF;
			n = _tmp$2;
			err = _tmp$3;
			return [n, err];
		}
		n = $copyString(b, $substring(r.s, $flatten64(off)));
		if (n < b.$length) {
			err = io.EOF;
		}
		return [n, err];
	};
	Reader.prototype.ReadAt = function(b, off) { return this.$val.ReadAt(b, off); };
	Reader.ptr.prototype.ReadByte = function() {
		var b, r, x, x$1, x$2, x$3;
		r = this;
		r.prevRune = -1;
		if ((x = r.i, x$1 = (new $Int64(0, r.s.length)), (x.$high > x$1.$high || (x.$high === x$1.$high && x.$low >= x$1.$low)))) {
			return [0, io.EOF];
		}
		b = r.s.charCodeAt($flatten64(r.i));
		r.i = (x$2 = r.i, x$3 = new $Int64(0, 1), new $Int64(x$2.$high + x$3.$high, x$2.$low + x$3.$low));
		return [b, $ifaceNil];
	};
	Reader.prototype.ReadByte = function() { return this.$val.ReadByte(); };
	Reader.ptr.prototype.UnreadByte = function() {
		var r, x, x$1, x$2;
		r = this;
		r.prevRune = -1;
		if ((x = r.i, (x.$high < 0 || (x.$high === 0 && x.$low <= 0)))) {
			return errors.New("strings.Reader.UnreadByte: at beginning of string");
		}
		r.i = (x$1 = r.i, x$2 = new $Int64(0, 1), new $Int64(x$1.$high - x$2.$high, x$1.$low - x$2.$low));
		return $ifaceNil;
	};
	Reader.prototype.UnreadByte = function() { return this.$val.UnreadByte(); };
	Reader.ptr.prototype.ReadRune = function() {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tuple, c, ch, err, r, size, x, x$1, x$2, x$3, x$4, x$5, x$6;
		ch = 0;
		size = 0;
		err = $ifaceNil;
		r = this;
		if ((x = r.i, x$1 = (new $Int64(0, r.s.length)), (x.$high > x$1.$high || (x.$high === x$1.$high && x.$low >= x$1.$low)))) {
			r.prevRune = -1;
			_tmp = 0;
			_tmp$1 = 0;
			_tmp$2 = io.EOF;
			ch = _tmp;
			size = _tmp$1;
			err = _tmp$2;
			return [ch, size, err];
		}
		r.prevRune = (((x$2 = r.i, x$2.$low + ((x$2.$high >> 31) * 4294967296)) >> 0));
		c = r.s.charCodeAt($flatten64(r.i));
		if (c < 128) {
			r.i = (x$3 = r.i, x$4 = new $Int64(0, 1), new $Int64(x$3.$high + x$4.$high, x$3.$low + x$4.$low));
			_tmp$3 = ((c >> 0));
			_tmp$4 = 1;
			_tmp$5 = $ifaceNil;
			ch = _tmp$3;
			size = _tmp$4;
			err = _tmp$5;
			return [ch, size, err];
		}
		_tuple = utf8.DecodeRuneInString($substring(r.s, $flatten64(r.i)));
		ch = _tuple[0];
		size = _tuple[1];
		r.i = (x$5 = r.i, x$6 = (new $Int64(0, size)), new $Int64(x$5.$high + x$6.$high, x$5.$low + x$6.$low));
		return [ch, size, err];
	};
	Reader.prototype.ReadRune = function() { return this.$val.ReadRune(); };
	Reader.ptr.prototype.UnreadRune = function() {
		var r;
		r = this;
		if (r.prevRune < 0) {
			return errors.New("strings.Reader.UnreadRune: previous operation was not ReadRune");
		}
		r.i = (new $Int64(0, r.prevRune));
		r.prevRune = -1;
		return $ifaceNil;
	};
	Reader.prototype.UnreadRune = function() { return this.$val.UnreadRune(); };
	Reader.ptr.prototype.Seek = function(offset, whence) {
		var _1, abs, offset, r, whence, x, x$1;
		r = this;
		r.prevRune = -1;
		abs = new $Int64(0, 0);
		_1 = whence;
		if (_1 === (0)) {
			abs = offset;
		} else if (_1 === (1)) {
			abs = (x = r.i, new $Int64(x.$high + offset.$high, x.$low + offset.$low));
		} else if (_1 === (2)) {
			abs = (x$1 = (new $Int64(0, r.s.length)), new $Int64(x$1.$high + offset.$high, x$1.$low + offset.$low));
		} else {
			return [new $Int64(0, 0), errors.New("strings.Reader.Seek: invalid whence")];
		}
		if ((abs.$high < 0 || (abs.$high === 0 && abs.$low < 0))) {
			return [new $Int64(0, 0), errors.New("strings.Reader.Seek: negative position")];
		}
		r.i = abs;
		return [abs, $ifaceNil];
	};
	Reader.prototype.Seek = function(offset, whence) { return this.$val.Seek(offset, whence); };
	Reader.ptr.prototype.WriteTo = function(w) {
		var _r, _tmp, _tmp$1, _tuple, err, m, n, r, s, w, x, x$1, x$2, x$3, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tuple = $f._tuple; err = $f.err; m = $f.m; n = $f.n; r = $f.r; s = $f.s; w = $f.w; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = new $Int64(0, 0);
		err = $ifaceNil;
		r = this;
		r.prevRune = -1;
		if ((x = r.i, x$1 = (new $Int64(0, r.s.length)), (x.$high > x$1.$high || (x.$high === x$1.$high && x.$low >= x$1.$low)))) {
			_tmp = new $Int64(0, 0);
			_tmp$1 = $ifaceNil;
			n = _tmp;
			err = _tmp$1;
			$s = -1; return [n, err];
		}
		s = $substring(r.s, $flatten64(r.i));
		_r = io.WriteString(w, s); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		m = _tuple[0];
		err = _tuple[1];
		if (m > s.length) {
			$panic(new $String("strings.Reader.WriteTo: invalid WriteString count"));
		}
		r.i = (x$2 = r.i, x$3 = (new $Int64(0, m)), new $Int64(x$2.$high + x$3.$high, x$2.$low + x$3.$low));
		n = (new $Int64(0, m));
		if (!((m === s.length)) && $interfaceIsEqual(err, $ifaceNil)) {
			err = io.ErrShortWrite;
		}
		$s = -1; return [n, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Reader.ptr.prototype.WriteTo }; } $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tuple = _tuple; $f.err = err; $f.m = m; $f.n = n; $f.r = r; $f.s = s; $f.w = w; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.$s = $s; $f.$r = $r; return $f;
	};
	Reader.prototype.WriteTo = function(w) { return this.$val.WriteTo(w); };
	Reader.ptr.prototype.Reset = function(s) {
		var r, s;
		r = this;
		Reader.copy(r, new Reader.ptr(s, new $Int64(0, 0), -1));
	};
	Reader.prototype.Reset = function(s) { return this.$val.Reset(s); };
	NewReader = function(s) {
		var s;
		return new Reader.ptr(s, new $Int64(0, 0), -1);
	};
	$pkg.NewReader = NewReader;
	explode = function(s, n) {
		var _tuple, a, ch, i, l, n, s, size, x;
		l = utf8.RuneCountInString(s);
		if (n < 0 || n > l) {
			n = l;
		}
		a = $makeSlice(sliceType$3, n);
		i = 0;
		while (true) {
			if (!(i < (n - 1 >> 0))) { break; }
			_tuple = utf8.DecodeRuneInString(s);
			ch = _tuple[0];
			size = _tuple[1];
			((i < 0 || i >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + i] = $substring(s, 0, size));
			s = $substring(s, size);
			if (ch === 65533) {
				((i < 0 || i >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + i] = "\xEF\xBF\xBD");
			}
			i = i + (1) >> 0;
		}
		if (n > 0) {
			(x = n - 1 >> 0, ((x < 0 || x >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + x] = s));
		}
		return a;
	};
	ContainsRune = function(s, r) {
		var r, s;
		return IndexRune(s, r) >= 0;
	};
	$pkg.ContainsRune = ContainsRune;
	IndexRune = function(s, r) {
		var _i, _ref, _rune, i, r, r$1, s;
		if (0 <= r && r < 128) {
			return IndexByte(s, ((r << 24 >>> 24)));
		} else if ((r === 65533)) {
			_ref = s;
			_i = 0;
			while (true) {
				if (!(_i < _ref.length)) { break; }
				_rune = $decodeRune(_ref, _i);
				i = _i;
				r$1 = _rune[0];
				if (r$1 === 65533) {
					return i;
				}
				_i += _rune[1];
			}
			return -1;
		} else if (!utf8.ValidRune(r)) {
			return -1;
		} else {
			return Index(s, ($encodeRune(r)));
		}
	};
	$pkg.IndexRune = IndexRune;
	genSplit = function(s, sep, sepSave, n) {
		var a, i, m, n, s, sep, sepSave;
		if (n === 0) {
			return sliceType$3.nil;
		}
		if (sep === "") {
			return explode(s, n);
		}
		if (n < 0) {
			n = Count(s, sep) + 1 >> 0;
		}
		a = $makeSlice(sliceType$3, n);
		n = n - (1) >> 0;
		i = 0;
		while (true) {
			if (!(i < n)) { break; }
			m = Index(s, sep);
			if (m < 0) {
				break;
			}
			((i < 0 || i >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + i] = $substring(s, 0, (m + sepSave >> 0)));
			s = $substring(s, (m + sep.length >> 0));
			i = i + (1) >> 0;
		}
		((i < 0 || i >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + i] = s);
		return $subslice(a, 0, (i + 1 >> 0));
	};
	Split = function(s, sep) {
		var s, sep;
		return genSplit(s, sep, 0, -1);
	};
	$pkg.Split = Split;
	Join = function(a, sep) {
		var _1, _i, _ref, a, b, bp, i, n, s, sep;
		_1 = a.$length;
		if (_1 === (0)) {
			return "";
		} else if (_1 === (1)) {
			return (0 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 0]);
		} else if (_1 === (2)) {
			return (0 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 0]) + sep + (1 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 1]);
		} else if (_1 === (3)) {
			return (0 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 0]) + sep + (1 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 1]) + sep + (2 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 2]);
		}
		n = $imul(sep.length, ((a.$length - 1 >> 0)));
		i = 0;
		while (true) {
			if (!(i < a.$length)) { break; }
			n = n + (((i < 0 || i >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + i]).length) >> 0;
			i = i + (1) >> 0;
		}
		b = $makeSlice(sliceType, n);
		bp = $copyString(b, (0 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 0]));
		_ref = $subslice(a, 1);
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			s = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			bp = bp + ($copyString($subslice(b, bp), sep)) >> 0;
			bp = bp + ($copyString($subslice(b, bp), s)) >> 0;
			_i++;
		}
		return ($bytesToString(b));
	};
	$pkg.Join = Join;
	Repeat = function(s, count) {
		var _q, b, bp, count, s;
		if (count < 0) {
			$panic(new $String("strings: negative Repeat count"));
		} else if (count > 0 && !(((_q = ($imul(s.length, count)) / count, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) === s.length))) {
			$panic(new $String("strings: Repeat count causes overflow"));
		}
		b = $makeSlice(sliceType, ($imul(s.length, count)));
		bp = $copyString(b, s);
		while (true) {
			if (!(bp < b.$length)) { break; }
			$copySlice($subslice(b, bp), $subslice(b, 0, bp));
			bp = $imul(bp, (2));
		}
		return ($bytesToString(b));
	};
	$pkg.Repeat = Repeat;
	Replace = function(s, old, new$1, n) {
		var _tuple, i, j, m, n, new$1, old, s, start, t, w, wid;
		if (old === new$1 || (n === 0)) {
			return s;
		}
		m = Count(s, old);
		if (m === 0) {
			return s;
		} else if (n < 0 || m < n) {
			n = m;
		}
		t = $makeSlice(sliceType, (s.length + ($imul(n, ((new$1.length - old.length >> 0)))) >> 0));
		w = 0;
		start = 0;
		i = 0;
		while (true) {
			if (!(i < n)) { break; }
			j = start;
			if (old.length === 0) {
				if (i > 0) {
					_tuple = utf8.DecodeRuneInString($substring(s, start));
					wid = _tuple[1];
					j = j + (wid) >> 0;
				}
			} else {
				j = j + (Index($substring(s, start), old)) >> 0;
			}
			w = w + ($copyString($subslice(t, w), $substring(s, start, j))) >> 0;
			w = w + ($copyString($subslice(t, w), new$1)) >> 0;
			start = j + old.length >> 0;
			i = i + (1) >> 0;
		}
		w = w + ($copyString($subslice(t, w), $substring(s, start))) >> 0;
		return ($bytesToString($subslice(t, 0, w)));
	};
	$pkg.Replace = Replace;
	ptrType$7.methods = [{prop: "Len", name: "Len", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Size", name: "Size", pkg: "", typ: $funcType([], [$Int64], false)}, {prop: "Read", name: "Read", pkg: "", typ: $funcType([sliceType], [$Int, $error], false)}, {prop: "ReadAt", name: "ReadAt", pkg: "", typ: $funcType([sliceType, $Int64], [$Int, $error], false)}, {prop: "ReadByte", name: "ReadByte", pkg: "", typ: $funcType([], [$Uint8, $error], false)}, {prop: "UnreadByte", name: "UnreadByte", pkg: "", typ: $funcType([], [$error], false)}, {prop: "ReadRune", name: "ReadRune", pkg: "", typ: $funcType([], [$Int32, $Int, $error], false)}, {prop: "UnreadRune", name: "UnreadRune", pkg: "", typ: $funcType([], [$error], false)}, {prop: "Seek", name: "Seek", pkg: "", typ: $funcType([$Int64, $Int], [$Int64, $error], false)}, {prop: "WriteTo", name: "WriteTo", pkg: "", typ: $funcType([io.Writer], [$Int64, $error], false)}, {prop: "Reset", name: "Reset", pkg: "", typ: $funcType([$String], [], false)}];
	Reader.init("strings", [{prop: "s", name: "s", anonymous: false, exported: false, typ: $String, tag: ""}, {prop: "i", name: "i", anonymous: false, exported: false, typ: $Int64, tag: ""}, {prop: "prevRune", name: "prevRune", anonymous: false, exported: false, typ: $Int, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = errors.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = js.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = io.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = unicode.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = utf8.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["math/big"] = (function() {
	var $pkg = {}, $init, bytes, binary, errors, fmt, nosync, io, math, bits, rand, strconv, strings, Word, decimal, Float, ErrNaN, form, RoundingMode, Accuracy, Int, byteReader, nat, divisor, Rat, sliceType, arrayType, structType, sliceType$1, ptrType, sliceType$2, ptrType$1, ptrType$2, ptrType$3, ptrType$4, arrayType$1, sliceType$3, ptrType$5, ptrType$6, _Accuracy_index, pow5tab, intOne, natOne, natTwo, natTen, karatsubaThreshold, basicSqrThreshold, karatsubaSqrThreshold, natPool, leafSize, cacheBase10, _RoundingMode_index, half, two, three, _r, _r$1, _r$2, addWW_g, subWW_g, mulWW_g, mulAddWWW_g, nlz, divWW_g, addVV_g, subVV_g, addVW_g, subVW_g, shlVU_g, shrVU_g, mulAddVWW_g, addMulVVW_g, divWVW_g, mulWW, divWW, addVV, subVV, addVW, subVW, shlVU, shrVU, mulAddVWW, addMulVVW, divWVW, shr, appendZeros, shouldRoundUp, trim, NewFloat, makeAcc, fnorm, msb32, msb64, validateBinaryOperands, umax32, roundShortest, fmtE, fmtF, min, NewInt, low32, low64, Jacobi, writeMultiple, scanSign, basicMul, karatsubaAdd, karatsubaSub, karatsuba, alias, addAt, max, karatsubaLen, basicSqr, getNat, putNat, greaterThan, maxPow, pow, divisors, quotToFloat32, quotToFloat64, mulDenom, scaleDenom, ratTok, scanExponent;
	bytes = $packages["bytes"];
	binary = $packages["encoding/binary"];
	errors = $packages["errors"];
	fmt = $packages["fmt"];
	nosync = $packages["github.com/gopherjs/gopherjs/nosync"];
	io = $packages["io"];
	math = $packages["math"];
	bits = $packages["math/bits"];
	rand = $packages["math/rand"];
	strconv = $packages["strconv"];
	strings = $packages["strings"];
	Word = $pkg.Word = $newType(4, $kindUintptr, "big.Word", true, "math/big", true, null);
	decimal = $pkg.decimal = $newType(0, $kindStruct, "big.decimal", true, "math/big", false, function(mant_, exp_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.mant = sliceType$1.nil;
			this.exp = 0;
			return;
		}
		this.mant = mant_;
		this.exp = exp_;
	});
	Float = $pkg.Float = $newType(0, $kindStruct, "big.Float", true, "math/big", true, function(prec_, mode_, acc_, form_, neg_, mant_, exp_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.prec = 0;
			this.mode = 0;
			this.acc = 0;
			this.form = 0;
			this.neg = false;
			this.mant = nat.nil;
			this.exp = 0;
			return;
		}
		this.prec = prec_;
		this.mode = mode_;
		this.acc = acc_;
		this.form = form_;
		this.neg = neg_;
		this.mant = mant_;
		this.exp = exp_;
	});
	ErrNaN = $pkg.ErrNaN = $newType(0, $kindStruct, "big.ErrNaN", true, "math/big", true, function(msg_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.msg = "";
			return;
		}
		this.msg = msg_;
	});
	form = $pkg.form = $newType(1, $kindUint8, "big.form", true, "math/big", false, null);
	RoundingMode = $pkg.RoundingMode = $newType(1, $kindUint8, "big.RoundingMode", true, "math/big", true, null);
	Accuracy = $pkg.Accuracy = $newType(1, $kindInt8, "big.Accuracy", true, "math/big", true, null);
	Int = $pkg.Int = $newType(0, $kindStruct, "big.Int", true, "math/big", true, function(neg_, abs_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.neg = false;
			this.abs = nat.nil;
			return;
		}
		this.neg = neg_;
		this.abs = abs_;
	});
	byteReader = $pkg.byteReader = $newType(0, $kindStruct, "big.byteReader", true, "math/big", false, function(ScanState_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.ScanState = $ifaceNil;
			return;
		}
		this.ScanState = ScanState_;
	});
	nat = $pkg.nat = $newType(12, $kindSlice, "big.nat", true, "math/big", false, null);
	divisor = $pkg.divisor = $newType(0, $kindStruct, "big.divisor", true, "math/big", false, function(bbb_, nbits_, ndigits_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.bbb = nat.nil;
			this.nbits = 0;
			this.ndigits = 0;
			return;
		}
		this.bbb = bbb_;
		this.nbits = nbits_;
		this.ndigits = ndigits_;
	});
	Rat = $pkg.Rat = $newType(0, $kindStruct, "big.Rat", true, "math/big", true, function(a_, b_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.a = new Int.ptr(false, nat.nil);
			this.b = new Int.ptr(false, nat.nil);
			return;
		}
		this.a = a_;
		this.b = b_;
	});
	sliceType = $sliceType($emptyInterface);
	arrayType = $arrayType(divisor, 64);
	structType = $structType("math/big", [{prop: "Mutex", name: "Mutex", anonymous: true, exported: true, typ: nosync.Mutex, tag: ""}, {prop: "table", name: "table", anonymous: false, exported: false, typ: arrayType, tag: ""}]);
	sliceType$1 = $sliceType($Uint8);
	ptrType = $ptrType(Float);
	sliceType$2 = $sliceType(Word);
	ptrType$1 = $ptrType(Int);
	ptrType$2 = $ptrType(Rat);
	ptrType$3 = $ptrType(Word);
	ptrType$4 = $ptrType(nat);
	arrayType$1 = $arrayType(nat, 16);
	sliceType$3 = $sliceType(divisor);
	ptrType$5 = $ptrType(decimal);
	ptrType$6 = $ptrType(rand.Rand);
	Accuracy.prototype.String = function() {
		var _r$3, i, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$3 = $f._r$3; i = $f.i; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		i = this.$val;
		i = i - (-1) << 24 >> 24;
		/* */ if (i < 0 || (i + 1 << 24 >> 24) >= 4) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (i < 0 || (i + 1 << 24 >> 24) >= 4) { */ case 1:
			_r$3 = fmt.Sprintf("Accuracy(%d)", new sliceType([new Accuracy((i + -1 << 24 >> 24))])); /* */ $s = 3; case 3: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			$s = -1; return _r$3;
		/* } */ case 2:
		$s = -1; return $substring("BelowExactAbove", ((i < 0 || i >= _Accuracy_index.length) ? ($throwRuntimeError("index out of range"), undefined) : _Accuracy_index[i]), (x = i + 1 << 24 >> 24, ((x < 0 || x >= _Accuracy_index.length) ? ($throwRuntimeError("index out of range"), undefined) : _Accuracy_index[x])));
		/* */ } return; } if ($f === undefined) { $f = { $blk: Accuracy.prototype.String }; } $f._r$3 = _r$3; $f.i = i; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	$ptrType(Accuracy).prototype.String = function() { return new Accuracy(this.$get()).String(); };
	addWW_g = function(x, y, c) {
		var c, x, y, yc, z0, z1;
		z1 = 0;
		z0 = 0;
		yc = y + c >>> 0;
		z0 = x + yc >>> 0;
		if (z0 < x || yc < y) {
			z1 = 1;
		}
		return [z1, z0];
	};
	subWW_g = function(x, y, c) {
		var c, x, y, yc, z0, z1;
		z1 = 0;
		z0 = 0;
		yc = y + c >>> 0;
		z0 = x - yc >>> 0;
		if (z0 > x || yc < y) {
			z1 = 1;
		}
		return [z1, z0];
	};
	mulWW_g = function(x, y) {
		var t, w0, w1, w2, x, x0, x1, y, y0, y1, z0, z1;
		z1 = 0;
		z0 = 0;
		x0 = (x & 65535) >>> 0;
		x1 = x >>> 16 >>> 0;
		y0 = (y & 65535) >>> 0;
		y1 = y >>> 16 >>> 0;
		w0 = $imul(x0, y0) >>> 0;
		t = ($imul(x1, y0) >>> 0) + (w0 >>> 16 >>> 0) >>> 0;
		w1 = (t & 65535) >>> 0;
		w2 = t >>> 16 >>> 0;
		w1 = w1 + (($imul(x0, y1) >>> 0)) >>> 0;
		z1 = (($imul(x1, y1) >>> 0) + w2 >>> 0) + (w1 >>> 16 >>> 0) >>> 0;
		z0 = $imul(x, y) >>> 0;
		return [z1, z0];
	};
	mulAddWWW_g = function(x, y, c) {
		var _tuple, c, x, y, z0, z1, zz0;
		z1 = 0;
		z0 = 0;
		_tuple = mulWW_g(x, y);
		z1 = _tuple[0];
		zz0 = _tuple[1];
		z0 = zz0 + c >>> 0;
		if (z0 < zz0) {
			z1 = z1 + (1) >>> 0;
		}
		return [z1, z0];
	};
	nlz = function(x) {
		var x;
		return ((bits.LeadingZeros(((x >>> 0))) >>> 0));
	};
	divWW_g = function(u1, u0, v) {
		var _q, _q$1, _tmp, _tmp$1, _tmp$2, _tmp$3, q, q0, q1, r, rhat, s, u0, u1, un0, un1, un10, un21, un32, v, vn0, vn1, y, y$1, y$2, y$3, y$4;
		q = 0;
		r = 0;
		if (u1 >= v) {
			_tmp = 4294967295;
			_tmp$1 = 4294967295;
			q = _tmp;
			r = _tmp$1;
			return [q, r];
		}
		s = nlz(v);
		v = (y = (s), y < 32 ? (v << y) : 0) >>> 0;
		vn1 = v >>> 16 >>> 0;
		vn0 = (v & 65535) >>> 0;
		un32 = (((y$1 = s, y$1 < 32 ? (u1 << y$1) : 0) >>> 0) | ((y$2 = ((32 - s >>> 0)), y$2 < 32 ? (u0 >>> y$2) : 0) >>> 0)) >>> 0;
		un10 = (y$3 = s, y$3 < 32 ? (u0 << y$3) : 0) >>> 0;
		un1 = un10 >>> 16 >>> 0;
		un0 = (un10 & 65535) >>> 0;
		q1 = (_q = un32 / vn1, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero"));
		rhat = un32 - ($imul(q1, vn1) >>> 0) >>> 0;
		while (true) {
			if (!(q1 >= 65536 || ($imul(q1, vn0) >>> 0) > (($imul(65536, rhat) >>> 0) + un1 >>> 0))) { break; }
			q1 = q1 - (1) >>> 0;
			rhat = rhat + (vn1) >>> 0;
			if (rhat >= 65536) {
				break;
			}
		}
		un21 = (($imul(un32, 65536) >>> 0) + un1 >>> 0) - ($imul(q1, v) >>> 0) >>> 0;
		q0 = (_q$1 = un21 / vn1, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >>> 0 : $throwRuntimeError("integer divide by zero"));
		rhat = un21 - ($imul(q0, vn1) >>> 0) >>> 0;
		while (true) {
			if (!(q0 >= 65536 || ($imul(q0, vn0) >>> 0) > (($imul(65536, rhat) >>> 0) + un0 >>> 0))) { break; }
			q0 = q0 - (1) >>> 0;
			rhat = rhat + (vn1) >>> 0;
			if (rhat >= 65536) {
				break;
			}
		}
		_tmp$2 = ($imul(q1, 65536) >>> 0) + q0 >>> 0;
		_tmp$3 = (y$4 = s, y$4 < 32 ? ((((($imul(un21, 65536) >>> 0) + un0 >>> 0) - ($imul(q0, v) >>> 0) >>> 0)) >>> y$4) : 0) >>> 0;
		q = _tmp$2;
		r = _tmp$3;
		return [q, r];
	};
	addVV_g = function(z, x, y) {
		var _i, _i$1, _ref, _ref$1, _tuple, c, i, i$1, x, xi, y, yi, z, zi;
		c = 0;
		if (false) {
			_ref = z;
			_i = 0;
			while (true) {
				if (!(_i < _ref.$length)) { break; }
				i = _i;
				_tuple = addWW_g(((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i]), ((i < 0 || i >= y.$length) ? ($throwRuntimeError("index out of range"), undefined) : y.$array[y.$offset + i]), c);
				c = _tuple[0];
				((i < 0 || i >= z.$length) ? ($throwRuntimeError("index out of range"), undefined) : z.$array[z.$offset + i] = _tuple[1]);
				_i++;
			}
			return c;
		}
		_ref$1 = $subslice(x, 0, z.$length);
		_i$1 = 0;
		while (true) {
			if (!(_i$1 < _ref$1.$length)) { break; }
			i$1 = _i$1;
			xi = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$1.$array[_ref$1.$offset + _i$1]);
			yi = ((i$1 < 0 || i$1 >= y.$length) ? ($throwRuntimeError("index out of range"), undefined) : y.$array[y.$offset + i$1]);
			zi = (xi + yi >>> 0) + c >>> 0;
			((i$1 < 0 || i$1 >= z.$length) ? ($throwRuntimeError("index out of range"), undefined) : z.$array[z.$offset + i$1] = zi);
			c = (((((xi & yi) >>> 0) | (((((xi | yi) >>> 0)) & ~zi) >>> 0)) >>> 0)) >>> 31 >>> 0;
			_i$1++;
		}
		return c;
	};
	subVV_g = function(z, x, y) {
		var _i, _i$1, _ref, _ref$1, _tuple, c, i, i$1, x, xi, y, yi, z, zi;
		c = 0;
		if (false) {
			_ref = z;
			_i = 0;
			while (true) {
				if (!(_i < _ref.$length)) { break; }
				i = _i;
				_tuple = subWW_g(((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i]), ((i < 0 || i >= y.$length) ? ($throwRuntimeError("index out of range"), undefined) : y.$array[y.$offset + i]), c);
				c = _tuple[0];
				((i < 0 || i >= z.$length) ? ($throwRuntimeError("index out of range"), undefined) : z.$array[z.$offset + i] = _tuple[1]);
				_i++;
			}
			return c;
		}
		_ref$1 = $subslice(x, 0, z.$length);
		_i$1 = 0;
		while (true) {
			if (!(_i$1 < _ref$1.$length)) { break; }
			i$1 = _i$1;
			xi = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$1.$array[_ref$1.$offset + _i$1]);
			yi = ((i$1 < 0 || i$1 >= y.$length) ? ($throwRuntimeError("index out of range"), undefined) : y.$array[y.$offset + i$1]);
			zi = (xi - yi >>> 0) - c >>> 0;
			((i$1 < 0 || i$1 >= z.$length) ? ($throwRuntimeError("index out of range"), undefined) : z.$array[z.$offset + i$1] = zi);
			c = (((((yi & ~xi) >>> 0) | (((((yi | (~xi >>> 0)) >>> 0)) & zi) >>> 0)) >>> 0)) >>> 31 >>> 0;
			_i$1++;
		}
		return c;
	};
	addVW_g = function(z, x, y) {
		var _i, _i$1, _ref, _ref$1, _tuple, c, i, i$1, x, xi, y, z, zi;
		c = 0;
		if (false) {
			c = y;
			_ref = z;
			_i = 0;
			while (true) {
				if (!(_i < _ref.$length)) { break; }
				i = _i;
				_tuple = addWW_g(((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i]), c, 0);
				c = _tuple[0];
				((i < 0 || i >= z.$length) ? ($throwRuntimeError("index out of range"), undefined) : z.$array[z.$offset + i] = _tuple[1]);
				_i++;
			}
			return c;
		}
		c = y;
		_ref$1 = $subslice(x, 0, z.$length);
		_i$1 = 0;
		while (true) {
			if (!(_i$1 < _ref$1.$length)) { break; }
			i$1 = _i$1;
			xi = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$1.$array[_ref$1.$offset + _i$1]);
			zi = xi + c >>> 0;
			((i$1 < 0 || i$1 >= z.$length) ? ($throwRuntimeError("index out of range"), undefined) : z.$array[z.$offset + i$1] = zi);
			c = ((xi & ~zi) >>> 0) >>> 31 >>> 0;
			_i$1++;
		}
		return c;
	};
	subVW_g = function(z, x, y) {
		var _i, _i$1, _ref, _ref$1, _tuple, c, i, i$1, x, xi, y, z, zi;
		c = 0;
		if (false) {
			c = y;
			_ref = z;
			_i = 0;
			while (true) {
				if (!(_i < _ref.$length)) { break; }
				i = _i;
				_tuple = subWW_g(((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i]), c, 0);
				c = _tuple[0];
				((i < 0 || i >= z.$length) ? ($throwRuntimeError("index out of range"), undefined) : z.$array[z.$offset + i] = _tuple[1]);
				_i++;
			}
			return c;
		}
		c = y;
		_ref$1 = $subslice(x, 0, z.$length);
		_i$1 = 0;
		while (true) {
			if (!(_i$1 < _ref$1.$length)) { break; }
			i$1 = _i$1;
			xi = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$1.$array[_ref$1.$offset + _i$1]);
			zi = xi - c >>> 0;
			((i$1 < 0 || i$1 >= z.$length) ? ($throwRuntimeError("index out of range"), undefined) : z.$array[z.$offset + i$1] = zi);
			c = (((zi & ~xi) >>> 0)) >>> 31 >>> 0;
			_i$1++;
		}
		return c;
	};
	shlVU_g = function(z, x, s) {
		var $C5$9D, c, i, n, s, w, w1, x, x$1, x$2, y, y$1, y$2, y$3, z;
		c = 0;
		n = z.$length;
		if (n > 0) {
			$C5$9D = 32 - s >>> 0;
			w1 = (x$1 = n - 1 >> 0, ((x$1 < 0 || x$1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + x$1]));
			c = (y = $C5$9D, y < 32 ? (w1 >>> y) : 0) >>> 0;
			i = n - 1 >> 0;
			while (true) {
				if (!(i > 0)) { break; }
				w = w1;
				w1 = (x$2 = i - 1 >> 0, ((x$2 < 0 || x$2 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + x$2]));
				((i < 0 || i >= z.$length) ? ($throwRuntimeError("index out of range"), undefined) : z.$array[z.$offset + i] = ((((y$1 = s, y$1 < 32 ? (w << y$1) : 0) >>> 0) | ((y$2 = $C5$9D, y$2 < 32 ? (w1 >>> y$2) : 0) >>> 0)) >>> 0));
				i = i - (1) >> 0;
			}
			(0 >= z.$length ? ($throwRuntimeError("index out of range"), undefined) : z.$array[z.$offset + 0] = ((y$3 = s, y$3 < 32 ? (w1 << y$3) : 0) >>> 0));
		}
		return c;
	};
	shrVU_g = function(z, x, s) {
		var $C5$9D, c, i, n, s, w, w1, x, x$1, x$2, y, y$1, y$2, y$3, z;
		c = 0;
		n = z.$length;
		if (n > 0) {
			$C5$9D = 32 - s >>> 0;
			w1 = (0 >= x.$length ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + 0]);
			c = (y = $C5$9D, y < 32 ? (w1 << y) : 0) >>> 0;
			i = 0;
			while (true) {
				if (!(i < (n - 1 >> 0))) { break; }
				w = w1;
				w1 = (x$1 = i + 1 >> 0, ((x$1 < 0 || x$1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + x$1]));
				((i < 0 || i >= z.$length) ? ($throwRuntimeError("index out of range"), undefined) : z.$array[z.$offset + i] = ((((y$1 = s, y$1 < 32 ? (w >>> y$1) : 0) >>> 0) | ((y$2 = $C5$9D, y$2 < 32 ? (w1 << y$2) : 0) >>> 0)) >>> 0));
				i = i + (1) >> 0;
			}
			(x$2 = n - 1 >> 0, ((x$2 < 0 || x$2 >= z.$length) ? ($throwRuntimeError("index out of range"), undefined) : z.$array[z.$offset + x$2] = ((y$3 = s, y$3 < 32 ? (w1 >>> y$3) : 0) >>> 0)));
		}
		return c;
	};
	mulAddVWW_g = function(z, x, y, r) {
		var _i, _ref, _tuple, c, i, r, x, y, z;
		c = 0;
		c = r;
		_ref = z;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			_tuple = mulAddWWW_g(((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i]), y, c);
			c = _tuple[0];
			((i < 0 || i >= z.$length) ? ($throwRuntimeError("index out of range"), undefined) : z.$array[z.$offset + i] = _tuple[1]);
			_i++;
		}
		return c;
	};
	addMulVVW_g = function(z, x, y) {
		var _i, _ref, _tuple, _tuple$1, c, i, x, y, z, z0, z1;
		c = 0;
		_ref = z;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			_tuple = mulAddWWW_g(((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i]), y, ((i < 0 || i >= z.$length) ? ($throwRuntimeError("index out of range"), undefined) : z.$array[z.$offset + i]));
			z1 = _tuple[0];
			z0 = _tuple[1];
			_tuple$1 = addWW_g(z0, c, 0);
			c = _tuple$1[0];
			((i < 0 || i >= z.$length) ? ($throwRuntimeError("index out of range"), undefined) : z.$array[z.$offset + i] = _tuple$1[1]);
			c = c + (z1) >>> 0;
			_i++;
		}
		return c;
	};
	divWVW_g = function(z, xn, x, y) {
		var _tuple, i, r, x, xn, y, z;
		r = 0;
		r = xn;
		i = z.$length - 1 >> 0;
		while (true) {
			if (!(i >= 0)) { break; }
			_tuple = divWW_g(r, ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i]), y);
			((i < 0 || i >= z.$length) ? ($throwRuntimeError("index out of range"), undefined) : z.$array[z.$offset + i] = _tuple[0]);
			r = _tuple[1];
			i = i - (1) >> 0;
		}
		return r;
	};
	mulWW = function(x, y) {
		var _tuple, x, y, z0, z1;
		z1 = 0;
		z0 = 0;
		_tuple = mulWW_g(x, y);
		z1 = _tuple[0];
		z0 = _tuple[1];
		return [z1, z0];
	};
	divWW = function(x1, x0, y) {
		var _tuple, q, r, x0, x1, y;
		q = 0;
		r = 0;
		_tuple = divWW_g(x1, x0, y);
		q = _tuple[0];
		r = _tuple[1];
		return [q, r];
	};
	addVV = function(z, x, y) {
		var c, x, y, z;
		c = 0;
		c = addVV_g(z, x, y);
		return c;
	};
	subVV = function(z, x, y) {
		var c, x, y, z;
		c = 0;
		c = subVV_g(z, x, y);
		return c;
	};
	addVW = function(z, x, y) {
		var c, x, y, z;
		c = 0;
		c = addVW_g(z, x, y);
		return c;
	};
	subVW = function(z, x, y) {
		var c, x, y, z;
		c = 0;
		c = subVW_g(z, x, y);
		return c;
	};
	shlVU = function(z, x, s) {
		var c, s, x, z;
		c = 0;
		c = shlVU_g(z, x, s);
		return c;
	};
	shrVU = function(z, x, s) {
		var c, s, x, z;
		c = 0;
		c = shrVU_g(z, x, s);
		return c;
	};
	mulAddVWW = function(z, x, y, r) {
		var c, r, x, y, z;
		c = 0;
		c = mulAddVWW_g(z, x, y, r);
		return c;
	};
	addMulVVW = function(z, x, y) {
		var c, x, y, z;
		c = 0;
		c = addMulVVW_g(z, x, y);
		return c;
	};
	divWVW = function(z, xn, x, y) {
		var r, x, xn, y, z;
		r = 0;
		r = divWVW_g(z, xn, x, y);
		return r;
	};
	decimal.ptr.prototype.at = function(i) {
		var d, i, x;
		d = this;
		if (0 <= i && i < d.mant.$length) {
			return (x = d.mant, ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i]));
		}
		return 48;
	};
	decimal.prototype.at = function(i) { return this.$val.at(i); };
	decimal.ptr.prototype.init = function(m, shift) {
		var _r$3, m, n, ntz, s, s$1, shift, x, x$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$3 = $f._r$3; m = $f.m; n = $f.n; ntz = $f.ntz; s = $f.s; s$1 = $f.s$1; shift = $f.shift; x = $f.x; x$1 = $f.x$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		x = this;
		if (m.$length === 0) {
			x.mant = $subslice(x.mant, 0, 0);
			x.exp = 0;
			$s = -1; return;
		}
		if (shift < 0) {
			ntz = m.trailingZeroBits();
			s = ((-shift >>> 0));
			if (s >= ntz) {
				s = ntz;
			}
			m = (nat.nil).shr(m, s);
			shift = shift + (((s >> 0))) >> 0;
		}
		if (shift > 0) {
			m = (nat.nil).shl(m, ((shift >>> 0)));
			shift = 0;
		}
		_r$3 = m.utoa(10); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		s$1 = _r$3;
		n = s$1.$length;
		x.exp = n;
		while (true) {
			if (!(n > 0 && ((x$1 = n - 1 >> 0, ((x$1 < 0 || x$1 >= s$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : s$1.$array[s$1.$offset + x$1])) === 48))) { break; }
			n = n - (1) >> 0;
		}
		x.mant = $appendSlice($subslice(x.mant, 0, 0), $subslice(s$1, 0, n));
		if (shift < 0) {
			while (true) {
				if (!(shift < -28)) { break; }
				shr(x, 28);
				shift = shift + (28) >> 0;
			}
			shr(x, ((-shift >>> 0)));
		}
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: decimal.ptr.prototype.init }; } $f._r$3 = _r$3; $f.m = m; $f.n = n; $f.ntz = ntz; $f.s = s; $f.s$1 = s$1; $f.shift = shift; $f.x = x; $f.x$1 = x$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	decimal.prototype.init = function(m, shift) { return this.$val.init(m, shift); };
	shr = function(x, s) {
		var ch, ch$1, d, d$1, d$2, mask, n, r, s, w, x, x$1, x$2, x$3, x$4, y, y$1, y$2, y$3, y$4, y$5;
		r = 0;
		n = 0;
		while (true) {
			if (!((((y = s, y < 32 ? (n >>> y) : 0) >>> 0) === 0) && r < x.mant.$length)) { break; }
			ch = (((x$1 = x.mant, ((r < 0 || r >= x$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + r])) >>> 0));
			r = r + (1) >> 0;
			n = (($imul(n, 10) >>> 0) + ch >>> 0) - 48 >>> 0;
		}
		if (n === 0) {
			x.mant = $subslice(x.mant, 0, 0);
			return;
		}
		while (true) {
			if (!(((y$1 = s, y$1 < 32 ? (n >>> y$1) : 0) >>> 0) === 0)) { break; }
			r = r + (1) >> 0;
			n = $imul(n, (10)) >>> 0;
		}
		x.exp = x.exp + ((1 - r >> 0)) >> 0;
		w = 0;
		mask = ((y$2 = s, y$2 < 32 ? (1 << y$2) : 0) >>> 0) - 1 >>> 0;
		while (true) {
			if (!(r < x.mant.$length)) { break; }
			ch$1 = (((x$2 = x.mant, ((r < 0 || r >= x$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + r])) >>> 0));
			r = r + (1) >> 0;
			d = (y$3 = s, y$3 < 32 ? (n >>> y$3) : 0) >>> 0;
			n = (n & (mask)) >>> 0;
			(x$3 = x.mant, ((w < 0 || w >= x$3.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$3.$array[x$3.$offset + w] = (((d + 48 >>> 0) << 24 >>> 24))));
			w = w + (1) >> 0;
			n = (($imul(n, 10) >>> 0) + ch$1 >>> 0) - 48 >>> 0;
		}
		while (true) {
			if (!(n > 0 && w < x.mant.$length)) { break; }
			d$1 = (y$4 = s, y$4 < 32 ? (n >>> y$4) : 0) >>> 0;
			n = (n & (mask)) >>> 0;
			(x$4 = x.mant, ((w < 0 || w >= x$4.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$4.$array[x$4.$offset + w] = (((d$1 + 48 >>> 0) << 24 >>> 24))));
			w = w + (1) >> 0;
			n = $imul(n, 10) >>> 0;
		}
		x.mant = $subslice(x.mant, 0, w);
		while (true) {
			if (!(n > 0)) { break; }
			d$2 = (y$5 = s, y$5 < 32 ? (n >>> y$5) : 0) >>> 0;
			n = (n & (mask)) >>> 0;
			x.mant = $append(x.mant, (((d$2 + 48 >>> 0) << 24 >>> 24)));
			n = $imul(n, 10) >>> 0;
		}
		trim(x);
	};
	decimal.ptr.prototype.String = function() {
		var buf, x;
		x = this;
		if (x.mant.$length === 0) {
			return "0";
		}
		buf = sliceType$1.nil;
		if (x.exp <= 0) {
			buf = $appendSlice(buf, "0.");
			buf = appendZeros(buf, -x.exp);
			buf = $appendSlice(buf, x.mant);
		} else if (x.exp < x.mant.$length) {
			buf = $appendSlice(buf, $subslice(x.mant, 0, x.exp));
			buf = $append(buf, 46);
			buf = $appendSlice(buf, $subslice(x.mant, x.exp));
		} else {
			buf = $appendSlice(buf, x.mant);
			buf = appendZeros(buf, x.exp - x.mant.$length >> 0);
		}
		return ($bytesToString(buf));
	};
	decimal.prototype.String = function() { return this.$val.String(); };
	appendZeros = function(buf, n) {
		var buf, n;
		while (true) {
			if (!(n > 0)) { break; }
			buf = $append(buf, 48);
			n = n - (1) >> 0;
		}
		return buf;
	};
	shouldRoundUp = function(x, n) {
		var n, x, x$1, x$2, x$3, x$4;
		if (((x$1 = x.mant, ((n < 0 || n >= x$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + n])) === 53) && ((n + 1 >> 0) === x.mant.$length)) {
			return n > 0 && !(((((((x$2 = x.mant, x$3 = n - 1 >> 0, ((x$3 < 0 || x$3 >= x$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + x$3])) - 48 << 24 >>> 24)) & 1) >>> 0) === 0));
		}
		return (x$4 = x.mant, ((n < 0 || n >= x$4.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$4.$array[x$4.$offset + n])) >= 53;
	};
	decimal.ptr.prototype.round = function(n) {
		var n, x;
		x = this;
		if (n < 0 || n >= x.mant.$length) {
			return;
		}
		if (shouldRoundUp(x, n)) {
			x.roundUp(n);
		} else {
			x.roundDown(n);
		}
	};
	decimal.prototype.round = function(n) { return this.$val.round(n); };
	decimal.ptr.prototype.roundUp = function(n) {
		var _index, n, x, x$1, x$2, x$3, x$4, x$5;
		x = this;
		if (n < 0 || n >= x.mant.$length) {
			return;
		}
		while (true) {
			if (!(n > 0 && (x$1 = x.mant, x$2 = n - 1 >> 0, ((x$2 < 0 || x$2 >= x$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + x$2])) >= 57)) { break; }
			n = n - (1) >> 0;
		}
		if (n === 0) {
			(x$3 = x.mant, (0 >= x$3.$length ? ($throwRuntimeError("index out of range"), undefined) : x$3.$array[x$3.$offset + 0] = 49));
			x.mant = $subslice(x.mant, 0, 1);
			x.exp = x.exp + (1) >> 0;
			return;
		}
		_index = n - 1 >> 0;
		(x$5 = x.mant, ((_index < 0 || _index >= x$5.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$5.$array[x$5.$offset + _index] = ((x$4 = x.mant, ((_index < 0 || _index >= x$4.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$4.$array[x$4.$offset + _index])) + (1) << 24 >>> 24)));
		x.mant = $subslice(x.mant, 0, n);
	};
	decimal.prototype.roundUp = function(n) { return this.$val.roundUp(n); };
	decimal.ptr.prototype.roundDown = function(n) {
		var n, x;
		x = this;
		if (n < 0 || n >= x.mant.$length) {
			return;
		}
		x.mant = $subslice(x.mant, 0, n);
		trim(x);
	};
	decimal.prototype.roundDown = function(n) { return this.$val.roundDown(n); };
	trim = function(x) {
		var i, x, x$1, x$2;
		i = x.mant.$length;
		while (true) {
			if (!(i > 0 && ((x$1 = x.mant, x$2 = i - 1 >> 0, ((x$2 < 0 || x$2 >= x$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + x$2])) === 48))) { break; }
			i = i - (1) >> 0;
		}
		x.mant = $subslice(x.mant, 0, i);
		if (i === 0) {
			x.exp = 0;
		}
	};
	ErrNaN.ptr.prototype.Error = function() {
		var err;
		err = this;
		return err.msg;
	};
	ErrNaN.prototype.Error = function() { return this.$val.Error(); };
	NewFloat = function(x) {
		var _r$3, x, x$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$3 = $f._r$3; x = $f.x; x$1 = $f.x$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		if (math.IsNaN(x)) {
			$panic((x$1 = new ErrNaN.ptr("NewFloat(NaN)"), new x$1.constructor.elem(x$1)));
		}
		_r$3 = new Float.ptr(0, 0, 0, 0, false, nat.nil, 0).SetFloat64(x); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		$s = -1; return _r$3;
		/* */ } return; } if ($f === undefined) { $f = { $blk: NewFloat }; } $f._r$3 = _r$3; $f.x = x; $f.x$1 = x$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.NewFloat = NewFloat;
	Float.ptr.prototype.SetPrec = function(prec) {
		var old, prec, z, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; old = $f.old; prec = $f.prec; z = $f.z; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		z = this;
		z.acc = 0;
		if (prec === 0) {
			z.prec = 0;
			if (z.form === 1) {
				z.acc = makeAcc(z.neg);
				z.form = 0;
			}
			$s = -1; return z;
		}
		if (prec > 4294967295) {
			prec = 4294967295;
		}
		old = z.prec;
		z.prec = ((prec >>> 0));
		/* */ if (z.prec < old) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (z.prec < old) { */ case 1:
			$r = z.round(0); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 2:
		$s = -1; return z;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Float.ptr.prototype.SetPrec }; } $f.old = old; $f.prec = prec; $f.z = z; $f.$s = $s; $f.$r = $r; return $f;
	};
	Float.prototype.SetPrec = function(prec) { return this.$val.SetPrec(prec); };
	makeAcc = function(above) {
		var above;
		if (above) {
			return 1;
		}
		return -1;
	};
	Float.ptr.prototype.SetMode = function(mode) {
		var mode, z;
		z = this;
		z.mode = mode;
		z.acc = 0;
		return z;
	};
	Float.prototype.SetMode = function(mode) { return this.$val.SetMode(mode); };
	Float.ptr.prototype.Prec = function() {
		var x;
		x = this;
		return ((x.prec >>> 0));
	};
	Float.prototype.Prec = function() { return this.$val.Prec(); };
	Float.ptr.prototype.MinPrec = function() {
		var x;
		x = this;
		if (!((x.form === 1))) {
			return 0;
		}
		return (((x.mant.$length >>> 0)) * 32 >>> 0) - x.mant.trailingZeroBits() >>> 0;
	};
	Float.prototype.MinPrec = function() { return this.$val.MinPrec(); };
	Float.ptr.prototype.Mode = function() {
		var x;
		x = this;
		return x.mode;
	};
	Float.prototype.Mode = function() { return this.$val.Mode(); };
	Float.ptr.prototype.Acc = function() {
		var x;
		x = this;
		return x.acc;
	};
	Float.prototype.Acc = function() { return this.$val.Acc(); };
	Float.ptr.prototype.Sign = function() {
		var x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		x = this;
		/* */ if (false) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (false) { */ case 1:
			$r = x.validate(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 2:
		if (x.form === 0) {
			$s = -1; return 0;
		}
		if (x.neg) {
			$s = -1; return -1;
		}
		$s = -1; return 1;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Float.ptr.prototype.Sign }; } $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Float.prototype.Sign = function() { return this.$val.Sign(); };
	Float.ptr.prototype.MantExp = function(mant) {
		var _r$3, exp, mant, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$3 = $f._r$3; exp = $f.exp; mant = $f.mant; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		exp = 0;
		x = this;
		/* */ if (false) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (false) { */ case 1:
			$r = x.validate(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 2:
		if (x.form === 1) {
			exp = ((x.exp >> 0));
		}
		/* */ if (!(mant === ptrType.nil)) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (!(mant === ptrType.nil)) { */ case 4:
			_r$3 = mant.Copy(x); /* */ $s = 6; case 6: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_r$3;
			if (mant.form === 1) {
				mant.exp = 0;
			}
		/* } */ case 5:
		$s = -1; return exp;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Float.ptr.prototype.MantExp }; } $f._r$3 = _r$3; $f.exp = exp; $f.mant = mant; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Float.prototype.MantExp = function(mant) { return this.$val.MantExp(mant); };
	Float.ptr.prototype.setExpAndRound = function(exp, sbit) {
		var exp, sbit, z, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; exp = $f.exp; sbit = $f.sbit; z = $f.z; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		z = this;
		if ((exp.$high < -1 || (exp.$high === -1 && exp.$low < 2147483648))) {
			z.acc = makeAcc(z.neg);
			z.form = 0;
			$s = -1; return;
		}
		if ((exp.$high > 0 || (exp.$high === 0 && exp.$low > 2147483647))) {
			z.acc = makeAcc(!z.neg);
			z.form = 2;
			$s = -1; return;
		}
		z.form = 1;
		z.exp = (((exp.$low + ((exp.$high >> 31) * 4294967296)) >> 0));
		$r = z.round(sbit); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Float.ptr.prototype.setExpAndRound }; } $f.exp = exp; $f.sbit = sbit; $f.z = z; $f.$s = $s; $f.$r = $r; return $f;
	};
	Float.prototype.setExpAndRound = function(exp, sbit) { return this.$val.setExpAndRound(exp, sbit); };
	Float.ptr.prototype.SetMantExp = function(mant, exp) {
		var _r$3, exp, mant, x, x$1, z, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$3 = $f._r$3; exp = $f.exp; mant = $f.mant; x = $f.x; x$1 = $f.x$1; z = $f.z; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		z = this;
		/* */ if (false) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (false) { */ case 1:
			$r = z.validate(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = mant.validate(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 2:
		_r$3 = z.Copy(mant); /* */ $s = 5; case 5: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_r$3;
		if (!((z.form === 1))) {
			$s = -1; return z;
		}
		$r = z.setExpAndRound((x = (new $Int64(0, z.exp)), x$1 = (new $Int64(0, exp)), new $Int64(x.$high + x$1.$high, x.$low + x$1.$low)), 0); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return z;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Float.ptr.prototype.SetMantExp }; } $f._r$3 = _r$3; $f.exp = exp; $f.mant = mant; $f.x = x; $f.x$1 = x$1; $f.z = z; $f.$s = $s; $f.$r = $r; return $f;
	};
	Float.prototype.SetMantExp = function(mant, exp) { return this.$val.SetMantExp(mant, exp); };
	Float.ptr.prototype.Signbit = function() {
		var x;
		x = this;
		return x.neg;
	};
	Float.prototype.Signbit = function() { return this.$val.Signbit(); };
	Float.ptr.prototype.IsInf = function() {
		var x;
		x = this;
		return x.form === 2;
	};
	Float.prototype.IsInf = function() { return this.$val.IsInf(); };
	Float.ptr.prototype.IsInt = function() {
		var x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		x = this;
		/* */ if (false) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (false) { */ case 1:
			$r = x.validate(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 2:
		if (!((x.form === 1))) {
			$s = -1; return x.form === 0;
		}
		if (x.exp <= 0) {
			$s = -1; return false;
		}
		$s = -1; return x.prec <= ((x.exp >>> 0)) || x.MinPrec() <= ((x.exp >>> 0));
		/* */ } return; } if ($f === undefined) { $f = { $blk: Float.ptr.prototype.IsInt }; } $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Float.prototype.IsInt = function() { return this.$val.IsInt(); };
	Float.ptr.prototype.validate = function() {
		var _arg, _arg$1, _r$3, _r$4, m, x, x$1, x$2, x$3, x$4, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _arg = $f._arg; _arg$1 = $f._arg$1; _r$3 = $f._r$3; _r$4 = $f._r$4; m = $f.m; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		x = this;
		if (true) {
			$panic(new $String("validate called but debugFloat is not set"));
		}
		if (!((x.form === 1))) {
			$s = -1; return;
		}
		m = x.mant.$length;
		if (m === 0) {
			$panic(new $String("nonzero finite number with empty mantissa"));
		}
		/* */ if ((((x$1 = x.mant, x$2 = m - 1 >> 0, ((x$2 < 0 || x$2 >= x$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + x$2])) & 2147483648) >>> 0) === 0) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if ((((x$1 = x.mant, x$2 = m - 1 >> 0, ((x$2 < 0 || x$2 >= x$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + x$2])) & 2147483648) >>> 0) === 0) { */ case 1:
			_arg = new Word((x$3 = x.mant, x$4 = m - 1 >> 0, ((x$4 < 0 || x$4 >= x$3.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$3.$array[x$3.$offset + x$4])));
			_r$3 = x.Text(112, 0); /* */ $s = 3; case 3: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_arg$1 = new $String(_r$3);
			_r$4 = fmt.Sprintf("msb not set in last word %#x of %s", new sliceType([_arg, _arg$1])); /* */ $s = 4; case 4: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			$panic(new $String(_r$4));
		/* } */ case 2:
		if (x.prec === 0) {
			$panic(new $String("zero precision finite number"));
		}
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Float.ptr.prototype.validate }; } $f._arg = _arg; $f._arg$1 = _arg$1; $f._r$3 = _r$3; $f._r$4 = _r$4; $f.m = m; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.$s = $s; $f.$r = $r; return $f;
	};
	Float.prototype.validate = function() { return this.$val.validate(); };
	Float.ptr.prototype.round = function(sbit) {
		var _1, _index, _q, bits$1, inc, lsb, m, n, ntz, r, rbit, sbit, x, x$1, x$2, x$3, x$4, x$5, x$6, x$7, x$8, y, z, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _index = $f._index; _q = $f._q; bits$1 = $f.bits$1; inc = $f.inc; lsb = $f.lsb; m = $f.m; n = $f.n; ntz = $f.ntz; r = $f.r; rbit = $f.rbit; sbit = $f.sbit; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; x$6 = $f.x$6; x$7 = $f.x$7; x$8 = $f.x$8; y = $f.y; z = $f.z; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		z = this;
		/* */ if (false) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (false) { */ case 1:
			$r = z.validate(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 2:
		z.acc = 0;
		if (!((z.form === 1))) {
			$s = -1; return;
		}
		m = ((z.mant.$length >>> 0));
		bits$1 = $imul(m, 32) >>> 0;
		if (bits$1 <= z.prec) {
			$s = -1; return;
		}
		r = ((((bits$1 - z.prec >>> 0) - 1 >>> 0) >>> 0));
		rbit = (z.mant.bit(r) & 1) >>> 0;
		if ((sbit === 0) && ((rbit === 0) || (z.mode === 0))) {
			sbit = z.mant.sticky(r);
		}
		sbit = (sbit & (1)) >>> 0;
		n = (_q = ((z.prec + 31 >>> 0)) / 32, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero"));
		if (m > n) {
			$copySlice(z.mant, $subslice(z.mant, (m - n >>> 0)));
			z.mant = $subslice(z.mant, 0, n);
		}
		ntz = ($imul(n, 32) >>> 0) - z.prec >>> 0;
		lsb = (y = ntz, y < 32 ? (1 << y) : 0) >>> 0;
		if (!((((rbit | sbit) >>> 0) === 0))) {
			inc = false;
			_1 = z.mode;
			if (_1 === (4)) {
				inc = z.neg;
			} else if (_1 === (2)) {
			} else if (_1 === (0)) {
				inc = !((rbit === 0)) && (!((sbit === 0)) || !(((((x = z.mant, (0 >= x.$length ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + 0])) & lsb) >>> 0) === 0)));
			} else if (_1 === (1)) {
				inc = !((rbit === 0));
			} else if (_1 === (3)) {
				inc = true;
			} else if (_1 === (5)) {
				inc = !z.neg;
			} else {
				$panic(new $String("unreachable"));
			}
			z.acc = makeAcc(!(inc === z.neg));
			if (inc) {
				if (!((addVW((x$1 = z.mant, $subslice(new sliceType$2(x$1.$array), x$1.$offset, x$1.$offset + x$1.$length)), (x$2 = z.mant, $subslice(new sliceType$2(x$2.$array), x$2.$offset, x$2.$offset + x$2.$length)), lsb) === 0))) {
					if (z.exp >= 2147483647) {
						z.form = 2;
						$s = -1; return;
					}
					z.exp = z.exp + (1) >> 0;
					shrVU((x$3 = z.mant, $subslice(new sliceType$2(x$3.$array), x$3.$offset, x$3.$offset + x$3.$length)), (x$4 = z.mant, $subslice(new sliceType$2(x$4.$array), x$4.$offset, x$4.$offset + x$4.$length)), 1);
					_index = n - 1 >>> 0;
					(x$6 = z.mant, ((_index < 0 || _index >= x$6.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$6.$array[x$6.$offset + _index] = (((x$5 = z.mant, ((_index < 0 || _index >= x$5.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$5.$array[x$5.$offset + _index])) | (2147483648)) >>> 0)));
				}
			}
		}
		(x$8 = z.mant, (0 >= x$8.$length ? ($throwRuntimeError("index out of range"), undefined) : x$8.$array[x$8.$offset + 0] = (((x$7 = z.mant, (0 >= x$7.$length ? ($throwRuntimeError("index out of range"), undefined) : x$7.$array[x$7.$offset + 0])) & ~((lsb - 1 >>> 0))) >>> 0)));
		/* */ if (false) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (false) { */ case 4:
			$r = z.validate(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 5:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Float.ptr.prototype.round }; } $f._1 = _1; $f._index = _index; $f._q = _q; $f.bits$1 = bits$1; $f.inc = inc; $f.lsb = lsb; $f.m = m; $f.n = n; $f.ntz = ntz; $f.r = r; $f.rbit = rbit; $f.sbit = sbit; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.x$6 = x$6; $f.x$7 = x$7; $f.x$8 = x$8; $f.y = y; $f.z = z; $f.$s = $s; $f.$r = $r; return $f;
	};
	Float.prototype.round = function(sbit) { return this.$val.round(sbit); };
	Float.ptr.prototype.setBits64 = function(neg, x) {
		var neg, s, x, z, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; neg = $f.neg; s = $f.s; x = $f.x; z = $f.z; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		z = this;
		if (z.prec === 0) {
			z.prec = 64;
		}
		z.acc = 0;
		z.neg = neg;
		if ((x.$high === 0 && x.$low === 0)) {
			z.form = 0;
			$s = -1; return z;
		}
		z.form = 1;
		s = bits.LeadingZeros64(x);
		z.mant = z.mant.setUint64($shiftLeft64(x, ((s >>> 0))));
		z.exp = (((64 - s >> 0) >> 0));
		/* */ if (z.prec < 64) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (z.prec < 64) { */ case 1:
			$r = z.round(0); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 2:
		$s = -1; return z;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Float.ptr.prototype.setBits64 }; } $f.neg = neg; $f.s = s; $f.x = x; $f.z = z; $f.$s = $s; $f.$r = $r; return $f;
	};
	Float.prototype.setBits64 = function(neg, x) { return this.$val.setBits64(neg, x); };
	Float.ptr.prototype.SetUint64 = function(x) {
		var _r$3, x, z, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$3 = $f._r$3; x = $f.x; z = $f.z; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		z = this;
		_r$3 = z.setBits64(false, x); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		$s = -1; return _r$3;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Float.ptr.prototype.SetUint64 }; } $f._r$3 = _r$3; $f.x = x; $f.z = z; $f.$s = $s; $f.$r = $r; return $f;
	};
	Float.prototype.SetUint64 = function(x) { return this.$val.SetUint64(x); };
	Float.ptr.prototype.SetInt64 = function(x) {
		var _r$3, u, x, z, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$3 = $f._r$3; u = $f.u; x = $f.x; z = $f.z; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		z = this;
		u = x;
		if ((u.$high < 0 || (u.$high === 0 && u.$low < 0))) {
			u = new $Int64(-u.$high, -u.$low);
		}
		_r$3 = z.setBits64((x.$high < 0 || (x.$high === 0 && x.$low < 0)), (new $Uint64(u.$high, u.$low))); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		$s = -1; return _r$3;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Float.ptr.prototype.SetInt64 }; } $f._r$3 = _r$3; $f.u = u; $f.x = x; $f.z = z; $f.$s = $s; $f.$r = $r; return $f;
	};
	Float.prototype.SetInt64 = function(x) { return this.$val.SetInt64(x); };
	Float.ptr.prototype.SetFloat64 = function(x) {
		var _tuple, exp, fmant, x, x$1, x$2, z, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _tuple = $f._tuple; exp = $f.exp; fmant = $f.fmant; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; z = $f.z; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		z = this;
		if (z.prec === 0) {
			z.prec = 53;
		}
		if (math.IsNaN(x)) {
			$panic((x$1 = new ErrNaN.ptr("Float.SetFloat64(NaN)"), new x$1.constructor.elem(x$1)));
		}
		z.acc = 0;
		z.neg = math.Signbit(x);
		if (x === 0) {
			z.form = 0;
			$s = -1; return z;
		}
		if (math.IsInf(x, 0)) {
			z.form = 2;
			$s = -1; return z;
		}
		z.form = 1;
		_tuple = math.Frexp(x);
		fmant = _tuple[0];
		exp = _tuple[1];
		z.mant = z.mant.setUint64((x$2 = $shiftLeft64(math.Float64bits(fmant), 11), new $Uint64(2147483648 | x$2.$high, (0 | x$2.$low) >>> 0)));
		z.exp = ((exp >> 0));
		/* */ if (z.prec < 53) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (z.prec < 53) { */ case 1:
			$r = z.round(0); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 2:
		$s = -1; return z;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Float.ptr.prototype.SetFloat64 }; } $f._tuple = _tuple; $f.exp = exp; $f.fmant = fmant; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.z = z; $f.$s = $s; $f.$r = $r; return $f;
	};
	Float.prototype.SetFloat64 = function(x) { return this.$val.SetFloat64(x); };
	fnorm = function(m) {
		var c, m, s, x, x$1;
		if (false && ((m.$length === 0) || ((x = m.$length - 1 >> 0, ((x < 0 || x >= m.$length) ? ($throwRuntimeError("index out of range"), undefined) : m.$array[m.$offset + x])) === 0))) {
			$panic(new $String("msw of mantissa is 0"));
		}
		s = nlz((x$1 = m.$length - 1 >> 0, ((x$1 < 0 || x$1 >= m.$length) ? ($throwRuntimeError("index out of range"), undefined) : m.$array[m.$offset + x$1])));
		if (s > 0) {
			c = shlVU($subslice(new sliceType$2(m.$array), m.$offset, m.$offset + m.$length), $subslice(new sliceType$2(m.$array), m.$offset, m.$offset + m.$length), s);
			if (false && !((c === 0))) {
				$panic(new $String("nlz or shlVU incorrect"));
			}
		}
		return (new $Int64(0, s));
	};
	Float.ptr.prototype.SetInt = function(x) {
		var bits$1, x, z, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; bits$1 = $f.bits$1; x = $f.x; z = $f.z; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		z = this;
		bits$1 = ((x.BitLen() >>> 0));
		if (z.prec === 0) {
			z.prec = umax32(bits$1, 64);
		}
		z.acc = 0;
		z.neg = x.neg;
		if (x.abs.$length === 0) {
			z.form = 0;
			$s = -1; return z;
		}
		z.mant = z.mant.set(x.abs);
		fnorm(z.mant);
		$r = z.setExpAndRound((new $Int64(0, bits$1)), 0); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return z;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Float.ptr.prototype.SetInt }; } $f.bits$1 = bits$1; $f.x = x; $f.z = z; $f.$s = $s; $f.$r = $r; return $f;
	};
	Float.prototype.SetInt = function(x) { return this.$val.SetInt(x); };
	Float.ptr.prototype.SetRat = function(x) {
		var _r$3, _r$4, _r$5, _r$6, _tmp, _tmp$1, a, b, x, z, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; a = $f.a; b = $f.b; x = $f.x; z = $f.z; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		a = [a];
		b = [b];
		z = this;
		/* */ if (x.IsInt()) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (x.IsInt()) { */ case 1:
			_r$3 = z.SetInt(x.Num()); /* */ $s = 3; case 3: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			$s = -1; return _r$3;
		/* } */ case 2:
		_tmp = new Float.ptr(0, 0, 0, 0, false, nat.nil, 0);
		_tmp$1 = new Float.ptr(0, 0, 0, 0, false, nat.nil, 0);
		a[0] = $clone(_tmp, Float);
		b[0] = $clone(_tmp$1, Float);
		_r$4 = a[0].SetInt(x.Num()); /* */ $s = 4; case 4: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		_r$4;
		_r$5 = b[0].SetInt(x.Denom()); /* */ $s = 5; case 5: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		_r$5;
		if (z.prec === 0) {
			z.prec = umax32(a[0].prec, b[0].prec);
		}
		_r$6 = z.Quo(a[0], b[0]); /* */ $s = 6; case 6: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
		$s = -1; return _r$6;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Float.ptr.prototype.SetRat }; } $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f.a = a; $f.b = b; $f.x = x; $f.z = z; $f.$s = $s; $f.$r = $r; return $f;
	};
	Float.prototype.SetRat = function(x) { return this.$val.SetRat(x); };
	Float.ptr.prototype.SetInf = function(signbit) {
		var signbit, z;
		z = this;
		z.acc = 0;
		z.form = 2;
		z.neg = signbit;
		return z;
	};
	Float.prototype.SetInf = function(signbit) { return this.$val.SetInf(signbit); };
	Float.ptr.prototype.Set = function(x) {
		var x, z, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; x = $f.x; z = $f.z; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		z = this;
		/* */ if (false) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (false) { */ case 1:
			$r = x.validate(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 2:
		z.acc = 0;
		/* */ if (!(z === x)) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (!(z === x)) { */ case 4:
			z.form = x.form;
			z.neg = x.neg;
			if (x.form === 1) {
				z.exp = x.exp;
				z.mant = z.mant.set(x.mant);
			}
			/* */ if (z.prec === 0) { $s = 6; continue; }
			/* */ if (z.prec < x.prec) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if (z.prec === 0) { */ case 6:
				z.prec = x.prec;
				$s = 8; continue;
			/* } else if (z.prec < x.prec) { */ case 7:
				$r = z.round(0); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 8:
		/* } */ case 5:
		$s = -1; return z;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Float.ptr.prototype.Set }; } $f.x = x; $f.z = z; $f.$s = $s; $f.$r = $r; return $f;
	};
	Float.prototype.Set = function(x) { return this.$val.Set(x); };
	Float.ptr.prototype.Copy = function(x) {
		var x, z, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; x = $f.x; z = $f.z; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		z = this;
		/* */ if (false) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (false) { */ case 1:
			$r = x.validate(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 2:
		if (!(z === x)) {
			z.prec = x.prec;
			z.mode = x.mode;
			z.acc = x.acc;
			z.form = x.form;
			z.neg = x.neg;
			if (z.form === 1) {
				z.mant = z.mant.set(x.mant);
				z.exp = x.exp;
			}
		}
		$s = -1; return z;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Float.ptr.prototype.Copy }; } $f.x = x; $f.z = z; $f.$s = $s; $f.$r = $r; return $f;
	};
	Float.prototype.Copy = function(x) { return this.$val.Copy(x); };
	msb32 = function(x) {
		var _1, i, x;
		i = x.$length - 1 >> 0;
		if (i < 0) {
			return 0;
		}
		if (false && (((((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i]) & 2147483648) >>> 0) === 0)) {
			$panic(new $String("x not normalized"));
		}
		_1 = 32;
		if (_1 === (32)) {
			return ((((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i]) >>> 0));
		} else if (_1 === (64)) {
			return ((0 >>> 0));
		}
		$panic(new $String("unreachable"));
	};
	msb64 = function(x) {
		var _1, i, v, x, x$1, x$2, x$3, x$4, x$5;
		i = x.$length - 1 >> 0;
		if (i < 0) {
			return new $Uint64(0, 0);
		}
		if (false && (((((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i]) & 2147483648) >>> 0) === 0)) {
			$panic(new $String("x not normalized"));
		}
		_1 = 32;
		if (_1 === (32)) {
			v = $shiftLeft64(((x$1 = ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i]), new $Uint64(0, x$1.constructor === Number ? x$1 : 1))), 32);
			if (i > 0) {
				v = (x$2 = ((x$3 = (x$4 = i - 1 >> 0, ((x$4 < 0 || x$4 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + x$4])), new $Uint64(0, x$3.constructor === Number ? x$3 : 1))), new $Uint64(v.$high | x$2.$high, (v.$low | x$2.$low) >>> 0));
			}
			return v;
		} else if (_1 === (64)) {
			return ((x$5 = ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i]), new $Uint64(0, x$5.constructor === Number ? x$5 : 1)));
		}
		$panic(new $String("unreachable"));
	};
	Float.ptr.prototype.Uint64 = function() {
		var _1, u, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; u = $f.u; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		x = this;
		/* */ if (false) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (false) { */ case 1:
			$r = x.validate(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 2:
		_1 = x.form;
		if (_1 === (1)) {
			if (x.neg) {
				$s = -1; return [new $Uint64(0, 0), 1];
			}
			if (x.exp <= 0) {
				$s = -1; return [new $Uint64(0, 0), -1];
			}
			if (x.exp <= 64) {
				u = $shiftRightUint64(msb64(x.mant), ((64 - ((x.exp >>> 0)) >>> 0)));
				if (x.MinPrec() <= 64) {
					$s = -1; return [u, 0];
				}
				$s = -1; return [u, -1];
			}
			$s = -1; return [new $Uint64(4294967295, 4294967295), -1];
		} else if (_1 === (0)) {
			$s = -1; return [new $Uint64(0, 0), 0];
		} else if (_1 === (2)) {
			if (x.neg) {
				$s = -1; return [new $Uint64(0, 0), 1];
			}
			$s = -1; return [new $Uint64(4294967295, 4294967295), -1];
		}
		$panic(new $String("unreachable"));
		$s = -1; return [new $Uint64(0, 0), 0];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Float.ptr.prototype.Uint64 }; } $f._1 = _1; $f.u = u; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Float.prototype.Uint64 = function() { return this.$val.Uint64(); };
	Float.ptr.prototype.Int64 = function() {
		var _1, acc, i, x, x$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; acc = $f.acc; i = $f.i; x = $f.x; x$1 = $f.x$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		x = this;
		/* */ if (false) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (false) { */ case 1:
			$r = x.validate(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 2:
		_1 = x.form;
		if (_1 === (1)) {
			acc = makeAcc(x.neg);
			if (x.exp <= 0) {
				$s = -1; return [new $Int64(0, 0), acc];
			}
			if (x.exp <= 63) {
				i = ((x$1 = $shiftRightUint64(msb64(x.mant), ((64 - ((x.exp >>> 0)) >>> 0))), new $Int64(x$1.$high, x$1.$low)));
				if (x.neg) {
					i = new $Int64(-i.$high, -i.$low);
				}
				if (x.MinPrec() <= ((x.exp >>> 0))) {
					$s = -1; return [i, 0];
				}
				$s = -1; return [i, acc];
			}
			if (x.neg) {
				if ((x.exp === 64) && (x.MinPrec() === 1)) {
					acc = 0;
				}
				$s = -1; return [new $Int64(-2147483648, 0), acc];
			}
			$s = -1; return [new $Int64(2147483647, 4294967295), -1];
		} else if (_1 === (0)) {
			$s = -1; return [new $Int64(0, 0), 0];
		} else if (_1 === (2)) {
			if (x.neg) {
				$s = -1; return [new $Int64(-2147483648, 0), 1];
			}
			$s = -1; return [new $Int64(2147483647, 4294967295), -1];
		}
		$panic(new $String("unreachable"));
		$s = -1; return [new $Int64(0, 0), 0];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Float.ptr.prototype.Int64 }; } $f._1 = _1; $f.acc = acc; $f.i = i; $f.x = x; $f.x$1 = x$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	Float.prototype.Int64 = function() { return this.$val.Int64(); };
	Float.ptr.prototype.Float32 = function() {
		var _1, _r$3, _tmp, _tmp$1, _tmp$2, bexp, e, mant, p, r, sign, x, y, z, z$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _r$3 = $f._r$3; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; bexp = $f.bexp; e = $f.e; mant = $f.mant; p = $f.p; r = $f.r; sign = $f.sign; x = $f.x; y = $f.y; z = $f.z; z$1 = $f.z$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		x = this;
		/* */ if (false) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (false) { */ case 1:
			$r = x.validate(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 2:
			_1 = x.form;
			/* */ if (_1 === (1)) { $s = 5; continue; }
			/* */ if (_1 === (0)) { $s = 6; continue; }
			/* */ if (_1 === (2)) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if (_1 === (1)) { */ case 5:
				e = x.exp - 1 >> 0;
				p = 24;
				if (e < -126) {
					p = 150 + ((e >> 0)) >> 0;
					if (p < 0 || (p === 0) && (x.mant.sticky((((x.mant.$length >>> 0)) * 32 >>> 0) - 1 >>> 0) === 0)) {
						if (x.neg) {
							z = 0;
							$s = -1; return [-z, 1];
						}
						$s = -1; return [0, -1];
					}
					if (p === 0) {
						if (x.neg) {
							$s = -1; return [-1.401298464324817e-45, -1];
						}
						$s = -1; return [1.401298464324817e-45, 1];
					}
				}
				r = new Float.ptr(0, 0, 0, 0, false, nat.nil, 0);
				r.prec = ((p >>> 0));
				_r$3 = r.Set(x); /* */ $s = 9; case 9: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				_r$3;
				e = r.exp - 1 >> 0;
				if ((r.form === 2) || e > 127) {
					if (x.neg) {
						$s = -1; return [($fround(math.Inf(-1))), -1];
					}
					$s = -1; return [($fround(math.Inf(1))), 1];
				}
				_tmp = 0;
				_tmp$1 = 0;
				_tmp$2 = 0;
				sign = _tmp;
				bexp = _tmp$1;
				mant = _tmp$2;
				if (x.neg) {
					sign = 2147483648;
				}
				if (e < -126) {
					p = 150 + ((e >> 0)) >> 0;
					mant = (y = (((32 - p >> 0) >>> 0)), y < 32 ? (msb32(r.mant) >>> y) : 0) >>> 0;
				} else {
					bexp = (((e + 127 >> 0) >>> 0)) << 23 >>> 0;
					mant = ((msb32(r.mant) >>> 8 >>> 0) & 8388607) >>> 0;
				}
				$s = -1; return [math.Float32frombits((((sign | bexp) >>> 0) | mant) >>> 0), r.acc];
			/* } else if (_1 === (0)) { */ case 6:
				if (x.neg) {
					z$1 = 0;
					$s = -1; return [-z$1, 0];
				}
				$s = -1; return [0, 0];
			/* } else if (_1 === (2)) { */ case 7:
				if (x.neg) {
					$s = -1; return [($fround(math.Inf(-1))), 0];
				}
				$s = -1; return [($fround(math.Inf(1))), 0];
			/* } */ case 8:
		case 4:
		$panic(new $String("unreachable"));
		$s = -1; return [0, 0];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Float.ptr.prototype.Float32 }; } $f._1 = _1; $f._r$3 = _r$3; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f.bexp = bexp; $f.e = e; $f.mant = mant; $f.p = p; $f.r = r; $f.sign = sign; $f.x = x; $f.y = y; $f.z = z; $f.z$1 = z$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	Float.prototype.Float32 = function() { return this.$val.Float32(); };
	Float.ptr.prototype.Float64 = function() {
		var _1, _r$3, _tmp, _tmp$1, _tmp$2, bexp, e, mant, p, r, sign, x, x$1, x$2, z, z$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _r$3 = $f._r$3; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; bexp = $f.bexp; e = $f.e; mant = $f.mant; p = $f.p; r = $f.r; sign = $f.sign; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; z = $f.z; z$1 = $f.z$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		x = this;
		/* */ if (false) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (false) { */ case 1:
			$r = x.validate(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 2:
			_1 = x.form;
			/* */ if (_1 === (1)) { $s = 5; continue; }
			/* */ if (_1 === (0)) { $s = 6; continue; }
			/* */ if (_1 === (2)) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if (_1 === (1)) { */ case 5:
				e = x.exp - 1 >> 0;
				p = 53;
				if (e < -1022) {
					p = 1075 + ((e >> 0)) >> 0;
					if (p < 0 || (p === 0) && (x.mant.sticky((((x.mant.$length >>> 0)) * 32 >>> 0) - 1 >>> 0) === 0)) {
						if (x.neg) {
							z = 0;
							$s = -1; return [-z, 1];
						}
						$s = -1; return [0, -1];
					}
					if (p === 0) {
						if (x.neg) {
							$s = -1; return [-5e-324, -1];
						}
						$s = -1; return [5e-324, 1];
					}
				}
				r = new Float.ptr(0, 0, 0, 0, false, nat.nil, 0);
				r.prec = ((p >>> 0));
				_r$3 = r.Set(x); /* */ $s = 9; case 9: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				_r$3;
				e = r.exp - 1 >> 0;
				if ((r.form === 2) || e > 1023) {
					if (x.neg) {
						$s = -1; return [math.Inf(-1), -1];
					}
					$s = -1; return [math.Inf(1), 1];
				}
				_tmp = new $Uint64(0, 0);
				_tmp$1 = new $Uint64(0, 0);
				_tmp$2 = new $Uint64(0, 0);
				sign = _tmp;
				bexp = _tmp$1;
				mant = _tmp$2;
				if (x.neg) {
					sign = new $Uint64(2147483648, 0);
				}
				if (e < -1022) {
					p = 1075 + ((e >> 0)) >> 0;
					mant = $shiftRightUint64(msb64(r.mant), (((64 - p >> 0) >>> 0)));
				} else {
					bexp = $shiftLeft64((new $Uint64(0, (e + 1023 >> 0))), 52);
					mant = (x$1 = $shiftRightUint64(msb64(r.mant), 11), new $Uint64(x$1.$high & 1048575, (x$1.$low & 4294967295) >>> 0));
				}
				$s = -1; return [math.Float64frombits((x$2 = new $Uint64(sign.$high | bexp.$high, (sign.$low | bexp.$low) >>> 0), new $Uint64(x$2.$high | mant.$high, (x$2.$low | mant.$low) >>> 0))), r.acc];
			/* } else if (_1 === (0)) { */ case 6:
				if (x.neg) {
					z$1 = 0;
					$s = -1; return [-z$1, 0];
				}
				$s = -1; return [0, 0];
			/* } else if (_1 === (2)) { */ case 7:
				if (x.neg) {
					$s = -1; return [math.Inf(-1), 0];
				}
				$s = -1; return [math.Inf(1), 0];
			/* } */ case 8:
		case 4:
		$panic(new $String("unreachable"));
		$s = -1; return [0, 0];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Float.ptr.prototype.Float64 }; } $f._1 = _1; $f._r$3 = _r$3; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f.bexp = bexp; $f.e = e; $f.mant = mant; $f.p = p; $f.r = r; $f.sign = sign; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.z = z; $f.z$1 = z$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	Float.prototype.Float64 = function() { return this.$val.Float64(); };
	Float.ptr.prototype.Int = function(z) {
		var _1, acc, allBits, exp, x, z, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; acc = $f.acc; allBits = $f.allBits; exp = $f.exp; x = $f.x; z = $f.z; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		x = this;
		/* */ if (false) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (false) { */ case 1:
			$r = x.validate(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 2:
		if (z === ptrType$1.nil && x.form <= 1) {
			z = new Int.ptr(false, nat.nil);
		}
		_1 = x.form;
		if (_1 === (1)) {
			acc = makeAcc(x.neg);
			if (x.exp <= 0) {
				$s = -1; return [z.SetInt64(new $Int64(0, 0)), acc];
			}
			allBits = ((x.mant.$length >>> 0)) * 32 >>> 0;
			exp = ((x.exp >>> 0));
			if (x.MinPrec() <= exp) {
				acc = 0;
			}
			if (z === ptrType$1.nil) {
				z = new Int.ptr(false, nat.nil);
			}
			z.neg = x.neg;
			if (exp > allBits) {
				z.abs = z.abs.shl(x.mant, exp - allBits >>> 0);
			} else if (exp < allBits) {
				z.abs = z.abs.shr(x.mant, allBits - exp >>> 0);
			} else {
				z.abs = z.abs.set(x.mant);
			}
			$s = -1; return [z, acc];
		} else if (_1 === (0)) {
			$s = -1; return [z.SetInt64(new $Int64(0, 0)), 0];
		} else if (_1 === (2)) {
			$s = -1; return [ptrType$1.nil, makeAcc(x.neg)];
		}
		$panic(new $String("unreachable"));
		$s = -1; return [ptrType$1.nil, 0];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Float.ptr.prototype.Int }; } $f._1 = _1; $f.acc = acc; $f.allBits = allBits; $f.exp = exp; $f.x = x; $f.z = z; $f.$s = $s; $f.$r = $r; return $f;
	};
	Float.prototype.Int = function(z) { return this.$val.Int(z); };
	Float.ptr.prototype.Rat = function(z) {
		var _1, _r$3, allBits, t, x, z, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _r$3 = $f._r$3; allBits = $f.allBits; t = $f.t; x = $f.x; z = $f.z; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		x = this;
		/* */ if (false) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (false) { */ case 1:
			$r = x.validate(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 2:
		if (z === ptrType$2.nil && x.form <= 1) {
			z = new Rat.ptr(new Int.ptr(false, nat.nil), new Int.ptr(false, nat.nil));
		}
			_1 = x.form;
			/* */ if (_1 === (1)) { $s = 5; continue; }
			/* */ if (_1 === (0)) { $s = 6; continue; }
			/* */ if (_1 === (2)) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if (_1 === (1)) { */ case 5:
				allBits = $imul(((x.mant.$length >> 0)), 32);
				z.a.neg = x.neg;
					/* */ if (x.exp > allBits) { $s = 10; continue; }
					/* */ if (x.exp < allBits) { $s = 11; continue; }
					/* */ $s = 12; continue;
					/* if (x.exp > allBits) { */ case 10:
						z.a.abs = z.a.abs.shl(x.mant, (((x.exp - allBits >> 0) >>> 0)));
						z.b.abs = $subslice(z.b.abs, 0, 0);
						$s = 13; continue;
					/* } else if (x.exp < allBits) { */ case 11:
						z.a.abs = z.a.abs.set(x.mant);
						t = z.b.abs.setUint64(new $Uint64(0, 1));
						z.b.abs = t.shl(t, (((allBits - x.exp >> 0) >>> 0)));
						_r$3 = z.norm(); /* */ $s = 14; case 14: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
						_r$3;
						$s = 13; continue;
					/* } else { */ case 12:
						z.a.abs = z.a.abs.set(x.mant);
						z.b.abs = $subslice(z.b.abs, 0, 0);
					/* } */ case 13:
				case 9:
				$s = -1; return [z, 0];
			/* } else if (_1 === (0)) { */ case 6:
				$s = -1; return [z.SetInt64(new $Int64(0, 0)), 0];
			/* } else if (_1 === (2)) { */ case 7:
				$s = -1; return [ptrType$2.nil, makeAcc(x.neg)];
			/* } */ case 8:
		case 4:
		$panic(new $String("unreachable"));
		$s = -1; return [ptrType$2.nil, 0];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Float.ptr.prototype.Rat }; } $f._1 = _1; $f._r$3 = _r$3; $f.allBits = allBits; $f.t = t; $f.x = x; $f.z = z; $f.$s = $s; $f.$r = $r; return $f;
	};
	Float.prototype.Rat = function(z) { return this.$val.Rat(z); };
	Float.ptr.prototype.Abs = function(x) {
		var _r$3, x, z, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$3 = $f._r$3; x = $f.x; z = $f.z; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		z = this;
		_r$3 = z.Set(x); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_r$3;
		z.neg = false;
		$s = -1; return z;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Float.ptr.prototype.Abs }; } $f._r$3 = _r$3; $f.x = x; $f.z = z; $f.$s = $s; $f.$r = $r; return $f;
	};
	Float.prototype.Abs = function(x) { return this.$val.Abs(x); };
	Float.ptr.prototype.Neg = function(x) {
		var _r$3, x, z, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$3 = $f._r$3; x = $f.x; z = $f.z; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		z = this;
		_r$3 = z.Set(x); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_r$3;
		z.neg = !z.neg;
		$s = -1; return z;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Float.ptr.prototype.Neg }; } $f._r$3 = _r$3; $f.x = x; $f.z = z; $f.$s = $s; $f.$r = $r; return $f;
	};
	Float.prototype.Neg = function(x) { return this.$val.Neg(x); };
	validateBinaryOperands = function(x, y) {
		var x, y;
		if (true) {
			$panic(new $String("validateBinaryOperands called but debugFloat is not set"));
		}
		if (x.mant.$length === 0) {
			$panic(new $String("empty mantissa for x"));
		}
		if (y.mant.$length === 0) {
			$panic(new $String("empty mantissa for y"));
		}
	};
	Float.ptr.prototype.uadd = function(x, y) {
		var al, ex, ey, t, t$1, x, x$1, x$2, x$3, x$4, x$5, x$6, x$7, y, z, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; al = $f.al; ex = $f.ex; ey = $f.ey; t = $f.t; t$1 = $f.t$1; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; x$6 = $f.x$6; x$7 = $f.x$7; y = $f.y; z = $f.z; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		z = this;
		if (false) {
			validateBinaryOperands(x, y);
		}
		ex = (x$1 = (new $Int64(0, x.exp)), x$2 = $mul64((new $Int64(0, x.mant.$length)), new $Int64(0, 32)), new $Int64(x$1.$high - x$2.$high, x$1.$low - x$2.$low));
		ey = (x$3 = (new $Int64(0, y.exp)), x$4 = $mul64((new $Int64(0, y.mant.$length)), new $Int64(0, 32)), new $Int64(x$3.$high - x$4.$high, x$3.$low - x$4.$low));
		al = alias(z.mant, x.mant) || alias(z.mant, y.mant);
		if ((ex.$high < ey.$high || (ex.$high === ey.$high && ex.$low < ey.$low))) {
			if (al) {
				t = (nat.nil).shl(y.mant, ((new $Int64(ey.$high - ex.$high, ey.$low - ex.$low).$low >>> 0)));
				z.mant = z.mant.add(x.mant, t);
			} else {
				z.mant = z.mant.shl(y.mant, ((new $Int64(ey.$high - ex.$high, ey.$low - ex.$low).$low >>> 0)));
				z.mant = z.mant.add(x.mant, z.mant);
			}
		} else if ((ex.$high > ey.$high || (ex.$high === ey.$high && ex.$low > ey.$low))) {
			if (al) {
				t$1 = (nat.nil).shl(x.mant, ((new $Int64(ex.$high - ey.$high, ex.$low - ey.$low).$low >>> 0)));
				z.mant = z.mant.add(t$1, y.mant);
			} else {
				z.mant = z.mant.shl(x.mant, ((new $Int64(ex.$high - ey.$high, ex.$low - ey.$low).$low >>> 0)));
				z.mant = z.mant.add(z.mant, y.mant);
			}
			ex = ey;
		} else {
			z.mant = z.mant.add(x.mant, y.mant);
		}
		$r = z.setExpAndRound((x$5 = (x$6 = $mul64((new $Int64(0, z.mant.$length)), new $Int64(0, 32)), new $Int64(ex.$high + x$6.$high, ex.$low + x$6.$low)), x$7 = fnorm(z.mant), new $Int64(x$5.$high - x$7.$high, x$5.$low - x$7.$low)), 0); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Float.ptr.prototype.uadd }; } $f.al = al; $f.ex = ex; $f.ey = ey; $f.t = t; $f.t$1 = t$1; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.x$6 = x$6; $f.x$7 = x$7; $f.y = y; $f.z = z; $f.$s = $s; $f.$r = $r; return $f;
	};
	Float.prototype.uadd = function(x, y) { return this.$val.uadd(x, y); };
	Float.ptr.prototype.usub = function(x, y) {
		var al, ex, ey, t, t$1, x, x$1, x$2, x$3, x$4, x$5, x$6, x$7, y, z, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; al = $f.al; ex = $f.ex; ey = $f.ey; t = $f.t; t$1 = $f.t$1; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; x$6 = $f.x$6; x$7 = $f.x$7; y = $f.y; z = $f.z; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		z = this;
		if (false) {
			validateBinaryOperands(x, y);
		}
		ex = (x$1 = (new $Int64(0, x.exp)), x$2 = $mul64((new $Int64(0, x.mant.$length)), new $Int64(0, 32)), new $Int64(x$1.$high - x$2.$high, x$1.$low - x$2.$low));
		ey = (x$3 = (new $Int64(0, y.exp)), x$4 = $mul64((new $Int64(0, y.mant.$length)), new $Int64(0, 32)), new $Int64(x$3.$high - x$4.$high, x$3.$low - x$4.$low));
		al = alias(z.mant, x.mant) || alias(z.mant, y.mant);
		if ((ex.$high < ey.$high || (ex.$high === ey.$high && ex.$low < ey.$low))) {
			if (al) {
				t = (nat.nil).shl(y.mant, ((new $Int64(ey.$high - ex.$high, ey.$low - ex.$low).$low >>> 0)));
				z.mant = t.sub(x.mant, t);
			} else {
				z.mant = z.mant.shl(y.mant, ((new $Int64(ey.$high - ex.$high, ey.$low - ex.$low).$low >>> 0)));
				z.mant = z.mant.sub(x.mant, z.mant);
			}
		} else if ((ex.$high > ey.$high || (ex.$high === ey.$high && ex.$low > ey.$low))) {
			if (al) {
				t$1 = (nat.nil).shl(x.mant, ((new $Int64(ex.$high - ey.$high, ex.$low - ey.$low).$low >>> 0)));
				z.mant = t$1.sub(t$1, y.mant);
			} else {
				z.mant = z.mant.shl(x.mant, ((new $Int64(ex.$high - ey.$high, ex.$low - ey.$low).$low >>> 0)));
				z.mant = z.mant.sub(z.mant, y.mant);
			}
			ex = ey;
		} else {
			z.mant = z.mant.sub(x.mant, y.mant);
		}
		if (z.mant.$length === 0) {
			z.acc = 0;
			z.form = 0;
			z.neg = false;
			$s = -1; return;
		}
		$r = z.setExpAndRound((x$5 = (x$6 = $mul64((new $Int64(0, z.mant.$length)), new $Int64(0, 32)), new $Int64(ex.$high + x$6.$high, ex.$low + x$6.$low)), x$7 = fnorm(z.mant), new $Int64(x$5.$high - x$7.$high, x$5.$low - x$7.$low)), 0); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Float.ptr.prototype.usub }; } $f.al = al; $f.ex = ex; $f.ey = ey; $f.t = t; $f.t$1 = t$1; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.x$6 = x$6; $f.x$7 = x$7; $f.y = y; $f.z = z; $f.$s = $s; $f.$r = $r; return $f;
	};
	Float.prototype.usub = function(x, y) { return this.$val.usub(x, y); };
	Float.ptr.prototype.umul = function(x, y) {
		var e, x, x$1, x$2, x$3, y, z, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; e = $f.e; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; y = $f.y; z = $f.z; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		z = this;
		if (false) {
			validateBinaryOperands(x, y);
		}
		e = (x$1 = (new $Int64(0, x.exp)), x$2 = (new $Int64(0, y.exp)), new $Int64(x$1.$high + x$2.$high, x$1.$low + x$2.$low));
		if (x === y) {
			z.mant = z.mant.sqr(x.mant);
		} else {
			z.mant = z.mant.mul(x.mant, y.mant);
		}
		$r = z.setExpAndRound((x$3 = fnorm(z.mant), new $Int64(e.$high - x$3.$high, e.$low - x$3.$low)), 0); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Float.ptr.prototype.umul }; } $f.e = e; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.y = y; $f.z = z; $f.$s = $s; $f.$r = $r; return $f;
	};
	Float.prototype.umul = function(x, y) { return this.$val.umul(x, y); };
	Float.ptr.prototype.uquo = function(x, y) {
		var _q, _r$3, _tuple, d, d$1, e, n, r, sbit, x, x$1, x$2, x$3, x$4, x$5, xadj, y, z, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _q = $f._q; _r$3 = $f._r$3; _tuple = $f._tuple; d = $f.d; d$1 = $f.d$1; e = $f.e; n = $f.n; r = $f.r; sbit = $f.sbit; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; xadj = $f.xadj; y = $f.y; z = $f.z; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		z = this;
		if (false) {
			validateBinaryOperands(x, y);
		}
		n = (((_q = z.prec / 32, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero")) >> 0)) + 1 >> 0;
		xadj = x.mant;
		d = (n - x.mant.$length >> 0) + y.mant.$length >> 0;
		if (d > 0) {
			xadj = $makeSlice(nat, (x.mant.$length + d >> 0));
			$copySlice($subslice(xadj, d), x.mant);
		}
		d$1 = xadj.$length - y.mant.$length >> 0;
		r = nat.nil;
		_r$3 = z.mant.div(nat.nil, xadj, y.mant); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_tuple = _r$3;
		z.mant = _tuple[0];
		r = _tuple[1];
		e = (x$1 = (x$2 = (new $Int64(0, x.exp)), x$3 = (new $Int64(0, y.exp)), new $Int64(x$2.$high - x$3.$high, x$2.$low - x$3.$low)), x$4 = $mul64((new $Int64(0, (d$1 - z.mant.$length >> 0))), new $Int64(0, 32)), new $Int64(x$1.$high - x$4.$high, x$1.$low - x$4.$low));
		sbit = 0;
		if (r.$length > 0) {
			sbit = 1;
		}
		$r = z.setExpAndRound((x$5 = fnorm(z.mant), new $Int64(e.$high - x$5.$high, e.$low - x$5.$low)), sbit); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Float.ptr.prototype.uquo }; } $f._q = _q; $f._r$3 = _r$3; $f._tuple = _tuple; $f.d = d; $f.d$1 = d$1; $f.e = e; $f.n = n; $f.r = r; $f.sbit = sbit; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.xadj = xadj; $f.y = y; $f.z = z; $f.$s = $s; $f.$r = $r; return $f;
	};
	Float.prototype.uquo = function(x, y) { return this.$val.uquo(x, y); };
	Float.ptr.prototype.ucmp = function(y) {
		var _tmp, _tmp$1, i, j, x, x$1, x$2, xm, y, ym;
		x = this;
		if (false) {
			validateBinaryOperands(x, y);
		}
		if (x.exp < y.exp) {
			return -1;
		} else if (x.exp > y.exp) {
			return 1;
		}
		i = x.mant.$length;
		j = y.mant.$length;
		while (true) {
			if (!(i > 0 || j > 0)) { break; }
			_tmp = 0;
			_tmp$1 = 0;
			xm = _tmp;
			ym = _tmp$1;
			if (i > 0) {
				i = i - (1) >> 0;
				xm = (x$1 = x.mant, ((i < 0 || i >= x$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + i]));
			}
			if (j > 0) {
				j = j - (1) >> 0;
				ym = (x$2 = y.mant, ((j < 0 || j >= x$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + j]));
			}
			if (xm < ym) {
				return -1;
			} else if (xm > ym) {
				return 1;
			}
		}
		return 0;
	};
	Float.prototype.ucmp = function(y) { return this.$val.ucmp(y); };
	Float.ptr.prototype.Add = function(x, y) {
		var _r$3, _r$4, x, x$1, y, yneg, z, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$3 = $f._r$3; _r$4 = $f._r$4; x = $f.x; x$1 = $f.x$1; y = $f.y; yneg = $f.yneg; z = $f.z; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		z = this;
		/* */ if (false) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (false) { */ case 1:
			$r = x.validate(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = y.validate(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 2:
		if (z.prec === 0) {
			z.prec = umax32(x.prec, y.prec);
		}
		/* */ if ((x.form === 1) && (y.form === 1)) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if ((x.form === 1) && (y.form === 1)) { */ case 5:
			yneg = y.neg;
			z.neg = x.neg;
			/* */ if (x.neg === yneg) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if (x.neg === yneg) { */ case 7:
				$r = z.uadd(x, y); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 9; continue;
			/* } else { */ case 8:
				/* */ if (x.ucmp(y) > 0) { $s = 11; continue; }
				/* */ $s = 12; continue;
				/* if (x.ucmp(y) > 0) { */ case 11:
					$r = z.usub(x, y); /* */ $s = 14; case 14: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$s = 13; continue;
				/* } else { */ case 12:
					z.neg = !z.neg;
					$r = z.usub(y, x); /* */ $s = 15; case 15: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 13:
			/* } */ case 9:
			$s = -1; return z;
		/* } */ case 6:
		if ((x.form === 2) && (y.form === 2) && !(x.neg === y.neg)) {
			z.acc = 0;
			z.form = 0;
			z.neg = false;
			$panic((x$1 = new ErrNaN.ptr("addition of infinities with opposite signs"), new x$1.constructor.elem(x$1)));
		}
		if ((x.form === 0) && (y.form === 0)) {
			z.acc = 0;
			z.form = 0;
			z.neg = x.neg && y.neg;
			$s = -1; return z;
		}
		/* */ if ((x.form === 2) || (y.form === 0)) { $s = 16; continue; }
		/* */ $s = 17; continue;
		/* if ((x.form === 2) || (y.form === 0)) { */ case 16:
			_r$3 = z.Set(x); /* */ $s = 18; case 18: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			$s = -1; return _r$3;
		/* } */ case 17:
		_r$4 = z.Set(y); /* */ $s = 19; case 19: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		$s = -1; return _r$4;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Float.ptr.prototype.Add }; } $f._r$3 = _r$3; $f._r$4 = _r$4; $f.x = x; $f.x$1 = x$1; $f.y = y; $f.yneg = yneg; $f.z = z; $f.$s = $s; $f.$r = $r; return $f;
	};
	Float.prototype.Add = function(x, y) { return this.$val.Add(x, y); };
	Float.ptr.prototype.Sub = function(x, y) {
		var _r$3, _r$4, x, x$1, y, yneg, z, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$3 = $f._r$3; _r$4 = $f._r$4; x = $f.x; x$1 = $f.x$1; y = $f.y; yneg = $f.yneg; z = $f.z; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		z = this;
		/* */ if (false) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (false) { */ case 1:
			$r = x.validate(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = y.validate(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 2:
		if (z.prec === 0) {
			z.prec = umax32(x.prec, y.prec);
		}
		/* */ if ((x.form === 1) && (y.form === 1)) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if ((x.form === 1) && (y.form === 1)) { */ case 5:
			yneg = y.neg;
			z.neg = x.neg;
			/* */ if (!(x.neg === yneg)) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if (!(x.neg === yneg)) { */ case 7:
				$r = z.uadd(x, y); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 9; continue;
			/* } else { */ case 8:
				/* */ if (x.ucmp(y) > 0) { $s = 11; continue; }
				/* */ $s = 12; continue;
				/* if (x.ucmp(y) > 0) { */ case 11:
					$r = z.usub(x, y); /* */ $s = 14; case 14: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$s = 13; continue;
				/* } else { */ case 12:
					z.neg = !z.neg;
					$r = z.usub(y, x); /* */ $s = 15; case 15: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 13:
			/* } */ case 9:
			$s = -1; return z;
		/* } */ case 6:
		if ((x.form === 2) && (y.form === 2) && x.neg === y.neg) {
			z.acc = 0;
			z.form = 0;
			z.neg = false;
			$panic((x$1 = new ErrNaN.ptr("subtraction of infinities with equal signs"), new x$1.constructor.elem(x$1)));
		}
		if ((x.form === 0) && (y.form === 0)) {
			z.acc = 0;
			z.form = 0;
			z.neg = x.neg && !y.neg;
			$s = -1; return z;
		}
		/* */ if ((x.form === 2) || (y.form === 0)) { $s = 16; continue; }
		/* */ $s = 17; continue;
		/* if ((x.form === 2) || (y.form === 0)) { */ case 16:
			_r$3 = z.Set(x); /* */ $s = 18; case 18: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			$s = -1; return _r$3;
		/* } */ case 17:
		_r$4 = z.Neg(y); /* */ $s = 19; case 19: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		$s = -1; return _r$4;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Float.ptr.prototype.Sub }; } $f._r$3 = _r$3; $f._r$4 = _r$4; $f.x = x; $f.x$1 = x$1; $f.y = y; $f.yneg = yneg; $f.z = z; $f.$s = $s; $f.$r = $r; return $f;
	};
	Float.prototype.Sub = function(x, y) { return this.$val.Sub(x, y); };
	Float.ptr.prototype.Mul = function(x, y) {
		var x, x$1, y, z, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; x = $f.x; x$1 = $f.x$1; y = $f.y; z = $f.z; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		z = this;
		/* */ if (false) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (false) { */ case 1:
			$r = x.validate(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = y.validate(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 2:
		if (z.prec === 0) {
			z.prec = umax32(x.prec, y.prec);
		}
		z.neg = !(x.neg === y.neg);
		/* */ if ((x.form === 1) && (y.form === 1)) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if ((x.form === 1) && (y.form === 1)) { */ case 5:
			$r = z.umul(x, y); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = -1; return z;
		/* } */ case 6:
		z.acc = 0;
		if ((x.form === 0) && (y.form === 2) || (x.form === 2) && (y.form === 0)) {
			z.form = 0;
			z.neg = false;
			$panic((x$1 = new ErrNaN.ptr("multiplication of zero with infinity"), new x$1.constructor.elem(x$1)));
		}
		if ((x.form === 2) || (y.form === 2)) {
			z.form = 2;
			$s = -1; return z;
		}
		z.form = 0;
		$s = -1; return z;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Float.ptr.prototype.Mul }; } $f.x = x; $f.x$1 = x$1; $f.y = y; $f.z = z; $f.$s = $s; $f.$r = $r; return $f;
	};
	Float.prototype.Mul = function(x, y) { return this.$val.Mul(x, y); };
	Float.ptr.prototype.Quo = function(x, y) {
		var x, x$1, y, z, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; x = $f.x; x$1 = $f.x$1; y = $f.y; z = $f.z; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		z = this;
		/* */ if (false) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (false) { */ case 1:
			$r = x.validate(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = y.validate(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 2:
		if (z.prec === 0) {
			z.prec = umax32(x.prec, y.prec);
		}
		z.neg = !(x.neg === y.neg);
		/* */ if ((x.form === 1) && (y.form === 1)) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if ((x.form === 1) && (y.form === 1)) { */ case 5:
			$r = z.uquo(x, y); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = -1; return z;
		/* } */ case 6:
		z.acc = 0;
		if ((x.form === 0) && (y.form === 0) || (x.form === 2) && (y.form === 2)) {
			z.form = 0;
			z.neg = false;
			$panic((x$1 = new ErrNaN.ptr("division of zero by zero or infinity by infinity"), new x$1.constructor.elem(x$1)));
		}
		if ((x.form === 0) || (y.form === 2)) {
			z.form = 0;
			$s = -1; return z;
		}
		z.form = 2;
		$s = -1; return z;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Float.ptr.prototype.Quo }; } $f.x = x; $f.x$1 = x$1; $f.y = y; $f.z = z; $f.$s = $s; $f.$r = $r; return $f;
	};
	Float.prototype.Quo = function(x, y) { return this.$val.Quo(x, y); };
	Float.ptr.prototype.Cmp = function(y) {
		var _1, mx, my, x, y, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; mx = $f.mx; my = $f.my; x = $f.x; y = $f.y; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		x = this;
		/* */ if (false) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (false) { */ case 1:
			$r = x.validate(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = y.validate(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 2:
		mx = x.ord();
		my = y.ord();
		if (mx < my) {
			$s = -1; return -1;
		} else if (mx > my) {
			$s = -1; return 1;
		}
		_1 = mx;
		if (_1 === (-1)) {
			$s = -1; return y.ucmp(x);
		} else if (_1 === (1)) {
			$s = -1; return x.ucmp(y);
		}
		$s = -1; return 0;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Float.ptr.prototype.Cmp }; } $f._1 = _1; $f.mx = mx; $f.my = my; $f.x = x; $f.y = y; $f.$s = $s; $f.$r = $r; return $f;
	};
	Float.prototype.Cmp = function(y) { return this.$val.Cmp(y); };
	Float.ptr.prototype.ord = function() {
		var _1, m, x;
		x = this;
		m = 0;
		_1 = x.form;
		if (_1 === (1)) {
			m = 1;
		} else if (_1 === (0)) {
			return 0;
		} else if (_1 === (2)) {
			m = 2;
		}
		if (x.neg) {
			m = -m;
		}
		return m;
	};
	Float.prototype.ord = function() { return this.$val.ord(); };
	umax32 = function(x, y) {
		var x, y;
		if (x > y) {
			return x;
		}
		return y;
	};
	Float.ptr.prototype.SetString = function(s) {
		var _r$3, _tuple, err, f, s, z, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$3 = $f._r$3; _tuple = $f._tuple; err = $f.err; f = $f.f; s = $f.s; z = $f.z; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		z = this;
		_r$3 = z.Parse(s, 0); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_tuple = _r$3;
		f = _tuple[0];
		err = _tuple[2];
		if ($interfaceIsEqual(err, $ifaceNil)) {
			$s = -1; return [f, true];
		}
		$s = -1; return [ptrType.nil, false];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Float.ptr.prototype.SetString }; } $f._r$3 = _r$3; $f._tuple = _tuple; $f.err = err; $f.f = f; $f.s = s; $f.z = z; $f.$s = $s; $f.$r = $r; return $f;
	};
	Float.prototype.SetString = function(s) { return this.$val.SetString(s); };
	Float.ptr.prototype.scan = function(r, base) {
		var _1, _2, _arg, _arg$1, _arg$2, _arg$3, _r$10, _r$11, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _tuple, _tuple$1, _tuple$2, b, base, d, ebase, err, exp, exp2, exp5, f, fcount, p, prec, r, x, x$1, x$2, x$3, x$4, x$5, x$6, x$7, x$8, z, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _2 = $f._2; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _arg$3 = $f._arg$3; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; b = $f.b; base = $f.base; d = $f.d; ebase = $f.ebase; err = $f.err; exp = $f.exp; exp2 = $f.exp2; exp5 = $f.exp5; f = $f.f; fcount = $f.fcount; p = $f.p; prec = $f.prec; r = $f.r; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; x$6 = $f.x$6; x$7 = $f.x$7; x$8 = $f.x$8; z = $f.z; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		f = ptrType.nil;
		b = 0;
		err = $ifaceNil;
		z = this;
		prec = z.prec;
		if (prec === 0) {
			prec = 64;
		}
		z.form = 0;
		_r$3 = scanSign(r); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_tuple = _r$3;
		z.neg = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [f, b, err];
		}
		fcount = 0;
		_r$4 = z.mant.scan(r, base, true); /* */ $s = 2; case 2: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		_tuple$1 = _r$4;
		z.mant = _tuple$1[0];
		b = _tuple$1[1];
		fcount = _tuple$1[2];
		err = _tuple$1[3];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [f, b, err];
		}
		exp = new $Int64(0, 0);
		ebase = 0;
		_r$5 = scanExponent(r, true); /* */ $s = 3; case 3: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		_tuple$2 = _r$5;
		exp = _tuple$2[0];
		ebase = _tuple$2[1];
		err = _tuple$2[2];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [f, b, err];
		}
		if (z.mant.$length === 0) {
			z.prec = prec;
			z.acc = 0;
			z.form = 0;
			f = z;
			$s = -1; return [f, b, err];
		}
		exp2 = (x = $mul64((new $Int64(0, z.mant.$length)), new $Int64(0, 32)), x$1 = fnorm(z.mant), new $Int64(x.$high - x$1.$high, x.$low - x$1.$low));
		exp5 = new $Int64(0, 0);
		if (fcount < 0) {
			d = (new $Int64(0, fcount));
			_1 = b;
			if (_1 === (10)) {
				exp5 = d;
				exp2 = (x$2 = d, new $Int64(exp2.$high + x$2.$high, exp2.$low + x$2.$low));
			} else if (_1 === (2)) {
				exp2 = (x$3 = d, new $Int64(exp2.$high + x$3.$high, exp2.$low + x$3.$low));
			} else if (_1 === (16)) {
				exp2 = (x$4 = $mul64(d, new $Int64(0, 4)), new $Int64(exp2.$high + x$4.$high, exp2.$low + x$4.$low));
			} else {
				$panic(new $String("unexpected mantissa base"));
			}
		}
		_2 = ebase;
		if (_2 === (10)) {
			exp5 = (x$5 = exp, new $Int64(exp5.$high + x$5.$high, exp5.$low + x$5.$low));
			exp2 = (x$6 = exp, new $Int64(exp2.$high + x$6.$high, exp2.$low + x$6.$low));
		} else if (_2 === (2)) {
			exp2 = (x$7 = exp, new $Int64(exp2.$high + x$7.$high, exp2.$low + x$7.$low));
		} else {
			$panic(new $String("unexpected exponent base"));
		}
		/* */ if ((-1 < exp2.$high || (-1 === exp2.$high && 2147483648 <= exp2.$low)) && (exp2.$high < 0 || (exp2.$high === 0 && exp2.$low <= 2147483647))) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if ((-1 < exp2.$high || (-1 === exp2.$high && 2147483648 <= exp2.$low)) && (exp2.$high < 0 || (exp2.$high === 0 && exp2.$low <= 2147483647))) { */ case 4:
			z.prec = prec;
			z.form = 1;
			z.exp = (((exp2.$low + ((exp2.$high >> 31) * 4294967296)) >> 0));
			f = z;
			$s = 6; continue;
		/* } else { */ case 5:
			_r$6 = fmt.Errorf("exponent overflow", new sliceType([])); /* */ $s = 7; case 7: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
			err = _r$6;
			$s = -1; return [f, b, err];
		/* } */ case 6:
		/* */ if ((exp5.$high === 0 && exp5.$low === 0)) { $s = 8; continue; }
		/* */ $s = 9; continue;
		/* if ((exp5.$high === 0 && exp5.$low === 0)) { */ case 8:
			$r = z.round(0); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = -1; return [f, b, err];
		/* } */ case 9:
		_r$7 = new Float.ptr(0, 0, 0, 0, false, nat.nil, 0).SetPrec(z.Prec() + 64 >>> 0); /* */ $s = 11; case 11: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
		p = _r$7;
		/* */ if ((exp5.$high < 0 || (exp5.$high === 0 && exp5.$low < 0))) { $s = 12; continue; }
		/* */ $s = 13; continue;
		/* if ((exp5.$high < 0 || (exp5.$high === 0 && exp5.$low < 0))) { */ case 12:
			_arg = z;
			_r$8 = p.pow5(((x$8 = new $Int64(-exp5.$high, -exp5.$low), new $Uint64(x$8.$high, x$8.$low)))); /* */ $s = 15; case 15: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
			_arg$1 = _r$8;
			_r$9 = z.Quo(_arg, _arg$1); /* */ $s = 16; case 16: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
			_r$9;
			$s = 14; continue;
		/* } else { */ case 13:
			_arg$2 = z;
			_r$10 = p.pow5((new $Uint64(exp5.$high, exp5.$low))); /* */ $s = 17; case 17: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
			_arg$3 = _r$10;
			_r$11 = z.Mul(_arg$2, _arg$3); /* */ $s = 18; case 18: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
			_r$11;
		/* } */ case 14:
		$s = -1; return [f, b, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Float.ptr.prototype.scan }; } $f._1 = _1; $f._2 = _2; $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._arg$3 = _arg$3; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f.b = b; $f.base = base; $f.d = d; $f.ebase = ebase; $f.err = err; $f.exp = exp; $f.exp2 = exp2; $f.exp5 = exp5; $f.f = f; $f.fcount = fcount; $f.p = p; $f.prec = prec; $f.r = r; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.x$6 = x$6; $f.x$7 = x$7; $f.x$8 = x$8; $f.z = z; $f.$s = $s; $f.$r = $r; return $f;
	};
	Float.prototype.scan = function(r, base) { return this.$val.scan(r, base); };
	Float.ptr.prototype.pow5 = function(n) {
		var _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, f, n, x, x$1, z, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; f = $f.f; n = $f.n; x = $f.x; x$1 = $f.x$1; z = $f.z; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		z = this;
		/* */ if ((n.$high < 0 || (n.$high === 0 && n.$low <= 27))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if ((n.$high < 0 || (n.$high === 0 && n.$low <= 27))) { */ case 1:
			_r$3 = z.SetUint64((($flatten64(n) < 0 || $flatten64(n) >= pow5tab.length) ? ($throwRuntimeError("index out of range"), undefined) : pow5tab[$flatten64(n)])); /* */ $s = 3; case 3: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			$s = -1; return _r$3;
		/* } */ case 2:
		_r$4 = z.SetUint64(pow5tab[27]); /* */ $s = 4; case 4: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		_r$4;
		n = (x = new $Uint64(0, 27), new $Uint64(n.$high - x.$high, n.$low - x.$low));
		_r$5 = new Float.ptr(0, 0, 0, 0, false, nat.nil, 0).SetPrec(z.Prec() + 64 >>> 0); /* */ $s = 5; case 5: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		_r$6 = _r$5.SetUint64(new $Uint64(0, 5)); /* */ $s = 6; case 6: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
		f = _r$6;
		/* while (true) { */ case 7:
			/* if (!((n.$high > 0 || (n.$high === 0 && n.$low > 0)))) { break; } */ if(!((n.$high > 0 || (n.$high === 0 && n.$low > 0)))) { $s = 8; continue; }
			/* */ if (!((x$1 = new $Uint64(n.$high & 0, (n.$low & 1) >>> 0), (x$1.$high === 0 && x$1.$low === 0)))) { $s = 9; continue; }
			/* */ $s = 10; continue;
			/* if (!((x$1 = new $Uint64(n.$high & 0, (n.$low & 1) >>> 0), (x$1.$high === 0 && x$1.$low === 0)))) { */ case 9:
				_r$7 = z.Mul(z, f); /* */ $s = 11; case 11: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
				_r$7;
			/* } */ case 10:
			_r$8 = f.Mul(f, f); /* */ $s = 12; case 12: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
			_r$8;
			n = $shiftRightUint64(n, (1));
		/* } */ $s = 7; continue; case 8:
		$s = -1; return z;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Float.ptr.prototype.pow5 }; } $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f.f = f; $f.n = n; $f.x = x; $f.x$1 = x$1; $f.z = z; $f.$s = $s; $f.$r = $r; return $f;
	};
	Float.prototype.pow5 = function(n) { return this.$val.pow5(n); };
	Float.ptr.prototype.Parse = function(s, base) {
		var _r$3, _r$4, _tuple, _tuple$1, b, base, ch, err, err2, f, r, s, z, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$3 = $f._r$3; _r$4 = $f._r$4; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; b = $f.b; base = $f.base; ch = $f.ch; err = $f.err; err2 = $f.err2; f = $f.f; r = $f.r; s = $f.s; z = $f.z; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		f = ptrType.nil;
		b = 0;
		err = $ifaceNil;
		z = this;
		if ((s.length === 3) && (s === "Inf" || s === "inf")) {
			f = z.SetInf(false);
			$s = -1; return [f, b, err];
		}
		if ((s.length === 4) && ((s.charCodeAt(0) === 43) || (s.charCodeAt(0) === 45)) && ($substring(s, 1) === "Inf" || $substring(s, 1) === "inf")) {
			f = z.SetInf(s.charCodeAt(0) === 45);
			$s = -1; return [f, b, err];
		}
		r = strings.NewReader(s);
		_r$3 = z.scan(r, base); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_tuple = _r$3;
		f = _tuple[0];
		b = _tuple[1];
		err = _tuple[2];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [f, b, err];
		}
		_tuple$1 = r.ReadByte();
		ch = _tuple$1[0];
		err2 = _tuple$1[1];
		/* */ if ($interfaceIsEqual(err2, $ifaceNil)) { $s = 2; continue; }
		/* */ if (!($interfaceIsEqual(err2, io.EOF))) { $s = 3; continue; }
		/* */ $s = 4; continue;
		/* if ($interfaceIsEqual(err2, $ifaceNil)) { */ case 2:
			_r$4 = fmt.Errorf("expected end of string, found %q", new sliceType([new $Uint8(ch)])); /* */ $s = 5; case 5: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			err = _r$4;
			$s = 4; continue;
		/* } else if (!($interfaceIsEqual(err2, io.EOF))) { */ case 3:
			err = err2;
		/* } */ case 4:
		$s = -1; return [f, b, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Float.ptr.prototype.Parse }; } $f._r$3 = _r$3; $f._r$4 = _r$4; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.b = b; $f.base = base; $f.ch = ch; $f.err = err; $f.err2 = err2; $f.f = f; $f.r = r; $f.s = s; $f.z = z; $f.$s = $s; $f.$r = $r; return $f;
	};
	Float.prototype.Parse = function(s, base) { return this.$val.Parse(s, base); };
	Float.ptr.prototype.Scan = function(s, ch) {
		var _r$3, _tuple, ch, err, s, x, z, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$3 = $f._r$3; _tuple = $f._tuple; ch = $f.ch; err = $f.err; s = $f.s; x = $f.x; z = $f.z; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		z = this;
		$r = s.SkipSpace(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_r$3 = z.scan((x = new byteReader.ptr(s), new x.constructor.elem(x)), 0); /* */ $s = 2; case 2: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_tuple = _r$3;
		err = _tuple[2];
		$s = -1; return err;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Float.ptr.prototype.Scan }; } $f._r$3 = _r$3; $f._tuple = _tuple; $f.ch = ch; $f.err = err; $f.s = s; $f.x = x; $f.z = z; $f.$s = $s; $f.$r = $r; return $f;
	};
	Float.prototype.Scan = function(s, ch) { return this.$val.Scan(s, ch); };
	Float.ptr.prototype.GobEncode = function() {
		var _q, b, buf, n, sz, x;
		x = this;
		if (x === ptrType.nil) {
			return [sliceType$1.nil, $ifaceNil];
		}
		sz = 6;
		n = 0;
		if (x.form === 1) {
			n = (((_q = ((x.prec + 31 >>> 0)) / 32, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero")) >> 0));
			if (x.mant.$length < n) {
				n = x.mant.$length;
			}
			sz = sz + ((4 + ($imul(n, 4)) >> 0)) >> 0;
		}
		buf = $makeSlice(sliceType$1, sz);
		(0 >= buf.$length ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + 0] = 1);
		b = ((((((((x.mode & 7) >>> 0) << 24 >>> 24)) << 5 << 24 >>> 24) | ((((((x.acc + 1 << 24 >> 24)) & 3) << 24 >>> 24)) << 3 << 24 >>> 24)) >>> 0) | (((((x.form & 3) >>> 0) << 24 >>> 24)) << 1 << 24 >>> 24)) >>> 0;
		if (x.neg) {
			b = (b | (1)) >>> 0;
		}
		(1 >= buf.$length ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + 1] = b);
		$clone(binary.BigEndian, binary.bigEndian).PutUint32($subslice(buf, 2), x.prec);
		if (x.form === 1) {
			$clone(binary.BigEndian, binary.bigEndian).PutUint32($subslice(buf, 6), ((x.exp >>> 0)));
			$subslice(x.mant, (x.mant.$length - n >> 0)).bytes($subslice(buf, 10));
		}
		return [buf, $ifaceNil];
	};
	Float.prototype.GobEncode = function() { return this.$val.GobEncode(); };
	Float.ptr.prototype.GobDecode = function(buf) {
		var _r$3, _r$4, b, buf, oldMode, oldPrec, z, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$3 = $f._r$3; _r$4 = $f._r$4; b = $f.b; buf = $f.buf; oldMode = $f.oldMode; oldPrec = $f.oldPrec; z = $f.z; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		z = this;
		if (buf.$length === 0) {
			Float.copy(z, new Float.ptr(0, 0, 0, 0, false, nat.nil, 0));
			$s = -1; return $ifaceNil;
		}
		/* */ if (!(((0 >= buf.$length ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + 0]) === 1))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!(((0 >= buf.$length ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + 0]) === 1))) { */ case 1:
			_r$3 = fmt.Errorf("Float.GobDecode: encoding version %d not supported", new sliceType([new $Uint8((0 >= buf.$length ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + 0]))])); /* */ $s = 3; case 3: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			$s = -1; return _r$3;
		/* } */ case 2:
		oldPrec = z.prec;
		oldMode = z.mode;
		b = (1 >= buf.$length ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + 1]);
		z.mode = ((((((b >>> 5 << 24 >>> 24)) & 7) >>> 0) << 24 >>> 24));
		z.acc = ((((((b >>> 3 << 24 >>> 24)) & 3) >>> 0) << 24 >> 24)) - 1 << 24 >> 24;
		z.form = ((((((b >>> 1 << 24 >>> 24)) & 3) >>> 0) << 24 >>> 24));
		z.neg = !((((b & 1) >>> 0) === 0));
		z.prec = $clone(binary.BigEndian, binary.bigEndian).Uint32($subslice(buf, 2));
		if (z.form === 1) {
			z.exp = (($clone(binary.BigEndian, binary.bigEndian).Uint32($subslice(buf, 6)) >> 0));
			z.mant = z.mant.setBytes($subslice(buf, 10));
		}
		/* */ if (!((oldPrec === 0))) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (!((oldPrec === 0))) { */ case 4:
			z.mode = oldMode;
			_r$4 = z.SetPrec(((oldPrec >>> 0))); /* */ $s = 6; case 6: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			_r$4;
		/* } */ case 5:
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Float.ptr.prototype.GobDecode }; } $f._r$3 = _r$3; $f._r$4 = _r$4; $f.b = b; $f.buf = buf; $f.oldMode = oldMode; $f.oldPrec = oldPrec; $f.z = z; $f.$s = $s; $f.$r = $r; return $f;
	};
	Float.prototype.GobDecode = function(buf) { return this.$val.GobDecode(buf); };
	Float.ptr.prototype.MarshalText = function() {
		var _r$3, _tmp, _tmp$1, _tmp$2, _tmp$3, buf, err, text, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$3 = $f._r$3; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; buf = $f.buf; err = $f.err; text = $f.text; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		text = sliceType$1.nil;
		err = $ifaceNil;
		x = this;
		if (x === ptrType.nil) {
			_tmp = (new sliceType$1($stringToBytes("<nil>")));
			_tmp$1 = $ifaceNil;
			text = _tmp;
			err = _tmp$1;
			$s = -1; return [text, err];
		}
		buf = sliceType$1.nil;
		_r$3 = x.Append(buf, 103, -1); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_tmp$2 = _r$3;
		_tmp$3 = $ifaceNil;
		text = _tmp$2;
		err = _tmp$3;
		$s = -1; return [text, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Float.ptr.prototype.MarshalText }; } $f._r$3 = _r$3; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f.buf = buf; $f.err = err; $f.text = text; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Float.prototype.MarshalText = function() { return this.$val.MarshalText(); };
	Float.ptr.prototype.UnmarshalText = function(text) {
		var _r$3, _r$4, _tuple, err, text, z, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$3 = $f._r$3; _r$4 = $f._r$4; _tuple = $f._tuple; err = $f.err; text = $f.text; z = $f.z; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		z = this;
		_r$3 = z.Parse(($bytesToString(text)), 0); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_tuple = _r$3;
		err = _tuple[2];
		/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 2:
			_r$4 = fmt.Errorf("math/big: cannot unmarshal %q into a *big.Float (%v)", new sliceType([text, err])); /* */ $s = 4; case 4: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			err = _r$4;
		/* } */ case 3:
		$s = -1; return err;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Float.ptr.prototype.UnmarshalText }; } $f._r$3 = _r$3; $f._r$4 = _r$4; $f._tuple = _tuple; $f.err = err; $f.text = text; $f.z = z; $f.$s = $s; $f.$r = $r; return $f;
	};
	Float.prototype.UnmarshalText = function(text) { return this.$val.UnmarshalText(text); };
	Float.ptr.prototype.Text = function(format, prec) {
		var _r$3, cap, format, prec, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$3 = $f._r$3; cap = $f.cap; format = $f.format; prec = $f.prec; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		x = this;
		cap = 10;
		if (prec > 0) {
			cap = cap + (prec) >> 0;
		}
		_r$3 = x.Append($makeSlice(sliceType$1, 0, cap), format, prec); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		$s = -1; return ($bytesToString(_r$3));
		/* */ } return; } if ($f === undefined) { $f = { $blk: Float.ptr.prototype.Text }; } $f._r$3 = _r$3; $f.cap = cap; $f.format = format; $f.prec = prec; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Float.prototype.Text = function(format, prec) { return this.$val.Text(format, prec); };
	Float.ptr.prototype.String = function() {
		var _r$3, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$3 = $f._r$3; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		x = this;
		_r$3 = x.Text(103, 10); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		$s = -1; return _r$3;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Float.ptr.prototype.String }; } $f._r$3 = _r$3; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Float.prototype.String = function() { return this.$val.String(); };
	Float.ptr.prototype.Append = function(buf, fmt$1, prec) {
		var _1, _2, _3, _4, _r$3, _r$4, buf, d, eprec, exp, fmt$1, prec, shortest, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _2 = $f._2; _3 = $f._3; _4 = $f._4; _r$3 = $f._r$3; _r$4 = $f._r$4; buf = $f.buf; d = $f.d; eprec = $f.eprec; exp = $f.exp; fmt$1 = $f.fmt$1; prec = $f.prec; shortest = $f.shortest; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		d = [d];
		x = this;
		if (x.neg) {
			buf = $append(buf, 45);
		}
		if (x.form === 2) {
			if (!x.neg) {
				buf = $append(buf, 43);
			}
			$s = -1; return $appendSlice(buf, "Inf");
		}
			_1 = fmt$1;
			/* */ if (_1 === (98)) { $s = 2; continue; }
			/* */ if (_1 === (112)) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (_1 === (98)) { */ case 2:
				_r$3 = x.fmtB(buf); /* */ $s = 5; case 5: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				$s = -1; return _r$3;
			/* } else if (_1 === (112)) { */ case 3:
				_r$4 = x.fmtP(buf); /* */ $s = 6; case 6: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				$s = -1; return _r$4;
			/* } */ case 4:
		case 1:
		d[0] = new decimal.ptr(sliceType$1.nil, 0);
		/* */ if (x.form === 1) { $s = 7; continue; }
		/* */ $s = 8; continue;
		/* if (x.form === 1) { */ case 7:
			$r = d[0].init(x.mant, ((x.exp >> 0)) - x.mant.bitLen() >> 0); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 8:
		shortest = false;
		/* */ if (prec < 0) { $s = 10; continue; }
		/* */ $s = 11; continue;
		/* if (prec < 0) { */ case 10:
			shortest = true;
			$r = roundShortest(d[0], x); /* */ $s = 13; case 13: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_2 = fmt$1;
			if ((_2 === (101)) || (_2 === (69))) {
				prec = d[0].mant.$length - 1 >> 0;
			} else if (_2 === (102)) {
				prec = max(d[0].mant.$length - d[0].exp >> 0, 0);
			} else if ((_2 === (103)) || (_2 === (71))) {
				prec = d[0].mant.$length;
			}
			$s = 12; continue;
		/* } else { */ case 11:
			_3 = fmt$1;
			if ((_3 === (101)) || (_3 === (69))) {
				d[0].round(1 + prec >> 0);
			} else if (_3 === (102)) {
				d[0].round(d[0].exp + prec >> 0);
			} else if ((_3 === (103)) || (_3 === (71))) {
				if (prec === 0) {
					prec = 1;
				}
				d[0].round(prec);
			}
		/* } */ case 12:
		_4 = fmt$1;
		if ((_4 === (101)) || (_4 === (69))) {
			$s = -1; return fmtE(buf, fmt$1, prec, $clone(d[0], decimal));
		} else if (_4 === (102)) {
			$s = -1; return fmtF(buf, prec, $clone(d[0], decimal));
		} else if ((_4 === (103)) || (_4 === (71))) {
			eprec = prec;
			if (eprec > d[0].mant.$length && d[0].mant.$length >= d[0].exp) {
				eprec = d[0].mant.$length;
			}
			if (shortest) {
				eprec = 6;
			}
			exp = d[0].exp - 1 >> 0;
			if (exp < -4 || exp >= eprec) {
				if (prec > d[0].mant.$length) {
					prec = d[0].mant.$length;
				}
				$s = -1; return fmtE(buf, (fmt$1 + 101 << 24 >>> 24) - 103 << 24 >>> 24, prec - 1 >> 0, $clone(d[0], decimal));
			}
			if (prec > d[0].exp) {
				prec = d[0].mant.$length;
			}
			$s = -1; return fmtF(buf, max(prec - d[0].exp >> 0, 0), $clone(d[0], decimal));
		}
		if (x.neg) {
			buf = $subslice(buf, 0, (buf.$length - 1 >> 0));
		}
		$s = -1; return $append(buf, 37, fmt$1);
		/* */ } return; } if ($f === undefined) { $f = { $blk: Float.ptr.prototype.Append }; } $f._1 = _1; $f._2 = _2; $f._3 = _3; $f._4 = _4; $f._r$3 = _r$3; $f._r$4 = _r$4; $f.buf = buf; $f.d = d; $f.eprec = eprec; $f.exp = exp; $f.fmt$1 = fmt$1; $f.prec = prec; $f.shortest = shortest; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Float.prototype.Append = function(buf, fmt$1, prec) { return this.$val.Append(buf, fmt$1, prec); };
	roundShortest = function(d, x) {
		var _i, _ref, d, exp, i, inclusive, l, lower, m, mant, okdown, okup, s, tmp, u, upper, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _ref = $f._ref; d = $f.d; exp = $f.exp; i = $f.i; inclusive = $f.inclusive; l = $f.l; lower = $f.lower; m = $f.m; mant = $f.mant; okdown = $f.okdown; okup = $f.okup; s = $f.s; tmp = $f.tmp; u = $f.u; upper = $f.upper; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		if (d.mant.$length === 0) {
			$s = -1; return;
		}
		mant = (nat.nil).set(x.mant);
		exp = ((x.exp >> 0)) - mant.bitLen() >> 0;
		s = mant.bitLen() - (((x.prec + 1 >>> 0) >> 0)) >> 0;
		if (s < 0) {
			mant = mant.shl(mant, ((-s >>> 0)));
		} else if (s > 0) {
			mant = mant.shr(mant, ((s >>> 0)));
		}
		exp = exp + (s) >> 0;
		lower = new decimal.ptr(sliceType$1.nil, 0);
		tmp = nat.nil;
		$r = lower.init(tmp.sub(mant, natOne), exp); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		upper = new decimal.ptr(sliceType$1.nil, 0);
		$r = upper.init(tmp.add(mant, natOne), exp); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		inclusive = (((0 >= mant.$length ? ($throwRuntimeError("index out of range"), undefined) : mant.$array[mant.$offset + 0]) & 2) >>> 0) === 0;
		_ref = d.mant;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			m = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			l = lower.at(i);
			u = upper.at(i);
			okdown = !((l === m)) || inclusive && ((i + 1 >> 0) === lower.mant.$length);
			okup = !((m === u)) && (inclusive || (m + 1 << 24 >>> 24) < u || (i + 1 >> 0) < upper.mant.$length);
			if (okdown && okup) {
				d.round(i + 1 >> 0);
				$s = -1; return;
			} else if (okdown) {
				d.roundDown(i + 1 >> 0);
				$s = -1; return;
			} else if (okup) {
				d.roundUp(i + 1 >> 0);
				$s = -1; return;
			}
			_i++;
		}
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: roundShortest }; } $f._i = _i; $f._ref = _ref; $f.d = d; $f.exp = exp; $f.i = i; $f.inclusive = inclusive; $f.l = l; $f.lower = lower; $f.m = m; $f.mant = mant; $f.okdown = okdown; $f.okup = okup; $f.s = s; $f.tmp = tmp; $f.u = u; $f.upper = upper; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	fmtE = function(buf, fmt$1, prec, d) {
		var buf, ch, d, exp, fmt$1, i, m, prec, x, x$1;
		ch = 48;
		if (d.mant.$length > 0) {
			ch = (x = d.mant, (0 >= x.$length ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + 0]));
		}
		buf = $append(buf, ch);
		if (prec > 0) {
			buf = $append(buf, 46);
			i = 1;
			m = min(d.mant.$length, prec + 1 >> 0);
			if (i < m) {
				buf = $appendSlice(buf, $subslice(d.mant, i, m));
				i = m;
			}
			while (true) {
				if (!(i <= prec)) { break; }
				buf = $append(buf, 48);
				i = i + (1) >> 0;
			}
		}
		buf = $append(buf, fmt$1);
		exp = new $Int64(0, 0);
		if (d.mant.$length > 0) {
			exp = (x$1 = (new $Int64(0, d.exp)), new $Int64(x$1.$high - 0, x$1.$low - 1));
		}
		if ((exp.$high < 0 || (exp.$high === 0 && exp.$low < 0))) {
			ch = 45;
			exp = new $Int64(-exp.$high, -exp.$low);
		} else {
			ch = 43;
		}
		buf = $append(buf, ch);
		if ((exp.$high < 0 || (exp.$high === 0 && exp.$low < 10))) {
			buf = $append(buf, 48);
		}
		return strconv.AppendInt(buf, exp, 10);
	};
	fmtF = function(buf, prec, d) {
		var buf, d, i, m, prec;
		if (d.exp > 0) {
			m = min(d.mant.$length, d.exp);
			buf = $appendSlice(buf, $subslice(d.mant, 0, m));
			while (true) {
				if (!(m < d.exp)) { break; }
				buf = $append(buf, 48);
				m = m + (1) >> 0;
			}
		} else {
			buf = $append(buf, 48);
		}
		if (prec > 0) {
			buf = $append(buf, 46);
			i = 0;
			while (true) {
				if (!(i < prec)) { break; }
				buf = $append(buf, d.at(d.exp + i >> 0));
				i = i + (1) >> 0;
			}
		}
		return buf;
	};
	Float.ptr.prototype.fmtB = function(buf) {
		var _arg, _arg$1, _r$3, buf, e, m, w, x, x$1, x$2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _arg = $f._arg; _arg$1 = $f._arg$1; _r$3 = $f._r$3; buf = $f.buf; e = $f.e; m = $f.m; w = $f.w; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		x = this;
		if (x.form === 0) {
			$s = -1; return $append(buf, 48);
		}
		if (false && !((x.form === 1))) {
			$panic(new $String("non-finite float"));
		}
		m = x.mant;
		w = $imul(((x.mant.$length >>> 0)), 32) >>> 0;
		if (w < x.prec) {
			m = (nat.nil).shl(m, (((x.prec - w >>> 0) >>> 0)));
		} else if (w > x.prec) {
			m = (nat.nil).shr(m, (((w - x.prec >>> 0) >>> 0)));
		}
		_arg = buf;
		_r$3 = m.utoa(10); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_arg$1 = _r$3;
		buf = $appendSlice(_arg, _arg$1);
		buf = $append(buf, 112);
		e = (x$1 = (new $Int64(0, x.exp)), x$2 = (new $Int64(0, x.prec)), new $Int64(x$1.$high - x$2.$high, x$1.$low - x$2.$low));
		if ((e.$high > 0 || (e.$high === 0 && e.$low >= 0))) {
			buf = $append(buf, 43);
		}
		$s = -1; return strconv.AppendInt(buf, e, 10);
		/* */ } return; } if ($f === undefined) { $f = { $blk: Float.ptr.prototype.fmtB }; } $f._arg = _arg; $f._arg$1 = _arg$1; $f._r$3 = _r$3; $f.buf = buf; $f.e = e; $f.m = m; $f.w = w; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.$s = $s; $f.$r = $r; return $f;
	};
	Float.prototype.fmtB = function(buf) { return this.$val.fmtB(buf); };
	Float.ptr.prototype.fmtP = function(buf) {
		var _arg, _arg$1, _r$3, _r$4, buf, i, m, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _arg = $f._arg; _arg$1 = $f._arg$1; _r$3 = $f._r$3; _r$4 = $f._r$4; buf = $f.buf; i = $f.i; m = $f.m; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		x = this;
		if (x.form === 0) {
			$s = -1; return $append(buf, 48);
		}
		if (false && !((x.form === 1))) {
			$panic(new $String("non-finite float"));
		}
		m = x.mant;
		i = 0;
		while (true) {
			if (!(i < m.$length && (((i < 0 || i >= m.$length) ? ($throwRuntimeError("index out of range"), undefined) : m.$array[m.$offset + i]) === 0))) { break; }
			i = i + (1) >> 0;
		}
		m = $subslice(m, i);
		buf = $appendSlice(buf, "0x.");
		_arg = buf;
		_r$3 = m.utoa(16); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_r$4 = bytes.TrimRight(_r$3, "0"); /* */ $s = 2; case 2: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		_arg$1 = _r$4;
		buf = $appendSlice(_arg, _arg$1);
		buf = $append(buf, 112);
		if (x.exp >= 0) {
			buf = $append(buf, 43);
		}
		$s = -1; return strconv.AppendInt(buf, (new $Int64(0, x.exp)), 10);
		/* */ } return; } if ($f === undefined) { $f = { $blk: Float.ptr.prototype.fmtP }; } $f._arg = _arg; $f._arg$1 = _arg$1; $f._r$3 = _r$3; $f._r$4 = _r$4; $f.buf = buf; $f.i = i; $f.m = m; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Float.prototype.fmtP = function(buf) { return this.$val.fmtP(buf); };
	min = function(x, y) {
		var x, y;
		if (x < y) {
			return x;
		}
		return y;
	};
	Float.ptr.prototype.Format = function(s, format) {
		var _1, _arg, _arg$1, _arg$2, _r$10, _r$11, _r$12, _r$13, _r$14, _r$15, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _tuple, _tuple$1, buf, format, hasPrec, hasWidth, padding, prec, s, sign, width, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$12 = $f._r$12; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; buf = $f.buf; format = $f.format; hasPrec = $f.hasPrec; hasWidth = $f.hasWidth; padding = $f.padding; prec = $f.prec; s = $f.s; sign = $f.sign; width = $f.width; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		x = this;
		_r$3 = s.Precision(); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_tuple = _r$3;
		prec = _tuple[0];
		hasPrec = _tuple[1];
		if (!hasPrec) {
			prec = 6;
		}
			_1 = format;
			/* */ if ((_1 === (101)) || (_1 === (69)) || (_1 === (102)) || (_1 === (98)) || (_1 === (112))) { $s = 3; continue; }
			/* */ if (_1 === (70)) { $s = 4; continue; }
			/* */ if (_1 === (118)) { $s = 5; continue; }
			/* */ if ((_1 === (103)) || (_1 === (71))) { $s = 6; continue; }
			/* */ $s = 7; continue;
			/* if ((_1 === (101)) || (_1 === (69)) || (_1 === (102)) || (_1 === (98)) || (_1 === (112))) { */ case 3:
				$s = 8; continue;
			/* } else if (_1 === (70)) { */ case 4:
				format = 102;
				$s = 8; continue;
			/* } else if (_1 === (118)) { */ case 5:
				format = 103;
				if (!hasPrec) {
					prec = -1;
				}
				$s = 8; continue;
			/* } else if ((_1 === (103)) || (_1 === (71))) { */ case 6:
				if (!hasPrec) {
					prec = -1;
				}
				$s = 8; continue;
			/* } else { */ case 7:
				_arg = s;
				_arg$1 = new $Int32(format);
				_r$4 = x.String(); /* */ $s = 9; case 9: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				_arg$2 = new $String(_r$4);
				_r$5 = fmt.Fprintf(_arg, "%%!%c(*big.Float=%s)", new sliceType([_arg$1, _arg$2])); /* */ $s = 10; case 10: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
				_r$5;
				$s = -1; return;
			/* } */ case 8:
		case 2:
		buf = sliceType$1.nil;
		_r$6 = x.Append(buf, ((format << 24 >>> 24)), prec); /* */ $s = 11; case 11: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
		buf = _r$6;
		if (buf.$length === 0) {
			buf = (new sliceType$1($stringToBytes("?")));
		}
		sign = "";
			/* */ if (((0 >= buf.$length ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + 0]) === 45)) { $s = 13; continue; }
			/* */ if (((0 >= buf.$length ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + 0]) === 43)) { $s = 14; continue; }
			_r$7 = s.Flag(43); /* */ $s = 18; case 18: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
			/* */ if (_r$7) { $s = 15; continue; }
			_r$8 = s.Flag(32); /* */ $s = 19; case 19: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
			/* */ if (_r$8) { $s = 16; continue; }
			/* */ $s = 17; continue;
			/* if (((0 >= buf.$length ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + 0]) === 45)) { */ case 13:
				sign = "-";
				buf = $subslice(buf, 1);
				$s = 17; continue;
			/* } else if (((0 >= buf.$length ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + 0]) === 43)) { */ case 14:
				sign = "+";
				_r$9 = s.Flag(32); /* */ $s = 22; case 22: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
				/* */ if (_r$9) { $s = 20; continue; }
				/* */ $s = 21; continue;
				/* if (_r$9) { */ case 20:
					sign = " ";
				/* } */ case 21:
				buf = $subslice(buf, 1);
				$s = 17; continue;
			/* } else if (_r$7) { */ case 15:
				sign = "+";
				$s = 17; continue;
			/* } else if (_r$8) { */ case 16:
				sign = " ";
			/* } */ case 17:
		case 12:
		padding = 0;
		_r$10 = s.Width(); /* */ $s = 23; case 23: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
		_tuple$1 = _r$10;
		width = _tuple$1[0];
		hasWidth = _tuple$1[1];
		if (hasWidth && width > (sign.length + buf.$length >> 0)) {
			padding = (width - sign.length >> 0) - buf.$length >> 0;
		}
			_r$11 = s.Flag(48); /* */ $s = 29; case 29: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
			/* */ if (_r$11 && !x.IsInf()) { $s = 25; continue; }
			_r$12 = s.Flag(45); /* */ $s = 30; case 30: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }
			/* */ if (_r$12) { $s = 26; continue; }
			/* */ $s = 27; continue;
			/* if (_r$11 && !x.IsInf()) { */ case 25:
				$r = writeMultiple(s, sign, 1); /* */ $s = 31; case 31: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$r = writeMultiple(s, "0", padding); /* */ $s = 32; case 32: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				_r$13 = s.Write(buf); /* */ $s = 33; case 33: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
				_r$13;
				$s = 28; continue;
			/* } else if (_r$12) { */ case 26:
				$r = writeMultiple(s, sign, 1); /* */ $s = 34; case 34: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				_r$14 = s.Write(buf); /* */ $s = 35; case 35: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
				_r$14;
				$r = writeMultiple(s, " ", padding); /* */ $s = 36; case 36: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 28; continue;
			/* } else { */ case 27:
				$r = writeMultiple(s, " ", padding); /* */ $s = 37; case 37: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$r = writeMultiple(s, sign, 1); /* */ $s = 38; case 38: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				_r$15 = s.Write(buf); /* */ $s = 39; case 39: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
				_r$15;
			/* } */ case 28:
		case 24:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Float.ptr.prototype.Format }; } $f._1 = _1; $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$12 = _r$12; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.buf = buf; $f.format = format; $f.hasPrec = hasPrec; $f.hasWidth = hasWidth; $f.padding = padding; $f.prec = prec; $f.s = s; $f.sign = sign; $f.width = width; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Float.prototype.Format = function(s, format) { return this.$val.Format(s, format); };
	Int.ptr.prototype.Sign = function() {
		var x;
		x = this;
		if (x.abs.$length === 0) {
			return 0;
		}
		if (x.neg) {
			return -1;
		}
		return 1;
	};
	Int.prototype.Sign = function() { return this.$val.Sign(); };
	Int.ptr.prototype.SetInt64 = function(x) {
		var neg, x, z;
		z = this;
		neg = false;
		if ((x.$high < 0 || (x.$high === 0 && x.$low < 0))) {
			neg = true;
			x = new $Int64(-x.$high, -x.$low);
		}
		z.abs = z.abs.setUint64((new $Uint64(x.$high, x.$low)));
		z.neg = neg;
		return z;
	};
	Int.prototype.SetInt64 = function(x) { return this.$val.SetInt64(x); };
	Int.ptr.prototype.SetUint64 = function(x) {
		var x, z;
		z = this;
		z.abs = z.abs.setUint64(x);
		z.neg = false;
		return z;
	};
	Int.prototype.SetUint64 = function(x) { return this.$val.SetUint64(x); };
	NewInt = function(x) {
		var x;
		return new Int.ptr(false, nat.nil).SetInt64(x);
	};
	$pkg.NewInt = NewInt;
	Int.ptr.prototype.Set = function(x) {
		var x, z;
		z = this;
		if (!(z === x)) {
			z.abs = z.abs.set(x.abs);
			z.neg = x.neg;
		}
		return z;
	};
	Int.prototype.Set = function(x) { return this.$val.Set(x); };
	Int.ptr.prototype.Bits = function() {
		var x, x$1;
		x = this;
		return (x$1 = x.abs, $subslice(new sliceType$2(x$1.$array), x$1.$offset, x$1.$offset + x$1.$length));
	};
	Int.prototype.Bits = function() { return this.$val.Bits(); };
	Int.ptr.prototype.SetBits = function(abs) {
		var abs, z;
		z = this;
		z.abs = ($subslice(new nat(abs.$array), abs.$offset, abs.$offset + abs.$length)).norm();
		z.neg = false;
		return z;
	};
	Int.prototype.SetBits = function(abs) { return this.$val.SetBits(abs); };
	Int.ptr.prototype.Abs = function(x) {
		var x, z;
		z = this;
		z.Set(x);
		z.neg = false;
		return z;
	};
	Int.prototype.Abs = function(x) { return this.$val.Abs(x); };
	Int.ptr.prototype.Neg = function(x) {
		var x, z;
		z = this;
		z.Set(x);
		z.neg = z.abs.$length > 0 && !z.neg;
		return z;
	};
	Int.prototype.Neg = function(x) { return this.$val.Neg(x); };
	Int.ptr.prototype.Add = function(x, y) {
		var neg, x, y, z;
		z = this;
		neg = x.neg;
		if (x.neg === y.neg) {
			z.abs = z.abs.add(x.abs, y.abs);
		} else {
			if (x.abs.cmp(y.abs) >= 0) {
				z.abs = z.abs.sub(x.abs, y.abs);
			} else {
				neg = !neg;
				z.abs = z.abs.sub(y.abs, x.abs);
			}
		}
		z.neg = z.abs.$length > 0 && neg;
		return z;
	};
	Int.prototype.Add = function(x, y) { return this.$val.Add(x, y); };
	Int.ptr.prototype.Sub = function(x, y) {
		var neg, x, y, z;
		z = this;
		neg = x.neg;
		if (!(x.neg === y.neg)) {
			z.abs = z.abs.add(x.abs, y.abs);
		} else {
			if (x.abs.cmp(y.abs) >= 0) {
				z.abs = z.abs.sub(x.abs, y.abs);
			} else {
				neg = !neg;
				z.abs = z.abs.sub(y.abs, x.abs);
			}
		}
		z.neg = z.abs.$length > 0 && neg;
		return z;
	};
	Int.prototype.Sub = function(x, y) { return this.$val.Sub(x, y); };
	Int.ptr.prototype.Mul = function(x, y) {
		var x, y, z;
		z = this;
		if (x === y) {
			z.abs = z.abs.sqr(x.abs);
			z.neg = false;
			return z;
		}
		z.abs = z.abs.mul(x.abs, y.abs);
		z.neg = z.abs.$length > 0 && !(x.neg === y.neg);
		return z;
	};
	Int.prototype.Mul = function(x, y) { return this.$val.Mul(x, y); };
	Int.ptr.prototype.MulRange = function(a, b) {
		var _tmp, _tmp$1, a, b, neg, x, x$1, z;
		z = this;
		if ((a.$high > b.$high || (a.$high === b.$high && a.$low > b.$low))) {
			return z.SetInt64(new $Int64(0, 1));
		} else if ((a.$high < 0 || (a.$high === 0 && a.$low <= 0)) && (b.$high > 0 || (b.$high === 0 && b.$low >= 0))) {
			return z.SetInt64(new $Int64(0, 0));
		}
		neg = false;
		if ((a.$high < 0 || (a.$high === 0 && a.$low < 0))) {
			neg = (x = (x$1 = new $Int64(b.$high - a.$high, b.$low - a.$low), new $Int64(x$1.$high & 0, (x$1.$low & 1) >>> 0)), (x.$high === 0 && x.$low === 0));
			_tmp = new $Int64(-b.$high, -b.$low);
			_tmp$1 = new $Int64(-a.$high, -a.$low);
			a = _tmp;
			b = _tmp$1;
		}
		z.abs = z.abs.mulRange((new $Uint64(a.$high, a.$low)), (new $Uint64(b.$high, b.$low)));
		z.neg = neg;
		return z;
	};
	Int.prototype.MulRange = function(a, b) { return this.$val.MulRange(a, b); };
	Int.ptr.prototype.Binomial = function(n, k) {
		var _r$3, _tmp, _tmp$1, a, b, k, n, x, x$1, z, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$3 = $f._r$3; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; a = $f.a; b = $f.b; k = $f.k; n = $f.n; x = $f.x; x$1 = $f.x$1; z = $f.z; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		a = [a];
		b = [b];
		z = this;
		if ((x = $div64(n, new $Int64(0, 2), false), (x.$high < k.$high || (x.$high === k.$high && x.$low < k.$low))) && (k.$high < n.$high || (k.$high === n.$high && k.$low <= n.$low))) {
			k = new $Int64(n.$high - k.$high, n.$low - k.$low);
		}
		_tmp = new Int.ptr(false, nat.nil);
		_tmp$1 = new Int.ptr(false, nat.nil);
		a[0] = $clone(_tmp, Int);
		b[0] = $clone(_tmp$1, Int);
		a[0].MulRange((x$1 = new $Int64(n.$high - k.$high, n.$low - k.$low), new $Int64(x$1.$high + 0, x$1.$low + 1)), n);
		b[0].MulRange(new $Int64(0, 1), k);
		_r$3 = z.Quo(a[0], b[0]); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		$s = -1; return _r$3;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Int.ptr.prototype.Binomial }; } $f._r$3 = _r$3; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f.a = a; $f.b = b; $f.k = k; $f.n = n; $f.x = x; $f.x$1 = x$1; $f.z = z; $f.$s = $s; $f.$r = $r; return $f;
	};
	Int.prototype.Binomial = function(n, k) { return this.$val.Binomial(n, k); };
	Int.ptr.prototype.Quo = function(x, y) {
		var _r$3, _tuple, x, y, z, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$3 = $f._r$3; _tuple = $f._tuple; x = $f.x; y = $f.y; z = $f.z; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		z = this;
		_r$3 = z.abs.div(nat.nil, x.abs, y.abs); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_tuple = _r$3;
		z.abs = _tuple[0];
		z.neg = z.abs.$length > 0 && !(x.neg === y.neg);
		$s = -1; return z;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Int.ptr.prototype.Quo }; } $f._r$3 = _r$3; $f._tuple = _tuple; $f.x = x; $f.y = y; $f.z = z; $f.$s = $s; $f.$r = $r; return $f;
	};
	Int.prototype.Quo = function(x, y) { return this.$val.Quo(x, y); };
	Int.ptr.prototype.Rem = function(x, y) {
		var _r$3, _tuple, x, y, z, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$3 = $f._r$3; _tuple = $f._tuple; x = $f.x; y = $f.y; z = $f.z; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		z = this;
		_r$3 = (nat.nil).div(z.abs, x.abs, y.abs); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_tuple = _r$3;
		z.abs = _tuple[1];
		z.neg = z.abs.$length > 0 && x.neg;
		$s = -1; return z;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Int.ptr.prototype.Rem }; } $f._r$3 = _r$3; $f._tuple = _tuple; $f.x = x; $f.y = y; $f.z = z; $f.$s = $s; $f.$r = $r; return $f;
	};
	Int.prototype.Rem = function(x, y) { return this.$val.Rem(x, y); };
	Int.ptr.prototype.QuoRem = function(x, y, r) {
		var _r$3, _tmp, _tmp$1, _tuple, r, x, y, z, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$3 = $f._r$3; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tuple = $f._tuple; r = $f.r; x = $f.x; y = $f.y; z = $f.z; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		z = this;
		_r$3 = z.abs.div(r.abs, x.abs, y.abs); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_tuple = _r$3;
		z.abs = _tuple[0];
		r.abs = _tuple[1];
		_tmp = z.abs.$length > 0 && !(x.neg === y.neg);
		_tmp$1 = r.abs.$length > 0 && x.neg;
		z.neg = _tmp;
		r.neg = _tmp$1;
		$s = -1; return [z, r];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Int.ptr.prototype.QuoRem }; } $f._r$3 = _r$3; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tuple = _tuple; $f.r = r; $f.x = x; $f.y = y; $f.z = z; $f.$s = $s; $f.$r = $r; return $f;
	};
	Int.prototype.QuoRem = function(x, y, r) { return this.$val.QuoRem(x, y, r); };
	Int.ptr.prototype.Div = function(x, y) {
		var _r$3, r, x, y, y_neg, z, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$3 = $f._r$3; r = $f.r; x = $f.x; y = $f.y; y_neg = $f.y_neg; z = $f.z; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		r = [r];
		z = this;
		y_neg = y.neg;
		r[0] = new Int.ptr(false, nat.nil);
		_r$3 = z.QuoRem(x, y, r[0]); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_r$3;
		if (r[0].neg) {
			if (y_neg) {
				z.Add(z, intOne);
			} else {
				z.Sub(z, intOne);
			}
		}
		$s = -1; return z;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Int.ptr.prototype.Div }; } $f._r$3 = _r$3; $f.r = r; $f.x = x; $f.y = y; $f.y_neg = y_neg; $f.z = z; $f.$s = $s; $f.$r = $r; return $f;
	};
	Int.prototype.Div = function(x, y) { return this.$val.Div(x, y); };
	Int.ptr.prototype.Mod = function(x, y) {
		var _r$3, q, x, y, y0, z, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$3 = $f._r$3; q = $f.q; x = $f.x; y = $f.y; y0 = $f.y0; z = $f.z; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		z = this;
		y0 = y;
		if (z === y || alias(z.abs, y.abs)) {
			y0 = new Int.ptr(false, nat.nil).Set(y);
		}
		q = new Int.ptr(false, nat.nil);
		_r$3 = q.QuoRem(x, y, z); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_r$3;
		if (z.neg) {
			if (y0.neg) {
				z.Sub(z, y0);
			} else {
				z.Add(z, y0);
			}
		}
		$s = -1; return z;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Int.ptr.prototype.Mod }; } $f._r$3 = _r$3; $f.q = q; $f.x = x; $f.y = y; $f.y0 = y0; $f.z = z; $f.$s = $s; $f.$r = $r; return $f;
	};
	Int.prototype.Mod = function(x, y) { return this.$val.Mod(x, y); };
	Int.ptr.prototype.DivMod = function(x, y, m) {
		var _r$3, m, x, y, y0, z, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$3 = $f._r$3; m = $f.m; x = $f.x; y = $f.y; y0 = $f.y0; z = $f.z; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		z = this;
		y0 = y;
		if (z === y || alias(z.abs, y.abs)) {
			y0 = new Int.ptr(false, nat.nil).Set(y);
		}
		_r$3 = z.QuoRem(x, y, m); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_r$3;
		if (m.neg) {
			if (y0.neg) {
				z.Add(z, intOne);
				m.Sub(m, y0);
			} else {
				z.Sub(z, intOne);
				m.Add(m, y0);
			}
		}
		$s = -1; return [z, m];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Int.ptr.prototype.DivMod }; } $f._r$3 = _r$3; $f.m = m; $f.x = x; $f.y = y; $f.y0 = y0; $f.z = z; $f.$s = $s; $f.$r = $r; return $f;
	};
	Int.prototype.DivMod = function(x, y, m) { return this.$val.DivMod(x, y, m); };
	Int.ptr.prototype.Cmp = function(y) {
		var r, x, y;
		r = 0;
		x = this;
		if (x.neg === y.neg) {
			r = x.abs.cmp(y.abs);
			if (x.neg) {
				r = -r;
			}
		} else if (x.neg) {
			r = -1;
		} else {
			r = 1;
		}
		return r;
	};
	Int.prototype.Cmp = function(y) { return this.$val.Cmp(y); };
	Int.ptr.prototype.CmpAbs = function(y) {
		var x, y;
		x = this;
		return x.abs.cmp(y.abs);
	};
	Int.prototype.CmpAbs = function(y) { return this.$val.CmpAbs(y); };
	low32 = function(x) {
		var x;
		if (x.$length === 0) {
			return 0;
		}
		return (((0 >= x.$length ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + 0]) >>> 0));
	};
	low64 = function(x) {
		var v, x, x$1, x$2, x$3;
		if (x.$length === 0) {
			return new $Uint64(0, 0);
		}
		v = ((x$1 = (0 >= x.$length ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + 0]), new $Uint64(0, x$1.constructor === Number ? x$1 : 1)));
		if (true && x.$length > 1) {
			return (x$2 = $shiftLeft64(((x$3 = (1 >= x.$length ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + 1]), new $Uint64(0, x$3.constructor === Number ? x$3 : 1))), 32), new $Uint64(x$2.$high | v.$high, (x$2.$low | v.$low) >>> 0));
		}
		return v;
	};
	Int.ptr.prototype.Int64 = function() {
		var v, x, x$1;
		x = this;
		v = ((x$1 = low64(x.abs), new $Int64(x$1.$high, x$1.$low)));
		if (x.neg) {
			v = new $Int64(-v.$high, -v.$low);
		}
		return v;
	};
	Int.prototype.Int64 = function() { return this.$val.Int64(); };
	Int.ptr.prototype.Uint64 = function() {
		var x;
		x = this;
		return low64(x.abs);
	};
	Int.prototype.Uint64 = function() { return this.$val.Uint64(); };
	Int.ptr.prototype.IsInt64 = function() {
		var w, x, x$1, x$2;
		x = this;
		if (x.abs.$length <= 2) {
			w = ((x$1 = low64(x.abs), new $Int64(x$1.$high, x$1.$low)));
			return (w.$high > 0 || (w.$high === 0 && w.$low >= 0)) || x.neg && (x$2 = new $Int64(-w.$high, -w.$low), (w.$high === x$2.$high && w.$low === x$2.$low));
		}
		return false;
	};
	Int.prototype.IsInt64 = function() { return this.$val.IsInt64(); };
	Int.ptr.prototype.IsUint64 = function() {
		var x;
		x = this;
		return !x.neg && x.abs.$length <= 2;
	};
	Int.prototype.IsUint64 = function() { return this.$val.IsUint64(); };
	Int.ptr.prototype.SetString = function(s, base) {
		var _r$3, base, s, z, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$3 = $f._r$3; base = $f.base; s = $f.s; z = $f.z; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		z = this;
		_r$3 = z.setFromScanner(strings.NewReader(s), base); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		$s = -1; return _r$3;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Int.ptr.prototype.SetString }; } $f._r$3 = _r$3; $f.base = base; $f.s = s; $f.z = z; $f.$s = $s; $f.$r = $r; return $f;
	};
	Int.prototype.SetString = function(s, base) { return this.$val.SetString(s, base); };
	Int.ptr.prototype.setFromScanner = function(r, base) {
		var _r$3, _r$4, _tuple, _tuple$1, base, err, err$1, r, z, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$3 = $f._r$3; _r$4 = $f._r$4; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; base = $f.base; err = $f.err; err$1 = $f.err$1; r = $f.r; z = $f.z; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		z = this;
		_r$3 = z.scan(r, base); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_tuple = _r$3;
		err = _tuple[2];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [ptrType$1.nil, false];
		}
		_r$4 = r.ReadByte(); /* */ $s = 2; case 2: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		_tuple$1 = _r$4;
		err$1 = _tuple$1[1];
		if (!($interfaceIsEqual(err$1, io.EOF))) {
			$s = -1; return [ptrType$1.nil, false];
		}
		$s = -1; return [z, true];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Int.ptr.prototype.setFromScanner }; } $f._r$3 = _r$3; $f._r$4 = _r$4; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.base = base; $f.err = err; $f.err$1 = err$1; $f.r = r; $f.z = z; $f.$s = $s; $f.$r = $r; return $f;
	};
	Int.prototype.setFromScanner = function(r, base) { return this.$val.setFromScanner(r, base); };
	Int.ptr.prototype.SetBytes = function(buf) {
		var buf, z;
		z = this;
		z.abs = z.abs.setBytes(buf);
		z.neg = false;
		return z;
	};
	Int.prototype.SetBytes = function(buf) { return this.$val.SetBytes(buf); };
	Int.ptr.prototype.Bytes = function() {
		var buf, x;
		x = this;
		buf = $makeSlice(sliceType$1, ($imul(x.abs.$length, 4)));
		return $subslice(buf, x.abs.bytes(buf));
	};
	Int.prototype.Bytes = function() { return this.$val.Bytes(); };
	Int.ptr.prototype.BitLen = function() {
		var x;
		x = this;
		return x.abs.bitLen();
	};
	Int.prototype.BitLen = function() { return this.$val.BitLen(); };
	Int.ptr.prototype.Exp = function(x, y, m) {
		var _r$3, m, mWords, x, y, yWords, z, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$3 = $f._r$3; m = $f.m; mWords = $f.mWords; x = $f.x; y = $f.y; yWords = $f.yWords; z = $f.z; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		z = this;
		yWords = nat.nil;
		if (!y.neg) {
			yWords = y.abs;
		}
		mWords = nat.nil;
		if (!(m === ptrType$1.nil)) {
			mWords = m.abs;
		}
		_r$3 = z.abs.expNN(x.abs, yWords, mWords); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		z.abs = _r$3;
		z.neg = z.abs.$length > 0 && x.neg && yWords.$length > 0 && ((((0 >= yWords.$length ? ($throwRuntimeError("index out of range"), undefined) : yWords.$array[yWords.$offset + 0]) & 1) >>> 0) === 1);
		if (z.neg && mWords.$length > 0) {
			z.abs = z.abs.sub(mWords, z.abs);
			z.neg = false;
		}
		$s = -1; return z;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Int.ptr.prototype.Exp }; } $f._r$3 = _r$3; $f.m = m; $f.mWords = mWords; $f.x = x; $f.y = y; $f.yWords = yWords; $f.z = z; $f.$s = $s; $f.$r = $r; return $f;
	};
	Int.prototype.Exp = function(x, y, m) { return this.$val.Exp(x, y, m); };
	Int.ptr.prototype.GCD = function(x, y, a, b) {
		var A, B, X, _r$3, _r$4, _r$5, _tmp, _tmp$1, _tmp$2, _tuple, a, b, lastX, q, r, temp, x, y, z, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; A = $f.A; B = $f.B; X = $f.X; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tuple = $f._tuple; a = $f.a; b = $f.b; lastX = $f.lastX; q = $f.q; r = $f.r; temp = $f.temp; x = $f.x; y = $f.y; z = $f.z; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		z = this;
		if (a.Sign() <= 0 || b.Sign() <= 0) {
			z.SetInt64(new $Int64(0, 0));
			if (!(x === ptrType$1.nil)) {
				x.SetInt64(new $Int64(0, 0));
			}
			if (!(y === ptrType$1.nil)) {
				y.SetInt64(new $Int64(0, 0));
			}
			$s = -1; return z;
		}
		/* */ if (x === ptrType$1.nil && y === ptrType$1.nil) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (x === ptrType$1.nil && y === ptrType$1.nil) { */ case 1:
			_r$3 = z.lehmerGCD(a, b); /* */ $s = 3; case 3: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			$s = -1; return _r$3;
		/* } */ case 2:
		A = new Int.ptr(false, nat.nil).Set(a);
		B = new Int.ptr(false, nat.nil).Set(b);
		X = new Int.ptr(false, nat.nil);
		lastX = new Int.ptr(false, nat.nil).SetInt64(new $Int64(0, 1));
		q = new Int.ptr(false, nat.nil);
		temp = new Int.ptr(false, nat.nil);
		r = new Int.ptr(false, nat.nil);
		/* while (true) { */ case 4:
			/* if (!(B.abs.$length > 0)) { break; } */ if(!(B.abs.$length > 0)) { $s = 5; continue; }
			_r$4 = q.QuoRem(A, B, r); /* */ $s = 6; case 6: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			_tuple = _r$4;
			q = _tuple[0];
			r = _tuple[1];
			_tmp = B;
			_tmp$1 = r;
			_tmp$2 = A;
			A = _tmp;
			B = _tmp$1;
			r = _tmp$2;
			temp.Set(X);
			X.Mul(X, q);
			X.Sub(lastX, X);
			lastX.Set(temp);
		/* } */ $s = 4; continue; case 5:
		if (!(x === ptrType$1.nil)) {
			Int.copy(x, lastX);
		}
		/* */ if (!(y === ptrType$1.nil)) { $s = 7; continue; }
		/* */ $s = 8; continue;
		/* if (!(y === ptrType$1.nil)) { */ case 7:
			y.Mul(a, lastX);
			y.Sub(A, y);
			_r$5 = y.Div(y, b); /* */ $s = 9; case 9: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			_r$5;
		/* } */ case 8:
		Int.copy(z, A);
		$s = -1; return z;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Int.ptr.prototype.GCD }; } $f.A = A; $f.B = B; $f.X = X; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tuple = _tuple; $f.a = a; $f.b = b; $f.lastX = lastX; $f.q = q; $f.r = r; $f.temp = temp; $f.x = x; $f.y = y; $f.z = z; $f.$s = $s; $f.$r = $r; return $f;
	};
	Int.prototype.GCD = function(x, y, a, b) { return this.$val.GCD(x, y, a, b); };
	Int.ptr.prototype.lehmerGCD = function(a, b) {
		var A, B, _q, _r$3, _r$4, _r$5, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$15, _tmp$16, _tmp$17, _tmp$18, _tmp$19, _tmp$2, _tmp$20, _tmp$21, _tmp$22, _tmp$23, _tmp$24, _tmp$25, _tmp$26, _tmp$27, _tmp$28, _tmp$29, _tmp$3, _tmp$30, _tmp$31, _tmp$32, _tmp$33, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, a, a1, a1$1, a2, a2$1, b, even, h, m, n, q, r, s, t, u0, u1, u2, v0, v1, v2, w, x, x$1, x$10, x$11, x$12, x$13, x$14, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9, y, y$1, y$2, y$3, y$4, z, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; A = $f.A; B = $f.B; _q = $f._q; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$10 = $f._tmp$10; _tmp$11 = $f._tmp$11; _tmp$12 = $f._tmp$12; _tmp$13 = $f._tmp$13; _tmp$14 = $f._tmp$14; _tmp$15 = $f._tmp$15; _tmp$16 = $f._tmp$16; _tmp$17 = $f._tmp$17; _tmp$18 = $f._tmp$18; _tmp$19 = $f._tmp$19; _tmp$2 = $f._tmp$2; _tmp$20 = $f._tmp$20; _tmp$21 = $f._tmp$21; _tmp$22 = $f._tmp$22; _tmp$23 = $f._tmp$23; _tmp$24 = $f._tmp$24; _tmp$25 = $f._tmp$25; _tmp$26 = $f._tmp$26; _tmp$27 = $f._tmp$27; _tmp$28 = $f._tmp$28; _tmp$29 = $f._tmp$29; _tmp$3 = $f._tmp$3; _tmp$30 = $f._tmp$30; _tmp$31 = $f._tmp$31; _tmp$32 = $f._tmp$32; _tmp$33 = $f._tmp$33; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; _tmp$6 = $f._tmp$6; _tmp$7 = $f._tmp$7; _tmp$8 = $f._tmp$8; _tmp$9 = $f._tmp$9; a = $f.a; a1 = $f.a1; a1$1 = $f.a1$1; a2 = $f.a2; a2$1 = $f.a2$1; b = $f.b; even = $f.even; h = $f.h; m = $f.m; n = $f.n; q = $f.q; r = $f.r; s = $f.s; t = $f.t; u0 = $f.u0; u1 = $f.u1; u2 = $f.u2; v0 = $f.v0; v1 = $f.v1; v2 = $f.v2; w = $f.w; x = $f.x; x$1 = $f.x$1; x$10 = $f.x$10; x$11 = $f.x$11; x$12 = $f.x$12; x$13 = $f.x$13; x$14 = $f.x$14; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; x$6 = $f.x$6; x$7 = $f.x$7; x$8 = $f.x$8; x$9 = $f.x$9; y = $f.y; y$1 = $f.y$1; y$2 = $f.y$2; y$3 = $f.y$3; y$4 = $f.y$4; z = $f.z; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		z = this;
		if (a.abs.cmp(b.abs) < 0) {
			_tmp = b;
			_tmp$1 = a;
			a = _tmp;
			b = _tmp$1;
		}
		B = new Int.ptr(false, nat.nil).Set(b);
		A = z.Set(a);
		t = new Int.ptr(false, nat.nil);
		r = new Int.ptr(false, nat.nil);
		s = new Int.ptr(false, nat.nil);
		w = new Int.ptr(false, nat.nil);
		/* while (true) { */ case 1:
			/* if (!(B.abs.$length > 1)) { break; } */ if(!(B.abs.$length > 1)) { $s = 2; continue; }
			_tmp$2 = 0;
			_tmp$3 = 0;
			_tmp$4 = 0;
			_tmp$5 = 0;
			_tmp$6 = 0;
			_tmp$7 = 0;
			_tmp$8 = 0;
			_tmp$9 = 0;
			a1 = _tmp$2;
			a2 = _tmp$3;
			u0 = _tmp$4;
			u1 = _tmp$5;
			u2 = _tmp$6;
			v0 = _tmp$7;
			v1 = _tmp$8;
			v2 = _tmp$9;
			m = B.abs.$length;
			n = A.abs.$length;
			h = nlz((x = A.abs, x$1 = n - 1 >> 0, ((x$1 < 0 || x$1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + x$1])));
			a1 = ((((y = h, y < 32 ? ((x$2 = A.abs, x$3 = n - 1 >> 0, ((x$3 < 0 || x$3 >= x$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + x$3])) << y) : 0) >>> 0)) | (((y$1 = ((32 - h >>> 0)), y$1 < 32 ? ((x$4 = A.abs, x$5 = n - 2 >> 0, ((x$5 < 0 || x$5 >= x$4.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$4.$array[x$4.$offset + x$5])) >>> y$1) : 0) >>> 0))) >>> 0;
			if ((n === m)) {
				a2 = ((((y$2 = h, y$2 < 32 ? ((x$6 = B.abs, x$7 = n - 1 >> 0, ((x$7 < 0 || x$7 >= x$6.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$6.$array[x$6.$offset + x$7])) << y$2) : 0) >>> 0)) | (((y$3 = ((32 - h >>> 0)), y$3 < 32 ? ((x$8 = B.abs, x$9 = n - 2 >> 0, ((x$9 < 0 || x$9 >= x$8.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$8.$array[x$8.$offset + x$9])) >>> y$3) : 0) >>> 0))) >>> 0;
			} else if ((n === (m + 1 >> 0))) {
				a2 = ((y$4 = ((32 - h >>> 0)), y$4 < 32 ? ((x$10 = B.abs, x$11 = n - 2 >> 0, ((x$11 < 0 || x$11 >= x$10.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$10.$array[x$10.$offset + x$11])) >>> y$4) : 0) >>> 0);
			} else {
				a2 = 0;
			}
			even = false;
			_tmp$10 = 0;
			_tmp$11 = 1;
			_tmp$12 = 0;
			u0 = _tmp$10;
			u1 = _tmp$11;
			u2 = _tmp$12;
			_tmp$13 = 0;
			_tmp$14 = 0;
			_tmp$15 = 1;
			v0 = _tmp$13;
			v1 = _tmp$14;
			v2 = _tmp$15;
			while (true) {
				if (!(a2 >= v2 && (a1 - a2 >>> 0) >= (v1 + v2 >>> 0))) { break; }
				q = (_q = a1 / a2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero"));
				_tmp$16 = a2;
				_tmp$17 = a1 - ($imul(q, a2) >>> 0) >>> 0;
				a1 = _tmp$16;
				a2 = _tmp$17;
				_tmp$18 = u1;
				_tmp$19 = u2;
				_tmp$20 = u1 + ($imul(q, u2) >>> 0) >>> 0;
				u0 = _tmp$18;
				u1 = _tmp$19;
				u2 = _tmp$20;
				_tmp$21 = v1;
				_tmp$22 = v2;
				_tmp$23 = v1 + ($imul(q, v2) >>> 0) >>> 0;
				v0 = _tmp$21;
				v1 = _tmp$22;
				v2 = _tmp$23;
				even = !even;
			}
			/* */ if (!((v0 === 0))) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (!((v0 === 0))) { */ case 3:
				t.abs = t.abs.setWord(u0);
				s.abs = s.abs.setWord(v0);
				t.neg = !even;
				s.neg = even;
				t.Mul(A, t);
				s.Mul(B, s);
				r.abs = r.abs.setWord(u1);
				w.abs = w.abs.setWord(v1);
				r.neg = even;
				w.neg = !even;
				r.Mul(A, r);
				w.Mul(B, w);
				A.Add(t, s);
				B.Add(r, w);
				$s = 5; continue;
			/* } else { */ case 4:
				_r$3 = t.Rem(A, B); /* */ $s = 6; case 6: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				_r$3;
				_tmp$24 = B;
				_tmp$25 = t;
				_tmp$26 = A;
				A = _tmp$24;
				B = _tmp$25;
				t = _tmp$26;
			/* } */ case 5:
		/* } */ $s = 1; continue; case 2:
		/* */ if (B.abs.$length > 0) { $s = 7; continue; }
		/* */ $s = 8; continue;
		/* if (B.abs.$length > 0) { */ case 7:
			/* */ if (A.abs.$length > 1) { $s = 9; continue; }
			/* */ $s = 10; continue;
			/* if (A.abs.$length > 1) { */ case 9:
				_r$4 = t.Rem(A, B); /* */ $s = 11; case 11: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				_r$4;
				_tmp$27 = B;
				_tmp$28 = t;
				_tmp$29 = A;
				A = _tmp$27;
				B = _tmp$28;
				t = _tmp$29;
			/* } */ case 10:
			if (B.abs.$length > 0) {
				_tmp$30 = (x$12 = A.abs, (0 >= x$12.$length ? ($throwRuntimeError("index out of range"), undefined) : x$12.$array[x$12.$offset + 0]));
				_tmp$31 = (x$13 = B.abs, (0 >= x$13.$length ? ($throwRuntimeError("index out of range"), undefined) : x$13.$array[x$13.$offset + 0]));
				a1$1 = _tmp$30;
				a2$1 = _tmp$31;
				while (true) {
					if (!(!((a2$1 === 0)))) { break; }
					_tmp$32 = a2$1;
					_tmp$33 = (_r$5 = a1$1 % a2$1, _r$5 === _r$5 ? _r$5 : $throwRuntimeError("integer divide by zero"));
					a1$1 = _tmp$32;
					a2$1 = _tmp$33;
				}
				(x$14 = A.abs, (0 >= x$14.$length ? ($throwRuntimeError("index out of range"), undefined) : x$14.$array[x$14.$offset + 0] = a1$1));
			}
		/* } */ case 8:
		Int.copy(z, A);
		$s = -1; return z;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Int.ptr.prototype.lehmerGCD }; } $f.A = A; $f.B = B; $f._q = _q; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$10 = _tmp$10; $f._tmp$11 = _tmp$11; $f._tmp$12 = _tmp$12; $f._tmp$13 = _tmp$13; $f._tmp$14 = _tmp$14; $f._tmp$15 = _tmp$15; $f._tmp$16 = _tmp$16; $f._tmp$17 = _tmp$17; $f._tmp$18 = _tmp$18; $f._tmp$19 = _tmp$19; $f._tmp$2 = _tmp$2; $f._tmp$20 = _tmp$20; $f._tmp$21 = _tmp$21; $f._tmp$22 = _tmp$22; $f._tmp$23 = _tmp$23; $f._tmp$24 = _tmp$24; $f._tmp$25 = _tmp$25; $f._tmp$26 = _tmp$26; $f._tmp$27 = _tmp$27; $f._tmp$28 = _tmp$28; $f._tmp$29 = _tmp$29; $f._tmp$3 = _tmp$3; $f._tmp$30 = _tmp$30; $f._tmp$31 = _tmp$31; $f._tmp$32 = _tmp$32; $f._tmp$33 = _tmp$33; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f._tmp$6 = _tmp$6; $f._tmp$7 = _tmp$7; $f._tmp$8 = _tmp$8; $f._tmp$9 = _tmp$9; $f.a = a; $f.a1 = a1; $f.a1$1 = a1$1; $f.a2 = a2; $f.a2$1 = a2$1; $f.b = b; $f.even = even; $f.h = h; $f.m = m; $f.n = n; $f.q = q; $f.r = r; $f.s = s; $f.t = t; $f.u0 = u0; $f.u1 = u1; $f.u2 = u2; $f.v0 = v0; $f.v1 = v1; $f.v2 = v2; $f.w = w; $f.x = x; $f.x$1 = x$1; $f.x$10 = x$10; $f.x$11 = x$11; $f.x$12 = x$12; $f.x$13 = x$13; $f.x$14 = x$14; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.x$6 = x$6; $f.x$7 = x$7; $f.x$8 = x$8; $f.x$9 = x$9; $f.y = y; $f.y$1 = y$1; $f.y$2 = y$2; $f.y$3 = y$3; $f.y$4 = y$4; $f.z = z; $f.$s = $s; $f.$r = $r; return $f;
	};
	Int.prototype.lehmerGCD = function(a, b) { return this.$val.lehmerGCD(a, b); };
	Int.ptr.prototype.Rand = function(rnd, n) {
		var _r$3, n, rnd, z, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$3 = $f._r$3; n = $f.n; rnd = $f.rnd; z = $f.z; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		z = this;
		z.neg = false;
		if (n.neg || (n.abs.$length === 0)) {
			z.abs = nat.nil;
			$s = -1; return z;
		}
		_r$3 = z.abs.random(rnd, n.abs, n.abs.bitLen()); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		z.abs = _r$3;
		$s = -1; return z;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Int.ptr.prototype.Rand }; } $f._r$3 = _r$3; $f.n = n; $f.rnd = rnd; $f.z = z; $f.$s = $s; $f.$r = $r; return $f;
	};
	Int.prototype.Rand = function(rnd, n) { return this.$val.Rand(rnd, n); };
	Int.ptr.prototype.ModInverse = function(g, n) {
		var _r$3, _r$4, d, g, g2, n, z, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$3 = $f._r$3; _r$4 = $f._r$4; d = $f.d; g = $f.g; g2 = $f.g2; n = $f.n; z = $f.z; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		z = this;
		/* */ if (g.neg) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (g.neg) { */ case 1:
			g2 = new Int.ptr(false, nat.nil);
			_r$3 = g2.Mod(g, n); /* */ $s = 3; case 3: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			g = _r$3;
		/* } */ case 2:
		d = new Int.ptr(false, nat.nil);
		_r$4 = d.GCD(z, ptrType$1.nil, g, n); /* */ $s = 4; case 4: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		_r$4;
		if (z.neg) {
			z.Add(z, n);
		}
		$s = -1; return z;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Int.ptr.prototype.ModInverse }; } $f._r$3 = _r$3; $f._r$4 = _r$4; $f.d = d; $f.g = g; $f.g2 = g2; $f.n = n; $f.z = z; $f.$s = $s; $f.$r = $r; return $f;
	};
	Int.prototype.ModInverse = function(g, n) { return this.$val.ModInverse(g, n); };
	Jacobi = function(x, y) {
		var _r$3, _r$4, _tmp, _tmp$1, _tmp$2, a, b, bmod8, c, j, s, x, x$1, x$2, x$3, x$4, y, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$3 = $f._r$3; _r$4 = $f._r$4; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; a = $f.a; b = $f.b; bmod8 = $f.bmod8; c = $f.c; j = $f.j; s = $f.s; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; y = $f.y; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		a = [a];
		b = [b];
		c = [c];
		/* */ if ((y.abs.$length === 0) || ((((x$1 = y.abs, (0 >= x$1.$length ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + 0])) & 1) >>> 0) === 0)) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if ((y.abs.$length === 0) || ((((x$1 = y.abs, (0 >= x$1.$length ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + 0])) & 1) >>> 0) === 0)) { */ case 1:
			_r$3 = fmt.Sprintf("big: invalid 2nd argument to Int.Jacobi: need odd integer but got %s", new sliceType([y])); /* */ $s = 3; case 3: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			$panic(new $String(_r$3));
		/* } */ case 2:
		_tmp = new Int.ptr(false, nat.nil);
		_tmp$1 = new Int.ptr(false, nat.nil);
		_tmp$2 = new Int.ptr(false, nat.nil);
		a[0] = $clone(_tmp, Int);
		b[0] = $clone(_tmp$1, Int);
		c[0] = $clone(_tmp$2, Int);
		a[0].Set(x);
		b[0].Set(y);
		j = 1;
		if (b[0].neg) {
			if (a[0].neg) {
				j = -1;
			}
			b[0].neg = false;
		}
		/* while (true) { */ case 4:
			if (b[0].Cmp(intOne) === 0) {
				$s = -1; return j;
			}
			if (a[0].abs.$length === 0) {
				$s = -1; return 0;
			}
			_r$4 = a[0].Mod(a[0], b[0]); /* */ $s = 6; case 6: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			_r$4;
			if (a[0].abs.$length === 0) {
				$s = -1; return 0;
			}
			s = a[0].abs.trailingZeroBits();
			if (!((((s & 1) >>> 0) === 0))) {
				bmod8 = ((x$2 = b[0].abs, (0 >= x$2.$length ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + 0])) & 7) >>> 0;
				if ((bmod8 === 3) || (bmod8 === 5)) {
					j = -j;
				}
			}
			c[0].Rsh(a[0], s);
			if (((((x$3 = b[0].abs, (0 >= x$3.$length ? ($throwRuntimeError("index out of range"), undefined) : x$3.$array[x$3.$offset + 0])) & 3) >>> 0) === 3) && ((((x$4 = c[0].abs, (0 >= x$4.$length ? ($throwRuntimeError("index out of range"), undefined) : x$4.$array[x$4.$offset + 0])) & 3) >>> 0) === 3)) {
				j = -j;
			}
			a[0].Set(b[0]);
			b[0].Set(c[0]);
		/* } */ $s = 4; continue; case 5:
		$s = -1; return 0;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Jacobi }; } $f._r$3 = _r$3; $f._r$4 = _r$4; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f.a = a; $f.b = b; $f.bmod8 = bmod8; $f.c = c; $f.j = j; $f.s = s; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.y = y; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Jacobi = Jacobi;
	Int.ptr.prototype.modSqrt3Mod4Prime = function(x, p) {
		var _r$3, e, p, x, z, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$3 = $f._r$3; e = $f.e; p = $f.p; x = $f.x; z = $f.z; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		z = this;
		e = new Int.ptr(false, nat.nil).Add(p, intOne);
		e.Rsh(e, 2);
		_r$3 = z.Exp(x, e, p); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_r$3;
		$s = -1; return z;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Int.ptr.prototype.modSqrt3Mod4Prime }; } $f._r$3 = _r$3; $f.e = e; $f.p = p; $f.x = x; $f.z = z; $f.$s = $s; $f.$r = $r; return $f;
	};
	Int.prototype.modSqrt3Mod4Prime = function(x, p) { return this.$val.modSqrt3Mod4Prime(x, p); };
	Int.ptr.prototype.modSqrtTonelliShanks = function(x, p) {
		var _r$10, _r$11, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _tmp, _tmp$1, _tmp$2, _tmp$3, b, e, g, m, n, p, r, s, t, x, y, z, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; b = $f.b; e = $f.e; g = $f.g; m = $f.m; n = $f.n; p = $f.p; r = $f.r; s = $f.s; t = $f.t; x = $f.x; y = $f.y; z = $f.z; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		b = [b];
		g = [g];
		n = [n];
		s = [s];
		t = [t];
		y = [y];
		z = this;
		s[0] = new Int.ptr(false, nat.nil);
		s[0].Sub(p, intOne);
		e = s[0].abs.trailingZeroBits();
		s[0].Rsh(s[0], e);
		n[0] = new Int.ptr(false, nat.nil);
		n[0].SetInt64(new $Int64(0, 2));
		/* while (true) { */ case 1:
			_r$3 = Jacobi(n[0], p); /* */ $s = 3; case 3: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			/* if (!(!((_r$3 === -1)))) { break; } */ if(!(!((_r$3 === -1)))) { $s = 2; continue; }
			n[0].Add(n[0], intOne);
		/* } */ $s = 1; continue; case 2:
		_tmp = new Int.ptr(false, nat.nil);
		_tmp$1 = new Int.ptr(false, nat.nil);
		_tmp$2 = new Int.ptr(false, nat.nil);
		_tmp$3 = new Int.ptr(false, nat.nil);
		y[0] = $clone(_tmp, Int);
		b[0] = $clone(_tmp$1, Int);
		g[0] = $clone(_tmp$2, Int);
		t[0] = $clone(_tmp$3, Int);
		y[0].Add(s[0], intOne);
		y[0].Rsh(y[0], 1);
		_r$4 = y[0].Exp(x, y[0], p); /* */ $s = 4; case 4: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		_r$4;
		_r$5 = b[0].Exp(x, s[0], p); /* */ $s = 5; case 5: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		_r$5;
		_r$6 = g[0].Exp(n[0], s[0], p); /* */ $s = 6; case 6: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
		_r$6;
		r = e;
		/* while (true) { */ case 7:
			m = 0;
			t[0].Set(b[0]);
			/* while (true) { */ case 9:
				/* if (!(!((t[0].Cmp(intOne) === 0)))) { break; } */ if(!(!((t[0].Cmp(intOne) === 0)))) { $s = 10; continue; }
				_r$7 = t[0].Mul(t[0], t[0]).Mod(t[0], p); /* */ $s = 11; case 11: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
				_r$7;
				m = m + (1) >>> 0;
			/* } */ $s = 9; continue; case 10:
			if (m === 0) {
				$s = -1; return z.Set(y[0]);
			}
			_r$8 = t[0].SetInt64(new $Int64(0, 0)).SetBit(t[0], ((((r - m >>> 0) - 1 >>> 0) >> 0)), 1).Exp(g[0], t[0], p); /* */ $s = 12; case 12: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
			_r$8;
			_r$9 = g[0].Mul(t[0], t[0]).Mod(g[0], p); /* */ $s = 13; case 13: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
			_r$9;
			_r$10 = y[0].Mul(y[0], t[0]).Mod(y[0], p); /* */ $s = 14; case 14: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
			_r$10;
			_r$11 = b[0].Mul(b[0], g[0]).Mod(b[0], p); /* */ $s = 15; case 15: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
			_r$11;
			r = m;
		/* } */ $s = 7; continue; case 8:
		$s = -1; return ptrType$1.nil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Int.ptr.prototype.modSqrtTonelliShanks }; } $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f.b = b; $f.e = e; $f.g = g; $f.m = m; $f.n = n; $f.p = p; $f.r = r; $f.s = s; $f.t = t; $f.x = x; $f.y = y; $f.z = z; $f.$s = $s; $f.$r = $r; return $f;
	};
	Int.prototype.modSqrtTonelliShanks = function(x, p) { return this.$val.modSqrtTonelliShanks(x, p); };
	Int.ptr.prototype.ModSqrt = function(x, p) {
		var _1, _r$3, _r$4, _r$5, _r$6, _r$7, p, x, x$1, z, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; p = $f.p; x = $f.x; x$1 = $f.x$1; z = $f.z; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		z = this;
			_r$3 = Jacobi(x, p); /* */ $s = 2; case 2: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_1 = _r$3;
			if (_1 === (-1)) {
				$s = -1; return ptrType$1.nil;
			} else if (_1 === (0)) {
				$s = -1; return z.SetInt64(new $Int64(0, 0));
			} else if (_1 === (1)) {
				/* break; */ $s = 1; continue;
			}
		case 1:
		/* */ if (x.neg || x.Cmp(p) >= 0) { $s = 3; continue; }
		/* */ $s = 4; continue;
		/* if (x.neg || x.Cmp(p) >= 0) { */ case 3:
			_r$4 = new Int.ptr(false, nat.nil).Mod(x, p); /* */ $s = 5; case 5: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			x = _r$4;
		/* } */ case 4:
		/* */ if (p.abs.$length > 0 && ((_r$5 = (x$1 = p.abs, (0 >= x$1.$length ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + 0])) % 4, _r$5 === _r$5 ? _r$5 : $throwRuntimeError("integer divide by zero")) === 3)) { $s = 6; continue; }
		/* */ $s = 7; continue;
		/* if (p.abs.$length > 0 && ((_r$5 = (x$1 = p.abs, (0 >= x$1.$length ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + 0])) % 4, _r$5 === _r$5 ? _r$5 : $throwRuntimeError("integer divide by zero")) === 3)) { */ case 6:
			_r$6 = z.modSqrt3Mod4Prime(x, p); /* */ $s = 8; case 8: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
			$s = -1; return _r$6;
		/* } */ case 7:
		_r$7 = z.modSqrtTonelliShanks(x, p); /* */ $s = 9; case 9: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
		$s = -1; return _r$7;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Int.ptr.prototype.ModSqrt }; } $f._1 = _1; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f.p = p; $f.x = x; $f.x$1 = x$1; $f.z = z; $f.$s = $s; $f.$r = $r; return $f;
	};
	Int.prototype.ModSqrt = function(x, p) { return this.$val.ModSqrt(x, p); };
	Int.ptr.prototype.Lsh = function(x, n) {
		var n, x, z;
		z = this;
		z.abs = z.abs.shl(x.abs, n);
		z.neg = x.neg;
		return z;
	};
	Int.prototype.Lsh = function(x, n) { return this.$val.Lsh(x, n); };
	Int.ptr.prototype.Rsh = function(x, n) {
		var n, t, x, z;
		z = this;
		if (x.neg) {
			t = z.abs.sub(x.abs, natOne);
			t = t.shr(t, n);
			z.abs = t.add(t, natOne);
			z.neg = true;
			return z;
		}
		z.abs = z.abs.shr(x.abs, n);
		z.neg = false;
		return z;
	};
	Int.prototype.Rsh = function(x, n) { return this.$val.Rsh(x, n); };
	Int.ptr.prototype.Bit = function(i) {
		var i, t, x, x$1;
		x = this;
		if (i === 0) {
			if (x.abs.$length > 0) {
				return (((((x$1 = x.abs, (0 >= x$1.$length ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + 0])) & 1) >>> 0) >>> 0));
			}
			return 0;
		}
		if (i < 0) {
			$panic(new $String("negative bit index"));
		}
		if (x.neg) {
			t = (nat.nil).sub(x.abs, natOne);
			return (t.bit(((i >>> 0))) ^ 1) >>> 0;
		}
		return x.abs.bit(((i >>> 0)));
	};
	Int.prototype.Bit = function(i) { return this.$val.Bit(i); };
	Int.ptr.prototype.SetBit = function(x, i, b) {
		var b, i, t, x, z;
		z = this;
		if (i < 0) {
			$panic(new $String("negative bit index"));
		}
		if (x.neg) {
			t = z.abs.sub(x.abs, natOne);
			t = t.setBit(t, ((i >>> 0)), (b ^ 1) >>> 0);
			z.abs = t.add(t, natOne);
			z.neg = z.abs.$length > 0;
			return z;
		}
		z.abs = z.abs.setBit(x.abs, ((i >>> 0)), b);
		z.neg = false;
		return z;
	};
	Int.prototype.SetBit = function(x, i, b) { return this.$val.SetBit(x, i, b); };
	Int.ptr.prototype.And = function(x, y) {
		var _tmp, _tmp$1, x, x1, y, y1, y1$1, z;
		z = this;
		if (x.neg === y.neg) {
			if (x.neg) {
				x1 = (nat.nil).sub(x.abs, natOne);
				y1 = (nat.nil).sub(y.abs, natOne);
				z.abs = z.abs.add(z.abs.or(x1, y1), natOne);
				z.neg = true;
				return z;
			}
			z.abs = z.abs.and(x.abs, y.abs);
			z.neg = false;
			return z;
		}
		if (x.neg) {
			_tmp = y;
			_tmp$1 = x;
			x = _tmp;
			y = _tmp$1;
		}
		y1$1 = (nat.nil).sub(y.abs, natOne);
		z.abs = z.abs.andNot(x.abs, y1$1);
		z.neg = false;
		return z;
	};
	Int.prototype.And = function(x, y) { return this.$val.And(x, y); };
	Int.ptr.prototype.AndNot = function(x, y) {
		var x, x1, x1$1, y, y1, y1$1, z;
		z = this;
		if (x.neg === y.neg) {
			if (x.neg) {
				x1 = (nat.nil).sub(x.abs, natOne);
				y1 = (nat.nil).sub(y.abs, natOne);
				z.abs = z.abs.andNot(y1, x1);
				z.neg = false;
				return z;
			}
			z.abs = z.abs.andNot(x.abs, y.abs);
			z.neg = false;
			return z;
		}
		if (x.neg) {
			x1$1 = (nat.nil).sub(x.abs, natOne);
			z.abs = z.abs.add(z.abs.or(x1$1, y.abs), natOne);
			z.neg = true;
			return z;
		}
		y1$1 = (nat.nil).sub(y.abs, natOne);
		z.abs = z.abs.and(x.abs, y1$1);
		z.neg = false;
		return z;
	};
	Int.prototype.AndNot = function(x, y) { return this.$val.AndNot(x, y); };
	Int.ptr.prototype.Or = function(x, y) {
		var _tmp, _tmp$1, x, x1, y, y1, y1$1, z;
		z = this;
		if (x.neg === y.neg) {
			if (x.neg) {
				x1 = (nat.nil).sub(x.abs, natOne);
				y1 = (nat.nil).sub(y.abs, natOne);
				z.abs = z.abs.add(z.abs.and(x1, y1), natOne);
				z.neg = true;
				return z;
			}
			z.abs = z.abs.or(x.abs, y.abs);
			z.neg = false;
			return z;
		}
		if (x.neg) {
			_tmp = y;
			_tmp$1 = x;
			x = _tmp;
			y = _tmp$1;
		}
		y1$1 = (nat.nil).sub(y.abs, natOne);
		z.abs = z.abs.add(z.abs.andNot(y1$1, x.abs), natOne);
		z.neg = true;
		return z;
	};
	Int.prototype.Or = function(x, y) { return this.$val.Or(x, y); };
	Int.ptr.prototype.Xor = function(x, y) {
		var _tmp, _tmp$1, x, x1, y, y1, y1$1, z;
		z = this;
		if (x.neg === y.neg) {
			if (x.neg) {
				x1 = (nat.nil).sub(x.abs, natOne);
				y1 = (nat.nil).sub(y.abs, natOne);
				z.abs = z.abs.xor(x1, y1);
				z.neg = false;
				return z;
			}
			z.abs = z.abs.xor(x.abs, y.abs);
			z.neg = false;
			return z;
		}
		if (x.neg) {
			_tmp = y;
			_tmp$1 = x;
			x = _tmp;
			y = _tmp$1;
		}
		y1$1 = (nat.nil).sub(y.abs, natOne);
		z.abs = z.abs.add(z.abs.xor(x.abs, y1$1), natOne);
		z.neg = true;
		return z;
	};
	Int.prototype.Xor = function(x, y) { return this.$val.Xor(x, y); };
	Int.ptr.prototype.Not = function(x) {
		var x, z;
		z = this;
		if (x.neg) {
			z.abs = z.abs.sub(x.abs, natOne);
			z.neg = false;
			return z;
		}
		z.abs = z.abs.add(x.abs, natOne);
		z.neg = true;
		return z;
	};
	Int.prototype.Not = function(x) { return this.$val.Not(x); };
	Int.ptr.prototype.Sqrt = function(x) {
		var _r$3, x, z, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$3 = $f._r$3; x = $f.x; z = $f.z; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		z = this;
		if (x.neg) {
			$panic(new $String("square root of negative number"));
		}
		z.neg = false;
		_r$3 = z.abs.sqrt(x.abs); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		z.abs = _r$3;
		$s = -1; return z;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Int.ptr.prototype.Sqrt }; } $f._r$3 = _r$3; $f.x = x; $f.z = z; $f.$s = $s; $f.$r = $r; return $f;
	};
	Int.prototype.Sqrt = function(x) { return this.$val.Sqrt(x); };
	Int.ptr.prototype.Text = function(base) {
		var _r$3, base, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$3 = $f._r$3; base = $f.base; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		x = this;
		if (x === ptrType$1.nil) {
			$s = -1; return "<nil>";
		}
		_r$3 = x.abs.itoa(x.neg, base); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		$s = -1; return ($bytesToString(_r$3));
		/* */ } return; } if ($f === undefined) { $f = { $blk: Int.ptr.prototype.Text }; } $f._r$3 = _r$3; $f.base = base; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Int.prototype.Text = function(base) { return this.$val.Text(base); };
	Int.ptr.prototype.Append = function(buf, base) {
		var _arg, _arg$1, _r$3, base, buf, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _arg = $f._arg; _arg$1 = $f._arg$1; _r$3 = $f._r$3; base = $f.base; buf = $f.buf; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		x = this;
		if (x === ptrType$1.nil) {
			$s = -1; return $appendSlice(buf, "<nil>");
		}
		_arg = buf;
		_r$3 = x.abs.itoa(x.neg, base); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_arg$1 = _r$3;
		$s = -1; return $appendSlice(_arg, _arg$1);
		/* */ } return; } if ($f === undefined) { $f = { $blk: Int.ptr.prototype.Append }; } $f._arg = _arg; $f._arg$1 = _arg$1; $f._r$3 = _r$3; $f.base = base; $f.buf = buf; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Int.prototype.Append = function(buf, base) { return this.$val.Append(buf, base); };
	Int.ptr.prototype.String = function() {
		var _r$3, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$3 = $f._r$3; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		x = this;
		_r$3 = x.Text(10); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		$s = -1; return _r$3;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Int.ptr.prototype.String }; } $f._r$3 = _r$3; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Int.prototype.String = function() { return this.$val.String(); };
	writeMultiple = function(s, text, count) {
		var _r$3, b, count, s, text, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$3 = $f._r$3; b = $f.b; count = $f.count; s = $f.s; text = $f.text; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		/* */ if (text.length > 0) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (text.length > 0) { */ case 1:
			b = (new sliceType$1($stringToBytes(text)));
			/* while (true) { */ case 3:
				/* if (!(count > 0)) { break; } */ if(!(count > 0)) { $s = 4; continue; }
				_r$3 = s.Write(b); /* */ $s = 5; case 5: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				_r$3;
				count = count - (1) >> 0;
			/* } */ $s = 3; continue; case 4:
		/* } */ case 2:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: writeMultiple }; } $f._r$3 = _r$3; $f.b = b; $f.count = count; $f.s = s; $f.text = text; $f.$s = $s; $f.$r = $r; return $f;
	};
	Int.ptr.prototype.Format = function(s, ch) {
		var _1, _2, _arg, _arg$1, _arg$2, _i, _r$10, _r$11, _r$12, _r$13, _r$14, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _ref, _tuple, _tuple$1, base, ch, d, d$1, digits, i, left, length, precision, precisionSet, prefix, right, s, sign, width, widthSet, x, zeros, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _2 = $f._2; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _i = $f._i; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$12 = $f._r$12; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _ref = $f._ref; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; base = $f.base; ch = $f.ch; d = $f.d; d$1 = $f.d$1; digits = $f.digits; i = $f.i; left = $f.left; length = $f.length; precision = $f.precision; precisionSet = $f.precisionSet; prefix = $f.prefix; right = $f.right; s = $f.s; sign = $f.sign; width = $f.width; widthSet = $f.widthSet; x = $f.x; zeros = $f.zeros; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		x = this;
		base = 0;
			_1 = ch;
			/* */ if (_1 === (98)) { $s = 2; continue; }
			/* */ if (_1 === (111)) { $s = 3; continue; }
			/* */ if ((_1 === (100)) || (_1 === (115)) || (_1 === (118))) { $s = 4; continue; }
			/* */ if ((_1 === (120)) || (_1 === (88))) { $s = 5; continue; }
			/* */ $s = 6; continue;
			/* if (_1 === (98)) { */ case 2:
				base = 2;
				$s = 7; continue;
			/* } else if (_1 === (111)) { */ case 3:
				base = 8;
				$s = 7; continue;
			/* } else if ((_1 === (100)) || (_1 === (115)) || (_1 === (118))) { */ case 4:
				base = 10;
				$s = 7; continue;
			/* } else if ((_1 === (120)) || (_1 === (88))) { */ case 5:
				base = 16;
				$s = 7; continue;
			/* } else { */ case 6:
				_arg = s;
				_arg$1 = new $Int32(ch);
				_r$3 = x.String(); /* */ $s = 8; case 8: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				_arg$2 = new $String(_r$3);
				_r$4 = fmt.Fprintf(_arg, "%%!%c(big.Int=%s)", new sliceType([_arg$1, _arg$2])); /* */ $s = 9; case 9: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				_r$4;
				$s = -1; return;
			/* } */ case 7:
		case 1:
		/* */ if (x === ptrType$1.nil) { $s = 10; continue; }
		/* */ $s = 11; continue;
		/* if (x === ptrType$1.nil) { */ case 10:
			_r$5 = fmt.Fprint(s, new sliceType([new $String("<nil>")])); /* */ $s = 12; case 12: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			_r$5;
			$s = -1; return;
		/* } */ case 11:
		sign = "";
			/* */ if (x.neg) { $s = 14; continue; }
			_r$6 = s.Flag(43); /* */ $s = 18; case 18: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
			/* */ if (_r$6) { $s = 15; continue; }
			_r$7 = s.Flag(32); /* */ $s = 19; case 19: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
			/* */ if (_r$7) { $s = 16; continue; }
			/* */ $s = 17; continue;
			/* if (x.neg) { */ case 14:
				sign = "-";
				$s = 17; continue;
			/* } else if (_r$6) { */ case 15:
				sign = "+";
				$s = 17; continue;
			/* } else if (_r$7) { */ case 16:
				sign = " ";
			/* } */ case 17:
		case 13:
		prefix = "";
		_r$8 = s.Flag(35); /* */ $s = 22; case 22: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
		/* */ if (_r$8) { $s = 20; continue; }
		/* */ $s = 21; continue;
		/* if (_r$8) { */ case 20:
			_2 = ch;
			if (_2 === (111)) {
				prefix = "0";
			} else if (_2 === (120)) {
				prefix = "0x";
			} else if (_2 === (88)) {
				prefix = "0X";
			}
		/* } */ case 21:
		_r$9 = x.abs.utoa(base); /* */ $s = 23; case 23: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
		digits = _r$9;
		if (ch === 88) {
			_ref = digits;
			_i = 0;
			while (true) {
				if (!(_i < _ref.$length)) { break; }
				i = _i;
				d = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
				if (97 <= d && d <= 122) {
					((i < 0 || i >= digits.$length) ? ($throwRuntimeError("index out of range"), undefined) : digits.$array[digits.$offset + i] = (65 + ((d - 97 << 24 >>> 24)) << 24 >>> 24));
				}
				_i++;
			}
		}
		left = 0;
		zeros = 0;
		right = 0;
		_r$10 = s.Precision(); /* */ $s = 24; case 24: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
		_tuple = _r$10;
		precision = _tuple[0];
		precisionSet = _tuple[1];
		if (precisionSet) {
			if (digits.$length < precision) {
				zeros = precision - digits.$length >> 0;
			} else if ((digits.$length === 1) && ((0 >= digits.$length ? ($throwRuntimeError("index out of range"), undefined) : digits.$array[digits.$offset + 0]) === 48) && (precision === 0)) {
				$s = -1; return;
			}
		}
		length = ((sign.length + prefix.length >> 0) + zeros >> 0) + digits.$length >> 0;
		_r$11 = s.Width(); /* */ $s = 25; case 25: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
		_tuple$1 = _r$11;
		width = _tuple$1[0];
		widthSet = _tuple$1[1];
		/* */ if (widthSet && length < width) { $s = 26; continue; }
		/* */ $s = 27; continue;
		/* if (widthSet && length < width) { */ case 26:
				d$1 = width - length >> 0;
				_r$12 = s.Flag(45); /* */ $s = 33; case 33: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }
				/* */ if (_r$12) { $s = 29; continue; }
				_r$13 = s.Flag(48); /* */ $s = 34; case 34: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
				/* */ if (_r$13 && !precisionSet) { $s = 30; continue; }
				/* */ $s = 31; continue;
				/* if (_r$12) { */ case 29:
					right = d$1;
					$s = 32; continue;
				/* } else if (_r$13 && !precisionSet) { */ case 30:
					zeros = d$1;
					$s = 32; continue;
				/* } else { */ case 31:
					left = d$1;
				/* } */ case 32:
			case 28:
		/* } */ case 27:
		$r = writeMultiple(s, " ", left); /* */ $s = 35; case 35: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = writeMultiple(s, sign, 1); /* */ $s = 36; case 36: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = writeMultiple(s, prefix, 1); /* */ $s = 37; case 37: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = writeMultiple(s, "0", zeros); /* */ $s = 38; case 38: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_r$14 = s.Write(digits); /* */ $s = 39; case 39: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
		_r$14;
		$r = writeMultiple(s, " ", right); /* */ $s = 40; case 40: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Int.ptr.prototype.Format }; } $f._1 = _1; $f._2 = _2; $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._i = _i; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$12 = _r$12; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._ref = _ref; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.base = base; $f.ch = ch; $f.d = d; $f.d$1 = d$1; $f.digits = digits; $f.i = i; $f.left = left; $f.length = length; $f.precision = precision; $f.precisionSet = precisionSet; $f.prefix = prefix; $f.right = right; $f.s = s; $f.sign = sign; $f.width = width; $f.widthSet = widthSet; $f.x = x; $f.zeros = zeros; $f.$s = $s; $f.$r = $r; return $f;
	};
	Int.prototype.Format = function(s, ch) { return this.$val.Format(s, ch); };
	Int.ptr.prototype.scan = function(r, base) {
		var _r$3, _r$4, _tuple, _tuple$1, base, err, neg, r, z, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$3 = $f._r$3; _r$4 = $f._r$4; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; base = $f.base; err = $f.err; neg = $f.neg; r = $f.r; z = $f.z; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		z = this;
		_r$3 = scanSign(r); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_tuple = _r$3;
		neg = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [ptrType$1.nil, 0, err];
		}
		_r$4 = z.abs.scan(r, base, false); /* */ $s = 2; case 2: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		_tuple$1 = _r$4;
		z.abs = _tuple$1[0];
		base = _tuple$1[1];
		err = _tuple$1[3];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [ptrType$1.nil, base, err];
		}
		z.neg = z.abs.$length > 0 && neg;
		$s = -1; return [z, base, $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Int.ptr.prototype.scan }; } $f._r$3 = _r$3; $f._r$4 = _r$4; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.base = base; $f.err = err; $f.neg = neg; $f.r = r; $f.z = z; $f.$s = $s; $f.$r = $r; return $f;
	};
	Int.prototype.scan = function(r, base) { return this.$val.scan(r, base); };
	scanSign = function(r) {
		var _1, _r$3, _r$4, _tmp, _tmp$1, _tuple, ch, err, neg, r, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _r$3 = $f._r$3; _r$4 = $f._r$4; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tuple = $f._tuple; ch = $f.ch; err = $f.err; neg = $f.neg; r = $f.r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		neg = false;
		err = $ifaceNil;
		ch = 0;
		_r$3 = r.ReadByte(); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_tuple = _r$3;
		ch = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			_tmp = false;
			_tmp$1 = err;
			neg = _tmp;
			err = _tmp$1;
			$s = -1; return [neg, err];
		}
			_1 = ch;
			/* */ if (_1 === (45)) { $s = 3; continue; }
			/* */ if (_1 === (43)) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (_1 === (45)) { */ case 3:
				neg = true;
				$s = 6; continue;
			/* } else if (_1 === (43)) { */ case 4:
				$s = 6; continue;
			/* } else { */ case 5:
				_r$4 = r.UnreadByte(); /* */ $s = 7; case 7: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				_r$4;
			/* } */ case 6:
		case 2:
		$s = -1; return [neg, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: scanSign }; } $f._1 = _1; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tuple = _tuple; $f.ch = ch; $f.err = err; $f.neg = neg; $f.r = r; $f.$s = $s; $f.$r = $r; return $f;
	};
	byteReader.ptr.prototype.ReadByte = function() {
		var _r$3, _r$4, _tuple, ch, err, r, size, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$3 = $f._r$3; _r$4 = $f._r$4; _tuple = $f._tuple; ch = $f.ch; err = $f.err; r = $f.r; size = $f.size; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		r = this;
		_r$3 = r.ScanState.ReadRune(); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_tuple = _r$3;
		ch = _tuple[0];
		size = _tuple[1];
		err = _tuple[2];
		/* */ if (!((size === 1)) && $interfaceIsEqual(err, $ifaceNil)) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!((size === 1)) && $interfaceIsEqual(err, $ifaceNil)) { */ case 2:
			_r$4 = fmt.Errorf("invalid rune %#U", new sliceType([new $Int32(ch)])); /* */ $s = 4; case 4: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			err = _r$4;
		/* } */ case 3:
		$s = -1; return [((ch << 24 >>> 24)), err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: byteReader.ptr.prototype.ReadByte }; } $f._r$3 = _r$3; $f._r$4 = _r$4; $f._tuple = _tuple; $f.ch = ch; $f.err = err; $f.r = r; $f.size = size; $f.$s = $s; $f.$r = $r; return $f;
	};
	byteReader.prototype.ReadByte = function() { return this.$val.ReadByte(); };
	byteReader.ptr.prototype.UnreadByte = function() {
		var _r$3, r, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$3 = $f._r$3; r = $f.r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		r = this;
		_r$3 = r.ScanState.UnreadRune(); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		$s = -1; return _r$3;
		/* */ } return; } if ($f === undefined) { $f = { $blk: byteReader.ptr.prototype.UnreadByte }; } $f._r$3 = _r$3; $f.r = r; $f.$s = $s; $f.$r = $r; return $f;
	};
	byteReader.prototype.UnreadByte = function() { return this.$val.UnreadByte(); };
	Int.ptr.prototype.Scan = function(s, ch) {
		var _1, _r$3, _tuple, base, ch, err, s, x, z, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _r$3 = $f._r$3; _tuple = $f._tuple; base = $f.base; ch = $f.ch; err = $f.err; s = $f.s; x = $f.x; z = $f.z; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		z = this;
		$r = s.SkipSpace(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		base = 0;
		_1 = ch;
		if (_1 === (98)) {
			base = 2;
		} else if (_1 === (111)) {
			base = 8;
		} else if (_1 === (100)) {
			base = 10;
		} else if ((_1 === (120)) || (_1 === (88))) {
			base = 16;
		} else if ((_1 === (115)) || (_1 === (118))) {
		} else {
			$s = -1; return errors.New("Int.Scan: invalid verb");
		}
		_r$3 = z.scan((x = new byteReader.ptr(s), new x.constructor.elem(x)), base); /* */ $s = 2; case 2: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_tuple = _r$3;
		err = _tuple[2];
		$s = -1; return err;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Int.ptr.prototype.Scan }; } $f._1 = _1; $f._r$3 = _r$3; $f._tuple = _tuple; $f.base = base; $f.ch = ch; $f.err = err; $f.s = s; $f.x = x; $f.z = z; $f.$s = $s; $f.$r = $r; return $f;
	};
	Int.prototype.Scan = function(s, ch) { return this.$val.Scan(s, ch); };
	Int.ptr.prototype.GobEncode = function() {
		var b, buf, i, x;
		x = this;
		if (x === ptrType$1.nil) {
			return [sliceType$1.nil, $ifaceNil];
		}
		buf = $makeSlice(sliceType$1, (1 + ($imul(x.abs.$length, 4)) >> 0));
		i = x.abs.bytes(buf) - 1 >> 0;
		b = 2;
		if (x.neg) {
			b = (b | (1)) >>> 0;
		}
		((i < 0 || i >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + i] = b);
		return [$subslice(buf, i), $ifaceNil];
	};
	Int.prototype.GobEncode = function() { return this.$val.GobEncode(); };
	Int.ptr.prototype.GobDecode = function(buf) {
		var _r$3, b, buf, z, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$3 = $f._r$3; b = $f.b; buf = $f.buf; z = $f.z; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		z = this;
		if (buf.$length === 0) {
			Int.copy(z, new Int.ptr(false, nat.nil));
			$s = -1; return $ifaceNil;
		}
		b = (0 >= buf.$length ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + 0]);
		/* */ if (!(((b >>> 1 << 24 >>> 24) === 1))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!(((b >>> 1 << 24 >>> 24) === 1))) { */ case 1:
			_r$3 = fmt.Errorf("Int.GobDecode: encoding version %d not supported", new sliceType([new $Uint8((b >>> 1 << 24 >>> 24))])); /* */ $s = 3; case 3: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			$s = -1; return _r$3;
		/* } */ case 2:
		z.neg = !((((b & 1) >>> 0) === 0));
		z.abs = z.abs.setBytes($subslice(buf, 1));
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Int.ptr.prototype.GobDecode }; } $f._r$3 = _r$3; $f.b = b; $f.buf = buf; $f.z = z; $f.$s = $s; $f.$r = $r; return $f;
	};
	Int.prototype.GobDecode = function(buf) { return this.$val.GobDecode(buf); };
	Int.ptr.prototype.MarshalText = function() {
		var _r$3, _tmp, _tmp$1, _tmp$2, _tmp$3, err, text, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$3 = $f._r$3; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; err = $f.err; text = $f.text; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		text = sliceType$1.nil;
		err = $ifaceNil;
		x = this;
		if (x === ptrType$1.nil) {
			_tmp = (new sliceType$1($stringToBytes("<nil>")));
			_tmp$1 = $ifaceNil;
			text = _tmp;
			err = _tmp$1;
			$s = -1; return [text, err];
		}
		_r$3 = x.abs.itoa(x.neg, 10); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_tmp$2 = _r$3;
		_tmp$3 = $ifaceNil;
		text = _tmp$2;
		err = _tmp$3;
		$s = -1; return [text, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Int.ptr.prototype.MarshalText }; } $f._r$3 = _r$3; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f.err = err; $f.text = text; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Int.prototype.MarshalText = function() { return this.$val.MarshalText(); };
	Int.ptr.prototype.UnmarshalText = function(text) {
		var _r$3, _r$4, _tuple, ok, text, z, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$3 = $f._r$3; _r$4 = $f._r$4; _tuple = $f._tuple; ok = $f.ok; text = $f.text; z = $f.z; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		z = this;
		_r$3 = z.setFromScanner(bytes.NewReader(text), 0); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_tuple = _r$3;
		ok = _tuple[1];
		/* */ if (!ok) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!ok) { */ case 2:
			_r$4 = fmt.Errorf("math/big: cannot unmarshal %q into a *big.Int", new sliceType([text])); /* */ $s = 4; case 4: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			$s = -1; return _r$4;
		/* } */ case 3:
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Int.ptr.prototype.UnmarshalText }; } $f._r$3 = _r$3; $f._r$4 = _r$4; $f._tuple = _tuple; $f.ok = ok; $f.text = text; $f.z = z; $f.$s = $s; $f.$r = $r; return $f;
	};
	Int.prototype.UnmarshalText = function(text) { return this.$val.UnmarshalText(text); };
	Int.ptr.prototype.MarshalJSON = function() {
		var _r$3, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$3 = $f._r$3; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		x = this;
		_r$3 = x.MarshalText(); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		$s = -1; return _r$3;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Int.ptr.prototype.MarshalJSON }; } $f._r$3 = _r$3; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Int.prototype.MarshalJSON = function() { return this.$val.MarshalJSON(); };
	Int.ptr.prototype.UnmarshalJSON = function(text) {
		var _r$3, text, z, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$3 = $f._r$3; text = $f.text; z = $f.z; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		z = this;
		if (($bytesToString(text)) === "null") {
			$s = -1; return $ifaceNil;
		}
		_r$3 = z.UnmarshalText(text); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		$s = -1; return _r$3;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Int.ptr.prototype.UnmarshalJSON }; } $f._r$3 = _r$3; $f.text = text; $f.z = z; $f.$s = $s; $f.$r = $r; return $f;
	};
	Int.prototype.UnmarshalJSON = function(text) { return this.$val.UnmarshalJSON(text); };
	nat.prototype.clear = function() {
		var _i, _ref, i, z;
		z = this;
		_ref = z;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			((i < 0 || i >= z.$length) ? ($throwRuntimeError("index out of range"), undefined) : z.$array[z.$offset + i] = 0);
			_i++;
		}
	};
	$ptrType(nat).prototype.clear = function() { return this.$get().clear(); };
	nat.prototype.norm = function() {
		var i, x, z;
		z = this;
		i = z.$length;
		while (true) {
			if (!(i > 0 && ((x = i - 1 >> 0, ((x < 0 || x >= z.$length) ? ($throwRuntimeError("index out of range"), undefined) : z.$array[z.$offset + x])) === 0))) { break; }
			i = i - (1) >> 0;
		}
		return $subslice(z, 0, i);
	};
	$ptrType(nat).prototype.norm = function() { return this.$get().norm(); };
	nat.prototype.make = function(n) {
		var n, z;
		z = this;
		if (n <= z.$capacity) {
			return $subslice(z, 0, n);
		}
		return $makeSlice(nat, n, (n + 4 >> 0));
	};
	$ptrType(nat).prototype.make = function(n) { return this.$get().make(n); };
	nat.prototype.setWord = function(x) {
		var x, z;
		z = this;
		if (x === 0) {
			return $subslice(z, 0, 0);
		}
		z = z.make(1);
		(0 >= z.$length ? ($throwRuntimeError("index out of range"), undefined) : z.$array[z.$offset + 0] = x);
		return z;
	};
	$ptrType(nat).prototype.setWord = function(x) { return this.$get().setWord(x); };
	nat.prototype.setUint64 = function(x) {
		var w, x, x$1, z;
		z = this;
		w = ((x.$low >>> 0));
		if ((x$1 = (new $Uint64(0, w.constructor === Number ? w : 1)), (x$1.$high === x.$high && x$1.$low === x.$low))) {
			return z.setWord(w);
		}
		z = z.make(2);
		(1 >= z.$length ? ($throwRuntimeError("index out of range"), undefined) : z.$array[z.$offset + 1] = (($shiftRightUint64(x, 32).$low >>> 0)));
		(0 >= z.$length ? ($throwRuntimeError("index out of range"), undefined) : z.$array[z.$offset + 0] = ((x.$low >>> 0)));
		return z;
	};
	$ptrType(nat).prototype.setUint64 = function(x) { return this.$get().setUint64(x); };
	nat.prototype.set = function(x) {
		var x, z;
		z = this;
		z = z.make(x.$length);
		$copySlice(z, x);
		return z;
	};
	$ptrType(nat).prototype.set = function(x) { return this.$get().set(x); };
	nat.prototype.add = function(x, y) {
		var c, m, n, x, x$1, x$2, x$3, y, z;
		z = this;
		m = x.$length;
		n = y.$length;
		if (m < n) {
			return z.add(y, x);
		} else if ((m === 0)) {
			return $subslice(z, 0, 0);
		} else if ((n === 0)) {
			return z.set(x);
		}
		z = z.make(m + 1 >> 0);
		c = addVV((x$1 = $subslice(z, 0, n), $subslice(new sliceType$2(x$1.$array), x$1.$offset, x$1.$offset + x$1.$length)), $subslice(new sliceType$2(x.$array), x.$offset, x.$offset + x.$length), $subslice(new sliceType$2(y.$array), y.$offset, y.$offset + y.$length));
		if (m > n) {
			c = addVW((x$2 = $subslice(z, n, m), $subslice(new sliceType$2(x$2.$array), x$2.$offset, x$2.$offset + x$2.$length)), (x$3 = $subslice(x, n), $subslice(new sliceType$2(x$3.$array), x$3.$offset, x$3.$offset + x$3.$length)), c);
		}
		((m < 0 || m >= z.$length) ? ($throwRuntimeError("index out of range"), undefined) : z.$array[z.$offset + m] = c);
		return z.norm();
	};
	$ptrType(nat).prototype.add = function(x, y) { return this.$get().add(x, y); };
	nat.prototype.sub = function(x, y) {
		var c, m, n, x, x$1, x$2, x$3, y, z;
		z = this;
		m = x.$length;
		n = y.$length;
		if (m < n) {
			$panic(new $String("underflow"));
		} else if ((m === 0)) {
			return $subslice(z, 0, 0);
		} else if ((n === 0)) {
			return z.set(x);
		}
		z = z.make(m);
		c = subVV((x$1 = $subslice(z, 0, n), $subslice(new sliceType$2(x$1.$array), x$1.$offset, x$1.$offset + x$1.$length)), $subslice(new sliceType$2(x.$array), x.$offset, x.$offset + x.$length), $subslice(new sliceType$2(y.$array), y.$offset, y.$offset + y.$length));
		if (m > n) {
			c = subVW((x$2 = $subslice(z, n), $subslice(new sliceType$2(x$2.$array), x$2.$offset, x$2.$offset + x$2.$length)), (x$3 = $subslice(x, n), $subslice(new sliceType$2(x$3.$array), x$3.$offset, x$3.$offset + x$3.$length)), c);
		}
		if (!((c === 0))) {
			$panic(new $String("underflow"));
		}
		return z.norm();
	};
	$ptrType(nat).prototype.sub = function(x, y) { return this.$get().sub(x, y); };
	nat.prototype.cmp = function(y) {
		var i, m, n, r, x, y;
		r = 0;
		x = this;
		m = x.$length;
		n = y.$length;
		if (!((m === n)) || (m === 0)) {
			if (m < n) {
				r = -1;
			} else if (m > n) {
				r = 1;
			}
			return r;
		}
		i = m - 1 >> 0;
		while (true) {
			if (!(i > 0 && (((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i]) === ((i < 0 || i >= y.$length) ? ($throwRuntimeError("index out of range"), undefined) : y.$array[y.$offset + i])))) { break; }
			i = i - (1) >> 0;
		}
		if (((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i]) < ((i < 0 || i >= y.$length) ? ($throwRuntimeError("index out of range"), undefined) : y.$array[y.$offset + i])) {
			r = -1;
		} else if (((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i]) > ((i < 0 || i >= y.$length) ? ($throwRuntimeError("index out of range"), undefined) : y.$array[y.$offset + i])) {
			r = 1;
		}
		return r;
	};
	$ptrType(nat).prototype.cmp = function(y) { return this.$get().cmp(y); };
	nat.prototype.mulAddWW = function(x, y, r) {
		var m, r, x, x$1, y, z;
		z = this;
		m = x.$length;
		if ((m === 0) || (y === 0)) {
			return z.setWord(r);
		}
		z = z.make(m + 1 >> 0);
		((m < 0 || m >= z.$length) ? ($throwRuntimeError("index out of range"), undefined) : z.$array[z.$offset + m] = mulAddVWW((x$1 = $subslice(z, 0, m), $subslice(new sliceType$2(x$1.$array), x$1.$offset, x$1.$offset + x$1.$length)), $subslice(new sliceType$2(x.$array), x.$offset, x.$offset + x.$length), y, r));
		return z.norm();
	};
	$ptrType(nat).prototype.mulAddWW = function(x, y, r) { return this.$get().mulAddWW(x, y, r); };
	basicMul = function(z, x, y) {
		var _i, _ref, d, i, x, x$1, x$2, y, z;
		$subslice(z, 0, (x.$length + y.$length >> 0)).clear();
		_ref = y;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			d = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			if (!((d === 0))) {
				(x$2 = x.$length + i >> 0, ((x$2 < 0 || x$2 >= z.$length) ? ($throwRuntimeError("index out of range"), undefined) : z.$array[z.$offset + x$2] = addMulVVW((x$1 = $subslice(z, i, (i + x.$length >> 0)), $subslice(new sliceType$2(x$1.$array), x$1.$offset, x$1.$offset + x$1.$length)), $subslice(new sliceType$2(x.$array), x.$offset, x.$offset + x.$length), d)));
			}
			_i++;
		}
	};
	nat.prototype.montgomery = function(x, y, m, k, n) {
		var c, c2, c3, cx, cy, d, i, k, m, n, t, x, x$1, y, z;
		z = this;
		if (!((x.$length === n)) || !((y.$length === n)) || !((m.$length === n))) {
			$panic(new $String("math/big: mismatched montgomery number lengths"));
		}
		z = z.make(n);
		z.clear();
		c = 0;
		i = 0;
		while (true) {
			if (!(i < n)) { break; }
			d = ((i < 0 || i >= y.$length) ? ($throwRuntimeError("index out of range"), undefined) : y.$array[y.$offset + i]);
			c2 = addMulVVW($subslice(new sliceType$2(z.$array), z.$offset, z.$offset + z.$length), $subslice(new sliceType$2(x.$array), x.$offset, x.$offset + x.$length), d);
			t = $imul((0 >= z.$length ? ($throwRuntimeError("index out of range"), undefined) : z.$array[z.$offset + 0]), k) >>> 0;
			c3 = addMulVVW($subslice(new sliceType$2(z.$array), z.$offset, z.$offset + z.$length), $subslice(new sliceType$2(m.$array), m.$offset, m.$offset + m.$length), t);
			$copySlice(z, $subslice(z, 1));
			cx = c + c2 >>> 0;
			cy = cx + c3 >>> 0;
			(x$1 = n - 1 >> 0, ((x$1 < 0 || x$1 >= z.$length) ? ($throwRuntimeError("index out of range"), undefined) : z.$array[z.$offset + x$1] = cy));
			if (cx < c2 || cy < c3) {
				c = 1;
			} else {
				c = 0;
			}
			i = i + (1) >> 0;
		}
		if (!((c === 0))) {
			subVV($subslice(new sliceType$2(z.$array), z.$offset, z.$offset + z.$length), $subslice(new sliceType$2(z.$array), z.$offset, z.$offset + z.$length), $subslice(new sliceType$2(m.$array), m.$offset, m.$offset + m.$length));
		}
		return z;
	};
	$ptrType(nat).prototype.montgomery = function(x, y, m, k, n) { return this.$get().montgomery(x, y, m, k, n); };
	karatsubaAdd = function(z, x, n) {
		var c, n, x, x$1, x$2, x$3, z;
		c = addVV((x$1 = $subslice(z, 0, n), $subslice(new sliceType$2(x$1.$array), x$1.$offset, x$1.$offset + x$1.$length)), $subslice(new sliceType$2(z.$array), z.$offset, z.$offset + z.$length), $subslice(new sliceType$2(x.$array), x.$offset, x.$offset + x.$length));
		if (!((c === 0))) {
			addVW((x$2 = $subslice(z, n, (n + (n >> 1 >> 0) >> 0)), $subslice(new sliceType$2(x$2.$array), x$2.$offset, x$2.$offset + x$2.$length)), (x$3 = $subslice(z, n), $subslice(new sliceType$2(x$3.$array), x$3.$offset, x$3.$offset + x$3.$length)), c);
		}
	};
	karatsubaSub = function(z, x, n) {
		var c, n, x, x$1, x$2, x$3, z;
		c = subVV((x$1 = $subslice(z, 0, n), $subslice(new sliceType$2(x$1.$array), x$1.$offset, x$1.$offset + x$1.$length)), $subslice(new sliceType$2(z.$array), z.$offset, z.$offset + z.$length), $subslice(new sliceType$2(x.$array), x.$offset, x.$offset + x.$length));
		if (!((c === 0))) {
			subVW((x$2 = $subslice(z, n, (n + (n >> 1 >> 0) >> 0)), $subslice(new sliceType$2(x$2.$array), x$2.$offset, x$2.$offset + x$2.$length)), (x$3 = $subslice(z, n), $subslice(new sliceType$2(x$3.$array), x$3.$offset, x$3.$offset + x$3.$length)), c);
		}
	};
	karatsuba = function(z, x, y) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, n, n2, p, r, s, x, x0, x1, xd, y, y0, y1, yd, z;
		n = y.$length;
		if (!(((n & 1) === 0)) || n < karatsubaThreshold || n < 2) {
			basicMul(z, x, y);
			return;
		}
		n2 = n >> 1 >> 0;
		_tmp = $subslice(x, n2);
		_tmp$1 = $subslice(x, 0, n2);
		x1 = _tmp;
		x0 = _tmp$1;
		_tmp$2 = $subslice(y, n2);
		_tmp$3 = $subslice(y, 0, n2);
		y1 = _tmp$2;
		y0 = _tmp$3;
		karatsuba(z, x0, y0);
		karatsuba($subslice(z, n), x1, y1);
		s = 1;
		xd = $subslice(z, ($imul(2, n)), (($imul(2, n)) + n2 >> 0));
		if (!((subVV($subslice(new sliceType$2(xd.$array), xd.$offset, xd.$offset + xd.$length), $subslice(new sliceType$2(x1.$array), x1.$offset, x1.$offset + x1.$length), $subslice(new sliceType$2(x0.$array), x0.$offset, x0.$offset + x0.$length)) === 0))) {
			s = -s;
			subVV($subslice(new sliceType$2(xd.$array), xd.$offset, xd.$offset + xd.$length), $subslice(new sliceType$2(x0.$array), x0.$offset, x0.$offset + x0.$length), $subslice(new sliceType$2(x1.$array), x1.$offset, x1.$offset + x1.$length));
		}
		yd = $subslice(z, (($imul(2, n)) + n2 >> 0), ($imul(3, n)));
		if (!((subVV($subslice(new sliceType$2(yd.$array), yd.$offset, yd.$offset + yd.$length), $subslice(new sliceType$2(y0.$array), y0.$offset, y0.$offset + y0.$length), $subslice(new sliceType$2(y1.$array), y1.$offset, y1.$offset + y1.$length)) === 0))) {
			s = -s;
			subVV($subslice(new sliceType$2(yd.$array), yd.$offset, yd.$offset + yd.$length), $subslice(new sliceType$2(y1.$array), y1.$offset, y1.$offset + y1.$length), $subslice(new sliceType$2(y0.$array), y0.$offset, y0.$offset + y0.$length));
		}
		p = $subslice(z, ($imul(n, 3)));
		karatsuba(p, xd, yd);
		r = $subslice(z, ($imul(n, 4)));
		$copySlice(r, $subslice(z, 0, ($imul(n, 2))));
		karatsubaAdd($subslice(z, n2), r, n);
		karatsubaAdd($subslice(z, n2), $subslice(r, n), n);
		if (s > 0) {
			karatsubaAdd($subslice(z, n2), p, n);
		} else {
			karatsubaSub($subslice(z, n2), p, n);
		}
	};
	alias = function(x, y) {
		var x, x$1, x$2, y;
		return x.$capacity > 0 && y.$capacity > 0 && (x$1 = $subslice(x, 0, x.$capacity), $indexPtr(x$1.$array, x$1.$offset + (x.$capacity - 1 >> 0), ptrType$3)) === (x$2 = $subslice(y, 0, y.$capacity), $indexPtr(x$2.$array, x$2.$offset + (y.$capacity - 1 >> 0), ptrType$3));
	};
	addAt = function(z, x, i) {
		var c, i, j, n, x, x$1, x$2, x$3, x$4, z;
		n = x.$length;
		if (n > 0) {
			c = addVV((x$1 = $subslice(z, i, (i + n >> 0)), $subslice(new sliceType$2(x$1.$array), x$1.$offset, x$1.$offset + x$1.$length)), (x$2 = $subslice(z, i), $subslice(new sliceType$2(x$2.$array), x$2.$offset, x$2.$offset + x$2.$length)), $subslice(new sliceType$2(x.$array), x.$offset, x.$offset + x.$length));
			if (!((c === 0))) {
				j = i + n >> 0;
				if (j < z.$length) {
					addVW((x$3 = $subslice(z, j), $subslice(new sliceType$2(x$3.$array), x$3.$offset, x$3.$offset + x$3.$length)), (x$4 = $subslice(z, j), $subslice(new sliceType$2(x$4.$array), x$4.$offset, x$4.$offset + x$4.$length)), c);
				}
			}
		}
	};
	max = function(x, y) {
		var x, y;
		if (x > y) {
			return x;
		}
		return y;
	};
	karatsubaLen = function(n) {
		var i, n, y;
		i = 0;
		while (true) {
			if (!(n > karatsubaThreshold)) { break; }
			n = (n >> $min((1), 31)) >> 0;
			i = i + (1) >>> 0;
		}
		return (y = i, y < 32 ? (n << y) : 0) >> 0;
	};
	nat.prototype.mul = function(x, y) {
		var i, k, m, n, t, x, x0, x0$1, xi, y, y0, y0$1, y1, z;
		z = this;
		m = x.$length;
		n = y.$length;
		if (m < n) {
			return z.mul(y, x);
		} else if ((m === 0) || (n === 0)) {
			return $subslice(z, 0, 0);
		} else if ((n === 1)) {
			return z.mulAddWW(x, (0 >= y.$length ? ($throwRuntimeError("index out of range"), undefined) : y.$array[y.$offset + 0]), 0);
		}
		if (alias(z, x) || alias(z, y)) {
			z = nat.nil;
		}
		if (n < karatsubaThreshold) {
			z = z.make(m + n >> 0);
			basicMul(z, x, y);
			return z.norm();
		}
		k = karatsubaLen(n);
		x0 = $subslice(x, 0, k);
		y0 = $subslice(y, 0, k);
		z = z.make(max($imul(6, k), m + n >> 0));
		karatsuba(z, x0, y0);
		z = $subslice(z, 0, (m + n >> 0));
		$subslice(z, ($imul(2, k))).clear();
		if (k < n || !((m === n))) {
			t = nat.nil;
			x0$1 = x0.norm();
			y1 = $subslice(y, k);
			t = t.mul(x0$1, y1);
			addAt(z, t, k);
			y0$1 = y0.norm();
			i = k;
			while (true) {
				if (!(i < x.$length)) { break; }
				xi = $subslice(x, i);
				if (xi.$length > k) {
					xi = $subslice(xi, 0, k);
				}
				xi = xi.norm();
				t = t.mul(xi, y0$1);
				addAt(z, t, i);
				t = t.mul(xi, y1);
				addAt(z, t, i + k >> 0);
				i = i + (k) >> 0;
			}
		}
		return z.norm();
	};
	$ptrType(nat).prototype.mul = function(x, y) { return this.$get().mul(x, y); };
	basicSqr = function(z, x) {
		var _tuple, _tuple$1, d, i, n, t, x, x$1, x$2, x$3, x$4, x$5, x$6, x$7, x$8, z;
		n = x.$length;
		t = $makeSlice(nat, ($imul(2, n)));
		_tuple = mulWW((0 >= x.$length ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + 0]), (0 >= x.$length ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + 0]));
		(1 >= z.$length ? ($throwRuntimeError("index out of range"), undefined) : z.$array[z.$offset + 1] = _tuple[0]);
		(0 >= z.$length ? ($throwRuntimeError("index out of range"), undefined) : z.$array[z.$offset + 0] = _tuple[1]);
		i = 1;
		while (true) {
			if (!(i < n)) { break; }
			d = ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i]);
			_tuple$1 = mulWW(d, d);
			(x$1 = ($imul(2, i)) + 1 >> 0, ((x$1 < 0 || x$1 >= z.$length) ? ($throwRuntimeError("index out of range"), undefined) : z.$array[z.$offset + x$1] = _tuple$1[0]));
			(x$2 = $imul(2, i), ((x$2 < 0 || x$2 >= z.$length) ? ($throwRuntimeError("index out of range"), undefined) : z.$array[z.$offset + x$2] = _tuple$1[1]));
			(x$5 = $imul(2, i), ((x$5 < 0 || x$5 >= t.$length) ? ($throwRuntimeError("index out of range"), undefined) : t.$array[t.$offset + x$5] = addMulVVW((x$3 = $subslice(t, i, ($imul(2, i))), $subslice(new sliceType$2(x$3.$array), x$3.$offset, x$3.$offset + x$3.$length)), (x$4 = $subslice(x, 0, i), $subslice(new sliceType$2(x$4.$array), x$4.$offset, x$4.$offset + x$4.$length)), d)));
			i = i + (1) >> 0;
		}
		(x$8 = ($imul(2, n)) - 1 >> 0, ((x$8 < 0 || x$8 >= t.$length) ? ($throwRuntimeError("index out of range"), undefined) : t.$array[t.$offset + x$8] = shlVU((x$6 = $subslice(t, 1, (($imul(2, n)) - 1 >> 0)), $subslice(new sliceType$2(x$6.$array), x$6.$offset, x$6.$offset + x$6.$length)), (x$7 = $subslice(t, 1, (($imul(2, n)) - 1 >> 0)), $subslice(new sliceType$2(x$7.$array), x$7.$offset, x$7.$offset + x$7.$length)), 1)));
		addVV($subslice(new sliceType$2(z.$array), z.$offset, z.$offset + z.$length), $subslice(new sliceType$2(z.$array), z.$offset, z.$offset + z.$length), $subslice(new sliceType$2(t.$array), t.$offset, t.$offset + t.$length));
	};
	nat.prototype.sqr = function(x) {
		var _tuple, d, n, x, z;
		z = this;
		n = x.$length;
		if ((n === 0)) {
			return $subslice(z, 0, 0);
		} else if ((n === 1)) {
			d = (0 >= x.$length ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + 0]);
			z = z.make(2);
			_tuple = mulWW(d, d);
			(1 >= z.$length ? ($throwRuntimeError("index out of range"), undefined) : z.$array[z.$offset + 1] = _tuple[0]);
			(0 >= z.$length ? ($throwRuntimeError("index out of range"), undefined) : z.$array[z.$offset + 0] = _tuple[1]);
			return z.norm();
		}
		if (alias(z, x)) {
			z = nat.nil;
		}
		z = z.make($imul(2, n));
		if (n < basicSqrThreshold) {
			basicMul(z, x, x);
			return z.norm();
		}
		if (n < karatsubaSqrThreshold) {
			basicSqr(z, x);
			return z.norm();
		}
		return z.mul(x, x);
	};
	$ptrType(nat).prototype.sqr = function(x) { return this.$get().sqr(x); };
	nat.prototype.mulRange = function(a, b) {
		var a, b, m, x, z;
		z = this;
		if ((a.$high === 0 && a.$low === 0)) {
			return z.setUint64(new $Uint64(0, 0));
		} else if ((a.$high > b.$high || (a.$high === b.$high && a.$low > b.$low))) {
			return z.setUint64(new $Uint64(0, 1));
		} else if ((a.$high === b.$high && a.$low === b.$low)) {
			return z.setUint64(a);
		} else if ((x = new $Uint64(a.$high + 0, a.$low + 1), (x.$high === b.$high && x.$low === b.$low))) {
			return z.mul((nat.nil).setUint64(a), (nat.nil).setUint64(b));
		}
		m = $div64((new $Uint64(a.$high + b.$high, a.$low + b.$low)), new $Uint64(0, 2), false);
		return z.mul((nat.nil).mulRange(a, m), (nat.nil).mulRange(new $Uint64(m.$high + 0, m.$low + 1), b));
	};
	$ptrType(nat).prototype.mulRange = function(a, b) { return this.$get().mulRange(a, b); };
	nat.prototype.divW = function(x, y) {
		var m, q, r, x, y, z;
		q = nat.nil;
		r = 0;
		z = this;
		m = x.$length;
		if ((y === 0)) {
			$panic(new $String("division by zero"));
		} else if ((y === 1)) {
			q = z.set(x);
			return [q, r];
		} else if ((m === 0)) {
			q = $subslice(z, 0, 0);
			return [q, r];
		}
		z = z.make(m);
		r = divWVW($subslice(new sliceType$2(z.$array), z.$offset, z.$offset + z.$length), 0, $subslice(new sliceType$2(x.$array), x.$offset, x.$offset + x.$length), y);
		q = z.norm();
		return [q, r];
	};
	$ptrType(nat).prototype.divW = function(x, y) { return this.$get().divW(x, y); };
	nat.prototype.div = function(z2, u, v) {
		var _r$3, _tuple, _tuple$1, q, r, r2, u, v, z, z2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$3 = $f._r$3; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; q = $f.q; r = $f.r; r2 = $f.r2; u = $f.u; v = $f.v; z = $f.z; z2 = $f.z2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		q = nat.nil;
		r = nat.nil;
		z = this;
		if (v.$length === 0) {
			$panic(new $String("division by zero"));
		}
		if (u.cmp(v) < 0) {
			q = $subslice(z, 0, 0);
			r = z2.set(u);
			$s = -1; return [q, r];
		}
		if (v.$length === 1) {
			r2 = 0;
			_tuple = z.divW(u, (0 >= v.$length ? ($throwRuntimeError("index out of range"), undefined) : v.$array[v.$offset + 0]));
			q = _tuple[0];
			r2 = _tuple[1];
			r = z2.setWord(r2);
			$s = -1; return [q, r];
		}
		_r$3 = z.divLarge(z2, u, v); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_tuple$1 = _r$3;
		q = _tuple$1[0];
		r = _tuple$1[1];
		$s = -1; return [q, r];
		/* */ } return; } if ($f === undefined) { $f = { $blk: nat.prototype.div }; } $f._r$3 = _r$3; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.q = q; $f.r = r; $f.r2 = r2; $f.u = u; $f.v = v; $f.z = z; $f.z2 = z2; $f.$s = $s; $f.$r = $r; return $f;
	};
	$ptrType(nat).prototype.div = function(z2, u, v) { return this.$get().div(z2, u, v); };
	getNat = function(n) {
		var _r$3, n, v, z, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$3 = $f._r$3; n = $f.n; v = $f.v; z = $f.z; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		z = ptrType$4.nil;
		_r$3 = natPool.Get(); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		v = _r$3;
		if (!($interfaceIsEqual(v, $ifaceNil))) {
			z = $assertType(v, ptrType$4);
		}
		if (z === ptrType$4.nil) {
			z = $newDataPointer(nat.nil, ptrType$4);
		}
		z.$set(z.make(n));
		$s = -1; return z;
		/* */ } return; } if ($f === undefined) { $f = { $blk: getNat }; } $f._r$3 = _r$3; $f.n = n; $f.v = v; $f.z = z; $f.$s = $s; $f.$r = $r; return $f;
	};
	putNat = function(x) {
		var x;
		natPool.Put(x);
	};
	nat.prototype.divLarge = function(u, uIn, v) {
		var _index, _r$3, _r$4, _tmp, _tmp$1, _tuple, _tuple$1, _tuple$2, c, c$1, j, m, n, prevRhat, q, qhat, qhatv, qhatvp, r, rhat, shift, u, uIn, ujn, ujn2, v, v1, v1p, vn1, vn2, x, x$1, x$10, x$11, x$12, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9, x1, x2, z, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _index = $f._index; _r$3 = $f._r$3; _r$4 = $f._r$4; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; c = $f.c; c$1 = $f.c$1; j = $f.j; m = $f.m; n = $f.n; prevRhat = $f.prevRhat; q = $f.q; qhat = $f.qhat; qhatv = $f.qhatv; qhatvp = $f.qhatvp; r = $f.r; rhat = $f.rhat; shift = $f.shift; u = $f.u; uIn = $f.uIn; ujn = $f.ujn; ujn2 = $f.ujn2; v = $f.v; v1 = $f.v1; v1p = $f.v1p; vn1 = $f.vn1; vn2 = $f.vn2; x = $f.x; x$1 = $f.x$1; x$10 = $f.x$10; x$11 = $f.x$11; x$12 = $f.x$12; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; x$6 = $f.x$6; x$7 = $f.x$7; x$8 = $f.x$8; x$9 = $f.x$9; x1 = $f.x1; x2 = $f.x2; z = $f.z; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		q = nat.nil;
		r = nat.nil;
		z = this;
		n = v.$length;
		m = uIn.$length - n >> 0;
		if (alias(z, u) || alias(z, uIn) || alias(z, v)) {
			z = nat.nil;
		}
		q = z.make(m + 1 >> 0);
		_r$3 = getNat(n + 1 >> 0); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		qhatvp = _r$3;
		qhatv = qhatvp.$get();
		if (alias(u, uIn) || alias(u, v)) {
			u = nat.nil;
		}
		u = u.make(uIn.$length + 1 >> 0);
		u.clear();
		v1p = ptrType$4.nil;
		shift = nlz((x = n - 1 >> 0, ((x < 0 || x >= v.$length) ? ($throwRuntimeError("index out of range"), undefined) : v.$array[v.$offset + x])));
		/* */ if (shift > 0) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (shift > 0) { */ case 2:
			_r$4 = getNat(n); /* */ $s = 4; case 4: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			v1p = _r$4;
			v1 = v1p.$get();
			shlVU($subslice(new sliceType$2(v1.$array), v1.$offset, v1.$offset + v1.$length), $subslice(new sliceType$2(v.$array), v.$offset, v.$offset + v.$length), shift);
			v = v1;
		/* } */ case 3:
		(x$2 = uIn.$length, ((x$2 < 0 || x$2 >= u.$length) ? ($throwRuntimeError("index out of range"), undefined) : u.$array[u.$offset + x$2] = shlVU((x$1 = $subslice(u, 0, uIn.$length), $subslice(new sliceType$2(x$1.$array), x$1.$offset, x$1.$offset + x$1.$length)), $subslice(new sliceType$2(uIn.$array), uIn.$offset, uIn.$offset + uIn.$length), shift)));
		vn1 = (x$3 = n - 1 >> 0, ((x$3 < 0 || x$3 >= v.$length) ? ($throwRuntimeError("index out of range"), undefined) : v.$array[v.$offset + x$3]));
		j = m;
		while (true) {
			if (!(j >= 0)) { break; }
			qhat = 4294967295;
			ujn = (x$4 = j + n >> 0, ((x$4 < 0 || x$4 >= u.$length) ? ($throwRuntimeError("index out of range"), undefined) : u.$array[u.$offset + x$4]));
			if (!((ujn === vn1))) {
				rhat = 0;
				_tuple = divWW(ujn, (x$5 = (j + n >> 0) - 1 >> 0, ((x$5 < 0 || x$5 >= u.$length) ? ($throwRuntimeError("index out of range"), undefined) : u.$array[u.$offset + x$5])), vn1);
				qhat = _tuple[0];
				rhat = _tuple[1];
				vn2 = (x$6 = n - 2 >> 0, ((x$6 < 0 || x$6 >= v.$length) ? ($throwRuntimeError("index out of range"), undefined) : v.$array[v.$offset + x$6]));
				_tuple$1 = mulWW(qhat, vn2);
				x1 = _tuple$1[0];
				x2 = _tuple$1[1];
				ujn2 = (x$7 = (j + n >> 0) - 2 >> 0, ((x$7 < 0 || x$7 >= u.$length) ? ($throwRuntimeError("index out of range"), undefined) : u.$array[u.$offset + x$7]));
				while (true) {
					if (!(greaterThan(x1, x2, rhat, ujn2))) { break; }
					qhat = qhat - (1) >>> 0;
					prevRhat = rhat;
					rhat = rhat + (vn1) >>> 0;
					if (rhat < prevRhat) {
						break;
					}
					_tuple$2 = mulWW(qhat, vn2);
					x1 = _tuple$2[0];
					x2 = _tuple$2[1];
				}
			}
			((n < 0 || n >= qhatv.$length) ? ($throwRuntimeError("index out of range"), undefined) : qhatv.$array[qhatv.$offset + n] = mulAddVWW((x$8 = $subslice(qhatv, 0, n), $subslice(new sliceType$2(x$8.$array), x$8.$offset, x$8.$offset + x$8.$length)), $subslice(new sliceType$2(v.$array), v.$offset, v.$offset + v.$length), qhat, 0));
			c = subVV((x$9 = $subslice(u, j, (j + qhatv.$length >> 0)), $subslice(new sliceType$2(x$9.$array), x$9.$offset, x$9.$offset + x$9.$length)), (x$10 = $subslice(u, j), $subslice(new sliceType$2(x$10.$array), x$10.$offset, x$10.$offset + x$10.$length)), $subslice(new sliceType$2(qhatv.$array), qhatv.$offset, qhatv.$offset + qhatv.$length));
			if (!((c === 0))) {
				c$1 = addVV((x$11 = $subslice(u, j, (j + n >> 0)), $subslice(new sliceType$2(x$11.$array), x$11.$offset, x$11.$offset + x$11.$length)), (x$12 = $subslice(u, j), $subslice(new sliceType$2(x$12.$array), x$12.$offset, x$12.$offset + x$12.$length)), $subslice(new sliceType$2(v.$array), v.$offset, v.$offset + v.$length));
				_index = j + n >> 0;
				((_index < 0 || _index >= u.$length) ? ($throwRuntimeError("index out of range"), undefined) : u.$array[u.$offset + _index] = (((_index < 0 || _index >= u.$length) ? ($throwRuntimeError("index out of range"), undefined) : u.$array[u.$offset + _index]) + (c$1) >>> 0));
				qhat = qhat - (1) >>> 0;
			}
			((j < 0 || j >= q.$length) ? ($throwRuntimeError("index out of range"), undefined) : q.$array[q.$offset + j] = qhat);
			j = j - (1) >> 0;
		}
		if (!(v1p === ptrType$4.nil)) {
			putNat(v1p);
		}
		putNat(qhatvp);
		q = q.norm();
		shrVU($subslice(new sliceType$2(u.$array), u.$offset, u.$offset + u.$length), $subslice(new sliceType$2(u.$array), u.$offset, u.$offset + u.$length), shift);
		r = u.norm();
		_tmp = q;
		_tmp$1 = r;
		q = _tmp;
		r = _tmp$1;
		$s = -1; return [q, r];
		/* */ } return; } if ($f === undefined) { $f = { $blk: nat.prototype.divLarge }; } $f._index = _index; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f.c = c; $f.c$1 = c$1; $f.j = j; $f.m = m; $f.n = n; $f.prevRhat = prevRhat; $f.q = q; $f.qhat = qhat; $f.qhatv = qhatv; $f.qhatvp = qhatvp; $f.r = r; $f.rhat = rhat; $f.shift = shift; $f.u = u; $f.uIn = uIn; $f.ujn = ujn; $f.ujn2 = ujn2; $f.v = v; $f.v1 = v1; $f.v1p = v1p; $f.vn1 = vn1; $f.vn2 = vn2; $f.x = x; $f.x$1 = x$1; $f.x$10 = x$10; $f.x$11 = x$11; $f.x$12 = x$12; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.x$6 = x$6; $f.x$7 = x$7; $f.x$8 = x$8; $f.x$9 = x$9; $f.x1 = x1; $f.x2 = x2; $f.z = z; $f.$s = $s; $f.$r = $r; return $f;
	};
	$ptrType(nat).prototype.divLarge = function(u, uIn, v) { return this.$get().divLarge(u, uIn, v); };
	nat.prototype.bitLen = function() {
		var i, x;
		x = this;
		i = x.$length - 1 >> 0;
		if (i >= 0) {
			return ($imul(i, 32)) + bits.Len(((((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i]) >>> 0))) >> 0;
		}
		return 0;
	};
	$ptrType(nat).prototype.bitLen = function() { return this.$get().bitLen(); };
	nat.prototype.trailingZeroBits = function() {
		var i, x;
		x = this;
		if (x.$length === 0) {
			return 0;
		}
		i = 0;
		while (true) {
			if (!(((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i]) === 0)) { break; }
			i = i + (1) >>> 0;
		}
		return (i * 32 >>> 0) + ((bits.TrailingZeros(((((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i]) >>> 0))) >>> 0)) >>> 0;
	};
	$ptrType(nat).prototype.trailingZeroBits = function() { return this.$get().trailingZeroBits(); };
	nat.prototype.shl = function(x, s) {
		var _q, _r$3, m, n, s, x, x$1, z;
		z = this;
		m = x.$length;
		if (m === 0) {
			return $subslice(z, 0, 0);
		}
		n = m + (((_q = s / 32, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero")) >> 0)) >> 0;
		z = z.make(n + 1 >> 0);
		((n < 0 || n >= z.$length) ? ($throwRuntimeError("index out of range"), undefined) : z.$array[z.$offset + n] = shlVU((x$1 = $subslice(z, (n - m >> 0), n), $subslice(new sliceType$2(x$1.$array), x$1.$offset, x$1.$offset + x$1.$length)), $subslice(new sliceType$2(x.$array), x.$offset, x.$offset + x.$length), (_r$3 = s % 32, _r$3 === _r$3 ? _r$3 : $throwRuntimeError("integer divide by zero"))));
		$subslice(z, 0, (n - m >> 0)).clear();
		return z.norm();
	};
	$ptrType(nat).prototype.shl = function(x, s) { return this.$get().shl(x, s); };
	nat.prototype.shr = function(x, s) {
		var _q, _r$3, m, n, s, x, x$1, z;
		z = this;
		m = x.$length;
		n = m - (((_q = s / 32, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero")) >> 0)) >> 0;
		if (n <= 0) {
			return $subslice(z, 0, 0);
		}
		z = z.make(n);
		shrVU($subslice(new sliceType$2(z.$array), z.$offset, z.$offset + z.$length), (x$1 = $subslice(x, (m - n >> 0)), $subslice(new sliceType$2(x$1.$array), x$1.$offset, x$1.$offset + x$1.$length)), (_r$3 = s % 32, _r$3 === _r$3 ? _r$3 : $throwRuntimeError("integer divide by zero")));
		return z.norm();
	};
	$ptrType(nat).prototype.shr = function(x, s) { return this.$get().shr(x, s); };
	nat.prototype.setBit = function(x, i, b) {
		var _1, _q, _r$3, b, i, j, m, n, x, y, z;
		z = this;
		j = (((_q = i / 32, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero")) >> 0));
		m = (y = ((_r$3 = i % 32, _r$3 === _r$3 ? _r$3 : $throwRuntimeError("integer divide by zero"))), y < 32 ? (1 << y) : 0) >>> 0;
		n = x.$length;
		_1 = b;
		if (_1 === (0)) {
			z = z.make(n);
			$copySlice(z, x);
			if (j >= n) {
				return z;
			}
			((j < 0 || j >= z.$length) ? ($throwRuntimeError("index out of range"), undefined) : z.$array[z.$offset + j] = ((((j < 0 || j >= z.$length) ? ($throwRuntimeError("index out of range"), undefined) : z.$array[z.$offset + j]) & ~(m)) >>> 0));
			return z.norm();
		} else if (_1 === (1)) {
			if (j >= n) {
				z = z.make(j + 1 >> 0);
				$subslice(z, n).clear();
			} else {
				z = z.make(n);
			}
			$copySlice(z, x);
			((j < 0 || j >= z.$length) ? ($throwRuntimeError("index out of range"), undefined) : z.$array[z.$offset + j] = ((((j < 0 || j >= z.$length) ? ($throwRuntimeError("index out of range"), undefined) : z.$array[z.$offset + j]) | (m)) >>> 0));
			return z;
		}
		$panic(new $String("set bit is not 0 or 1"));
	};
	$ptrType(nat).prototype.setBit = function(x, i, b) { return this.$get().setBit(x, i, b); };
	nat.prototype.bit = function(i) {
		var _q, _r$3, i, j, x, y;
		x = this;
		j = (_q = i / 32, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero"));
		if (j >= ((x.$length >>> 0))) {
			return 0;
		}
		return ((((((y = ((_r$3 = i % 32, _r$3 === _r$3 ? _r$3 : $throwRuntimeError("integer divide by zero"))), y < 32 ? (((j < 0 || j >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + j]) >>> y) : 0) >>> 0) & 1) >>> 0) >>> 0));
	};
	$ptrType(nat).prototype.bit = function(i) { return this.$get().bit(i); };
	nat.prototype.sticky = function(i) {
		var _i, _q, _r$3, _ref, i, j, x, x$1, y;
		x = this;
		j = (_q = i / 32, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero"));
		if (j >= ((x.$length >>> 0))) {
			if (x.$length === 0) {
				return 0;
			}
			return 1;
		}
		_ref = $subslice(x, 0, j);
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			x$1 = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			if (!((x$1 === 0))) {
				return 1;
			}
			_i++;
		}
		if (!((((y = ((32 - (_r$3 = i % 32, _r$3 === _r$3 ? _r$3 : $throwRuntimeError("integer divide by zero")) >>> 0)), y < 32 ? (((j < 0 || j >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + j]) << y) : 0) >>> 0) === 0))) {
			return 1;
		}
		return 0;
	};
	$ptrType(nat).prototype.sticky = function(i) { return this.$get().sticky(i); };
	nat.prototype.and = function(x, y) {
		var i, m, n, x, y, z;
		z = this;
		m = x.$length;
		n = y.$length;
		if (m > n) {
			m = n;
		}
		z = z.make(m);
		i = 0;
		while (true) {
			if (!(i < m)) { break; }
			((i < 0 || i >= z.$length) ? ($throwRuntimeError("index out of range"), undefined) : z.$array[z.$offset + i] = ((((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i]) & ((i < 0 || i >= y.$length) ? ($throwRuntimeError("index out of range"), undefined) : y.$array[y.$offset + i])) >>> 0));
			i = i + (1) >> 0;
		}
		return z.norm();
	};
	$ptrType(nat).prototype.and = function(x, y) { return this.$get().and(x, y); };
	nat.prototype.andNot = function(x, y) {
		var i, m, n, x, y, z;
		z = this;
		m = x.$length;
		n = y.$length;
		if (n > m) {
			n = m;
		}
		z = z.make(m);
		i = 0;
		while (true) {
			if (!(i < n)) { break; }
			((i < 0 || i >= z.$length) ? ($throwRuntimeError("index out of range"), undefined) : z.$array[z.$offset + i] = ((((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i]) & ~((i < 0 || i >= y.$length) ? ($throwRuntimeError("index out of range"), undefined) : y.$array[y.$offset + i])) >>> 0));
			i = i + (1) >> 0;
		}
		$copySlice($subslice(z, n, m), $subslice(x, n, m));
		return z.norm();
	};
	$ptrType(nat).prototype.andNot = function(x, y) { return this.$get().andNot(x, y); };
	nat.prototype.or = function(x, y) {
		var _tmp, _tmp$1, i, m, n, s, x, y, z;
		z = this;
		m = x.$length;
		n = y.$length;
		s = x;
		if (m < n) {
			_tmp = m;
			_tmp$1 = n;
			n = _tmp;
			m = _tmp$1;
			s = y;
		}
		z = z.make(m);
		i = 0;
		while (true) {
			if (!(i < n)) { break; }
			((i < 0 || i >= z.$length) ? ($throwRuntimeError("index out of range"), undefined) : z.$array[z.$offset + i] = ((((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i]) | ((i < 0 || i >= y.$length) ? ($throwRuntimeError("index out of range"), undefined) : y.$array[y.$offset + i])) >>> 0));
			i = i + (1) >> 0;
		}
		$copySlice($subslice(z, n, m), $subslice(s, n, m));
		return z.norm();
	};
	$ptrType(nat).prototype.or = function(x, y) { return this.$get().or(x, y); };
	nat.prototype.xor = function(x, y) {
		var _tmp, _tmp$1, i, m, n, s, x, y, z;
		z = this;
		m = x.$length;
		n = y.$length;
		s = x;
		if (m < n) {
			_tmp = m;
			_tmp$1 = n;
			n = _tmp;
			m = _tmp$1;
			s = y;
		}
		z = z.make(m);
		i = 0;
		while (true) {
			if (!(i < n)) { break; }
			((i < 0 || i >= z.$length) ? ($throwRuntimeError("index out of range"), undefined) : z.$array[z.$offset + i] = ((((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i]) ^ ((i < 0 || i >= y.$length) ? ($throwRuntimeError("index out of range"), undefined) : y.$array[y.$offset + i])) >>> 0));
			i = i + (1) >> 0;
		}
		$copySlice($subslice(z, n, m), $subslice(s, n, m));
		return z.norm();
	};
	$ptrType(nat).prototype.xor = function(x, y) { return this.$get().xor(x, y); };
	greaterThan = function(x1, x2, y1, y2) {
		var x1, x2, y1, y2;
		return x1 > y1 || (x1 === y1) && x2 > y2;
	};
	nat.prototype.modW = function(d) {
		var d, q, r, x;
		r = 0;
		x = this;
		q = nat.nil;
		q = q.make(x.$length);
		r = divWVW($subslice(new sliceType$2(q.$array), q.$offset, q.$offset + q.$length), 0, $subslice(new sliceType$2(x.$array), x.$offset, x.$offset + x.$length), d);
		return r;
	};
	$ptrType(nat).prototype.modW = function(d) { return this.$get().modW(d); };
	nat.prototype.random = function(rand$1, limit, n) {
		var _1, _i, _i$1, _index, _r$3, _r$4, _r$5, _ref, _ref$1, bitLengthOfMSW, i, i$1, limit, mask, n, rand$1, y, z, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _i = $f._i; _i$1 = $f._i$1; _index = $f._index; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _ref = $f._ref; _ref$1 = $f._ref$1; bitLengthOfMSW = $f.bitLengthOfMSW; i = $f.i; i$1 = $f.i$1; limit = $f.limit; mask = $f.mask; n = $f.n; rand$1 = $f.rand$1; y = $f.y; z = $f.z; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		z = this;
		if (alias(z, limit)) {
			z = nat.nil;
		}
		z = z.make(limit.$length);
		bitLengthOfMSW = (((_r$3 = n % 32, _r$3 === _r$3 ? _r$3 : $throwRuntimeError("integer divide by zero")) >>> 0));
		if (bitLengthOfMSW === 0) {
			bitLengthOfMSW = 32;
		}
		mask = (((((y = bitLengthOfMSW, y < 32 ? (1 << y) : 0) >>> 0)) - 1 >>> 0));
		/* while (true) { */ case 1:
				_1 = 32;
				/* */ if (_1 === (32)) { $s = 4; continue; }
				/* */ if (_1 === (64)) { $s = 5; continue; }
				/* */ $s = 6; continue;
				/* if (_1 === (32)) { */ case 4:
					_ref = z;
					_i = 0;
					/* while (true) { */ case 8:
						/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 9; continue; }
						i = _i;
						_r$4 = rand$1.Uint32(); /* */ $s = 10; case 10: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
						((i < 0 || i >= z.$length) ? ($throwRuntimeError("index out of range"), undefined) : z.$array[z.$offset + i] = ((_r$4 >>> 0)));
						_i++;
					/* } */ $s = 8; continue; case 9:
					$s = 7; continue;
				/* } else if (_1 === (64)) { */ case 5:
					_ref$1 = z;
					_i$1 = 0;
					/* while (true) { */ case 11:
						/* if (!(_i$1 < _ref$1.$length)) { break; } */ if(!(_i$1 < _ref$1.$length)) { $s = 12; continue; }
						i$1 = _i$1;
						_r$5 = rand$1.Uint32(); /* */ $s = 13; case 13: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
						((i$1 < 0 || i$1 >= z.$length) ? ($throwRuntimeError("index out of range"), undefined) : z.$array[z.$offset + i$1] = ((((_r$5 >>> 0)) | 0) >>> 0));
						_i$1++;
					/* } */ $s = 11; continue; case 12:
					$s = 7; continue;
				/* } else { */ case 6:
					$panic(new $String("unknown word size"));
				/* } */ case 7:
			case 3:
			_index = limit.$length - 1 >> 0;
			((_index < 0 || _index >= z.$length) ? ($throwRuntimeError("index out of range"), undefined) : z.$array[z.$offset + _index] = ((((_index < 0 || _index >= z.$length) ? ($throwRuntimeError("index out of range"), undefined) : z.$array[z.$offset + _index]) & (mask)) >>> 0));
			if (z.cmp(limit) < 0) {
				/* break; */ $s = 2; continue;
			}
		/* } */ $s = 1; continue; case 2:
		$s = -1; return z.norm();
		/* */ } return; } if ($f === undefined) { $f = { $blk: nat.prototype.random }; } $f._1 = _1; $f._i = _i; $f._i$1 = _i$1; $f._index = _index; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._ref = _ref; $f._ref$1 = _ref$1; $f.bitLengthOfMSW = bitLengthOfMSW; $f.i = i; $f.i$1 = i$1; $f.limit = limit; $f.mask = mask; $f.n = n; $f.rand$1 = rand$1; $f.y = y; $f.z = z; $f.$s = $s; $f.$r = $r; return $f;
	};
	$ptrType(nat).prototype.random = function(rand$1, limit, n) { return this.$get().random(rand$1, limit, n); };
	nat.prototype.expNN = function(x, y, m) {
		var _r$3, _r$4, _r$5, _r$6, _r$7, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$15, _tmp$16, _tmp$17, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tuple, _tuple$1, _tuple$2, i, j, j$1, m, q, r, shift, v, w, x, x$1, y, y$1, y$2, y$3, z, zz, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$10 = $f._tmp$10; _tmp$11 = $f._tmp$11; _tmp$12 = $f._tmp$12; _tmp$13 = $f._tmp$13; _tmp$14 = $f._tmp$14; _tmp$15 = $f._tmp$15; _tmp$16 = $f._tmp$16; _tmp$17 = $f._tmp$17; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; _tmp$6 = $f._tmp$6; _tmp$7 = $f._tmp$7; _tmp$8 = $f._tmp$8; _tmp$9 = $f._tmp$9; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; i = $f.i; j = $f.j; j$1 = $f.j$1; m = $f.m; q = $f.q; r = $f.r; shift = $f.shift; v = $f.v; w = $f.w; x = $f.x; x$1 = $f.x$1; y = $f.y; y$1 = $f.y$1; y$2 = $f.y$2; y$3 = $f.y$3; z = $f.z; zz = $f.zz; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		z = this;
		if (alias(z, x) || alias(z, y)) {
			z = nat.nil;
		}
		if ((m.$length === 1) && ((0 >= m.$length ? ($throwRuntimeError("index out of range"), undefined) : m.$array[m.$offset + 0]) === 1)) {
			$s = -1; return z.setWord(0);
		}
		if (y.$length === 0) {
			$s = -1; return z.setWord(1);
		}
		/* */ if ((y.$length === 1) && ((0 >= y.$length ? ($throwRuntimeError("index out of range"), undefined) : y.$array[y.$offset + 0]) === 1) && !((m.$length === 0))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if ((y.$length === 1) && ((0 >= y.$length ? ($throwRuntimeError("index out of range"), undefined) : y.$array[y.$offset + 0]) === 1) && !((m.$length === 0))) { */ case 1:
			_r$3 = z.div(z, x, m); /* */ $s = 3; case 3: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_tuple = _r$3;
			z = _tuple[1];
			$s = -1; return z;
		/* } */ case 2:
		if (!((m.$length === 0))) {
			z = z.make(m.$length);
		}
		z = z.set(x);
		/* */ if (x.cmp(natOne) > 0 && y.$length > 1 && m.$length > 0) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (x.cmp(natOne) > 0 && y.$length > 1 && m.$length > 0) { */ case 4:
			/* */ if ((((0 >= m.$length ? ($throwRuntimeError("index out of range"), undefined) : m.$array[m.$offset + 0]) & 1) >>> 0) === 1) { $s = 6; continue; }
			/* */ $s = 7; continue;
			/* if ((((0 >= m.$length ? ($throwRuntimeError("index out of range"), undefined) : m.$array[m.$offset + 0]) & 1) >>> 0) === 1) { */ case 6:
				_r$4 = z.expNNMontgomery(x, y, m); /* */ $s = 8; case 8: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				$s = -1; return _r$4;
			/* } */ case 7:
			_r$5 = z.expNNWindowed(x, y, m); /* */ $s = 9; case 9: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			$s = -1; return _r$5;
		/* } */ case 5:
		v = (x$1 = y.$length - 1 >> 0, ((x$1 < 0 || x$1 >= y.$length) ? ($throwRuntimeError("index out of range"), undefined) : y.$array[y.$offset + x$1]));
		shift = nlz(v) + 1 >>> 0;
		v = (y$1 = (shift), y$1 < 32 ? (v << y$1) : 0) >>> 0;
		q = nat.nil;
		w = 32 - ((shift >> 0)) >> 0;
		_tmp = nat.nil;
		_tmp$1 = nat.nil;
		zz = _tmp;
		r = _tmp$1;
		j = 0;
		/* while (true) { */ case 10:
			/* if (!(j < w)) { break; } */ if(!(j < w)) { $s = 11; continue; }
			zz = zz.sqr(z);
			_tmp$2 = z;
			_tmp$3 = zz;
			zz = _tmp$2;
			z = _tmp$3;
			if (!((((v & 2147483648) >>> 0) === 0))) {
				zz = zz.mul(z, x);
				_tmp$4 = z;
				_tmp$5 = zz;
				zz = _tmp$4;
				z = _tmp$5;
			}
			/* */ if (!((m.$length === 0))) { $s = 12; continue; }
			/* */ $s = 13; continue;
			/* if (!((m.$length === 0))) { */ case 12:
				_r$6 = zz.div(r, z, m); /* */ $s = 14; case 14: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
				_tuple$1 = _r$6;
				zz = _tuple$1[0];
				r = _tuple$1[1];
				_tmp$6 = q;
				_tmp$7 = z;
				_tmp$8 = zz;
				_tmp$9 = r;
				zz = _tmp$6;
				r = _tmp$7;
				q = _tmp$8;
				z = _tmp$9;
			/* } */ case 13:
			v = (y$2 = (1), y$2 < 32 ? (v << y$2) : 0) >>> 0;
			j = j + (1) >> 0;
		/* } */ $s = 10; continue; case 11:
		i = y.$length - 2 >> 0;
		/* while (true) { */ case 15:
			/* if (!(i >= 0)) { break; } */ if(!(i >= 0)) { $s = 16; continue; }
			v = ((i < 0 || i >= y.$length) ? ($throwRuntimeError("index out of range"), undefined) : y.$array[y.$offset + i]);
			j$1 = 0;
			/* while (true) { */ case 17:
				/* if (!(j$1 < 32)) { break; } */ if(!(j$1 < 32)) { $s = 18; continue; }
				zz = zz.sqr(z);
				_tmp$10 = z;
				_tmp$11 = zz;
				zz = _tmp$10;
				z = _tmp$11;
				if (!((((v & 2147483648) >>> 0) === 0))) {
					zz = zz.mul(z, x);
					_tmp$12 = z;
					_tmp$13 = zz;
					zz = _tmp$12;
					z = _tmp$13;
				}
				/* */ if (!((m.$length === 0))) { $s = 19; continue; }
				/* */ $s = 20; continue;
				/* if (!((m.$length === 0))) { */ case 19:
					_r$7 = zz.div(r, z, m); /* */ $s = 21; case 21: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
					_tuple$2 = _r$7;
					zz = _tuple$2[0];
					r = _tuple$2[1];
					_tmp$14 = q;
					_tmp$15 = z;
					_tmp$16 = zz;
					_tmp$17 = r;
					zz = _tmp$14;
					r = _tmp$15;
					q = _tmp$16;
					z = _tmp$17;
				/* } */ case 20:
				v = (y$3 = (1), y$3 < 32 ? (v << y$3) : 0) >>> 0;
				j$1 = j$1 + (1) >> 0;
			/* } */ $s = 17; continue; case 18:
			i = i - (1) >> 0;
		/* } */ $s = 15; continue; case 16:
		$s = -1; return z.norm();
		/* */ } return; } if ($f === undefined) { $f = { $blk: nat.prototype.expNN }; } $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$10 = _tmp$10; $f._tmp$11 = _tmp$11; $f._tmp$12 = _tmp$12; $f._tmp$13 = _tmp$13; $f._tmp$14 = _tmp$14; $f._tmp$15 = _tmp$15; $f._tmp$16 = _tmp$16; $f._tmp$17 = _tmp$17; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f._tmp$6 = _tmp$6; $f._tmp$7 = _tmp$7; $f._tmp$8 = _tmp$8; $f._tmp$9 = _tmp$9; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f.i = i; $f.j = j; $f.j$1 = j$1; $f.m = m; $f.q = q; $f.r = r; $f.shift = shift; $f.v = v; $f.w = w; $f.x = x; $f.x$1 = x$1; $f.y = y; $f.y$1 = y$1; $f.y$2 = y$2; $f.y$3 = y$3; $f.z = z; $f.zz = zz; $f.$s = $s; $f.$r = $r; return $f;
	};
	$ptrType(nat).prototype.expNN = function(x, y, m) { return this.$get().expNN(x, y, m); };
	nat.prototype.expNNWindowed = function(x, y, m) {
		var _q, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$15, _tmp$16, _tmp$17, _tmp$18, _tmp$19, _tmp$2, _tmp$20, _tmp$21, _tmp$22, _tmp$23, _tmp$24, _tmp$25, _tmp$26, _tmp$27, _tmp$28, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, _tuple$5, _tuple$6, i, i$1, j, m, p, p1, p2, powers, r, x, x$1, y, y$1, yi, z, zz, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _q = $f._q; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$10 = $f._tmp$10; _tmp$11 = $f._tmp$11; _tmp$12 = $f._tmp$12; _tmp$13 = $f._tmp$13; _tmp$14 = $f._tmp$14; _tmp$15 = $f._tmp$15; _tmp$16 = $f._tmp$16; _tmp$17 = $f._tmp$17; _tmp$18 = $f._tmp$18; _tmp$19 = $f._tmp$19; _tmp$2 = $f._tmp$2; _tmp$20 = $f._tmp$20; _tmp$21 = $f._tmp$21; _tmp$22 = $f._tmp$22; _tmp$23 = $f._tmp$23; _tmp$24 = $f._tmp$24; _tmp$25 = $f._tmp$25; _tmp$26 = $f._tmp$26; _tmp$27 = $f._tmp$27; _tmp$28 = $f._tmp$28; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; _tmp$6 = $f._tmp$6; _tmp$7 = $f._tmp$7; _tmp$8 = $f._tmp$8; _tmp$9 = $f._tmp$9; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; _tuple$4 = $f._tuple$4; _tuple$5 = $f._tuple$5; _tuple$6 = $f._tuple$6; i = $f.i; i$1 = $f.i$1; j = $f.j; m = $f.m; p = $f.p; p1 = $f.p1; p2 = $f.p2; powers = $f.powers; r = $f.r; x = $f.x; x$1 = $f.x$1; y = $f.y; y$1 = $f.y$1; yi = $f.yi; z = $f.z; zz = $f.zz; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		z = this;
		_tmp = nat.nil;
		_tmp$1 = nat.nil;
		zz = _tmp;
		r = _tmp$1;
		powers = arrayType$1.zero();
		powers[0] = natOne;
		powers[1] = x;
		i = 2;
		/* while (true) { */ case 1:
			/* if (!(i < 16)) { break; } */ if(!(i < 16)) { $s = 2; continue; }
			_tmp$2 = $indexPtr(powers, (_q = i / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")), ptrType$4);
			_tmp$3 = $indexPtr(powers, i, ptrType$4);
			_tmp$4 = $indexPtr(powers, (i + 1 >> 0), ptrType$4);
			p2 = _tmp$2;
			p = _tmp$3;
			p1 = _tmp$4;
			p.$set(p.sqr(p2.$get()));
			_r$3 = zz.div(r, p.$get(), m); /* */ $s = 3; case 3: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_tuple = _r$3;
			zz = _tuple[0];
			r = _tuple[1];
			_tmp$5 = r;
			_tmp$6 = p.$get();
			p.$set(_tmp$5);
			r = _tmp$6;
			p1.$set(p1.mul(p.$get(), x));
			_r$4 = zz.div(r, p1.$get(), m); /* */ $s = 4; case 4: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			_tuple$1 = _r$4;
			zz = _tuple$1[0];
			r = _tuple$1[1];
			_tmp$7 = r;
			_tmp$8 = p1.$get();
			p1.$set(_tmp$7);
			r = _tmp$8;
			i = i + (2) >> 0;
		/* } */ $s = 1; continue; case 2:
		z = z.setWord(1);
		i$1 = y.$length - 1 >> 0;
		/* while (true) { */ case 5:
			/* if (!(i$1 >= 0)) { break; } */ if(!(i$1 >= 0)) { $s = 6; continue; }
			yi = ((i$1 < 0 || i$1 >= y.$length) ? ($throwRuntimeError("index out of range"), undefined) : y.$array[y.$offset + i$1]);
			j = 0;
			/* while (true) { */ case 7:
				/* if (!(j < 32)) { break; } */ if(!(j < 32)) { $s = 8; continue; }
				/* */ if (!((i$1 === (y.$length - 1 >> 0))) || !((j === 0))) { $s = 9; continue; }
				/* */ $s = 10; continue;
				/* if (!((i$1 === (y.$length - 1 >> 0))) || !((j === 0))) { */ case 9:
					zz = zz.sqr(z);
					_tmp$9 = z;
					_tmp$10 = zz;
					zz = _tmp$9;
					z = _tmp$10;
					_r$5 = zz.div(r, z, m); /* */ $s = 11; case 11: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
					_tuple$2 = _r$5;
					zz = _tuple$2[0];
					r = _tuple$2[1];
					_tmp$11 = r;
					_tmp$12 = z;
					z = _tmp$11;
					r = _tmp$12;
					zz = zz.sqr(z);
					_tmp$13 = z;
					_tmp$14 = zz;
					zz = _tmp$13;
					z = _tmp$14;
					_r$6 = zz.div(r, z, m); /* */ $s = 12; case 12: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
					_tuple$3 = _r$6;
					zz = _tuple$3[0];
					r = _tuple$3[1];
					_tmp$15 = r;
					_tmp$16 = z;
					z = _tmp$15;
					r = _tmp$16;
					zz = zz.sqr(z);
					_tmp$17 = z;
					_tmp$18 = zz;
					zz = _tmp$17;
					z = _tmp$18;
					_r$7 = zz.div(r, z, m); /* */ $s = 13; case 13: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
					_tuple$4 = _r$7;
					zz = _tuple$4[0];
					r = _tuple$4[1];
					_tmp$19 = r;
					_tmp$20 = z;
					z = _tmp$19;
					r = _tmp$20;
					zz = zz.sqr(z);
					_tmp$21 = z;
					_tmp$22 = zz;
					zz = _tmp$21;
					z = _tmp$22;
					_r$8 = zz.div(r, z, m); /* */ $s = 14; case 14: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
					_tuple$5 = _r$8;
					zz = _tuple$5[0];
					r = _tuple$5[1];
					_tmp$23 = r;
					_tmp$24 = z;
					z = _tmp$23;
					r = _tmp$24;
				/* } */ case 10:
				zz = zz.mul(z, (x$1 = yi >>> 28 >>> 0, ((x$1 < 0 || x$1 >= powers.length) ? ($throwRuntimeError("index out of range"), undefined) : powers[x$1])));
				_tmp$25 = z;
				_tmp$26 = zz;
				zz = _tmp$25;
				z = _tmp$26;
				_r$9 = zz.div(r, z, m); /* */ $s = 15; case 15: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
				_tuple$6 = _r$9;
				zz = _tuple$6[0];
				r = _tuple$6[1];
				_tmp$27 = r;
				_tmp$28 = z;
				z = _tmp$27;
				r = _tmp$28;
				yi = (y$1 = (4), y$1 < 32 ? (yi << y$1) : 0) >>> 0;
				j = j + (4) >> 0;
			/* } */ $s = 7; continue; case 8:
			i$1 = i$1 - (1) >> 0;
		/* } */ $s = 5; continue; case 6:
		$s = -1; return z.norm();
		/* */ } return; } if ($f === undefined) { $f = { $blk: nat.prototype.expNNWindowed }; } $f._q = _q; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$10 = _tmp$10; $f._tmp$11 = _tmp$11; $f._tmp$12 = _tmp$12; $f._tmp$13 = _tmp$13; $f._tmp$14 = _tmp$14; $f._tmp$15 = _tmp$15; $f._tmp$16 = _tmp$16; $f._tmp$17 = _tmp$17; $f._tmp$18 = _tmp$18; $f._tmp$19 = _tmp$19; $f._tmp$2 = _tmp$2; $f._tmp$20 = _tmp$20; $f._tmp$21 = _tmp$21; $f._tmp$22 = _tmp$22; $f._tmp$23 = _tmp$23; $f._tmp$24 = _tmp$24; $f._tmp$25 = _tmp$25; $f._tmp$26 = _tmp$26; $f._tmp$27 = _tmp$27; $f._tmp$28 = _tmp$28; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f._tmp$6 = _tmp$6; $f._tmp$7 = _tmp$7; $f._tmp$8 = _tmp$8; $f._tmp$9 = _tmp$9; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f._tuple$4 = _tuple$4; $f._tuple$5 = _tuple$5; $f._tuple$6 = _tuple$6; $f.i = i; $f.i$1 = i$1; $f.j = j; $f.m = m; $f.p = p; $f.p1 = p1; $f.p2 = p2; $f.powers = powers; $f.r = r; $f.x = x; $f.x$1 = x$1; $f.y = y; $f.y$1 = y$1; $f.yi = yi; $f.z = z; $f.zz = zz; $f.$s = $s; $f.$r = $r; return $f;
	};
	$ptrType(nat).prototype.expNNWindowed = function(x, y, m) { return this.$get().expNNWindowed(x, y, m); };
	nat.prototype.expNNMontgomery = function(x, y, m) {
		var RR, _r$3, _r$4, _r$5, _tmp, _tmp$1, _tuple, _tuple$1, _tuple$2, i, i$1, i$2, j, k0, m, numWords, one, powers, rr, t, x, x$1, x$2, y, y$1, y$2, yi, z, zz, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; RR = $f.RR; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; i = $f.i; i$1 = $f.i$1; i$2 = $f.i$2; j = $f.j; k0 = $f.k0; m = $f.m; numWords = $f.numWords; one = $f.one; powers = $f.powers; rr = $f.rr; t = $f.t; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; y = $f.y; y$1 = $f.y$1; y$2 = $f.y$2; yi = $f.yi; z = $f.z; zz = $f.zz; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		z = this;
		numWords = m.$length;
		/* */ if (x.$length > numWords) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (x.$length > numWords) { */ case 1:
			_r$3 = (nat.nil).div(nat.nil, x, m); /* */ $s = 3; case 3: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_tuple = _r$3;
			x = _tuple[1];
		/* } */ case 2:
		if (x.$length < numWords) {
			rr = $makeSlice(nat, numWords);
			$copySlice(rr, x);
			x = rr;
		}
		k0 = 2 - (0 >= m.$length ? ($throwRuntimeError("index out of range"), undefined) : m.$array[m.$offset + 0]) >>> 0;
		t = (0 >= m.$length ? ($throwRuntimeError("index out of range"), undefined) : m.$array[m.$offset + 0]) - 1 >>> 0;
		i = 1;
		while (true) {
			if (!(i < 32)) { break; }
			t = $imul(t, (t)) >>> 0;
			k0 = $imul(k0, (((t + 1 >>> 0)))) >>> 0;
			i = (y$1 = (1), y$1 < 32 ? (i << y$1) : 0) >> 0;
		}
		k0 = -k0 >>> 0;
		RR = (nat.nil).setWord(1);
		zz = (nat.nil).shl(RR, ((($imul(($imul(2, numWords)), 32)) >>> 0)));
		_r$4 = RR.div(RR, zz, m); /* */ $s = 4; case 4: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		_tuple$1 = _r$4;
		RR = _tuple$1[1];
		if (RR.$length < numWords) {
			zz = zz.make(numWords);
			$copySlice(zz, RR);
			RR = zz;
		}
		one = $makeSlice(nat, numWords);
		(0 >= one.$length ? ($throwRuntimeError("index out of range"), undefined) : one.$array[one.$offset + 0] = 1);
		powers = arrayType$1.zero();
		powers[0] = powers[0].montgomery(one, RR, m, k0, numWords);
		powers[1] = powers[1].montgomery(x, RR, m, k0, numWords);
		i$1 = 2;
		while (true) {
			if (!(i$1 < 16)) { break; }
			((i$1 < 0 || i$1 >= powers.length) ? ($throwRuntimeError("index out of range"), undefined) : powers[i$1] = ((i$1 < 0 || i$1 >= powers.length) ? ($throwRuntimeError("index out of range"), undefined) : powers[i$1]).montgomery((x$1 = i$1 - 1 >> 0, ((x$1 < 0 || x$1 >= powers.length) ? ($throwRuntimeError("index out of range"), undefined) : powers[x$1])), powers[1], m, k0, numWords));
			i$1 = i$1 + (1) >> 0;
		}
		z = z.make(numWords);
		$copySlice(z, powers[0]);
		zz = zz.make(numWords);
		i$2 = y.$length - 1 >> 0;
		while (true) {
			if (!(i$2 >= 0)) { break; }
			yi = ((i$2 < 0 || i$2 >= y.$length) ? ($throwRuntimeError("index out of range"), undefined) : y.$array[y.$offset + i$2]);
			j = 0;
			while (true) {
				if (!(j < 32)) { break; }
				if (!((i$2 === (y.$length - 1 >> 0))) || !((j === 0))) {
					zz = zz.montgomery(z, z, m, k0, numWords);
					z = z.montgomery(zz, zz, m, k0, numWords);
					zz = zz.montgomery(z, z, m, k0, numWords);
					z = z.montgomery(zz, zz, m, k0, numWords);
				}
				zz = zz.montgomery(z, (x$2 = yi >>> 28 >>> 0, ((x$2 < 0 || x$2 >= powers.length) ? ($throwRuntimeError("index out of range"), undefined) : powers[x$2])), m, k0, numWords);
				_tmp = zz;
				_tmp$1 = z;
				z = _tmp;
				zz = _tmp$1;
				yi = (y$2 = (4), y$2 < 32 ? (yi << y$2) : 0) >>> 0;
				j = j + (4) >> 0;
			}
			i$2 = i$2 - (1) >> 0;
		}
		zz = zz.montgomery(z, one, m, k0, numWords);
		/* */ if (zz.cmp(m) >= 0) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if (zz.cmp(m) >= 0) { */ case 5:
			zz = zz.sub(zz, m);
			/* */ if (zz.cmp(m) >= 0) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if (zz.cmp(m) >= 0) { */ case 7:
				_r$5 = (nat.nil).div(nat.nil, zz, m); /* */ $s = 9; case 9: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
				_tuple$2 = _r$5;
				zz = _tuple$2[1];
			/* } */ case 8:
		/* } */ case 6:
		$s = -1; return zz.norm();
		/* */ } return; } if ($f === undefined) { $f = { $blk: nat.prototype.expNNMontgomery }; } $f.RR = RR; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f.i = i; $f.i$1 = i$1; $f.i$2 = i$2; $f.j = j; $f.k0 = k0; $f.m = m; $f.numWords = numWords; $f.one = one; $f.powers = powers; $f.rr = rr; $f.t = t; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.y = y; $f.y$1 = y$1; $f.y$2 = y$2; $f.yi = yi; $f.z = z; $f.zz = zz; $f.$s = $s; $f.$r = $r; return $f;
	};
	$ptrType(nat).prototype.expNNMontgomery = function(x, y, m) { return this.$get().expNNMontgomery(x, y, m); };
	nat.prototype.bytes = function(buf) {
		var _i, _ref, buf, d, i, j, y, z;
		i = 0;
		z = this;
		i = buf.$length;
		_ref = z;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			d = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			j = 0;
			while (true) {
				if (!(j < 4)) { break; }
				i = i - (1) >> 0;
				((i < 0 || i >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + i] = ((d << 24 >>> 24)));
				d = (y = (8), y < 32 ? (d >>> y) : 0) >>> 0;
				j = j + (1) >> 0;
			}
			_i++;
		}
		while (true) {
			if (!(i < buf.$length && (((i < 0 || i >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + i]) === 0))) { break; }
			i = i + (1) >> 0;
		}
		return i;
	};
	$ptrType(nat).prototype.bytes = function(buf) { return this.$get().bytes(buf); };
	nat.prototype.setBytes = function(buf) {
		var _q, buf, d, i, k, s, x, y, z;
		z = this;
		z = z.make((_q = (((buf.$length + 4 >> 0) - 1 >> 0)) / 4, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")));
		k = 0;
		s = 0;
		d = 0;
		i = buf.$length;
		while (true) {
			if (!(i > 0)) { break; }
			d = (d | (((y = s, y < 32 ? ((((x = i - 1 >> 0, ((x < 0 || x >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + x])) >>> 0)) << y) : 0) >>> 0))) >>> 0;
			s = s + (8) >>> 0;
			if (s === 32) {
				((k < 0 || k >= z.$length) ? ($throwRuntimeError("index out of range"), undefined) : z.$array[z.$offset + k] = d);
				k = k + (1) >> 0;
				s = 0;
				d = 0;
			}
			i = i - (1) >> 0;
		}
		if (k < z.$length) {
			((k < 0 || k >= z.$length) ? ($throwRuntimeError("index out of range"), undefined) : z.$array[z.$offset + k] = d);
		}
		return z.norm();
	};
	$ptrType(nat).prototype.setBytes = function(buf) { return this.$get().setBytes(buf); };
	nat.prototype.sqrt = function(x) {
		var _q, _r$3, _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple, n, x, z, z1, z2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _q = $f._q; _r$3 = $f._r$3; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tuple = $f._tuple; n = $f.n; x = $f.x; z = $f.z; z1 = $f.z1; z2 = $f.z2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		z = this;
		if (x.cmp(natOne) <= 0) {
			$s = -1; return z.set(x);
		}
		if (alias(z, x)) {
			z = nat.nil;
		}
		_tmp = nat.nil;
		_tmp$1 = nat.nil;
		z1 = _tmp;
		z2 = _tmp$1;
		z1 = z;
		z1 = z1.setUint64(new $Uint64(0, 1));
		z1 = z1.shl(z1, ((((_q = x.bitLen() / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) + 1 >> 0) >>> 0)));
		n = 0;
		/* while (true) { */ case 1:
			_r$3 = z2.div(nat.nil, x, z1); /* */ $s = 3; case 3: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_tuple = _r$3;
			z2 = _tuple[0];
			z2 = z2.add(z2, z1);
			z2 = z2.shr(z2, 1);
			if (z2.cmp(z1) >= 0) {
				if ((n & 1) === 0) {
					$s = -1; return z1;
				}
				$s = -1; return z.set(z1);
			}
			_tmp$2 = z2;
			_tmp$3 = z1;
			z1 = _tmp$2;
			z2 = _tmp$3;
			n = n + (1) >> 0;
		/* } */ $s = 1; continue; case 2:
		$s = -1; return nat.nil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: nat.prototype.sqrt }; } $f._q = _q; $f._r$3 = _r$3; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tuple = _tuple; $f.n = n; $f.x = x; $f.z = z; $f.z1 = z1; $f.z2 = z2; $f.$s = $s; $f.$r = $r; return $f;
	};
	$ptrType(nat).prototype.sqrt = function(x) { return this.$get().sqrt(x); };
	maxPow = function(b) {
		var _q, _tmp, _tmp$1, b, max$1, n, p;
		p = 0;
		n = 0;
		_tmp = b;
		_tmp$1 = 1;
		p = _tmp;
		n = _tmp$1;
		max$1 = (_q = 4294967295 / b, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero"));
		while (true) {
			if (!(p <= max$1)) { break; }
			p = $imul(p, (b)) >>> 0;
			n = n + (1) >> 0;
		}
		return [p, n];
	};
	pow = function(x, n) {
		var n, p, x;
		p = 0;
		p = 1;
		while (true) {
			if (!(n > 0)) { break; }
			if (!(((n & 1) === 0))) {
				p = $imul(p, (x)) >>> 0;
			}
			x = $imul(x, (x)) >>> 0;
			n = (n >> $min((1), 31)) >> 0;
		}
		return p;
	};
	nat.prototype.scan = function(r, base, fracOk) {
		var _1, _2, _3, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, _tuple$5, b, b1, base, baseOk, bn, ch, count, d1, di, dp, err, fracOk, i, n, r, res, z, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _2 = $f._2; _3 = $f._3; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; _tuple$4 = $f._tuple$4; _tuple$5 = $f._tuple$5; b = $f.b; b1 = $f.b1; base = $f.base; baseOk = $f.baseOk; bn = $f.bn; ch = $f.ch; count = $f.count; d1 = $f.d1; di = $f.di; dp = $f.dp; err = $f.err; fracOk = $f.fracOk; i = $f.i; n = $f.n; r = $f.r; res = $f.res; z = $f.z; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		res = nat.nil;
		b = 0;
		count = 0;
		err = $ifaceNil;
		z = this;
		baseOk = (base === 0) || !fracOk && 2 <= base && base <= 62 || fracOk && ((base === 2) || (base === 10) || (base === 16));
		/* */ if (!baseOk) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!baseOk) { */ case 1:
			_r$3 = fmt.Sprintf("illegal number base %d", new sliceType([new $Int(base)])); /* */ $s = 3; case 3: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			$panic(new $String(_r$3));
		/* } */ case 2:
		_r$4 = r.ReadByte(); /* */ $s = 4; case 4: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		_tuple = _r$4;
		ch = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [res, b, count, err];
		}
		b = base;
		/* */ if (base === 0) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if (base === 0) { */ case 5:
			b = 10;
			/* */ if (ch === 48) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if (ch === 48) { */ case 7:
				count = 1;
					_r$5 = r.ReadByte(); /* */ $s = 10; case 10: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
					_tuple$1 = _r$5;
					ch = _tuple$1[0];
					err = _tuple$1[1];
					_1 = err;
					/* */ if ($interfaceIsEqual(_1, $ifaceNil)) { $s = 11; continue; }
					/* */ if ($interfaceIsEqual(_1, (io.EOF))) { $s = 12; continue; }
					/* */ $s = 13; continue;
					/* if ($interfaceIsEqual(_1, $ifaceNil)) { */ case 11:
						if (!fracOk) {
							b = 8;
						}
						_2 = ch;
						if ((_2 === (120)) || (_2 === (88))) {
							b = 16;
						} else if ((_2 === (98)) || (_2 === (66))) {
							b = 2;
						}
							_3 = b;
							/* */ if ((_3 === (16)) || (_3 === (2))) { $s = 16; continue; }
							/* */ if (_3 === (8)) { $s = 17; continue; }
							/* */ $s = 18; continue;
							/* if ((_3 === (16)) || (_3 === (2))) { */ case 16:
								count = 0;
								_r$6 = r.ReadByte(); /* */ $s = 19; case 19: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
								_tuple$2 = _r$6;
								ch = _tuple$2[0];
								err = _tuple$2[1];
								if (!($interfaceIsEqual(err, $ifaceNil))) {
									$s = -1; return [res, b, count, err];
								}
								$s = 18; continue;
							/* } else if (_3 === (8)) { */ case 17:
								count = 0;
							/* } */ case 18:
						case 15:
						$s = 14; continue;
					/* } else if ($interfaceIsEqual(_1, (io.EOF))) { */ case 12:
						res = $subslice(z, 0, 0);
						err = $ifaceNil;
						$s = -1; return [res, b, count, err];
					/* } else { */ case 13:
						$s = -1; return [res, b, count, err];
					/* } */ case 14:
				case 9:
			/* } */ case 8:
		/* } */ case 6:
		z = $subslice(z, 0, 0);
		b1 = ((b >>> 0));
		_tuple$3 = maxPow(b1);
		bn = _tuple$3[0];
		n = _tuple$3[1];
		di = 0;
		i = 0;
		dp = -1;
		/* while (true) { */ case 20:
			/* */ if (fracOk && (ch === 46)) { $s = 22; continue; }
			/* */ $s = 23; continue;
			/* if (fracOk && (ch === 46)) { */ case 22:
				fracOk = false;
				dp = count;
				_r$7 = r.ReadByte(); /* */ $s = 24; case 24: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
				_tuple$4 = _r$7;
				ch = _tuple$4[0];
				err = _tuple$4[1];
				if (!($interfaceIsEqual(err, $ifaceNil))) {
					if ($interfaceIsEqual(err, io.EOF)) {
						err = $ifaceNil;
						/* break; */ $s = 21; continue;
					}
					$s = -1; return [res, b, count, err];
				}
			/* } */ case 23:
			d1 = 0;
			if (48 <= ch && ch <= 57) {
				d1 = (((ch - 48 << 24 >>> 24) >>> 0));
			} else if (97 <= ch && ch <= 122) {
				d1 = ((((ch - 97 << 24 >>> 24) + 10 << 24 >>> 24) >>> 0));
			} else if (65 <= ch && ch <= 90) {
				if (b <= 36) {
					d1 = ((((ch - 65 << 24 >>> 24) + 10 << 24 >>> 24) >>> 0));
				} else {
					d1 = ((((ch - 65 << 24 >>> 24) + 36 << 24 >>> 24) >>> 0));
				}
			} else {
				d1 = 63;
			}
			/* */ if (d1 >= b1) { $s = 25; continue; }
			/* */ $s = 26; continue;
			/* if (d1 >= b1) { */ case 25:
				_r$8 = r.UnreadByte(); /* */ $s = 27; case 27: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
				_r$8;
				/* break; */ $s = 21; continue;
			/* } */ case 26:
			count = count + (1) >> 0;
			di = ($imul(di, b1) >>> 0) + d1 >>> 0;
			i = i + (1) >> 0;
			if (i === n) {
				z = z.mulAddWW(z, bn, di);
				di = 0;
				i = 0;
			}
			_r$9 = r.ReadByte(); /* */ $s = 28; case 28: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
			_tuple$5 = _r$9;
			ch = _tuple$5[0];
			err = _tuple$5[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				if ($interfaceIsEqual(err, io.EOF)) {
					err = $ifaceNil;
					/* break; */ $s = 21; continue;
				}
				$s = -1; return [res, b, count, err];
			}
		/* } */ $s = 20; continue; case 21:
		if (count === 0) {
			if ((base === 0) && (b === 8)) {
				count = 1;
				b = 10;
			} else if (!((base === 0)) || !((b === 8))) {
				err = errors.New("syntax error scanning number");
			}
			$s = -1; return [res, b, count, err];
		}
		if (i > 0) {
			z = z.mulAddWW(z, pow(b1, i), di);
		}
		res = z.norm();
		if (dp >= 0) {
			count = dp - count >> 0;
		}
		$s = -1; return [res, b, count, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: nat.prototype.scan }; } $f._1 = _1; $f._2 = _2; $f._3 = _3; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f._tuple$4 = _tuple$4; $f._tuple$5 = _tuple$5; $f.b = b; $f.b1 = b1; $f.base = base; $f.baseOk = baseOk; $f.bn = bn; $f.ch = ch; $f.count = count; $f.d1 = d1; $f.di = di; $f.dp = dp; $f.err = err; $f.fracOk = fracOk; $f.i = i; $f.n = n; $f.r = r; $f.res = res; $f.z = z; $f.$s = $s; $f.$r = $r; return $f;
	};
	$ptrType(nat).prototype.scan = function(r, base, fracOk) { return this.$get().scan(r, base, fracOk); };
	nat.prototype.utoa = function(base) {
		var _r$3, base, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$3 = $f._r$3; base = $f.base; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		x = this;
		_r$3 = x.itoa(false, base); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		$s = -1; return _r$3;
		/* */ } return; } if ($f === undefined) { $f = { $blk: nat.prototype.utoa }; } $f._r$3 = _r$3; $f.base = base; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	$ptrType(nat).prototype.utoa = function(base) { return this.$get().utoa(base); };
	nat.prototype.itoa = function(neg, base) {
		var _r$3, _tuple, b, base, bb, i, k, mask, nbits, ndigits, neg, q, s, shift, table, w, x, y, y$1, y$2, y$3, y$4, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$3 = $f._r$3; _tuple = $f._tuple; b = $f.b; base = $f.base; bb = $f.bb; i = $f.i; k = $f.k; mask = $f.mask; nbits = $f.nbits; ndigits = $f.ndigits; neg = $f.neg; q = $f.q; s = $f.s; shift = $f.shift; table = $f.table; w = $f.w; x = $f.x; y = $f.y; y$1 = $f.y$1; y$2 = $f.y$2; y$3 = $f.y$3; y$4 = $f.y$4; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		x = this;
		if (base < 2 || base > 62) {
			$panic(new $String("invalid base"));
		}
		if (x.$length === 0) {
			$s = -1; return (new sliceType$1($stringToBytes("0")));
		}
		i = (((x.bitLen()) / math.Log2((base)) >> 0)) + 1 >> 0;
		if (neg) {
			i = i + (1) >> 0;
		}
		s = $makeSlice(sliceType$1, i);
		b = ((base >>> 0));
		/* */ if (b === ((b & (-b >>> 0)) >>> 0)) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (b === ((b & (-b >>> 0)) >>> 0)) { */ case 1:
			shift = ((bits.TrailingZeros(((b >>> 0))) >>> 0));
			mask = ((((y = shift, y < 32 ? (1 << y) : 0) >>> 0) - 1 >>> 0));
			w = (0 >= x.$length ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + 0]);
			nbits = 32;
			k = 1;
			while (true) {
				if (!(k < x.$length)) { break; }
				while (true) {
					if (!(nbits >= shift)) { break; }
					i = i - (1) >> 0;
					((i < 0 || i >= s.$length) ? ($throwRuntimeError("index out of range"), undefined) : s.$array[s.$offset + i] = "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ".charCodeAt(((w & mask) >>> 0)));
					w = (y$1 = (shift), y$1 < 32 ? (w >>> y$1) : 0) >>> 0;
					nbits = nbits - (shift) >>> 0;
				}
				if (nbits === 0) {
					w = ((k < 0 || k >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + k]);
					nbits = 32;
				} else {
					w = (w | (((y$2 = nbits, y$2 < 32 ? (((k < 0 || k >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + k]) << y$2) : 0) >>> 0))) >>> 0;
					i = i - (1) >> 0;
					((i < 0 || i >= s.$length) ? ($throwRuntimeError("index out of range"), undefined) : s.$array[s.$offset + i] = "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ".charCodeAt(((w & mask) >>> 0)));
					w = (y$3 = ((shift - nbits >>> 0)), y$3 < 32 ? (((k < 0 || k >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + k]) >>> y$3) : 0) >>> 0;
					nbits = 32 - ((shift - nbits >>> 0)) >>> 0;
				}
				k = k + (1) >> 0;
			}
			while (true) {
				if (!(!((w === 0)))) { break; }
				i = i - (1) >> 0;
				((i < 0 || i >= s.$length) ? ($throwRuntimeError("index out of range"), undefined) : s.$array[s.$offset + i] = "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ".charCodeAt(((w & mask) >>> 0)));
				w = (y$4 = (shift), y$4 < 32 ? (w >>> y$4) : 0) >>> 0;
			}
			$s = 3; continue;
		/* } else { */ case 2:
			_tuple = maxPow(b);
			bb = _tuple[0];
			ndigits = _tuple[1];
			_r$3 = divisors(x.$length, b, ndigits, bb); /* */ $s = 4; case 4: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			table = _r$3;
			q = (nat.nil).set(x);
			$r = q.convertWords(s, b, ndigits, bb, table); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			i = 0;
			while (true) {
				if (!(((i < 0 || i >= s.$length) ? ($throwRuntimeError("index out of range"), undefined) : s.$array[s.$offset + i]) === 48)) { break; }
				i = i + (1) >> 0;
			}
		/* } */ case 3:
		if (neg) {
			i = i - (1) >> 0;
			((i < 0 || i >= s.$length) ? ($throwRuntimeError("index out of range"), undefined) : s.$array[s.$offset + i] = 45);
		}
		$s = -1; return $subslice(s, i);
		/* */ } return; } if ($f === undefined) { $f = { $blk: nat.prototype.itoa }; } $f._r$3 = _r$3; $f._tuple = _tuple; $f.b = b; $f.base = base; $f.bb = bb; $f.i = i; $f.k = k; $f.mask = mask; $f.nbits = nbits; $f.ndigits = ndigits; $f.neg = neg; $f.q = q; $f.s = s; $f.shift = shift; $f.table = table; $f.w = w; $f.x = x; $f.y = y; $f.y$1 = y$1; $f.y$2 = y$2; $f.y$3 = y$3; $f.y$4 = y$4; $f.$s = $s; $f.$r = $r; return $f;
	};
	$ptrType(nat).prototype.itoa = function(neg, base) { return this.$get().itoa(neg, base); };
	nat.prototype.convertWords = function(s, b, ndigits, bb, table) {
		var _q, _q$1, _r$3, _r$4, _tuple, _tuple$1, _tuple$2, b, bb, h, i, index, j, j$1, maxLength, minLength, ndigits, q, r, r$1, s, t, table, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _q = $f._q; _q$1 = $f._q$1; _r$3 = $f._r$3; _r$4 = $f._r$4; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; b = $f.b; bb = $f.bb; h = $f.h; i = $f.i; index = $f.index; j = $f.j; j$1 = $f.j$1; maxLength = $f.maxLength; minLength = $f.minLength; ndigits = $f.ndigits; q = $f.q; r = $f.r; r$1 = $f.r$1; s = $f.s; t = $f.t; table = $f.table; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		q = this;
		/* */ if (!(table === sliceType$3.nil)) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!(table === sliceType$3.nil)) { */ case 1:
			r = nat.nil;
			index = table.$length - 1 >> 0;
			/* while (true) { */ case 3:
				/* if (!(q.$length > leafSize)) { break; } */ if(!(q.$length > leafSize)) { $s = 4; continue; }
				maxLength = q.bitLen();
				minLength = maxLength >> 1 >> 0;
				while (true) {
					if (!(index > 0 && (x = index - 1 >> 0, ((x < 0 || x >= table.$length) ? ($throwRuntimeError("index out of range"), undefined) : table.$array[table.$offset + x])).nbits > minLength)) { break; }
					index = index - (1) >> 0;
				}
				if (((index < 0 || index >= table.$length) ? ($throwRuntimeError("index out of range"), undefined) : table.$array[table.$offset + index]).nbits >= maxLength && ((index < 0 || index >= table.$length) ? ($throwRuntimeError("index out of range"), undefined) : table.$array[table.$offset + index]).bbb.cmp(q) >= 0) {
					index = index - (1) >> 0;
					if (index < 0) {
						$panic(new $String("internal inconsistency"));
					}
				}
				_r$3 = q.div(r, q, ((index < 0 || index >= table.$length) ? ($throwRuntimeError("index out of range"), undefined) : table.$array[table.$offset + index]).bbb); /* */ $s = 5; case 5: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				_tuple = _r$3;
				q = _tuple[0];
				r = _tuple[1];
				h = s.$length - ((index < 0 || index >= table.$length) ? ($throwRuntimeError("index out of range"), undefined) : table.$array[table.$offset + index]).ndigits >> 0;
				$r = r.convertWords($subslice(s, h), b, ndigits, bb, $subslice(table, 0, index)); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				s = $subslice(s, 0, h);
			/* } */ $s = 3; continue; case 4:
		/* } */ case 2:
		i = s.$length;
		r$1 = 0;
		if (b === 10) {
			while (true) {
				if (!(q.$length > 0)) { break; }
				_tuple$1 = q.divW(q, bb);
				q = _tuple$1[0];
				r$1 = _tuple$1[1];
				j = 0;
				while (true) {
					if (!(j < ndigits && i > 0)) { break; }
					i = i - (1) >> 0;
					t = (_q = r$1 / 10, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero"));
					((i < 0 || i >= s.$length) ? ($throwRuntimeError("index out of range"), undefined) : s.$array[s.$offset + i] = (48 + (((r$1 - ($imul(t, 10) >>> 0) >>> 0) << 24 >>> 24)) << 24 >>> 24));
					r$1 = t;
					j = j + (1) >> 0;
				}
			}
		} else {
			while (true) {
				if (!(q.$length > 0)) { break; }
				_tuple$2 = q.divW(q, bb);
				q = _tuple$2[0];
				r$1 = _tuple$2[1];
				j$1 = 0;
				while (true) {
					if (!(j$1 < ndigits && i > 0)) { break; }
					i = i - (1) >> 0;
					((i < 0 || i >= s.$length) ? ($throwRuntimeError("index out of range"), undefined) : s.$array[s.$offset + i] = "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ".charCodeAt((_r$4 = r$1 % b, _r$4 === _r$4 ? _r$4 : $throwRuntimeError("integer divide by zero"))));
					r$1 = (_q$1 = r$1 / (b), (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >>> 0 : $throwRuntimeError("integer divide by zero"));
					j$1 = j$1 + (1) >> 0;
				}
			}
		}
		while (true) {
			if (!(i > 0)) { break; }
			i = i - (1) >> 0;
			((i < 0 || i >= s.$length) ? ($throwRuntimeError("index out of range"), undefined) : s.$array[s.$offset + i] = 48);
		}
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: nat.prototype.convertWords }; } $f._q = _q; $f._q$1 = _q$1; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f.b = b; $f.bb = bb; $f.h = h; $f.i = i; $f.index = index; $f.j = j; $f.j$1 = j$1; $f.maxLength = maxLength; $f.minLength = minLength; $f.ndigits = ndigits; $f.q = q; $f.r = r; $f.r$1 = r$1; $f.s = s; $f.t = t; $f.table = table; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	$ptrType(nat).prototype.convertWords = function(s, b, ndigits, bb, table) { return this.$get().convertWords(s, b, ndigits, bb, table); };
	nat.prototype.expWW = function(x, y) {
		var _r$3, x, y, z, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$3 = $f._r$3; x = $f.x; y = $f.y; z = $f.z; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		z = this;
		_r$3 = z.expNN((nat.nil).setWord(x), (nat.nil).setWord(y), nat.nil); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		$s = -1; return _r$3;
		/* */ } return; } if ($f === undefined) { $f = { $blk: nat.prototype.expWW }; } $f._r$3 = _r$3; $f.x = x; $f.y = y; $f.z = z; $f.$s = $s; $f.$r = $r; return $f;
	};
	$ptrType(nat).prototype.expWW = function(x, y) { return this.$get().expWW(x, y); };
	divisors = function(m, b, ndigits, bb) {
		var _r$3, b, bb, i, k, larger, m, ndigits, table, words, x, x$1, x$2, y, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$3 = $f._r$3; b = $f.b; bb = $f.bb; i = $f.i; k = $f.k; larger = $f.larger; m = $f.m; ndigits = $f.ndigits; table = $f.table; words = $f.words; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; y = $f.y; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		if ((leafSize === 0) || m <= leafSize) {
			$s = -1; return sliceType$3.nil;
		}
		k = 1;
		words = leafSize;
		while (true) {
			if (!(words < (m >> 1 >> 0) && k < 64)) { break; }
			k = k + (1) >> 0;
			words = (y = (1), y < 32 ? (words << y) : 0) >> 0;
		}
		table = sliceType$3.nil;
		if (b === 10) {
			cacheBase10.Mutex.Lock();
			table = $subslice(new sliceType$3(cacheBase10.table), 0, k);
		} else {
			table = $makeSlice(sliceType$3, k);
		}
		/* */ if ((x = k - 1 >> 0, ((x < 0 || x >= table.$length) ? ($throwRuntimeError("index out of range"), undefined) : table.$array[table.$offset + x])).ndigits === 0) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if ((x = k - 1 >> 0, ((x < 0 || x >= table.$length) ? ($throwRuntimeError("index out of range"), undefined) : table.$array[table.$offset + x])).ndigits === 0) { */ case 1:
			larger = nat.nil;
			i = 0;
			/* while (true) { */ case 3:
				/* if (!(i < k)) { break; } */ if(!(i < k)) { $s = 4; continue; }
				/* */ if (((i < 0 || i >= table.$length) ? ($throwRuntimeError("index out of range"), undefined) : table.$array[table.$offset + i]).ndigits === 0) { $s = 5; continue; }
				/* */ $s = 6; continue;
				/* if (((i < 0 || i >= table.$length) ? ($throwRuntimeError("index out of range"), undefined) : table.$array[table.$offset + i]).ndigits === 0) { */ case 5:
					/* */ if (i === 0) { $s = 7; continue; }
					/* */ $s = 8; continue;
					/* if (i === 0) { */ case 7:
						_r$3 = (nat.nil).expWW(bb, ((leafSize >>> 0))); /* */ $s = 10; case 10: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
						(0 >= table.$length ? ($throwRuntimeError("index out of range"), undefined) : table.$array[table.$offset + 0]).bbb = _r$3;
						(0 >= table.$length ? ($throwRuntimeError("index out of range"), undefined) : table.$array[table.$offset + 0]).ndigits = $imul(ndigits, leafSize);
						$s = 9; continue;
					/* } else { */ case 8:
						((i < 0 || i >= table.$length) ? ($throwRuntimeError("index out of range"), undefined) : table.$array[table.$offset + i]).bbb = (nat.nil).sqr((x$1 = i - 1 >> 0, ((x$1 < 0 || x$1 >= table.$length) ? ($throwRuntimeError("index out of range"), undefined) : table.$array[table.$offset + x$1])).bbb);
						((i < 0 || i >= table.$length) ? ($throwRuntimeError("index out of range"), undefined) : table.$array[table.$offset + i]).ndigits = $imul(2, (x$2 = i - 1 >> 0, ((x$2 < 0 || x$2 >= table.$length) ? ($throwRuntimeError("index out of range"), undefined) : table.$array[table.$offset + x$2])).ndigits);
					/* } */ case 9:
					larger = (nat.nil).set(((i < 0 || i >= table.$length) ? ($throwRuntimeError("index out of range"), undefined) : table.$array[table.$offset + i]).bbb);
					while (true) {
						if (!(mulAddVWW($subslice(new sliceType$2(larger.$array), larger.$offset, larger.$offset + larger.$length), $subslice(new sliceType$2(larger.$array), larger.$offset, larger.$offset + larger.$length), b, 0) === 0)) { break; }
						((i < 0 || i >= table.$length) ? ($throwRuntimeError("index out of range"), undefined) : table.$array[table.$offset + i]).bbb = ((i < 0 || i >= table.$length) ? ($throwRuntimeError("index out of range"), undefined) : table.$array[table.$offset + i]).bbb.set(larger);
						((i < 0 || i >= table.$length) ? ($throwRuntimeError("index out of range"), undefined) : table.$array[table.$offset + i]).ndigits = ((i < 0 || i >= table.$length) ? ($throwRuntimeError("index out of range"), undefined) : table.$array[table.$offset + i]).ndigits + (1) >> 0;
					}
					((i < 0 || i >= table.$length) ? ($throwRuntimeError("index out of range"), undefined) : table.$array[table.$offset + i]).nbits = ((i < 0 || i >= table.$length) ? ($throwRuntimeError("index out of range"), undefined) : table.$array[table.$offset + i]).bbb.bitLen();
				/* } */ case 6:
				i = i + (1) >> 0;
			/* } */ $s = 3; continue; case 4:
		/* } */ case 2:
		if (b === 10) {
			cacheBase10.Mutex.Unlock();
		}
		$s = -1; return table;
		/* */ } return; } if ($f === undefined) { $f = { $blk: divisors }; } $f._r$3 = _r$3; $f.b = b; $f.bb = bb; $f.i = i; $f.k = k; $f.larger = larger; $f.m = m; $f.ndigits = ndigits; $f.table = table; $f.words = words; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.y = y; $f.$s = $s; $f.$r = $r; return $f;
	};
	Int.ptr.prototype.ProbablyPrime = function(n) {
		var _1, _r$10, _r$11, _r$12, _r$13, _r$14, _r$15, _r$16, _r$17, _r$18, _r$19, _r$20, _r$21, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _tmp, _tmp$1, _v, n, r, rA, rB, w, x, x$1, x$2, x$3, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$12 = $f._r$12; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _r$17 = $f._r$17; _r$18 = $f._r$18; _r$19 = $f._r$19; _r$20 = $f._r$20; _r$21 = $f._r$21; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _v = $f._v; n = $f.n; r = $f.r; rA = $f.rA; rB = $f.rB; w = $f.w; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		x = this;
		if (n < 0) {
			$panic(new $String("negative n for ProbablyPrime"));
		}
		if (x.neg || (x.abs.$length === 0)) {
			$s = -1; return false;
		}
		w = (x$1 = x.abs, (0 >= x$1.$length ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + 0]));
		if ((x.abs.$length === 1) && w < 64) {
			$s = -1; return !((x$2 = (x$3 = $shiftLeft64(new $Uint64(0, 1), w), new $Uint64(673221152 & x$3.$high, (2693408940 & x$3.$low) >>> 0)), (x$2.$high === 0 && x$2.$low === 0)));
		}
		if (((w & 1) >>> 0) === 0) {
			$s = -1; return false;
		}
		_tmp = 0;
		_tmp$1 = 0;
		rA = _tmp;
		rB = _tmp$1;
		_1 = 32;
		if (_1 === (32)) {
			rA = ((x.abs.modW(4127218095) >>> 0));
			rB = ((x.abs.modW(3948078067) >>> 0));
		} else if (_1 === (64)) {
			r = x.abs.modW(820596253);
			rA = (((_r$3 = r % 4127218095, _r$3 === _r$3 ? _r$3 : $throwRuntimeError("integer divide by zero")) >>> 0));
			rB = (((_r$4 = r % 3948078067, _r$4 === _r$4 ? _r$4 : $throwRuntimeError("integer divide by zero")) >>> 0));
		} else {
			$panic(new $String("math/big: invalid word size"));
		}
		if (((_r$5 = rA % 3, _r$5 === _r$5 ? _r$5 : $throwRuntimeError("integer divide by zero")) === 0) || ((_r$6 = rA % 5, _r$6 === _r$6 ? _r$6 : $throwRuntimeError("integer divide by zero")) === 0) || ((_r$7 = rA % 7, _r$7 === _r$7 ? _r$7 : $throwRuntimeError("integer divide by zero")) === 0) || ((_r$8 = rA % 11, _r$8 === _r$8 ? _r$8 : $throwRuntimeError("integer divide by zero")) === 0) || ((_r$9 = rA % 13, _r$9 === _r$9 ? _r$9 : $throwRuntimeError("integer divide by zero")) === 0) || ((_r$10 = rA % 17, _r$10 === _r$10 ? _r$10 : $throwRuntimeError("integer divide by zero")) === 0) || ((_r$11 = rA % 19, _r$11 === _r$11 ? _r$11 : $throwRuntimeError("integer divide by zero")) === 0) || ((_r$12 = rA % 23, _r$12 === _r$12 ? _r$12 : $throwRuntimeError("integer divide by zero")) === 0) || ((_r$13 = rA % 37, _r$13 === _r$13 ? _r$13 : $throwRuntimeError("integer divide by zero")) === 0) || ((_r$14 = rB % 29, _r$14 === _r$14 ? _r$14 : $throwRuntimeError("integer divide by zero")) === 0) || ((_r$15 = rB % 31, _r$15 === _r$15 ? _r$15 : $throwRuntimeError("integer divide by zero")) === 0) || ((_r$16 = rB % 41, _r$16 === _r$16 ? _r$16 : $throwRuntimeError("integer divide by zero")) === 0) || ((_r$17 = rB % 43, _r$17 === _r$17 ? _r$17 : $throwRuntimeError("integer divide by zero")) === 0) || ((_r$18 = rB % 47, _r$18 === _r$18 ? _r$18 : $throwRuntimeError("integer divide by zero")) === 0) || ((_r$19 = rB % 53, _r$19 === _r$19 ? _r$19 : $throwRuntimeError("integer divide by zero")) === 0)) {
			$s = -1; return false;
		}
		_r$20 = x.abs.probablyPrimeMillerRabin(n + 1 >> 0, true); /* */ $s = 2; case 2: if($c) { $c = false; _r$20 = _r$20.$blk(); } if (_r$20 && _r$20.$blk !== undefined) { break s; }
		if (!(_r$20)) { _v = false; $s = 1; continue s; }
		_r$21 = x.abs.probablyPrimeLucas(); /* */ $s = 3; case 3: if($c) { $c = false; _r$21 = _r$21.$blk(); } if (_r$21 && _r$21.$blk !== undefined) { break s; }
		_v = _r$21; case 1:
		$s = -1; return _v;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Int.ptr.prototype.ProbablyPrime }; } $f._1 = _1; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$12 = _r$12; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._r$17 = _r$17; $f._r$18 = _r$18; $f._r$19 = _r$19; $f._r$20 = _r$20; $f._r$21 = _r$21; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._v = _v; $f.n = n; $f.r = r; $f.rA = rA; $f.rB = rB; $f.w = w; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.$s = $s; $f.$r = $r; return $f;
	};
	Int.prototype.ProbablyPrime = function(n) { return this.$val.ProbablyPrime(n); };
	nat.prototype.probablyPrimeMillerRabin = function(reps, force2) {
		var _r$3, _r$4, _r$5, _tmp, _tmp$1, _tmp$2, _tuple, force2, i, j, k, n, nm1, nm3, nm3Len, q, quotient, rand$1, reps, x, x$1, y, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tuple = $f._tuple; force2 = $f.force2; i = $f.i; j = $f.j; k = $f.k; n = $f.n; nm1 = $f.nm1; nm3 = $f.nm3; nm3Len = $f.nm3Len; q = $f.q; quotient = $f.quotient; rand$1 = $f.rand$1; reps = $f.reps; x = $f.x; x$1 = $f.x$1; y = $f.y; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = this;
		nm1 = (nat.nil).sub(n, natOne);
		k = nm1.trailingZeroBits();
		q = (nat.nil).shr(nm1, k);
		nm3 = (nat.nil).sub(nm1, natTwo);
		rand$1 = rand.New(rand.NewSource(((x = (0 >= n.$length ? ($throwRuntimeError("index out of range"), undefined) : n.$array[n.$offset + 0]), new $Int64(0, x.constructor === Number ? x : 1)))));
		_tmp = nat.nil;
		_tmp$1 = nat.nil;
		_tmp$2 = nat.nil;
		x$1 = _tmp;
		y = _tmp$1;
		quotient = _tmp$2;
		nm3Len = nm3.bitLen();
		i = 0;
		/* while (true) { */ case 1:
			/* if (!(i < reps)) { break; } */ if(!(i < reps)) { $s = 2; continue; }
			/* */ if ((i === (reps - 1 >> 0)) && force2) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if ((i === (reps - 1 >> 0)) && force2) { */ case 3:
				x$1 = x$1.set(natTwo);
				$s = 5; continue;
			/* } else { */ case 4:
				_r$3 = x$1.random(rand$1, nm3, nm3Len); /* */ $s = 6; case 6: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				x$1 = _r$3;
				x$1 = x$1.add(x$1, natTwo);
			/* } */ case 5:
			_r$4 = y.expNN(x$1, q, n); /* */ $s = 7; case 7: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			y = _r$4;
			/* */ if ((y.cmp(natOne) === 0) || (y.cmp(nm1) === 0)) { $s = 8; continue; }
			/* */ $s = 9; continue;
			/* if ((y.cmp(natOne) === 0) || (y.cmp(nm1) === 0)) { */ case 8:
				i = i + (1) >> 0;
				/* continue; */ $s = 1; continue;
			/* } */ case 9:
			j = 1;
			/* while (true) { */ case 10:
				/* if (!(j < k)) { break; } */ if(!(j < k)) { $s = 11; continue; }
				y = y.sqr(y);
				_r$5 = quotient.div(y, y, n); /* */ $s = 12; case 12: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
				_tuple = _r$5;
				quotient = _tuple[0];
				y = _tuple[1];
				if (y.cmp(nm1) === 0) {
					i = i + (1) >> 0;
					/* continue NextRandom; */ $s = 1; continue s;
				}
				if (y.cmp(natOne) === 0) {
					$s = -1; return false;
				}
				j = j + (1) >>> 0;
			/* } */ $s = 10; continue; case 11:
			$s = -1; return false;
		/* } */ $s = 1; continue; case 2:
		$s = -1; return true;
		/* */ } return; } if ($f === undefined) { $f = { $blk: nat.prototype.probablyPrimeMillerRabin }; } $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tuple = _tuple; $f.force2 = force2; $f.i = i; $f.j = j; $f.k = k; $f.n = n; $f.nm1 = nm1; $f.nm3 = nm3; $f.nm3Len = nm3Len; $f.q = q; $f.quotient = quotient; $f.rand$1 = rand$1; $f.reps = reps; $f.x = x; $f.x$1 = x$1; $f.y = y; $f.$s = $s; $f.$r = $r; return $f;
	};
	$ptrType(nat).prototype.probablyPrimeMillerRabin = function(reps, force2) { return this.$get().probablyPrimeMillerRabin(reps, force2); };
	nat.prototype.probablyPrimeLucas = function() {
		var _r$10, _r$11, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _tmp, _tmp$1, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, _tuple$5, d, i, intD, intN, j, n, natP, nm2, p, r, s, t, t1, t1$1, t2, t2$1, t3, vk, vk1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; _tuple$4 = $f._tuple$4; _tuple$5 = $f._tuple$5; d = $f.d; i = $f.i; intD = $f.intD; intN = $f.intN; j = $f.j; n = $f.n; natP = $f.natP; nm2 = $f.nm2; p = $f.p; r = $f.r; s = $f.s; t = $f.t; t1 = $f.t1; t1$1 = $f.t1$1; t2 = $f.t2; t2$1 = $f.t2$1; t3 = $f.t3; vk = $f.vk; vk1 = $f.vk1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = this;
		if ((n.$length === 0) || (n.cmp(natOne) === 0)) {
			$s = -1; return false;
		}
		if ((((0 >= n.$length ? ($throwRuntimeError("index out of range"), undefined) : n.$array[n.$offset + 0]) & 1) >>> 0) === 0) {
			$s = -1; return n.cmp(natTwo) === 0;
		}
		p = 3;
		d = new nat([1]);
		t1 = (nat.nil);
		intD = new Int.ptr(false, d);
		intN = new Int.ptr(false, n);
		/* while (true) { */ case 1:
			/* */ if (p > 10000) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (p > 10000) { */ case 3:
				_r$3 = intN.String(); /* */ $s = 5; case 5: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				$panic(new $String("math/big: internal error: cannot find (D/n) = -1 for " + _r$3));
			/* } */ case 4:
			(0 >= d.$length ? ($throwRuntimeError("index out of range"), undefined) : d.$array[d.$offset + 0] = (($imul(p, p) >>> 0) - 4 >>> 0));
			_r$4 = Jacobi(intD, intN); /* */ $s = 6; case 6: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			j = _r$4;
			if (j === -1) {
				/* break; */ $s = 2; continue;
			}
			if (j === 0) {
				$s = -1; return (n.$length === 1) && ((0 >= n.$length ? ($throwRuntimeError("index out of range"), undefined) : n.$array[n.$offset + 0]) === (p + 2 >>> 0));
			}
			/* */ if (p === 40) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if (p === 40) { */ case 7:
				_r$5 = t1.sqrt(n); /* */ $s = 9; case 9: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
				t1 = _r$5;
				t1 = t1.sqr(t1);
				if (t1.cmp(n) === 0) {
					$s = -1; return false;
				}
			/* } */ case 8:
			p = p + (1) >>> 0;
		/* } */ $s = 1; continue; case 2:
		s = (nat.nil).add(n, natOne);
		r = ((s.trailingZeroBits() >> 0));
		s = s.shr(s, ((r >>> 0)));
		nm2 = (nat.nil).sub(n, natTwo);
		natP = (nat.nil).setWord(p);
		vk = (nat.nil).setWord(2);
		vk1 = (nat.nil).setWord(p);
		t2 = (nat.nil);
		i = (s.bitLen());
		/* while (true) { */ case 10:
			/* if (!(i >= 0)) { break; } */ if(!(i >= 0)) { $s = 11; continue; }
			/* */ if (!((s.bit(((i >>> 0))) === 0))) { $s = 12; continue; }
			/* */ $s = 13; continue;
			/* if (!((s.bit(((i >>> 0))) === 0))) { */ case 12:
				t1 = t1.mul(vk, vk1);
				t1 = t1.add(t1, n);
				t1 = t1.sub(t1, natP);
				_r$6 = t2.div(vk, t1, n); /* */ $s = 15; case 15: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
				_tuple = _r$6;
				t2 = _tuple[0];
				vk = _tuple[1];
				t1 = t1.sqr(vk1);
				t1 = t1.add(t1, nm2);
				_r$7 = t2.div(vk1, t1, n); /* */ $s = 16; case 16: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
				_tuple$1 = _r$7;
				t2 = _tuple$1[0];
				vk1 = _tuple$1[1];
				$s = 14; continue;
			/* } else { */ case 13:
				t1 = t1.mul(vk, vk1);
				t1 = t1.add(t1, n);
				t1 = t1.sub(t1, natP);
				_r$8 = t2.div(vk1, t1, n); /* */ $s = 17; case 17: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
				_tuple$2 = _r$8;
				t2 = _tuple$2[0];
				vk1 = _tuple$2[1];
				t1 = t1.sqr(vk);
				t1 = t1.add(t1, nm2);
				_r$9 = t2.div(vk, t1, n); /* */ $s = 18; case 18: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
				_tuple$3 = _r$9;
				t2 = _tuple$3[0];
				vk = _tuple$3[1];
			/* } */ case 14:
			i = i - (1) >> 0;
		/* } */ $s = 10; continue; case 11:
		/* */ if ((vk.cmp(natTwo) === 0) || (vk.cmp(nm2) === 0)) { $s = 19; continue; }
		/* */ $s = 20; continue;
		/* if ((vk.cmp(natTwo) === 0) || (vk.cmp(nm2) === 0)) { */ case 19:
			t1$1 = t1.mul(vk, natP);
			t2$1 = t2.shl(vk1, 1);
			if (t1$1.cmp(t2$1) < 0) {
				_tmp = t2$1;
				_tmp$1 = t1$1;
				t1$1 = _tmp;
				t2$1 = _tmp$1;
			}
			t1$1 = t1$1.sub(t1$1, t2$1);
			t3 = vk1;
			vk1 = nat.nil;
			$unused(vk1);
			_r$10 = t2$1.div(t3, t1$1, n); /* */ $s = 21; case 21: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
			_tuple$4 = _r$10;
			t2$1 = _tuple$4[0];
			t3 = _tuple$4[1];
			if (t3.$length === 0) {
				$s = -1; return true;
			}
		/* } */ case 20:
		t = 0;
		/* while (true) { */ case 22:
			/* if (!(t < (r - 1 >> 0))) { break; } */ if(!(t < (r - 1 >> 0))) { $s = 23; continue; }
			if (vk.$length === 0) {
				$s = -1; return true;
			}
			if ((vk.$length === 1) && ((0 >= vk.$length ? ($throwRuntimeError("index out of range"), undefined) : vk.$array[vk.$offset + 0]) === 2)) {
				$s = -1; return false;
			}
			t1 = t1.sqr(vk);
			t1 = t1.sub(t1, natTwo);
			_r$11 = t2.div(vk, t1, n); /* */ $s = 24; case 24: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
			_tuple$5 = _r$11;
			t2 = _tuple$5[0];
			vk = _tuple$5[1];
			t = t + (1) >> 0;
		/* } */ $s = 22; continue; case 23:
		$s = -1; return false;
		/* */ } return; } if ($f === undefined) { $f = { $blk: nat.prototype.probablyPrimeLucas }; } $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f._tuple$4 = _tuple$4; $f._tuple$5 = _tuple$5; $f.d = d; $f.i = i; $f.intD = intD; $f.intN = intN; $f.j = j; $f.n = n; $f.natP = natP; $f.nm2 = nm2; $f.p = p; $f.r = r; $f.s = s; $f.t = t; $f.t1 = t1; $f.t1$1 = t1$1; $f.t2 = t2; $f.t2$1 = t2$1; $f.t3 = t3; $f.vk = vk; $f.vk1 = vk1; $f.$s = $s; $f.$r = $r; return $f;
	};
	$ptrType(nat).prototype.probablyPrimeLucas = function() { return this.$get().probablyPrimeLucas(); };
	Rat.ptr.prototype.SetFloat64 = function(f) {
		var _1, _r$3, bits$1, exp, f, mantissa, shift, x, x$1, x$2, z, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _r$3 = $f._r$3; bits$1 = $f.bits$1; exp = $f.exp; f = $f.f; mantissa = $f.mantissa; shift = $f.shift; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; z = $f.z; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		z = this;
		bits$1 = math.Float64bits(f);
		mantissa = new $Uint64(bits$1.$high & 1048575, (bits$1.$low & 4294967295) >>> 0);
		exp = (((x = $shiftRightUint64(bits$1, 52), new $Uint64(x.$high & 0, (x.$low & 2047) >>> 0)).$low >> 0));
		_1 = exp;
		if (_1 === (2047)) {
			$s = -1; return ptrType$2.nil;
		} else if (_1 === (0)) {
			exp = exp - (1022) >> 0;
		} else {
			mantissa = (x$1 = new $Uint64(1048576, 0), new $Uint64(mantissa.$high | x$1.$high, (mantissa.$low | x$1.$low) >>> 0));
			exp = exp - (1023) >> 0;
		}
		shift = 52 - exp >> 0;
		while (true) {
			if (!((x$2 = new $Uint64(mantissa.$high & 0, (mantissa.$low & 1) >>> 0), (x$2.$high === 0 && x$2.$low === 0)) && shift > 0)) { break; }
			mantissa = $shiftRightUint64(mantissa, (1));
			shift = shift - (1) >> 0;
		}
		z.a.SetUint64(mantissa);
		z.a.neg = f < 0;
		z.b.Set(intOne);
		if (shift > 0) {
			z.b.Lsh(z.b, ((shift >>> 0)));
		} else {
			z.a.Lsh(z.a, ((-shift >>> 0)));
		}
		_r$3 = z.norm(); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		$s = -1; return _r$3;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Rat.ptr.prototype.SetFloat64 }; } $f._1 = _1; $f._r$3 = _r$3; $f.bits$1 = bits$1; $f.exp = exp; $f.f = f; $f.mantissa = mantissa; $f.shift = shift; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.z = z; $f.$s = $s; $f.$r = $r; return $f;
	};
	Rat.prototype.SetFloat64 = function(f) { return this.$val.SetFloat64(f); };
	quotToFloat32 = function(a, b) {
		var _r$3, _r$4, _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple, a, a2, alen, b, b2, blen, exact, exp, f, haveRem, lostbits, mantissa, q, r, shift, shift$1, y, y$1, y$2, y$3, y$4, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$3 = $f._r$3; _r$4 = $f._r$4; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tuple = $f._tuple; a = $f.a; a2 = $f.a2; alen = $f.alen; b = $f.b; b2 = $f.b2; blen = $f.blen; exact = $f.exact; exp = $f.exp; f = $f.f; haveRem = $f.haveRem; lostbits = $f.lostbits; mantissa = $f.mantissa; q = $f.q; r = $f.r; shift = $f.shift; shift$1 = $f.shift$1; y = $f.y; y$1 = $f.y$1; y$2 = $f.y$2; y$3 = $f.y$3; y$4 = $f.y$4; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		f = 0;
		exact = false;
		alen = a.bitLen();
		if (alen === 0) {
			_tmp = 0;
			_tmp$1 = true;
			f = _tmp;
			exact = _tmp$1;
			$s = -1; return [f, exact];
		}
		blen = b.bitLen();
		if (blen === 0) {
			$panic(new $String("division by zero"));
		}
		exp = alen - blen >> 0;
		_tmp$2 = nat.nil;
		_tmp$3 = nat.nil;
		a2 = _tmp$2;
		b2 = _tmp$3;
		a2 = a2.set(a);
		b2 = b2.set(b);
		shift = 25 - exp >> 0;
		if (shift > 0) {
			a2 = a2.shl(a2, ((shift >>> 0)));
		} else if (shift < 0) {
			b2 = b2.shl(b2, ((-shift >>> 0)));
		}
		q = nat.nil;
		_r$3 = q.div(a2, a2, b2); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_tuple = _r$3;
		q = _tuple[0];
		r = _tuple[1];
		mantissa = low32(q);
		haveRem = r.$length > 0;
		if ((mantissa >>> 25 >>> 0) === 1) {
			if (((mantissa & 1) >>> 0) === 1) {
				haveRem = true;
			}
			mantissa = (y = (1), y < 32 ? (mantissa >>> y) : 0) >>> 0;
			exp = exp + (1) >> 0;
		}
		/* */ if (!(((mantissa >>> 24 >>> 0) === 1))) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!(((mantissa >>> 24 >>> 0) === 1))) { */ case 2:
			_r$4 = fmt.Sprintf("expected exactly %d bits of result", new sliceType([new $Int(25)])); /* */ $s = 4; case 4: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			$panic(new $String(_r$4));
		/* } */ case 3:
		if (-149 <= exp && exp <= -126) {
			shift$1 = (((-126 - ((exp - 1 >> 0)) >> 0) >>> 0));
			lostbits = (mantissa & ((((y$1 = shift$1, y$1 < 32 ? (1 << y$1) : 0) >>> 0) - 1 >>> 0))) >>> 0;
			haveRem = haveRem || !((lostbits === 0));
			mantissa = (y$2 = (shift$1), y$2 < 32 ? (mantissa >>> y$2) : 0) >>> 0;
			exp = -125;
		}
		exact = !haveRem;
		if (!((((mantissa & 1) >>> 0) === 0))) {
			exact = false;
			if (haveRem || !((((mantissa & 2) >>> 0) === 0))) {
				mantissa = mantissa + (1) >>> 0;
				if (mantissa >= 33554432) {
					mantissa = (y$3 = (1), y$3 < 32 ? (mantissa >>> y$3) : 0) >>> 0;
					exp = exp + (1) >> 0;
				}
			}
		}
		mantissa = (y$4 = (1), y$4 < 32 ? (mantissa >>> y$4) : 0) >>> 0;
		f = ($fround(math.Ldexp((mantissa), exp - 24 >> 0)));
		if (math.IsInf((f), 0)) {
			exact = false;
		}
		$s = -1; return [f, exact];
		/* */ } return; } if ($f === undefined) { $f = { $blk: quotToFloat32 }; } $f._r$3 = _r$3; $f._r$4 = _r$4; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tuple = _tuple; $f.a = a; $f.a2 = a2; $f.alen = alen; $f.b = b; $f.b2 = b2; $f.blen = blen; $f.exact = exact; $f.exp = exp; $f.f = f; $f.haveRem = haveRem; $f.lostbits = lostbits; $f.mantissa = mantissa; $f.q = q; $f.r = r; $f.shift = shift; $f.shift$1 = shift$1; $f.y = y; $f.y$1 = y$1; $f.y$2 = y$2; $f.y$3 = y$3; $f.y$4 = y$4; $f.$s = $s; $f.$r = $r; return $f;
	};
	quotToFloat64 = function(a, b) {
		var _r$3, _r$4, _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple, a, a2, alen, b, b2, blen, exact, exp, f, haveRem, lostbits, mantissa, q, r, shift, shift$1, x, x$1, x$2, x$3, x$4, x$5, x$6, x$7, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$3 = $f._r$3; _r$4 = $f._r$4; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tuple = $f._tuple; a = $f.a; a2 = $f.a2; alen = $f.alen; b = $f.b; b2 = $f.b2; blen = $f.blen; exact = $f.exact; exp = $f.exp; f = $f.f; haveRem = $f.haveRem; lostbits = $f.lostbits; mantissa = $f.mantissa; q = $f.q; r = $f.r; shift = $f.shift; shift$1 = $f.shift$1; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; x$6 = $f.x$6; x$7 = $f.x$7; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		f = 0;
		exact = false;
		alen = a.bitLen();
		if (alen === 0) {
			_tmp = 0;
			_tmp$1 = true;
			f = _tmp;
			exact = _tmp$1;
			$s = -1; return [f, exact];
		}
		blen = b.bitLen();
		if (blen === 0) {
			$panic(new $String("division by zero"));
		}
		exp = alen - blen >> 0;
		_tmp$2 = nat.nil;
		_tmp$3 = nat.nil;
		a2 = _tmp$2;
		b2 = _tmp$3;
		a2 = a2.set(a);
		b2 = b2.set(b);
		shift = 54 - exp >> 0;
		if (shift > 0) {
			a2 = a2.shl(a2, ((shift >>> 0)));
		} else if (shift < 0) {
			b2 = b2.shl(b2, ((-shift >>> 0)));
		}
		q = nat.nil;
		_r$3 = q.div(a2, a2, b2); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_tuple = _r$3;
		q = _tuple[0];
		r = _tuple[1];
		mantissa = low64(q);
		haveRem = r.$length > 0;
		if ((x = $shiftRightUint64(mantissa, 54), (x.$high === 0 && x.$low === 1))) {
			if ((x$1 = new $Uint64(mantissa.$high & 0, (mantissa.$low & 1) >>> 0), (x$1.$high === 0 && x$1.$low === 1))) {
				haveRem = true;
			}
			mantissa = $shiftRightUint64(mantissa, (1));
			exp = exp + (1) >> 0;
		}
		/* */ if (!((x$2 = $shiftRightUint64(mantissa, 53), (x$2.$high === 0 && x$2.$low === 1)))) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!((x$2 = $shiftRightUint64(mantissa, 53), (x$2.$high === 0 && x$2.$low === 1)))) { */ case 2:
			_r$4 = fmt.Sprintf("expected exactly %d bits of result", new sliceType([new $Int(54)])); /* */ $s = 4; case 4: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			$panic(new $String(_r$4));
		/* } */ case 3:
		if (-1074 <= exp && exp <= -1022) {
			shift$1 = (((-1022 - ((exp - 1 >> 0)) >> 0) >>> 0));
			lostbits = (x$3 = (x$4 = $shiftLeft64(new $Uint64(0, 1), shift$1), new $Uint64(x$4.$high - 0, x$4.$low - 1)), new $Uint64(mantissa.$high & x$3.$high, (mantissa.$low & x$3.$low) >>> 0));
			haveRem = haveRem || !((lostbits.$high === 0 && lostbits.$low === 0));
			mantissa = $shiftRightUint64(mantissa, (shift$1));
			exp = -1021;
		}
		exact = !haveRem;
		if (!((x$5 = new $Uint64(mantissa.$high & 0, (mantissa.$low & 1) >>> 0), (x$5.$high === 0 && x$5.$low === 0)))) {
			exact = false;
			if (haveRem || !((x$6 = new $Uint64(mantissa.$high & 0, (mantissa.$low & 2) >>> 0), (x$6.$high === 0 && x$6.$low === 0)))) {
				mantissa = (x$7 = new $Uint64(0, 1), new $Uint64(mantissa.$high + x$7.$high, mantissa.$low + x$7.$low));
				if ((mantissa.$high > 4194304 || (mantissa.$high === 4194304 && mantissa.$low >= 0))) {
					mantissa = $shiftRightUint64(mantissa, (1));
					exp = exp + (1) >> 0;
				}
			}
		}
		mantissa = $shiftRightUint64(mantissa, (1));
		f = math.Ldexp(($flatten64(mantissa)), exp - 53 >> 0);
		if (math.IsInf(f, 0)) {
			exact = false;
		}
		$s = -1; return [f, exact];
		/* */ } return; } if ($f === undefined) { $f = { $blk: quotToFloat64 }; } $f._r$3 = _r$3; $f._r$4 = _r$4; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tuple = _tuple; $f.a = a; $f.a2 = a2; $f.alen = alen; $f.b = b; $f.b2 = b2; $f.blen = blen; $f.exact = exact; $f.exp = exp; $f.f = f; $f.haveRem = haveRem; $f.lostbits = lostbits; $f.mantissa = mantissa; $f.q = q; $f.r = r; $f.shift = shift; $f.shift$1 = shift$1; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.x$6 = x$6; $f.x$7 = x$7; $f.$s = $s; $f.$r = $r; return $f;
	};
	Rat.ptr.prototype.Float32 = function() {
		var _r$3, _tuple, b, exact, f, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$3 = $f._r$3; _tuple = $f._tuple; b = $f.b; exact = $f.exact; f = $f.f; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		f = 0;
		exact = false;
		x = this;
		b = x.b.abs;
		if (b.$length === 0) {
			b = b.set(natOne);
		}
		_r$3 = quotToFloat32(x.a.abs, b); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_tuple = _r$3;
		f = _tuple[0];
		exact = _tuple[1];
		if (x.a.neg) {
			f = -f;
		}
		$s = -1; return [f, exact];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Rat.ptr.prototype.Float32 }; } $f._r$3 = _r$3; $f._tuple = _tuple; $f.b = b; $f.exact = exact; $f.f = f; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Rat.prototype.Float32 = function() { return this.$val.Float32(); };
	Rat.ptr.prototype.Float64 = function() {
		var _r$3, _tuple, b, exact, f, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$3 = $f._r$3; _tuple = $f._tuple; b = $f.b; exact = $f.exact; f = $f.f; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		f = 0;
		exact = false;
		x = this;
		b = x.b.abs;
		if (b.$length === 0) {
			b = b.set(natOne);
		}
		_r$3 = quotToFloat64(x.a.abs, b); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_tuple = _r$3;
		f = _tuple[0];
		exact = _tuple[1];
		if (x.a.neg) {
			f = -f;
		}
		$s = -1; return [f, exact];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Rat.ptr.prototype.Float64 }; } $f._r$3 = _r$3; $f._tuple = _tuple; $f.b = b; $f.exact = exact; $f.f = f; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Rat.prototype.Float64 = function() { return this.$val.Float64(); };
	Rat.ptr.prototype.SetFrac = function(a, b) {
		var _r$3, a, b, babs, z, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$3 = $f._r$3; a = $f.a; b = $f.b; babs = $f.babs; z = $f.z; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		z = this;
		z.a.neg = !(a.neg === b.neg);
		babs = b.abs;
		if (babs.$length === 0) {
			$panic(new $String("division by zero"));
		}
		if (z.a === b || alias(z.a.abs, babs)) {
			babs = (nat.nil).set(babs);
		}
		z.a.abs = z.a.abs.set(a.abs);
		z.b.abs = z.b.abs.set(babs);
		_r$3 = z.norm(); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		$s = -1; return _r$3;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Rat.ptr.prototype.SetFrac }; } $f._r$3 = _r$3; $f.a = a; $f.b = b; $f.babs = babs; $f.z = z; $f.$s = $s; $f.$r = $r; return $f;
	};
	Rat.prototype.SetFrac = function(a, b) { return this.$val.SetFrac(a, b); };
	Rat.ptr.prototype.SetFrac64 = function(a, b) {
		var _r$3, a, b, z, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$3 = $f._r$3; a = $f.a; b = $f.b; z = $f.z; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		z = this;
		z.a.SetInt64(a);
		if ((b.$high === 0 && b.$low === 0)) {
			$panic(new $String("division by zero"));
		}
		if ((b.$high < 0 || (b.$high === 0 && b.$low < 0))) {
			b = new $Int64(-b.$high, -b.$low);
			z.a.neg = !z.a.neg;
		}
		z.b.abs = z.b.abs.setUint64((new $Uint64(b.$high, b.$low)));
		_r$3 = z.norm(); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		$s = -1; return _r$3;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Rat.ptr.prototype.SetFrac64 }; } $f._r$3 = _r$3; $f.a = a; $f.b = b; $f.z = z; $f.$s = $s; $f.$r = $r; return $f;
	};
	Rat.prototype.SetFrac64 = function(a, b) { return this.$val.SetFrac64(a, b); };
	Rat.ptr.prototype.SetInt = function(x) {
		var x, z;
		z = this;
		z.a.Set(x);
		z.b.abs = $subslice(z.b.abs, 0, 0);
		return z;
	};
	Rat.prototype.SetInt = function(x) { return this.$val.SetInt(x); };
	Rat.ptr.prototype.SetInt64 = function(x) {
		var x, z;
		z = this;
		z.a.SetInt64(x);
		z.b.abs = $subslice(z.b.abs, 0, 0);
		return z;
	};
	Rat.prototype.SetInt64 = function(x) { return this.$val.SetInt64(x); };
	Rat.ptr.prototype.Set = function(x) {
		var x, z;
		z = this;
		if (!(z === x)) {
			z.a.Set(x.a);
			z.b.Set(x.b);
		}
		return z;
	};
	Rat.prototype.Set = function(x) { return this.$val.Set(x); };
	Rat.ptr.prototype.Abs = function(x) {
		var x, z;
		z = this;
		z.Set(x);
		z.a.neg = false;
		return z;
	};
	Rat.prototype.Abs = function(x) { return this.$val.Abs(x); };
	Rat.ptr.prototype.Neg = function(x) {
		var x, z;
		z = this;
		z.Set(x);
		z.a.neg = z.a.abs.$length > 0 && !z.a.neg;
		return z;
	};
	Rat.prototype.Neg = function(x) { return this.$val.Neg(x); };
	Rat.ptr.prototype.Inv = function(x) {
		var _tmp, _tmp$1, a, b, x, z;
		z = this;
		if (x.a.abs.$length === 0) {
			$panic(new $String("division by zero"));
		}
		z.Set(x);
		a = z.b.abs;
		if (a.$length === 0) {
			a = a.set(natOne);
		}
		b = z.a.abs;
		if (b.cmp(natOne) === 0) {
			b = $subslice(b, 0, 0);
		}
		_tmp = a;
		_tmp$1 = b;
		z.a.abs = _tmp;
		z.b.abs = _tmp$1;
		return z;
	};
	Rat.prototype.Inv = function(x) { return this.$val.Inv(x); };
	Rat.ptr.prototype.Sign = function() {
		var x;
		x = this;
		return x.a.Sign();
	};
	Rat.prototype.Sign = function() { return this.$val.Sign(); };
	Rat.ptr.prototype.IsInt = function() {
		var x;
		x = this;
		return (x.b.abs.$length === 0) || (x.b.abs.cmp(natOne) === 0);
	};
	Rat.prototype.IsInt = function() { return this.$val.IsInt(); };
	Rat.ptr.prototype.Num = function() {
		var x;
		x = this;
		return x.a;
	};
	Rat.prototype.Num = function() { return this.$val.Num(); };
	Rat.ptr.prototype.Denom = function() {
		var x;
		x = this;
		x.b.neg = false;
		if (x.b.abs.$length === 0) {
			x.b.abs = x.b.abs.set(natOne);
		}
		return x.b;
	};
	Rat.prototype.Denom = function() { return this.$val.Denom(); };
	Rat.ptr.prototype.norm = function() {
		var _r$3, _r$4, _r$5, _tuple, _tuple$1, f, neg, z, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; f = $f.f; neg = $f.neg; z = $f.z; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		z = this;
			/* */ if ((z.a.abs.$length === 0)) { $s = 2; continue; }
			/* */ if ((z.b.abs.$length === 0)) { $s = 3; continue; }
			/* */ if ((z.b.abs.cmp(natOne) === 0)) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if ((z.a.abs.$length === 0)) { */ case 2:
				z.a.neg = false;
				z.b.abs = $subslice(z.b.abs, 0, 0);
				$s = 6; continue;
			/* } else if ((z.b.abs.$length === 0)) { */ case 3:
				$s = 6; continue;
			/* } else if ((z.b.abs.cmp(natOne) === 0)) { */ case 4:
				z.b.abs = $subslice(z.b.abs, 0, 0);
				$s = 6; continue;
			/* } else { */ case 5:
				neg = z.a.neg;
				z.a.neg = false;
				z.b.neg = false;
				_r$3 = NewInt(new $Int64(0, 0)).lehmerGCD(z.a, z.b); /* */ $s = 7; case 7: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				f = _r$3;
				/* */ if (!((f.Cmp(intOne) === 0))) { $s = 8; continue; }
				/* */ $s = 9; continue;
				/* if (!((f.Cmp(intOne) === 0))) { */ case 8:
					_r$4 = z.a.abs.div(nat.nil, z.a.abs, f.abs); /* */ $s = 10; case 10: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
					_tuple = _r$4;
					z.a.abs = _tuple[0];
					_r$5 = z.b.abs.div(nat.nil, z.b.abs, f.abs); /* */ $s = 11; case 11: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
					_tuple$1 = _r$5;
					z.b.abs = _tuple$1[0];
					if (z.b.abs.cmp(natOne) === 0) {
						z.b.abs = $subslice(z.b.abs, 0, 0);
					}
				/* } */ case 9:
				z.a.neg = neg;
			/* } */ case 6:
		case 1:
		$s = -1; return z;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Rat.ptr.prototype.norm }; } $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.f = f; $f.neg = neg; $f.z = z; $f.$s = $s; $f.$r = $r; return $f;
	};
	Rat.prototype.norm = function() { return this.$val.norm(); };
	mulDenom = function(z, x, y) {
		var x, y, z;
		if ((x.$length === 0)) {
			return z.set(y);
		} else if ((y.$length === 0)) {
			return z.set(x);
		}
		return z.mul(x, y);
	};
	scaleDenom = function(x, f) {
		var f, x, z;
		z = new Int.ptr(false, nat.nil);
		if (f.$length === 0) {
			return z.Set(x);
		}
		z.abs = z.abs.mul(x.abs, f);
		z.neg = x.neg;
		return z;
	};
	Rat.ptr.prototype.Cmp = function(y) {
		var x, y;
		x = this;
		return scaleDenom(x.a, y.b.abs).Cmp(scaleDenom(y.a, x.b.abs));
	};
	Rat.prototype.Cmp = function(y) { return this.$val.Cmp(y); };
	Rat.ptr.prototype.Add = function(x, y) {
		var _r$3, a1, a2, x, y, z, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$3 = $f._r$3; a1 = $f.a1; a2 = $f.a2; x = $f.x; y = $f.y; z = $f.z; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		z = this;
		a1 = scaleDenom(x.a, y.b.abs);
		a2 = scaleDenom(y.a, x.b.abs);
		z.a.Add(a1, a2);
		z.b.abs = mulDenom(z.b.abs, x.b.abs, y.b.abs);
		_r$3 = z.norm(); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		$s = -1; return _r$3;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Rat.ptr.prototype.Add }; } $f._r$3 = _r$3; $f.a1 = a1; $f.a2 = a2; $f.x = x; $f.y = y; $f.z = z; $f.$s = $s; $f.$r = $r; return $f;
	};
	Rat.prototype.Add = function(x, y) { return this.$val.Add(x, y); };
	Rat.ptr.prototype.Sub = function(x, y) {
		var _r$3, a1, a2, x, y, z, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$3 = $f._r$3; a1 = $f.a1; a2 = $f.a2; x = $f.x; y = $f.y; z = $f.z; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		z = this;
		a1 = scaleDenom(x.a, y.b.abs);
		a2 = scaleDenom(y.a, x.b.abs);
		z.a.Sub(a1, a2);
		z.b.abs = mulDenom(z.b.abs, x.b.abs, y.b.abs);
		_r$3 = z.norm(); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		$s = -1; return _r$3;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Rat.ptr.prototype.Sub }; } $f._r$3 = _r$3; $f.a1 = a1; $f.a2 = a2; $f.x = x; $f.y = y; $f.z = z; $f.$s = $s; $f.$r = $r; return $f;
	};
	Rat.prototype.Sub = function(x, y) { return this.$val.Sub(x, y); };
	Rat.ptr.prototype.Mul = function(x, y) {
		var _r$3, x, y, z, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$3 = $f._r$3; x = $f.x; y = $f.y; z = $f.z; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		z = this;
		if (x === y) {
			z.a.neg = false;
			z.a.abs = z.a.abs.sqr(x.a.abs);
			z.b.abs = z.b.abs.sqr(x.b.abs);
			$s = -1; return z;
		}
		z.a.Mul(x.a, y.a);
		z.b.abs = mulDenom(z.b.abs, x.b.abs, y.b.abs);
		_r$3 = z.norm(); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		$s = -1; return _r$3;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Rat.ptr.prototype.Mul }; } $f._r$3 = _r$3; $f.x = x; $f.y = y; $f.z = z; $f.$s = $s; $f.$r = $r; return $f;
	};
	Rat.prototype.Mul = function(x, y) { return this.$val.Mul(x, y); };
	Rat.ptr.prototype.Quo = function(x, y) {
		var _r$3, a, b, x, y, z, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$3 = $f._r$3; a = $f.a; b = $f.b; x = $f.x; y = $f.y; z = $f.z; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		z = this;
		if (y.a.abs.$length === 0) {
			$panic(new $String("division by zero"));
		}
		a = scaleDenom(x.a, y.b.abs);
		b = scaleDenom(y.a, x.b.abs);
		z.a.abs = a.abs;
		z.b.abs = b.abs;
		z.a.neg = !(a.neg === b.neg);
		_r$3 = z.norm(); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		$s = -1; return _r$3;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Rat.ptr.prototype.Quo }; } $f._r$3 = _r$3; $f.a = a; $f.b = b; $f.x = x; $f.y = y; $f.z = z; $f.$s = $s; $f.$r = $r; return $f;
	};
	Rat.prototype.Quo = function(x, y) { return this.$val.Quo(x, y); };
	ratTok = function(ch) {
		var ch;
		return strings.ContainsRune("+-/0123456789.eE", ch);
	};
	Rat.ptr.prototype.Scan = function(s, ch) {
		var _r$3, _r$4, _tuple, _tuple$1, ch, err, ok, s, tok, z, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$3 = $f._r$3; _r$4 = $f._r$4; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; ch = $f.ch; err = $f.err; ok = $f.ok; s = $f.s; tok = $f.tok; z = $f.z; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		z = this;
		_r$3 = s.Token(true, ratTok); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_tuple = _r$3;
		tok = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
		}
		if (!strings.ContainsRune("efgEFGv", ch)) {
			$s = -1; return errors.New("Rat.Scan: invalid verb");
		}
		_r$4 = z.SetString(($bytesToString(tok))); /* */ $s = 2; case 2: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		_tuple$1 = _r$4;
		ok = _tuple$1[1];
		if (!ok) {
			$s = -1; return errors.New("Rat.Scan: invalid syntax");
		}
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Rat.ptr.prototype.Scan }; } $f._r$3 = _r$3; $f._r$4 = _r$4; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.ch = ch; $f.err = err; $f.ok = ok; $f.s = s; $f.tok = tok; $f.z = z; $f.$s = $s; $f.$r = $r; return $f;
	};
	Rat.prototype.Scan = function(s, ch) { return this.$val.Scan(s, ch); };
	Rat.ptr.prototype.SetString = function(s) {
		var _r$10, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, _tuple$5, _tuple$6, ecorr, err, err$1, exp, expabs, neg, ok, powTen, r, r$1, s, sep, x, z, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$10 = $f._r$10; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; _tuple$4 = $f._tuple$4; _tuple$5 = $f._tuple$5; _tuple$6 = $f._tuple$6; ecorr = $f.ecorr; err = $f.err; err$1 = $f.err$1; exp = $f.exp; expabs = $f.expabs; neg = $f.neg; ok = $f.ok; powTen = $f.powTen; r = $f.r; r$1 = $f.r$1; s = $f.s; sep = $f.sep; x = $f.x; z = $f.z; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		z = this;
		if (s.length === 0) {
			$s = -1; return [ptrType$2.nil, false];
		}
		sep = strings.Index(s, "/");
		/* */ if (sep >= 0) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (sep >= 0) { */ case 1:
			_r$3 = z.a.SetString($substring(s, 0, sep), 0); /* */ $s = 3; case 3: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_tuple = _r$3;
			ok = _tuple[1];
			if (!ok) {
				$s = -1; return [ptrType$2.nil, false];
			}
			r = strings.NewReader($substring(s, (sep + 1 >> 0)));
			err = $ifaceNil;
			_r$4 = z.b.abs.scan(r, 0, false); /* */ $s = 4; case 4: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			_tuple$1 = _r$4;
			z.b.abs = _tuple$1[0];
			err = _tuple$1[3];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				$s = -1; return [ptrType$2.nil, false];
			}
			_tuple$2 = r.ReadByte();
			err = _tuple$2[1];
			if (!($interfaceIsEqual(err, io.EOF))) {
				$s = -1; return [ptrType$2.nil, false];
			}
			if (z.b.abs.$length === 0) {
				$s = -1; return [ptrType$2.nil, false];
			}
			_r$5 = z.norm(); /* */ $s = 5; case 5: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			$s = -1; return [_r$5, true];
		/* } */ case 2:
		r$1 = strings.NewReader(s);
		_r$6 = scanSign(r$1); /* */ $s = 6; case 6: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
		_tuple$3 = _r$6;
		neg = _tuple$3[0];
		err$1 = _tuple$3[1];
		if (!($interfaceIsEqual(err$1, $ifaceNil))) {
			$s = -1; return [ptrType$2.nil, false];
		}
		ecorr = 0;
		_r$7 = z.a.abs.scan(r$1, 10, true); /* */ $s = 7; case 7: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
		_tuple$4 = _r$7;
		z.a.abs = _tuple$4[0];
		ecorr = _tuple$4[2];
		err$1 = _tuple$4[3];
		if (!($interfaceIsEqual(err$1, $ifaceNil))) {
			$s = -1; return [ptrType$2.nil, false];
		}
		exp = new $Int64(0, 0);
		_r$8 = scanExponent(r$1, false); /* */ $s = 8; case 8: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
		_tuple$5 = _r$8;
		exp = _tuple$5[0];
		err$1 = _tuple$5[2];
		if (!($interfaceIsEqual(err$1, $ifaceNil))) {
			$s = -1; return [ptrType$2.nil, false];
		}
		_tuple$6 = r$1.ReadByte();
		err$1 = _tuple$6[1];
		if (!($interfaceIsEqual(err$1, io.EOF))) {
			$s = -1; return [ptrType$2.nil, false];
		}
		if (z.a.abs.$length === 0) {
			$s = -1; return [z, true];
		}
		if (ecorr < 0) {
			exp = (x = (new $Int64(0, ecorr)), new $Int64(exp.$high + x.$high, exp.$low + x.$low));
		}
		expabs = exp;
		if ((expabs.$high < 0 || (expabs.$high === 0 && expabs.$low < 0))) {
			expabs = new $Int64(-expabs.$high, -expabs.$low);
		}
		_r$9 = (nat.nil).expNN(natTen, (nat.nil).setWord(((expabs.$low >>> 0))), nat.nil); /* */ $s = 9; case 9: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
		powTen = _r$9;
		/* */ if ((exp.$high < 0 || (exp.$high === 0 && exp.$low < 0))) { $s = 10; continue; }
		/* */ $s = 11; continue;
		/* if ((exp.$high < 0 || (exp.$high === 0 && exp.$low < 0))) { */ case 10:
			z.b.abs = powTen;
			_r$10 = z.norm(); /* */ $s = 13; case 13: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
			_r$10;
			$s = 12; continue;
		/* } else { */ case 11:
			z.a.abs = z.a.abs.mul(z.a.abs, powTen);
			z.b.abs = $subslice(z.b.abs, 0, 0);
		/* } */ case 12:
		z.a.neg = neg && z.a.abs.$length > 0;
		$s = -1; return [z, true];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Rat.ptr.prototype.SetString }; } $f._r$10 = _r$10; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f._tuple$4 = _tuple$4; $f._tuple$5 = _tuple$5; $f._tuple$6 = _tuple$6; $f.ecorr = ecorr; $f.err = err; $f.err$1 = err$1; $f.exp = exp; $f.expabs = expabs; $f.neg = neg; $f.ok = ok; $f.powTen = powTen; $f.r = r; $f.r$1 = r$1; $f.s = s; $f.sep = sep; $f.x = x; $f.z = z; $f.$s = $s; $f.$r = $r; return $f;
	};
	Rat.prototype.SetString = function(s) { return this.$val.SetString(s); };
	scanExponent = function(r, binExpOk) {
		var _1, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _tuple, _tuple$1, _tuple$2, _tuple$3, base, binExpOk, ch, digits, err, exp, i, neg, r, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; base = $f.base; binExpOk = $f.binExpOk; ch = $f.ch; digits = $f.digits; err = $f.err; exp = $f.exp; i = $f.i; neg = $f.neg; r = $f.r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		exp = new $Int64(0, 0);
		base = 0;
		err = $ifaceNil;
		base = 10;
		ch = 0;
		_r$3 = r.ReadByte(); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_tuple = _r$3;
		ch = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			if ($interfaceIsEqual(err, io.EOF)) {
				err = $ifaceNil;
			}
			$s = -1; return [exp, base, err];
		}
			_1 = ch;
			/* */ if ((_1 === (101)) || (_1 === (69))) { $s = 3; continue; }
			/* */ if (_1 === (112)) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if ((_1 === (101)) || (_1 === (69))) { */ case 3:
				$s = 6; continue;
			/* } else if (_1 === (112)) { */ case 4:
				if (binExpOk) {
					base = 2;
					/* break; */ $s = 2; continue;
				}
				_r$4 = r.UnreadByte(); /* */ $s = 7; case 7: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				_r$4;
				$s = -1; return [exp, base, err];
			/* } else { */ case 5:
				_r$5 = r.UnreadByte(); /* */ $s = 8; case 8: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
				_r$5;
				$s = -1; return [exp, base, err];
			/* } */ case 6:
		case 2:
		neg = false;
		_r$6 = scanSign(r); /* */ $s = 9; case 9: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
		_tuple$1 = _r$6;
		neg = _tuple$1[0];
		err = _tuple$1[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [exp, base, err];
		}
		digits = sliceType$1.nil;
		if (neg) {
			digits = $append(digits, 45);
		}
		i = 0;
		/* while (true) { */ case 10:
			_r$7 = r.ReadByte(); /* */ $s = 12; case 12: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
			_tuple$2 = _r$7;
			ch = _tuple$2[0];
			err = _tuple$2[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				if (!($interfaceIsEqual(err, io.EOF)) || (i === 0)) {
					$s = -1; return [exp, base, err];
				}
				err = $ifaceNil;
				/* break; */ $s = 11; continue;
			}
			/* */ if (ch < 48 || 57 < ch) { $s = 13; continue; }
			/* */ $s = 14; continue;
			/* if (ch < 48 || 57 < ch) { */ case 13:
				/* */ if (i === 0) { $s = 15; continue; }
				/* */ $s = 16; continue;
				/* if (i === 0) { */ case 15:
					_r$8 = r.UnreadByte(); /* */ $s = 17; case 17: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
					_r$8;
					_r$9 = fmt.Errorf("invalid exponent (missing digits)", new sliceType([])); /* */ $s = 18; case 18: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
					err = _r$9;
					$s = -1; return [exp, base, err];
				/* } */ case 16:
				/* break; */ $s = 11; continue;
			/* } */ case 14:
			digits = $append(digits, ch);
			i = i + (1) >> 0;
		/* } */ $s = 10; continue; case 11:
		_tuple$3 = strconv.ParseInt(($bytesToString(digits)), 10, 64);
		exp = _tuple$3[0];
		err = _tuple$3[1];
		$s = -1; return [exp, base, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: scanExponent }; } $f._1 = _1; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f.base = base; $f.binExpOk = binExpOk; $f.ch = ch; $f.digits = digits; $f.err = err; $f.exp = exp; $f.i = i; $f.neg = neg; $f.r = r; $f.$s = $s; $f.$r = $r; return $f;
	};
	Rat.ptr.prototype.String = function() {
		var _r$3, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$3 = $f._r$3; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		x = this;
		_r$3 = x.marshal(); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		$s = -1; return ($bytesToString(_r$3));
		/* */ } return; } if ($f === undefined) { $f = { $blk: Rat.ptr.prototype.String }; } $f._r$3 = _r$3; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Rat.prototype.String = function() { return this.$val.String(); };
	Rat.ptr.prototype.marshal = function() {
		var _r$3, _r$4, buf, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$3 = $f._r$3; _r$4 = $f._r$4; buf = $f.buf; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		x = this;
		buf = sliceType$1.nil;
		_r$3 = x.a.Append(buf, 10); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		buf = _r$3;
		buf = $append(buf, 47);
		/* */ if (!((x.b.abs.$length === 0))) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!((x.b.abs.$length === 0))) { */ case 2:
			_r$4 = x.b.Append(buf, 10); /* */ $s = 5; case 5: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			buf = _r$4;
			$s = 4; continue;
		/* } else { */ case 3:
			buf = $append(buf, 49);
		/* } */ case 4:
		$s = -1; return buf;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Rat.ptr.prototype.marshal }; } $f._r$3 = _r$3; $f._r$4 = _r$4; $f.buf = buf; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Rat.prototype.marshal = function() { return this.$val.marshal(); };
	Rat.ptr.prototype.RatString = function() {
		var _r$3, _r$4, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$3 = $f._r$3; _r$4 = $f._r$4; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		x = this;
		/* */ if (x.IsInt()) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (x.IsInt()) { */ case 1:
			_r$3 = x.a.String(); /* */ $s = 3; case 3: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			$s = -1; return _r$3;
		/* } */ case 2:
		_r$4 = x.String(); /* */ $s = 4; case 4: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		$s = -1; return _r$4;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Rat.ptr.prototype.RatString }; } $f._r$3 = _r$3; $f._r$4 = _r$4; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Rat.prototype.RatString = function() { return this.$val.RatString(); };
	Rat.ptr.prototype.FloatString = function(prec) {
		var _arg, _arg$1, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _tuple, _tuple$1, buf, i, i$1, p, prec, q, r, r2, rs, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _arg = $f._arg; _arg$1 = $f._arg$1; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; buf = $f.buf; i = $f.i; i$1 = $f.i$1; p = $f.p; prec = $f.prec; q = $f.q; r = $f.r; r2 = $f.r2; rs = $f.rs; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		x = this;
		buf = sliceType$1.nil;
		/* */ if (x.IsInt()) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (x.IsInt()) { */ case 1:
			_r$3 = x.a.Append(buf, 10); /* */ $s = 3; case 3: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			buf = _r$3;
			if (prec > 0) {
				buf = $append(buf, 46);
				i = prec;
				while (true) {
					if (!(i > 0)) { break; }
					buf = $append(buf, 48);
					i = i - (1) >> 0;
				}
			}
			$s = -1; return ($bytesToString(buf));
		/* } */ case 2:
		_r$4 = (nat.nil).div((nat.nil), x.a.abs, x.b.abs); /* */ $s = 4; case 4: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		_tuple = _r$4;
		q = _tuple[0];
		r = _tuple[1];
		p = natOne;
		/* */ if (prec > 0) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if (prec > 0) { */ case 5:
			_r$5 = (nat.nil).expNN(natTen, (nat.nil).setUint64((new $Uint64(0, prec))), nat.nil); /* */ $s = 7; case 7: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			p = _r$5;
		/* } */ case 6:
		r = r.mul(r, p);
		_r$6 = r.div((nat.nil), r, x.b.abs); /* */ $s = 8; case 8: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
		_tuple$1 = _r$6;
		r = _tuple$1[0];
		r2 = _tuple$1[1];
		r2 = r2.add(r2, r2);
		if (x.b.abs.cmp(r2) <= 0) {
			r = r.add(r, natOne);
			if (r.cmp(p) >= 0) {
				q = (nat.nil).add(q, natOne);
				r = (nat.nil).sub(r, p);
			}
		}
		if (x.a.neg) {
			buf = $append(buf, 45);
		}
		_arg = buf;
		_r$7 = q.utoa(10); /* */ $s = 9; case 9: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
		_arg$1 = _r$7;
		buf = $appendSlice(_arg, _arg$1);
		/* */ if (prec > 0) { $s = 10; continue; }
		/* */ $s = 11; continue;
		/* if (prec > 0) { */ case 10:
			buf = $append(buf, 46);
			_r$8 = r.utoa(10); /* */ $s = 12; case 12: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
			rs = _r$8;
			i$1 = prec - rs.$length >> 0;
			while (true) {
				if (!(i$1 > 0)) { break; }
				buf = $append(buf, 48);
				i$1 = i$1 - (1) >> 0;
			}
			buf = $appendSlice(buf, rs);
		/* } */ case 11:
		$s = -1; return ($bytesToString(buf));
		/* */ } return; } if ($f === undefined) { $f = { $blk: Rat.ptr.prototype.FloatString }; } $f._arg = _arg; $f._arg$1 = _arg$1; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.buf = buf; $f.i = i; $f.i$1 = i$1; $f.p = p; $f.prec = prec; $f.q = q; $f.r = r; $f.r2 = r2; $f.rs = rs; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Rat.prototype.FloatString = function(prec) { return this.$val.FloatString(prec); };
	Rat.ptr.prototype.GobEncode = function() {
		var b, buf, i, j, n, x;
		x = this;
		if (x === ptrType$2.nil) {
			return [sliceType$1.nil, $ifaceNil];
		}
		buf = $makeSlice(sliceType$1, (5 + ($imul(((x.a.abs.$length + x.b.abs.$length >> 0)), 4)) >> 0));
		i = x.b.abs.bytes(buf);
		j = x.a.abs.bytes($subslice(buf, 0, i));
		n = i - j >> 0;
		if (!((((((n >>> 0)) >> 0)) === n))) {
			return [sliceType$1.nil, errors.New("Rat.GobEncode: numerator too large")];
		}
		$clone(binary.BigEndian, binary.bigEndian).PutUint32($subslice(buf, (j - 4 >> 0), j), ((n >>> 0)));
		j = j - (5) >> 0;
		b = 2;
		if (x.a.neg) {
			b = (b | (1)) >>> 0;
		}
		((j < 0 || j >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + j] = b);
		return [$subslice(buf, j), $ifaceNil];
	};
	Rat.prototype.GobEncode = function() { return this.$val.GobEncode(); };
	Rat.ptr.prototype.GobDecode = function(buf) {
		var _r$3, b, buf, i, z, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$3 = $f._r$3; b = $f.b; buf = $f.buf; i = $f.i; z = $f.z; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		z = this;
		if (buf.$length === 0) {
			Rat.copy(z, new Rat.ptr(new Int.ptr(false, nat.nil), new Int.ptr(false, nat.nil)));
			$s = -1; return $ifaceNil;
		}
		b = (0 >= buf.$length ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + 0]);
		/* */ if (!(((b >>> 1 << 24 >>> 24) === 1))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!(((b >>> 1 << 24 >>> 24) === 1))) { */ case 1:
			_r$3 = fmt.Errorf("Rat.GobDecode: encoding version %d not supported", new sliceType([new $Uint8((b >>> 1 << 24 >>> 24))])); /* */ $s = 3; case 3: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			$s = -1; return _r$3;
		/* } */ case 2:
		i = 5 + $clone(binary.BigEndian, binary.bigEndian).Uint32($subslice(buf, 1, 5)) >>> 0;
		z.a.neg = !((((b & 1) >>> 0) === 0));
		z.a.abs = z.a.abs.setBytes($subslice(buf, 5, i));
		z.b.abs = z.b.abs.setBytes($subslice(buf, i));
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Rat.ptr.prototype.GobDecode }; } $f._r$3 = _r$3; $f.b = b; $f.buf = buf; $f.i = i; $f.z = z; $f.$s = $s; $f.$r = $r; return $f;
	};
	Rat.prototype.GobDecode = function(buf) { return this.$val.GobDecode(buf); };
	Rat.ptr.prototype.MarshalText = function() {
		var _r$3, _r$4, _tmp, _tmp$1, _tuple, err, text, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$3 = $f._r$3; _r$4 = $f._r$4; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tuple = $f._tuple; err = $f.err; text = $f.text; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		text = sliceType$1.nil;
		err = $ifaceNil;
		x = this;
		/* */ if (x.IsInt()) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (x.IsInt()) { */ case 1:
			_r$3 = x.a.MarshalText(); /* */ $s = 3; case 3: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_tuple = _r$3;
			text = _tuple[0];
			err = _tuple[1];
			$s = -1; return [text, err];
		/* } */ case 2:
		_r$4 = x.marshal(); /* */ $s = 4; case 4: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		_tmp = _r$4;
		_tmp$1 = $ifaceNil;
		text = _tmp;
		err = _tmp$1;
		$s = -1; return [text, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Rat.ptr.prototype.MarshalText }; } $f._r$3 = _r$3; $f._r$4 = _r$4; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tuple = _tuple; $f.err = err; $f.text = text; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Rat.prototype.MarshalText = function() { return this.$val.MarshalText(); };
	Rat.ptr.prototype.UnmarshalText = function(text) {
		var _r$3, _r$4, _tuple, ok, text, z, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$3 = $f._r$3; _r$4 = $f._r$4; _tuple = $f._tuple; ok = $f.ok; text = $f.text; z = $f.z; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		z = this;
		_r$3 = z.SetString(($bytesToString(text))); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_tuple = _r$3;
		ok = _tuple[1];
		/* */ if (!ok) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!ok) { */ case 2:
			_r$4 = fmt.Errorf("math/big: cannot unmarshal %q into a *big.Rat", new sliceType([text])); /* */ $s = 4; case 4: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			$s = -1; return _r$4;
		/* } */ case 3:
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Rat.ptr.prototype.UnmarshalText }; } $f._r$3 = _r$3; $f._r$4 = _r$4; $f._tuple = _tuple; $f.ok = ok; $f.text = text; $f.z = z; $f.$s = $s; $f.$r = $r; return $f;
	};
	Rat.prototype.UnmarshalText = function(text) { return this.$val.UnmarshalText(text); };
	RoundingMode.prototype.String = function() {
		var _r$3, i, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$3 = $f._r$3; i = $f.i; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		i = this.$val;
		/* */ if ((i + 1 << 24 >>> 24) >= 7) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if ((i + 1 << 24 >>> 24) >= 7) { */ case 1:
			_r$3 = fmt.Sprintf("RoundingMode(%d)", new sliceType([new RoundingMode(i)])); /* */ $s = 3; case 3: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			$s = -1; return _r$3;
		/* } */ case 2:
		$s = -1; return $substring("ToNearestEvenToNearestAwayToZeroAwayFromZeroToNegativeInfToPositiveInf", ((i < 0 || i >= _RoundingMode_index.length) ? ($throwRuntimeError("index out of range"), undefined) : _RoundingMode_index[i]), (x = i + 1 << 24 >>> 24, ((x < 0 || x >= _RoundingMode_index.length) ? ($throwRuntimeError("index out of range"), undefined) : _RoundingMode_index[x])));
		/* */ } return; } if ($f === undefined) { $f = { $blk: RoundingMode.prototype.String }; } $f._r$3 = _r$3; $f.i = i; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	$ptrType(RoundingMode).prototype.String = function() { return new RoundingMode(this.$get()).String(); };
	Float.ptr.prototype.Sqrt = function(x) {
		var _1, _q, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, b, prec, x, x$1, z, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _q = $f._q; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; b = $f.b; prec = $f.prec; x = $f.x; x$1 = $f.x$1; z = $f.z; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		z = this;
		/* */ if (false) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (false) { */ case 1:
			$r = x.validate(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 2:
		if (z.prec === 0) {
			z.prec = x.prec;
		}
		_r$3 = x.Sign(); /* */ $s = 6; case 6: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		/* */ if (_r$3 === -1) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (_r$3 === -1) { */ case 4:
			$panic((x$1 = new ErrNaN.ptr("square root of negative operand"), new x$1.constructor.elem(x$1)));
		/* } */ case 5:
		if (!((x.form === 1))) {
			z.acc = 0;
			z.form = x.form;
			z.neg = x.neg;
			$s = -1; return z;
		}
		prec = z.prec;
		_r$4 = x.MantExp(z); /* */ $s = 7; case 7: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		b = _r$4;
		z.prec = prec;
			_1 = (_r$5 = b % 2, _r$5 === _r$5 ? _r$5 : $throwRuntimeError("integer divide by zero"));
			/* */ if (_1 === (0)) { $s = 9; continue; }
			/* */ if (_1 === (1)) { $s = 10; continue; }
			/* */ if (_1 === (-1)) { $s = 11; continue; }
			/* */ $s = 12; continue;
			/* if (_1 === (0)) { */ case 9:
				$s = 12; continue;
			/* } else if (_1 === (1)) { */ case 10:
				_r$6 = z.Mul(two, z); /* */ $s = 13; case 13: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
				_r$6;
				$s = 12; continue;
			/* } else if (_1 === (-1)) { */ case 11:
				_r$7 = z.Mul(half, z); /* */ $s = 14; case 14: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
				_r$7;
			/* } */ case 12:
		case 8:
		/* */ if (z.prec <= 128) { $s = 15; continue; }
		/* */ $s = 16; continue;
		/* if (z.prec <= 128) { */ case 15:
			$r = z.sqrtDirect(z); /* */ $s = 18; case 18: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 17; continue;
		/* } else { */ case 16:
			$r = z.sqrtInverse(z); /* */ $s = 19; case 19: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 17:
		_r$8 = z.SetMantExp(z, (_q = b / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"))); /* */ $s = 20; case 20: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
		$s = -1; return _r$8;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Float.ptr.prototype.Sqrt }; } $f._1 = _1; $f._q = _q; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f.b = b; $f.prec = prec; $f.x = x; $f.x$1 = x$1; $f.z = z; $f.$s = $s; $f.$r = $r; return $f;
	};
	Float.prototype.Sqrt = function(x) { return this.$val.Sqrt(x); };
	Float.ptr.prototype.sqrtDirect = function(x) {
		var _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _tuple, ng, sq, u, x, xf, z, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _tuple = $f._tuple; ng = $f.ng; sq = $f.sq; u = $f.u; x = $f.x; xf = $f.xf; z = $f.z; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		u = [u];
		x = [x];
		z = this;
		u[0] = new Float.ptr(0, 0, 0, 0, false, nat.nil, 0);
		ng = (function(u, x) { return function $b(t) {
			var _r$3, _r$4, _r$5, _r$6, t, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			u[0].prec = t.prec;
			_r$3 = u[0].Mul(t, t); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_r$3;
			_r$4 = u[0].Add(u[0], x[0]); /* */ $s = 2; case 2: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			_r$4;
			_r$5 = u[0].Mul(half, u[0]); /* */ $s = 3; case 3: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			_r$5;
			_r$6 = t.Quo(u[0], t); /* */ $s = 4; case 4: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
			$s = -1; return _r$6;
			/* */ } return; } if ($f === undefined) { $f = { $blk: $b }; } $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
		}; })(u, x);
		_r$3 = x[0].Float64(); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_tuple = _r$3;
		xf = _tuple[0];
		_r$4 = NewFloat(math.Sqrt(xf)); /* */ $s = 2; case 2: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		sq = _r$4;
			/* */ if (z.prec > 128) { $s = 4; continue; }
			/* */ if (z.prec > 64) { $s = 5; continue; }
			/* */ $s = 6; continue;
			/* if (z.prec > 128) { */ case 4:
				$panic(new $String("sqrtDirect: only for z.prec <= 128"));
				$s = 7; continue;
			/* } else if (z.prec > 64) { */ case 5:
				sq.prec = $imul(sq.prec, (2)) >>> 0;
				_r$5 = ng(sq); /* */ $s = 8; case 8: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
				sq = _r$5;
				sq.prec = $imul(sq.prec, (2)) >>> 0;
				_r$6 = ng(sq); /* */ $s = 9; case 9: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
				sq = _r$6;
				$s = 7; continue;
			/* } else { */ case 6:
				sq.prec = $imul(sq.prec, (2)) >>> 0;
				_r$7 = ng(sq); /* */ $s = 10; case 10: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
				sq = _r$7;
			/* } */ case 7:
		case 3:
		_r$8 = z.Set(sq); /* */ $s = 11; case 11: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
		_r$8;
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Float.ptr.prototype.sqrtDirect }; } $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._tuple = _tuple; $f.ng = ng; $f.sq = sq; $f.u = u; $f.x = x; $f.xf = xf; $f.z = z; $f.$s = $s; $f.$r = $r; return $f;
	};
	Float.prototype.sqrtDirect = function(x) { return this.$val.sqrtDirect(x); };
	Float.ptr.prototype.sqrtInverse = function(x) {
		var _r$3, _r$4, _r$5, _r$6, _tuple, ng, prec, sqi, u, x, xf, z, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _tuple = $f._tuple; ng = $f.ng; prec = $f.prec; sqi = $f.sqi; u = $f.u; x = $f.x; xf = $f.xf; z = $f.z; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		u = [u];
		x = [x];
		z = this;
		u[0] = new Float.ptr(0, 0, 0, 0, false, nat.nil, 0);
		ng = (function(u, x) { return function $b(t) {
			var _r$3, _r$4, _r$5, _r$6, _r$7, t, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			u[0].prec = t.prec;
			_r$3 = u[0].Mul(t, t); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_r$3;
			_r$4 = u[0].Mul(x[0], u[0]); /* */ $s = 2; case 2: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			_r$4;
			_r$5 = u[0].Sub(three, u[0]); /* */ $s = 3; case 3: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			_r$5;
			_r$6 = u[0].Mul(t, u[0]); /* */ $s = 4; case 4: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
			_r$6;
			_r$7 = t.Mul(half, u[0]); /* */ $s = 5; case 5: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
			$s = -1; return _r$7;
			/* */ } return; } if ($f === undefined) { $f = { $blk: $b }; } $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
		}; })(u, x);
		_r$3 = x[0].Float64(); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_tuple = _r$3;
		xf = _tuple[0];
		_r$4 = NewFloat(1 / math.Sqrt(xf)); /* */ $s = 2; case 2: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		sqi = _r$4;
		prec = z.prec + 32 >>> 0;
		/* while (true) { */ case 3:
			/* if (!(sqi.prec < prec)) { break; } */ if(!(sqi.prec < prec)) { $s = 4; continue; }
			sqi.prec = $imul(sqi.prec, (2)) >>> 0;
			_r$5 = ng(sqi); /* */ $s = 5; case 5: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			sqi = _r$5;
		/* } */ $s = 3; continue; case 4:
		_r$6 = z.Mul(x[0], sqi); /* */ $s = 6; case 6: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
		_r$6;
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Float.ptr.prototype.sqrtInverse }; } $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._tuple = _tuple; $f.ng = ng; $f.prec = prec; $f.sqi = sqi; $f.u = u; $f.x = x; $f.xf = xf; $f.z = z; $f.$s = $s; $f.$r = $r; return $f;
	};
	Float.prototype.sqrtInverse = function(x) { return this.$val.sqrtInverse(x); };
	ptrType$5.methods = [{prop: "at", name: "at", pkg: "math/big", typ: $funcType([$Int], [$Uint8], false)}, {prop: "init", name: "init", pkg: "math/big", typ: $funcType([nat, $Int], [], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "round", name: "round", pkg: "math/big", typ: $funcType([$Int], [], false)}, {prop: "roundUp", name: "roundUp", pkg: "math/big", typ: $funcType([$Int], [], false)}, {prop: "roundDown", name: "roundDown", pkg: "math/big", typ: $funcType([$Int], [], false)}];
	ptrType.methods = [{prop: "SetPrec", name: "SetPrec", pkg: "", typ: $funcType([$Uint], [ptrType], false)}, {prop: "SetMode", name: "SetMode", pkg: "", typ: $funcType([RoundingMode], [ptrType], false)}, {prop: "Prec", name: "Prec", pkg: "", typ: $funcType([], [$Uint], false)}, {prop: "MinPrec", name: "MinPrec", pkg: "", typ: $funcType([], [$Uint], false)}, {prop: "Mode", name: "Mode", pkg: "", typ: $funcType([], [RoundingMode], false)}, {prop: "Acc", name: "Acc", pkg: "", typ: $funcType([], [Accuracy], false)}, {prop: "Sign", name: "Sign", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "MantExp", name: "MantExp", pkg: "", typ: $funcType([ptrType], [$Int], false)}, {prop: "setExpAndRound", name: "setExpAndRound", pkg: "math/big", typ: $funcType([$Int64, $Uint], [], false)}, {prop: "SetMantExp", name: "SetMantExp", pkg: "", typ: $funcType([ptrType, $Int], [ptrType], false)}, {prop: "Signbit", name: "Signbit", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "IsInf", name: "IsInf", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "IsInt", name: "IsInt", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "validate", name: "validate", pkg: "math/big", typ: $funcType([], [], false)}, {prop: "round", name: "round", pkg: "math/big", typ: $funcType([$Uint], [], false)}, {prop: "setBits64", name: "setBits64", pkg: "math/big", typ: $funcType([$Bool, $Uint64], [ptrType], false)}, {prop: "SetUint64", name: "SetUint64", pkg: "", typ: $funcType([$Uint64], [ptrType], false)}, {prop: "SetInt64", name: "SetInt64", pkg: "", typ: $funcType([$Int64], [ptrType], false)}, {prop: "SetFloat64", name: "SetFloat64", pkg: "", typ: $funcType([$Float64], [ptrType], false)}, {prop: "SetInt", name: "SetInt", pkg: "", typ: $funcType([ptrType$1], [ptrType], false)}, {prop: "SetRat", name: "SetRat", pkg: "", typ: $funcType([ptrType$2], [ptrType], false)}, {prop: "SetInf", name: "SetInf", pkg: "", typ: $funcType([$Bool], [ptrType], false)}, {prop: "Set", name: "Set", pkg: "", typ: $funcType([ptrType], [ptrType], false)}, {prop: "Copy", name: "Copy", pkg: "", typ: $funcType([ptrType], [ptrType], false)}, {prop: "Uint64", name: "Uint64", pkg: "", typ: $funcType([], [$Uint64, Accuracy], false)}, {prop: "Int64", name: "Int64", pkg: "", typ: $funcType([], [$Int64, Accuracy], false)}, {prop: "Float32", name: "Float32", pkg: "", typ: $funcType([], [$Float32, Accuracy], false)}, {prop: "Float64", name: "Float64", pkg: "", typ: $funcType([], [$Float64, Accuracy], false)}, {prop: "Int", name: "Int", pkg: "", typ: $funcType([ptrType$1], [ptrType$1, Accuracy], false)}, {prop: "Rat", name: "Rat", pkg: "", typ: $funcType([ptrType$2], [ptrType$2, Accuracy], false)}, {prop: "Abs", name: "Abs", pkg: "", typ: $funcType([ptrType], [ptrType], false)}, {prop: "Neg", name: "Neg", pkg: "", typ: $funcType([ptrType], [ptrType], false)}, {prop: "uadd", name: "uadd", pkg: "math/big", typ: $funcType([ptrType, ptrType], [], false)}, {prop: "usub", name: "usub", pkg: "math/big", typ: $funcType([ptrType, ptrType], [], false)}, {prop: "umul", name: "umul", pkg: "math/big", typ: $funcType([ptrType, ptrType], [], false)}, {prop: "uquo", name: "uquo", pkg: "math/big", typ: $funcType([ptrType, ptrType], [], false)}, {prop: "ucmp", name: "ucmp", pkg: "math/big", typ: $funcType([ptrType], [$Int], false)}, {prop: "Add", name: "Add", pkg: "", typ: $funcType([ptrType, ptrType], [ptrType], false)}, {prop: "Sub", name: "Sub", pkg: "", typ: $funcType([ptrType, ptrType], [ptrType], false)}, {prop: "Mul", name: "Mul", pkg: "", typ: $funcType([ptrType, ptrType], [ptrType], false)}, {prop: "Quo", name: "Quo", pkg: "", typ: $funcType([ptrType, ptrType], [ptrType], false)}, {prop: "Cmp", name: "Cmp", pkg: "", typ: $funcType([ptrType], [$Int], false)}, {prop: "ord", name: "ord", pkg: "math/big", typ: $funcType([], [$Int], false)}, {prop: "SetString", name: "SetString", pkg: "", typ: $funcType([$String], [ptrType, $Bool], false)}, {prop: "scan", name: "scan", pkg: "math/big", typ: $funcType([io.ByteScanner, $Int], [ptrType, $Int, $error], false)}, {prop: "pow5", name: "pow5", pkg: "math/big", typ: $funcType([$Uint64], [ptrType], false)}, {prop: "Parse", name: "Parse", pkg: "", typ: $funcType([$String, $Int], [ptrType, $Int, $error], false)}, {prop: "Scan", name: "Scan", pkg: "", typ: $funcType([fmt.ScanState, $Int32], [$error], false)}, {prop: "GobEncode", name: "GobEncode", pkg: "", typ: $funcType([], [sliceType$1, $error], false)}, {prop: "GobDecode", name: "GobDecode", pkg: "", typ: $funcType([sliceType$1], [$error], false)}, {prop: "MarshalText", name: "MarshalText", pkg: "", typ: $funcType([], [sliceType$1, $error], false)}, {prop: "UnmarshalText", name: "UnmarshalText", pkg: "", typ: $funcType([sliceType$1], [$error], false)}, {prop: "Text", name: "Text", pkg: "", typ: $funcType([$Uint8, $Int], [$String], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Append", name: "Append", pkg: "", typ: $funcType([sliceType$1, $Uint8, $Int], [sliceType$1], false)}, {prop: "fmtB", name: "fmtB", pkg: "math/big", typ: $funcType([sliceType$1], [sliceType$1], false)}, {prop: "fmtP", name: "fmtP", pkg: "math/big", typ: $funcType([sliceType$1], [sliceType$1], false)}, {prop: "Format", name: "Format", pkg: "", typ: $funcType([fmt.State, $Int32], [], false)}, {prop: "Sqrt", name: "Sqrt", pkg: "", typ: $funcType([ptrType], [ptrType], false)}, {prop: "sqrtDirect", name: "sqrtDirect", pkg: "math/big", typ: $funcType([ptrType], [], false)}, {prop: "sqrtInverse", name: "sqrtInverse", pkg: "math/big", typ: $funcType([ptrType], [], false)}];
	ErrNaN.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	RoundingMode.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	Accuracy.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$1.methods = [{prop: "Sign", name: "Sign", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "SetInt64", name: "SetInt64", pkg: "", typ: $funcType([$Int64], [ptrType$1], false)}, {prop: "SetUint64", name: "SetUint64", pkg: "", typ: $funcType([$Uint64], [ptrType$1], false)}, {prop: "Set", name: "Set", pkg: "", typ: $funcType([ptrType$1], [ptrType$1], false)}, {prop: "Bits", name: "Bits", pkg: "", typ: $funcType([], [sliceType$2], false)}, {prop: "SetBits", name: "SetBits", pkg: "", typ: $funcType([sliceType$2], [ptrType$1], false)}, {prop: "Abs", name: "Abs", pkg: "", typ: $funcType([ptrType$1], [ptrType$1], false)}, {prop: "Neg", name: "Neg", pkg: "", typ: $funcType([ptrType$1], [ptrType$1], false)}, {prop: "Add", name: "Add", pkg: "", typ: $funcType([ptrType$1, ptrType$1], [ptrType$1], false)}, {prop: "Sub", name: "Sub", pkg: "", typ: $funcType([ptrType$1, ptrType$1], [ptrType$1], false)}, {prop: "Mul", name: "Mul", pkg: "", typ: $funcType([ptrType$1, ptrType$1], [ptrType$1], false)}, {prop: "MulRange", name: "MulRange", pkg: "", typ: $funcType([$Int64, $Int64], [ptrType$1], false)}, {prop: "Binomial", name: "Binomial", pkg: "", typ: $funcType([$Int64, $Int64], [ptrType$1], false)}, {prop: "Quo", name: "Quo", pkg: "", typ: $funcType([ptrType$1, ptrType$1], [ptrType$1], false)}, {prop: "Rem", name: "Rem", pkg: "", typ: $funcType([ptrType$1, ptrType$1], [ptrType$1], false)}, {prop: "QuoRem", name: "QuoRem", pkg: "", typ: $funcType([ptrType$1, ptrType$1, ptrType$1], [ptrType$1, ptrType$1], false)}, {prop: "Div", name: "Div", pkg: "", typ: $funcType([ptrType$1, ptrType$1], [ptrType$1], false)}, {prop: "Mod", name: "Mod", pkg: "", typ: $funcType([ptrType$1, ptrType$1], [ptrType$1], false)}, {prop: "DivMod", name: "DivMod", pkg: "", typ: $funcType([ptrType$1, ptrType$1, ptrType$1], [ptrType$1, ptrType$1], false)}, {prop: "Cmp", name: "Cmp", pkg: "", typ: $funcType([ptrType$1], [$Int], false)}, {prop: "CmpAbs", name: "CmpAbs", pkg: "", typ: $funcType([ptrType$1], [$Int], false)}, {prop: "Int64", name: "Int64", pkg: "", typ: $funcType([], [$Int64], false)}, {prop: "Uint64", name: "Uint64", pkg: "", typ: $funcType([], [$Uint64], false)}, {prop: "IsInt64", name: "IsInt64", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "IsUint64", name: "IsUint64", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "SetString", name: "SetString", pkg: "", typ: $funcType([$String, $Int], [ptrType$1, $Bool], false)}, {prop: "setFromScanner", name: "setFromScanner", pkg: "math/big", typ: $funcType([io.ByteScanner, $Int], [ptrType$1, $Bool], false)}, {prop: "SetBytes", name: "SetBytes", pkg: "", typ: $funcType([sliceType$1], [ptrType$1], false)}, {prop: "Bytes", name: "Bytes", pkg: "", typ: $funcType([], [sliceType$1], false)}, {prop: "BitLen", name: "BitLen", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Exp", name: "Exp", pkg: "", typ: $funcType([ptrType$1, ptrType$1, ptrType$1], [ptrType$1], false)}, {prop: "GCD", name: "GCD", pkg: "", typ: $funcType([ptrType$1, ptrType$1, ptrType$1, ptrType$1], [ptrType$1], false)}, {prop: "lehmerGCD", name: "lehmerGCD", pkg: "math/big", typ: $funcType([ptrType$1, ptrType$1], [ptrType$1], false)}, {prop: "Rand", name: "Rand", pkg: "", typ: $funcType([ptrType$6, ptrType$1], [ptrType$1], false)}, {prop: "ModInverse", name: "ModInverse", pkg: "", typ: $funcType([ptrType$1, ptrType$1], [ptrType$1], false)}, {prop: "modSqrt3Mod4Prime", name: "modSqrt3Mod4Prime", pkg: "math/big", typ: $funcType([ptrType$1, ptrType$1], [ptrType$1], false)}, {prop: "modSqrtTonelliShanks", name: "modSqrtTonelliShanks", pkg: "math/big", typ: $funcType([ptrType$1, ptrType$1], [ptrType$1], false)}, {prop: "ModSqrt", name: "ModSqrt", pkg: "", typ: $funcType([ptrType$1, ptrType$1], [ptrType$1], false)}, {prop: "Lsh", name: "Lsh", pkg: "", typ: $funcType([ptrType$1, $Uint], [ptrType$1], false)}, {prop: "Rsh", name: "Rsh", pkg: "", typ: $funcType([ptrType$1, $Uint], [ptrType$1], false)}, {prop: "Bit", name: "Bit", pkg: "", typ: $funcType([$Int], [$Uint], false)}, {prop: "SetBit", name: "SetBit", pkg: "", typ: $funcType([ptrType$1, $Int, $Uint], [ptrType$1], false)}, {prop: "And", name: "And", pkg: "", typ: $funcType([ptrType$1, ptrType$1], [ptrType$1], false)}, {prop: "AndNot", name: "AndNot", pkg: "", typ: $funcType([ptrType$1, ptrType$1], [ptrType$1], false)}, {prop: "Or", name: "Or", pkg: "", typ: $funcType([ptrType$1, ptrType$1], [ptrType$1], false)}, {prop: "Xor", name: "Xor", pkg: "", typ: $funcType([ptrType$1, ptrType$1], [ptrType$1], false)}, {prop: "Not", name: "Not", pkg: "", typ: $funcType([ptrType$1], [ptrType$1], false)}, {prop: "Sqrt", name: "Sqrt", pkg: "", typ: $funcType([ptrType$1], [ptrType$1], false)}, {prop: "Text", name: "Text", pkg: "", typ: $funcType([$Int], [$String], false)}, {prop: "Append", name: "Append", pkg: "", typ: $funcType([sliceType$1, $Int], [sliceType$1], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Format", name: "Format", pkg: "", typ: $funcType([fmt.State, $Int32], [], false)}, {prop: "scan", name: "scan", pkg: "math/big", typ: $funcType([io.ByteScanner, $Int], [ptrType$1, $Int, $error], false)}, {prop: "Scan", name: "Scan", pkg: "", typ: $funcType([fmt.ScanState, $Int32], [$error], false)}, {prop: "GobEncode", name: "GobEncode", pkg: "", typ: $funcType([], [sliceType$1, $error], false)}, {prop: "GobDecode", name: "GobDecode", pkg: "", typ: $funcType([sliceType$1], [$error], false)}, {prop: "MarshalText", name: "MarshalText", pkg: "", typ: $funcType([], [sliceType$1, $error], false)}, {prop: "UnmarshalText", name: "UnmarshalText", pkg: "", typ: $funcType([sliceType$1], [$error], false)}, {prop: "MarshalJSON", name: "MarshalJSON", pkg: "", typ: $funcType([], [sliceType$1, $error], false)}, {prop: "UnmarshalJSON", name: "UnmarshalJSON", pkg: "", typ: $funcType([sliceType$1], [$error], false)}, {prop: "ProbablyPrime", name: "ProbablyPrime", pkg: "", typ: $funcType([$Int], [$Bool], false)}];
	byteReader.methods = [{prop: "ReadByte", name: "ReadByte", pkg: "", typ: $funcType([], [$Uint8, $error], false)}, {prop: "UnreadByte", name: "UnreadByte", pkg: "", typ: $funcType([], [$error], false)}];
	nat.methods = [{prop: "clear", name: "clear", pkg: "math/big", typ: $funcType([], [], false)}, {prop: "norm", name: "norm", pkg: "math/big", typ: $funcType([], [nat], false)}, {prop: "make", name: "make", pkg: "math/big", typ: $funcType([$Int], [nat], false)}, {prop: "setWord", name: "setWord", pkg: "math/big", typ: $funcType([Word], [nat], false)}, {prop: "setUint64", name: "setUint64", pkg: "math/big", typ: $funcType([$Uint64], [nat], false)}, {prop: "set", name: "set", pkg: "math/big", typ: $funcType([nat], [nat], false)}, {prop: "add", name: "add", pkg: "math/big", typ: $funcType([nat, nat], [nat], false)}, {prop: "sub", name: "sub", pkg: "math/big", typ: $funcType([nat, nat], [nat], false)}, {prop: "cmp", name: "cmp", pkg: "math/big", typ: $funcType([nat], [$Int], false)}, {prop: "mulAddWW", name: "mulAddWW", pkg: "math/big", typ: $funcType([nat, Word, Word], [nat], false)}, {prop: "montgomery", name: "montgomery", pkg: "math/big", typ: $funcType([nat, nat, nat, Word, $Int], [nat], false)}, {prop: "mul", name: "mul", pkg: "math/big", typ: $funcType([nat, nat], [nat], false)}, {prop: "sqr", name: "sqr", pkg: "math/big", typ: $funcType([nat], [nat], false)}, {prop: "mulRange", name: "mulRange", pkg: "math/big", typ: $funcType([$Uint64, $Uint64], [nat], false)}, {prop: "divW", name: "divW", pkg: "math/big", typ: $funcType([nat, Word], [nat, Word], false)}, {prop: "div", name: "div", pkg: "math/big", typ: $funcType([nat, nat, nat], [nat, nat], false)}, {prop: "divLarge", name: "divLarge", pkg: "math/big", typ: $funcType([nat, nat, nat], [nat, nat], false)}, {prop: "bitLen", name: "bitLen", pkg: "math/big", typ: $funcType([], [$Int], false)}, {prop: "trailingZeroBits", name: "trailingZeroBits", pkg: "math/big", typ: $funcType([], [$Uint], false)}, {prop: "shl", name: "shl", pkg: "math/big", typ: $funcType([nat, $Uint], [nat], false)}, {prop: "shr", name: "shr", pkg: "math/big", typ: $funcType([nat, $Uint], [nat], false)}, {prop: "setBit", name: "setBit", pkg: "math/big", typ: $funcType([nat, $Uint, $Uint], [nat], false)}, {prop: "bit", name: "bit", pkg: "math/big", typ: $funcType([$Uint], [$Uint], false)}, {prop: "sticky", name: "sticky", pkg: "math/big", typ: $funcType([$Uint], [$Uint], false)}, {prop: "and", name: "and", pkg: "math/big", typ: $funcType([nat, nat], [nat], false)}, {prop: "andNot", name: "andNot", pkg: "math/big", typ: $funcType([nat, nat], [nat], false)}, {prop: "or", name: "or", pkg: "math/big", typ: $funcType([nat, nat], [nat], false)}, {prop: "xor", name: "xor", pkg: "math/big", typ: $funcType([nat, nat], [nat], false)}, {prop: "modW", name: "modW", pkg: "math/big", typ: $funcType([Word], [Word], false)}, {prop: "random", name: "random", pkg: "math/big", typ: $funcType([ptrType$6, nat, $Int], [nat], false)}, {prop: "expNN", name: "expNN", pkg: "math/big", typ: $funcType([nat, nat, nat], [nat], false)}, {prop: "expNNWindowed", name: "expNNWindowed", pkg: "math/big", typ: $funcType([nat, nat, nat], [nat], false)}, {prop: "expNNMontgomery", name: "expNNMontgomery", pkg: "math/big", typ: $funcType([nat, nat, nat], [nat], false)}, {prop: "bytes", name: "bytes", pkg: "math/big", typ: $funcType([sliceType$1], [$Int], false)}, {prop: "setBytes", name: "setBytes", pkg: "math/big", typ: $funcType([sliceType$1], [nat], false)}, {prop: "sqrt", name: "sqrt", pkg: "math/big", typ: $funcType([nat], [nat], false)}, {prop: "scan", name: "scan", pkg: "math/big", typ: $funcType([io.ByteScanner, $Int, $Bool], [nat, $Int, $Int, $error], false)}, {prop: "utoa", name: "utoa", pkg: "math/big", typ: $funcType([$Int], [sliceType$1], false)}, {prop: "itoa", name: "itoa", pkg: "math/big", typ: $funcType([$Bool, $Int], [sliceType$1], false)}, {prop: "convertWords", name: "convertWords", pkg: "math/big", typ: $funcType([sliceType$1, Word, $Int, Word, sliceType$3], [], false)}, {prop: "expWW", name: "expWW", pkg: "math/big", typ: $funcType([Word, Word], [nat], false)}, {prop: "probablyPrimeMillerRabin", name: "probablyPrimeMillerRabin", pkg: "math/big", typ: $funcType([$Int, $Bool], [$Bool], false)}, {prop: "probablyPrimeLucas", name: "probablyPrimeLucas", pkg: "math/big", typ: $funcType([], [$Bool], false)}];
	ptrType$2.methods = [{prop: "SetFloat64", name: "SetFloat64", pkg: "", typ: $funcType([$Float64], [ptrType$2], false)}, {prop: "Float32", name: "Float32", pkg: "", typ: $funcType([], [$Float32, $Bool], false)}, {prop: "Float64", name: "Float64", pkg: "", typ: $funcType([], [$Float64, $Bool], false)}, {prop: "SetFrac", name: "SetFrac", pkg: "", typ: $funcType([ptrType$1, ptrType$1], [ptrType$2], false)}, {prop: "SetFrac64", name: "SetFrac64", pkg: "", typ: $funcType([$Int64, $Int64], [ptrType$2], false)}, {prop: "SetInt", name: "SetInt", pkg: "", typ: $funcType([ptrType$1], [ptrType$2], false)}, {prop: "SetInt64", name: "SetInt64", pkg: "", typ: $funcType([$Int64], [ptrType$2], false)}, {prop: "Set", name: "Set", pkg: "", typ: $funcType([ptrType$2], [ptrType$2], false)}, {prop: "Abs", name: "Abs", pkg: "", typ: $funcType([ptrType$2], [ptrType$2], false)}, {prop: "Neg", name: "Neg", pkg: "", typ: $funcType([ptrType$2], [ptrType$2], false)}, {prop: "Inv", name: "Inv", pkg: "", typ: $funcType([ptrType$2], [ptrType$2], false)}, {prop: "Sign", name: "Sign", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "IsInt", name: "IsInt", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Num", name: "Num", pkg: "", typ: $funcType([], [ptrType$1], false)}, {prop: "Denom", name: "Denom", pkg: "", typ: $funcType([], [ptrType$1], false)}, {prop: "norm", name: "norm", pkg: "math/big", typ: $funcType([], [ptrType$2], false)}, {prop: "Cmp", name: "Cmp", pkg: "", typ: $funcType([ptrType$2], [$Int], false)}, {prop: "Add", name: "Add", pkg: "", typ: $funcType([ptrType$2, ptrType$2], [ptrType$2], false)}, {prop: "Sub", name: "Sub", pkg: "", typ: $funcType([ptrType$2, ptrType$2], [ptrType$2], false)}, {prop: "Mul", name: "Mul", pkg: "", typ: $funcType([ptrType$2, ptrType$2], [ptrType$2], false)}, {prop: "Quo", name: "Quo", pkg: "", typ: $funcType([ptrType$2, ptrType$2], [ptrType$2], false)}, {prop: "Scan", name: "Scan", pkg: "", typ: $funcType([fmt.ScanState, $Int32], [$error], false)}, {prop: "SetString", name: "SetString", pkg: "", typ: $funcType([$String], [ptrType$2, $Bool], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "marshal", name: "marshal", pkg: "math/big", typ: $funcType([], [sliceType$1], false)}, {prop: "RatString", name: "RatString", pkg: "", typ: $funcType([], [$String], false)}, {prop: "FloatString", name: "FloatString", pkg: "", typ: $funcType([$Int], [$String], false)}, {prop: "GobEncode", name: "GobEncode", pkg: "", typ: $funcType([], [sliceType$1, $error], false)}, {prop: "GobDecode", name: "GobDecode", pkg: "", typ: $funcType([sliceType$1], [$error], false)}, {prop: "MarshalText", name: "MarshalText", pkg: "", typ: $funcType([], [sliceType$1, $error], false)}, {prop: "UnmarshalText", name: "UnmarshalText", pkg: "", typ: $funcType([sliceType$1], [$error], false)}];
	decimal.init("math/big", [{prop: "mant", name: "mant", anonymous: false, exported: false, typ: sliceType$1, tag: ""}, {prop: "exp", name: "exp", anonymous: false, exported: false, typ: $Int, tag: ""}]);
	Float.init("math/big", [{prop: "prec", name: "prec", anonymous: false, exported: false, typ: $Uint32, tag: ""}, {prop: "mode", name: "mode", anonymous: false, exported: false, typ: RoundingMode, tag: ""}, {prop: "acc", name: "acc", anonymous: false, exported: false, typ: Accuracy, tag: ""}, {prop: "form", name: "form", anonymous: false, exported: false, typ: form, tag: ""}, {prop: "neg", name: "neg", anonymous: false, exported: false, typ: $Bool, tag: ""}, {prop: "mant", name: "mant", anonymous: false, exported: false, typ: nat, tag: ""}, {prop: "exp", name: "exp", anonymous: false, exported: false, typ: $Int32, tag: ""}]);
	ErrNaN.init("math/big", [{prop: "msg", name: "msg", anonymous: false, exported: false, typ: $String, tag: ""}]);
	Int.init("math/big", [{prop: "neg", name: "neg", anonymous: false, exported: false, typ: $Bool, tag: ""}, {prop: "abs", name: "abs", anonymous: false, exported: false, typ: nat, tag: ""}]);
	byteReader.init("", [{prop: "ScanState", name: "ScanState", anonymous: true, exported: true, typ: fmt.ScanState, tag: ""}]);
	nat.init(Word);
	divisor.init("math/big", [{prop: "bbb", name: "bbb", anonymous: false, exported: false, typ: nat, tag: ""}, {prop: "nbits", name: "nbits", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "ndigits", name: "ndigits", anonymous: false, exported: false, typ: $Int, tag: ""}]);
	Rat.init("math/big", [{prop: "a", name: "a", anonymous: false, exported: false, typ: Int, tag: ""}, {prop: "b", name: "b", anonymous: false, exported: false, typ: Int, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = bytes.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = binary.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = errors.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = fmt.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = nosync.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = io.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = math.$init(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = bits.$init(); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = rand.$init(); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = strconv.$init(); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = strings.$init(); /* */ $s = 11; case 11: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		natPool = new nosync.Pool.ptr(sliceType.nil, $throwNilPointerError);
		cacheBase10 = new structType.ptr(new nosync.Mutex.ptr(false), arrayType.zero());
		_Accuracy_index = $toNativeArray($kindUint8, [0, 5, 10, 15]);
		pow5tab = $toNativeArray($kindUint64, [new $Uint64(0, 1), new $Uint64(0, 5), new $Uint64(0, 25), new $Uint64(0, 125), new $Uint64(0, 625), new $Uint64(0, 3125), new $Uint64(0, 15625), new $Uint64(0, 78125), new $Uint64(0, 390625), new $Uint64(0, 1953125), new $Uint64(0, 9765625), new $Uint64(0, 48828125), new $Uint64(0, 244140625), new $Uint64(0, 1220703125), new $Uint64(1, 1808548329), new $Uint64(7, 452807053), new $Uint64(35, 2264035265), new $Uint64(177, 2730241733), new $Uint64(888, 766306777), new $Uint64(4440, 3831533885), new $Uint64(22204, 1977800241), new $Uint64(111022, 1299066613), new $Uint64(555111, 2200365769), new $Uint64(2775557, 2411894253), new $Uint64(13877787, 3469536673), new $Uint64(69388939, 167814181), new $Uint64(346944695, 839070905), new $Uint64(1734723475, 4195354525)]);
		natOne = new nat([1]);
		intOne = new Int.ptr(false, natOne);
		natTwo = new nat([2]);
		natTen = new nat([10]);
		karatsubaThreshold = 40;
		basicSqrThreshold = 20;
		karatsubaSqrThreshold = 400;
		leafSize = 8;
		_RoundingMode_index = $toNativeArray($kindUint8, [0, 13, 26, 32, 44, 57, 70]);
		_r = NewFloat(0.5); /* */ $s = 12; case 12: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		half = _r;
		_r$1 = NewFloat(2); /* */ $s = 13; case 13: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		two = _r$1;
		_r$2 = NewFloat(3); /* */ $s = 14; case 14: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		three = _r$2;
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["crypto/rand"] = (function() {
	var $pkg = {}, $init, errors, js, io, big, rngReader, sliceType, ptrType, ptrType$1, smallPrimesProduct, init, Int;
	errors = $packages["errors"];
	js = $packages["github.com/gopherjs/gopherjs/js"];
	io = $packages["io"];
	big = $packages["math/big"];
	rngReader = $pkg.rngReader = $newType(0, $kindStruct, "rand.rngReader", true, "crypto/rand", false, function() {
		this.$val = this;
		if (arguments.length === 0) {
			return;
		}
	});
	sliceType = $sliceType($Uint8);
	ptrType = $ptrType(big.Int);
	ptrType$1 = $ptrType(rngReader);
	init = function() {
		$pkg.Reader = new rngReader.ptr();
	};
	rngReader.ptr.prototype.Read = function(b) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, array, b, crypto, err, n, offset, r, randomBytes, require;
		n = 0;
		err = $ifaceNil;
		r = this;
		array = b.$array;
		offset = $parseInt(b.$offset) >> 0;
		crypto = $global.crypto;
		if (crypto === undefined) {
			crypto = $global.msCrypto;
		}
		if (!(crypto === undefined)) {
			if (!(crypto.getRandomValues === undefined)) {
				n = b.$length;
				if (n > 65536) {
					n = 65536;
				}
				crypto.getRandomValues(array.subarray(offset, offset + n >> 0));
				_tmp = n;
				_tmp$1 = $ifaceNil;
				n = _tmp;
				err = _tmp$1;
				return [n, err];
			}
		}
		require = $global.require;
		if (!(require === undefined)) {
			randomBytes = require($externalize("crypto", $String)).randomBytes;
			if (!(randomBytes === undefined)) {
				array.set(randomBytes(b.$length), offset);
				_tmp$2 = b.$length;
				_tmp$3 = $ifaceNil;
				n = _tmp$2;
				err = _tmp$3;
				return [n, err];
			}
		}
		_tmp$4 = 0;
		_tmp$5 = errors.New("crypto/rand not available in this environment");
		n = _tmp$4;
		err = _tmp$5;
		return [n, err];
	};
	rngReader.prototype.Read = function(b) { return this.$val.Read(b); };
	Int = function(rand, max) {
		var _q, _r, _r$1, _tmp, _tmp$1, _tuple, b, bitLen, bytes, err, k, max, n, rand, y, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _q = $f._q; _r = $f._r; _r$1 = $f._r$1; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tuple = $f._tuple; b = $f.b; bitLen = $f.bitLen; bytes = $f.bytes; err = $f.err; k = $f.k; max = $f.max; n = $f.n; rand = $f.rand; y = $f.y; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = ptrType.nil;
		err = $ifaceNil;
		if (max.Sign() <= 0) {
			$panic(new $String("crypto/rand: argument to Int is <= 0"));
		}
		n = new big.Int.ptr(false, big.nat.nil);
		n.Sub(max, n.SetUint64(new $Uint64(0, 1)));
		bitLen = n.BitLen();
		if (bitLen === 0) {
			$s = -1; return [n, err];
		}
		k = (_q = ((bitLen + 7 >> 0)) / 8, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
		b = (((_r = bitLen % 8, _r === _r ? _r : $throwRuntimeError("integer divide by zero")) >>> 0));
		if (b === 0) {
			b = 8;
		}
		bytes = $makeSlice(sliceType, k);
		/* while (true) { */ case 1:
			_r$1 = io.ReadFull(rand, bytes); /* */ $s = 3; case 3: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_tuple = _r$1;
			err = _tuple[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				_tmp = ptrType.nil;
				_tmp$1 = err;
				n = _tmp;
				err = _tmp$1;
				$s = -1; return [n, err];
			}
			(0 >= bytes.$length ? ($throwRuntimeError("index out of range"), undefined) : bytes.$array[bytes.$offset + 0] = (((0 >= bytes.$length ? ($throwRuntimeError("index out of range"), undefined) : bytes.$array[bytes.$offset + 0]) & (((((((y = b, y < 32 ? (1 << y) : 0) >> 0)) - 1 >> 0) << 24 >>> 24)))) >>> 0));
			n.SetBytes(bytes);
			if (n.Cmp(max) < 0) {
				$s = -1; return [n, err];
			}
		/* } */ $s = 1; continue; case 2:
		$s = -1; return [n, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Int }; } $f._q = _q; $f._r = _r; $f._r$1 = _r$1; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tuple = _tuple; $f.b = b; $f.bitLen = bitLen; $f.bytes = bytes; $f.err = err; $f.k = k; $f.max = max; $f.n = n; $f.rand = rand; $f.y = y; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Int = Int;
	ptrType$1.methods = [{prop: "Read", name: "Read", pkg: "", typ: $funcType([sliceType], [$Int, $error], false)}];
	rngReader.init("", []);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = errors.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = js.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = io.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = big.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$pkg.Reader = $ifaceNil;
		smallPrimesProduct = new big.Int.ptr(false, big.nat.nil).SetUint64(new $Uint64(3793877372, 820596253));
		init();
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["encoding/base64"] = (function() {
	var $pkg = {}, $init, binary, io, strconv, Encoding, CorruptInputError, arrayType, arrayType$1, sliceType, ptrType, arrayType$4, NewEncoding;
	binary = $packages["encoding/binary"];
	io = $packages["io"];
	strconv = $packages["strconv"];
	Encoding = $pkg.Encoding = $newType(0, $kindStruct, "base64.Encoding", true, "encoding/base64", true, function(encode_, decodeMap_, padChar_, strict_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.encode = arrayType.zero();
			this.decodeMap = arrayType$1.zero();
			this.padChar = 0;
			this.strict = false;
			return;
		}
		this.encode = encode_;
		this.decodeMap = decodeMap_;
		this.padChar = padChar_;
		this.strict = strict_;
	});
	CorruptInputError = $pkg.CorruptInputError = $newType(8, $kindInt64, "base64.CorruptInputError", true, "encoding/base64", true, null);
	arrayType = $arrayType($Uint8, 64);
	arrayType$1 = $arrayType($Uint8, 256);
	sliceType = $sliceType($Uint8);
	ptrType = $ptrType(Encoding);
	arrayType$4 = $arrayType($Uint8, 4);
	NewEncoding = function(encoder$1) {
		var e, encoder$1, i, i$1, i$2, x, x$1, x$2;
		if (!((encoder$1.length === 64))) {
			$panic(new $String("encoding alphabet is not 64-bytes long"));
		}
		i = 0;
		while (true) {
			if (!(i < encoder$1.length)) { break; }
			if ((encoder$1.charCodeAt(i) === 10) || (encoder$1.charCodeAt(i) === 13)) {
				$panic(new $String("encoding alphabet contains newline character"));
			}
			i = i + (1) >> 0;
		}
		e = new Encoding.ptr(arrayType.zero(), arrayType$1.zero(), 0, false);
		e.padChar = 61;
		$copyString(new sliceType(e.encode), encoder$1);
		i$1 = 0;
		while (true) {
			if (!(i$1 < 256)) { break; }
			(x = e.decodeMap, ((i$1 < 0 || i$1 >= x.length) ? ($throwRuntimeError("index out of range"), undefined) : x[i$1] = 255));
			i$1 = i$1 + (1) >> 0;
		}
		i$2 = 0;
		while (true) {
			if (!(i$2 < encoder$1.length)) { break; }
			(x$1 = e.decodeMap, x$2 = encoder$1.charCodeAt(i$2), ((x$2 < 0 || x$2 >= x$1.length) ? ($throwRuntimeError("index out of range"), undefined) : x$1[x$2] = ((i$2 << 24 >>> 24))));
			i$2 = i$2 + (1) >> 0;
		}
		return e;
	};
	$pkg.NewEncoding = NewEncoding;
	Encoding.ptr.prototype.WithPadding = function(padding) {
		var enc, i, padding, x;
		enc = this;
		if ((padding === 13) || (padding === 10) || padding > 255) {
			$panic(new $String("invalid padding"));
		}
		i = 0;
		while (true) {
			if (!(i < 64)) { break; }
			if ((((x = enc.encode, ((i < 0 || i >= x.length) ? ($throwRuntimeError("index out of range"), undefined) : x[i])) >> 0)) === padding) {
				$panic(new $String("padding contained in alphabet"));
			}
			i = i + (1) >> 0;
		}
		enc.padChar = padding;
		return enc;
	};
	Encoding.prototype.WithPadding = function(padding) { return this.$val.WithPadding(padding); };
	Encoding.ptr.prototype.Strict = function() {
		var enc;
		enc = this;
		enc.strict = true;
		return enc;
	};
	Encoding.prototype.Strict = function() { return this.$val.Strict(); };
	Encoding.ptr.prototype.Encode = function(dst, src) {
		var _1, _q, _tmp, _tmp$1, di, dst, enc, n, remain, si, src, val, val$1, x, x$1, x$10, x$11, x$12, x$13, x$14, x$15, x$16, x$17, x$18, x$19, x$2, x$20, x$21, x$22, x$23, x$24, x$25, x$26, x$27, x$28, x$3, x$4, x$5, x$6, x$7, x$8, x$9;
		enc = this;
		if (src.$length === 0) {
			return;
		}
		_tmp = 0;
		_tmp$1 = 0;
		di = _tmp;
		si = _tmp$1;
		n = $imul(((_q = src.$length / 3, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"))), 3);
		while (true) {
			if (!(si < n)) { break; }
			val = (((((((x = si + 0 >> 0, ((x < 0 || x >= src.$length) ? ($throwRuntimeError("index out of range"), undefined) : src.$array[src.$offset + x])) >>> 0)) << 16 >>> 0) | ((((x$1 = si + 1 >> 0, ((x$1 < 0 || x$1 >= src.$length) ? ($throwRuntimeError("index out of range"), undefined) : src.$array[src.$offset + x$1])) >>> 0)) << 8 >>> 0)) >>> 0) | (((x$2 = si + 2 >> 0, ((x$2 < 0 || x$2 >= src.$length) ? ($throwRuntimeError("index out of range"), undefined) : src.$array[src.$offset + x$2])) >>> 0))) >>> 0;
			(x$5 = di + 0 >> 0, ((x$5 < 0 || x$5 >= dst.$length) ? ($throwRuntimeError("index out of range"), undefined) : dst.$array[dst.$offset + x$5] = (x$3 = enc.encode, x$4 = ((val >>> 18 >>> 0) & 63) >>> 0, ((x$4 < 0 || x$4 >= x$3.length) ? ($throwRuntimeError("index out of range"), undefined) : x$3[x$4]))));
			(x$8 = di + 1 >> 0, ((x$8 < 0 || x$8 >= dst.$length) ? ($throwRuntimeError("index out of range"), undefined) : dst.$array[dst.$offset + x$8] = (x$6 = enc.encode, x$7 = ((val >>> 12 >>> 0) & 63) >>> 0, ((x$7 < 0 || x$7 >= x$6.length) ? ($throwRuntimeError("index out of range"), undefined) : x$6[x$7]))));
			(x$11 = di + 2 >> 0, ((x$11 < 0 || x$11 >= dst.$length) ? ($throwRuntimeError("index out of range"), undefined) : dst.$array[dst.$offset + x$11] = (x$9 = enc.encode, x$10 = ((val >>> 6 >>> 0) & 63) >>> 0, ((x$10 < 0 || x$10 >= x$9.length) ? ($throwRuntimeError("index out of range"), undefined) : x$9[x$10]))));
			(x$14 = di + 3 >> 0, ((x$14 < 0 || x$14 >= dst.$length) ? ($throwRuntimeError("index out of range"), undefined) : dst.$array[dst.$offset + x$14] = (x$12 = enc.encode, x$13 = (val & 63) >>> 0, ((x$13 < 0 || x$13 >= x$12.length) ? ($throwRuntimeError("index out of range"), undefined) : x$12[x$13]))));
			si = si + (3) >> 0;
			di = di + (4) >> 0;
		}
		remain = src.$length - si >> 0;
		if (remain === 0) {
			return;
		}
		val$1 = (((x$15 = si + 0 >> 0, ((x$15 < 0 || x$15 >= src.$length) ? ($throwRuntimeError("index out of range"), undefined) : src.$array[src.$offset + x$15])) >>> 0)) << 16 >>> 0;
		if (remain === 2) {
			val$1 = (val$1 | (((((x$16 = si + 1 >> 0, ((x$16 < 0 || x$16 >= src.$length) ? ($throwRuntimeError("index out of range"), undefined) : src.$array[src.$offset + x$16])) >>> 0)) << 8 >>> 0))) >>> 0;
		}
		(x$19 = di + 0 >> 0, ((x$19 < 0 || x$19 >= dst.$length) ? ($throwRuntimeError("index out of range"), undefined) : dst.$array[dst.$offset + x$19] = (x$17 = enc.encode, x$18 = ((val$1 >>> 18 >>> 0) & 63) >>> 0, ((x$18 < 0 || x$18 >= x$17.length) ? ($throwRuntimeError("index out of range"), undefined) : x$17[x$18]))));
		(x$22 = di + 1 >> 0, ((x$22 < 0 || x$22 >= dst.$length) ? ($throwRuntimeError("index out of range"), undefined) : dst.$array[dst.$offset + x$22] = (x$20 = enc.encode, x$21 = ((val$1 >>> 12 >>> 0) & 63) >>> 0, ((x$21 < 0 || x$21 >= x$20.length) ? ($throwRuntimeError("index out of range"), undefined) : x$20[x$21]))));
		_1 = remain;
		if (_1 === (2)) {
			(x$25 = di + 2 >> 0, ((x$25 < 0 || x$25 >= dst.$length) ? ($throwRuntimeError("index out of range"), undefined) : dst.$array[dst.$offset + x$25] = (x$23 = enc.encode, x$24 = ((val$1 >>> 6 >>> 0) & 63) >>> 0, ((x$24 < 0 || x$24 >= x$23.length) ? ($throwRuntimeError("index out of range"), undefined) : x$23[x$24]))));
			if (!((enc.padChar === -1))) {
				(x$26 = di + 3 >> 0, ((x$26 < 0 || x$26 >= dst.$length) ? ($throwRuntimeError("index out of range"), undefined) : dst.$array[dst.$offset + x$26] = ((enc.padChar << 24 >>> 24))));
			}
		} else if (_1 === (1)) {
			if (!((enc.padChar === -1))) {
				(x$27 = di + 2 >> 0, ((x$27 < 0 || x$27 >= dst.$length) ? ($throwRuntimeError("index out of range"), undefined) : dst.$array[dst.$offset + x$27] = ((enc.padChar << 24 >>> 24))));
				(x$28 = di + 3 >> 0, ((x$28 < 0 || x$28 >= dst.$length) ? ($throwRuntimeError("index out of range"), undefined) : dst.$array[dst.$offset + x$28] = ((enc.padChar << 24 >>> 24))));
			}
		}
	};
	Encoding.prototype.Encode = function(dst, src) { return this.$val.Encode(dst, src); };
	Encoding.ptr.prototype.EncodeToString = function(src) {
		var buf, enc, src;
		enc = this;
		buf = $makeSlice(sliceType, enc.EncodedLen(src.$length));
		enc.Encode(buf, src);
		return ($bytesToString(buf));
	};
	Encoding.prototype.EncodeToString = function(src) { return this.$val.EncodeToString(src); };
	Encoding.ptr.prototype.EncodedLen = function(n) {
		var _q, _q$1, enc, n;
		enc = this;
		if (enc.padChar === -1) {
			return (_q = ((($imul(n, 8)) + 5 >> 0)) / 6, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
		}
		return $imul((_q$1 = ((n + 2 >> 0)) / 3, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero")), 4);
	};
	Encoding.prototype.EncodedLen = function(n) { return this.$val.EncodedLen(n); };
	CorruptInputError.prototype.Error = function() {
		var e;
		e = this;
		return "illegal base64 data at input byte " + strconv.FormatInt((new $Int64(e.$high, e.$low)), 10);
	};
	$ptrType(CorruptInputError).prototype.Error = function() { return this.$get().Error(); };
	Encoding.ptr.prototype.decodeQuantum = function(dst, src, si) {
		var _1, _2, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$15, _tmp$16, _tmp$17, _tmp$18, _tmp$19, _tmp$2, _tmp$20, _tmp$21, _tmp$22, _tmp$23, _tmp$24, _tmp$25, _tmp$26, _tmp$27, _tmp$28, _tmp$29, _tmp$3, _tmp$30, _tmp$31, _tmp$32, _tmp$33, _tmp$34, _tmp$35, _tmp$36, _tmp$37, _tmp$38, _tmp$39, _tmp$4, _tmp$40, _tmp$41, _tmp$42, _tmp$43, _tmp$44, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, dbuf, dinc, dlen, dst, enc, err, in$1, j, n, nsi, out, si, src, val, x;
		nsi = 0;
		n = 0;
		err = $ifaceNil;
		enc = this;
		dbuf = arrayType$4.zero();
		_tmp = 3;
		_tmp$1 = 4;
		dinc = _tmp;
		dlen = _tmp$1;
		j = 0;
		while (true) {
			if (!(j < 4)) { break; }
			if (src.$length === si) {
				if ((j === 0)) {
					_tmp$2 = si;
					_tmp$3 = 0;
					_tmp$4 = $ifaceNil;
					nsi = _tmp$2;
					n = _tmp$3;
					err = _tmp$4;
					return [nsi, n, err];
				} else if (((j === 1)) || (!((enc.padChar === -1)))) {
					_tmp$5 = si;
					_tmp$6 = 0;
					_tmp$7 = (new CorruptInputError(0, (si - j >> 0)));
					nsi = _tmp$5;
					n = _tmp$6;
					err = _tmp$7;
					return [nsi, n, err];
				}
				_tmp$8 = j - 1 >> 0;
				_tmp$9 = j;
				dinc = _tmp$8;
				dlen = _tmp$9;
				break;
			}
			in$1 = ((si < 0 || si >= src.$length) ? ($throwRuntimeError("index out of range"), undefined) : src.$array[src.$offset + si]);
			si = si + (1) >> 0;
			out = (x = enc.decodeMap, ((in$1 < 0 || in$1 >= x.length) ? ($throwRuntimeError("index out of range"), undefined) : x[in$1]));
			if (!((out === 255))) {
				((j < 0 || j >= dbuf.length) ? ($throwRuntimeError("index out of range"), undefined) : dbuf[j] = out);
				j = j + (1) >> 0;
				continue;
			}
			if ((in$1 === 10) || (in$1 === 13)) {
				j = j - (1) >> 0;
				j = j + (1) >> 0;
				continue;
			}
			if (!((((in$1 >> 0)) === enc.padChar))) {
				_tmp$10 = si;
				_tmp$11 = 0;
				_tmp$12 = (new CorruptInputError(0, (si - 1 >> 0)));
				nsi = _tmp$10;
				n = _tmp$11;
				err = _tmp$12;
				return [nsi, n, err];
			}
			_1 = j;
			if ((_1 === (0)) || (_1 === (1))) {
				_tmp$13 = si;
				_tmp$14 = 0;
				_tmp$15 = (new CorruptInputError(0, (si - 1 >> 0)));
				nsi = _tmp$13;
				n = _tmp$14;
				err = _tmp$15;
				return [nsi, n, err];
			} else if (_1 === (2)) {
				while (true) {
					if (!(si < src.$length && ((((si < 0 || si >= src.$length) ? ($throwRuntimeError("index out of range"), undefined) : src.$array[src.$offset + si]) === 10) || (((si < 0 || si >= src.$length) ? ($throwRuntimeError("index out of range"), undefined) : src.$array[src.$offset + si]) === 13)))) { break; }
					si = si + (1) >> 0;
				}
				if (si === src.$length) {
					_tmp$16 = si;
					_tmp$17 = 0;
					_tmp$18 = (new CorruptInputError(0, src.$length));
					nsi = _tmp$16;
					n = _tmp$17;
					err = _tmp$18;
					return [nsi, n, err];
				}
				if (!((((((si < 0 || si >= src.$length) ? ($throwRuntimeError("index out of range"), undefined) : src.$array[src.$offset + si]) >> 0)) === enc.padChar))) {
					_tmp$19 = si;
					_tmp$20 = 0;
					_tmp$21 = (new CorruptInputError(0, (si - 1 >> 0)));
					nsi = _tmp$19;
					n = _tmp$20;
					err = _tmp$21;
					return [nsi, n, err];
				}
				si = si + (1) >> 0;
			}
			while (true) {
				if (!(si < src.$length && ((((si < 0 || si >= src.$length) ? ($throwRuntimeError("index out of range"), undefined) : src.$array[src.$offset + si]) === 10) || (((si < 0 || si >= src.$length) ? ($throwRuntimeError("index out of range"), undefined) : src.$array[src.$offset + si]) === 13)))) { break; }
				si = si + (1) >> 0;
			}
			if (si < src.$length) {
				err = (new CorruptInputError(0, si));
			}
			_tmp$22 = 3;
			_tmp$23 = j;
			dinc = _tmp$22;
			dlen = _tmp$23;
			break;
		}
		val = ((((((((dbuf[0] >>> 0)) << 18 >>> 0) | (((dbuf[1] >>> 0)) << 12 >>> 0)) >>> 0) | (((dbuf[2] >>> 0)) << 6 >>> 0)) >>> 0) | ((dbuf[3] >>> 0))) >>> 0;
		_tmp$24 = (((val >>> 0 >>> 0) << 24 >>> 24));
		_tmp$25 = (((val >>> 8 >>> 0) << 24 >>> 24));
		_tmp$26 = (((val >>> 16 >>> 0) << 24 >>> 24));
		dbuf[2] = _tmp$24;
		dbuf[1] = _tmp$25;
		dbuf[0] = _tmp$26;
		_2 = dlen;
		if (_2 === (4)) {
			(2 >= dst.$length ? ($throwRuntimeError("index out of range"), undefined) : dst.$array[dst.$offset + 2] = dbuf[2]);
			dbuf[2] = 0;
			(1 >= dst.$length ? ($throwRuntimeError("index out of range"), undefined) : dst.$array[dst.$offset + 1] = dbuf[1]);
			if (enc.strict && !((dbuf[2] === 0))) {
				_tmp$27 = si;
				_tmp$28 = 0;
				_tmp$29 = (new CorruptInputError(0, (si - 1 >> 0)));
				nsi = _tmp$27;
				n = _tmp$28;
				err = _tmp$29;
				return [nsi, n, err];
			}
			dbuf[1] = 0;
			(0 >= dst.$length ? ($throwRuntimeError("index out of range"), undefined) : dst.$array[dst.$offset + 0] = dbuf[0]);
			if (enc.strict && (!((dbuf[1] === 0)) || !((dbuf[2] === 0)))) {
				_tmp$30 = si;
				_tmp$31 = 0;
				_tmp$32 = (new CorruptInputError(0, (si - 2 >> 0)));
				nsi = _tmp$30;
				n = _tmp$31;
				err = _tmp$32;
				return [nsi, n, err];
			}
		} else if (_2 === (3)) {
			(1 >= dst.$length ? ($throwRuntimeError("index out of range"), undefined) : dst.$array[dst.$offset + 1] = dbuf[1]);
			if (enc.strict && !((dbuf[2] === 0))) {
				_tmp$33 = si;
				_tmp$34 = 0;
				_tmp$35 = (new CorruptInputError(0, (si - 1 >> 0)));
				nsi = _tmp$33;
				n = _tmp$34;
				err = _tmp$35;
				return [nsi, n, err];
			}
			dbuf[1] = 0;
			(0 >= dst.$length ? ($throwRuntimeError("index out of range"), undefined) : dst.$array[dst.$offset + 0] = dbuf[0]);
			if (enc.strict && (!((dbuf[1] === 0)) || !((dbuf[2] === 0)))) {
				_tmp$36 = si;
				_tmp$37 = 0;
				_tmp$38 = (new CorruptInputError(0, (si - 2 >> 0)));
				nsi = _tmp$36;
				n = _tmp$37;
				err = _tmp$38;
				return [nsi, n, err];
			}
		} else if (_2 === (2)) {
			(0 >= dst.$length ? ($throwRuntimeError("index out of range"), undefined) : dst.$array[dst.$offset + 0] = dbuf[0]);
			if (enc.strict && (!((dbuf[1] === 0)) || !((dbuf[2] === 0)))) {
				_tmp$39 = si;
				_tmp$40 = 0;
				_tmp$41 = (new CorruptInputError(0, (si - 2 >> 0)));
				nsi = _tmp$39;
				n = _tmp$40;
				err = _tmp$41;
				return [nsi, n, err];
			}
		}
		dst = $subslice(dst, dinc);
		_tmp$42 = si;
		_tmp$43 = dlen - 1 >> 0;
		_tmp$44 = err;
		nsi = _tmp$42;
		n = _tmp$43;
		err = _tmp$44;
		return [nsi, n, err];
	};
	Encoding.prototype.decodeQuantum = function(dst, src, si) { return this.$val.decodeQuantum(dst, src, si); };
	Encoding.ptr.prototype.DecodeString = function(s) {
		var _tuple, dbuf, enc, err, n, s;
		enc = this;
		dbuf = $makeSlice(sliceType, enc.DecodedLen(s.length));
		_tuple = enc.Decode(dbuf, (new sliceType($stringToBytes(s))));
		n = _tuple[0];
		err = _tuple[1];
		return [$subslice(dbuf, 0, n), err];
	};
	Encoding.prototype.DecodeString = function(s) { return this.$val.DecodeString(s); };
	Encoding.ptr.prototype.Decode = function(dst, src) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tuple, _tuple$1, _tuple$2, dst, enc, err, ilen, n, ninc, ninc$1, ninc$2, ok, ok$1, olen, si, src;
		n = 0;
		err = $ifaceNil;
		enc = this;
		if (src.$length === 0) {
			_tmp = 0;
			_tmp$1 = $ifaceNil;
			n = _tmp;
			err = _tmp$1;
			return [n, err];
		}
		si = 0;
		ilen = src.$length;
		olen = dst.$length;
		while (true) {
			if (!(false && (ilen - si >> 0) >= 8 && (olen - n >> 0) >= 8)) { break; }
			ok = enc.decode64($subslice(dst, n), $subslice(src, si));
			if (ok) {
				n = n + (6) >> 0;
				si = si + (8) >> 0;
			} else {
				ninc = 0;
				_tuple = enc.decodeQuantum($subslice(dst, n), src, si);
				si = _tuple[0];
				ninc = _tuple[1];
				err = _tuple[2];
				n = n + (ninc) >> 0;
				if (!($interfaceIsEqual(err, $ifaceNil))) {
					_tmp$2 = n;
					_tmp$3 = err;
					n = _tmp$2;
					err = _tmp$3;
					return [n, err];
				}
			}
		}
		while (true) {
			if (!((ilen - si >> 0) >= 4 && (olen - n >> 0) >= 4)) { break; }
			ok$1 = enc.decode32($subslice(dst, n), $subslice(src, si));
			if (ok$1) {
				n = n + (3) >> 0;
				si = si + (4) >> 0;
			} else {
				ninc$1 = 0;
				_tuple$1 = enc.decodeQuantum($subslice(dst, n), src, si);
				si = _tuple$1[0];
				ninc$1 = _tuple$1[1];
				err = _tuple$1[2];
				n = n + (ninc$1) >> 0;
				if (!($interfaceIsEqual(err, $ifaceNil))) {
					_tmp$4 = n;
					_tmp$5 = err;
					n = _tmp$4;
					err = _tmp$5;
					return [n, err];
				}
			}
		}
		while (true) {
			if (!(si < src.$length)) { break; }
			ninc$2 = 0;
			_tuple$2 = enc.decodeQuantum($subslice(dst, n), src, si);
			si = _tuple$2[0];
			ninc$2 = _tuple$2[1];
			err = _tuple$2[2];
			n = n + (ninc$2) >> 0;
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				_tmp$6 = n;
				_tmp$7 = err;
				n = _tmp$6;
				err = _tmp$7;
				return [n, err];
			}
		}
		_tmp$8 = n;
		_tmp$9 = err;
		n = _tmp$8;
		err = _tmp$9;
		return [n, err];
	};
	Encoding.prototype.Decode = function(dst, src) { return this.$val.Decode(dst, src); };
	Encoding.ptr.prototype.decode32 = function(dst, src) {
		var _tmp, _tmp$1, dn, dst, enc, n, src, x, x$1, x$2, x$3, x$4, x$5, x$6, x$7;
		enc = this;
		_tmp = 0;
		_tmp$1 = 0;
		dn = _tmp;
		n = _tmp$1;
		n = (((x = enc.decodeMap, x$1 = (0 >= src.$length ? ($throwRuntimeError("index out of range"), undefined) : src.$array[src.$offset + 0]), ((x$1 < 0 || x$1 >= x.length) ? ($throwRuntimeError("index out of range"), undefined) : x[x$1])) >>> 0));
		if (n === 255) {
			return false;
		}
		dn = (dn | ((n << 26 >>> 0))) >>> 0;
		n = (((x$2 = enc.decodeMap, x$3 = (1 >= src.$length ? ($throwRuntimeError("index out of range"), undefined) : src.$array[src.$offset + 1]), ((x$3 < 0 || x$3 >= x$2.length) ? ($throwRuntimeError("index out of range"), undefined) : x$2[x$3])) >>> 0));
		if (n === 255) {
			return false;
		}
		dn = (dn | ((n << 20 >>> 0))) >>> 0;
		n = (((x$4 = enc.decodeMap, x$5 = (2 >= src.$length ? ($throwRuntimeError("index out of range"), undefined) : src.$array[src.$offset + 2]), ((x$5 < 0 || x$5 >= x$4.length) ? ($throwRuntimeError("index out of range"), undefined) : x$4[x$5])) >>> 0));
		if (n === 255) {
			return false;
		}
		dn = (dn | ((n << 14 >>> 0))) >>> 0;
		n = (((x$6 = enc.decodeMap, x$7 = (3 >= src.$length ? ($throwRuntimeError("index out of range"), undefined) : src.$array[src.$offset + 3]), ((x$7 < 0 || x$7 >= x$6.length) ? ($throwRuntimeError("index out of range"), undefined) : x$6[x$7])) >>> 0));
		if (n === 255) {
			return false;
		}
		dn = (dn | ((n << 8 >>> 0))) >>> 0;
		$clone(binary.BigEndian, binary.bigEndian).PutUint32(dst, dn);
		return true;
	};
	Encoding.prototype.decode32 = function(dst, src) { return this.$val.decode32(dst, src); };
	Encoding.ptr.prototype.decode64 = function(dst, src) {
		var _tmp, _tmp$1, dn, dst, enc, n, src, x, x$1, x$10, x$11, x$12, x$13, x$14, x$15, x$16, x$17, x$18, x$19, x$2, x$20, x$21, x$22, x$23, x$3, x$4, x$5, x$6, x$7, x$8, x$9;
		enc = this;
		_tmp = new $Uint64(0, 0);
		_tmp$1 = new $Uint64(0, 0);
		dn = _tmp;
		n = _tmp$1;
		n = (new $Uint64(0, (x = enc.decodeMap, x$1 = (0 >= src.$length ? ($throwRuntimeError("index out of range"), undefined) : src.$array[src.$offset + 0]), ((x$1 < 0 || x$1 >= x.length) ? ($throwRuntimeError("index out of range"), undefined) : x[x$1]))));
		if ((n.$high === 0 && n.$low === 255)) {
			return false;
		}
		dn = (x$2 = $shiftLeft64(n, 58), new $Uint64(dn.$high | x$2.$high, (dn.$low | x$2.$low) >>> 0));
		n = (new $Uint64(0, (x$3 = enc.decodeMap, x$4 = (1 >= src.$length ? ($throwRuntimeError("index out of range"), undefined) : src.$array[src.$offset + 1]), ((x$4 < 0 || x$4 >= x$3.length) ? ($throwRuntimeError("index out of range"), undefined) : x$3[x$4]))));
		if ((n.$high === 0 && n.$low === 255)) {
			return false;
		}
		dn = (x$5 = $shiftLeft64(n, 52), new $Uint64(dn.$high | x$5.$high, (dn.$low | x$5.$low) >>> 0));
		n = (new $Uint64(0, (x$6 = enc.decodeMap, x$7 = (2 >= src.$length ? ($throwRuntimeError("index out of range"), undefined) : src.$array[src.$offset + 2]), ((x$7 < 0 || x$7 >= x$6.length) ? ($throwRuntimeError("index out of range"), undefined) : x$6[x$7]))));
		if ((n.$high === 0 && n.$low === 255)) {
			return false;
		}
		dn = (x$8 = $shiftLeft64(n, 46), new $Uint64(dn.$high | x$8.$high, (dn.$low | x$8.$low) >>> 0));
		n = (new $Uint64(0, (x$9 = enc.decodeMap, x$10 = (3 >= src.$length ? ($throwRuntimeError("index out of range"), undefined) : src.$array[src.$offset + 3]), ((x$10 < 0 || x$10 >= x$9.length) ? ($throwRuntimeError("index out of range"), undefined) : x$9[x$10]))));
		if ((n.$high === 0 && n.$low === 255)) {
			return false;
		}
		dn = (x$11 = $shiftLeft64(n, 40), new $Uint64(dn.$high | x$11.$high, (dn.$low | x$11.$low) >>> 0));
		n = (new $Uint64(0, (x$12 = enc.decodeMap, x$13 = (4 >= src.$length ? ($throwRuntimeError("index out of range"), undefined) : src.$array[src.$offset + 4]), ((x$13 < 0 || x$13 >= x$12.length) ? ($throwRuntimeError("index out of range"), undefined) : x$12[x$13]))));
		if ((n.$high === 0 && n.$low === 255)) {
			return false;
		}
		dn = (x$14 = $shiftLeft64(n, 34), new $Uint64(dn.$high | x$14.$high, (dn.$low | x$14.$low) >>> 0));
		n = (new $Uint64(0, (x$15 = enc.decodeMap, x$16 = (5 >= src.$length ? ($throwRuntimeError("index out of range"), undefined) : src.$array[src.$offset + 5]), ((x$16 < 0 || x$16 >= x$15.length) ? ($throwRuntimeError("index out of range"), undefined) : x$15[x$16]))));
		if ((n.$high === 0 && n.$low === 255)) {
			return false;
		}
		dn = (x$17 = $shiftLeft64(n, 28), new $Uint64(dn.$high | x$17.$high, (dn.$low | x$17.$low) >>> 0));
		n = (new $Uint64(0, (x$18 = enc.decodeMap, x$19 = (6 >= src.$length ? ($throwRuntimeError("index out of range"), undefined) : src.$array[src.$offset + 6]), ((x$19 < 0 || x$19 >= x$18.length) ? ($throwRuntimeError("index out of range"), undefined) : x$18[x$19]))));
		if ((n.$high === 0 && n.$low === 255)) {
			return false;
		}
		dn = (x$20 = $shiftLeft64(n, 22), new $Uint64(dn.$high | x$20.$high, (dn.$low | x$20.$low) >>> 0));
		n = (new $Uint64(0, (x$21 = enc.decodeMap, x$22 = (7 >= src.$length ? ($throwRuntimeError("index out of range"), undefined) : src.$array[src.$offset + 7]), ((x$22 < 0 || x$22 >= x$21.length) ? ($throwRuntimeError("index out of range"), undefined) : x$21[x$22]))));
		if ((n.$high === 0 && n.$low === 255)) {
			return false;
		}
		dn = (x$23 = $shiftLeft64(n, 16), new $Uint64(dn.$high | x$23.$high, (dn.$low | x$23.$low) >>> 0));
		$clone(binary.BigEndian, binary.bigEndian).PutUint64(dst, dn);
		return true;
	};
	Encoding.prototype.decode64 = function(dst, src) { return this.$val.decode64(dst, src); };
	Encoding.ptr.prototype.DecodedLen = function(n) {
		var _q, _q$1, enc, n;
		enc = this;
		if (enc.padChar === -1) {
			return (_q = ($imul(n, 6)) / 8, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
		}
		return $imul((_q$1 = n / 4, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero")), 3);
	};
	Encoding.prototype.DecodedLen = function(n) { return this.$val.DecodedLen(n); };
	Encoding.methods = [{prop: "WithPadding", name: "WithPadding", pkg: "", typ: $funcType([$Int32], [ptrType], false)}, {prop: "Strict", name: "Strict", pkg: "", typ: $funcType([], [ptrType], false)}];
	ptrType.methods = [{prop: "Encode", name: "Encode", pkg: "", typ: $funcType([sliceType, sliceType], [], false)}, {prop: "EncodeToString", name: "EncodeToString", pkg: "", typ: $funcType([sliceType], [$String], false)}, {prop: "EncodedLen", name: "EncodedLen", pkg: "", typ: $funcType([$Int], [$Int], false)}, {prop: "decodeQuantum", name: "decodeQuantum", pkg: "encoding/base64", typ: $funcType([sliceType, sliceType, $Int], [$Int, $Int, $error], false)}, {prop: "DecodeString", name: "DecodeString", pkg: "", typ: $funcType([$String], [sliceType, $error], false)}, {prop: "Decode", name: "Decode", pkg: "", typ: $funcType([sliceType, sliceType], [$Int, $error], false)}, {prop: "decode32", name: "decode32", pkg: "encoding/base64", typ: $funcType([sliceType, sliceType], [$Bool], false)}, {prop: "decode64", name: "decode64", pkg: "encoding/base64", typ: $funcType([sliceType, sliceType], [$Bool], false)}, {prop: "DecodedLen", name: "DecodedLen", pkg: "", typ: $funcType([$Int], [$Int], false)}];
	CorruptInputError.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	Encoding.init("encoding/base64", [{prop: "encode", name: "encode", anonymous: false, exported: false, typ: arrayType, tag: ""}, {prop: "decodeMap", name: "decodeMap", anonymous: false, exported: false, typ: arrayType$1, tag: ""}, {prop: "padChar", name: "padChar", anonymous: false, exported: false, typ: $Int32, tag: ""}, {prop: "strict", name: "strict", anonymous: false, exported: false, typ: $Bool, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = binary.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = io.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = strconv.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$pkg.StdEncoding = NewEncoding("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/");
		$pkg.URLEncoding = NewEncoding("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_");
		$pkg.RawStdEncoding = $clone($pkg.StdEncoding, Encoding).WithPadding(-1);
		$pkg.RawURLEncoding = $clone($pkg.URLEncoding, Encoding).WithPadding(-1);
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["bufio"] = (function() {
	var $pkg = {}, $init, bytes, errors, io, utf8, Reader, sliceType, ptrType, sliceType$1, errNegativeRead, errNegativeWrite, NewReaderSize, NewReader;
	bytes = $packages["bytes"];
	errors = $packages["errors"];
	io = $packages["io"];
	utf8 = $packages["unicode/utf8"];
	Reader = $pkg.Reader = $newType(0, $kindStruct, "bufio.Reader", true, "bufio", true, function(buf_, rd_, r_, w_, err_, lastByte_, lastRuneSize_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.buf = sliceType.nil;
			this.rd = $ifaceNil;
			this.r = 0;
			this.w = 0;
			this.err = $ifaceNil;
			this.lastByte = 0;
			this.lastRuneSize = 0;
			return;
		}
		this.buf = buf_;
		this.rd = rd_;
		this.r = r_;
		this.w = w_;
		this.err = err_;
		this.lastByte = lastByte_;
		this.lastRuneSize = lastRuneSize_;
	});
	sliceType = $sliceType($Uint8);
	ptrType = $ptrType(Reader);
	sliceType$1 = $sliceType(sliceType);
	NewReaderSize = function(rd, size) {
		var _tuple, b, ok, r, rd, size;
		_tuple = $assertType(rd, ptrType, true);
		b = _tuple[0];
		ok = _tuple[1];
		if (ok && b.buf.$length >= size) {
			return b;
		}
		if (size < 16) {
			size = 16;
		}
		r = new Reader.ptr(sliceType.nil, $ifaceNil, 0, 0, $ifaceNil, 0, 0);
		r.reset($makeSlice(sliceType, size), rd);
		return r;
	};
	$pkg.NewReaderSize = NewReaderSize;
	NewReader = function(rd) {
		var rd;
		return NewReaderSize(rd, 4096);
	};
	$pkg.NewReader = NewReader;
	Reader.ptr.prototype.Size = function() {
		var r;
		r = this;
		return r.buf.$length;
	};
	Reader.prototype.Size = function() { return this.$val.Size(); };
	Reader.ptr.prototype.Reset = function(r) {
		var b, r;
		b = this;
		b.reset(b.buf, r);
	};
	Reader.prototype.Reset = function(r) { return this.$val.Reset(r); };
	Reader.ptr.prototype.reset = function(buf, r) {
		var b, buf, r;
		b = this;
		Reader.copy(b, new Reader.ptr(buf, r, 0, 0, $ifaceNil, -1, -1));
	};
	Reader.prototype.reset = function(buf, r) { return this.$val.reset(buf, r); };
	Reader.ptr.prototype.fill = function() {
		var _r, _tuple, b, err, i, n, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; b = $f.b; err = $f.err; i = $f.i; n = $f.n; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		b = this;
		if (b.r > 0) {
			$copySlice(b.buf, $subslice(b.buf, b.r, b.w));
			b.w = b.w - (b.r) >> 0;
			b.r = 0;
		}
		if (b.w >= b.buf.$length) {
			$panic(new $String("bufio: tried to fill full buffer"));
		}
		i = 100;
		/* while (true) { */ case 1:
			/* if (!(i > 0)) { break; } */ if(!(i > 0)) { $s = 2; continue; }
			_r = b.rd.Read($subslice(b.buf, b.w)); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r;
			n = _tuple[0];
			err = _tuple[1];
			if (n < 0) {
				$panic(errNegativeRead);
			}
			b.w = b.w + (n) >> 0;
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				b.err = err;
				$s = -1; return;
			}
			if (n > 0) {
				$s = -1; return;
			}
			i = i - (1) >> 0;
		/* } */ $s = 1; continue; case 2:
		b.err = io.ErrNoProgress;
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Reader.ptr.prototype.fill }; } $f._r = _r; $f._tuple = _tuple; $f.b = b; $f.err = err; $f.i = i; $f.n = n; $f.$s = $s; $f.$r = $r; return $f;
	};
	Reader.prototype.fill = function() { return this.$val.fill(); };
	Reader.ptr.prototype.readErr = function() {
		var b, err;
		b = this;
		err = b.err;
		b.err = $ifaceNil;
		return err;
	};
	Reader.prototype.readErr = function() { return this.$val.readErr(); };
	Reader.ptr.prototype.Peek = function(n) {
		var avail, b, err, n, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; avail = $f.avail; b = $f.b; err = $f.err; n = $f.n; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		b = this;
		if (n < 0) {
			$s = -1; return [sliceType.nil, $pkg.ErrNegativeCount];
		}
		/* while (true) { */ case 1:
			/* if (!((b.w - b.r >> 0) < n && (b.w - b.r >> 0) < b.buf.$length && $interfaceIsEqual(b.err, $ifaceNil))) { break; } */ if(!((b.w - b.r >> 0) < n && (b.w - b.r >> 0) < b.buf.$length && $interfaceIsEqual(b.err, $ifaceNil))) { $s = 2; continue; }
			$r = b.fill(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ $s = 1; continue; case 2:
		if (n > b.buf.$length) {
			$s = -1; return [$subslice(b.buf, b.r, b.w), $pkg.ErrBufferFull];
		}
		err = $ifaceNil;
		avail = b.w - b.r >> 0;
		if (avail < n) {
			n = avail;
			err = b.readErr();
			if ($interfaceIsEqual(err, $ifaceNil)) {
				err = $pkg.ErrBufferFull;
			}
		}
		$s = -1; return [$subslice(b.buf, b.r, (b.r + n >> 0)), err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Reader.ptr.prototype.Peek }; } $f.avail = avail; $f.b = b; $f.err = err; $f.n = n; $f.$s = $s; $f.$r = $r; return $f;
	};
	Reader.prototype.Peek = function(n) { return this.$val.Peek(n); };
	Reader.ptr.prototype.Discard = function(n) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, b, discarded, err, n, remain, skip, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; b = $f.b; discarded = $f.discarded; err = $f.err; n = $f.n; remain = $f.remain; skip = $f.skip; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		discarded = 0;
		err = $ifaceNil;
		b = this;
		if (n < 0) {
			_tmp = 0;
			_tmp$1 = $pkg.ErrNegativeCount;
			discarded = _tmp;
			err = _tmp$1;
			$s = -1; return [discarded, err];
		}
		if (n === 0) {
			$s = -1; return [discarded, err];
		}
		remain = n;
		/* while (true) { */ case 1:
			skip = b.Buffered();
			/* */ if (skip === 0) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (skip === 0) { */ case 3:
				$r = b.fill(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				skip = b.Buffered();
			/* } */ case 4:
			if (skip > remain) {
				skip = remain;
			}
			b.r = b.r + (skip) >> 0;
			remain = remain - (skip) >> 0;
			if (remain === 0) {
				_tmp$2 = n;
				_tmp$3 = $ifaceNil;
				discarded = _tmp$2;
				err = _tmp$3;
				$s = -1; return [discarded, err];
			}
			if (!($interfaceIsEqual(b.err, $ifaceNil))) {
				_tmp$4 = n - remain >> 0;
				_tmp$5 = b.readErr();
				discarded = _tmp$4;
				err = _tmp$5;
				$s = -1; return [discarded, err];
			}
		/* } */ $s = 1; continue; case 2:
		$s = -1; return [discarded, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Reader.ptr.prototype.Discard }; } $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f.b = b; $f.discarded = discarded; $f.err = err; $f.n = n; $f.remain = remain; $f.skip = skip; $f.$s = $s; $f.$r = $r; return $f;
	};
	Reader.prototype.Discard = function(n) { return this.$val.Discard(n); };
	Reader.ptr.prototype.Read = function(p) {
		var _r, _r$1, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tuple, _tuple$1, b, err, n, p, x, x$1, x$2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; _tmp$6 = $f._tmp$6; _tmp$7 = $f._tmp$7; _tmp$8 = $f._tmp$8; _tmp$9 = $f._tmp$9; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; b = $f.b; err = $f.err; n = $f.n; p = $f.p; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = 0;
		err = $ifaceNil;
		b = this;
		n = p.$length;
		if (n === 0) {
			_tmp = 0;
			_tmp$1 = b.readErr();
			n = _tmp;
			err = _tmp$1;
			$s = -1; return [n, err];
		}
		/* */ if (b.r === b.w) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (b.r === b.w) { */ case 1:
			if (!($interfaceIsEqual(b.err, $ifaceNil))) {
				_tmp$2 = 0;
				_tmp$3 = b.readErr();
				n = _tmp$2;
				err = _tmp$3;
				$s = -1; return [n, err];
			}
			/* */ if (p.$length >= b.buf.$length) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (p.$length >= b.buf.$length) { */ case 3:
				_r = b.rd.Read(p); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				_tuple = _r;
				n = _tuple[0];
				b.err = _tuple[1];
				if (n < 0) {
					$panic(errNegativeRead);
				}
				if (n > 0) {
					b.lastByte = (((x = n - 1 >> 0, ((x < 0 || x >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + x])) >> 0));
					b.lastRuneSize = -1;
				}
				_tmp$4 = n;
				_tmp$5 = b.readErr();
				n = _tmp$4;
				err = _tmp$5;
				$s = -1; return [n, err];
			/* } */ case 4:
			b.r = 0;
			b.w = 0;
			_r$1 = b.rd.Read(b.buf); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_tuple$1 = _r$1;
			n = _tuple$1[0];
			b.err = _tuple$1[1];
			if (n < 0) {
				$panic(errNegativeRead);
			}
			if (n === 0) {
				_tmp$6 = 0;
				_tmp$7 = b.readErr();
				n = _tmp$6;
				err = _tmp$7;
				$s = -1; return [n, err];
			}
			b.w = b.w + (n) >> 0;
		/* } */ case 2:
		n = $copySlice(p, $subslice(b.buf, b.r, b.w));
		b.r = b.r + (n) >> 0;
		b.lastByte = (((x$1 = b.buf, x$2 = b.r - 1 >> 0, ((x$2 < 0 || x$2 >= x$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + x$2])) >> 0));
		b.lastRuneSize = -1;
		_tmp$8 = n;
		_tmp$9 = $ifaceNil;
		n = _tmp$8;
		err = _tmp$9;
		$s = -1; return [n, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Reader.ptr.prototype.Read }; } $f._r = _r; $f._r$1 = _r$1; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f._tmp$6 = _tmp$6; $f._tmp$7 = _tmp$7; $f._tmp$8 = _tmp$8; $f._tmp$9 = _tmp$9; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.b = b; $f.err = err; $f.n = n; $f.p = p; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.$s = $s; $f.$r = $r; return $f;
	};
	Reader.prototype.Read = function(p) { return this.$val.Read(p); };
	Reader.ptr.prototype.ReadByte = function() {
		var b, c, x, x$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; b = $f.b; c = $f.c; x = $f.x; x$1 = $f.x$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		b = this;
		b.lastRuneSize = -1;
		/* while (true) { */ case 1:
			/* if (!(b.r === b.w)) { break; } */ if(!(b.r === b.w)) { $s = 2; continue; }
			if (!($interfaceIsEqual(b.err, $ifaceNil))) {
				$s = -1; return [0, b.readErr()];
			}
			$r = b.fill(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ $s = 1; continue; case 2:
		c = (x = b.buf, x$1 = b.r, ((x$1 < 0 || x$1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + x$1]));
		b.r = b.r + (1) >> 0;
		b.lastByte = ((c >> 0));
		$s = -1; return [c, $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Reader.ptr.prototype.ReadByte }; } $f.b = b; $f.c = c; $f.x = x; $f.x$1 = x$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	Reader.prototype.ReadByte = function() { return this.$val.ReadByte(); };
	Reader.ptr.prototype.UnreadByte = function() {
		var b, x, x$1;
		b = this;
		if (b.lastByte < 0 || (b.r === 0) && b.w > 0) {
			return $pkg.ErrInvalidUnreadByte;
		}
		if (b.r > 0) {
			b.r = b.r - (1) >> 0;
		} else {
			b.w = 1;
		}
		(x = b.buf, x$1 = b.r, ((x$1 < 0 || x$1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + x$1] = ((b.lastByte << 24 >>> 24))));
		b.lastByte = -1;
		b.lastRuneSize = -1;
		return $ifaceNil;
	};
	Reader.prototype.UnreadByte = function() { return this.$val.UnreadByte(); };
	Reader.ptr.prototype.ReadRune = function() {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tuple, b, err, r, size, x, x$1, x$2, x$3, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; _tmp$6 = $f._tmp$6; _tmp$7 = $f._tmp$7; _tuple = $f._tuple; b = $f.b; err = $f.err; r = $f.r; size = $f.size; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		r = 0;
		size = 0;
		err = $ifaceNil;
		b = this;
		/* while (true) { */ case 1:
			/* if (!((b.r + 4 >> 0) > b.w && !utf8.FullRune($subslice(b.buf, b.r, b.w)) && $interfaceIsEqual(b.err, $ifaceNil) && (b.w - b.r >> 0) < b.buf.$length)) { break; } */ if(!((b.r + 4 >> 0) > b.w && !utf8.FullRune($subslice(b.buf, b.r, b.w)) && $interfaceIsEqual(b.err, $ifaceNil) && (b.w - b.r >> 0) < b.buf.$length)) { $s = 2; continue; }
			$r = b.fill(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ $s = 1; continue; case 2:
		b.lastRuneSize = -1;
		if (b.r === b.w) {
			_tmp = 0;
			_tmp$1 = 0;
			_tmp$2 = b.readErr();
			r = _tmp;
			size = _tmp$1;
			err = _tmp$2;
			$s = -1; return [r, size, err];
		}
		_tmp$3 = (((x = b.buf, x$1 = b.r, ((x$1 < 0 || x$1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + x$1])) >> 0));
		_tmp$4 = 1;
		r = _tmp$3;
		size = _tmp$4;
		if (r >= 128) {
			_tuple = utf8.DecodeRune($subslice(b.buf, b.r, b.w));
			r = _tuple[0];
			size = _tuple[1];
		}
		b.r = b.r + (size) >> 0;
		b.lastByte = (((x$2 = b.buf, x$3 = b.r - 1 >> 0, ((x$3 < 0 || x$3 >= x$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + x$3])) >> 0));
		b.lastRuneSize = size;
		_tmp$5 = r;
		_tmp$6 = size;
		_tmp$7 = $ifaceNil;
		r = _tmp$5;
		size = _tmp$6;
		err = _tmp$7;
		$s = -1; return [r, size, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Reader.ptr.prototype.ReadRune }; } $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f._tmp$6 = _tmp$6; $f._tmp$7 = _tmp$7; $f._tuple = _tuple; $f.b = b; $f.err = err; $f.r = r; $f.size = size; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.$s = $s; $f.$r = $r; return $f;
	};
	Reader.prototype.ReadRune = function() { return this.$val.ReadRune(); };
	Reader.ptr.prototype.UnreadRune = function() {
		var b;
		b = this;
		if (b.lastRuneSize < 0 || b.r < b.lastRuneSize) {
			return $pkg.ErrInvalidUnreadRune;
		}
		b.r = b.r - (b.lastRuneSize) >> 0;
		b.lastByte = -1;
		b.lastRuneSize = -1;
		return $ifaceNil;
	};
	Reader.prototype.UnreadRune = function() { return this.$val.UnreadRune(); };
	Reader.ptr.prototype.Buffered = function() {
		var b;
		b = this;
		return b.w - b.r >> 0;
	};
	Reader.prototype.Buffered = function() { return this.$val.Buffered(); };
	Reader.ptr.prototype.ReadSlice = function(delim) {
		var b, delim, err, i, i$1, line, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; b = $f.b; delim = $f.delim; err = $f.err; i = $f.i; i$1 = $f.i$1; line = $f.line; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		line = sliceType.nil;
		err = $ifaceNil;
		b = this;
		/* while (true) { */ case 1:
			i = bytes.IndexByte($subslice(b.buf, b.r, b.w), delim);
			if (i >= 0) {
				line = $subslice(b.buf, b.r, ((b.r + i >> 0) + 1 >> 0));
				b.r = b.r + ((i + 1 >> 0)) >> 0;
				/* break; */ $s = 2; continue;
			}
			if (!($interfaceIsEqual(b.err, $ifaceNil))) {
				line = $subslice(b.buf, b.r, b.w);
				b.r = b.w;
				err = b.readErr();
				/* break; */ $s = 2; continue;
			}
			if (b.Buffered() >= b.buf.$length) {
				b.r = b.w;
				line = b.buf;
				err = $pkg.ErrBufferFull;
				/* break; */ $s = 2; continue;
			}
			$r = b.fill(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ $s = 1; continue; case 2:
		i$1 = line.$length - 1 >> 0;
		if (i$1 >= 0) {
			b.lastByte = ((((i$1 < 0 || i$1 >= line.$length) ? ($throwRuntimeError("index out of range"), undefined) : line.$array[line.$offset + i$1]) >> 0));
			b.lastRuneSize = -1;
		}
		$s = -1; return [line, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Reader.ptr.prototype.ReadSlice }; } $f.b = b; $f.delim = delim; $f.err = err; $f.i = i; $f.i$1 = i$1; $f.line = line; $f.$s = $s; $f.$r = $r; return $f;
	};
	Reader.prototype.ReadSlice = function(delim) { return this.$val.ReadSlice(delim); };
	Reader.ptr.prototype.ReadLine = function() {
		var _r, _tmp, _tmp$1, _tmp$2, _tuple, b, drop, err, isPrefix, line, x, x$1, x$2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tuple = $f._tuple; b = $f.b; drop = $f.drop; err = $f.err; isPrefix = $f.isPrefix; line = $f.line; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		line = sliceType.nil;
		isPrefix = false;
		err = $ifaceNil;
		b = this;
		_r = b.ReadSlice(10); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		line = _tuple[0];
		err = _tuple[1];
		if ($interfaceIsEqual(err, $pkg.ErrBufferFull)) {
			if (line.$length > 0 && ((x = line.$length - 1 >> 0, ((x < 0 || x >= line.$length) ? ($throwRuntimeError("index out of range"), undefined) : line.$array[line.$offset + x])) === 13)) {
				if (b.r === 0) {
					$panic(new $String("bufio: tried to rewind past start of buffer"));
				}
				b.r = b.r - (1) >> 0;
				line = $subslice(line, 0, (line.$length - 1 >> 0));
			}
			_tmp = line;
			_tmp$1 = true;
			_tmp$2 = $ifaceNil;
			line = _tmp;
			isPrefix = _tmp$1;
			err = _tmp$2;
			$s = -1; return [line, isPrefix, err];
		}
		if (line.$length === 0) {
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				line = sliceType.nil;
			}
			$s = -1; return [line, isPrefix, err];
		}
		err = $ifaceNil;
		if ((x$1 = line.$length - 1 >> 0, ((x$1 < 0 || x$1 >= line.$length) ? ($throwRuntimeError("index out of range"), undefined) : line.$array[line.$offset + x$1])) === 10) {
			drop = 1;
			if (line.$length > 1 && ((x$2 = line.$length - 2 >> 0, ((x$2 < 0 || x$2 >= line.$length) ? ($throwRuntimeError("index out of range"), undefined) : line.$array[line.$offset + x$2])) === 13)) {
				drop = 2;
			}
			line = $subslice(line, 0, (line.$length - drop >> 0));
		}
		$s = -1; return [line, isPrefix, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Reader.ptr.prototype.ReadLine }; } $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tuple = _tuple; $f.b = b; $f.drop = drop; $f.err = err; $f.isPrefix = isPrefix; $f.line = line; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.$s = $s; $f.$r = $r; return $f;
	};
	Reader.prototype.ReadLine = function() { return this.$val.ReadLine(); };
	Reader.ptr.prototype.ReadBytes = function(delim) {
		var _i, _i$1, _r, _ref, _ref$1, _tuple, b, buf, buf$1, delim, e, err, frag, full, i, i$1, n, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _i$1 = $f._i$1; _r = $f._r; _ref = $f._ref; _ref$1 = $f._ref$1; _tuple = $f._tuple; b = $f.b; buf = $f.buf; buf$1 = $f.buf$1; delim = $f.delim; e = $f.e; err = $f.err; frag = $f.frag; full = $f.full; i = $f.i; i$1 = $f.i$1; n = $f.n; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		b = this;
		frag = sliceType.nil;
		full = sliceType$1.nil;
		err = $ifaceNil;
		/* while (true) { */ case 1:
			e = $ifaceNil;
			_r = b.ReadSlice(delim); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r;
			frag = _tuple[0];
			e = _tuple[1];
			if ($interfaceIsEqual(e, $ifaceNil)) {
				/* break; */ $s = 2; continue;
			}
			if (!($interfaceIsEqual(e, $pkg.ErrBufferFull))) {
				err = e;
				/* break; */ $s = 2; continue;
			}
			buf = $makeSlice(sliceType, frag.$length);
			$copySlice(buf, frag);
			full = $append(full, buf);
		/* } */ $s = 1; continue; case 2:
		n = 0;
		_ref = full;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			n = n + (((i < 0 || i >= full.$length) ? ($throwRuntimeError("index out of range"), undefined) : full.$array[full.$offset + i]).$length) >> 0;
			_i++;
		}
		n = n + (frag.$length) >> 0;
		buf$1 = $makeSlice(sliceType, n);
		n = 0;
		_ref$1 = full;
		_i$1 = 0;
		while (true) {
			if (!(_i$1 < _ref$1.$length)) { break; }
			i$1 = _i$1;
			n = n + ($copySlice($subslice(buf$1, n), ((i$1 < 0 || i$1 >= full.$length) ? ($throwRuntimeError("index out of range"), undefined) : full.$array[full.$offset + i$1]))) >> 0;
			_i$1++;
		}
		$copySlice($subslice(buf$1, n), frag);
		$s = -1; return [buf$1, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Reader.ptr.prototype.ReadBytes }; } $f._i = _i; $f._i$1 = _i$1; $f._r = _r; $f._ref = _ref; $f._ref$1 = _ref$1; $f._tuple = _tuple; $f.b = b; $f.buf = buf; $f.buf$1 = buf$1; $f.delim = delim; $f.e = e; $f.err = err; $f.frag = frag; $f.full = full; $f.i = i; $f.i$1 = i$1; $f.n = n; $f.$s = $s; $f.$r = $r; return $f;
	};
	Reader.prototype.ReadBytes = function(delim) { return this.$val.ReadBytes(delim); };
	Reader.ptr.prototype.ReadString = function(delim) {
		var _r, _tuple, b, bytes$1, delim, err, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; b = $f.b; bytes$1 = $f.bytes$1; delim = $f.delim; err = $f.err; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		b = this;
		_r = b.ReadBytes(delim); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		bytes$1 = _tuple[0];
		err = _tuple[1];
		$s = -1; return [($bytesToString(bytes$1)), err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Reader.ptr.prototype.ReadString }; } $f._r = _r; $f._tuple = _tuple; $f.b = b; $f.bytes$1 = bytes$1; $f.delim = delim; $f.err = err; $f.$s = $s; $f.$r = $r; return $f;
	};
	Reader.prototype.ReadString = function(delim) { return this.$val.ReadString(delim); };
	Reader.ptr.prototype.WriteTo = function(w) {
		var _r, _r$1, _r$2, _r$3, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, _tuple$5, b, err, err$1, err$2, err$3, m, m$1, m$2, n, ok, ok$1, r, w, w$1, x, x$1, x$2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; _tmp$6 = $f._tmp$6; _tmp$7 = $f._tmp$7; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; _tuple$4 = $f._tuple$4; _tuple$5 = $f._tuple$5; b = $f.b; err = $f.err; err$1 = $f.err$1; err$2 = $f.err$2; err$3 = $f.err$3; m = $f.m; m$1 = $f.m$1; m$2 = $f.m$2; n = $f.n; ok = $f.ok; ok$1 = $f.ok$1; r = $f.r; w = $f.w; w$1 = $f.w$1; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = new $Int64(0, 0);
		err = $ifaceNil;
		b = this;
		_r = b.writeBuf(w); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		n = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [n, err];
		}
		_tuple$1 = $assertType(b.rd, io.WriterTo, true);
		r = _tuple$1[0];
		ok = _tuple$1[1];
		/* */ if (ok) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (ok) { */ case 2:
			_r$1 = r.WriteTo(w); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_tuple$2 = _r$1;
			m = _tuple$2[0];
			err$1 = _tuple$2[1];
			n = (x = m, new $Int64(n.$high + x.$high, n.$low + x.$low));
			_tmp = n;
			_tmp$1 = err$1;
			n = _tmp;
			err = _tmp$1;
			$s = -1; return [n, err];
		/* } */ case 3:
		_tuple$3 = $assertType(w, io.ReaderFrom, true);
		w$1 = _tuple$3[0];
		ok$1 = _tuple$3[1];
		/* */ if (ok$1) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if (ok$1) { */ case 5:
			_r$2 = w$1.ReadFrom(b.rd); /* */ $s = 7; case 7: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_tuple$4 = _r$2;
			m$1 = _tuple$4[0];
			err$2 = _tuple$4[1];
			n = (x$1 = m$1, new $Int64(n.$high + x$1.$high, n.$low + x$1.$low));
			_tmp$2 = n;
			_tmp$3 = err$2;
			n = _tmp$2;
			err = _tmp$3;
			$s = -1; return [n, err];
		/* } */ case 6:
		/* */ if ((b.w - b.r >> 0) < b.buf.$length) { $s = 8; continue; }
		/* */ $s = 9; continue;
		/* if ((b.w - b.r >> 0) < b.buf.$length) { */ case 8:
			$r = b.fill(); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 9:
		/* while (true) { */ case 11:
			/* if (!(b.r < b.w)) { break; } */ if(!(b.r < b.w)) { $s = 12; continue; }
			_r$3 = b.writeBuf(w); /* */ $s = 13; case 13: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_tuple$5 = _r$3;
			m$2 = _tuple$5[0];
			err$3 = _tuple$5[1];
			n = (x$2 = m$2, new $Int64(n.$high + x$2.$high, n.$low + x$2.$low));
			if (!($interfaceIsEqual(err$3, $ifaceNil))) {
				_tmp$4 = n;
				_tmp$5 = err$3;
				n = _tmp$4;
				err = _tmp$5;
				$s = -1; return [n, err];
			}
			$r = b.fill(); /* */ $s = 14; case 14: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ $s = 11; continue; case 12:
		if ($interfaceIsEqual(b.err, io.EOF)) {
			b.err = $ifaceNil;
		}
		_tmp$6 = n;
		_tmp$7 = b.readErr();
		n = _tmp$6;
		err = _tmp$7;
		$s = -1; return [n, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Reader.ptr.prototype.WriteTo }; } $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f._tmp$6 = _tmp$6; $f._tmp$7 = _tmp$7; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f._tuple$4 = _tuple$4; $f._tuple$5 = _tuple$5; $f.b = b; $f.err = err; $f.err$1 = err$1; $f.err$2 = err$2; $f.err$3 = err$3; $f.m = m; $f.m$1 = m$1; $f.m$2 = m$2; $f.n = n; $f.ok = ok; $f.ok$1 = ok$1; $f.r = r; $f.w = w; $f.w$1 = w$1; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.$s = $s; $f.$r = $r; return $f;
	};
	Reader.prototype.WriteTo = function(w) { return this.$val.WriteTo(w); };
	Reader.ptr.prototype.writeBuf = function(w) {
		var _r, _tuple, b, err, n, w, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; b = $f.b; err = $f.err; n = $f.n; w = $f.w; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		b = this;
		_r = w.Write($subslice(b.buf, b.r, b.w)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		n = _tuple[0];
		err = _tuple[1];
		if (n < 0) {
			$panic(errNegativeWrite);
		}
		b.r = b.r + (n) >> 0;
		$s = -1; return [(new $Int64(0, n)), err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Reader.ptr.prototype.writeBuf }; } $f._r = _r; $f._tuple = _tuple; $f.b = b; $f.err = err; $f.n = n; $f.w = w; $f.$s = $s; $f.$r = $r; return $f;
	};
	Reader.prototype.writeBuf = function(w) { return this.$val.writeBuf(w); };
	ptrType.methods = [{prop: "Size", name: "Size", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Reset", name: "Reset", pkg: "", typ: $funcType([io.Reader], [], false)}, {prop: "reset", name: "reset", pkg: "bufio", typ: $funcType([sliceType, io.Reader], [], false)}, {prop: "fill", name: "fill", pkg: "bufio", typ: $funcType([], [], false)}, {prop: "readErr", name: "readErr", pkg: "bufio", typ: $funcType([], [$error], false)}, {prop: "Peek", name: "Peek", pkg: "", typ: $funcType([$Int], [sliceType, $error], false)}, {prop: "Discard", name: "Discard", pkg: "", typ: $funcType([$Int], [$Int, $error], false)}, {prop: "Read", name: "Read", pkg: "", typ: $funcType([sliceType], [$Int, $error], false)}, {prop: "ReadByte", name: "ReadByte", pkg: "", typ: $funcType([], [$Uint8, $error], false)}, {prop: "UnreadByte", name: "UnreadByte", pkg: "", typ: $funcType([], [$error], false)}, {prop: "ReadRune", name: "ReadRune", pkg: "", typ: $funcType([], [$Int32, $Int, $error], false)}, {prop: "UnreadRune", name: "UnreadRune", pkg: "", typ: $funcType([], [$error], false)}, {prop: "Buffered", name: "Buffered", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "ReadSlice", name: "ReadSlice", pkg: "", typ: $funcType([$Uint8], [sliceType, $error], false)}, {prop: "ReadLine", name: "ReadLine", pkg: "", typ: $funcType([], [sliceType, $Bool, $error], false)}, {prop: "ReadBytes", name: "ReadBytes", pkg: "", typ: $funcType([$Uint8], [sliceType, $error], false)}, {prop: "ReadString", name: "ReadString", pkg: "", typ: $funcType([$Uint8], [$String, $error], false)}, {prop: "WriteTo", name: "WriteTo", pkg: "", typ: $funcType([io.Writer], [$Int64, $error], false)}, {prop: "writeBuf", name: "writeBuf", pkg: "bufio", typ: $funcType([io.Writer], [$Int64, $error], false)}];
	Reader.init("bufio", [{prop: "buf", name: "buf", anonymous: false, exported: false, typ: sliceType, tag: ""}, {prop: "rd", name: "rd", anonymous: false, exported: false, typ: io.Reader, tag: ""}, {prop: "r", name: "r", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "w", name: "w", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "err", name: "err", anonymous: false, exported: false, typ: $error, tag: ""}, {prop: "lastByte", name: "lastByte", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "lastRuneSize", name: "lastRuneSize", anonymous: false, exported: false, typ: $Int, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = bytes.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = errors.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = io.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = utf8.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$pkg.ErrInvalidUnreadByte = errors.New("bufio: invalid use of UnreadByte");
		$pkg.ErrInvalidUnreadRune = errors.New("bufio: invalid use of UnreadRune");
		$pkg.ErrBufferFull = errors.New("bufio: buffer full");
		$pkg.ErrNegativeCount = errors.New("bufio: negative count");
		errNegativeRead = errors.New("bufio: reader returned negative count from Read");
		errNegativeWrite = errors.New("bufio: writer returned negative count from Write");
		$pkg.ErrTooLong = errors.New("bufio.Scanner: token too long");
		$pkg.ErrNegativeAdvance = errors.New("bufio.Scanner: SplitFunc returns negative advance count");
		$pkg.ErrAdvanceTooFar = errors.New("bufio.Scanner: SplitFunc returns advance count beyond input");
		$pkg.ErrFinalToken = errors.New("final token");
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["encoding"] = (function() {
	var $pkg = {}, $init, BinaryMarshaler, BinaryUnmarshaler, TextMarshaler, TextUnmarshaler, sliceType;
	BinaryMarshaler = $pkg.BinaryMarshaler = $newType(8, $kindInterface, "encoding.BinaryMarshaler", true, "encoding", true, null);
	BinaryUnmarshaler = $pkg.BinaryUnmarshaler = $newType(8, $kindInterface, "encoding.BinaryUnmarshaler", true, "encoding", true, null);
	TextMarshaler = $pkg.TextMarshaler = $newType(8, $kindInterface, "encoding.TextMarshaler", true, "encoding", true, null);
	TextUnmarshaler = $pkg.TextUnmarshaler = $newType(8, $kindInterface, "encoding.TextUnmarshaler", true, "encoding", true, null);
	sliceType = $sliceType($Uint8);
	BinaryMarshaler.init([{prop: "MarshalBinary", name: "MarshalBinary", pkg: "", typ: $funcType([], [sliceType, $error], false)}]);
	BinaryUnmarshaler.init([{prop: "UnmarshalBinary", name: "UnmarshalBinary", pkg: "", typ: $funcType([sliceType], [$error], false)}]);
	TextMarshaler.init([{prop: "MarshalText", name: "MarshalText", pkg: "", typ: $funcType([], [sliceType, $error], false)}]);
	TextUnmarshaler.init([{prop: "UnmarshalText", name: "UnmarshalText", pkg: "", typ: $funcType([sliceType], [$error], false)}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["encoding/gob"] = (function() {
	var $pkg = {}, $init, bufio, encoding, binary, errors, fmt, nosync, io, math, bits, os, reflect, atomic, unicode, utf8, decHelper, decoderState, decBuffer, decOp, decInstr, decEngine, emptyStruct, Decoder, encHelper, encoderState, encBuffer, encOp, encInstr, encEngine, Encoder, gobError, userTypeInfo, typeId, gobType, CommonType, arrayType, gobEncoderType, mapType, sliceType, fieldType, structType, wireType, typeInfo, GobEncoder, GobDecoder, ptrType, ptrType$1, sliceType$1, sliceType$2, arrayType$1, ptrType$2, ptrType$3, ptrType$4, ptrType$5, ptrType$6, ptrType$7, ptrType$8, ptrType$9, ptrType$10, ptrType$11, ptrType$12, ptrType$13, ptrType$14, ptrType$15, structType$1, ptrType$16, structType$2, ptrType$17, structType$3, ptrType$18, structType$4, ptrType$19, structType$5, ptrType$20, structType$6, ptrType$21, structType$7, ptrType$22, ptrType$23, ptrType$24, ptrType$25, ptrType$26, ptrType$27, sliceType$3, sliceType$4, sliceType$5, sliceType$6, sliceType$7, sliceType$8, sliceType$9, sliceType$10, sliceType$11, sliceType$12, sliceType$13, sliceType$14, sliceType$15, sliceType$16, sliceType$17, sliceType$18, ptrType$28, ptrType$29, ptrType$30, ptrType$31, ptrType$32, ptrType$33, sliceType$19, ptrType$34, ptrType$35, ptrType$36, ptrType$37, ptrType$38, arrayType$2, ptrType$39, ptrType$40, ptrType$41, sliceType$20, ptrType$42, sliceType$21, ptrType$43, sliceType$22, mapType$1, ptrType$44, mapType$2, mapType$3, mapType$4, mapType$5, mapType$6, mapType$7, mapType$8, ptrType$45, decArrayHelper, decSliceHelper, errBadUint, errBadType, errRange, noValue, decOpTable, decIgnoreOpMap, emptyStructType, errBadCount, encArrayHelper, encSliceHelper, encBufferPool, encOpTable, spaceForLength, userTypeCache, gobEncoderInterfaceType, gobDecoderInterfaceType, binaryMarshalerInterfaceType, binaryUnmarshalerInterfaceType, textMarshalerInterfaceType, textUnmarshalerInterfaceType, nextId, typeLock, types, idToType, builtinIdToType, tBool, tInt, tUint, tFloat, tBytes, tString, tComplex, tInterface, tReserved7, tReserved6, tReserved5, tReserved4, tReserved3, tReserved2, tReserved1, tWireType, wireTypeUserInfo, typeInfoMap, nameToConcreteType, concreteTypeToName, x, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _r$10, _r$11, _r$12, _r$13, _r$14, _r$15, _r$16, _r$17, _r$18, _r$19, _r$20, x$1, _r$21, decBoolArray, decBoolSlice, decComplex64Array, decComplex64Slice, decComplex128Array, decComplex128Slice, decFloat32Array, decFloat32Slice, decFloat64Array, decFloat64Slice, decIntArray, decIntSlice, decInt16Array, decInt16Slice, decInt32Array, decInt32Slice, decInt64Array, decInt64Slice, decInt8Array, decInt8Slice, decStringArray, decStringSlice, decUintArray, decUintSlice, decUint16Array, decUint16Slice, decUint32Array, decUint32Slice, decUint64Array, decUint64Slice, decUintptrArray, decUintptrSlice, overflow, decodeUintReader, ignoreUint, ignoreTwoUints, decAlloc, decBool, decInt8, decUint8, decInt16, decUint16, decInt32, decUint32, decInt64, decUint64, float64FromBits, float32FromBits, decFloat32, decFloat64, decComplex64, decComplex128, decUint8Slice, decString, ignoreUint8Array, decodeIntoValue, init, allocValue, NewDecoder, toInt, encBoolArray, encBoolSlice, encComplex64Array, encComplex64Slice, encComplex128Array, encComplex128Slice, encFloat32Array, encFloat32Slice, encFloat64Array, encFloat64Slice, encIntArray, encIntSlice, encInt16Array, encInt16Slice, encInt32Array, encInt32Slice, encInt64Array, encInt64Slice, encInt8Array, encInt8Slice, encStringArray, encStringSlice, encUintArray, encUintSlice, encUint16Array, encUint16Slice, encUint32Array, encUint32Slice, encUint64Array, encUint64Slice, encUintptrArray, encUintptrSlice, encIndirect, encBool, encInt, encUint, floatBits, encFloat, encComplex, encUint8Array, encString, encStructTerminator, valid, encodeReflectValue, isZero, encOpFor, gobEncodeOpFor, compileEnc, getEncEngine, buildEncEngine, NewEncoder, errorf, error_, catchError, validUserType, implementsInterface, userType, setTypeId, init$1, newArrayType, newGobEncoderType, newMapType, newSliceType, newStructType, newTypeObject, isExported, isSent, getBaseType, getType, checkId, bootstrapType, lookupTypeInfo, getTypeInfo, buildTypeInfo, mustGetTypeInfo, RegisterName, Register, registerBasics;
	bufio = $packages["bufio"];
	encoding = $packages["encoding"];
	binary = $packages["encoding/binary"];
	errors = $packages["errors"];
	fmt = $packages["fmt"];
	nosync = $packages["github.com/gopherjs/gopherjs/nosync"];
	io = $packages["io"];
	math = $packages["math"];
	bits = $packages["math/bits"];
	os = $packages["os"];
	reflect = $packages["reflect"];
	atomic = $packages["sync/atomic"];
	unicode = $packages["unicode"];
	utf8 = $packages["unicode/utf8"];
	decHelper = $pkg.decHelper = $newType(4, $kindFunc, "gob.decHelper", true, "encoding/gob", false, null);
	decoderState = $pkg.decoderState = $newType(0, $kindStruct, "gob.decoderState", true, "encoding/gob", false, function(dec_, b_, fieldnum_, next_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.dec = ptrType$29.nil;
			this.b = ptrType$30.nil;
			this.fieldnum = 0;
			this.next = ptrType$28.nil;
			return;
		}
		this.dec = dec_;
		this.b = b_;
		this.fieldnum = fieldnum_;
		this.next = next_;
	});
	decBuffer = $pkg.decBuffer = $newType(0, $kindStruct, "gob.decBuffer", true, "encoding/gob", false, function(data_, offset_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.data = sliceType$2.nil;
			this.offset = 0;
			return;
		}
		this.data = data_;
		this.offset = offset_;
	});
	decOp = $pkg.decOp = $newType(4, $kindFunc, "gob.decOp", true, "encoding/gob", false, null);
	decInstr = $pkg.decInstr = $newType(0, $kindStruct, "gob.decInstr", true, "encoding/gob", false, function(op_, field_, index_, ovfl_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.op = $throwNilPointerError;
			this.field = 0;
			this.index = sliceType$8.nil;
			this.ovfl = $ifaceNil;
			return;
		}
		this.op = op_;
		this.field = field_;
		this.index = index_;
		this.ovfl = ovfl_;
	});
	decEngine = $pkg.decEngine = $newType(0, $kindStruct, "gob.decEngine", true, "encoding/gob", false, function(instr_, numInstr_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.instr = sliceType$19.nil;
			this.numInstr = 0;
			return;
		}
		this.instr = instr_;
		this.numInstr = numInstr_;
	});
	emptyStruct = $pkg.emptyStruct = $newType(0, $kindStruct, "gob.emptyStruct", true, "encoding/gob", false, function() {
		this.$val = this;
		if (arguments.length === 0) {
			return;
		}
	});
	Decoder = $pkg.Decoder = $newType(0, $kindStruct, "gob.Decoder", true, "encoding/gob", true, function(mutex_, r_, buf_, wireType_, decoderCache_, ignorerCache_, freeList_, countBuf_, err_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.mutex = new nosync.Mutex.ptr(false);
			this.r = $ifaceNil;
			this.buf = new decBuffer.ptr(sliceType$2.nil, 0);
			this.wireType = false;
			this.decoderCache = false;
			this.ignorerCache = false;
			this.freeList = ptrType$28.nil;
			this.countBuf = sliceType$2.nil;
			this.err = $ifaceNil;
			return;
		}
		this.mutex = mutex_;
		this.r = r_;
		this.buf = buf_;
		this.wireType = wireType_;
		this.decoderCache = decoderCache_;
		this.ignorerCache = ignorerCache_;
		this.freeList = freeList_;
		this.countBuf = countBuf_;
		this.err = err_;
	});
	encHelper = $pkg.encHelper = $newType(4, $kindFunc, "gob.encHelper", true, "encoding/gob", false, null);
	encoderState = $pkg.encoderState = $newType(0, $kindStruct, "gob.encoderState", true, "encoding/gob", false, function(enc_, b_, sendZero_, fieldnum_, buf_, next_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.enc = ptrType$37.nil;
			this.b = ptrType$38.nil;
			this.sendZero = false;
			this.fieldnum = 0;
			this.buf = arrayType$2.zero();
			this.next = ptrType$36.nil;
			return;
		}
		this.enc = enc_;
		this.b = b_;
		this.sendZero = sendZero_;
		this.fieldnum = fieldnum_;
		this.buf = buf_;
		this.next = next_;
	});
	encBuffer = $pkg.encBuffer = $newType(0, $kindStruct, "gob.encBuffer", true, "encoding/gob", false, function(data_, scratch_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.data = sliceType$2.nil;
			this.scratch = arrayType$1.zero();
			return;
		}
		this.data = data_;
		this.scratch = scratch_;
	});
	encOp = $pkg.encOp = $newType(4, $kindFunc, "gob.encOp", true, "encoding/gob", false, null);
	encInstr = $pkg.encInstr = $newType(0, $kindStruct, "gob.encInstr", true, "encoding/gob", false, function(op_, field_, index_, indir_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.op = $throwNilPointerError;
			this.field = 0;
			this.index = sliceType$8.nil;
			this.indir = 0;
			return;
		}
		this.op = op_;
		this.field = field_;
		this.index = index_;
		this.indir = indir_;
	});
	encEngine = $pkg.encEngine = $newType(0, $kindStruct, "gob.encEngine", true, "encoding/gob", false, function(instr_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.instr = sliceType$20.nil;
			return;
		}
		this.instr = instr_;
	});
	Encoder = $pkg.Encoder = $newType(0, $kindStruct, "gob.Encoder", true, "encoding/gob", true, function(mutex_, w_, sent_, countState_, freeList_, byteBuf_, err_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.mutex = new nosync.Mutex.ptr(false);
			this.w = sliceType$21.nil;
			this.sent = false;
			this.countState = ptrType$36.nil;
			this.freeList = ptrType$36.nil;
			this.byteBuf = new encBuffer.ptr(sliceType$2.nil, arrayType$1.zero());
			this.err = $ifaceNil;
			return;
		}
		this.mutex = mutex_;
		this.w = w_;
		this.sent = sent_;
		this.countState = countState_;
		this.freeList = freeList_;
		this.byteBuf = byteBuf_;
		this.err = err_;
	});
	gobError = $pkg.gobError = $newType(0, $kindStruct, "gob.gobError", true, "encoding/gob", false, function(err_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.err = $ifaceNil;
			return;
		}
		this.err = err_;
	});
	userTypeInfo = $pkg.userTypeInfo = $newType(0, $kindStruct, "gob.userTypeInfo", true, "encoding/gob", false, function(user_, base_, indir_, externalEnc_, externalDec_, encIndir_, decIndir_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.user = $ifaceNil;
			this.base = $ifaceNil;
			this.indir = 0;
			this.externalEnc = 0;
			this.externalDec = 0;
			this.encIndir = 0;
			this.decIndir = 0;
			return;
		}
		this.user = user_;
		this.base = base_;
		this.indir = indir_;
		this.externalEnc = externalEnc_;
		this.externalDec = externalDec_;
		this.encIndir = encIndir_;
		this.decIndir = decIndir_;
	});
	typeId = $pkg.typeId = $newType(4, $kindInt32, "gob.typeId", true, "encoding/gob", false, null);
	gobType = $pkg.gobType = $newType(8, $kindInterface, "gob.gobType", true, "encoding/gob", false, null);
	CommonType = $pkg.CommonType = $newType(0, $kindStruct, "gob.CommonType", true, "encoding/gob", true, function(Name_, Id_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Name = "";
			this.Id = 0;
			return;
		}
		this.Name = Name_;
		this.Id = Id_;
	});
	arrayType = $pkg.arrayType = $newType(0, $kindStruct, "gob.arrayType", true, "encoding/gob", false, function(CommonType_, Elem_, Len_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.CommonType = new CommonType.ptr("", 0);
			this.Elem = 0;
			this.Len = 0;
			return;
		}
		this.CommonType = CommonType_;
		this.Elem = Elem_;
		this.Len = Len_;
	});
	gobEncoderType = $pkg.gobEncoderType = $newType(0, $kindStruct, "gob.gobEncoderType", true, "encoding/gob", false, function(CommonType_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.CommonType = new CommonType.ptr("", 0);
			return;
		}
		this.CommonType = CommonType_;
	});
	mapType = $pkg.mapType = $newType(0, $kindStruct, "gob.mapType", true, "encoding/gob", false, function(CommonType_, Key_, Elem_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.CommonType = new CommonType.ptr("", 0);
			this.Key = 0;
			this.Elem = 0;
			return;
		}
		this.CommonType = CommonType_;
		this.Key = Key_;
		this.Elem = Elem_;
	});
	sliceType = $pkg.sliceType = $newType(0, $kindStruct, "gob.sliceType", true, "encoding/gob", false, function(CommonType_, Elem_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.CommonType = new CommonType.ptr("", 0);
			this.Elem = 0;
			return;
		}
		this.CommonType = CommonType_;
		this.Elem = Elem_;
	});
	fieldType = $pkg.fieldType = $newType(0, $kindStruct, "gob.fieldType", true, "encoding/gob", false, function(Name_, Id_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Name = "";
			this.Id = 0;
			return;
		}
		this.Name = Name_;
		this.Id = Id_;
	});
	structType = $pkg.structType = $newType(0, $kindStruct, "gob.structType", true, "encoding/gob", false, function(CommonType_, Field_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.CommonType = new CommonType.ptr("", 0);
			this.Field = sliceType$22.nil;
			return;
		}
		this.CommonType = CommonType_;
		this.Field = Field_;
	});
	wireType = $pkg.wireType = $newType(0, $kindStruct, "gob.wireType", true, "encoding/gob", false, function(ArrayT_, SliceT_, StructT_, MapT_, GobEncoderT_, BinaryMarshalerT_, TextMarshalerT_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.ArrayT = ptrType$23.nil;
			this.SliceT = ptrType$24.nil;
			this.StructT = ptrType$25.nil;
			this.MapT = ptrType$26.nil;
			this.GobEncoderT = ptrType$27.nil;
			this.BinaryMarshalerT = ptrType$27.nil;
			this.TextMarshalerT = ptrType$27.nil;
			return;
		}
		this.ArrayT = ArrayT_;
		this.SliceT = SliceT_;
		this.StructT = StructT_;
		this.MapT = MapT_;
		this.GobEncoderT = GobEncoderT_;
		this.BinaryMarshalerT = BinaryMarshalerT_;
		this.TextMarshalerT = TextMarshalerT_;
	});
	typeInfo = $pkg.typeInfo = $newType(0, $kindStruct, "gob.typeInfo", true, "encoding/gob", false, function(id_, encInit_, encoder_, wire_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.id = 0;
			this.encInit = new nosync.Mutex.ptr(false);
			this.encoder = new atomic.Value.ptr($ifaceNil);
			this.wire = ptrType$32.nil;
			return;
		}
		this.id = id_;
		this.encInit = encInit_;
		this.encoder = encoder_;
		this.wire = wire_;
	});
	GobEncoder = $pkg.GobEncoder = $newType(8, $kindInterface, "gob.GobEncoder", true, "encoding/gob", true, null);
	GobDecoder = $pkg.GobDecoder = $newType(8, $kindInterface, "gob.GobDecoder", true, "encoding/gob", true, null);
	ptrType = $ptrType(reflect.rtype);
	ptrType$1 = $ptrType(userTypeInfo);
	sliceType$1 = $sliceType($emptyInterface);
	sliceType$2 = $sliceType($Uint8);
	arrayType$1 = $arrayType($Uint8, 64);
	ptrType$2 = $ptrType(GobEncoder);
	ptrType$3 = $ptrType(GobDecoder);
	ptrType$4 = $ptrType(encoding.BinaryMarshaler);
	ptrType$5 = $ptrType(encoding.BinaryUnmarshaler);
	ptrType$6 = $ptrType(encoding.TextMarshaler);
	ptrType$7 = $ptrType(encoding.TextUnmarshaler);
	ptrType$8 = $ptrType($Bool);
	ptrType$9 = $ptrType($Int);
	ptrType$10 = $ptrType($Uint);
	ptrType$11 = $ptrType($Float64);
	ptrType$12 = $ptrType(sliceType$2);
	ptrType$13 = $ptrType($String);
	ptrType$14 = $ptrType($Complex128);
	ptrType$15 = $ptrType($emptyInterface);
	structType$1 = $structType("encoding/gob", [{prop: "r7", name: "r7", anonymous: false, exported: false, typ: $Int, tag: ""}]);
	ptrType$16 = $ptrType(structType$1);
	structType$2 = $structType("encoding/gob", [{prop: "r6", name: "r6", anonymous: false, exported: false, typ: $Int, tag: ""}]);
	ptrType$17 = $ptrType(structType$2);
	structType$3 = $structType("encoding/gob", [{prop: "r5", name: "r5", anonymous: false, exported: false, typ: $Int, tag: ""}]);
	ptrType$18 = $ptrType(structType$3);
	structType$4 = $structType("encoding/gob", [{prop: "r4", name: "r4", anonymous: false, exported: false, typ: $Int, tag: ""}]);
	ptrType$19 = $ptrType(structType$4);
	structType$5 = $structType("encoding/gob", [{prop: "r3", name: "r3", anonymous: false, exported: false, typ: $Int, tag: ""}]);
	ptrType$20 = $ptrType(structType$5);
	structType$6 = $structType("encoding/gob", [{prop: "r2", name: "r2", anonymous: false, exported: false, typ: $Int, tag: ""}]);
	ptrType$21 = $ptrType(structType$6);
	structType$7 = $structType("encoding/gob", [{prop: "r1", name: "r1", anonymous: false, exported: false, typ: $Int, tag: ""}]);
	ptrType$22 = $ptrType(structType$7);
	ptrType$23 = $ptrType(arrayType);
	ptrType$24 = $ptrType(sliceType);
	ptrType$25 = $ptrType(structType);
	ptrType$26 = $ptrType(mapType);
	ptrType$27 = $ptrType(gobEncoderType);
	sliceType$3 = $sliceType($Bool);
	sliceType$4 = $sliceType($Complex64);
	sliceType$5 = $sliceType($Complex128);
	sliceType$6 = $sliceType($Float32);
	sliceType$7 = $sliceType($Float64);
	sliceType$8 = $sliceType($Int);
	sliceType$9 = $sliceType($Int16);
	sliceType$10 = $sliceType($Int32);
	sliceType$11 = $sliceType($Int64);
	sliceType$12 = $sliceType($Int8);
	sliceType$13 = $sliceType($String);
	sliceType$14 = $sliceType($Uint);
	sliceType$15 = $sliceType($Uint16);
	sliceType$16 = $sliceType($Uint32);
	sliceType$17 = $sliceType($Uint64);
	sliceType$18 = $sliceType($Uintptr);
	ptrType$28 = $ptrType(decoderState);
	ptrType$29 = $ptrType(Decoder);
	ptrType$30 = $ptrType(decBuffer);
	ptrType$31 = $ptrType(decOp);
	ptrType$32 = $ptrType(wireType);
	ptrType$33 = $ptrType(decEngine);
	sliceType$19 = $sliceType(decInstr);
	ptrType$34 = $ptrType($error);
	ptrType$35 = $ptrType(ptrType$33);
	ptrType$36 = $ptrType(encoderState);
	ptrType$37 = $ptrType(Encoder);
	ptrType$38 = $ptrType(encBuffer);
	arrayType$2 = $arrayType($Uint8, 9);
	ptrType$39 = $ptrType(encInstr);
	ptrType$40 = $ptrType(encOp);
	ptrType$41 = $ptrType(encEngine);
	sliceType$20 = $sliceType(encInstr);
	ptrType$42 = $ptrType(typeInfo);
	sliceType$21 = $sliceType(io.Writer);
	ptrType$43 = $ptrType(fieldType);
	sliceType$22 = $sliceType(ptrType$43);
	mapType$1 = $mapType(reflect.Type, ptrType$42);
	ptrType$44 = $ptrType(decInstr);
	mapType$2 = $mapType(reflect.Type, ptrType$31);
	mapType$3 = $mapType(typeId, ptrType$31);
	mapType$4 = $mapType(reflect.Type, typeId);
	mapType$5 = $mapType(typeId, ptrType$32);
	mapType$6 = $mapType(typeId, ptrType$35);
	mapType$7 = $mapType(reflect.Type, mapType$6);
	mapType$8 = $mapType(typeId, $Bool);
	ptrType$45 = $ptrType(CommonType);
	decBoolArray = function(state, v, length, ovfl) {
		var _arg, _arg$1, _arg$2, _arg$3, _r$22, _r$23, length, ovfl, state, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _arg$3 = $f._arg$3; _r$22 = $f._r$22; _r$23 = $f._r$23; length = $f.length; ovfl = $f.ovfl; state = $f.state; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		if (!$clone(v, reflect.Value).CanAddr()) {
			$s = -1; return false;
		}
		_arg = state;
		_r$22 = $clone(v, reflect.Value).Slice(0, $clone(v, reflect.Value).Len()); /* */ $s = 1; case 1: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
		_arg$1 = $clone(_r$22, reflect.Value);
		_arg$2 = length;
		_arg$3 = ovfl;
		_r$23 = decBoolSlice(_arg, _arg$1, _arg$2, _arg$3); /* */ $s = 2; case 2: if($c) { $c = false; _r$23 = _r$23.$blk(); } if (_r$23 && _r$23.$blk !== undefined) { break s; }
		$s = -1; return _r$23;
		/* */ } return; } if ($f === undefined) { $f = { $blk: decBoolArray }; } $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._arg$3 = _arg$3; $f._r$22 = _r$22; $f._r$23 = _r$23; $f.length = length; $f.ovfl = ovfl; $f.state = state; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	decBoolSlice = function(state, v, length, ovfl) {
		var _r$22, _r$23, _tuple, i, length, ok, ovfl, slice, state, v, x$2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$22 = $f._r$22; _r$23 = $f._r$23; _tuple = $f._tuple; i = $f.i; length = $f.length; ok = $f.ok; ovfl = $f.ovfl; slice = $f.slice; state = $f.state; v = $f.v; x$2 = $f.x$2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r$22 = $clone(v, reflect.Value).Interface(); /* */ $s = 1; case 1: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
		_tuple = $assertType(_r$22, sliceType$3, true);
		slice = _tuple[0];
		ok = _tuple[1];
		if (!ok) {
			$s = -1; return false;
		}
		i = 0;
		/* while (true) { */ case 2:
			/* if (!(i < length)) { break; } */ if(!(i < length)) { $s = 3; continue; }
			/* */ if (state.b.Len() === 0) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (state.b.Len() === 0) { */ case 4:
				$r = errorf("decoding bool array or slice: length exceeds input size (%d elements)", new sliceType$1([new $Int(length)])); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 5:
			_r$23 = state.decodeUint(); /* */ $s = 7; case 7: if($c) { $c = false; _r$23 = _r$23.$blk(); } if (_r$23 && _r$23.$blk !== undefined) { break s; }
			((i < 0 || i >= slice.$length) ? ($throwRuntimeError("index out of range"), undefined) : slice.$array[slice.$offset + i] = !((x$2 = _r$23, (x$2.$high === 0 && x$2.$low === 0))));
			i = i + (1) >> 0;
		/* } */ $s = 2; continue; case 3:
		$s = -1; return true;
		/* */ } return; } if ($f === undefined) { $f = { $blk: decBoolSlice }; } $f._r$22 = _r$22; $f._r$23 = _r$23; $f._tuple = _tuple; $f.i = i; $f.length = length; $f.ok = ok; $f.ovfl = ovfl; $f.slice = slice; $f.state = state; $f.v = v; $f.x$2 = x$2; $f.$s = $s; $f.$r = $r; return $f;
	};
	decComplex64Array = function(state, v, length, ovfl) {
		var _arg, _arg$1, _arg$2, _arg$3, _r$22, _r$23, length, ovfl, state, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _arg$3 = $f._arg$3; _r$22 = $f._r$22; _r$23 = $f._r$23; length = $f.length; ovfl = $f.ovfl; state = $f.state; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		if (!$clone(v, reflect.Value).CanAddr()) {
			$s = -1; return false;
		}
		_arg = state;
		_r$22 = $clone(v, reflect.Value).Slice(0, $clone(v, reflect.Value).Len()); /* */ $s = 1; case 1: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
		_arg$1 = $clone(_r$22, reflect.Value);
		_arg$2 = length;
		_arg$3 = ovfl;
		_r$23 = decComplex64Slice(_arg, _arg$1, _arg$2, _arg$3); /* */ $s = 2; case 2: if($c) { $c = false; _r$23 = _r$23.$blk(); } if (_r$23 && _r$23.$blk !== undefined) { break s; }
		$s = -1; return _r$23;
		/* */ } return; } if ($f === undefined) { $f = { $blk: decComplex64Array }; } $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._arg$3 = _arg$3; $f._r$22 = _r$22; $f._r$23 = _r$23; $f.length = length; $f.ovfl = ovfl; $f.state = state; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	decComplex64Slice = function(state, v, length, ovfl) {
		var _r$22, _r$23, _r$24, _r$25, _r$26, _tuple, i, imag, length, ok, ovfl, real, slice, state, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$22 = $f._r$22; _r$23 = $f._r$23; _r$24 = $f._r$24; _r$25 = $f._r$25; _r$26 = $f._r$26; _tuple = $f._tuple; i = $f.i; imag = $f.imag; length = $f.length; ok = $f.ok; ovfl = $f.ovfl; real = $f.real; slice = $f.slice; state = $f.state; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r$22 = $clone(v, reflect.Value).Interface(); /* */ $s = 1; case 1: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
		_tuple = $assertType(_r$22, sliceType$4, true);
		slice = _tuple[0];
		ok = _tuple[1];
		if (!ok) {
			$s = -1; return false;
		}
		i = 0;
		/* while (true) { */ case 2:
			/* if (!(i < length)) { break; } */ if(!(i < length)) { $s = 3; continue; }
			/* */ if (state.b.Len() === 0) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (state.b.Len() === 0) { */ case 4:
				$r = errorf("decoding complex64 array or slice: length exceeds input size (%d elements)", new sliceType$1([new $Int(length)])); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 5:
			_r$23 = state.decodeUint(); /* */ $s = 7; case 7: if($c) { $c = false; _r$23 = _r$23.$blk(); } if (_r$23 && _r$23.$blk !== undefined) { break s; }
			_r$24 = float32FromBits(_r$23, ovfl); /* */ $s = 8; case 8: if($c) { $c = false; _r$24 = _r$24.$blk(); } if (_r$24 && _r$24.$blk !== undefined) { break s; }
			real = _r$24;
			_r$25 = state.decodeUint(); /* */ $s = 9; case 9: if($c) { $c = false; _r$25 = _r$25.$blk(); } if (_r$25 && _r$25.$blk !== undefined) { break s; }
			_r$26 = float32FromBits(_r$25, ovfl); /* */ $s = 10; case 10: if($c) { $c = false; _r$26 = _r$26.$blk(); } if (_r$26 && _r$26.$blk !== undefined) { break s; }
			imag = _r$26;
			((i < 0 || i >= slice.$length) ? ($throwRuntimeError("index out of range"), undefined) : slice.$array[slice.$offset + i] = new $Complex64(($fround(real)), ($fround(imag))));
			i = i + (1) >> 0;
		/* } */ $s = 2; continue; case 3:
		$s = -1; return true;
		/* */ } return; } if ($f === undefined) { $f = { $blk: decComplex64Slice }; } $f._r$22 = _r$22; $f._r$23 = _r$23; $f._r$24 = _r$24; $f._r$25 = _r$25; $f._r$26 = _r$26; $f._tuple = _tuple; $f.i = i; $f.imag = imag; $f.length = length; $f.ok = ok; $f.ovfl = ovfl; $f.real = real; $f.slice = slice; $f.state = state; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	decComplex128Array = function(state, v, length, ovfl) {
		var _arg, _arg$1, _arg$2, _arg$3, _r$22, _r$23, length, ovfl, state, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _arg$3 = $f._arg$3; _r$22 = $f._r$22; _r$23 = $f._r$23; length = $f.length; ovfl = $f.ovfl; state = $f.state; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		if (!$clone(v, reflect.Value).CanAddr()) {
			$s = -1; return false;
		}
		_arg = state;
		_r$22 = $clone(v, reflect.Value).Slice(0, $clone(v, reflect.Value).Len()); /* */ $s = 1; case 1: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
		_arg$1 = $clone(_r$22, reflect.Value);
		_arg$2 = length;
		_arg$3 = ovfl;
		_r$23 = decComplex128Slice(_arg, _arg$1, _arg$2, _arg$3); /* */ $s = 2; case 2: if($c) { $c = false; _r$23 = _r$23.$blk(); } if (_r$23 && _r$23.$blk !== undefined) { break s; }
		$s = -1; return _r$23;
		/* */ } return; } if ($f === undefined) { $f = { $blk: decComplex128Array }; } $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._arg$3 = _arg$3; $f._r$22 = _r$22; $f._r$23 = _r$23; $f.length = length; $f.ovfl = ovfl; $f.state = state; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	decComplex128Slice = function(state, v, length, ovfl) {
		var _r$22, _r$23, _r$24, _r$25, _r$26, _tuple, i, imag, length, ok, ovfl, real, slice, state, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$22 = $f._r$22; _r$23 = $f._r$23; _r$24 = $f._r$24; _r$25 = $f._r$25; _r$26 = $f._r$26; _tuple = $f._tuple; i = $f.i; imag = $f.imag; length = $f.length; ok = $f.ok; ovfl = $f.ovfl; real = $f.real; slice = $f.slice; state = $f.state; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r$22 = $clone(v, reflect.Value).Interface(); /* */ $s = 1; case 1: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
		_tuple = $assertType(_r$22, sliceType$5, true);
		slice = _tuple[0];
		ok = _tuple[1];
		if (!ok) {
			$s = -1; return false;
		}
		i = 0;
		/* while (true) { */ case 2:
			/* if (!(i < length)) { break; } */ if(!(i < length)) { $s = 3; continue; }
			/* */ if (state.b.Len() === 0) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (state.b.Len() === 0) { */ case 4:
				$r = errorf("decoding complex128 array or slice: length exceeds input size (%d elements)", new sliceType$1([new $Int(length)])); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 5:
			_r$23 = state.decodeUint(); /* */ $s = 7; case 7: if($c) { $c = false; _r$23 = _r$23.$blk(); } if (_r$23 && _r$23.$blk !== undefined) { break s; }
			_r$24 = float64FromBits(_r$23); /* */ $s = 8; case 8: if($c) { $c = false; _r$24 = _r$24.$blk(); } if (_r$24 && _r$24.$blk !== undefined) { break s; }
			real = _r$24;
			_r$25 = state.decodeUint(); /* */ $s = 9; case 9: if($c) { $c = false; _r$25 = _r$25.$blk(); } if (_r$25 && _r$25.$blk !== undefined) { break s; }
			_r$26 = float64FromBits(_r$25); /* */ $s = 10; case 10: if($c) { $c = false; _r$26 = _r$26.$blk(); } if (_r$26 && _r$26.$blk !== undefined) { break s; }
			imag = _r$26;
			((i < 0 || i >= slice.$length) ? ($throwRuntimeError("index out of range"), undefined) : slice.$array[slice.$offset + i] = new $Complex128(real, imag));
			i = i + (1) >> 0;
		/* } */ $s = 2; continue; case 3:
		$s = -1; return true;
		/* */ } return; } if ($f === undefined) { $f = { $blk: decComplex128Slice }; } $f._r$22 = _r$22; $f._r$23 = _r$23; $f._r$24 = _r$24; $f._r$25 = _r$25; $f._r$26 = _r$26; $f._tuple = _tuple; $f.i = i; $f.imag = imag; $f.length = length; $f.ok = ok; $f.ovfl = ovfl; $f.real = real; $f.slice = slice; $f.state = state; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	decFloat32Array = function(state, v, length, ovfl) {
		var _arg, _arg$1, _arg$2, _arg$3, _r$22, _r$23, length, ovfl, state, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _arg$3 = $f._arg$3; _r$22 = $f._r$22; _r$23 = $f._r$23; length = $f.length; ovfl = $f.ovfl; state = $f.state; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		if (!$clone(v, reflect.Value).CanAddr()) {
			$s = -1; return false;
		}
		_arg = state;
		_r$22 = $clone(v, reflect.Value).Slice(0, $clone(v, reflect.Value).Len()); /* */ $s = 1; case 1: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
		_arg$1 = $clone(_r$22, reflect.Value);
		_arg$2 = length;
		_arg$3 = ovfl;
		_r$23 = decFloat32Slice(_arg, _arg$1, _arg$2, _arg$3); /* */ $s = 2; case 2: if($c) { $c = false; _r$23 = _r$23.$blk(); } if (_r$23 && _r$23.$blk !== undefined) { break s; }
		$s = -1; return _r$23;
		/* */ } return; } if ($f === undefined) { $f = { $blk: decFloat32Array }; } $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._arg$3 = _arg$3; $f._r$22 = _r$22; $f._r$23 = _r$23; $f.length = length; $f.ovfl = ovfl; $f.state = state; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	decFloat32Slice = function(state, v, length, ovfl) {
		var _r$22, _r$23, _r$24, _tuple, i, length, ok, ovfl, slice, state, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$22 = $f._r$22; _r$23 = $f._r$23; _r$24 = $f._r$24; _tuple = $f._tuple; i = $f.i; length = $f.length; ok = $f.ok; ovfl = $f.ovfl; slice = $f.slice; state = $f.state; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r$22 = $clone(v, reflect.Value).Interface(); /* */ $s = 1; case 1: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
		_tuple = $assertType(_r$22, sliceType$6, true);
		slice = _tuple[0];
		ok = _tuple[1];
		if (!ok) {
			$s = -1; return false;
		}
		i = 0;
		/* while (true) { */ case 2:
			/* if (!(i < length)) { break; } */ if(!(i < length)) { $s = 3; continue; }
			/* */ if (state.b.Len() === 0) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (state.b.Len() === 0) { */ case 4:
				$r = errorf("decoding float32 array or slice: length exceeds input size (%d elements)", new sliceType$1([new $Int(length)])); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 5:
			_r$23 = state.decodeUint(); /* */ $s = 7; case 7: if($c) { $c = false; _r$23 = _r$23.$blk(); } if (_r$23 && _r$23.$blk !== undefined) { break s; }
			_r$24 = float32FromBits(_r$23, ovfl); /* */ $s = 8; case 8: if($c) { $c = false; _r$24 = _r$24.$blk(); } if (_r$24 && _r$24.$blk !== undefined) { break s; }
			((i < 0 || i >= slice.$length) ? ($throwRuntimeError("index out of range"), undefined) : slice.$array[slice.$offset + i] = ($fround(_r$24)));
			i = i + (1) >> 0;
		/* } */ $s = 2; continue; case 3:
		$s = -1; return true;
		/* */ } return; } if ($f === undefined) { $f = { $blk: decFloat32Slice }; } $f._r$22 = _r$22; $f._r$23 = _r$23; $f._r$24 = _r$24; $f._tuple = _tuple; $f.i = i; $f.length = length; $f.ok = ok; $f.ovfl = ovfl; $f.slice = slice; $f.state = state; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	decFloat64Array = function(state, v, length, ovfl) {
		var _arg, _arg$1, _arg$2, _arg$3, _r$22, _r$23, length, ovfl, state, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _arg$3 = $f._arg$3; _r$22 = $f._r$22; _r$23 = $f._r$23; length = $f.length; ovfl = $f.ovfl; state = $f.state; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		if (!$clone(v, reflect.Value).CanAddr()) {
			$s = -1; return false;
		}
		_arg = state;
		_r$22 = $clone(v, reflect.Value).Slice(0, $clone(v, reflect.Value).Len()); /* */ $s = 1; case 1: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
		_arg$1 = $clone(_r$22, reflect.Value);
		_arg$2 = length;
		_arg$3 = ovfl;
		_r$23 = decFloat64Slice(_arg, _arg$1, _arg$2, _arg$3); /* */ $s = 2; case 2: if($c) { $c = false; _r$23 = _r$23.$blk(); } if (_r$23 && _r$23.$blk !== undefined) { break s; }
		$s = -1; return _r$23;
		/* */ } return; } if ($f === undefined) { $f = { $blk: decFloat64Array }; } $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._arg$3 = _arg$3; $f._r$22 = _r$22; $f._r$23 = _r$23; $f.length = length; $f.ovfl = ovfl; $f.state = state; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	decFloat64Slice = function(state, v, length, ovfl) {
		var _r$22, _r$23, _r$24, _tuple, i, length, ok, ovfl, slice, state, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$22 = $f._r$22; _r$23 = $f._r$23; _r$24 = $f._r$24; _tuple = $f._tuple; i = $f.i; length = $f.length; ok = $f.ok; ovfl = $f.ovfl; slice = $f.slice; state = $f.state; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r$22 = $clone(v, reflect.Value).Interface(); /* */ $s = 1; case 1: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
		_tuple = $assertType(_r$22, sliceType$7, true);
		slice = _tuple[0];
		ok = _tuple[1];
		if (!ok) {
			$s = -1; return false;
		}
		i = 0;
		/* while (true) { */ case 2:
			/* if (!(i < length)) { break; } */ if(!(i < length)) { $s = 3; continue; }
			/* */ if (state.b.Len() === 0) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (state.b.Len() === 0) { */ case 4:
				$r = errorf("decoding float64 array or slice: length exceeds input size (%d elements)", new sliceType$1([new $Int(length)])); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 5:
			_r$23 = state.decodeUint(); /* */ $s = 7; case 7: if($c) { $c = false; _r$23 = _r$23.$blk(); } if (_r$23 && _r$23.$blk !== undefined) { break s; }
			_r$24 = float64FromBits(_r$23); /* */ $s = 8; case 8: if($c) { $c = false; _r$24 = _r$24.$blk(); } if (_r$24 && _r$24.$blk !== undefined) { break s; }
			((i < 0 || i >= slice.$length) ? ($throwRuntimeError("index out of range"), undefined) : slice.$array[slice.$offset + i] = _r$24);
			i = i + (1) >> 0;
		/* } */ $s = 2; continue; case 3:
		$s = -1; return true;
		/* */ } return; } if ($f === undefined) { $f = { $blk: decFloat64Slice }; } $f._r$22 = _r$22; $f._r$23 = _r$23; $f._r$24 = _r$24; $f._tuple = _tuple; $f.i = i; $f.length = length; $f.ok = ok; $f.ovfl = ovfl; $f.slice = slice; $f.state = state; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	decIntArray = function(state, v, length, ovfl) {
		var _arg, _arg$1, _arg$2, _arg$3, _r$22, _r$23, length, ovfl, state, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _arg$3 = $f._arg$3; _r$22 = $f._r$22; _r$23 = $f._r$23; length = $f.length; ovfl = $f.ovfl; state = $f.state; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		if (!$clone(v, reflect.Value).CanAddr()) {
			$s = -1; return false;
		}
		_arg = state;
		_r$22 = $clone(v, reflect.Value).Slice(0, $clone(v, reflect.Value).Len()); /* */ $s = 1; case 1: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
		_arg$1 = $clone(_r$22, reflect.Value);
		_arg$2 = length;
		_arg$3 = ovfl;
		_r$23 = decIntSlice(_arg, _arg$1, _arg$2, _arg$3); /* */ $s = 2; case 2: if($c) { $c = false; _r$23 = _r$23.$blk(); } if (_r$23 && _r$23.$blk !== undefined) { break s; }
		$s = -1; return _r$23;
		/* */ } return; } if ($f === undefined) { $f = { $blk: decIntArray }; } $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._arg$3 = _arg$3; $f._r$22 = _r$22; $f._r$23 = _r$23; $f.length = length; $f.ovfl = ovfl; $f.state = state; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	decIntSlice = function(state, v, length, ovfl) {
		var _r$22, _r$23, _tuple, i, length, ok, ovfl, slice, state, v, x$2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$22 = $f._r$22; _r$23 = $f._r$23; _tuple = $f._tuple; i = $f.i; length = $f.length; ok = $f.ok; ovfl = $f.ovfl; slice = $f.slice; state = $f.state; v = $f.v; x$2 = $f.x$2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r$22 = $clone(v, reflect.Value).Interface(); /* */ $s = 1; case 1: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
		_tuple = $assertType(_r$22, sliceType$8, true);
		slice = _tuple[0];
		ok = _tuple[1];
		if (!ok) {
			$s = -1; return false;
		}
		i = 0;
		/* while (true) { */ case 2:
			/* if (!(i < length)) { break; } */ if(!(i < length)) { $s = 3; continue; }
			/* */ if (state.b.Len() === 0) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (state.b.Len() === 0) { */ case 4:
				$r = errorf("decoding int array or slice: length exceeds input size (%d elements)", new sliceType$1([new $Int(length)])); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 5:
			_r$23 = state.decodeInt(); /* */ $s = 7; case 7: if($c) { $c = false; _r$23 = _r$23.$blk(); } if (_r$23 && _r$23.$blk !== undefined) { break s; }
			x$2 = _r$23;
			if ((x$2.$high < -1 || (x$2.$high === -1 && x$2.$low < 2147483648)) || (0 < x$2.$high || (0 === x$2.$high && 2147483647 < x$2.$low))) {
				error_(ovfl);
			}
			((i < 0 || i >= slice.$length) ? ($throwRuntimeError("index out of range"), undefined) : slice.$array[slice.$offset + i] = (((x$2.$low + ((x$2.$high >> 31) * 4294967296)) >> 0)));
			i = i + (1) >> 0;
		/* } */ $s = 2; continue; case 3:
		$s = -1; return true;
		/* */ } return; } if ($f === undefined) { $f = { $blk: decIntSlice }; } $f._r$22 = _r$22; $f._r$23 = _r$23; $f._tuple = _tuple; $f.i = i; $f.length = length; $f.ok = ok; $f.ovfl = ovfl; $f.slice = slice; $f.state = state; $f.v = v; $f.x$2 = x$2; $f.$s = $s; $f.$r = $r; return $f;
	};
	decInt16Array = function(state, v, length, ovfl) {
		var _arg, _arg$1, _arg$2, _arg$3, _r$22, _r$23, length, ovfl, state, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _arg$3 = $f._arg$3; _r$22 = $f._r$22; _r$23 = $f._r$23; length = $f.length; ovfl = $f.ovfl; state = $f.state; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		if (!$clone(v, reflect.Value).CanAddr()) {
			$s = -1; return false;
		}
		_arg = state;
		_r$22 = $clone(v, reflect.Value).Slice(0, $clone(v, reflect.Value).Len()); /* */ $s = 1; case 1: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
		_arg$1 = $clone(_r$22, reflect.Value);
		_arg$2 = length;
		_arg$3 = ovfl;
		_r$23 = decInt16Slice(_arg, _arg$1, _arg$2, _arg$3); /* */ $s = 2; case 2: if($c) { $c = false; _r$23 = _r$23.$blk(); } if (_r$23 && _r$23.$blk !== undefined) { break s; }
		$s = -1; return _r$23;
		/* */ } return; } if ($f === undefined) { $f = { $blk: decInt16Array }; } $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._arg$3 = _arg$3; $f._r$22 = _r$22; $f._r$23 = _r$23; $f.length = length; $f.ovfl = ovfl; $f.state = state; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	decInt16Slice = function(state, v, length, ovfl) {
		var _r$22, _r$23, _tuple, i, length, ok, ovfl, slice, state, v, x$2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$22 = $f._r$22; _r$23 = $f._r$23; _tuple = $f._tuple; i = $f.i; length = $f.length; ok = $f.ok; ovfl = $f.ovfl; slice = $f.slice; state = $f.state; v = $f.v; x$2 = $f.x$2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r$22 = $clone(v, reflect.Value).Interface(); /* */ $s = 1; case 1: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
		_tuple = $assertType(_r$22, sliceType$9, true);
		slice = _tuple[0];
		ok = _tuple[1];
		if (!ok) {
			$s = -1; return false;
		}
		i = 0;
		/* while (true) { */ case 2:
			/* if (!(i < length)) { break; } */ if(!(i < length)) { $s = 3; continue; }
			/* */ if (state.b.Len() === 0) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (state.b.Len() === 0) { */ case 4:
				$r = errorf("decoding int16 array or slice: length exceeds input size (%d elements)", new sliceType$1([new $Int(length)])); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 5:
			_r$23 = state.decodeInt(); /* */ $s = 7; case 7: if($c) { $c = false; _r$23 = _r$23.$blk(); } if (_r$23 && _r$23.$blk !== undefined) { break s; }
			x$2 = _r$23;
			if ((x$2.$high < -1 || (x$2.$high === -1 && x$2.$low < 4294934528)) || (0 < x$2.$high || (0 === x$2.$high && 32767 < x$2.$low))) {
				error_(ovfl);
			}
			((i < 0 || i >= slice.$length) ? ($throwRuntimeError("index out of range"), undefined) : slice.$array[slice.$offset + i] = (((x$2.$low + ((x$2.$high >> 31) * 4294967296)) << 16 >> 16)));
			i = i + (1) >> 0;
		/* } */ $s = 2; continue; case 3:
		$s = -1; return true;
		/* */ } return; } if ($f === undefined) { $f = { $blk: decInt16Slice }; } $f._r$22 = _r$22; $f._r$23 = _r$23; $f._tuple = _tuple; $f.i = i; $f.length = length; $f.ok = ok; $f.ovfl = ovfl; $f.slice = slice; $f.state = state; $f.v = v; $f.x$2 = x$2; $f.$s = $s; $f.$r = $r; return $f;
	};
	decInt32Array = function(state, v, length, ovfl) {
		var _arg, _arg$1, _arg$2, _arg$3, _r$22, _r$23, length, ovfl, state, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _arg$3 = $f._arg$3; _r$22 = $f._r$22; _r$23 = $f._r$23; length = $f.length; ovfl = $f.ovfl; state = $f.state; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		if (!$clone(v, reflect.Value).CanAddr()) {
			$s = -1; return false;
		}
		_arg = state;
		_r$22 = $clone(v, reflect.Value).Slice(0, $clone(v, reflect.Value).Len()); /* */ $s = 1; case 1: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
		_arg$1 = $clone(_r$22, reflect.Value);
		_arg$2 = length;
		_arg$3 = ovfl;
		_r$23 = decInt32Slice(_arg, _arg$1, _arg$2, _arg$3); /* */ $s = 2; case 2: if($c) { $c = false; _r$23 = _r$23.$blk(); } if (_r$23 && _r$23.$blk !== undefined) { break s; }
		$s = -1; return _r$23;
		/* */ } return; } if ($f === undefined) { $f = { $blk: decInt32Array }; } $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._arg$3 = _arg$3; $f._r$22 = _r$22; $f._r$23 = _r$23; $f.length = length; $f.ovfl = ovfl; $f.state = state; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	decInt32Slice = function(state, v, length, ovfl) {
		var _r$22, _r$23, _tuple, i, length, ok, ovfl, slice, state, v, x$2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$22 = $f._r$22; _r$23 = $f._r$23; _tuple = $f._tuple; i = $f.i; length = $f.length; ok = $f.ok; ovfl = $f.ovfl; slice = $f.slice; state = $f.state; v = $f.v; x$2 = $f.x$2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r$22 = $clone(v, reflect.Value).Interface(); /* */ $s = 1; case 1: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
		_tuple = $assertType(_r$22, sliceType$10, true);
		slice = _tuple[0];
		ok = _tuple[1];
		if (!ok) {
			$s = -1; return false;
		}
		i = 0;
		/* while (true) { */ case 2:
			/* if (!(i < length)) { break; } */ if(!(i < length)) { $s = 3; continue; }
			/* */ if (state.b.Len() === 0) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (state.b.Len() === 0) { */ case 4:
				$r = errorf("decoding int32 array or slice: length exceeds input size (%d elements)", new sliceType$1([new $Int(length)])); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 5:
			_r$23 = state.decodeInt(); /* */ $s = 7; case 7: if($c) { $c = false; _r$23 = _r$23.$blk(); } if (_r$23 && _r$23.$blk !== undefined) { break s; }
			x$2 = _r$23;
			if ((x$2.$high < -1 || (x$2.$high === -1 && x$2.$low < 2147483648)) || (0 < x$2.$high || (0 === x$2.$high && 2147483647 < x$2.$low))) {
				error_(ovfl);
			}
			((i < 0 || i >= slice.$length) ? ($throwRuntimeError("index out of range"), undefined) : slice.$array[slice.$offset + i] = (((x$2.$low + ((x$2.$high >> 31) * 4294967296)) >> 0)));
			i = i + (1) >> 0;
		/* } */ $s = 2; continue; case 3:
		$s = -1; return true;
		/* */ } return; } if ($f === undefined) { $f = { $blk: decInt32Slice }; } $f._r$22 = _r$22; $f._r$23 = _r$23; $f._tuple = _tuple; $f.i = i; $f.length = length; $f.ok = ok; $f.ovfl = ovfl; $f.slice = slice; $f.state = state; $f.v = v; $f.x$2 = x$2; $f.$s = $s; $f.$r = $r; return $f;
	};
	decInt64Array = function(state, v, length, ovfl) {
		var _arg, _arg$1, _arg$2, _arg$3, _r$22, _r$23, length, ovfl, state, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _arg$3 = $f._arg$3; _r$22 = $f._r$22; _r$23 = $f._r$23; length = $f.length; ovfl = $f.ovfl; state = $f.state; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		if (!$clone(v, reflect.Value).CanAddr()) {
			$s = -1; return false;
		}
		_arg = state;
		_r$22 = $clone(v, reflect.Value).Slice(0, $clone(v, reflect.Value).Len()); /* */ $s = 1; case 1: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
		_arg$1 = $clone(_r$22, reflect.Value);
		_arg$2 = length;
		_arg$3 = ovfl;
		_r$23 = decInt64Slice(_arg, _arg$1, _arg$2, _arg$3); /* */ $s = 2; case 2: if($c) { $c = false; _r$23 = _r$23.$blk(); } if (_r$23 && _r$23.$blk !== undefined) { break s; }
		$s = -1; return _r$23;
		/* */ } return; } if ($f === undefined) { $f = { $blk: decInt64Array }; } $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._arg$3 = _arg$3; $f._r$22 = _r$22; $f._r$23 = _r$23; $f.length = length; $f.ovfl = ovfl; $f.state = state; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	decInt64Slice = function(state, v, length, ovfl) {
		var _r$22, _r$23, _tuple, i, length, ok, ovfl, slice, state, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$22 = $f._r$22; _r$23 = $f._r$23; _tuple = $f._tuple; i = $f.i; length = $f.length; ok = $f.ok; ovfl = $f.ovfl; slice = $f.slice; state = $f.state; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r$22 = $clone(v, reflect.Value).Interface(); /* */ $s = 1; case 1: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
		_tuple = $assertType(_r$22, sliceType$11, true);
		slice = _tuple[0];
		ok = _tuple[1];
		if (!ok) {
			$s = -1; return false;
		}
		i = 0;
		/* while (true) { */ case 2:
			/* if (!(i < length)) { break; } */ if(!(i < length)) { $s = 3; continue; }
			/* */ if (state.b.Len() === 0) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (state.b.Len() === 0) { */ case 4:
				$r = errorf("decoding int64 array or slice: length exceeds input size (%d elements)", new sliceType$1([new $Int(length)])); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 5:
			_r$23 = state.decodeInt(); /* */ $s = 7; case 7: if($c) { $c = false; _r$23 = _r$23.$blk(); } if (_r$23 && _r$23.$blk !== undefined) { break s; }
			((i < 0 || i >= slice.$length) ? ($throwRuntimeError("index out of range"), undefined) : slice.$array[slice.$offset + i] = _r$23);
			i = i + (1) >> 0;
		/* } */ $s = 2; continue; case 3:
		$s = -1; return true;
		/* */ } return; } if ($f === undefined) { $f = { $blk: decInt64Slice }; } $f._r$22 = _r$22; $f._r$23 = _r$23; $f._tuple = _tuple; $f.i = i; $f.length = length; $f.ok = ok; $f.ovfl = ovfl; $f.slice = slice; $f.state = state; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	decInt8Array = function(state, v, length, ovfl) {
		var _arg, _arg$1, _arg$2, _arg$3, _r$22, _r$23, length, ovfl, state, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _arg$3 = $f._arg$3; _r$22 = $f._r$22; _r$23 = $f._r$23; length = $f.length; ovfl = $f.ovfl; state = $f.state; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		if (!$clone(v, reflect.Value).CanAddr()) {
			$s = -1; return false;
		}
		_arg = state;
		_r$22 = $clone(v, reflect.Value).Slice(0, $clone(v, reflect.Value).Len()); /* */ $s = 1; case 1: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
		_arg$1 = $clone(_r$22, reflect.Value);
		_arg$2 = length;
		_arg$3 = ovfl;
		_r$23 = decInt8Slice(_arg, _arg$1, _arg$2, _arg$3); /* */ $s = 2; case 2: if($c) { $c = false; _r$23 = _r$23.$blk(); } if (_r$23 && _r$23.$blk !== undefined) { break s; }
		$s = -1; return _r$23;
		/* */ } return; } if ($f === undefined) { $f = { $blk: decInt8Array }; } $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._arg$3 = _arg$3; $f._r$22 = _r$22; $f._r$23 = _r$23; $f.length = length; $f.ovfl = ovfl; $f.state = state; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	decInt8Slice = function(state, v, length, ovfl) {
		var _r$22, _r$23, _tuple, i, length, ok, ovfl, slice, state, v, x$2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$22 = $f._r$22; _r$23 = $f._r$23; _tuple = $f._tuple; i = $f.i; length = $f.length; ok = $f.ok; ovfl = $f.ovfl; slice = $f.slice; state = $f.state; v = $f.v; x$2 = $f.x$2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r$22 = $clone(v, reflect.Value).Interface(); /* */ $s = 1; case 1: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
		_tuple = $assertType(_r$22, sliceType$12, true);
		slice = _tuple[0];
		ok = _tuple[1];
		if (!ok) {
			$s = -1; return false;
		}
		i = 0;
		/* while (true) { */ case 2:
			/* if (!(i < length)) { break; } */ if(!(i < length)) { $s = 3; continue; }
			/* */ if (state.b.Len() === 0) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (state.b.Len() === 0) { */ case 4:
				$r = errorf("decoding int8 array or slice: length exceeds input size (%d elements)", new sliceType$1([new $Int(length)])); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 5:
			_r$23 = state.decodeInt(); /* */ $s = 7; case 7: if($c) { $c = false; _r$23 = _r$23.$blk(); } if (_r$23 && _r$23.$blk !== undefined) { break s; }
			x$2 = _r$23;
			if ((x$2.$high < -1 || (x$2.$high === -1 && x$2.$low < 4294967168)) || (0 < x$2.$high || (0 === x$2.$high && 127 < x$2.$low))) {
				error_(ovfl);
			}
			((i < 0 || i >= slice.$length) ? ($throwRuntimeError("index out of range"), undefined) : slice.$array[slice.$offset + i] = (((x$2.$low + ((x$2.$high >> 31) * 4294967296)) << 24 >> 24)));
			i = i + (1) >> 0;
		/* } */ $s = 2; continue; case 3:
		$s = -1; return true;
		/* */ } return; } if ($f === undefined) { $f = { $blk: decInt8Slice }; } $f._r$22 = _r$22; $f._r$23 = _r$23; $f._tuple = _tuple; $f.i = i; $f.length = length; $f.ok = ok; $f.ovfl = ovfl; $f.slice = slice; $f.state = state; $f.v = v; $f.x$2 = x$2; $f.$s = $s; $f.$r = $r; return $f;
	};
	decStringArray = function(state, v, length, ovfl) {
		var _arg, _arg$1, _arg$2, _arg$3, _r$22, _r$23, length, ovfl, state, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _arg$3 = $f._arg$3; _r$22 = $f._r$22; _r$23 = $f._r$23; length = $f.length; ovfl = $f.ovfl; state = $f.state; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		if (!$clone(v, reflect.Value).CanAddr()) {
			$s = -1; return false;
		}
		_arg = state;
		_r$22 = $clone(v, reflect.Value).Slice(0, $clone(v, reflect.Value).Len()); /* */ $s = 1; case 1: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
		_arg$1 = $clone(_r$22, reflect.Value);
		_arg$2 = length;
		_arg$3 = ovfl;
		_r$23 = decStringSlice(_arg, _arg$1, _arg$2, _arg$3); /* */ $s = 2; case 2: if($c) { $c = false; _r$23 = _r$23.$blk(); } if (_r$23 && _r$23.$blk !== undefined) { break s; }
		$s = -1; return _r$23;
		/* */ } return; } if ($f === undefined) { $f = { $blk: decStringArray }; } $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._arg$3 = _arg$3; $f._r$22 = _r$22; $f._r$23 = _r$23; $f.length = length; $f.ovfl = ovfl; $f.state = state; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	decStringSlice = function(state, v, length, ovfl) {
		var _r$22, _r$23, _tuple, data, i, length, n, ok, ovfl, slice, state, u, v, x$2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$22 = $f._r$22; _r$23 = $f._r$23; _tuple = $f._tuple; data = $f.data; i = $f.i; length = $f.length; n = $f.n; ok = $f.ok; ovfl = $f.ovfl; slice = $f.slice; state = $f.state; u = $f.u; v = $f.v; x$2 = $f.x$2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r$22 = $clone(v, reflect.Value).Interface(); /* */ $s = 1; case 1: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
		_tuple = $assertType(_r$22, sliceType$13, true);
		slice = _tuple[0];
		ok = _tuple[1];
		if (!ok) {
			$s = -1; return false;
		}
		i = 0;
		/* while (true) { */ case 2:
			/* if (!(i < length)) { break; } */ if(!(i < length)) { $s = 3; continue; }
			/* */ if (state.b.Len() === 0) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (state.b.Len() === 0) { */ case 4:
				$r = errorf("decoding string array or slice: length exceeds input size (%d elements)", new sliceType$1([new $Int(length)])); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 5:
			_r$23 = state.decodeUint(); /* */ $s = 7; case 7: if($c) { $c = false; _r$23 = _r$23.$blk(); } if (_r$23 && _r$23.$blk !== undefined) { break s; }
			u = _r$23;
			n = ((u.$low >> 0));
			/* */ if (n < 0 || !((x$2 = (new $Uint64(0, n)), (x$2.$high === u.$high && x$2.$low === u.$low))) || n > state.b.Len()) { $s = 8; continue; }
			/* */ $s = 9; continue;
			/* if (n < 0 || !((x$2 = (new $Uint64(0, n)), (x$2.$high === u.$high && x$2.$low === u.$low))) || n > state.b.Len()) { */ case 8:
				$r = errorf("length of string exceeds input size (%d bytes)", new sliceType$1([u])); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 9:
			/* */ if (n > state.b.Len()) { $s = 11; continue; }
			/* */ $s = 12; continue;
			/* if (n > state.b.Len()) { */ case 11:
				$r = errorf("string data too long for buffer: %d", new sliceType$1([new $Int(n)])); /* */ $s = 13; case 13: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 12:
			data = state.b.Bytes();
			/* */ if (data.$length < n) { $s = 14; continue; }
			/* */ $s = 15; continue;
			/* if (data.$length < n) { */ case 14:
				$r = errorf("invalid string length %d: exceeds input size %d", new sliceType$1([new $Int(n), new $Int(data.$length)])); /* */ $s = 16; case 16: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 15:
			((i < 0 || i >= slice.$length) ? ($throwRuntimeError("index out of range"), undefined) : slice.$array[slice.$offset + i] = ($bytesToString($subslice(data, 0, n))));
			state.b.Drop(n);
			i = i + (1) >> 0;
		/* } */ $s = 2; continue; case 3:
		$s = -1; return true;
		/* */ } return; } if ($f === undefined) { $f = { $blk: decStringSlice }; } $f._r$22 = _r$22; $f._r$23 = _r$23; $f._tuple = _tuple; $f.data = data; $f.i = i; $f.length = length; $f.n = n; $f.ok = ok; $f.ovfl = ovfl; $f.slice = slice; $f.state = state; $f.u = u; $f.v = v; $f.x$2 = x$2; $f.$s = $s; $f.$r = $r; return $f;
	};
	decUintArray = function(state, v, length, ovfl) {
		var _arg, _arg$1, _arg$2, _arg$3, _r$22, _r$23, length, ovfl, state, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _arg$3 = $f._arg$3; _r$22 = $f._r$22; _r$23 = $f._r$23; length = $f.length; ovfl = $f.ovfl; state = $f.state; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		if (!$clone(v, reflect.Value).CanAddr()) {
			$s = -1; return false;
		}
		_arg = state;
		_r$22 = $clone(v, reflect.Value).Slice(0, $clone(v, reflect.Value).Len()); /* */ $s = 1; case 1: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
		_arg$1 = $clone(_r$22, reflect.Value);
		_arg$2 = length;
		_arg$3 = ovfl;
		_r$23 = decUintSlice(_arg, _arg$1, _arg$2, _arg$3); /* */ $s = 2; case 2: if($c) { $c = false; _r$23 = _r$23.$blk(); } if (_r$23 && _r$23.$blk !== undefined) { break s; }
		$s = -1; return _r$23;
		/* */ } return; } if ($f === undefined) { $f = { $blk: decUintArray }; } $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._arg$3 = _arg$3; $f._r$22 = _r$22; $f._r$23 = _r$23; $f.length = length; $f.ovfl = ovfl; $f.state = state; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	decUintSlice = function(state, v, length, ovfl) {
		var _r$22, _r$23, _tuple, i, length, ok, ovfl, slice, state, v, x$2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$22 = $f._r$22; _r$23 = $f._r$23; _tuple = $f._tuple; i = $f.i; length = $f.length; ok = $f.ok; ovfl = $f.ovfl; slice = $f.slice; state = $f.state; v = $f.v; x$2 = $f.x$2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r$22 = $clone(v, reflect.Value).Interface(); /* */ $s = 1; case 1: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
		_tuple = $assertType(_r$22, sliceType$14, true);
		slice = _tuple[0];
		ok = _tuple[1];
		if (!ok) {
			$s = -1; return false;
		}
		i = 0;
		/* while (true) { */ case 2:
			/* if (!(i < length)) { break; } */ if(!(i < length)) { $s = 3; continue; }
			/* */ if (state.b.Len() === 0) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (state.b.Len() === 0) { */ case 4:
				$r = errorf("decoding uint array or slice: length exceeds input size (%d elements)", new sliceType$1([new $Int(length)])); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 5:
			_r$23 = state.decodeUint(); /* */ $s = 7; case 7: if($c) { $c = false; _r$23 = _r$23.$blk(); } if (_r$23 && _r$23.$blk !== undefined) { break s; }
			x$2 = _r$23;
			((i < 0 || i >= slice.$length) ? ($throwRuntimeError("index out of range"), undefined) : slice.$array[slice.$offset + i] = ((x$2.$low >>> 0)));
			i = i + (1) >> 0;
		/* } */ $s = 2; continue; case 3:
		$s = -1; return true;
		/* */ } return; } if ($f === undefined) { $f = { $blk: decUintSlice }; } $f._r$22 = _r$22; $f._r$23 = _r$23; $f._tuple = _tuple; $f.i = i; $f.length = length; $f.ok = ok; $f.ovfl = ovfl; $f.slice = slice; $f.state = state; $f.v = v; $f.x$2 = x$2; $f.$s = $s; $f.$r = $r; return $f;
	};
	decUint16Array = function(state, v, length, ovfl) {
		var _arg, _arg$1, _arg$2, _arg$3, _r$22, _r$23, length, ovfl, state, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _arg$3 = $f._arg$3; _r$22 = $f._r$22; _r$23 = $f._r$23; length = $f.length; ovfl = $f.ovfl; state = $f.state; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		if (!$clone(v, reflect.Value).CanAddr()) {
			$s = -1; return false;
		}
		_arg = state;
		_r$22 = $clone(v, reflect.Value).Slice(0, $clone(v, reflect.Value).Len()); /* */ $s = 1; case 1: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
		_arg$1 = $clone(_r$22, reflect.Value);
		_arg$2 = length;
		_arg$3 = ovfl;
		_r$23 = decUint16Slice(_arg, _arg$1, _arg$2, _arg$3); /* */ $s = 2; case 2: if($c) { $c = false; _r$23 = _r$23.$blk(); } if (_r$23 && _r$23.$blk !== undefined) { break s; }
		$s = -1; return _r$23;
		/* */ } return; } if ($f === undefined) { $f = { $blk: decUint16Array }; } $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._arg$3 = _arg$3; $f._r$22 = _r$22; $f._r$23 = _r$23; $f.length = length; $f.ovfl = ovfl; $f.state = state; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	decUint16Slice = function(state, v, length, ovfl) {
		var _r$22, _r$23, _tuple, i, length, ok, ovfl, slice, state, v, x$2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$22 = $f._r$22; _r$23 = $f._r$23; _tuple = $f._tuple; i = $f.i; length = $f.length; ok = $f.ok; ovfl = $f.ovfl; slice = $f.slice; state = $f.state; v = $f.v; x$2 = $f.x$2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r$22 = $clone(v, reflect.Value).Interface(); /* */ $s = 1; case 1: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
		_tuple = $assertType(_r$22, sliceType$15, true);
		slice = _tuple[0];
		ok = _tuple[1];
		if (!ok) {
			$s = -1; return false;
		}
		i = 0;
		/* while (true) { */ case 2:
			/* if (!(i < length)) { break; } */ if(!(i < length)) { $s = 3; continue; }
			/* */ if (state.b.Len() === 0) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (state.b.Len() === 0) { */ case 4:
				$r = errorf("decoding uint16 array or slice: length exceeds input size (%d elements)", new sliceType$1([new $Int(length)])); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 5:
			_r$23 = state.decodeUint(); /* */ $s = 7; case 7: if($c) { $c = false; _r$23 = _r$23.$blk(); } if (_r$23 && _r$23.$blk !== undefined) { break s; }
			x$2 = _r$23;
			if ((0 < x$2.$high || (0 === x$2.$high && 65535 < x$2.$low))) {
				error_(ovfl);
			}
			((i < 0 || i >= slice.$length) ? ($throwRuntimeError("index out of range"), undefined) : slice.$array[slice.$offset + i] = ((x$2.$low << 16 >>> 16)));
			i = i + (1) >> 0;
		/* } */ $s = 2; continue; case 3:
		$s = -1; return true;
		/* */ } return; } if ($f === undefined) { $f = { $blk: decUint16Slice }; } $f._r$22 = _r$22; $f._r$23 = _r$23; $f._tuple = _tuple; $f.i = i; $f.length = length; $f.ok = ok; $f.ovfl = ovfl; $f.slice = slice; $f.state = state; $f.v = v; $f.x$2 = x$2; $f.$s = $s; $f.$r = $r; return $f;
	};
	decUint32Array = function(state, v, length, ovfl) {
		var _arg, _arg$1, _arg$2, _arg$3, _r$22, _r$23, length, ovfl, state, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _arg$3 = $f._arg$3; _r$22 = $f._r$22; _r$23 = $f._r$23; length = $f.length; ovfl = $f.ovfl; state = $f.state; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		if (!$clone(v, reflect.Value).CanAddr()) {
			$s = -1; return false;
		}
		_arg = state;
		_r$22 = $clone(v, reflect.Value).Slice(0, $clone(v, reflect.Value).Len()); /* */ $s = 1; case 1: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
		_arg$1 = $clone(_r$22, reflect.Value);
		_arg$2 = length;
		_arg$3 = ovfl;
		_r$23 = decUint32Slice(_arg, _arg$1, _arg$2, _arg$3); /* */ $s = 2; case 2: if($c) { $c = false; _r$23 = _r$23.$blk(); } if (_r$23 && _r$23.$blk !== undefined) { break s; }
		$s = -1; return _r$23;
		/* */ } return; } if ($f === undefined) { $f = { $blk: decUint32Array }; } $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._arg$3 = _arg$3; $f._r$22 = _r$22; $f._r$23 = _r$23; $f.length = length; $f.ovfl = ovfl; $f.state = state; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	decUint32Slice = function(state, v, length, ovfl) {
		var _r$22, _r$23, _tuple, i, length, ok, ovfl, slice, state, v, x$2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$22 = $f._r$22; _r$23 = $f._r$23; _tuple = $f._tuple; i = $f.i; length = $f.length; ok = $f.ok; ovfl = $f.ovfl; slice = $f.slice; state = $f.state; v = $f.v; x$2 = $f.x$2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r$22 = $clone(v, reflect.Value).Interface(); /* */ $s = 1; case 1: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
		_tuple = $assertType(_r$22, sliceType$16, true);
		slice = _tuple[0];
		ok = _tuple[1];
		if (!ok) {
			$s = -1; return false;
		}
		i = 0;
		/* while (true) { */ case 2:
			/* if (!(i < length)) { break; } */ if(!(i < length)) { $s = 3; continue; }
			/* */ if (state.b.Len() === 0) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (state.b.Len() === 0) { */ case 4:
				$r = errorf("decoding uint32 array or slice: length exceeds input size (%d elements)", new sliceType$1([new $Int(length)])); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 5:
			_r$23 = state.decodeUint(); /* */ $s = 7; case 7: if($c) { $c = false; _r$23 = _r$23.$blk(); } if (_r$23 && _r$23.$blk !== undefined) { break s; }
			x$2 = _r$23;
			if ((0 < x$2.$high || (0 === x$2.$high && 4294967295 < x$2.$low))) {
				error_(ovfl);
			}
			((i < 0 || i >= slice.$length) ? ($throwRuntimeError("index out of range"), undefined) : slice.$array[slice.$offset + i] = ((x$2.$low >>> 0)));
			i = i + (1) >> 0;
		/* } */ $s = 2; continue; case 3:
		$s = -1; return true;
		/* */ } return; } if ($f === undefined) { $f = { $blk: decUint32Slice }; } $f._r$22 = _r$22; $f._r$23 = _r$23; $f._tuple = _tuple; $f.i = i; $f.length = length; $f.ok = ok; $f.ovfl = ovfl; $f.slice = slice; $f.state = state; $f.v = v; $f.x$2 = x$2; $f.$s = $s; $f.$r = $r; return $f;
	};
	decUint64Array = function(state, v, length, ovfl) {
		var _arg, _arg$1, _arg$2, _arg$3, _r$22, _r$23, length, ovfl, state, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _arg$3 = $f._arg$3; _r$22 = $f._r$22; _r$23 = $f._r$23; length = $f.length; ovfl = $f.ovfl; state = $f.state; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		if (!$clone(v, reflect.Value).CanAddr()) {
			$s = -1; return false;
		}
		_arg = state;
		_r$22 = $clone(v, reflect.Value).Slice(0, $clone(v, reflect.Value).Len()); /* */ $s = 1; case 1: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
		_arg$1 = $clone(_r$22, reflect.Value);
		_arg$2 = length;
		_arg$3 = ovfl;
		_r$23 = decUint64Slice(_arg, _arg$1, _arg$2, _arg$3); /* */ $s = 2; case 2: if($c) { $c = false; _r$23 = _r$23.$blk(); } if (_r$23 && _r$23.$blk !== undefined) { break s; }
		$s = -1; return _r$23;
		/* */ } return; } if ($f === undefined) { $f = { $blk: decUint64Array }; } $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._arg$3 = _arg$3; $f._r$22 = _r$22; $f._r$23 = _r$23; $f.length = length; $f.ovfl = ovfl; $f.state = state; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	decUint64Slice = function(state, v, length, ovfl) {
		var _r$22, _r$23, _tuple, i, length, ok, ovfl, slice, state, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$22 = $f._r$22; _r$23 = $f._r$23; _tuple = $f._tuple; i = $f.i; length = $f.length; ok = $f.ok; ovfl = $f.ovfl; slice = $f.slice; state = $f.state; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r$22 = $clone(v, reflect.Value).Interface(); /* */ $s = 1; case 1: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
		_tuple = $assertType(_r$22, sliceType$17, true);
		slice = _tuple[0];
		ok = _tuple[1];
		if (!ok) {
			$s = -1; return false;
		}
		i = 0;
		/* while (true) { */ case 2:
			/* if (!(i < length)) { break; } */ if(!(i < length)) { $s = 3; continue; }
			/* */ if (state.b.Len() === 0) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (state.b.Len() === 0) { */ case 4:
				$r = errorf("decoding uint64 array or slice: length exceeds input size (%d elements)", new sliceType$1([new $Int(length)])); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 5:
			_r$23 = state.decodeUint(); /* */ $s = 7; case 7: if($c) { $c = false; _r$23 = _r$23.$blk(); } if (_r$23 && _r$23.$blk !== undefined) { break s; }
			((i < 0 || i >= slice.$length) ? ($throwRuntimeError("index out of range"), undefined) : slice.$array[slice.$offset + i] = _r$23);
			i = i + (1) >> 0;
		/* } */ $s = 2; continue; case 3:
		$s = -1; return true;
		/* */ } return; } if ($f === undefined) { $f = { $blk: decUint64Slice }; } $f._r$22 = _r$22; $f._r$23 = _r$23; $f._tuple = _tuple; $f.i = i; $f.length = length; $f.ok = ok; $f.ovfl = ovfl; $f.slice = slice; $f.state = state; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	decUintptrArray = function(state, v, length, ovfl) {
		var _arg, _arg$1, _arg$2, _arg$3, _r$22, _r$23, length, ovfl, state, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _arg$3 = $f._arg$3; _r$22 = $f._r$22; _r$23 = $f._r$23; length = $f.length; ovfl = $f.ovfl; state = $f.state; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		if (!$clone(v, reflect.Value).CanAddr()) {
			$s = -1; return false;
		}
		_arg = state;
		_r$22 = $clone(v, reflect.Value).Slice(0, $clone(v, reflect.Value).Len()); /* */ $s = 1; case 1: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
		_arg$1 = $clone(_r$22, reflect.Value);
		_arg$2 = length;
		_arg$3 = ovfl;
		_r$23 = decUintptrSlice(_arg, _arg$1, _arg$2, _arg$3); /* */ $s = 2; case 2: if($c) { $c = false; _r$23 = _r$23.$blk(); } if (_r$23 && _r$23.$blk !== undefined) { break s; }
		$s = -1; return _r$23;
		/* */ } return; } if ($f === undefined) { $f = { $blk: decUintptrArray }; } $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._arg$3 = _arg$3; $f._r$22 = _r$22; $f._r$23 = _r$23; $f.length = length; $f.ovfl = ovfl; $f.state = state; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	decUintptrSlice = function(state, v, length, ovfl) {
		var _r$22, _r$23, _tuple, i, length, ok, ovfl, slice, state, v, x$2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$22 = $f._r$22; _r$23 = $f._r$23; _tuple = $f._tuple; i = $f.i; length = $f.length; ok = $f.ok; ovfl = $f.ovfl; slice = $f.slice; state = $f.state; v = $f.v; x$2 = $f.x$2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r$22 = $clone(v, reflect.Value).Interface(); /* */ $s = 1; case 1: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
		_tuple = $assertType(_r$22, sliceType$18, true);
		slice = _tuple[0];
		ok = _tuple[1];
		if (!ok) {
			$s = -1; return false;
		}
		i = 0;
		/* while (true) { */ case 2:
			/* if (!(i < length)) { break; } */ if(!(i < length)) { $s = 3; continue; }
			/* */ if (state.b.Len() === 0) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (state.b.Len() === 0) { */ case 4:
				$r = errorf("decoding uintptr array or slice: length exceeds input size (%d elements)", new sliceType$1([new $Int(length)])); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 5:
			_r$23 = state.decodeUint(); /* */ $s = 7; case 7: if($c) { $c = false; _r$23 = _r$23.$blk(); } if (_r$23 && _r$23.$blk !== undefined) { break s; }
			x$2 = _r$23;
			if ((0 < x$2.$high || (0 === x$2.$high && 4294967295 < x$2.$low))) {
				error_(ovfl);
			}
			((i < 0 || i >= slice.$length) ? ($throwRuntimeError("index out of range"), undefined) : slice.$array[slice.$offset + i] = ((x$2.$low >>> 0)));
			i = i + (1) >> 0;
		/* } */ $s = 2; continue; case 3:
		$s = -1; return true;
		/* */ } return; } if ($f === undefined) { $f = { $blk: decUintptrSlice }; } $f._r$22 = _r$22; $f._r$23 = _r$23; $f._tuple = _tuple; $f.i = i; $f.length = length; $f.ok = ok; $f.ovfl = ovfl; $f.slice = slice; $f.state = state; $f.v = v; $f.x$2 = x$2; $f.$s = $s; $f.$r = $r; return $f;
	};
	decBuffer.ptr.prototype.Read = function(p) {
		var d, n, p;
		d = this;
		n = $copySlice(p, $subslice(d.data, d.offset));
		if ((n === 0) && !((p.$length === 0))) {
			return [0, io.EOF];
		}
		d.offset = d.offset + (n) >> 0;
		return [n, $ifaceNil];
	};
	decBuffer.prototype.Read = function(p) { return this.$val.Read(p); };
	decBuffer.ptr.prototype.Drop = function(n) {
		var d, n;
		d = this;
		if (n > d.Len()) {
			$panic(new $String("drop"));
		}
		d.offset = d.offset + (n) >> 0;
	};
	decBuffer.prototype.Drop = function(n) { return this.$val.Drop(n); };
	decBuffer.ptr.prototype.Size = function(n) {
		var d, n;
		d = this;
		d.Reset();
		if (d.data.$capacity < n) {
			d.data = $makeSlice(sliceType$2, n);
		} else {
			d.data = $subslice(d.data, 0, n);
		}
	};
	decBuffer.prototype.Size = function(n) { return this.$val.Size(n); };
	decBuffer.ptr.prototype.ReadByte = function() {
		var c, d, x$2, x$3;
		d = this;
		if (d.offset >= d.data.$length) {
			return [0, io.EOF];
		}
		c = (x$2 = d.data, x$3 = d.offset, ((x$3 < 0 || x$3 >= x$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + x$3]));
		d.offset = d.offset + (1) >> 0;
		return [c, $ifaceNil];
	};
	decBuffer.prototype.ReadByte = function() { return this.$val.ReadByte(); };
	decBuffer.ptr.prototype.Len = function() {
		var d;
		d = this;
		return d.data.$length - d.offset >> 0;
	};
	decBuffer.prototype.Len = function() { return this.$val.Len(); };
	decBuffer.ptr.prototype.Bytes = function() {
		var d;
		d = this;
		return $subslice(d.data, d.offset);
	};
	decBuffer.prototype.Bytes = function() { return this.$val.Bytes(); };
	decBuffer.ptr.prototype.Reset = function() {
		var d;
		d = this;
		d.data = $subslice(d.data, 0, 0);
		d.offset = 0;
	};
	decBuffer.prototype.Reset = function() { return this.$val.Reset(); };
	Decoder.ptr.prototype.newDecoderState = function(buf) {
		var buf, d, dec;
		dec = this;
		d = dec.freeList;
		if (d === ptrType$28.nil) {
			d = new decoderState.ptr(ptrType$29.nil, ptrType$30.nil, 0, ptrType$28.nil);
			d.dec = dec;
		} else {
			dec.freeList = d.next;
		}
		d.b = buf;
		return d;
	};
	Decoder.prototype.newDecoderState = function(buf) { return this.$val.newDecoderState(buf); };
	Decoder.ptr.prototype.freeDecoderState = function(d) {
		var d, dec;
		dec = this;
		d.next = dec.freeList;
		dec.freeList = d;
	};
	Decoder.prototype.freeDecoderState = function(d) { return this.$val.freeDecoderState(d); };
	overflow = function(name) {
		var name;
		return errors.New("value for \"" + name + "\" out of range");
	};
	decodeUintReader = function(r, buf) {
		var _i, _r$22, _r$23, _ref, _tmp, _tmp$1, _tmp$2, _tuple, _tuple$1, b, b$1, buf, err, n, r, width, x$2, x$3, x$4, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _r$22 = $f._r$22; _r$23 = $f._r$23; _ref = $f._ref; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; b = $f.b; b$1 = $f.b$1; buf = $f.buf; err = $f.err; n = $f.n; r = $f.r; width = $f.width; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		x$2 = new $Uint64(0, 0);
		width = 0;
		err = $ifaceNil;
		width = 1;
		_r$22 = io.ReadFull(r, $subslice(buf, 0, width)); /* */ $s = 1; case 1: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
		_tuple = _r$22;
		n = _tuple[0];
		err = _tuple[1];
		if (n === 0) {
			$s = -1; return [x$2, width, err];
		}
		b = (0 >= buf.$length ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + 0]);
		if (b <= 127) {
			_tmp = (new $Uint64(0, b));
			_tmp$1 = width;
			_tmp$2 = $ifaceNil;
			x$2 = _tmp;
			width = _tmp$1;
			err = _tmp$2;
			$s = -1; return [x$2, width, err];
		}
		n = -((((b << 24 >> 24)) >> 0));
		if (n > 8) {
			err = errBadUint;
			$s = -1; return [x$2, width, err];
		}
		_r$23 = io.ReadFull(r, $subslice(buf, 0, n)); /* */ $s = 2; case 2: if($c) { $c = false; _r$23 = _r$23.$blk(); } if (_r$23 && _r$23.$blk !== undefined) { break s; }
		_tuple$1 = _r$23;
		width = _tuple$1[0];
		err = _tuple$1[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			if ($interfaceIsEqual(err, io.EOF)) {
				err = io.ErrUnexpectedEOF;
			}
			$s = -1; return [x$2, width, err];
		}
		_ref = $subslice(buf, 0, width);
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			b$1 = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			x$2 = (x$3 = $shiftLeft64(x$2, 8), x$4 = (new $Uint64(0, b$1)), new $Uint64(x$3.$high | x$4.$high, (x$3.$low | x$4.$low) >>> 0));
			_i++;
		}
		width = width + (1) >> 0;
		$s = -1; return [x$2, width, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: decodeUintReader }; } $f._i = _i; $f._r$22 = _r$22; $f._r$23 = _r$23; $f._ref = _ref; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.b = b; $f.b$1 = b$1; $f.buf = buf; $f.err = err; $f.n = n; $f.r = r; $f.width = width; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.$s = $s; $f.$r = $r; return $f;
	};
	decoderState.ptr.prototype.decodeUint = function() {
		var _i, _ref, _tuple, b, b$1, buf, err, n, state, x$2, x$3, x$4, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _ref = $f._ref; _tuple = $f._tuple; b = $f.b; b$1 = $f.b$1; buf = $f.buf; err = $f.err; n = $f.n; state = $f.state; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		x$2 = new $Uint64(0, 0);
		state = this;
		_tuple = state.b.ReadByte();
		b = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			error_(err);
		}
		if (b <= 127) {
			x$2 = (new $Uint64(0, b));
			$s = -1; return x$2;
		}
		n = -((((b << 24 >> 24)) >> 0));
		if (n > 8) {
			error_(errBadUint);
		}
		buf = state.b.Bytes();
		/* */ if (buf.$length < n) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (buf.$length < n) { */ case 1:
			$r = errorf("invalid uint data length %d: exceeds input size %d", new sliceType$1([new $Int(n), new $Int(buf.$length)])); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 2:
		_ref = $subslice(buf, 0, n);
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			b$1 = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			x$2 = (x$3 = $shiftLeft64(x$2, 8), x$4 = (new $Uint64(0, b$1)), new $Uint64(x$3.$high | x$4.$high, (x$3.$low | x$4.$low) >>> 0));
			_i++;
		}
		state.b.Drop(n);
		x$2 = x$2;
		$s = -1; return x$2;
		/* */ } return; } if ($f === undefined) { $f = { $blk: decoderState.ptr.prototype.decodeUint }; } $f._i = _i; $f._ref = _ref; $f._tuple = _tuple; $f.b = b; $f.b$1 = b$1; $f.buf = buf; $f.err = err; $f.n = n; $f.state = state; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.$s = $s; $f.$r = $r; return $f;
	};
	decoderState.prototype.decodeUint = function() { return this.$val.decodeUint(); };
	decoderState.ptr.prototype.decodeInt = function() {
		var _r$22, state, x$2, x$3, x$4, x$5, x$6, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$22 = $f._r$22; state = $f.state; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; x$6 = $f.x$6; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		state = this;
		_r$22 = state.decodeUint(); /* */ $s = 1; case 1: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
		x$2 = _r$22;
		if (!((x$3 = new $Uint64(x$2.$high & 0, (x$2.$low & 1) >>> 0), (x$3.$high === 0 && x$3.$low === 0)))) {
			$s = -1; return (x$4 = ((x$5 = $shiftRightUint64(x$2, 1), new $Int64(x$5.$high, x$5.$low))), new $Int64(~x$4.$high, ~x$4.$low >>> 0));
		}
		$s = -1; return ((x$6 = $shiftRightUint64(x$2, 1), new $Int64(x$6.$high, x$6.$low)));
		/* */ } return; } if ($f === undefined) { $f = { $blk: decoderState.ptr.prototype.decodeInt }; } $f._r$22 = _r$22; $f.state = state; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.x$6 = x$6; $f.$s = $s; $f.$r = $r; return $f;
	};
	decoderState.prototype.decodeInt = function() { return this.$val.decodeInt(); };
	decoderState.ptr.prototype.getLength = function() {
		var _r$22, n, state, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$22 = $f._r$22; n = $f.n; state = $f.state; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		state = this;
		_r$22 = state.decodeUint(); /* */ $s = 1; case 1: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
		n = ((_r$22.$low >> 0));
		if (n < 0 || state.b.Len() < n || 1073741824 <= n) {
			$s = -1; return [0, false];
		}
		$s = -1; return [n, true];
		/* */ } return; } if ($f === undefined) { $f = { $blk: decoderState.ptr.prototype.getLength }; } $f._r$22 = _r$22; $f.n = n; $f.state = state; $f.$s = $s; $f.$r = $r; return $f;
	};
	decoderState.prototype.getLength = function() { return this.$val.getLength(); };
	ignoreUint = function(i, state, v) {
		var _r$22, i, state, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$22 = $f._r$22; i = $f.i; state = $f.state; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r$22 = state.decodeUint(); /* */ $s = 1; case 1: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
		_r$22;
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: ignoreUint }; } $f._r$22 = _r$22; $f.i = i; $f.state = state; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	ignoreTwoUints = function(i, state, v) {
		var _r$22, _r$23, i, state, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$22 = $f._r$22; _r$23 = $f._r$23; i = $f.i; state = $f.state; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r$22 = state.decodeUint(); /* */ $s = 1; case 1: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
		_r$22;
		_r$23 = state.decodeUint(); /* */ $s = 2; case 2: if($c) { $c = false; _r$23 = _r$23.$blk(); } if (_r$23 && _r$23.$blk !== undefined) { break s; }
		_r$23;
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: ignoreTwoUints }; } $f._r$22 = _r$22; $f._r$23 = _r$23; $f.i = i; $f.state = state; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	decAlloc = function(v) {
		var _r$22, _r$23, _r$24, _r$25, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$22 = $f._r$22; _r$23 = $f._r$23; _r$24 = $f._r$24; _r$25 = $f._r$25; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		/* while (true) { */ case 1:
			/* if (!($clone(v, reflect.Value).Kind() === 22)) { break; } */ if(!($clone(v, reflect.Value).Kind() === 22)) { $s = 2; continue; }
			/* */ if ($clone(v, reflect.Value).IsNil()) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if ($clone(v, reflect.Value).IsNil()) { */ case 3:
				_r$22 = $clone(v, reflect.Value).Type(); /* */ $s = 5; case 5: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
				_r$23 = _r$22.Elem(); /* */ $s = 6; case 6: if($c) { $c = false; _r$23 = _r$23.$blk(); } if (_r$23 && _r$23.$blk !== undefined) { break s; }
				_r$24 = reflect.New(_r$23); /* */ $s = 7; case 7: if($c) { $c = false; _r$24 = _r$24.$blk(); } if (_r$24 && _r$24.$blk !== undefined) { break s; }
				$r = $clone(v, reflect.Value).Set($clone(_r$24, reflect.Value)); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 4:
			_r$25 = $clone(v, reflect.Value).Elem(); /* */ $s = 9; case 9: if($c) { $c = false; _r$25 = _r$25.$blk(); } if (_r$25 && _r$25.$blk !== undefined) { break s; }
			v = _r$25;
		/* } */ $s = 1; continue; case 2:
		$s = -1; return v;
		/* */ } return; } if ($f === undefined) { $f = { $blk: decAlloc }; } $f._r$22 = _r$22; $f._r$23 = _r$23; $f._r$24 = _r$24; $f._r$25 = _r$25; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	decBool = function(i, state, value) {
		var _r$22, i, state, value, x$2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$22 = $f._r$22; i = $f.i; state = $f.state; value = $f.value; x$2 = $f.x$2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r$22 = state.decodeUint(); /* */ $s = 1; case 1: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
		$r = $clone(value, reflect.Value).SetBool(!((x$2 = _r$22, (x$2.$high === 0 && x$2.$low === 0)))); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: decBool }; } $f._r$22 = _r$22; $f.i = i; $f.state = state; $f.value = value; $f.x$2 = x$2; $f.$s = $s; $f.$r = $r; return $f;
	};
	decInt8 = function(i, state, value) {
		var _r$22, i, state, v, value, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$22 = $f._r$22; i = $f.i; state = $f.state; v = $f.v; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r$22 = state.decodeInt(); /* */ $s = 1; case 1: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
		v = _r$22;
		if ((v.$high < -1 || (v.$high === -1 && v.$low < 4294967168)) || (0 < v.$high || (0 === v.$high && 127 < v.$low))) {
			error_(i.ovfl);
		}
		$clone(value, reflect.Value).SetInt(v);
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: decInt8 }; } $f._r$22 = _r$22; $f.i = i; $f.state = state; $f.v = v; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;
	};
	decUint8 = function(i, state, value) {
		var _r$22, i, state, v, value, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$22 = $f._r$22; i = $f.i; state = $f.state; v = $f.v; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r$22 = state.decodeUint(); /* */ $s = 1; case 1: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
		v = _r$22;
		if ((0 < v.$high || (0 === v.$high && 255 < v.$low))) {
			error_(i.ovfl);
		}
		$clone(value, reflect.Value).SetUint(v);
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: decUint8 }; } $f._r$22 = _r$22; $f.i = i; $f.state = state; $f.v = v; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;
	};
	decInt16 = function(i, state, value) {
		var _r$22, i, state, v, value, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$22 = $f._r$22; i = $f.i; state = $f.state; v = $f.v; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r$22 = state.decodeInt(); /* */ $s = 1; case 1: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
		v = _r$22;
		if ((v.$high < -1 || (v.$high === -1 && v.$low < 4294934528)) || (0 < v.$high || (0 === v.$high && 32767 < v.$low))) {
			error_(i.ovfl);
		}
		$clone(value, reflect.Value).SetInt(v);
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: decInt16 }; } $f._r$22 = _r$22; $f.i = i; $f.state = state; $f.v = v; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;
	};
	decUint16 = function(i, state, value) {
		var _r$22, i, state, v, value, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$22 = $f._r$22; i = $f.i; state = $f.state; v = $f.v; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r$22 = state.decodeUint(); /* */ $s = 1; case 1: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
		v = _r$22;
		if ((0 < v.$high || (0 === v.$high && 65535 < v.$low))) {
			error_(i.ovfl);
		}
		$clone(value, reflect.Value).SetUint(v);
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: decUint16 }; } $f._r$22 = _r$22; $f.i = i; $f.state = state; $f.v = v; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;
	};
	decInt32 = function(i, state, value) {
		var _r$22, i, state, v, value, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$22 = $f._r$22; i = $f.i; state = $f.state; v = $f.v; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r$22 = state.decodeInt(); /* */ $s = 1; case 1: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
		v = _r$22;
		if ((v.$high < -1 || (v.$high === -1 && v.$low < 2147483648)) || (0 < v.$high || (0 === v.$high && 2147483647 < v.$low))) {
			error_(i.ovfl);
		}
		$clone(value, reflect.Value).SetInt(v);
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: decInt32 }; } $f._r$22 = _r$22; $f.i = i; $f.state = state; $f.v = v; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;
	};
	decUint32 = function(i, state, value) {
		var _r$22, i, state, v, value, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$22 = $f._r$22; i = $f.i; state = $f.state; v = $f.v; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r$22 = state.decodeUint(); /* */ $s = 1; case 1: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
		v = _r$22;
		if ((0 < v.$high || (0 === v.$high && 4294967295 < v.$low))) {
			error_(i.ovfl);
		}
		$clone(value, reflect.Value).SetUint(v);
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: decUint32 }; } $f._r$22 = _r$22; $f.i = i; $f.state = state; $f.v = v; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;
	};
	decInt64 = function(i, state, value) {
		var _r$22, i, state, v, value, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$22 = $f._r$22; i = $f.i; state = $f.state; v = $f.v; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r$22 = state.decodeInt(); /* */ $s = 1; case 1: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
		v = _r$22;
		$clone(value, reflect.Value).SetInt(v);
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: decInt64 }; } $f._r$22 = _r$22; $f.i = i; $f.state = state; $f.v = v; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;
	};
	decUint64 = function(i, state, value) {
		var _r$22, i, state, v, value, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$22 = $f._r$22; i = $f.i; state = $f.state; v = $f.v; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r$22 = state.decodeUint(); /* */ $s = 1; case 1: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
		v = _r$22;
		$clone(value, reflect.Value).SetUint(v);
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: decUint64 }; } $f._r$22 = _r$22; $f.i = i; $f.state = state; $f.v = v; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;
	};
	float64FromBits = function(u) {
		var u, v;
		v = bits.ReverseBytes64(u);
		return math.Float64frombits(v);
	};
	float32FromBits = function(u, ovfl) {
		var av, ovfl, u, v;
		v = float64FromBits(u);
		av = v;
		if (av < 0) {
			av = -av;
		}
		if (3.4028234663852886e+38 < av && av <= 1.7976931348623157e+308) {
			error_(ovfl);
		}
		return v;
	};
	decFloat32 = function(i, state, value) {
		var _r$22, _r$23, i, state, value, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$22 = $f._r$22; _r$23 = $f._r$23; i = $f.i; state = $f.state; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r$22 = state.decodeUint(); /* */ $s = 1; case 1: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
		_r$23 = float32FromBits(_r$22, i.ovfl); /* */ $s = 2; case 2: if($c) { $c = false; _r$23 = _r$23.$blk(); } if (_r$23 && _r$23.$blk !== undefined) { break s; }
		$r = $clone(value, reflect.Value).SetFloat(_r$23); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: decFloat32 }; } $f._r$22 = _r$22; $f._r$23 = _r$23; $f.i = i; $f.state = state; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;
	};
	decFloat64 = function(i, state, value) {
		var _r$22, _r$23, i, state, value, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$22 = $f._r$22; _r$23 = $f._r$23; i = $f.i; state = $f.state; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r$22 = state.decodeUint(); /* */ $s = 1; case 1: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
		_r$23 = float64FromBits(_r$22); /* */ $s = 2; case 2: if($c) { $c = false; _r$23 = _r$23.$blk(); } if (_r$23 && _r$23.$blk !== undefined) { break s; }
		$r = $clone(value, reflect.Value).SetFloat(_r$23); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: decFloat64 }; } $f._r$22 = _r$22; $f._r$23 = _r$23; $f.i = i; $f.state = state; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;
	};
	decComplex64 = function(i, state, value) {
		var _r$22, _r$23, _r$24, _r$25, i, imag, real, state, value, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$22 = $f._r$22; _r$23 = $f._r$23; _r$24 = $f._r$24; _r$25 = $f._r$25; i = $f.i; imag = $f.imag; real = $f.real; state = $f.state; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r$22 = state.decodeUint(); /* */ $s = 1; case 1: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
		_r$23 = float32FromBits(_r$22, i.ovfl); /* */ $s = 2; case 2: if($c) { $c = false; _r$23 = _r$23.$blk(); } if (_r$23 && _r$23.$blk !== undefined) { break s; }
		real = _r$23;
		_r$24 = state.decodeUint(); /* */ $s = 3; case 3: if($c) { $c = false; _r$24 = _r$24.$blk(); } if (_r$24 && _r$24.$blk !== undefined) { break s; }
		_r$25 = float32FromBits(_r$24, i.ovfl); /* */ $s = 4; case 4: if($c) { $c = false; _r$25 = _r$25.$blk(); } if (_r$25 && _r$25.$blk !== undefined) { break s; }
		imag = _r$25;
		$clone(value, reflect.Value).SetComplex(new $Complex128(real, imag));
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: decComplex64 }; } $f._r$22 = _r$22; $f._r$23 = _r$23; $f._r$24 = _r$24; $f._r$25 = _r$25; $f.i = i; $f.imag = imag; $f.real = real; $f.state = state; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;
	};
	decComplex128 = function(i, state, value) {
		var _r$22, _r$23, _r$24, _r$25, i, imag, real, state, value, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$22 = $f._r$22; _r$23 = $f._r$23; _r$24 = $f._r$24; _r$25 = $f._r$25; i = $f.i; imag = $f.imag; real = $f.real; state = $f.state; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r$22 = state.decodeUint(); /* */ $s = 1; case 1: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
		_r$23 = float64FromBits(_r$22); /* */ $s = 2; case 2: if($c) { $c = false; _r$23 = _r$23.$blk(); } if (_r$23 && _r$23.$blk !== undefined) { break s; }
		real = _r$23;
		_r$24 = state.decodeUint(); /* */ $s = 3; case 3: if($c) { $c = false; _r$24 = _r$24.$blk(); } if (_r$24 && _r$24.$blk !== undefined) { break s; }
		_r$25 = float64FromBits(_r$24); /* */ $s = 4; case 4: if($c) { $c = false; _r$25 = _r$25.$blk(); } if (_r$25 && _r$25.$blk !== undefined) { break s; }
		imag = _r$25;
		$clone(value, reflect.Value).SetComplex(new $Complex128(real, imag));
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: decComplex128 }; } $f._r$22 = _r$22; $f._r$23 = _r$23; $f._r$24 = _r$24; $f._r$25 = _r$25; $f.i = i; $f.imag = imag; $f.real = real; $f.state = state; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;
	};
	decUint8Slice = function(i, state, value) {
		var _arg, _arg$1, _r$22, _r$23, _r$24, _r$25, _r$26, _r$27, _r$28, _tuple, _tuple$1, err, i, n, ok, state, value, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _arg = $f._arg; _arg$1 = $f._arg$1; _r$22 = $f._r$22; _r$23 = $f._r$23; _r$24 = $f._r$24; _r$25 = $f._r$25; _r$26 = $f._r$26; _r$27 = $f._r$27; _r$28 = $f._r$28; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; err = $f.err; i = $f.i; n = $f.n; ok = $f.ok; state = $f.state; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r$22 = state.getLength(); /* */ $s = 1; case 1: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
		_tuple = _r$22;
		n = _tuple[0];
		ok = _tuple[1];
		/* */ if (!ok) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!ok) { */ case 2:
			_r$23 = $clone(value, reflect.Value).Type(); /* */ $s = 4; case 4: if($c) { $c = false; _r$23 = _r$23.$blk(); } if (_r$23 && _r$23.$blk !== undefined) { break s; }
			_arg = _r$23;
			_arg$1 = new $Int(n);
			$r = errorf("bad %s slice length: %d", new sliceType$1([_arg, _arg$1])); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 3:
		/* */ if ($clone(value, reflect.Value).Cap() < n) { $s = 6; continue; }
		/* */ $s = 7; continue;
		/* if ($clone(value, reflect.Value).Cap() < n) { */ case 6:
			_r$24 = $clone(value, reflect.Value).Type(); /* */ $s = 9; case 9: if($c) { $c = false; _r$24 = _r$24.$blk(); } if (_r$24 && _r$24.$blk !== undefined) { break s; }
			_r$25 = reflect.MakeSlice(_r$24, n, n); /* */ $s = 10; case 10: if($c) { $c = false; _r$25 = _r$25.$blk(); } if (_r$25 && _r$25.$blk !== undefined) { break s; }
			$r = $clone(value, reflect.Value).Set($clone(_r$25, reflect.Value)); /* */ $s = 11; case 11: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 8; continue;
		/* } else { */ case 7:
			_r$26 = $clone(value, reflect.Value).Slice(0, n); /* */ $s = 12; case 12: if($c) { $c = false; _r$26 = _r$26.$blk(); } if (_r$26 && _r$26.$blk !== undefined) { break s; }
			$r = $clone(value, reflect.Value).Set($clone(_r$26, reflect.Value)); /* */ $s = 13; case 13: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 8:
		_r$27 = $clone(value, reflect.Value).Bytes(); /* */ $s = 14; case 14: if($c) { $c = false; _r$27 = _r$27.$blk(); } if (_r$27 && _r$27.$blk !== undefined) { break s; }
		_r$28 = state.b.Read(_r$27); /* */ $s = 15; case 15: if($c) { $c = false; _r$28 = _r$28.$blk(); } if (_r$28 && _r$28.$blk !== undefined) { break s; }
		_tuple$1 = _r$28;
		err = _tuple$1[1];
		/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 16; continue; }
		/* */ $s = 17; continue;
		/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 16:
			$r = errorf("error decoding []byte: %s", new sliceType$1([err])); /* */ $s = 18; case 18: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 17:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: decUint8Slice }; } $f._arg = _arg; $f._arg$1 = _arg$1; $f._r$22 = _r$22; $f._r$23 = _r$23; $f._r$24 = _r$24; $f._r$25 = _r$25; $f._r$26 = _r$26; $f._r$27 = _r$27; $f._r$28 = _r$28; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.err = err; $f.i = i; $f.n = n; $f.ok = ok; $f.state = state; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;
	};
	decString = function(i, state, value) {
		var _arg, _arg$1, _r$22, _r$23, _tuple, data, i, n, ok, s, state, value, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _arg = $f._arg; _arg$1 = $f._arg$1; _r$22 = $f._r$22; _r$23 = $f._r$23; _tuple = $f._tuple; data = $f.data; i = $f.i; n = $f.n; ok = $f.ok; s = $f.s; state = $f.state; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r$22 = state.getLength(); /* */ $s = 1; case 1: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
		_tuple = _r$22;
		n = _tuple[0];
		ok = _tuple[1];
		/* */ if (!ok) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!ok) { */ case 2:
			_r$23 = $clone(value, reflect.Value).Type(); /* */ $s = 4; case 4: if($c) { $c = false; _r$23 = _r$23.$blk(); } if (_r$23 && _r$23.$blk !== undefined) { break s; }
			_arg = _r$23;
			_arg$1 = new $Int(n);
			$r = errorf("bad %s slice length: %d", new sliceType$1([_arg, _arg$1])); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 3:
		data = state.b.Bytes();
		/* */ if (data.$length < n) { $s = 6; continue; }
		/* */ $s = 7; continue;
		/* if (data.$length < n) { */ case 6:
			$r = errorf("invalid string length %d: exceeds input size %d", new sliceType$1([new $Int(n), new $Int(data.$length)])); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 7:
		s = ($bytesToString($subslice(data, 0, n)));
		state.b.Drop(n);
		$clone(value, reflect.Value).SetString(s);
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: decString }; } $f._arg = _arg; $f._arg$1 = _arg$1; $f._r$22 = _r$22; $f._r$23 = _r$23; $f._tuple = _tuple; $f.data = data; $f.i = i; $f.n = n; $f.ok = ok; $f.s = s; $f.state = state; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;
	};
	ignoreUint8Array = function(i, state, value) {
		var _r$22, _tuple, bn, i, n, ok, state, value, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$22 = $f._r$22; _tuple = $f._tuple; bn = $f.bn; i = $f.i; n = $f.n; ok = $f.ok; state = $f.state; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r$22 = state.getLength(); /* */ $s = 1; case 1: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
		_tuple = _r$22;
		n = _tuple[0];
		ok = _tuple[1];
		/* */ if (!ok) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!ok) { */ case 2:
			$r = errorf("slice length too large", new sliceType$1([])); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 3:
		bn = state.b.Len();
		/* */ if (bn < n) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if (bn < n) { */ case 5:
			$r = errorf("invalid slice length %d: exceeds input size %d", new sliceType$1([new $Int(n), new $Int(bn)])); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 6:
		state.b.Drop(n);
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: ignoreUint8Array }; } $f._r$22 = _r$22; $f._tuple = _tuple; $f.bn = bn; $f.i = i; $f.n = n; $f.ok = ok; $f.state = state; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;
	};
	Decoder.ptr.prototype.decodeSingle = function(engine, value) {
		var _r$22, dec, engine, instr, state, value, x$2, x$3, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$22 = $f._r$22; dec = $f.dec; engine = $f.engine; instr = $f.instr; state = $f.state; value = $f.value; x$2 = $f.x$2; x$3 = $f.x$3; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		dec = this;
		state = dec.newDecoderState(dec.buf);
		$deferred.push([$methodVal(dec, "freeDecoderState"), [state]]);
		state.fieldnum = 0;
		_r$22 = state.decodeUint(); /* */ $s = 3; case 3: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
		/* */ if (!((x$2 = _r$22, (x$2.$high === 0 && x$2.$low === 0)))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!((x$2 = _r$22, (x$2.$high === 0 && x$2.$low === 0)))) { */ case 1:
			$r = errorf("decode: corrupted data: non-zero delta for singleton", new sliceType$1([])); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 2:
		instr = (x$3 = engine.instr, (0 >= x$3.$length ? ($throwRuntimeError("index out of range"), undefined) : x$3.$array[x$3.$offset + 0]));
		$r = instr.op(instr, state, $clone(value, reflect.Value)); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } } catch(err) { $err = err; $s = -1; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: Decoder.ptr.prototype.decodeSingle }; } $f._r$22 = _r$22; $f.dec = dec; $f.engine = engine; $f.instr = instr; $f.state = state; $f.value = value; $f.x$2 = x$2; $f.x$3 = x$3; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	Decoder.prototype.decodeSingle = function(engine, value) { return this.$val.decodeSingle(engine, value); };
	Decoder.ptr.prototype.decodeStruct = function(engine, value) {
		var _r$22, _r$23, _r$24, dec, delta, engine, field, fieldnum, instr, state, value, x$2, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$22 = $f._r$22; _r$23 = $f._r$23; _r$24 = $f._r$24; dec = $f.dec; delta = $f.delta; engine = $f.engine; field = $f.field; fieldnum = $f.fieldnum; instr = $f.instr; state = $f.state; value = $f.value; x$2 = $f.x$2; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		dec = this;
		state = dec.newDecoderState(dec.buf);
		$deferred.push([$methodVal(dec, "freeDecoderState"), [state]]);
		state.fieldnum = -1;
		/* while (true) { */ case 1:
			/* if (!(state.b.Len() > 0)) { break; } */ if(!(state.b.Len() > 0)) { $s = 2; continue; }
			_r$22 = state.decodeUint(); /* */ $s = 3; case 3: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
			delta = ((_r$22.$low >> 0));
			/* */ if (delta < 0) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (delta < 0) { */ case 4:
				$r = errorf("decode: corrupted data: negative delta", new sliceType$1([])); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 5:
			if (delta === 0) {
				/* break; */ $s = 2; continue;
			}
			fieldnum = state.fieldnum + delta >> 0;
			if (fieldnum >= engine.instr.$length) {
				error_(errRange);
				/* break; */ $s = 2; continue;
			}
			instr = (x$2 = engine.instr, ((fieldnum < 0 || fieldnum >= x$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + fieldnum]));
			field = new reflect.Value.ptr(ptrType.nil, 0, 0);
			/* */ if (!(instr.index === sliceType$8.nil)) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if (!(instr.index === sliceType$8.nil)) { */ case 7:
				_r$23 = $clone(value, reflect.Value).FieldByIndex(instr.index); /* */ $s = 9; case 9: if($c) { $c = false; _r$23 = _r$23.$blk(); } if (_r$23 && _r$23.$blk !== undefined) { break s; }
				field = _r$23;
				/* */ if ($clone(field, reflect.Value).Kind() === 22) { $s = 10; continue; }
				/* */ $s = 11; continue;
				/* if ($clone(field, reflect.Value).Kind() === 22) { */ case 10:
					_r$24 = decAlloc($clone(field, reflect.Value)); /* */ $s = 12; case 12: if($c) { $c = false; _r$24 = _r$24.$blk(); } if (_r$24 && _r$24.$blk !== undefined) { break s; }
					field = _r$24;
				/* } */ case 11:
			/* } */ case 8:
			$r = instr.op(instr, state, $clone(field, reflect.Value)); /* */ $s = 13; case 13: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			state.fieldnum = fieldnum;
		/* } */ $s = 1; continue; case 2:
		$s = -1; return;
		/* */ } return; } } catch(err) { $err = err; $s = -1; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: Decoder.ptr.prototype.decodeStruct }; } $f._r$22 = _r$22; $f._r$23 = _r$23; $f._r$24 = _r$24; $f.dec = dec; $f.delta = delta; $f.engine = engine; $f.field = field; $f.fieldnum = fieldnum; $f.instr = instr; $f.state = state; $f.value = value; $f.x$2 = x$2; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	Decoder.prototype.decodeStruct = function(engine, value) { return this.$val.decodeStruct(engine, value); };
	Decoder.ptr.prototype.ignoreStruct = function(engine) {
		var _r$22, dec, delta, engine, fieldnum, instr, state, x$2, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$22 = $f._r$22; dec = $f.dec; delta = $f.delta; engine = $f.engine; fieldnum = $f.fieldnum; instr = $f.instr; state = $f.state; x$2 = $f.x$2; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		dec = this;
		state = dec.newDecoderState(dec.buf);
		$deferred.push([$methodVal(dec, "freeDecoderState"), [state]]);
		state.fieldnum = -1;
		/* while (true) { */ case 1:
			/* if (!(state.b.Len() > 0)) { break; } */ if(!(state.b.Len() > 0)) { $s = 2; continue; }
			_r$22 = state.decodeUint(); /* */ $s = 3; case 3: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
			delta = ((_r$22.$low >> 0));
			/* */ if (delta < 0) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (delta < 0) { */ case 4:
				$r = errorf("ignore decode: corrupted data: negative delta", new sliceType$1([])); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 5:
			if (delta === 0) {
				/* break; */ $s = 2; continue;
			}
			fieldnum = state.fieldnum + delta >> 0;
			if (fieldnum >= engine.instr.$length) {
				error_(errRange);
			}
			instr = (x$2 = engine.instr, ((fieldnum < 0 || fieldnum >= x$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + fieldnum]));
			$r = instr.op(instr, state, $clone(noValue, reflect.Value)); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			state.fieldnum = fieldnum;
		/* } */ $s = 1; continue; case 2:
		$s = -1; return;
		/* */ } return; } } catch(err) { $err = err; $s = -1; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: Decoder.ptr.prototype.ignoreStruct }; } $f._r$22 = _r$22; $f.dec = dec; $f.delta = delta; $f.engine = engine; $f.fieldnum = fieldnum; $f.instr = instr; $f.state = state; $f.x$2 = x$2; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	Decoder.prototype.ignoreStruct = function(engine) { return this.$val.ignoreStruct(engine); };
	Decoder.ptr.prototype.ignoreSingle = function(engine) {
		var _r$22, dec, delta, engine, instr, state, x$2, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$22 = $f._r$22; dec = $f.dec; delta = $f.delta; engine = $f.engine; instr = $f.instr; state = $f.state; x$2 = $f.x$2; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		dec = this;
		state = dec.newDecoderState(dec.buf);
		$deferred.push([$methodVal(dec, "freeDecoderState"), [state]]);
		state.fieldnum = 0;
		_r$22 = state.decodeUint(); /* */ $s = 1; case 1: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
		delta = ((_r$22.$low >> 0));
		/* */ if (!((delta === 0))) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!((delta === 0))) { */ case 2:
			$r = errorf("decode: corrupted data: non-zero delta for singleton", new sliceType$1([])); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 3:
		instr = (x$2 = engine.instr, (0 >= x$2.$length ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + 0]));
		$r = instr.op(instr, state, $clone(noValue, reflect.Value)); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } } catch(err) { $err = err; $s = -1; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: Decoder.ptr.prototype.ignoreSingle }; } $f._r$22 = _r$22; $f.dec = dec; $f.delta = delta; $f.engine = engine; $f.instr = instr; $f.state = state; $f.x$2 = x$2; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	Decoder.prototype.ignoreSingle = function(engine) { return this.$val.ignoreSingle(engine); };
	Decoder.ptr.prototype.decodeArrayHelper = function(state, value, elemOp, length, ovfl, helper) {
		var _r$22, _r$23, _r$24, _r$25, _r$26, _r$27, _v, dec, elemOp, helper, i, instr, isPtr, length, ovfl, state, v, value, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$22 = $f._r$22; _r$23 = $f._r$23; _r$24 = $f._r$24; _r$25 = $f._r$25; _r$26 = $f._r$26; _r$27 = $f._r$27; _v = $f._v; dec = $f.dec; elemOp = $f.elemOp; helper = $f.helper; i = $f.i; instr = $f.instr; isPtr = $f.isPtr; length = $f.length; ovfl = $f.ovfl; state = $f.state; v = $f.v; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		dec = this;
		if (!(!(helper === $throwNilPointerError))) { _v = false; $s = 3; continue s; }
		_r$22 = helper(state, $clone(value, reflect.Value), length, ovfl); /* */ $s = 4; case 4: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
		_v = _r$22; case 3:
		/* */ if (_v) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (_v) { */ case 1:
			$s = -1; return;
		/* } */ case 2:
		instr = new decInstr.ptr(elemOp, 0, sliceType$8.nil, ovfl);
		_r$23 = $clone(value, reflect.Value).Type(); /* */ $s = 5; case 5: if($c) { $c = false; _r$23 = _r$23.$blk(); } if (_r$23 && _r$23.$blk !== undefined) { break s; }
		_r$24 = _r$23.Elem(); /* */ $s = 6; case 6: if($c) { $c = false; _r$24 = _r$24.$blk(); } if (_r$24 && _r$24.$blk !== undefined) { break s; }
		_r$25 = _r$24.Kind(); /* */ $s = 7; case 7: if($c) { $c = false; _r$25 = _r$25.$blk(); } if (_r$25 && _r$25.$blk !== undefined) { break s; }
		isPtr = _r$25 === 22;
		i = 0;
		/* while (true) { */ case 8:
			/* if (!(i < length)) { break; } */ if(!(i < length)) { $s = 9; continue; }
			/* */ if (state.b.Len() === 0) { $s = 10; continue; }
			/* */ $s = 11; continue;
			/* if (state.b.Len() === 0) { */ case 10:
				$r = errorf("decoding array or slice: length exceeds input size (%d elements)", new sliceType$1([new $Int(length)])); /* */ $s = 12; case 12: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 11:
			_r$26 = $clone(value, reflect.Value).Index(i); /* */ $s = 13; case 13: if($c) { $c = false; _r$26 = _r$26.$blk(); } if (_r$26 && _r$26.$blk !== undefined) { break s; }
			v = _r$26;
			/* */ if (isPtr) { $s = 14; continue; }
			/* */ $s = 15; continue;
			/* if (isPtr) { */ case 14:
				_r$27 = decAlloc($clone(v, reflect.Value)); /* */ $s = 16; case 16: if($c) { $c = false; _r$27 = _r$27.$blk(); } if (_r$27 && _r$27.$blk !== undefined) { break s; }
				v = _r$27;
			/* } */ case 15:
			$r = elemOp(instr, state, $clone(v, reflect.Value)); /* */ $s = 17; case 17: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			i = i + (1) >> 0;
		/* } */ $s = 8; continue; case 9:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Decoder.ptr.prototype.decodeArrayHelper }; } $f._r$22 = _r$22; $f._r$23 = _r$23; $f._r$24 = _r$24; $f._r$25 = _r$25; $f._r$26 = _r$26; $f._r$27 = _r$27; $f._v = _v; $f.dec = dec; $f.elemOp = elemOp; $f.helper = helper; $f.i = i; $f.instr = instr; $f.isPtr = isPtr; $f.length = length; $f.ovfl = ovfl; $f.state = state; $f.v = v; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;
	};
	Decoder.prototype.decodeArrayHelper = function(state, value, elemOp, length, ovfl, helper) { return this.$val.decodeArrayHelper(state, value, elemOp, length, ovfl, helper); };
	Decoder.ptr.prototype.decodeArray = function(state, value, elemOp, length, ovfl, helper) {
		var _r$22, dec, elemOp, helper, length, n, ovfl, state, value, x$2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$22 = $f._r$22; dec = $f.dec; elemOp = $f.elemOp; helper = $f.helper; length = $f.length; n = $f.n; ovfl = $f.ovfl; state = $f.state; value = $f.value; x$2 = $f.x$2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		dec = this;
		_r$22 = state.decodeUint(); /* */ $s = 1; case 1: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
		n = _r$22;
		/* */ if (!((x$2 = (new $Uint64(0, length)), (n.$high === x$2.$high && n.$low === x$2.$low)))) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!((x$2 = (new $Uint64(0, length)), (n.$high === x$2.$high && n.$low === x$2.$low)))) { */ case 2:
			$r = errorf("length mismatch in decodeArray", new sliceType$1([])); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 3:
		$r = dec.decodeArrayHelper(state, $clone(value, reflect.Value), elemOp, length, ovfl, helper); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Decoder.ptr.prototype.decodeArray }; } $f._r$22 = _r$22; $f.dec = dec; $f.elemOp = elemOp; $f.helper = helper; $f.length = length; $f.n = n; $f.ovfl = ovfl; $f.state = state; $f.value = value; $f.x$2 = x$2; $f.$s = $s; $f.$r = $r; return $f;
	};
	Decoder.prototype.decodeArray = function(state, value, elemOp, length, ovfl, helper) { return this.$val.decodeArray(state, value, elemOp, length, ovfl, helper); };
	decodeIntoValue = function(state, op, isPtr, value, instr) {
		var _r$22, instr, isPtr, op, state, v, value, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$22 = $f._r$22; instr = $f.instr; isPtr = $f.isPtr; op = $f.op; state = $f.state; v = $f.v; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = value;
		/* */ if (isPtr) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (isPtr) { */ case 1:
			_r$22 = decAlloc($clone(value, reflect.Value)); /* */ $s = 3; case 3: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
			v = _r$22;
		/* } */ case 2:
		$r = op(instr, state, $clone(v, reflect.Value)); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return value;
		/* */ } return; } if ($f === undefined) { $f = { $blk: decodeIntoValue }; } $f._r$22 = _r$22; $f.instr = instr; $f.isPtr = isPtr; $f.op = op; $f.state = state; $f.v = v; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;
	};
	Decoder.ptr.prototype.decodeMap = function(mtyp, state, value, keyOp, elemOp, ovfl) {
		var _arg, _arg$1, _arg$2, _arg$3, _arg$4, _arg$5, _arg$6, _arg$7, _arg$8, _arg$9, _r$22, _r$23, _r$24, _r$25, _r$26, _r$27, _r$28, _r$29, _r$30, _r$31, _r$32, _r$33, _r$34, _r$35, _r$36, _r$37, _r$38, _r$39, _r$40, _r$41, dec, elem, elemInstr, elemIsPtr, elemOp, elemP, elemZ, i, key, keyInstr, keyIsPtr, keyOp, keyP, keyZ, mtyp, n, ovfl, state, value, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _arg$3 = $f._arg$3; _arg$4 = $f._arg$4; _arg$5 = $f._arg$5; _arg$6 = $f._arg$6; _arg$7 = $f._arg$7; _arg$8 = $f._arg$8; _arg$9 = $f._arg$9; _r$22 = $f._r$22; _r$23 = $f._r$23; _r$24 = $f._r$24; _r$25 = $f._r$25; _r$26 = $f._r$26; _r$27 = $f._r$27; _r$28 = $f._r$28; _r$29 = $f._r$29; _r$30 = $f._r$30; _r$31 = $f._r$31; _r$32 = $f._r$32; _r$33 = $f._r$33; _r$34 = $f._r$34; _r$35 = $f._r$35; _r$36 = $f._r$36; _r$37 = $f._r$37; _r$38 = $f._r$38; _r$39 = $f._r$39; _r$40 = $f._r$40; _r$41 = $f._r$41; dec = $f.dec; elem = $f.elem; elemInstr = $f.elemInstr; elemIsPtr = $f.elemIsPtr; elemOp = $f.elemOp; elemP = $f.elemP; elemZ = $f.elemZ; i = $f.i; key = $f.key; keyInstr = $f.keyInstr; keyIsPtr = $f.keyIsPtr; keyOp = $f.keyOp; keyP = $f.keyP; keyZ = $f.keyZ; mtyp = $f.mtyp; n = $f.n; ovfl = $f.ovfl; state = $f.state; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		dec = this;
		_r$22 = state.decodeUint(); /* */ $s = 1; case 1: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
		n = ((_r$22.$low >> 0));
		/* */ if ($clone(value, reflect.Value).IsNil()) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if ($clone(value, reflect.Value).IsNil()) { */ case 2:
			_r$23 = reflect.MakeMapWithSize(mtyp, n); /* */ $s = 4; case 4: if($c) { $c = false; _r$23 = _r$23.$blk(); } if (_r$23 && _r$23.$blk !== undefined) { break s; }
			$r = $clone(value, reflect.Value).Set($clone(_r$23, reflect.Value)); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 3:
		_r$24 = mtyp.Key(); /* */ $s = 6; case 6: if($c) { $c = false; _r$24 = _r$24.$blk(); } if (_r$24 && _r$24.$blk !== undefined) { break s; }
		_r$25 = _r$24.Kind(); /* */ $s = 7; case 7: if($c) { $c = false; _r$25 = _r$25.$blk(); } if (_r$25 && _r$25.$blk !== undefined) { break s; }
		keyIsPtr = _r$25 === 22;
		_r$26 = mtyp.Elem(); /* */ $s = 8; case 8: if($c) { $c = false; _r$26 = _r$26.$blk(); } if (_r$26 && _r$26.$blk !== undefined) { break s; }
		_r$27 = _r$26.Kind(); /* */ $s = 9; case 9: if($c) { $c = false; _r$27 = _r$27.$blk(); } if (_r$27 && _r$27.$blk !== undefined) { break s; }
		elemIsPtr = _r$27 === 22;
		keyInstr = new decInstr.ptr(keyOp, 0, sliceType$8.nil, ovfl);
		elemInstr = new decInstr.ptr(elemOp, 0, sliceType$8.nil, ovfl);
		_r$28 = mtyp.Key(); /* */ $s = 10; case 10: if($c) { $c = false; _r$28 = _r$28.$blk(); } if (_r$28 && _r$28.$blk !== undefined) { break s; }
		_r$29 = reflect.New(_r$28); /* */ $s = 11; case 11: if($c) { $c = false; _r$29 = _r$29.$blk(); } if (_r$29 && _r$29.$blk !== undefined) { break s; }
		keyP = _r$29;
		_r$30 = mtyp.Key(); /* */ $s = 12; case 12: if($c) { $c = false; _r$30 = _r$30.$blk(); } if (_r$30 && _r$30.$blk !== undefined) { break s; }
		_r$31 = reflect.Zero(_r$30); /* */ $s = 13; case 13: if($c) { $c = false; _r$31 = _r$31.$blk(); } if (_r$31 && _r$31.$blk !== undefined) { break s; }
		keyZ = _r$31;
		_r$32 = mtyp.Elem(); /* */ $s = 14; case 14: if($c) { $c = false; _r$32 = _r$32.$blk(); } if (_r$32 && _r$32.$blk !== undefined) { break s; }
		_r$33 = reflect.New(_r$32); /* */ $s = 15; case 15: if($c) { $c = false; _r$33 = _r$33.$blk(); } if (_r$33 && _r$33.$blk !== undefined) { break s; }
		elemP = _r$33;
		_r$34 = mtyp.Elem(); /* */ $s = 16; case 16: if($c) { $c = false; _r$34 = _r$34.$blk(); } if (_r$34 && _r$34.$blk !== undefined) { break s; }
		_r$35 = reflect.Zero(_r$34); /* */ $s = 17; case 17: if($c) { $c = false; _r$35 = _r$35.$blk(); } if (_r$35 && _r$35.$blk !== undefined) { break s; }
		elemZ = _r$35;
		i = 0;
		/* while (true) { */ case 18:
			/* if (!(i < n)) { break; } */ if(!(i < n)) { $s = 19; continue; }
			_arg = state;
			_arg$1 = keyOp;
			_arg$2 = keyIsPtr;
			_r$36 = $clone(keyP, reflect.Value).Elem(); /* */ $s = 20; case 20: if($c) { $c = false; _r$36 = _r$36.$blk(); } if (_r$36 && _r$36.$blk !== undefined) { break s; }
			_arg$3 = $clone(_r$36, reflect.Value);
			_arg$4 = keyInstr;
			_r$37 = decodeIntoValue(_arg, _arg$1, _arg$2, _arg$3, _arg$4); /* */ $s = 21; case 21: if($c) { $c = false; _r$37 = _r$37.$blk(); } if (_r$37 && _r$37.$blk !== undefined) { break s; }
			key = _r$37;
			_arg$5 = state;
			_arg$6 = elemOp;
			_arg$7 = elemIsPtr;
			_r$38 = $clone(elemP, reflect.Value).Elem(); /* */ $s = 22; case 22: if($c) { $c = false; _r$38 = _r$38.$blk(); } if (_r$38 && _r$38.$blk !== undefined) { break s; }
			_arg$8 = $clone(_r$38, reflect.Value);
			_arg$9 = elemInstr;
			_r$39 = decodeIntoValue(_arg$5, _arg$6, _arg$7, _arg$8, _arg$9); /* */ $s = 23; case 23: if($c) { $c = false; _r$39 = _r$39.$blk(); } if (_r$39 && _r$39.$blk !== undefined) { break s; }
			elem = _r$39;
			$r = $clone(value, reflect.Value).SetMapIndex($clone(key, reflect.Value), $clone(elem, reflect.Value)); /* */ $s = 24; case 24: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_r$40 = $clone(keyP, reflect.Value).Elem(); /* */ $s = 25; case 25: if($c) { $c = false; _r$40 = _r$40.$blk(); } if (_r$40 && _r$40.$blk !== undefined) { break s; }
			$r = $clone(_r$40, reflect.Value).Set($clone(keyZ, reflect.Value)); /* */ $s = 26; case 26: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_r$41 = $clone(elemP, reflect.Value).Elem(); /* */ $s = 27; case 27: if($c) { $c = false; _r$41 = _r$41.$blk(); } if (_r$41 && _r$41.$blk !== undefined) { break s; }
			$r = $clone(_r$41, reflect.Value).Set($clone(elemZ, reflect.Value)); /* */ $s = 28; case 28: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			i = i + (1) >> 0;
		/* } */ $s = 18; continue; case 19:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Decoder.ptr.prototype.decodeMap }; } $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._arg$3 = _arg$3; $f._arg$4 = _arg$4; $f._arg$5 = _arg$5; $f._arg$6 = _arg$6; $f._arg$7 = _arg$7; $f._arg$8 = _arg$8; $f._arg$9 = _arg$9; $f._r$22 = _r$22; $f._r$23 = _r$23; $f._r$24 = _r$24; $f._r$25 = _r$25; $f._r$26 = _r$26; $f._r$27 = _r$27; $f._r$28 = _r$28; $f._r$29 = _r$29; $f._r$30 = _r$30; $f._r$31 = _r$31; $f._r$32 = _r$32; $f._r$33 = _r$33; $f._r$34 = _r$34; $f._r$35 = _r$35; $f._r$36 = _r$36; $f._r$37 = _r$37; $f._r$38 = _r$38; $f._r$39 = _r$39; $f._r$40 = _r$40; $f._r$41 = _r$41; $f.dec = dec; $f.elem = elem; $f.elemInstr = elemInstr; $f.elemIsPtr = elemIsPtr; $f.elemOp = elemOp; $f.elemP = elemP; $f.elemZ = elemZ; $f.i = i; $f.key = key; $f.keyInstr = keyInstr; $f.keyIsPtr = keyIsPtr; $f.keyOp = keyOp; $f.keyP = keyP; $f.keyZ = keyZ; $f.mtyp = mtyp; $f.n = n; $f.ovfl = ovfl; $f.state = state; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;
	};
	Decoder.prototype.decodeMap = function(mtyp, state, value, keyOp, elemOp, ovfl) { return this.$val.decodeMap(mtyp, state, value, keyOp, elemOp, ovfl); };
	Decoder.ptr.prototype.ignoreArrayHelper = function(state, elemOp, length) {
		var dec, elemOp, i, instr, length, state, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; dec = $f.dec; elemOp = $f.elemOp; i = $f.i; instr = $f.instr; length = $f.length; state = $f.state; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		dec = this;
		instr = new decInstr.ptr(elemOp, 0, sliceType$8.nil, errors.New("no error"));
		i = 0;
		/* while (true) { */ case 1:
			/* if (!(i < length)) { break; } */ if(!(i < length)) { $s = 2; continue; }
			/* */ if (state.b.Len() === 0) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (state.b.Len() === 0) { */ case 3:
				$r = errorf("decoding array or slice: length exceeds input size (%d elements)", new sliceType$1([new $Int(length)])); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 4:
			$r = elemOp(instr, state, $clone(noValue, reflect.Value)); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			i = i + (1) >> 0;
		/* } */ $s = 1; continue; case 2:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Decoder.ptr.prototype.ignoreArrayHelper }; } $f.dec = dec; $f.elemOp = elemOp; $f.i = i; $f.instr = instr; $f.length = length; $f.state = state; $f.$s = $s; $f.$r = $r; return $f;
	};
	Decoder.prototype.ignoreArrayHelper = function(state, elemOp, length) { return this.$val.ignoreArrayHelper(state, elemOp, length); };
	Decoder.ptr.prototype.ignoreArray = function(state, elemOp, length) {
		var _r$22, dec, elemOp, length, n, state, x$2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$22 = $f._r$22; dec = $f.dec; elemOp = $f.elemOp; length = $f.length; n = $f.n; state = $f.state; x$2 = $f.x$2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		dec = this;
		_r$22 = state.decodeUint(); /* */ $s = 1; case 1: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
		n = _r$22;
		/* */ if (!((x$2 = (new $Uint64(0, length)), (n.$high === x$2.$high && n.$low === x$2.$low)))) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!((x$2 = (new $Uint64(0, length)), (n.$high === x$2.$high && n.$low === x$2.$low)))) { */ case 2:
			$r = errorf("length mismatch in ignoreArray", new sliceType$1([])); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 3:
		$r = dec.ignoreArrayHelper(state, elemOp, length); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Decoder.ptr.prototype.ignoreArray }; } $f._r$22 = _r$22; $f.dec = dec; $f.elemOp = elemOp; $f.length = length; $f.n = n; $f.state = state; $f.x$2 = x$2; $f.$s = $s; $f.$r = $r; return $f;
	};
	Decoder.prototype.ignoreArray = function(state, elemOp, length) { return this.$val.ignoreArray(state, elemOp, length); };
	Decoder.ptr.prototype.ignoreMap = function(state, keyOp, elemOp) {
		var _r$22, dec, elemInstr, elemOp, i, keyInstr, keyOp, n, state, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$22 = $f._r$22; dec = $f.dec; elemInstr = $f.elemInstr; elemOp = $f.elemOp; i = $f.i; keyInstr = $f.keyInstr; keyOp = $f.keyOp; n = $f.n; state = $f.state; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		dec = this;
		_r$22 = state.decodeUint(); /* */ $s = 1; case 1: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
		n = ((_r$22.$low >> 0));
		keyInstr = new decInstr.ptr(keyOp, 0, sliceType$8.nil, errors.New("no error"));
		elemInstr = new decInstr.ptr(elemOp, 0, sliceType$8.nil, errors.New("no error"));
		i = 0;
		/* while (true) { */ case 2:
			/* if (!(i < n)) { break; } */ if(!(i < n)) { $s = 3; continue; }
			$r = keyOp(keyInstr, state, $clone(noValue, reflect.Value)); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = elemOp(elemInstr, state, $clone(noValue, reflect.Value)); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			i = i + (1) >> 0;
		/* } */ $s = 2; continue; case 3:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Decoder.ptr.prototype.ignoreMap }; } $f._r$22 = _r$22; $f.dec = dec; $f.elemInstr = elemInstr; $f.elemOp = elemOp; $f.i = i; $f.keyInstr = keyInstr; $f.keyOp = keyOp; $f.n = n; $f.state = state; $f.$s = $s; $f.$r = $r; return $f;
	};
	Decoder.prototype.ignoreMap = function(state, keyOp, elemOp) { return this.$val.ignoreMap(state, keyOp, elemOp); };
	Decoder.ptr.prototype.decodeSlice = function(state, value, elemOp, ovfl, helper) {
		var _arg, _arg$1, _arg$2, _r$22, _r$23, _r$24, _r$25, _r$26, _r$27, _r$28, dec, elemOp, helper, n, nBytes, ovfl, size, state, typ, u, value, x$2, x$3, x$4, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _r$22 = $f._r$22; _r$23 = $f._r$23; _r$24 = $f._r$24; _r$25 = $f._r$25; _r$26 = $f._r$26; _r$27 = $f._r$27; _r$28 = $f._r$28; dec = $f.dec; elemOp = $f.elemOp; helper = $f.helper; n = $f.n; nBytes = $f.nBytes; ovfl = $f.ovfl; size = $f.size; state = $f.state; typ = $f.typ; u = $f.u; value = $f.value; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		dec = this;
		_r$22 = state.decodeUint(); /* */ $s = 1; case 1: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
		u = _r$22;
		_r$23 = $clone(value, reflect.Value).Type(); /* */ $s = 2; case 2: if($c) { $c = false; _r$23 = _r$23.$blk(); } if (_r$23 && _r$23.$blk !== undefined) { break s; }
		typ = _r$23;
		_r$24 = typ.Elem(); /* */ $s = 3; case 3: if($c) { $c = false; _r$24 = _r$24.$blk(); } if (_r$24 && _r$24.$blk !== undefined) { break s; }
		_r$25 = _r$24.Size(); /* */ $s = 4; case 4: if($c) { $c = false; _r$25 = _r$25.$blk(); } if (_r$25 && _r$25.$blk !== undefined) { break s; }
		size = ((x$2 = _r$25, new $Uint64(0, x$2.constructor === Number ? x$2 : 1)));
		nBytes = $mul64(u, size);
		n = ((u.$low >> 0));
		/* */ if (n < 0 || !((x$3 = (new $Uint64(0, n)), (x$3.$high === u.$high && x$3.$low === u.$low))) || (nBytes.$high > 0 || (nBytes.$high === 0 && nBytes.$low > 1073741824)) || ((size.$high > 0 || (size.$high === 0 && size.$low > 0)) && !((x$4 = $div64(nBytes, size, false), (x$4.$high === u.$high && x$4.$low === u.$low))))) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if (n < 0 || !((x$3 = (new $Uint64(0, n)), (x$3.$high === u.$high && x$3.$low === u.$low))) || (nBytes.$high > 0 || (nBytes.$high === 0 && nBytes.$low > 1073741824)) || ((size.$high > 0 || (size.$high === 0 && size.$low > 0)) && !((x$4 = $div64(nBytes, size, false), (x$4.$high === u.$high && x$4.$low === u.$low))))) { */ case 5:
			_r$26 = typ.Elem(); /* */ $s = 7; case 7: if($c) { $c = false; _r$26 = _r$26.$blk(); } if (_r$26 && _r$26.$blk !== undefined) { break s; }
			_arg = _r$26;
			_arg$1 = u;
			_arg$2 = size;
			$r = errorf("%s slice too big: %d elements of %d bytes", new sliceType$1([_arg, _arg$1, _arg$2])); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 6:
		/* */ if ($clone(value, reflect.Value).Cap() < n) { $s = 9; continue; }
		/* */ $s = 10; continue;
		/* if ($clone(value, reflect.Value).Cap() < n) { */ case 9:
			_r$27 = reflect.MakeSlice(typ, n, n); /* */ $s = 12; case 12: if($c) { $c = false; _r$27 = _r$27.$blk(); } if (_r$27 && _r$27.$blk !== undefined) { break s; }
			$r = $clone(value, reflect.Value).Set($clone(_r$27, reflect.Value)); /* */ $s = 13; case 13: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 11; continue;
		/* } else { */ case 10:
			_r$28 = $clone(value, reflect.Value).Slice(0, n); /* */ $s = 14; case 14: if($c) { $c = false; _r$28 = _r$28.$blk(); } if (_r$28 && _r$28.$blk !== undefined) { break s; }
			$r = $clone(value, reflect.Value).Set($clone(_r$28, reflect.Value)); /* */ $s = 15; case 15: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 11:
		$r = dec.decodeArrayHelper(state, $clone(value, reflect.Value), elemOp, n, ovfl, helper); /* */ $s = 16; case 16: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Decoder.ptr.prototype.decodeSlice }; } $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._r$22 = _r$22; $f._r$23 = _r$23; $f._r$24 = _r$24; $f._r$25 = _r$25; $f._r$26 = _r$26; $f._r$27 = _r$27; $f._r$28 = _r$28; $f.dec = dec; $f.elemOp = elemOp; $f.helper = helper; $f.n = n; $f.nBytes = nBytes; $f.ovfl = ovfl; $f.size = size; $f.state = state; $f.typ = typ; $f.u = u; $f.value = value; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.$s = $s; $f.$r = $r; return $f;
	};
	Decoder.prototype.decodeSlice = function(state, value, elemOp, ovfl, helper) { return this.$val.decodeSlice(state, value, elemOp, ovfl, helper); };
	Decoder.ptr.prototype.ignoreSlice = function(state, elemOp) {
		var _arg, _arg$1, _arg$2, _r$22, dec, elemOp, state, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _r$22 = $f._r$22; dec = $f.dec; elemOp = $f.elemOp; state = $f.state; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		dec = this;
		_arg = state;
		_arg$1 = elemOp;
		_r$22 = state.decodeUint(); /* */ $s = 1; case 1: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
		_arg$2 = ((_r$22.$low >> 0));
		$r = dec.ignoreArrayHelper(_arg, _arg$1, _arg$2); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Decoder.ptr.prototype.ignoreSlice }; } $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._r$22 = _r$22; $f.dec = dec; $f.elemOp = elemOp; $f.state = state; $f.$s = $s; $f.$r = $r; return $f;
	};
	Decoder.prototype.ignoreSlice = function(state, elemOp) { return this.$val.ignoreSlice(state, elemOp); };
	Decoder.ptr.prototype.decodeInterface = function(ityp, state, value) {
		var _r$22, _r$23, _r$24, _r$25, _r$26, _r$27, _r$28, _tuple, concreteId, dec, ityp, n, name, nr, ok, state, typ, typi, v, value, x$2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$22 = $f._r$22; _r$23 = $f._r$23; _r$24 = $f._r$24; _r$25 = $f._r$25; _r$26 = $f._r$26; _r$27 = $f._r$27; _r$28 = $f._r$28; _tuple = $f._tuple; concreteId = $f.concreteId; dec = $f.dec; ityp = $f.ityp; n = $f.n; name = $f.name; nr = $f.nr; ok = $f.ok; state = $f.state; typ = $f.typ; typi = $f.typi; v = $f.v; value = $f.value; x$2 = $f.x$2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		dec = this;
		_r$22 = state.decodeUint(); /* */ $s = 1; case 1: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
		nr = _r$22;
		/* */ if ((nr.$high > 0 || (nr.$high === 0 && nr.$low > 2147483648))) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if ((nr.$high > 0 || (nr.$high === 0 && nr.$low > 2147483648))) { */ case 2:
			$r = errorf("invalid type name length %d", new sliceType$1([nr])); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 3:
		/* */ if ((x$2 = (new $Uint64(0, state.b.Len())), (nr.$high > x$2.$high || (nr.$high === x$2.$high && nr.$low > x$2.$low)))) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if ((x$2 = (new $Uint64(0, state.b.Len())), (nr.$high > x$2.$high || (nr.$high === x$2.$high && nr.$low > x$2.$low)))) { */ case 5:
			$r = errorf("invalid type name length %d: exceeds input size", new sliceType$1([nr])); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 6:
		n = ((nr.$low >> 0));
		name = $subslice(state.b.Bytes(), 0, n);
		state.b.Drop(n);
		/* */ if (name.$length === 0) { $s = 8; continue; }
		/* */ $s = 9; continue;
		/* if (name.$length === 0) { */ case 8:
			_r$23 = $clone(value, reflect.Value).Type(); /* */ $s = 10; case 10: if($c) { $c = false; _r$23 = _r$23.$blk(); } if (_r$23 && _r$23.$blk !== undefined) { break s; }
			_r$24 = reflect.Zero(_r$23); /* */ $s = 11; case 11: if($c) { $c = false; _r$24 = _r$24.$blk(); } if (_r$24 && _r$24.$blk !== undefined) { break s; }
			$r = $clone(value, reflect.Value).Set($clone(_r$24, reflect.Value)); /* */ $s = 12; case 12: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = -1; return;
		/* } */ case 9:
		/* */ if (name.$length > 1024) { $s = 13; continue; }
		/* */ $s = 14; continue;
		/* if (name.$length > 1024) { */ case 13:
			$r = errorf("name too long (%d bytes): %.20q...", new sliceType$1([new $Int(name.$length), name])); /* */ $s = 15; case 15: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 14:
		_tuple = nameToConcreteType.Load(new $String(($bytesToString(name))));
		typi = _tuple[0];
		ok = _tuple[1];
		/* */ if (!ok) { $s = 16; continue; }
		/* */ $s = 17; continue;
		/* if (!ok) { */ case 16:
			$r = errorf("name not registered for interface: %q", new sliceType$1([name])); /* */ $s = 18; case 18: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 17:
		typ = $assertType(typi, reflect.Type);
		_r$25 = dec.decodeTypeSequence(true); /* */ $s = 19; case 19: if($c) { $c = false; _r$25 = _r$25.$blk(); } if (_r$25 && _r$25.$blk !== undefined) { break s; }
		concreteId = _r$25;
		if (concreteId < 0) {
			error_(dec.err);
		}
		_r$26 = state.decodeUint(); /* */ $s = 20; case 20: if($c) { $c = false; _r$26 = _r$26.$blk(); } if (_r$26 && _r$26.$blk !== undefined) { break s; }
		_r$26;
		_r$27 = allocValue(typ); /* */ $s = 21; case 21: if($c) { $c = false; _r$27 = _r$27.$blk(); } if (_r$27 && _r$27.$blk !== undefined) { break s; }
		v = _r$27;
		$r = dec.decodeValue(concreteId, $clone(v, reflect.Value)); /* */ $s = 22; case 22: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		if (!($interfaceIsEqual(dec.err, $ifaceNil))) {
			error_(dec.err);
		}
		_r$28 = typ.AssignableTo(ityp); /* */ $s = 25; case 25: if($c) { $c = false; _r$28 = _r$28.$blk(); } if (_r$28 && _r$28.$blk !== undefined) { break s; }
		/* */ if (!_r$28) { $s = 23; continue; }
		/* */ $s = 24; continue;
		/* if (!_r$28) { */ case 23:
			$r = errorf("%s is not assignable to type %s", new sliceType$1([typ, ityp])); /* */ $s = 26; case 26: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 24:
		$r = $clone(value, reflect.Value).Set($clone(v, reflect.Value)); /* */ $s = 27; case 27: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Decoder.ptr.prototype.decodeInterface }; } $f._r$22 = _r$22; $f._r$23 = _r$23; $f._r$24 = _r$24; $f._r$25 = _r$25; $f._r$26 = _r$26; $f._r$27 = _r$27; $f._r$28 = _r$28; $f._tuple = _tuple; $f.concreteId = concreteId; $f.dec = dec; $f.ityp = ityp; $f.n = n; $f.name = name; $f.nr = nr; $f.ok = ok; $f.state = state; $f.typ = typ; $f.typi = typi; $f.v = v; $f.value = value; $f.x$2 = x$2; $f.$s = $s; $f.$r = $r; return $f;
	};
	Decoder.prototype.decodeInterface = function(ityp, state, value) { return this.$val.decodeInterface(ityp, state, value); };
	Decoder.ptr.prototype.ignoreInterface = function(state) {
		var _r$22, _r$23, _r$24, _tuple, _tuple$1, bn, dec, id, n, ok, state, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$22 = $f._r$22; _r$23 = $f._r$23; _r$24 = $f._r$24; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; bn = $f.bn; dec = $f.dec; id = $f.id; n = $f.n; ok = $f.ok; state = $f.state; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		dec = this;
		_r$22 = state.getLength(); /* */ $s = 1; case 1: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
		_tuple = _r$22;
		n = _tuple[0];
		ok = _tuple[1];
		/* */ if (!ok) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!ok) { */ case 2:
			$r = errorf("bad interface encoding: name too large for buffer", new sliceType$1([])); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 3:
		bn = state.b.Len();
		/* */ if (bn < n) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if (bn < n) { */ case 5:
			$r = errorf("invalid interface value length %d: exceeds input size %d", new sliceType$1([new $Int(n), new $Int(bn)])); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 6:
		state.b.Drop(n);
		_r$23 = dec.decodeTypeSequence(true); /* */ $s = 8; case 8: if($c) { $c = false; _r$23 = _r$23.$blk(); } if (_r$23 && _r$23.$blk !== undefined) { break s; }
		id = _r$23;
		if (id < 0) {
			error_(dec.err);
		}
		_r$24 = state.getLength(); /* */ $s = 9; case 9: if($c) { $c = false; _r$24 = _r$24.$blk(); } if (_r$24 && _r$24.$blk !== undefined) { break s; }
		_tuple$1 = _r$24;
		n = _tuple$1[0];
		ok = _tuple$1[1];
		/* */ if (!ok) { $s = 10; continue; }
		/* */ $s = 11; continue;
		/* if (!ok) { */ case 10:
			$r = errorf("bad interface encoding: data length too large for buffer", new sliceType$1([])); /* */ $s = 12; case 12: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 11:
		state.b.Drop(n);
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Decoder.ptr.prototype.ignoreInterface }; } $f._r$22 = _r$22; $f._r$23 = _r$23; $f._r$24 = _r$24; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.bn = bn; $f.dec = dec; $f.id = id; $f.n = n; $f.ok = ok; $f.state = state; $f.$s = $s; $f.$r = $r; return $f;
	};
	Decoder.prototype.ignoreInterface = function(state) { return this.$val.ignoreInterface(state); };
	Decoder.ptr.prototype.decodeGobDecoder = function(ut, state, value) {
		var _1, _r$22, _r$23, _r$24, _r$25, _r$26, _r$27, _r$28, _tuple, b, dec, err, n, ok, state, ut, value, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _r$22 = $f._r$22; _r$23 = $f._r$23; _r$24 = $f._r$24; _r$25 = $f._r$25; _r$26 = $f._r$26; _r$27 = $f._r$27; _r$28 = $f._r$28; _tuple = $f._tuple; b = $f.b; dec = $f.dec; err = $f.err; n = $f.n; ok = $f.ok; state = $f.state; ut = $f.ut; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		dec = this;
		_r$22 = state.getLength(); /* */ $s = 1; case 1: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
		_tuple = _r$22;
		n = _tuple[0];
		ok = _tuple[1];
		/* */ if (!ok) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!ok) { */ case 2:
			$r = errorf("GobDecoder: length too large for buffer", new sliceType$1([])); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 3:
		b = state.b.Bytes();
		/* */ if (b.$length < n) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if (b.$length < n) { */ case 5:
			$r = errorf("GobDecoder: invalid data length %d: exceeds input size %d", new sliceType$1([new $Int(n), new $Int(b.$length)])); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 6:
		b = $subslice(b, 0, n);
		state.b.Drop(n);
		err = $ifaceNil;
			_1 = ut.externalDec;
			/* */ if (_1 === (1)) { $s = 9; continue; }
			/* */ if (_1 === (2)) { $s = 10; continue; }
			/* */ if (_1 === (3)) { $s = 11; continue; }
			/* */ $s = 12; continue;
			/* if (_1 === (1)) { */ case 9:
				_r$23 = $clone(value, reflect.Value).Interface(); /* */ $s = 13; case 13: if($c) { $c = false; _r$23 = _r$23.$blk(); } if (_r$23 && _r$23.$blk !== undefined) { break s; }
				_r$24 = $assertType(_r$23, GobDecoder).GobDecode(b); /* */ $s = 14; case 14: if($c) { $c = false; _r$24 = _r$24.$blk(); } if (_r$24 && _r$24.$blk !== undefined) { break s; }
				err = _r$24;
				$s = 12; continue;
			/* } else if (_1 === (2)) { */ case 10:
				_r$25 = $clone(value, reflect.Value).Interface(); /* */ $s = 15; case 15: if($c) { $c = false; _r$25 = _r$25.$blk(); } if (_r$25 && _r$25.$blk !== undefined) { break s; }
				_r$26 = $assertType(_r$25, encoding.BinaryUnmarshaler).UnmarshalBinary(b); /* */ $s = 16; case 16: if($c) { $c = false; _r$26 = _r$26.$blk(); } if (_r$26 && _r$26.$blk !== undefined) { break s; }
				err = _r$26;
				$s = 12; continue;
			/* } else if (_1 === (3)) { */ case 11:
				_r$27 = $clone(value, reflect.Value).Interface(); /* */ $s = 17; case 17: if($c) { $c = false; _r$27 = _r$27.$blk(); } if (_r$27 && _r$27.$blk !== undefined) { break s; }
				_r$28 = $assertType(_r$27, encoding.TextUnmarshaler).UnmarshalText(b); /* */ $s = 18; case 18: if($c) { $c = false; _r$28 = _r$28.$blk(); } if (_r$28 && _r$28.$blk !== undefined) { break s; }
				err = _r$28;
			/* } */ case 12:
		case 8:
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			error_(err);
		}
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Decoder.ptr.prototype.decodeGobDecoder }; } $f._1 = _1; $f._r$22 = _r$22; $f._r$23 = _r$23; $f._r$24 = _r$24; $f._r$25 = _r$25; $f._r$26 = _r$26; $f._r$27 = _r$27; $f._r$28 = _r$28; $f._tuple = _tuple; $f.b = b; $f.dec = dec; $f.err = err; $f.n = n; $f.ok = ok; $f.state = state; $f.ut = ut; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;
	};
	Decoder.prototype.decodeGobDecoder = function(ut, state, value) { return this.$val.decodeGobDecoder(ut, state, value); };
	Decoder.ptr.prototype.ignoreGobDecoder = function(state) {
		var _r$22, _tuple, bn, dec, n, ok, state, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$22 = $f._r$22; _tuple = $f._tuple; bn = $f.bn; dec = $f.dec; n = $f.n; ok = $f.ok; state = $f.state; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		dec = this;
		_r$22 = state.getLength(); /* */ $s = 1; case 1: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
		_tuple = _r$22;
		n = _tuple[0];
		ok = _tuple[1];
		/* */ if (!ok) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!ok) { */ case 2:
			$r = errorf("GobDecoder: length too large for buffer", new sliceType$1([])); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 3:
		bn = state.b.Len();
		/* */ if (bn < n) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if (bn < n) { */ case 5:
			$r = errorf("GobDecoder: invalid data length %d: exceeds input size %d", new sliceType$1([new $Int(n), new $Int(bn)])); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 6:
		state.b.Drop(n);
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Decoder.ptr.prototype.ignoreGobDecoder }; } $f._r$22 = _r$22; $f._tuple = _tuple; $f.bn = bn; $f.dec = dec; $f.n = n; $f.ok = ok; $f.state = state; $f.$s = $s; $f.$r = $r; return $f;
	};
	Decoder.prototype.ignoreGobDecoder = function(state) { return this.$val.ignoreGobDecoder(state); };
	Decoder.ptr.prototype.decOpFor = function(wireId, rt, name, inProgress) {
		var _1, _arg, _arg$1, _arg$10, _arg$11, _arg$12, _arg$13, _arg$14, _arg$15, _arg$2, _arg$3, _arg$4, _arg$5, _arg$6, _arg$7, _arg$8, _arg$9, _entry, _entry$1, _entry$2, _entry$3, _entry$4, _entry$5, _entry$6, _entry$7, _key, _r$22, _r$23, _r$24, _r$25, _r$26, _r$27, _r$28, _r$29, _r$30, _r$31, _r$32, _r$33, _r$34, _r$35, _r$36, _r$37, _r$38, _r$39, _r$40, _r$41, _tuple, _tuple$1, dec, elemId, elemId$1, elemId$2, elemOp, elemOp$1, elemOp$2, enginePtr, err, helper, helper$1, inProgress, k, keyId, keyOp, name, ok, op, opPtr, ovfl, ovfl$1, ovfl$2, rt, t, tt, typ, ut, ut$1, wireId, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$10 = $f._arg$10; _arg$11 = $f._arg$11; _arg$12 = $f._arg$12; _arg$13 = $f._arg$13; _arg$14 = $f._arg$14; _arg$15 = $f._arg$15; _arg$2 = $f._arg$2; _arg$3 = $f._arg$3; _arg$4 = $f._arg$4; _arg$5 = $f._arg$5; _arg$6 = $f._arg$6; _arg$7 = $f._arg$7; _arg$8 = $f._arg$8; _arg$9 = $f._arg$9; _entry = $f._entry; _entry$1 = $f._entry$1; _entry$2 = $f._entry$2; _entry$3 = $f._entry$3; _entry$4 = $f._entry$4; _entry$5 = $f._entry$5; _entry$6 = $f._entry$6; _entry$7 = $f._entry$7; _key = $f._key; _r$22 = $f._r$22; _r$23 = $f._r$23; _r$24 = $f._r$24; _r$25 = $f._r$25; _r$26 = $f._r$26; _r$27 = $f._r$27; _r$28 = $f._r$28; _r$29 = $f._r$29; _r$30 = $f._r$30; _r$31 = $f._r$31; _r$32 = $f._r$32; _r$33 = $f._r$33; _r$34 = $f._r$34; _r$35 = $f._r$35; _r$36 = $f._r$36; _r$37 = $f._r$37; _r$38 = $f._r$38; _r$39 = $f._r$39; _r$40 = $f._r$40; _r$41 = $f._r$41; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; dec = $f.dec; elemId = $f.elemId; elemId$1 = $f.elemId$1; elemId$2 = $f.elemId$2; elemOp = $f.elemOp; elemOp$1 = $f.elemOp$1; elemOp$2 = $f.elemOp$2; enginePtr = $f.enginePtr; err = $f.err; helper = $f.helper; helper$1 = $f.helper$1; inProgress = $f.inProgress; k = $f.k; keyId = $f.keyId; keyOp = $f.keyOp; name = $f.name; ok = $f.ok; op = $f.op; opPtr = $f.opPtr; ovfl = $f.ovfl; ovfl$1 = $f.ovfl$1; ovfl$2 = $f.ovfl$2; rt = $f.rt; t = $f.t; tt = $f.tt; typ = $f.typ; ut = $f.ut; ut$1 = $f.ut$1; wireId = $f.wireId; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		dec = [dec];
		elemOp = [elemOp];
		elemOp$1 = [elemOp$1];
		elemOp$2 = [elemOp$2];
		enginePtr = [enginePtr];
		helper = [helper];
		helper$1 = [helper$1];
		keyOp = [keyOp];
		op = [op];
		ovfl = [ovfl];
		ovfl$1 = [ovfl$1];
		ovfl$2 = [ovfl$2];
		t = [t];
		dec[0] = this;
		_r$22 = userType(rt); /* */ $s = 1; case 1: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
		ut = _r$22;
		/* */ if (!((ut.externalDec === 0))) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!((ut.externalDec === 0))) { */ case 2:
			_r$23 = dec[0].gobDecodeOpFor(ut); /* */ $s = 4; case 4: if($c) { $c = false; _r$23 = _r$23.$blk(); } if (_r$23 && _r$23.$blk !== undefined) { break s; }
			$s = -1; return _r$23;
		/* } */ case 3:
		opPtr = (_entry = inProgress[reflect.Type.keyFor(rt)], _entry !== undefined ? _entry.v : ptrType$31.nil);
		if (!(opPtr === ptrType$31.nil)) {
			$s = -1; return opPtr;
		}
		typ = ut.base;
		op[0] = $throwNilPointerError;
		_r$24 = typ.Kind(); /* */ $s = 5; case 5: if($c) { $c = false; _r$24 = _r$24.$blk(); } if (_r$24 && _r$24.$blk !== undefined) { break s; }
		k = _r$24;
		if (((k >> 0)) < 25) {
			op[0] = ((k < 0 || k >= decOpTable.length) ? ($throwRuntimeError("index out of range"), undefined) : decOpTable[k]);
		}
		/* */ if (op[0] === $throwNilPointerError) { $s = 6; continue; }
		/* */ $s = 7; continue;
		/* if (op[0] === $throwNilPointerError) { */ case 6:
			_key = rt; (inProgress || $throwRuntimeError("assignment to entry in nil map"))[reflect.Type.keyFor(_key)] = { k: _key, v: (op.$ptr || (op.$ptr = new ptrType$31(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, op))) };
				t[0] = typ;
				_r$25 = t[0].Kind(); /* */ $s = 9; case 9: if($c) { $c = false; _r$25 = _r$25.$blk(); } if (_r$25 && _r$25.$blk !== undefined) { break s; }
				_1 = _r$25;
				/* */ if (_1 === (17)) { $s = 10; continue; }
				/* */ if (_1 === (21)) { $s = 11; continue; }
				/* */ if (_1 === (23)) { $s = 12; continue; }
				/* */ if (_1 === (25)) { $s = 13; continue; }
				/* */ if (_1 === (20)) { $s = 14; continue; }
				/* */ $s = 15; continue;
				/* if (_1 === (17)) { */ case 10:
					name = "element of " + name;
					elemId = (_entry$1 = dec[0].wireType[typeId.keyFor(wireId)], _entry$1 !== undefined ? _entry$1.v : ptrType$32.nil).ArrayT.Elem;
					_arg = elemId;
					_r$26 = t[0].Elem(); /* */ $s = 16; case 16: if($c) { $c = false; _r$26 = _r$26.$blk(); } if (_r$26 && _r$26.$blk !== undefined) { break s; }
					_arg$1 = _r$26;
					_arg$2 = name;
					_arg$3 = inProgress;
					_r$27 = dec[0].decOpFor(_arg, _arg$1, _arg$2, _arg$3); /* */ $s = 17; case 17: if($c) { $c = false; _r$27 = _r$27.$blk(); } if (_r$27 && _r$27.$blk !== undefined) { break s; }
					elemOp[0] = _r$27;
					ovfl[0] = overflow(name);
					_r$28 = t[0].Elem(); /* */ $s = 18; case 18: if($c) { $c = false; _r$28 = _r$28.$blk(); } if (_r$28 && _r$28.$blk !== undefined) { break s; }
					_r$29 = _r$28.Kind(); /* */ $s = 19; case 19: if($c) { $c = false; _r$29 = _r$29.$blk(); } if (_r$29 && _r$29.$blk !== undefined) { break s; }
					helper[0] = (_entry$2 = decArrayHelper[reflect.Kind.keyFor(_r$29)], _entry$2 !== undefined ? _entry$2.v : $throwNilPointerError);
					op[0] = (function(dec, elemOp, elemOp$1, elemOp$2, enginePtr, helper, helper$1, keyOp, op, ovfl, ovfl$1, ovfl$2, t) { return function $b(i, state, value) {
						var _arg$4, _arg$5, _arg$6, _arg$7, _arg$8, _arg$9, _r$30, i, state, value, $s, $r;
						/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _arg$4 = $f._arg$4; _arg$5 = $f._arg$5; _arg$6 = $f._arg$6; _arg$7 = $f._arg$7; _arg$8 = $f._arg$8; _arg$9 = $f._arg$9; _r$30 = $f._r$30; i = $f.i; state = $f.state; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
						_arg$4 = state;
						_arg$5 = $clone(value, reflect.Value);
						_arg$6 = elemOp[0].$get();
						_r$30 = t[0].Len(); /* */ $s = 1; case 1: if($c) { $c = false; _r$30 = _r$30.$blk(); } if (_r$30 && _r$30.$blk !== undefined) { break s; }
						_arg$7 = _r$30;
						_arg$8 = ovfl[0];
						_arg$9 = helper[0];
						$r = state.dec.decodeArray(_arg$4, _arg$5, _arg$6, _arg$7, _arg$8, _arg$9); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						$s = -1; return;
						/* */ } return; } if ($f === undefined) { $f = { $blk: $b }; } $f._arg$4 = _arg$4; $f._arg$5 = _arg$5; $f._arg$6 = _arg$6; $f._arg$7 = _arg$7; $f._arg$8 = _arg$8; $f._arg$9 = _arg$9; $f._r$30 = _r$30; $f.i = i; $f.state = state; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;
					}; })(dec, elemOp, elemOp$1, elemOp$2, enginePtr, helper, helper$1, keyOp, op, ovfl, ovfl$1, ovfl$2, t);
					$s = 15; continue;
				/* } else if (_1 === (21)) { */ case 11:
					keyId = (_entry$3 = dec[0].wireType[typeId.keyFor(wireId)], _entry$3 !== undefined ? _entry$3.v : ptrType$32.nil).MapT.Key;
					elemId$1 = (_entry$4 = dec[0].wireType[typeId.keyFor(wireId)], _entry$4 !== undefined ? _entry$4.v : ptrType$32.nil).MapT.Elem;
					_arg$4 = keyId;
					_r$30 = t[0].Key(); /* */ $s = 20; case 20: if($c) { $c = false; _r$30 = _r$30.$blk(); } if (_r$30 && _r$30.$blk !== undefined) { break s; }
					_arg$5 = _r$30;
					_arg$6 = "key of " + name;
					_arg$7 = inProgress;
					_r$31 = dec[0].decOpFor(_arg$4, _arg$5, _arg$6, _arg$7); /* */ $s = 21; case 21: if($c) { $c = false; _r$31 = _r$31.$blk(); } if (_r$31 && _r$31.$blk !== undefined) { break s; }
					keyOp[0] = _r$31;
					_arg$8 = elemId$1;
					_r$32 = t[0].Elem(); /* */ $s = 22; case 22: if($c) { $c = false; _r$32 = _r$32.$blk(); } if (_r$32 && _r$32.$blk !== undefined) { break s; }
					_arg$9 = _r$32;
					_arg$10 = "element of " + name;
					_arg$11 = inProgress;
					_r$33 = dec[0].decOpFor(_arg$8, _arg$9, _arg$10, _arg$11); /* */ $s = 23; case 23: if($c) { $c = false; _r$33 = _r$33.$blk(); } if (_r$33 && _r$33.$blk !== undefined) { break s; }
					elemOp$1[0] = _r$33;
					ovfl$1[0] = overflow(name);
					op[0] = (function(dec, elemOp, elemOp$1, elemOp$2, enginePtr, helper, helper$1, keyOp, op, ovfl, ovfl$1, ovfl$2, t) { return function $b(i, state, value) {
						var i, state, value, $s, $r;
						/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; i = $f.i; state = $f.state; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
						$r = state.dec.decodeMap(t[0], state, $clone(value, reflect.Value), keyOp[0].$get(), elemOp$1[0].$get(), ovfl$1[0]); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						$s = -1; return;
						/* */ } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.i = i; $f.state = state; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;
					}; })(dec, elemOp, elemOp$1, elemOp$2, enginePtr, helper, helper$1, keyOp, op, ovfl, ovfl$1, ovfl$2, t);
					$s = 15; continue;
				/* } else if (_1 === (23)) { */ case 12:
					name = "element of " + name;
					_r$34 = t[0].Elem(); /* */ $s = 26; case 26: if($c) { $c = false; _r$34 = _r$34.$blk(); } if (_r$34 && _r$34.$blk !== undefined) { break s; }
					_r$35 = _r$34.Kind(); /* */ $s = 27; case 27: if($c) { $c = false; _r$35 = _r$35.$blk(); } if (_r$35 && _r$35.$blk !== undefined) { break s; }
					/* */ if (_r$35 === 8) { $s = 24; continue; }
					/* */ $s = 25; continue;
					/* if (_r$35 === 8) { */ case 24:
						op[0] = decUint8Slice;
						/* break; */ $s = 8; continue;
					/* } */ case 25:
					elemId$2 = 0;
					_tuple = (_entry$5 = builtinIdToType[typeId.keyFor(wireId)], _entry$5 !== undefined ? [_entry$5.v, true] : [$ifaceNil, false]);
					tt = _tuple[0];
					ok = _tuple[1];
					if (ok) {
						elemId$2 = $assertType(tt, ptrType$24).Elem;
					} else {
						elemId$2 = (_entry$6 = dec[0].wireType[typeId.keyFor(wireId)], _entry$6 !== undefined ? _entry$6.v : ptrType$32.nil).SliceT.Elem;
					}
					_arg$12 = elemId$2;
					_r$36 = t[0].Elem(); /* */ $s = 28; case 28: if($c) { $c = false; _r$36 = _r$36.$blk(); } if (_r$36 && _r$36.$blk !== undefined) { break s; }
					_arg$13 = _r$36;
					_arg$14 = name;
					_arg$15 = inProgress;
					_r$37 = dec[0].decOpFor(_arg$12, _arg$13, _arg$14, _arg$15); /* */ $s = 29; case 29: if($c) { $c = false; _r$37 = _r$37.$blk(); } if (_r$37 && _r$37.$blk !== undefined) { break s; }
					elemOp$2[0] = _r$37;
					ovfl$2[0] = overflow(name);
					_r$38 = t[0].Elem(); /* */ $s = 30; case 30: if($c) { $c = false; _r$38 = _r$38.$blk(); } if (_r$38 && _r$38.$blk !== undefined) { break s; }
					_r$39 = _r$38.Kind(); /* */ $s = 31; case 31: if($c) { $c = false; _r$39 = _r$39.$blk(); } if (_r$39 && _r$39.$blk !== undefined) { break s; }
					helper$1[0] = (_entry$7 = decSliceHelper[reflect.Kind.keyFor(_r$39)], _entry$7 !== undefined ? _entry$7.v : $throwNilPointerError);
					op[0] = (function(dec, elemOp, elemOp$1, elemOp$2, enginePtr, helper, helper$1, keyOp, op, ovfl, ovfl$1, ovfl$2, t) { return function $b(i, state, value) {
						var i, state, value, $s, $r;
						/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; i = $f.i; state = $f.state; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
						$r = state.dec.decodeSlice(state, $clone(value, reflect.Value), elemOp$2[0].$get(), ovfl$2[0], helper$1[0]); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						$s = -1; return;
						/* */ } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.i = i; $f.state = state; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;
					}; })(dec, elemOp, elemOp$1, elemOp$2, enginePtr, helper, helper$1, keyOp, op, ovfl, ovfl$1, ovfl$2, t);
					$s = 15; continue;
				/* } else if (_1 === (25)) { */ case 13:
					_r$40 = userType(typ); /* */ $s = 32; case 32: if($c) { $c = false; _r$40 = _r$40.$blk(); } if (_r$40 && _r$40.$blk !== undefined) { break s; }
					ut$1 = _r$40;
					_r$41 = dec[0].getDecEnginePtr(wireId, ut$1); /* */ $s = 33; case 33: if($c) { $c = false; _r$41 = _r$41.$blk(); } if (_r$41 && _r$41.$blk !== undefined) { break s; }
					_tuple$1 = _r$41;
					enginePtr[0] = _tuple$1[0];
					err = _tuple$1[1];
					if (!($interfaceIsEqual(err, $ifaceNil))) {
						error_(err);
					}
					op[0] = (function(dec, elemOp, elemOp$1, elemOp$2, enginePtr, helper, helper$1, keyOp, op, ovfl, ovfl$1, ovfl$2, t) { return function $b(i, state, value) {
						var i, state, value, $s, $r;
						/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; i = $f.i; state = $f.state; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
						$r = dec[0].decodeStruct(enginePtr[0].$get(), $clone(value, reflect.Value)); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						$s = -1; return;
						/* */ } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.i = i; $f.state = state; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;
					}; })(dec, elemOp, elemOp$1, elemOp$2, enginePtr, helper, helper$1, keyOp, op, ovfl, ovfl$1, ovfl$2, t);
					$s = 15; continue;
				/* } else if (_1 === (20)) { */ case 14:
					op[0] = (function(dec, elemOp, elemOp$1, elemOp$2, enginePtr, helper, helper$1, keyOp, op, ovfl, ovfl$1, ovfl$2, t) { return function $b(i, state, value) {
						var i, state, value, $s, $r;
						/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; i = $f.i; state = $f.state; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
						$r = state.dec.decodeInterface(t[0], state, $clone(value, reflect.Value)); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						$s = -1; return;
						/* */ } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.i = i; $f.state = state; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;
					}; })(dec, elemOp, elemOp$1, elemOp$2, enginePtr, helper, helper$1, keyOp, op, ovfl, ovfl$1, ovfl$2, t);
				/* } */ case 15:
			case 8:
		/* } */ case 7:
		/* */ if (op[0] === $throwNilPointerError) { $s = 34; continue; }
		/* */ $s = 35; continue;
		/* if (op[0] === $throwNilPointerError) { */ case 34:
			$r = errorf("decode can't handle type %s", new sliceType$1([rt])); /* */ $s = 36; case 36: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 35:
		$s = -1; return (op.$ptr || (op.$ptr = new ptrType$31(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, op)));
		/* */ } return; } if ($f === undefined) { $f = { $blk: Decoder.ptr.prototype.decOpFor }; } $f._1 = _1; $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$10 = _arg$10; $f._arg$11 = _arg$11; $f._arg$12 = _arg$12; $f._arg$13 = _arg$13; $f._arg$14 = _arg$14; $f._arg$15 = _arg$15; $f._arg$2 = _arg$2; $f._arg$3 = _arg$3; $f._arg$4 = _arg$4; $f._arg$5 = _arg$5; $f._arg$6 = _arg$6; $f._arg$7 = _arg$7; $f._arg$8 = _arg$8; $f._arg$9 = _arg$9; $f._entry = _entry; $f._entry$1 = _entry$1; $f._entry$2 = _entry$2; $f._entry$3 = _entry$3; $f._entry$4 = _entry$4; $f._entry$5 = _entry$5; $f._entry$6 = _entry$6; $f._entry$7 = _entry$7; $f._key = _key; $f._r$22 = _r$22; $f._r$23 = _r$23; $f._r$24 = _r$24; $f._r$25 = _r$25; $f._r$26 = _r$26; $f._r$27 = _r$27; $f._r$28 = _r$28; $f._r$29 = _r$29; $f._r$30 = _r$30; $f._r$31 = _r$31; $f._r$32 = _r$32; $f._r$33 = _r$33; $f._r$34 = _r$34; $f._r$35 = _r$35; $f._r$36 = _r$36; $f._r$37 = _r$37; $f._r$38 = _r$38; $f._r$39 = _r$39; $f._r$40 = _r$40; $f._r$41 = _r$41; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.dec = dec; $f.elemId = elemId; $f.elemId$1 = elemId$1; $f.elemId$2 = elemId$2; $f.elemOp = elemOp; $f.elemOp$1 = elemOp$1; $f.elemOp$2 = elemOp$2; $f.enginePtr = enginePtr; $f.err = err; $f.helper = helper; $f.helper$1 = helper$1; $f.inProgress = inProgress; $f.k = k; $f.keyId = keyId; $f.keyOp = keyOp; $f.name = name; $f.ok = ok; $f.op = op; $f.opPtr = opPtr; $f.ovfl = ovfl; $f.ovfl$1 = ovfl$1; $f.ovfl$2 = ovfl$2; $f.rt = rt; $f.t = t; $f.tt = tt; $f.typ = typ; $f.ut = ut; $f.ut$1 = ut$1; $f.wireId = wireId; $f.$s = $s; $f.$r = $r; return $f;
	};
	Decoder.prototype.decOpFor = function(wireId, rt, name, inProgress) { return this.$val.decOpFor(wireId, rt, name, inProgress); };
	Decoder.ptr.prototype.decIgnoreOpFor = function(wireId, inProgress) {
		var _arg, _arg$1, _entry, _entry$1, _entry$2, _entry$3, _entry$4, _key, _r$22, _r$23, _r$24, _r$25, _r$26, _r$27, _r$28, _tuple, _tuple$1, dec, elemId, elemId$1, elemId$2, elemOp, elemOp$1, elemOp$2, enginePtr, err, inProgress, keyId, keyOp, ok, op, opPtr, wire, wireId, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _arg = $f._arg; _arg$1 = $f._arg$1; _entry = $f._entry; _entry$1 = $f._entry$1; _entry$2 = $f._entry$2; _entry$3 = $f._entry$3; _entry$4 = $f._entry$4; _key = $f._key; _r$22 = $f._r$22; _r$23 = $f._r$23; _r$24 = $f._r$24; _r$25 = $f._r$25; _r$26 = $f._r$26; _r$27 = $f._r$27; _r$28 = $f._r$28; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; dec = $f.dec; elemId = $f.elemId; elemId$1 = $f.elemId$1; elemId$2 = $f.elemId$2; elemOp = $f.elemOp; elemOp$1 = $f.elemOp$1; elemOp$2 = $f.elemOp$2; enginePtr = $f.enginePtr; err = $f.err; inProgress = $f.inProgress; keyId = $f.keyId; keyOp = $f.keyOp; ok = $f.ok; op = $f.op; opPtr = $f.opPtr; wire = $f.wire; wireId = $f.wireId; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		elemOp = [elemOp];
		elemOp$1 = [elemOp$1];
		elemOp$2 = [elemOp$2];
		enginePtr = [enginePtr];
		keyOp = [keyOp];
		op = [op];
		wire = [wire];
		dec = this;
		opPtr = (_entry = inProgress[typeId.keyFor(wireId)], _entry !== undefined ? _entry.v : ptrType$31.nil);
		if (!(opPtr === ptrType$31.nil)) {
			$s = -1; return opPtr;
		}
		_tuple = (_entry$1 = decIgnoreOpMap[typeId.keyFor(wireId)], _entry$1 !== undefined ? [_entry$1.v, true] : [$throwNilPointerError, false]);
		op[0] = _tuple[0];
		ok = _tuple[1];
		/* */ if (!ok) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!ok) { */ case 1:
			_key = wireId; (inProgress || $throwRuntimeError("assignment to entry in nil map"))[typeId.keyFor(_key)] = { k: _key, v: (op.$ptr || (op.$ptr = new ptrType$31(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, op))) };
			/* */ if (wireId === tInterface) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (wireId === tInterface) { */ case 3:
				op[0] = (function(elemOp, elemOp$1, elemOp$2, enginePtr, keyOp, op, wire) { return function $b(i, state, value) {
					var i, state, value, $s, $r;
					/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; i = $f.i; state = $f.state; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
					$r = state.dec.ignoreInterface(state); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$s = -1; return;
					/* */ } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.i = i; $f.state = state; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;
				}; })(elemOp, elemOp$1, elemOp$2, enginePtr, keyOp, op, wire);
				$s = -1; return (op.$ptr || (op.$ptr = new ptrType$31(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, op)));
			/* } */ case 4:
			wire[0] = (_entry$2 = dec.wireType[typeId.keyFor(wireId)], _entry$2 !== undefined ? _entry$2.v : ptrType$32.nil);
				/* */ if (wire[0] === ptrType$32.nil) { $s = 6; continue; }
				/* */ if (!(wire[0].ArrayT === ptrType$23.nil)) { $s = 7; continue; }
				/* */ if (!(wire[0].MapT === ptrType$26.nil)) { $s = 8; continue; }
				/* */ if (!(wire[0].SliceT === ptrType$24.nil)) { $s = 9; continue; }
				/* */ if (!(wire[0].StructT === ptrType$25.nil)) { $s = 10; continue; }
				/* */ if ((!(wire[0].GobEncoderT === ptrType$27.nil)) || (!(wire[0].BinaryMarshalerT === ptrType$27.nil)) || (!(wire[0].TextMarshalerT === ptrType$27.nil))) { $s = 11; continue; }
				/* */ $s = 12; continue;
				/* if (wire[0] === ptrType$32.nil) { */ case 6:
					_r$22 = new typeId(wireId).string(); /* */ $s = 13; case 13: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
					_arg = new $String(_r$22);
					$r = errorf("bad data: undefined type %s", new sliceType$1([_arg])); /* */ $s = 14; case 14: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$s = 12; continue;
				/* } else if (!(wire[0].ArrayT === ptrType$23.nil)) { */ case 7:
					elemId = wire[0].ArrayT.Elem;
					_r$23 = dec.decIgnoreOpFor(elemId, inProgress); /* */ $s = 15; case 15: if($c) { $c = false; _r$23 = _r$23.$blk(); } if (_r$23 && _r$23.$blk !== undefined) { break s; }
					elemOp[0] = _r$23;
					op[0] = (function(elemOp, elemOp$1, elemOp$2, enginePtr, keyOp, op, wire) { return function $b(i, state, value) {
						var i, state, value, $s, $r;
						/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; i = $f.i; state = $f.state; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
						$r = state.dec.ignoreArray(state, elemOp[0].$get(), wire[0].ArrayT.Len); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						$s = -1; return;
						/* */ } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.i = i; $f.state = state; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;
					}; })(elemOp, elemOp$1, elemOp$2, enginePtr, keyOp, op, wire);
					$s = 12; continue;
				/* } else if (!(wire[0].MapT === ptrType$26.nil)) { */ case 8:
					keyId = (_entry$3 = dec.wireType[typeId.keyFor(wireId)], _entry$3 !== undefined ? _entry$3.v : ptrType$32.nil).MapT.Key;
					elemId$1 = (_entry$4 = dec.wireType[typeId.keyFor(wireId)], _entry$4 !== undefined ? _entry$4.v : ptrType$32.nil).MapT.Elem;
					_r$24 = dec.decIgnoreOpFor(keyId, inProgress); /* */ $s = 16; case 16: if($c) { $c = false; _r$24 = _r$24.$blk(); } if (_r$24 && _r$24.$blk !== undefined) { break s; }
					keyOp[0] = _r$24;
					_r$25 = dec.decIgnoreOpFor(elemId$1, inProgress); /* */ $s = 17; case 17: if($c) { $c = false; _r$25 = _r$25.$blk(); } if (_r$25 && _r$25.$blk !== undefined) { break s; }
					elemOp$1[0] = _r$25;
					op[0] = (function(elemOp, elemOp$1, elemOp$2, enginePtr, keyOp, op, wire) { return function $b(i, state, value) {
						var i, state, value, $s, $r;
						/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; i = $f.i; state = $f.state; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
						$r = state.dec.ignoreMap(state, keyOp[0].$get(), elemOp$1[0].$get()); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						$s = -1; return;
						/* */ } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.i = i; $f.state = state; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;
					}; })(elemOp, elemOp$1, elemOp$2, enginePtr, keyOp, op, wire);
					$s = 12; continue;
				/* } else if (!(wire[0].SliceT === ptrType$24.nil)) { */ case 9:
					elemId$2 = wire[0].SliceT.Elem;
					_r$26 = dec.decIgnoreOpFor(elemId$2, inProgress); /* */ $s = 18; case 18: if($c) { $c = false; _r$26 = _r$26.$blk(); } if (_r$26 && _r$26.$blk !== undefined) { break s; }
					elemOp$2[0] = _r$26;
					op[0] = (function(elemOp, elemOp$1, elemOp$2, enginePtr, keyOp, op, wire) { return function $b(i, state, value) {
						var i, state, value, $s, $r;
						/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; i = $f.i; state = $f.state; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
						$r = state.dec.ignoreSlice(state, elemOp$2[0].$get()); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						$s = -1; return;
						/* */ } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.i = i; $f.state = state; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;
					}; })(elemOp, elemOp$1, elemOp$2, enginePtr, keyOp, op, wire);
					$s = 12; continue;
				/* } else if (!(wire[0].StructT === ptrType$25.nil)) { */ case 10:
					_r$27 = dec.getIgnoreEnginePtr(wireId); /* */ $s = 19; case 19: if($c) { $c = false; _r$27 = _r$27.$blk(); } if (_r$27 && _r$27.$blk !== undefined) { break s; }
					_tuple$1 = _r$27;
					enginePtr[0] = _tuple$1[0];
					err = _tuple$1[1];
					if (!($interfaceIsEqual(err, $ifaceNil))) {
						error_(err);
					}
					op[0] = (function(elemOp, elemOp$1, elemOp$2, enginePtr, keyOp, op, wire) { return function $b(i, state, value) {
						var i, state, value, $s, $r;
						/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; i = $f.i; state = $f.state; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
						$r = state.dec.ignoreStruct(enginePtr[0].$get()); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						$s = -1; return;
						/* */ } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.i = i; $f.state = state; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;
					}; })(elemOp, elemOp$1, elemOp$2, enginePtr, keyOp, op, wire);
					$s = 12; continue;
				/* } else if ((!(wire[0].GobEncoderT === ptrType$27.nil)) || (!(wire[0].BinaryMarshalerT === ptrType$27.nil)) || (!(wire[0].TextMarshalerT === ptrType$27.nil))) { */ case 11:
					op[0] = (function(elemOp, elemOp$1, elemOp$2, enginePtr, keyOp, op, wire) { return function $b(i, state, value) {
						var i, state, value, $s, $r;
						/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; i = $f.i; state = $f.state; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
						$r = state.dec.ignoreGobDecoder(state); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						$s = -1; return;
						/* */ } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.i = i; $f.state = state; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;
					}; })(elemOp, elemOp$1, elemOp$2, enginePtr, keyOp, op, wire);
				/* } */ case 12:
			case 5:
		/* } */ case 2:
		/* */ if (op[0] === $throwNilPointerError) { $s = 20; continue; }
		/* */ $s = 21; continue;
		/* if (op[0] === $throwNilPointerError) { */ case 20:
			_r$28 = new typeId(wireId).string(); /* */ $s = 22; case 22: if($c) { $c = false; _r$28 = _r$28.$blk(); } if (_r$28 && _r$28.$blk !== undefined) { break s; }
			_arg$1 = new $String(_r$28);
			$r = errorf("bad data: ignore can't handle type %s", new sliceType$1([_arg$1])); /* */ $s = 23; case 23: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 21:
		$s = -1; return (op.$ptr || (op.$ptr = new ptrType$31(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, op)));
		/* */ } return; } if ($f === undefined) { $f = { $blk: Decoder.ptr.prototype.decIgnoreOpFor }; } $f._arg = _arg; $f._arg$1 = _arg$1; $f._entry = _entry; $f._entry$1 = _entry$1; $f._entry$2 = _entry$2; $f._entry$3 = _entry$3; $f._entry$4 = _entry$4; $f._key = _key; $f._r$22 = _r$22; $f._r$23 = _r$23; $f._r$24 = _r$24; $f._r$25 = _r$25; $f._r$26 = _r$26; $f._r$27 = _r$27; $f._r$28 = _r$28; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.dec = dec; $f.elemId = elemId; $f.elemId$1 = elemId$1; $f.elemId$2 = elemId$2; $f.elemOp = elemOp; $f.elemOp$1 = elemOp$1; $f.elemOp$2 = elemOp$2; $f.enginePtr = enginePtr; $f.err = err; $f.inProgress = inProgress; $f.keyId = keyId; $f.keyOp = keyOp; $f.ok = ok; $f.op = op; $f.opPtr = opPtr; $f.wire = wire; $f.wireId = wireId; $f.$s = $s; $f.$r = $r; return $f;
	};
	Decoder.prototype.decIgnoreOpFor = function(wireId, inProgress) { return this.$val.decIgnoreOpFor(wireId, inProgress); };
	Decoder.ptr.prototype.gobDecodeOpFor = function(ut) {
		var _r$22, dec, i, op, rcvrType, ut, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$22 = $f._r$22; dec = $f.dec; i = $f.i; op = $f.op; rcvrType = $f.rcvrType; ut = $f.ut; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		op = [op];
		rcvrType = [rcvrType];
		ut = [ut];
		dec = this;
		rcvrType[0] = ut[0].user;
		/* */ if (ut[0].decIndir === -1) { $s = 1; continue; }
		/* */ if (ut[0].decIndir > 0) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (ut[0].decIndir === -1) { */ case 1:
			rcvrType[0] = reflect.PtrTo(rcvrType[0]);
			$s = 3; continue;
		/* } else if (ut[0].decIndir > 0) { */ case 2:
			i = 0;
			/* while (true) { */ case 4:
				/* if (!(i < ut[0].decIndir)) { break; } */ if(!(i < ut[0].decIndir)) { $s = 5; continue; }
				_r$22 = rcvrType[0].Elem(); /* */ $s = 6; case 6: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
				rcvrType[0] = _r$22;
				i = i + (1) << 24 >> 24;
			/* } */ $s = 4; continue; case 5:
		/* } */ case 3:
		op[0] = $throwNilPointerError;
		op[0] = (function(op, rcvrType, ut) { return function $b(i$1, state, value) {
			var _r$23, _v, i$1, state, value, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$23 = $f._r$23; _v = $f._v; i$1 = $f.i$1; state = $f.state; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			if (!(!(($clone(value, reflect.Value).Kind() === 22)))) { _v = false; $s = 3; continue s; }
			_r$23 = rcvrType[0].Kind(); /* */ $s = 4; case 4: if($c) { $c = false; _r$23 = _r$23.$blk(); } if (_r$23 && _r$23.$blk !== undefined) { break s; }
			_v = _r$23 === 22; case 3:
			/* */ if (_v) { $s = 1; continue; }
			/* */ $s = 2; continue;
			/* if (_v) { */ case 1:
				value = $clone(value, reflect.Value).Addr();
			/* } */ case 2:
			$r = state.dec.decodeGobDecoder(ut[0], state, $clone(value, reflect.Value)); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = -1; return;
			/* */ } return; } if ($f === undefined) { $f = { $blk: $b }; } $f._r$23 = _r$23; $f._v = _v; $f.i$1 = i$1; $f.state = state; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;
		}; })(op, rcvrType, ut);
		$s = -1; return (op.$ptr || (op.$ptr = new ptrType$31(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, op)));
		/* */ } return; } if ($f === undefined) { $f = { $blk: Decoder.ptr.prototype.gobDecodeOpFor }; } $f._r$22 = _r$22; $f.dec = dec; $f.i = i; $f.op = op; $f.rcvrType = rcvrType; $f.ut = ut; $f.$s = $s; $f.$r = $r; return $f;
	};
	Decoder.prototype.gobDecodeOpFor = function(ut) { return this.$val.gobDecodeOpFor(ut); };
	Decoder.ptr.prototype.compatibleType = function(fr, fw, inProgress) {
		var MapType, _1, _entry, _entry$1, _entry$2, _key, _r$22, _r$23, _r$24, _r$25, _r$26, _r$27, _r$28, _r$29, _r$30, _r$31, _r$32, _r$33, _r$34, _r$35, _tuple, _tuple$1, _tuple$2, _tuple$3, _v, _v$1, _v$2, array, dec, elem, fr, fw, inProgress, ok, ok$1, ok$2, rhs, sw, t, tt, ut, wire, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; MapType = $f.MapType; _1 = $f._1; _entry = $f._entry; _entry$1 = $f._entry$1; _entry$2 = $f._entry$2; _key = $f._key; _r$22 = $f._r$22; _r$23 = $f._r$23; _r$24 = $f._r$24; _r$25 = $f._r$25; _r$26 = $f._r$26; _r$27 = $f._r$27; _r$28 = $f._r$28; _r$29 = $f._r$29; _r$30 = $f._r$30; _r$31 = $f._r$31; _r$32 = $f._r$32; _r$33 = $f._r$33; _r$34 = $f._r$34; _r$35 = $f._r$35; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; _v = $f._v; _v$1 = $f._v$1; _v$2 = $f._v$2; array = $f.array; dec = $f.dec; elem = $f.elem; fr = $f.fr; fw = $f.fw; inProgress = $f.inProgress; ok = $f.ok; ok$1 = $f.ok$1; ok$2 = $f.ok$2; rhs = $f.rhs; sw = $f.sw; t = $f.t; tt = $f.tt; ut = $f.ut; wire = $f.wire; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		dec = this;
		_tuple = (_entry = inProgress[reflect.Type.keyFor(fr)], _entry !== undefined ? [_entry.v, true] : [0, false]);
		rhs = _tuple[0];
		ok = _tuple[1];
		if (ok) {
			$s = -1; return rhs === fw;
		}
		_key = fr; (inProgress || $throwRuntimeError("assignment to entry in nil map"))[reflect.Type.keyFor(_key)] = { k: _key, v: fw };
		_r$22 = userType(fr); /* */ $s = 1; case 1: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
		ut = _r$22;
		_tuple$1 = (_entry$1 = dec.wireType[typeId.keyFor(fw)], _entry$1 !== undefined ? [_entry$1.v, true] : [ptrType$32.nil, false]);
		wire = _tuple$1[0];
		ok$1 = _tuple$1[1];
		if (!(((ut.externalDec === 1)) === (ok$1 && !(wire.GobEncoderT === ptrType$27.nil))) || !(((ut.externalDec === 2)) === (ok$1 && !(wire.BinaryMarshalerT === ptrType$27.nil))) || !(((ut.externalDec === 3)) === (ok$1 && !(wire.TextMarshalerT === ptrType$27.nil)))) {
			$s = -1; return false;
		}
		if (!((ut.externalDec === 0))) {
			$s = -1; return true;
		}
			t = ut.base;
			_r$23 = t.Kind(); /* */ $s = 3; case 3: if($c) { $c = false; _r$23 = _r$23.$blk(); } if (_r$23 && _r$23.$blk !== undefined) { break s; }
			_1 = _r$23;
			/* */ if (_1 === (1)) { $s = 4; continue; }
			/* */ if ((_1 === (2)) || (_1 === (3)) || (_1 === (4)) || (_1 === (5)) || (_1 === (6))) { $s = 5; continue; }
			/* */ if ((_1 === (7)) || (_1 === (8)) || (_1 === (9)) || (_1 === (10)) || (_1 === (11)) || (_1 === (12))) { $s = 6; continue; }
			/* */ if ((_1 === (13)) || (_1 === (14))) { $s = 7; continue; }
			/* */ if ((_1 === (15)) || (_1 === (16))) { $s = 8; continue; }
			/* */ if (_1 === (24)) { $s = 9; continue; }
			/* */ if (_1 === (20)) { $s = 10; continue; }
			/* */ if (_1 === (17)) { $s = 11; continue; }
			/* */ if (_1 === (21)) { $s = 12; continue; }
			/* */ if (_1 === (23)) { $s = 13; continue; }
			/* */ if (_1 === (25)) { $s = 14; continue; }
			/* */ $s = 15; continue;
			/* if (_1 === (1)) { */ case 4:
				$s = -1; return fw === tBool;
			/* } else if ((_1 === (2)) || (_1 === (3)) || (_1 === (4)) || (_1 === (5)) || (_1 === (6))) { */ case 5:
				$s = -1; return fw === tInt;
			/* } else if ((_1 === (7)) || (_1 === (8)) || (_1 === (9)) || (_1 === (10)) || (_1 === (11)) || (_1 === (12))) { */ case 6:
				$s = -1; return fw === tUint;
			/* } else if ((_1 === (13)) || (_1 === (14))) { */ case 7:
				$s = -1; return fw === tFloat;
			/* } else if ((_1 === (15)) || (_1 === (16))) { */ case 8:
				$s = -1; return fw === tComplex;
			/* } else if (_1 === (24)) { */ case 9:
				$s = -1; return fw === tString;
			/* } else if (_1 === (20)) { */ case 10:
				$s = -1; return fw === tInterface;
			/* } else if (_1 === (17)) { */ case 11:
				if (!ok$1 || wire.ArrayT === ptrType$23.nil) {
					$s = -1; return false;
				}
				array = wire.ArrayT;
				_r$24 = t.Len(); /* */ $s = 18; case 18: if($c) { $c = false; _r$24 = _r$24.$blk(); } if (_r$24 && _r$24.$blk !== undefined) { break s; }
				if (!(_r$24 === array.Len)) { _v = false; $s = 17; continue s; }
				_r$25 = t.Elem(); /* */ $s = 19; case 19: if($c) { $c = false; _r$25 = _r$25.$blk(); } if (_r$25 && _r$25.$blk !== undefined) { break s; }
				_r$26 = dec.compatibleType(_r$25, array.Elem, inProgress); /* */ $s = 20; case 20: if($c) { $c = false; _r$26 = _r$26.$blk(); } if (_r$26 && _r$26.$blk !== undefined) { break s; }
				_v = _r$26; case 17:
				$s = -1; return _v;
			/* } else if (_1 === (21)) { */ case 12:
				if (!ok$1 || wire.MapT === ptrType$26.nil) {
					$s = -1; return false;
				}
				MapType = wire.MapT;
				_r$27 = t.Key(); /* */ $s = 22; case 22: if($c) { $c = false; _r$27 = _r$27.$blk(); } if (_r$27 && _r$27.$blk !== undefined) { break s; }
				_r$28 = dec.compatibleType(_r$27, MapType.Key, inProgress); /* */ $s = 23; case 23: if($c) { $c = false; _r$28 = _r$28.$blk(); } if (_r$28 && _r$28.$blk !== undefined) { break s; }
				if (!(_r$28)) { _v$1 = false; $s = 21; continue s; }
				_r$29 = t.Elem(); /* */ $s = 24; case 24: if($c) { $c = false; _r$29 = _r$29.$blk(); } if (_r$29 && _r$29.$blk !== undefined) { break s; }
				_r$30 = dec.compatibleType(_r$29, MapType.Elem, inProgress); /* */ $s = 25; case 25: if($c) { $c = false; _r$30 = _r$30.$blk(); } if (_r$30 && _r$30.$blk !== undefined) { break s; }
				_v$1 = _r$30; case 21:
				$s = -1; return _v$1;
			/* } else if (_1 === (23)) { */ case 13:
				_r$31 = t.Elem(); /* */ $s = 28; case 28: if($c) { $c = false; _r$31 = _r$31.$blk(); } if (_r$31 && _r$31.$blk !== undefined) { break s; }
				_r$32 = _r$31.Kind(); /* */ $s = 29; case 29: if($c) { $c = false; _r$32 = _r$32.$blk(); } if (_r$32 && _r$32.$blk !== undefined) { break s; }
				/* */ if (_r$32 === 8) { $s = 26; continue; }
				/* */ $s = 27; continue;
				/* if (_r$32 === 8) { */ case 26:
					$s = -1; return fw === tBytes;
				/* } */ case 27:
				sw = ptrType$24.nil;
				_tuple$2 = (_entry$2 = builtinIdToType[typeId.keyFor(fw)], _entry$2 !== undefined ? [_entry$2.v, true] : [$ifaceNil, false]);
				tt = _tuple$2[0];
				ok$2 = _tuple$2[1];
				if (ok$2) {
					_tuple$3 = $assertType(tt, ptrType$24, true);
					sw = _tuple$3[0];
				} else if (!(wire === ptrType$32.nil)) {
					sw = wire.SliceT;
				}
				_r$33 = t.Elem(); /* */ $s = 30; case 30: if($c) { $c = false; _r$33 = _r$33.$blk(); } if (_r$33 && _r$33.$blk !== undefined) { break s; }
				_r$34 = userType(_r$33); /* */ $s = 31; case 31: if($c) { $c = false; _r$34 = _r$34.$blk(); } if (_r$34 && _r$34.$blk !== undefined) { break s; }
				elem = _r$34.base;
				if (!(!(sw === ptrType$24.nil))) { _v$2 = false; $s = 32; continue s; }
				_r$35 = dec.compatibleType(elem, sw.Elem, inProgress); /* */ $s = 33; case 33: if($c) { $c = false; _r$35 = _r$35.$blk(); } if (_r$35 && _r$35.$blk !== undefined) { break s; }
				_v$2 = _r$35; case 32:
				$s = -1; return _v$2;
			/* } else if (_1 === (25)) { */ case 14:
				$s = -1; return true;
			/* } else { */ case 15:
				$s = -1; return false;
			/* } */ case 16:
		case 2:
		$s = -1; return false;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Decoder.ptr.prototype.compatibleType }; } $f.MapType = MapType; $f._1 = _1; $f._entry = _entry; $f._entry$1 = _entry$1; $f._entry$2 = _entry$2; $f._key = _key; $f._r$22 = _r$22; $f._r$23 = _r$23; $f._r$24 = _r$24; $f._r$25 = _r$25; $f._r$26 = _r$26; $f._r$27 = _r$27; $f._r$28 = _r$28; $f._r$29 = _r$29; $f._r$30 = _r$30; $f._r$31 = _r$31; $f._r$32 = _r$32; $f._r$33 = _r$33; $f._r$34 = _r$34; $f._r$35 = _r$35; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f._v = _v; $f._v$1 = _v$1; $f._v$2 = _v$2; $f.array = array; $f.dec = dec; $f.elem = elem; $f.fr = fr; $f.fw = fw; $f.inProgress = inProgress; $f.ok = ok; $f.ok$1 = ok$1; $f.ok$2 = ok$2; $f.rhs = rhs; $f.sw = sw; $f.t = t; $f.tt = tt; $f.ut = ut; $f.wire = wire; $f.$s = $s; $f.$r = $r; return $f;
	};
	Decoder.prototype.compatibleType = function(fr, fw, inProgress) { return this.$val.compatibleType(fr, fw, inProgress); };
	Decoder.ptr.prototype.typeString = function(remoteId) {
		var _entry, _entry$1, _r$22, dec, remoteId, t, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _entry = $f._entry; _entry$1 = $f._entry$1; _r$22 = $f._r$22; dec = $f.dec; remoteId = $f.remoteId; t = $f.t; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		dec = this;
		typeLock.Lock();
		$deferred.push([$methodVal(typeLock, "Unlock"), []]);
		t = (_entry = idToType[typeId.keyFor(remoteId)], _entry !== undefined ? _entry.v : $ifaceNil);
		/* */ if (!($interfaceIsEqual(t, $ifaceNil))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!($interfaceIsEqual(t, $ifaceNil))) { */ case 1:
			_r$22 = t.string(); /* */ $s = 3; case 3: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
			$s = -1; return _r$22;
		/* } */ case 2:
		$s = -1; return (_entry$1 = dec.wireType[typeId.keyFor(remoteId)], _entry$1 !== undefined ? _entry$1.v : ptrType$32.nil).string();
		/* */ } return; } } catch(err) { $err = err; $s = -1; return ""; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: Decoder.ptr.prototype.typeString }; } $f._entry = _entry; $f._entry$1 = _entry$1; $f._r$22 = _r$22; $f.dec = dec; $f.remoteId = remoteId; $f.t = t; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	Decoder.prototype.typeString = function(remoteId) { return this.$val.typeString(remoteId); };
	Decoder.ptr.prototype.compileSingle = function(remoteId, ut) {
		var _r$22, _r$23, _r$24, _r$25, _r$26, _tmp, _tmp$1, _tmp$2, _tmp$3, dec, engine, err, name, op, ovfl, remoteId, remoteType, rt, ut, x$2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$22 = $f._r$22; _r$23 = $f._r$23; _r$24 = $f._r$24; _r$25 = $f._r$25; _r$26 = $f._r$26; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; dec = $f.dec; engine = $f.engine; err = $f.err; name = $f.name; op = $f.op; ovfl = $f.ovfl; remoteId = $f.remoteId; remoteType = $f.remoteType; rt = $f.rt; ut = $f.ut; x$2 = $f.x$2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		engine = ptrType$33.nil;
		err = $ifaceNil;
		dec = this;
		rt = ut.user;
		engine = new decEngine.ptr(sliceType$19.nil, 0);
		engine.instr = $makeSlice(sliceType$19, 1);
		_r$22 = rt.String(); /* */ $s = 1; case 1: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
		name = _r$22;
		_r$23 = dec.compatibleType(rt, remoteId, {}); /* */ $s = 4; case 4: if($c) { $c = false; _r$23 = _r$23.$blk(); } if (_r$23 && _r$23.$blk !== undefined) { break s; }
		/* */ if (!_r$23) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!_r$23) { */ case 2:
			_r$24 = dec.typeString(remoteId); /* */ $s = 5; case 5: if($c) { $c = false; _r$24 = _r$24.$blk(); } if (_r$24 && _r$24.$blk !== undefined) { break s; }
			remoteType = _r$24;
			_r$25 = ut.base.Kind(); /* */ $s = 8; case 8: if($c) { $c = false; _r$25 = _r$25.$blk(); } if (_r$25 && _r$25.$blk !== undefined) { break s; }
			/* */ if ((_r$25 === 20) && !((remoteId === tInterface))) { $s = 6; continue; }
			/* */ $s = 7; continue;
			/* if ((_r$25 === 20) && !((remoteId === tInterface))) { */ case 6:
				_tmp = ptrType$33.nil;
				_tmp$1 = errors.New("gob: local interface type " + name + " can only be decoded from remote interface type; received concrete type " + remoteType);
				engine = _tmp;
				err = _tmp$1;
				$s = -1; return [engine, err];
			/* } */ case 7:
			_tmp$2 = ptrType$33.nil;
			_tmp$3 = errors.New("gob: decoding into local type " + name + ", received remote type " + remoteType);
			engine = _tmp$2;
			err = _tmp$3;
			$s = -1; return [engine, err];
		/* } */ case 3:
		_r$26 = dec.decOpFor(remoteId, rt, name, {}); /* */ $s = 9; case 9: if($c) { $c = false; _r$26 = _r$26.$blk(); } if (_r$26 && _r$26.$blk !== undefined) { break s; }
		op = _r$26;
		ovfl = errors.New("value for \"" + name + "\" out of range");
		decInstr.copy((x$2 = engine.instr, (0 >= x$2.$length ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + 0])), new decInstr.ptr(op.$get(), 0, sliceType$8.nil, ovfl));
		engine.numInstr = 1;
		$s = -1; return [engine, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Decoder.ptr.prototype.compileSingle }; } $f._r$22 = _r$22; $f._r$23 = _r$23; $f._r$24 = _r$24; $f._r$25 = _r$25; $f._r$26 = _r$26; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f.dec = dec; $f.engine = engine; $f.err = err; $f.name = name; $f.op = op; $f.ovfl = ovfl; $f.remoteId = remoteId; $f.remoteType = remoteType; $f.rt = rt; $f.ut = ut; $f.x$2 = x$2; $f.$s = $s; $f.$r = $r; return $f;
	};
	Decoder.prototype.compileSingle = function(remoteId, ut) { return this.$val.compileSingle(remoteId, ut); };
	Decoder.ptr.prototype.compileIgnoreSingle = function(remoteId) {
		var _r$22, _r$23, _r$24, dec, engine, err, op, ovfl, remoteId, x$2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$22 = $f._r$22; _r$23 = $f._r$23; _r$24 = $f._r$24; dec = $f.dec; engine = $f.engine; err = $f.err; op = $f.op; ovfl = $f.ovfl; remoteId = $f.remoteId; x$2 = $f.x$2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		engine = ptrType$33.nil;
		err = $ifaceNil;
		dec = this;
		engine = new decEngine.ptr(sliceType$19.nil, 0);
		engine.instr = $makeSlice(sliceType$19, 1);
		_r$22 = dec.decIgnoreOpFor(remoteId, {}); /* */ $s = 1; case 1: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
		op = _r$22;
		_r$23 = dec.typeString(remoteId); /* */ $s = 2; case 2: if($c) { $c = false; _r$23 = _r$23.$blk(); } if (_r$23 && _r$23.$blk !== undefined) { break s; }
		_r$24 = overflow(_r$23); /* */ $s = 3; case 3: if($c) { $c = false; _r$24 = _r$24.$blk(); } if (_r$24 && _r$24.$blk !== undefined) { break s; }
		ovfl = _r$24;
		decInstr.copy((x$2 = engine.instr, (0 >= x$2.$length ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + 0])), new decInstr.ptr(op.$get(), 0, sliceType$8.nil, ovfl));
		engine.numInstr = 1;
		$s = -1; return [engine, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Decoder.ptr.prototype.compileIgnoreSingle }; } $f._r$22 = _r$22; $f._r$23 = _r$23; $f._r$24 = _r$24; $f.dec = dec; $f.engine = engine; $f.err = err; $f.op = op; $f.ovfl = ovfl; $f.remoteId = remoteId; $f.x$2 = x$2; $f.$s = $s; $f.$r = $r; return $f;
	};
	Decoder.prototype.compileIgnoreSingle = function(remoteId) { return this.$val.compileIgnoreSingle(remoteId); };
	Decoder.ptr.prototype.compileDec = function(remoteId, ut) {
		var _entry, _entry$1, _r$22, _r$23, _r$24, _r$25, _r$26, _r$27, _tuple, _tuple$1, _tuple$2, _tuple$3, dec, engine, err, fieldnum, localField, ok, op, op$1, ovfl, present, remoteId, rt, seen, srt, t, ut, wire, wireField, wireStruct, x$2, x$3, x$4, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _entry = $f._entry; _entry$1 = $f._entry$1; _r$22 = $f._r$22; _r$23 = $f._r$23; _r$24 = $f._r$24; _r$25 = $f._r$25; _r$26 = $f._r$26; _r$27 = $f._r$27; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; dec = $f.dec; engine = $f.engine; err = $f.err; fieldnum = $f.fieldnum; localField = $f.localField; ok = $f.ok; op = $f.op; op$1 = $f.op$1; ovfl = $f.ovfl; present = $f.present; remoteId = $f.remoteId; rt = $f.rt; seen = $f.seen; srt = $f.srt; t = $f.t; ut = $f.ut; wire = $f.wire; wireField = $f.wireField; wireStruct = $f.wireStruct; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		err = [err];
		engine = ptrType$33.nil;
		err[0] = $ifaceNil;
		dec = this;
		$deferred.push([catchError, [(err.$ptr || (err.$ptr = new ptrType$34(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, err)))]]);
		rt = ut.base;
		srt = rt;
		_r$22 = srt.Kind(); /* */ $s = 3; case 3: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
		/* */ if (!((_r$22 === 25)) || !((ut.externalDec === 0))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!((_r$22 === 25)) || !((ut.externalDec === 0))) { */ case 1:
			_r$23 = dec.compileSingle(remoteId, ut); /* */ $s = 4; case 4: if($c) { $c = false; _r$23 = _r$23.$blk(); } if (_r$23 && _r$23.$blk !== undefined) { break s; }
			_tuple = _r$23;
			engine = _tuple[0];
			err[0] = _tuple[1];
			$s = -1; return [engine, err[0]];
		/* } */ case 2:
		wireStruct = ptrType$25.nil;
		_tuple$1 = (_entry = builtinIdToType[typeId.keyFor(remoteId)], _entry !== undefined ? [_entry.v, true] : [$ifaceNil, false]);
		t = _tuple$1[0];
		ok = _tuple$1[1];
		if (ok) {
			_tuple$2 = $assertType(t, ptrType$25, true);
			wireStruct = _tuple$2[0];
		} else {
			wire = (_entry$1 = dec.wireType[typeId.keyFor(remoteId)], _entry$1 !== undefined ? _entry$1.v : ptrType$32.nil);
			if (wire === ptrType$32.nil) {
				error_(errBadType);
			}
			wireStruct = wire.StructT;
		}
		/* */ if (wireStruct === ptrType$25.nil) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if (wireStruct === ptrType$25.nil) { */ case 5:
			$r = errorf("type mismatch in decoder: want struct type %s; got non-struct", new sliceType$1([rt])); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 6:
		engine = new decEngine.ptr(sliceType$19.nil, 0);
		engine.instr = $makeSlice(sliceType$19, wireStruct.Field.$length);
		seen = {};
		fieldnum = 0;
		/* while (true) { */ case 8:
			/* if (!(fieldnum < wireStruct.Field.$length)) { break; } */ if(!(fieldnum < wireStruct.Field.$length)) { $s = 9; continue; }
			wireField = (x$2 = wireStruct.Field, ((fieldnum < 0 || fieldnum >= x$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + fieldnum]));
			/* */ if (wireField.Name === "") { $s = 10; continue; }
			/* */ $s = 11; continue;
			/* if (wireField.Name === "") { */ case 10:
				$r = errorf("empty name for remote field of type %s", new sliceType$1([new $String(wireStruct.CommonType.Name)])); /* */ $s = 12; case 12: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 11:
			ovfl = overflow(wireField.Name);
			_r$24 = srt.FieldByName(wireField.Name); /* */ $s = 13; case 13: if($c) { $c = false; _r$24 = _r$24.$blk(); } if (_r$24 && _r$24.$blk !== undefined) { break s; }
			_tuple$3 = _r$24;
			localField = $clone(_tuple$3[0], reflect.StructField);
			present = _tuple$3[1];
			/* */ if (!present || !isExported(wireField.Name)) { $s = 14; continue; }
			/* */ $s = 15; continue;
			/* if (!present || !isExported(wireField.Name)) { */ case 14:
				_r$25 = dec.decIgnoreOpFor(wireField.Id, {}); /* */ $s = 16; case 16: if($c) { $c = false; _r$25 = _r$25.$blk(); } if (_r$25 && _r$25.$blk !== undefined) { break s; }
				op = _r$25;
				decInstr.copy((x$3 = engine.instr, ((fieldnum < 0 || fieldnum >= x$3.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$3.$array[x$3.$offset + fieldnum])), new decInstr.ptr(op.$get(), fieldnum, sliceType$8.nil, ovfl));
				fieldnum = fieldnum + (1) >> 0;
				/* continue; */ $s = 8; continue;
			/* } */ case 15:
			_r$26 = dec.compatibleType(localField.Type, wireField.Id, {}); /* */ $s = 19; case 19: if($c) { $c = false; _r$26 = _r$26.$blk(); } if (_r$26 && _r$26.$blk !== undefined) { break s; }
			/* */ if (!_r$26) { $s = 17; continue; }
			/* */ $s = 18; continue;
			/* if (!_r$26) { */ case 17:
				$r = errorf("wrong type (%s) for received field %s.%s", new sliceType$1([localField.Type, new $String(wireStruct.CommonType.Name), new $String(wireField.Name)])); /* */ $s = 20; case 20: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 18:
			_r$27 = dec.decOpFor(wireField.Id, localField.Type, localField.Name, seen); /* */ $s = 21; case 21: if($c) { $c = false; _r$27 = _r$27.$blk(); } if (_r$27 && _r$27.$blk !== undefined) { break s; }
			op$1 = _r$27;
			decInstr.copy((x$4 = engine.instr, ((fieldnum < 0 || fieldnum >= x$4.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$4.$array[x$4.$offset + fieldnum])), new decInstr.ptr(op$1.$get(), fieldnum, localField.Index, ovfl));
			engine.numInstr = engine.numInstr + (1) >> 0;
			fieldnum = fieldnum + (1) >> 0;
		/* } */ $s = 8; continue; case 9:
		$s = -1; return [engine, err[0]];
		/* */ } return; } } catch(err) { $err = err; $s = -1; } finally { $callDeferred($deferred, $err); if (!$curGoroutine.asleep) { return  [engine, err[0]]; } if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: Decoder.ptr.prototype.compileDec }; } $f._entry = _entry; $f._entry$1 = _entry$1; $f._r$22 = _r$22; $f._r$23 = _r$23; $f._r$24 = _r$24; $f._r$25 = _r$25; $f._r$26 = _r$26; $f._r$27 = _r$27; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f.dec = dec; $f.engine = engine; $f.err = err; $f.fieldnum = fieldnum; $f.localField = localField; $f.ok = ok; $f.op = op; $f.op$1 = op$1; $f.ovfl = ovfl; $f.present = present; $f.remoteId = remoteId; $f.rt = rt; $f.seen = seen; $f.srt = srt; $f.t = t; $f.ut = ut; $f.wire = wire; $f.wireField = wireField; $f.wireStruct = wireStruct; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	Decoder.prototype.compileDec = function(remoteId, ut) { return this.$val.compileDec(remoteId, ut); };
	Decoder.ptr.prototype.getDecEnginePtr = function(remoteId, ut) {
		var _entry, _entry$1, _key, _key$1, _r$22, _tuple, _tuple$1, _tuple$2, dec, decoderMap, enginePtr, err, ok, remoteId, rt, ut, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _entry = $f._entry; _entry$1 = $f._entry$1; _key = $f._key; _key$1 = $f._key$1; _r$22 = $f._r$22; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; dec = $f.dec; decoderMap = $f.decoderMap; enginePtr = $f.enginePtr; err = $f.err; ok = $f.ok; remoteId = $f.remoteId; rt = $f.rt; ut = $f.ut; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		enginePtr = ptrType$35.nil;
		err = $ifaceNil;
		dec = this;
		rt = ut.user;
		_tuple = (_entry = dec.decoderCache[reflect.Type.keyFor(rt)], _entry !== undefined ? [_entry.v, true] : [false, false]);
		decoderMap = _tuple[0];
		ok = _tuple[1];
		if (!ok) {
			decoderMap = {};
			_key = rt; (dec.decoderCache || $throwRuntimeError("assignment to entry in nil map"))[reflect.Type.keyFor(_key)] = { k: _key, v: decoderMap };
		}
		_tuple$1 = (_entry$1 = decoderMap[typeId.keyFor(remoteId)], _entry$1 !== undefined ? [_entry$1.v, true] : [ptrType$35.nil, false]);
		enginePtr = _tuple$1[0];
		ok = _tuple$1[1];
		/* */ if (!ok) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!ok) { */ case 1:
			enginePtr = $newDataPointer(ptrType$33.nil, ptrType$35);
			_key$1 = remoteId; (decoderMap || $throwRuntimeError("assignment to entry in nil map"))[typeId.keyFor(_key$1)] = { k: _key$1, v: enginePtr };
			_r$22 = dec.compileDec(remoteId, ut); /* */ $s = 3; case 3: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
			_tuple$2 = _r$22;
			enginePtr.$set(_tuple$2[0]);
			err = _tuple$2[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				delete decoderMap[typeId.keyFor(remoteId)];
			}
		/* } */ case 2:
		$s = -1; return [enginePtr, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Decoder.ptr.prototype.getDecEnginePtr }; } $f._entry = _entry; $f._entry$1 = _entry$1; $f._key = _key; $f._key$1 = _key$1; $f._r$22 = _r$22; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f.dec = dec; $f.decoderMap = decoderMap; $f.enginePtr = enginePtr; $f.err = err; $f.ok = ok; $f.remoteId = remoteId; $f.rt = rt; $f.ut = ut; $f.$s = $s; $f.$r = $r; return $f;
	};
	Decoder.prototype.getDecEnginePtr = function(remoteId, ut) { return this.$val.getDecEnginePtr(remoteId, ut); };
	Decoder.ptr.prototype.getIgnoreEnginePtr = function(wireId) {
		var _arg, _arg$1, _entry, _entry$1, _key, _r$22, _r$23, _r$24, _tuple, _tuple$1, _tuple$2, dec, enginePtr, err, ok, wire, wireId, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _arg = $f._arg; _arg$1 = $f._arg$1; _entry = $f._entry; _entry$1 = $f._entry$1; _key = $f._key; _r$22 = $f._r$22; _r$23 = $f._r$23; _r$24 = $f._r$24; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; dec = $f.dec; enginePtr = $f.enginePtr; err = $f.err; ok = $f.ok; wire = $f.wire; wireId = $f.wireId; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		enginePtr = ptrType$35.nil;
		err = $ifaceNil;
		dec = this;
		ok = false;
		_tuple = (_entry = dec.ignorerCache[typeId.keyFor(wireId)], _entry !== undefined ? [_entry.v, true] : [ptrType$35.nil, false]);
		enginePtr = _tuple[0];
		ok = _tuple[1];
		/* */ if (!ok) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!ok) { */ case 1:
			enginePtr = $newDataPointer(ptrType$33.nil, ptrType$35);
			_key = wireId; (dec.ignorerCache || $throwRuntimeError("assignment to entry in nil map"))[typeId.keyFor(_key)] = { k: _key, v: enginePtr };
			wire = (_entry$1 = dec.wireType[typeId.keyFor(wireId)], _entry$1 !== undefined ? _entry$1.v : ptrType$32.nil);
			/* */ if (!(wire === ptrType$32.nil) && !(wire.StructT === ptrType$25.nil)) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (!(wire === ptrType$32.nil) && !(wire.StructT === ptrType$25.nil)) { */ case 3:
				_arg = wireId;
				_r$22 = userType(emptyStructType); /* */ $s = 6; case 6: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
				_arg$1 = _r$22;
				_r$23 = dec.compileDec(_arg, _arg$1); /* */ $s = 7; case 7: if($c) { $c = false; _r$23 = _r$23.$blk(); } if (_r$23 && _r$23.$blk !== undefined) { break s; }
				_tuple$1 = _r$23;
				enginePtr.$set(_tuple$1[0]);
				err = _tuple$1[1];
				$s = 5; continue;
			/* } else { */ case 4:
				_r$24 = dec.compileIgnoreSingle(wireId); /* */ $s = 8; case 8: if($c) { $c = false; _r$24 = _r$24.$blk(); } if (_r$24 && _r$24.$blk !== undefined) { break s; }
				_tuple$2 = _r$24;
				enginePtr.$set(_tuple$2[0]);
				err = _tuple$2[1];
			/* } */ case 5:
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				delete dec.ignorerCache[typeId.keyFor(wireId)];
			}
		/* } */ case 2:
		$s = -1; return [enginePtr, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Decoder.ptr.prototype.getIgnoreEnginePtr }; } $f._arg = _arg; $f._arg$1 = _arg$1; $f._entry = _entry; $f._entry$1 = _entry$1; $f._key = _key; $f._r$22 = _r$22; $f._r$23 = _r$23; $f._r$24 = _r$24; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f.dec = dec; $f.enginePtr = enginePtr; $f.err = err; $f.ok = ok; $f.wire = wire; $f.wireId = wireId; $f.$s = $s; $f.$r = $r; return $f;
	};
	Decoder.prototype.getIgnoreEnginePtr = function(wireId) { return this.$val.getIgnoreEnginePtr(wireId); };
	Decoder.ptr.prototype.decodeValue = function(wireId, value) {
		var _entry, _r$22, _r$23, _r$24, _r$25, _r$26, _r$27, _r$28, _tuple, _v, base, dec, engine, enginePtr, name, st, ut, value, wireId, wt, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _entry = $f._entry; _r$22 = $f._r$22; _r$23 = $f._r$23; _r$24 = $f._r$24; _r$25 = $f._r$25; _r$26 = $f._r$26; _r$27 = $f._r$27; _r$28 = $f._r$28; _tuple = $f._tuple; _v = $f._v; base = $f.base; dec = $f.dec; engine = $f.engine; enginePtr = $f.enginePtr; name = $f.name; st = $f.st; ut = $f.ut; value = $f.value; wireId = $f.wireId; wt = $f.wt; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		dec = this;
		$deferred.push([catchError, [(dec.$ptr_err || (dec.$ptr_err = new ptrType$34(function() { return this.$target.err; }, function($v) { this.$target.err = $v; }, dec)))]]);
		/* */ if (!$clone(value, reflect.Value).IsValid()) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!$clone(value, reflect.Value).IsValid()) { */ case 1:
			$r = dec.decodeIgnoredValue(wireId); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = -1; return;
		/* } */ case 2:
		_r$22 = $clone(value, reflect.Value).Type(); /* */ $s = 4; case 4: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
		_r$23 = userType(_r$22); /* */ $s = 5; case 5: if($c) { $c = false; _r$23 = _r$23.$blk(); } if (_r$23 && _r$23.$blk !== undefined) { break s; }
		ut = _r$23;
		base = ut.base;
		enginePtr = ptrType$35.nil;
		_r$24 = dec.getDecEnginePtr(wireId, ut); /* */ $s = 6; case 6: if($c) { $c = false; _r$24 = _r$24.$blk(); } if (_r$24 && _r$24.$blk !== undefined) { break s; }
		_tuple = _r$24;
		enginePtr = _tuple[0];
		dec.err = _tuple[1];
		if (!($interfaceIsEqual(dec.err, $ifaceNil))) {
			$s = -1; return;
		}
		_r$25 = decAlloc($clone(value, reflect.Value)); /* */ $s = 7; case 7: if($c) { $c = false; _r$25 = _r$25.$blk(); } if (_r$25 && _r$25.$blk !== undefined) { break s; }
		value = _r$25;
		engine = enginePtr.$get();
		st = base;
		_r$26 = st.Kind(); /* */ $s = 11; case 11: if($c) { $c = false; _r$26 = _r$26.$blk(); } if (_r$26 && _r$26.$blk !== undefined) { break s; }
		/* */ if ((_r$26 === 25) && (ut.externalDec === 0)) { $s = 8; continue; }
		/* */ $s = 9; continue;
		/* if ((_r$26 === 25) && (ut.externalDec === 0)) { */ case 8:
			wt = (_entry = dec.wireType[typeId.keyFor(wireId)], _entry !== undefined ? _entry.v : ptrType$32.nil);
			if (!(engine.numInstr === 0)) { _v = false; $s = 14; continue s; }
			_r$27 = st.NumField(); /* */ $s = 15; case 15: if($c) { $c = false; _r$27 = _r$27.$blk(); } if (_r$27 && _r$27.$blk !== undefined) { break s; }
			_v = _r$27 > 0; case 14:
			/* */ if (_v && !(wt === ptrType$32.nil) && wt.StructT.Field.$length > 0) { $s = 12; continue; }
			/* */ $s = 13; continue;
			/* if (_v && !(wt === ptrType$32.nil) && wt.StructT.Field.$length > 0) { */ case 12:
				_r$28 = base.Name(); /* */ $s = 16; case 16: if($c) { $c = false; _r$28 = _r$28.$blk(); } if (_r$28 && _r$28.$blk !== undefined) { break s; }
				name = _r$28;
				$r = errorf("type mismatch: no fields matched compiling decoder for %s", new sliceType$1([new $String(name)])); /* */ $s = 17; case 17: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 13:
			$r = dec.decodeStruct(engine, $clone(value, reflect.Value)); /* */ $s = 18; case 18: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 10; continue;
		/* } else { */ case 9:
			$r = dec.decodeSingle(engine, $clone(value, reflect.Value)); /* */ $s = 19; case 19: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 10:
		$s = -1; return;
		/* */ } return; } } catch(err) { $err = err; $s = -1; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: Decoder.ptr.prototype.decodeValue }; } $f._entry = _entry; $f._r$22 = _r$22; $f._r$23 = _r$23; $f._r$24 = _r$24; $f._r$25 = _r$25; $f._r$26 = _r$26; $f._r$27 = _r$27; $f._r$28 = _r$28; $f._tuple = _tuple; $f._v = _v; $f.base = base; $f.dec = dec; $f.engine = engine; $f.enginePtr = enginePtr; $f.name = name; $f.st = st; $f.ut = ut; $f.value = value; $f.wireId = wireId; $f.wt = wt; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	Decoder.prototype.decodeValue = function(wireId, value) { return this.$val.decodeValue(wireId, value); };
	Decoder.ptr.prototype.decodeIgnoredValue = function(wireId) {
		var _entry, _r$22, _tuple, dec, enginePtr, wire, wireId, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _entry = $f._entry; _r$22 = $f._r$22; _tuple = $f._tuple; dec = $f.dec; enginePtr = $f.enginePtr; wire = $f.wire; wireId = $f.wireId; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		dec = this;
		enginePtr = ptrType$35.nil;
		_r$22 = dec.getIgnoreEnginePtr(wireId); /* */ $s = 1; case 1: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
		_tuple = _r$22;
		enginePtr = _tuple[0];
		dec.err = _tuple[1];
		if (!($interfaceIsEqual(dec.err, $ifaceNil))) {
			$s = -1; return;
		}
		wire = (_entry = dec.wireType[typeId.keyFor(wireId)], _entry !== undefined ? _entry.v : ptrType$32.nil);
		/* */ if (!(wire === ptrType$32.nil) && !(wire.StructT === ptrType$25.nil)) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!(wire === ptrType$32.nil) && !(wire.StructT === ptrType$25.nil)) { */ case 2:
			$r = dec.ignoreStruct(enginePtr.$get()); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 4; continue;
		/* } else { */ case 3:
			$r = dec.ignoreSingle(enginePtr.$get()); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 4:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Decoder.ptr.prototype.decodeIgnoredValue }; } $f._entry = _entry; $f._r$22 = _r$22; $f._tuple = _tuple; $f.dec = dec; $f.enginePtr = enginePtr; $f.wire = wire; $f.wireId = wireId; $f.$s = $s; $f.$r = $r; return $f;
	};
	Decoder.prototype.decodeIgnoredValue = function(wireId) { return this.$val.decodeIgnoredValue(wireId); };
	init = function() {
		var _1, _2, _r$22, _r$23, _tmp, _tmp$1, iop, uop, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _2 = $f._2; _r$22 = $f._r$22; _r$23 = $f._r$23; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; iop = $f.iop; uop = $f.uop; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_tmp = $throwNilPointerError;
		_tmp$1 = $throwNilPointerError;
		iop = _tmp;
		uop = _tmp$1;
			_r$22 = reflect.TypeOf(new $Int(0)).Bits(); /* */ $s = 2; case 2: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
			_1 = _r$22;
			if (_1 === (32)) {
				iop = decInt32;
				uop = decUint32;
			} else if (_1 === (64)) {
				iop = decInt64;
				uop = decUint64;
			} else {
				$panic(new $String("gob: unknown size of int/uint"));
			}
		case 1:
		decOpTable[2] = iop;
		decOpTable[7] = uop;
			_r$23 = reflect.TypeOf(new $Uintptr(0)).Bits(); /* */ $s = 4; case 4: if($c) { $c = false; _r$23 = _r$23.$blk(); } if (_r$23 && _r$23.$blk !== undefined) { break s; }
			_2 = _r$23;
			if (_2 === (32)) {
				uop = decUint32;
			} else if (_2 === (64)) {
				uop = decUint64;
			} else {
				$panic(new $String("gob: unknown size of uintptr"));
			}
		case 3:
		decOpTable[12] = uop;
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: init }; } $f._1 = _1; $f._2 = _2; $f._r$22 = _r$22; $f._r$23 = _r$23; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f.iop = iop; $f.uop = uop; $f.$s = $s; $f.$r = $r; return $f;
	};
	allocValue = function(t) {
		var _r$22, _r$23, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$22 = $f._r$22; _r$23 = $f._r$23; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r$22 = reflect.New(t); /* */ $s = 1; case 1: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
		_r$23 = $clone(_r$22, reflect.Value).Elem(); /* */ $s = 2; case 2: if($c) { $c = false; _r$23 = _r$23.$blk(); } if (_r$23 && _r$23.$blk !== undefined) { break s; }
		$s = -1; return _r$23;
		/* */ } return; } if ($f === undefined) { $f = { $blk: allocValue }; } $f._r$22 = _r$22; $f._r$23 = _r$23; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	NewDecoder = function(r) {
		var _tuple, dec, ok, r;
		dec = new Decoder.ptr(new nosync.Mutex.ptr(false), $ifaceNil, new decBuffer.ptr(sliceType$2.nil, 0), false, false, false, ptrType$28.nil, sliceType$2.nil, $ifaceNil);
		_tuple = $assertType(r, io.ByteReader, true);
		ok = _tuple[1];
		if (!ok) {
			r = bufio.NewReader(r);
		}
		dec.r = r;
		dec.wireType = {};
		dec.decoderCache = {};
		dec.ignorerCache = {};
		dec.countBuf = $makeSlice(sliceType$2, 9);
		return dec;
	};
	$pkg.NewDecoder = NewDecoder;
	Decoder.ptr.prototype.recvType = function(id) {
		var _arg, _arg$1, _entry, _key, _r$22, dec, id, wire, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _arg = $f._arg; _arg$1 = $f._arg$1; _entry = $f._entry; _key = $f._key; _r$22 = $f._r$22; dec = $f.dec; id = $f.id; wire = $f.wire; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		dec = this;
		if (id < 64 || !((_entry = dec.wireType[typeId.keyFor(id)], _entry !== undefined ? _entry.v : ptrType$32.nil) === ptrType$32.nil)) {
			dec.err = errors.New("gob: duplicate type received");
			$s = -1; return;
		}
		wire = new wireType.ptr(ptrType$23.nil, ptrType$24.nil, ptrType$25.nil, ptrType$26.nil, ptrType$27.nil, ptrType$27.nil, ptrType$27.nil);
		_arg = tWireType;
		_r$22 = reflect.ValueOf(wire); /* */ $s = 1; case 1: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
		_arg$1 = $clone(_r$22, reflect.Value);
		$r = dec.decodeValue(_arg, _arg$1); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		if (!($interfaceIsEqual(dec.err, $ifaceNil))) {
			$s = -1; return;
		}
		_key = id; (dec.wireType || $throwRuntimeError("assignment to entry in nil map"))[typeId.keyFor(_key)] = { k: _key, v: wire };
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Decoder.ptr.prototype.recvType }; } $f._arg = _arg; $f._arg$1 = _arg$1; $f._entry = _entry; $f._key = _key; $f._r$22 = _r$22; $f.dec = dec; $f.id = id; $f.wire = wire; $f.$s = $s; $f.$r = $r; return $f;
	};
	Decoder.prototype.recvType = function(id) { return this.$val.recvType(id); };
	Decoder.ptr.prototype.recvMessage = function() {
		var _r$22, _tuple, dec, err, nbytes, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$22 = $f._r$22; _tuple = $f._tuple; dec = $f.dec; err = $f.err; nbytes = $f.nbytes; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		dec = this;
		_r$22 = decodeUintReader(dec.r, dec.countBuf); /* */ $s = 1; case 1: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
		_tuple = _r$22;
		nbytes = _tuple[0];
		err = _tuple[2];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			dec.err = err;
			$s = -1; return false;
		}
		if ((nbytes.$high > 0 || (nbytes.$high === 0 && nbytes.$low >= 1073741824))) {
			dec.err = errBadCount;
			$s = -1; return false;
		}
		$r = dec.readMessage(((nbytes.$low >> 0))); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return $interfaceIsEqual(dec.err, $ifaceNil);
		/* */ } return; } if ($f === undefined) { $f = { $blk: Decoder.ptr.prototype.recvMessage }; } $f._r$22 = _r$22; $f._tuple = _tuple; $f.dec = dec; $f.err = err; $f.nbytes = nbytes; $f.$s = $s; $f.$r = $r; return $f;
	};
	Decoder.prototype.recvMessage = function() { return this.$val.recvMessage(); };
	Decoder.ptr.prototype.readMessage = function(nbytes) {
		var _r$22, _tuple, dec, nbytes, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$22 = $f._r$22; _tuple = $f._tuple; dec = $f.dec; nbytes = $f.nbytes; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		dec = this;
		if (!((dec.buf.Len() === 0))) {
			$panic(new $String("non-empty decoder buffer"));
		}
		dec.buf.Size(nbytes);
		_r$22 = io.ReadFull(dec.r, dec.buf.Bytes()); /* */ $s = 1; case 1: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
		_tuple = _r$22;
		dec.err = _tuple[1];
		if ($interfaceIsEqual(dec.err, io.EOF)) {
			dec.err = io.ErrUnexpectedEOF;
		}
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Decoder.ptr.prototype.readMessage }; } $f._r$22 = _r$22; $f._tuple = _tuple; $f.dec = dec; $f.nbytes = nbytes; $f.$s = $s; $f.$r = $r; return $f;
	};
	Decoder.prototype.readMessage = function(nbytes) { return this.$val.readMessage(nbytes); };
	toInt = function(x$2) {
		var i, x$2, x$3, x$4;
		i = ((x$3 = $shiftRightUint64(x$2, 1), new $Int64(x$3.$high, x$3.$low)));
		if (!((x$4 = new $Uint64(x$2.$high & 0, (x$2.$low & 1) >>> 0), (x$4.$high === 0 && x$4.$low === 0)))) {
			i = new $Int64(~i.$high, ~i.$low >>> 0);
		}
		return i;
	};
	Decoder.ptr.prototype.nextInt = function() {
		var _r$22, _tuple, dec, err, n, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$22 = $f._r$22; _tuple = $f._tuple; dec = $f.dec; err = $f.err; n = $f.n; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		dec = this;
		_r$22 = decodeUintReader(dec.buf, dec.countBuf); /* */ $s = 1; case 1: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
		_tuple = _r$22;
		n = _tuple[0];
		err = _tuple[2];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			dec.err = err;
		}
		$s = -1; return toInt(n);
		/* */ } return; } if ($f === undefined) { $f = { $blk: Decoder.ptr.prototype.nextInt }; } $f._r$22 = _r$22; $f._tuple = _tuple; $f.dec = dec; $f.err = err; $f.n = n; $f.$s = $s; $f.$r = $r; return $f;
	};
	Decoder.prototype.nextInt = function() { return this.$val.nextInt(); };
	Decoder.ptr.prototype.nextUint = function() {
		var _r$22, _tuple, dec, err, n, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$22 = $f._r$22; _tuple = $f._tuple; dec = $f.dec; err = $f.err; n = $f.n; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		dec = this;
		_r$22 = decodeUintReader(dec.buf, dec.countBuf); /* */ $s = 1; case 1: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
		_tuple = _r$22;
		n = _tuple[0];
		err = _tuple[2];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			dec.err = err;
		}
		$s = -1; return n;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Decoder.ptr.prototype.nextUint }; } $f._r$22 = _r$22; $f._tuple = _tuple; $f.dec = dec; $f.err = err; $f.n = n; $f.$s = $s; $f.$r = $r; return $f;
	};
	Decoder.prototype.nextUint = function() { return this.$val.nextUint(); };
	Decoder.ptr.prototype.decodeTypeSequence = function(isInterface) {
		var _r$22, _r$23, _r$24, dec, id, isInterface, x$2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$22 = $f._r$22; _r$23 = $f._r$23; _r$24 = $f._r$24; dec = $f.dec; id = $f.id; isInterface = $f.isInterface; x$2 = $f.x$2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		dec = this;
		/* while (true) { */ case 1:
			/* if (!($interfaceIsEqual(dec.err, $ifaceNil))) { break; } */ if(!($interfaceIsEqual(dec.err, $ifaceNil))) { $s = 2; continue; }
			/* */ if (dec.buf.Len() === 0) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (dec.buf.Len() === 0) { */ case 3:
				_r$22 = dec.recvMessage(); /* */ $s = 7; case 7: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
				/* */ if (!_r$22) { $s = 5; continue; }
				/* */ $s = 6; continue;
				/* if (!_r$22) { */ case 5:
					/* break; */ $s = 2; continue;
				/* } */ case 6:
			/* } */ case 4:
			_r$23 = dec.nextInt(); /* */ $s = 8; case 8: if($c) { $c = false; _r$23 = _r$23.$blk(); } if (_r$23 && _r$23.$blk !== undefined) { break s; }
			id = (((x$2 = _r$23, x$2.$low + ((x$2.$high >> 31) * 4294967296)) >> 0));
			if (id >= 0) {
				$s = -1; return id;
			}
			$r = dec.recvType(-id); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* */ if (dec.buf.Len() > 0) { $s = 10; continue; }
			/* */ $s = 11; continue;
			/* if (dec.buf.Len() > 0) { */ case 10:
				if (!isInterface) {
					dec.err = errors.New("extra data in buffer");
					/* break; */ $s = 2; continue;
				}
				_r$24 = dec.nextUint(); /* */ $s = 12; case 12: if($c) { $c = false; _r$24 = _r$24.$blk(); } if (_r$24 && _r$24.$blk !== undefined) { break s; }
				_r$24;
			/* } */ case 11:
		/* } */ $s = 1; continue; case 2:
		$s = -1; return -1;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Decoder.ptr.prototype.decodeTypeSequence }; } $f._r$22 = _r$22; $f._r$23 = _r$23; $f._r$24 = _r$24; $f.dec = dec; $f.id = id; $f.isInterface = isInterface; $f.x$2 = x$2; $f.$s = $s; $f.$r = $r; return $f;
	};
	Decoder.prototype.decodeTypeSequence = function(isInterface) { return this.$val.decodeTypeSequence(isInterface); };
	Decoder.ptr.prototype.Decode = function(e) {
		var _r$22, _r$23, _r$24, _r$25, _r$26, dec, e, value, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$22 = $f._r$22; _r$23 = $f._r$23; _r$24 = $f._r$24; _r$25 = $f._r$25; _r$26 = $f._r$26; dec = $f.dec; e = $f.e; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		dec = this;
		/* */ if ($interfaceIsEqual(e, $ifaceNil)) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if ($interfaceIsEqual(e, $ifaceNil)) { */ case 1:
			_r$22 = dec.DecodeValue(new reflect.Value.ptr(ptrType.nil, 0, 0)); /* */ $s = 3; case 3: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
			$s = -1; return _r$22;
		/* } */ case 2:
		_r$23 = reflect.ValueOf(e); /* */ $s = 4; case 4: if($c) { $c = false; _r$23 = _r$23.$blk(); } if (_r$23 && _r$23.$blk !== undefined) { break s; }
		value = _r$23;
		_r$24 = $clone(value, reflect.Value).Type(); /* */ $s = 7; case 7: if($c) { $c = false; _r$24 = _r$24.$blk(); } if (_r$24 && _r$24.$blk !== undefined) { break s; }
		_r$25 = _r$24.Kind(); /* */ $s = 8; case 8: if($c) { $c = false; _r$25 = _r$25.$blk(); } if (_r$25 && _r$25.$blk !== undefined) { break s; }
		/* */ if (!((_r$25 === 22))) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if (!((_r$25 === 22))) { */ case 5:
			dec.err = errors.New("gob: attempt to decode into a non-pointer");
			$s = -1; return dec.err;
		/* } */ case 6:
		_r$26 = dec.DecodeValue($clone(value, reflect.Value)); /* */ $s = 9; case 9: if($c) { $c = false; _r$26 = _r$26.$blk(); } if (_r$26 && _r$26.$blk !== undefined) { break s; }
		$s = -1; return _r$26;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Decoder.ptr.prototype.Decode }; } $f._r$22 = _r$22; $f._r$23 = _r$23; $f._r$24 = _r$24; $f._r$25 = _r$25; $f._r$26 = _r$26; $f.dec = dec; $f.e = e; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;
	};
	Decoder.prototype.Decode = function(e) { return this.$val.Decode(e); };
	Decoder.ptr.prototype.DecodeValue = function(v) {
		var _r$22, dec, id, v, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$22 = $f._r$22; dec = $f.dec; id = $f.id; v = $f.v; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		dec = this;
		if ($clone(v, reflect.Value).IsValid()) {
			if (($clone(v, reflect.Value).Kind() === 22) && !$clone(v, reflect.Value).IsNil()) {
			} else if (!$clone(v, reflect.Value).CanSet()) {
				$s = -1; return errors.New("gob: DecodeValue of unassignable value");
			}
		}
		dec.mutex.Lock();
		$deferred.push([$methodVal(dec.mutex, "Unlock"), []]);
		dec.buf.Reset();
		dec.err = $ifaceNil;
		_r$22 = dec.decodeTypeSequence(false); /* */ $s = 1; case 1: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
		id = _r$22;
		/* */ if ($interfaceIsEqual(dec.err, $ifaceNil)) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if ($interfaceIsEqual(dec.err, $ifaceNil)) { */ case 2:
			$r = dec.decodeValue(id, $clone(v, reflect.Value)); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 3:
		$s = -1; return dec.err;
		/* */ } return; } } catch(err) { $err = err; $s = -1; return $ifaceNil; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: Decoder.ptr.prototype.DecodeValue }; } $f._r$22 = _r$22; $f.dec = dec; $f.id = id; $f.v = v; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	Decoder.prototype.DecodeValue = function(v) { return this.$val.DecodeValue(v); };
	encBoolArray = function(state, v) {
		var _arg, _arg$1, _r$22, _r$23, state, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _arg = $f._arg; _arg$1 = $f._arg$1; _r$22 = $f._r$22; _r$23 = $f._r$23; state = $f.state; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		if (!$clone(v, reflect.Value).CanAddr()) {
			$s = -1; return false;
		}
		_arg = state;
		_r$22 = $clone(v, reflect.Value).Slice(0, $clone(v, reflect.Value).Len()); /* */ $s = 1; case 1: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
		_arg$1 = $clone(_r$22, reflect.Value);
		_r$23 = encBoolSlice(_arg, _arg$1); /* */ $s = 2; case 2: if($c) { $c = false; _r$23 = _r$23.$blk(); } if (_r$23 && _r$23.$blk !== undefined) { break s; }
		$s = -1; return _r$23;
		/* */ } return; } if ($f === undefined) { $f = { $blk: encBoolArray }; } $f._arg = _arg; $f._arg$1 = _arg$1; $f._r$22 = _r$22; $f._r$23 = _r$23; $f.state = state; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	encBoolSlice = function(state, v) {
		var _i, _r$22, _ref, _tuple, ok, slice, state, v, x$2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _r$22 = $f._r$22; _ref = $f._ref; _tuple = $f._tuple; ok = $f.ok; slice = $f.slice; state = $f.state; v = $f.v; x$2 = $f.x$2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r$22 = $clone(v, reflect.Value).Interface(); /* */ $s = 1; case 1: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
		_tuple = $assertType(_r$22, sliceType$3, true);
		slice = _tuple[0];
		ok = _tuple[1];
		if (!ok) {
			$s = -1; return false;
		}
		_ref = slice;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			x$2 = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			if (!(x$2 === false) || state.sendZero) {
				if (x$2) {
					state.encodeUint(new $Uint64(0, 1));
				} else {
					state.encodeUint(new $Uint64(0, 0));
				}
			}
			_i++;
		}
		$s = -1; return true;
		/* */ } return; } if ($f === undefined) { $f = { $blk: encBoolSlice }; } $f._i = _i; $f._r$22 = _r$22; $f._ref = _ref; $f._tuple = _tuple; $f.ok = ok; $f.slice = slice; $f.state = state; $f.v = v; $f.x$2 = x$2; $f.$s = $s; $f.$r = $r; return $f;
	};
	encComplex64Array = function(state, v) {
		var _arg, _arg$1, _r$22, _r$23, state, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _arg = $f._arg; _arg$1 = $f._arg$1; _r$22 = $f._r$22; _r$23 = $f._r$23; state = $f.state; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		if (!$clone(v, reflect.Value).CanAddr()) {
			$s = -1; return false;
		}
		_arg = state;
		_r$22 = $clone(v, reflect.Value).Slice(0, $clone(v, reflect.Value).Len()); /* */ $s = 1; case 1: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
		_arg$1 = $clone(_r$22, reflect.Value);
		_r$23 = encComplex64Slice(_arg, _arg$1); /* */ $s = 2; case 2: if($c) { $c = false; _r$23 = _r$23.$blk(); } if (_r$23 && _r$23.$blk !== undefined) { break s; }
		$s = -1; return _r$23;
		/* */ } return; } if ($f === undefined) { $f = { $blk: encComplex64Array }; } $f._arg = _arg; $f._arg$1 = _arg$1; $f._r$22 = _r$22; $f._r$23 = _r$23; $f.state = state; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	encComplex64Slice = function(state, v) {
		var _i, _r$22, _ref, _tuple, ipart, ok, rpart, slice, state, v, x$2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _r$22 = $f._r$22; _ref = $f._ref; _tuple = $f._tuple; ipart = $f.ipart; ok = $f.ok; rpart = $f.rpart; slice = $f.slice; state = $f.state; v = $f.v; x$2 = $f.x$2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r$22 = $clone(v, reflect.Value).Interface(); /* */ $s = 1; case 1: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
		_tuple = $assertType(_r$22, sliceType$4, true);
		slice = _tuple[0];
		ok = _tuple[1];
		if (!ok) {
			$s = -1; return false;
		}
		_ref = slice;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			x$2 = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			if (!((x$2.$real === 0 && x$2.$imag === 0)) || state.sendZero) {
				rpart = floatBits((x$2.$real));
				ipart = floatBits((x$2.$imag));
				state.encodeUint(rpart);
				state.encodeUint(ipart);
			}
			_i++;
		}
		$s = -1; return true;
		/* */ } return; } if ($f === undefined) { $f = { $blk: encComplex64Slice }; } $f._i = _i; $f._r$22 = _r$22; $f._ref = _ref; $f._tuple = _tuple; $f.ipart = ipart; $f.ok = ok; $f.rpart = rpart; $f.slice = slice; $f.state = state; $f.v = v; $f.x$2 = x$2; $f.$s = $s; $f.$r = $r; return $f;
	};
	encComplex128Array = function(state, v) {
		var _arg, _arg$1, _r$22, _r$23, state, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _arg = $f._arg; _arg$1 = $f._arg$1; _r$22 = $f._r$22; _r$23 = $f._r$23; state = $f.state; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		if (!$clone(v, reflect.Value).CanAddr()) {
			$s = -1; return false;
		}
		_arg = state;
		_r$22 = $clone(v, reflect.Value).Slice(0, $clone(v, reflect.Value).Len()); /* */ $s = 1; case 1: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
		_arg$1 = $clone(_r$22, reflect.Value);
		_r$23 = encComplex128Slice(_arg, _arg$1); /* */ $s = 2; case 2: if($c) { $c = false; _r$23 = _r$23.$blk(); } if (_r$23 && _r$23.$blk !== undefined) { break s; }
		$s = -1; return _r$23;
		/* */ } return; } if ($f === undefined) { $f = { $blk: encComplex128Array }; } $f._arg = _arg; $f._arg$1 = _arg$1; $f._r$22 = _r$22; $f._r$23 = _r$23; $f.state = state; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	encComplex128Slice = function(state, v) {
		var _i, _r$22, _ref, _tuple, ipart, ok, rpart, slice, state, v, x$2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _r$22 = $f._r$22; _ref = $f._ref; _tuple = $f._tuple; ipart = $f.ipart; ok = $f.ok; rpart = $f.rpart; slice = $f.slice; state = $f.state; v = $f.v; x$2 = $f.x$2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r$22 = $clone(v, reflect.Value).Interface(); /* */ $s = 1; case 1: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
		_tuple = $assertType(_r$22, sliceType$5, true);
		slice = _tuple[0];
		ok = _tuple[1];
		if (!ok) {
			$s = -1; return false;
		}
		_ref = slice;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			x$2 = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			if (!((x$2.$real === 0 && x$2.$imag === 0)) || state.sendZero) {
				rpart = floatBits(x$2.$real);
				ipart = floatBits(x$2.$imag);
				state.encodeUint(rpart);
				state.encodeUint(ipart);
			}
			_i++;
		}
		$s = -1; return true;
		/* */ } return; } if ($f === undefined) { $f = { $blk: encComplex128Slice }; } $f._i = _i; $f._r$22 = _r$22; $f._ref = _ref; $f._tuple = _tuple; $f.ipart = ipart; $f.ok = ok; $f.rpart = rpart; $f.slice = slice; $f.state = state; $f.v = v; $f.x$2 = x$2; $f.$s = $s; $f.$r = $r; return $f;
	};
	encFloat32Array = function(state, v) {
		var _arg, _arg$1, _r$22, _r$23, state, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _arg = $f._arg; _arg$1 = $f._arg$1; _r$22 = $f._r$22; _r$23 = $f._r$23; state = $f.state; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		if (!$clone(v, reflect.Value).CanAddr()) {
			$s = -1; return false;
		}
		_arg = state;
		_r$22 = $clone(v, reflect.Value).Slice(0, $clone(v, reflect.Value).Len()); /* */ $s = 1; case 1: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
		_arg$1 = $clone(_r$22, reflect.Value);
		_r$23 = encFloat32Slice(_arg, _arg$1); /* */ $s = 2; case 2: if($c) { $c = false; _r$23 = _r$23.$blk(); } if (_r$23 && _r$23.$blk !== undefined) { break s; }
		$s = -1; return _r$23;
		/* */ } return; } if ($f === undefined) { $f = { $blk: encFloat32Array }; } $f._arg = _arg; $f._arg$1 = _arg$1; $f._r$22 = _r$22; $f._r$23 = _r$23; $f.state = state; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	encFloat32Slice = function(state, v) {
		var _i, _r$22, _ref, _tuple, bits$1, ok, slice, state, v, x$2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _r$22 = $f._r$22; _ref = $f._ref; _tuple = $f._tuple; bits$1 = $f.bits$1; ok = $f.ok; slice = $f.slice; state = $f.state; v = $f.v; x$2 = $f.x$2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r$22 = $clone(v, reflect.Value).Interface(); /* */ $s = 1; case 1: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
		_tuple = $assertType(_r$22, sliceType$6, true);
		slice = _tuple[0];
		ok = _tuple[1];
		if (!ok) {
			$s = -1; return false;
		}
		_ref = slice;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			x$2 = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			if (!((x$2 === 0)) || state.sendZero) {
				bits$1 = floatBits((x$2));
				state.encodeUint(bits$1);
			}
			_i++;
		}
		$s = -1; return true;
		/* */ } return; } if ($f === undefined) { $f = { $blk: encFloat32Slice }; } $f._i = _i; $f._r$22 = _r$22; $f._ref = _ref; $f._tuple = _tuple; $f.bits$1 = bits$1; $f.ok = ok; $f.slice = slice; $f.state = state; $f.v = v; $f.x$2 = x$2; $f.$s = $s; $f.$r = $r; return $f;
	};
	encFloat64Array = function(state, v) {
		var _arg, _arg$1, _r$22, _r$23, state, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _arg = $f._arg; _arg$1 = $f._arg$1; _r$22 = $f._r$22; _r$23 = $f._r$23; state = $f.state; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		if (!$clone(v, reflect.Value).CanAddr()) {
			$s = -1; return false;
		}
		_arg = state;
		_r$22 = $clone(v, reflect.Value).Slice(0, $clone(v, reflect.Value).Len()); /* */ $s = 1; case 1: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
		_arg$1 = $clone(_r$22, reflect.Value);
		_r$23 = encFloat64Slice(_arg, _arg$1); /* */ $s = 2; case 2: if($c) { $c = false; _r$23 = _r$23.$blk(); } if (_r$23 && _r$23.$blk !== undefined) { break s; }
		$s = -1; return _r$23;
		/* */ } return; } if ($f === undefined) { $f = { $blk: encFloat64Array }; } $f._arg = _arg; $f._arg$1 = _arg$1; $f._r$22 = _r$22; $f._r$23 = _r$23; $f.state = state; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	encFloat64Slice = function(state, v) {
		var _i, _r$22, _ref, _tuple, bits$1, ok, slice, state, v, x$2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _r$22 = $f._r$22; _ref = $f._ref; _tuple = $f._tuple; bits$1 = $f.bits$1; ok = $f.ok; slice = $f.slice; state = $f.state; v = $f.v; x$2 = $f.x$2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r$22 = $clone(v, reflect.Value).Interface(); /* */ $s = 1; case 1: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
		_tuple = $assertType(_r$22, sliceType$7, true);
		slice = _tuple[0];
		ok = _tuple[1];
		if (!ok) {
			$s = -1; return false;
		}
		_ref = slice;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			x$2 = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			if (!((x$2 === 0)) || state.sendZero) {
				bits$1 = floatBits(x$2);
				state.encodeUint(bits$1);
			}
			_i++;
		}
		$s = -1; return true;
		/* */ } return; } if ($f === undefined) { $f = { $blk: encFloat64Slice }; } $f._i = _i; $f._r$22 = _r$22; $f._ref = _ref; $f._tuple = _tuple; $f.bits$1 = bits$1; $f.ok = ok; $f.slice = slice; $f.state = state; $f.v = v; $f.x$2 = x$2; $f.$s = $s; $f.$r = $r; return $f;
	};
	encIntArray = function(state, v) {
		var _arg, _arg$1, _r$22, _r$23, state, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _arg = $f._arg; _arg$1 = $f._arg$1; _r$22 = $f._r$22; _r$23 = $f._r$23; state = $f.state; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		if (!$clone(v, reflect.Value).CanAddr()) {
			$s = -1; return false;
		}
		_arg = state;
		_r$22 = $clone(v, reflect.Value).Slice(0, $clone(v, reflect.Value).Len()); /* */ $s = 1; case 1: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
		_arg$1 = $clone(_r$22, reflect.Value);
		_r$23 = encIntSlice(_arg, _arg$1); /* */ $s = 2; case 2: if($c) { $c = false; _r$23 = _r$23.$blk(); } if (_r$23 && _r$23.$blk !== undefined) { break s; }
		$s = -1; return _r$23;
		/* */ } return; } if ($f === undefined) { $f = { $blk: encIntArray }; } $f._arg = _arg; $f._arg$1 = _arg$1; $f._r$22 = _r$22; $f._r$23 = _r$23; $f.state = state; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	encIntSlice = function(state, v) {
		var _i, _r$22, _ref, _tuple, ok, slice, state, v, x$2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _r$22 = $f._r$22; _ref = $f._ref; _tuple = $f._tuple; ok = $f.ok; slice = $f.slice; state = $f.state; v = $f.v; x$2 = $f.x$2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r$22 = $clone(v, reflect.Value).Interface(); /* */ $s = 1; case 1: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
		_tuple = $assertType(_r$22, sliceType$8, true);
		slice = _tuple[0];
		ok = _tuple[1];
		if (!ok) {
			$s = -1; return false;
		}
		_ref = slice;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			x$2 = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			if (!((x$2 === 0)) || state.sendZero) {
				state.encodeInt((new $Int64(0, x$2)));
			}
			_i++;
		}
		$s = -1; return true;
		/* */ } return; } if ($f === undefined) { $f = { $blk: encIntSlice }; } $f._i = _i; $f._r$22 = _r$22; $f._ref = _ref; $f._tuple = _tuple; $f.ok = ok; $f.slice = slice; $f.state = state; $f.v = v; $f.x$2 = x$2; $f.$s = $s; $f.$r = $r; return $f;
	};
	encInt16Array = function(state, v) {
		var _arg, _arg$1, _r$22, _r$23, state, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _arg = $f._arg; _arg$1 = $f._arg$1; _r$22 = $f._r$22; _r$23 = $f._r$23; state = $f.state; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		if (!$clone(v, reflect.Value).CanAddr()) {
			$s = -1; return false;
		}
		_arg = state;
		_r$22 = $clone(v, reflect.Value).Slice(0, $clone(v, reflect.Value).Len()); /* */ $s = 1; case 1: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
		_arg$1 = $clone(_r$22, reflect.Value);
		_r$23 = encInt16Slice(_arg, _arg$1); /* */ $s = 2; case 2: if($c) { $c = false; _r$23 = _r$23.$blk(); } if (_r$23 && _r$23.$blk !== undefined) { break s; }
		$s = -1; return _r$23;
		/* */ } return; } if ($f === undefined) { $f = { $blk: encInt16Array }; } $f._arg = _arg; $f._arg$1 = _arg$1; $f._r$22 = _r$22; $f._r$23 = _r$23; $f.state = state; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	encInt16Slice = function(state, v) {
		var _i, _r$22, _ref, _tuple, ok, slice, state, v, x$2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _r$22 = $f._r$22; _ref = $f._ref; _tuple = $f._tuple; ok = $f.ok; slice = $f.slice; state = $f.state; v = $f.v; x$2 = $f.x$2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r$22 = $clone(v, reflect.Value).Interface(); /* */ $s = 1; case 1: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
		_tuple = $assertType(_r$22, sliceType$9, true);
		slice = _tuple[0];
		ok = _tuple[1];
		if (!ok) {
			$s = -1; return false;
		}
		_ref = slice;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			x$2 = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			if (!((x$2 === 0)) || state.sendZero) {
				state.encodeInt((new $Int64(0, x$2)));
			}
			_i++;
		}
		$s = -1; return true;
		/* */ } return; } if ($f === undefined) { $f = { $blk: encInt16Slice }; } $f._i = _i; $f._r$22 = _r$22; $f._ref = _ref; $f._tuple = _tuple; $f.ok = ok; $f.slice = slice; $f.state = state; $f.v = v; $f.x$2 = x$2; $f.$s = $s; $f.$r = $r; return $f;
	};
	encInt32Array = function(state, v) {
		var _arg, _arg$1, _r$22, _r$23, state, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _arg = $f._arg; _arg$1 = $f._arg$1; _r$22 = $f._r$22; _r$23 = $f._r$23; state = $f.state; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		if (!$clone(v, reflect.Value).CanAddr()) {
			$s = -1; return false;
		}
		_arg = state;
		_r$22 = $clone(v, reflect.Value).Slice(0, $clone(v, reflect.Value).Len()); /* */ $s = 1; case 1: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
		_arg$1 = $clone(_r$22, reflect.Value);
		_r$23 = encInt32Slice(_arg, _arg$1); /* */ $s = 2; case 2: if($c) { $c = false; _r$23 = _r$23.$blk(); } if (_r$23 && _r$23.$blk !== undefined) { break s; }
		$s = -1; return _r$23;
		/* */ } return; } if ($f === undefined) { $f = { $blk: encInt32Array }; } $f._arg = _arg; $f._arg$1 = _arg$1; $f._r$22 = _r$22; $f._r$23 = _r$23; $f.state = state; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	encInt32Slice = function(state, v) {
		var _i, _r$22, _ref, _tuple, ok, slice, state, v, x$2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _r$22 = $f._r$22; _ref = $f._ref; _tuple = $f._tuple; ok = $f.ok; slice = $f.slice; state = $f.state; v = $f.v; x$2 = $f.x$2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r$22 = $clone(v, reflect.Value).Interface(); /* */ $s = 1; case 1: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
		_tuple = $assertType(_r$22, sliceType$10, true);
		slice = _tuple[0];
		ok = _tuple[1];
		if (!ok) {
			$s = -1; return false;
		}
		_ref = slice;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			x$2 = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			if (!((x$2 === 0)) || state.sendZero) {
				state.encodeInt((new $Int64(0, x$2)));
			}
			_i++;
		}
		$s = -1; return true;
		/* */ } return; } if ($f === undefined) { $f = { $blk: encInt32Slice }; } $f._i = _i; $f._r$22 = _r$22; $f._ref = _ref; $f._tuple = _tuple; $f.ok = ok; $f.slice = slice; $f.state = state; $f.v = v; $f.x$2 = x$2; $f.$s = $s; $f.$r = $r; return $f;
	};
	encInt64Array = function(state, v) {
		var _arg, _arg$1, _r$22, _r$23, state, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _arg = $f._arg; _arg$1 = $f._arg$1; _r$22 = $f._r$22; _r$23 = $f._r$23; state = $f.state; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		if (!$clone(v, reflect.Value).CanAddr()) {
			$s = -1; return false;
		}
		_arg = state;
		_r$22 = $clone(v, reflect.Value).Slice(0, $clone(v, reflect.Value).Len()); /* */ $s = 1; case 1: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
		_arg$1 = $clone(_r$22, reflect.Value);
		_r$23 = encInt64Slice(_arg, _arg$1); /* */ $s = 2; case 2: if($c) { $c = false; _r$23 = _r$23.$blk(); } if (_r$23 && _r$23.$blk !== undefined) { break s; }
		$s = -1; return _r$23;
		/* */ } return; } if ($f === undefined) { $f = { $blk: encInt64Array }; } $f._arg = _arg; $f._arg$1 = _arg$1; $f._r$22 = _r$22; $f._r$23 = _r$23; $f.state = state; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	encInt64Slice = function(state, v) {
		var _i, _r$22, _ref, _tuple, ok, slice, state, v, x$2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _r$22 = $f._r$22; _ref = $f._ref; _tuple = $f._tuple; ok = $f.ok; slice = $f.slice; state = $f.state; v = $f.v; x$2 = $f.x$2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r$22 = $clone(v, reflect.Value).Interface(); /* */ $s = 1; case 1: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
		_tuple = $assertType(_r$22, sliceType$11, true);
		slice = _tuple[0];
		ok = _tuple[1];
		if (!ok) {
			$s = -1; return false;
		}
		_ref = slice;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			x$2 = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			if (!((x$2.$high === 0 && x$2.$low === 0)) || state.sendZero) {
				state.encodeInt(x$2);
			}
			_i++;
		}
		$s = -1; return true;
		/* */ } return; } if ($f === undefined) { $f = { $blk: encInt64Slice }; } $f._i = _i; $f._r$22 = _r$22; $f._ref = _ref; $f._tuple = _tuple; $f.ok = ok; $f.slice = slice; $f.state = state; $f.v = v; $f.x$2 = x$2; $f.$s = $s; $f.$r = $r; return $f;
	};
	encInt8Array = function(state, v) {
		var _arg, _arg$1, _r$22, _r$23, state, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _arg = $f._arg; _arg$1 = $f._arg$1; _r$22 = $f._r$22; _r$23 = $f._r$23; state = $f.state; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		if (!$clone(v, reflect.Value).CanAddr()) {
			$s = -1; return false;
		}
		_arg = state;
		_r$22 = $clone(v, reflect.Value).Slice(0, $clone(v, reflect.Value).Len()); /* */ $s = 1; case 1: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
		_arg$1 = $clone(_r$22, reflect.Value);
		_r$23 = encInt8Slice(_arg, _arg$1); /* */ $s = 2; case 2: if($c) { $c = false; _r$23 = _r$23.$blk(); } if (_r$23 && _r$23.$blk !== undefined) { break s; }
		$s = -1; return _r$23;
		/* */ } return; } if ($f === undefined) { $f = { $blk: encInt8Array }; } $f._arg = _arg; $f._arg$1 = _arg$1; $f._r$22 = _r$22; $f._r$23 = _r$23; $f.state = state; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	encInt8Slice = function(state, v) {
		var _i, _r$22, _ref, _tuple, ok, slice, state, v, x$2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _r$22 = $f._r$22; _ref = $f._ref; _tuple = $f._tuple; ok = $f.ok; slice = $f.slice; state = $f.state; v = $f.v; x$2 = $f.x$2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r$22 = $clone(v, reflect.Value).Interface(); /* */ $s = 1; case 1: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
		_tuple = $assertType(_r$22, sliceType$12, true);
		slice = _tuple[0];
		ok = _tuple[1];
		if (!ok) {
			$s = -1; return false;
		}
		_ref = slice;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			x$2 = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			if (!((x$2 === 0)) || state.sendZero) {
				state.encodeInt((new $Int64(0, x$2)));
			}
			_i++;
		}
		$s = -1; return true;
		/* */ } return; } if ($f === undefined) { $f = { $blk: encInt8Slice }; } $f._i = _i; $f._r$22 = _r$22; $f._ref = _ref; $f._tuple = _tuple; $f.ok = ok; $f.slice = slice; $f.state = state; $f.v = v; $f.x$2 = x$2; $f.$s = $s; $f.$r = $r; return $f;
	};
	encStringArray = function(state, v) {
		var _arg, _arg$1, _r$22, _r$23, state, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _arg = $f._arg; _arg$1 = $f._arg$1; _r$22 = $f._r$22; _r$23 = $f._r$23; state = $f.state; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		if (!$clone(v, reflect.Value).CanAddr()) {
			$s = -1; return false;
		}
		_arg = state;
		_r$22 = $clone(v, reflect.Value).Slice(0, $clone(v, reflect.Value).Len()); /* */ $s = 1; case 1: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
		_arg$1 = $clone(_r$22, reflect.Value);
		_r$23 = encStringSlice(_arg, _arg$1); /* */ $s = 2; case 2: if($c) { $c = false; _r$23 = _r$23.$blk(); } if (_r$23 && _r$23.$blk !== undefined) { break s; }
		$s = -1; return _r$23;
		/* */ } return; } if ($f === undefined) { $f = { $blk: encStringArray }; } $f._arg = _arg; $f._arg$1 = _arg$1; $f._r$22 = _r$22; $f._r$23 = _r$23; $f.state = state; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	encStringSlice = function(state, v) {
		var _i, _r$22, _ref, _tuple, ok, slice, state, v, x$2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _r$22 = $f._r$22; _ref = $f._ref; _tuple = $f._tuple; ok = $f.ok; slice = $f.slice; state = $f.state; v = $f.v; x$2 = $f.x$2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r$22 = $clone(v, reflect.Value).Interface(); /* */ $s = 1; case 1: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
		_tuple = $assertType(_r$22, sliceType$13, true);
		slice = _tuple[0];
		ok = _tuple[1];
		if (!ok) {
			$s = -1; return false;
		}
		_ref = slice;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			x$2 = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			if (!(x$2 === "") || state.sendZero) {
				state.encodeUint((new $Uint64(0, x$2.length)));
				state.b.WriteString(x$2);
			}
			_i++;
		}
		$s = -1; return true;
		/* */ } return; } if ($f === undefined) { $f = { $blk: encStringSlice }; } $f._i = _i; $f._r$22 = _r$22; $f._ref = _ref; $f._tuple = _tuple; $f.ok = ok; $f.slice = slice; $f.state = state; $f.v = v; $f.x$2 = x$2; $f.$s = $s; $f.$r = $r; return $f;
	};
	encUintArray = function(state, v) {
		var _arg, _arg$1, _r$22, _r$23, state, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _arg = $f._arg; _arg$1 = $f._arg$1; _r$22 = $f._r$22; _r$23 = $f._r$23; state = $f.state; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		if (!$clone(v, reflect.Value).CanAddr()) {
			$s = -1; return false;
		}
		_arg = state;
		_r$22 = $clone(v, reflect.Value).Slice(0, $clone(v, reflect.Value).Len()); /* */ $s = 1; case 1: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
		_arg$1 = $clone(_r$22, reflect.Value);
		_r$23 = encUintSlice(_arg, _arg$1); /* */ $s = 2; case 2: if($c) { $c = false; _r$23 = _r$23.$blk(); } if (_r$23 && _r$23.$blk !== undefined) { break s; }
		$s = -1; return _r$23;
		/* */ } return; } if ($f === undefined) { $f = { $blk: encUintArray }; } $f._arg = _arg; $f._arg$1 = _arg$1; $f._r$22 = _r$22; $f._r$23 = _r$23; $f.state = state; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	encUintSlice = function(state, v) {
		var _i, _r$22, _ref, _tuple, ok, slice, state, v, x$2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _r$22 = $f._r$22; _ref = $f._ref; _tuple = $f._tuple; ok = $f.ok; slice = $f.slice; state = $f.state; v = $f.v; x$2 = $f.x$2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r$22 = $clone(v, reflect.Value).Interface(); /* */ $s = 1; case 1: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
		_tuple = $assertType(_r$22, sliceType$14, true);
		slice = _tuple[0];
		ok = _tuple[1];
		if (!ok) {
			$s = -1; return false;
		}
		_ref = slice;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			x$2 = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			if (!((x$2 === 0)) || state.sendZero) {
				state.encodeUint((new $Uint64(0, x$2)));
			}
			_i++;
		}
		$s = -1; return true;
		/* */ } return; } if ($f === undefined) { $f = { $blk: encUintSlice }; } $f._i = _i; $f._r$22 = _r$22; $f._ref = _ref; $f._tuple = _tuple; $f.ok = ok; $f.slice = slice; $f.state = state; $f.v = v; $f.x$2 = x$2; $f.$s = $s; $f.$r = $r; return $f;
	};
	encUint16Array = function(state, v) {
		var _arg, _arg$1, _r$22, _r$23, state, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _arg = $f._arg; _arg$1 = $f._arg$1; _r$22 = $f._r$22; _r$23 = $f._r$23; state = $f.state; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		if (!$clone(v, reflect.Value).CanAddr()) {
			$s = -1; return false;
		}
		_arg = state;
		_r$22 = $clone(v, reflect.Value).Slice(0, $clone(v, reflect.Value).Len()); /* */ $s = 1; case 1: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
		_arg$1 = $clone(_r$22, reflect.Value);
		_r$23 = encUint16Slice(_arg, _arg$1); /* */ $s = 2; case 2: if($c) { $c = false; _r$23 = _r$23.$blk(); } if (_r$23 && _r$23.$blk !== undefined) { break s; }
		$s = -1; return _r$23;
		/* */ } return; } if ($f === undefined) { $f = { $blk: encUint16Array }; } $f._arg = _arg; $f._arg$1 = _arg$1; $f._r$22 = _r$22; $f._r$23 = _r$23; $f.state = state; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	encUint16Slice = function(state, v) {
		var _i, _r$22, _ref, _tuple, ok, slice, state, v, x$2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _r$22 = $f._r$22; _ref = $f._ref; _tuple = $f._tuple; ok = $f.ok; slice = $f.slice; state = $f.state; v = $f.v; x$2 = $f.x$2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r$22 = $clone(v, reflect.Value).Interface(); /* */ $s = 1; case 1: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
		_tuple = $assertType(_r$22, sliceType$15, true);
		slice = _tuple[0];
		ok = _tuple[1];
		if (!ok) {
			$s = -1; return false;
		}
		_ref = slice;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			x$2 = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			if (!((x$2 === 0)) || state.sendZero) {
				state.encodeUint((new $Uint64(0, x$2)));
			}
			_i++;
		}
		$s = -1; return true;
		/* */ } return; } if ($f === undefined) { $f = { $blk: encUint16Slice }; } $f._i = _i; $f._r$22 = _r$22; $f._ref = _ref; $f._tuple = _tuple; $f.ok = ok; $f.slice = slice; $f.state = state; $f.v = v; $f.x$2 = x$2; $f.$s = $s; $f.$r = $r; return $f;
	};
	encUint32Array = function(state, v) {
		var _arg, _arg$1, _r$22, _r$23, state, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _arg = $f._arg; _arg$1 = $f._arg$1; _r$22 = $f._r$22; _r$23 = $f._r$23; state = $f.state; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		if (!$clone(v, reflect.Value).CanAddr()) {
			$s = -1; return false;
		}
		_arg = state;
		_r$22 = $clone(v, reflect.Value).Slice(0, $clone(v, reflect.Value).Len()); /* */ $s = 1; case 1: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
		_arg$1 = $clone(_r$22, reflect.Value);
		_r$23 = encUint32Slice(_arg, _arg$1); /* */ $s = 2; case 2: if($c) { $c = false; _r$23 = _r$23.$blk(); } if (_r$23 && _r$23.$blk !== undefined) { break s; }
		$s = -1; return _r$23;
		/* */ } return; } if ($f === undefined) { $f = { $blk: encUint32Array }; } $f._arg = _arg; $f._arg$1 = _arg$1; $f._r$22 = _r$22; $f._r$23 = _r$23; $f.state = state; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	encUint32Slice = function(state, v) {
		var _i, _r$22, _ref, _tuple, ok, slice, state, v, x$2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _r$22 = $f._r$22; _ref = $f._ref; _tuple = $f._tuple; ok = $f.ok; slice = $f.slice; state = $f.state; v = $f.v; x$2 = $f.x$2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r$22 = $clone(v, reflect.Value).Interface(); /* */ $s = 1; case 1: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
		_tuple = $assertType(_r$22, sliceType$16, true);
		slice = _tuple[0];
		ok = _tuple[1];
		if (!ok) {
			$s = -1; return false;
		}
		_ref = slice;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			x$2 = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			if (!((x$2 === 0)) || state.sendZero) {
				state.encodeUint((new $Uint64(0, x$2)));
			}
			_i++;
		}
		$s = -1; return true;
		/* */ } return; } if ($f === undefined) { $f = { $blk: encUint32Slice }; } $f._i = _i; $f._r$22 = _r$22; $f._ref = _ref; $f._tuple = _tuple; $f.ok = ok; $f.slice = slice; $f.state = state; $f.v = v; $f.x$2 = x$2; $f.$s = $s; $f.$r = $r; return $f;
	};
	encUint64Array = function(state, v) {
		var _arg, _arg$1, _r$22, _r$23, state, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _arg = $f._arg; _arg$1 = $f._arg$1; _r$22 = $f._r$22; _r$23 = $f._r$23; state = $f.state; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		if (!$clone(v, reflect.Value).CanAddr()) {
			$s = -1; return false;
		}
		_arg = state;
		_r$22 = $clone(v, reflect.Value).Slice(0, $clone(v, reflect.Value).Len()); /* */ $s = 1; case 1: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
		_arg$1 = $clone(_r$22, reflect.Value);
		_r$23 = encUint64Slice(_arg, _arg$1); /* */ $s = 2; case 2: if($c) { $c = false; _r$23 = _r$23.$blk(); } if (_r$23 && _r$23.$blk !== undefined) { break s; }
		$s = -1; return _r$23;
		/* */ } return; } if ($f === undefined) { $f = { $blk: encUint64Array }; } $f._arg = _arg; $f._arg$1 = _arg$1; $f._r$22 = _r$22; $f._r$23 = _r$23; $f.state = state; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	encUint64Slice = function(state, v) {
		var _i, _r$22, _ref, _tuple, ok, slice, state, v, x$2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _r$22 = $f._r$22; _ref = $f._ref; _tuple = $f._tuple; ok = $f.ok; slice = $f.slice; state = $f.state; v = $f.v; x$2 = $f.x$2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r$22 = $clone(v, reflect.Value).Interface(); /* */ $s = 1; case 1: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
		_tuple = $assertType(_r$22, sliceType$17, true);
		slice = _tuple[0];
		ok = _tuple[1];
		if (!ok) {
			$s = -1; return false;
		}
		_ref = slice;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			x$2 = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			if (!((x$2.$high === 0 && x$2.$low === 0)) || state.sendZero) {
				state.encodeUint(x$2);
			}
			_i++;
		}
		$s = -1; return true;
		/* */ } return; } if ($f === undefined) { $f = { $blk: encUint64Slice }; } $f._i = _i; $f._r$22 = _r$22; $f._ref = _ref; $f._tuple = _tuple; $f.ok = ok; $f.slice = slice; $f.state = state; $f.v = v; $f.x$2 = x$2; $f.$s = $s; $f.$r = $r; return $f;
	};
	encUintptrArray = function(state, v) {
		var _arg, _arg$1, _r$22, _r$23, state, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _arg = $f._arg; _arg$1 = $f._arg$1; _r$22 = $f._r$22; _r$23 = $f._r$23; state = $f.state; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		if (!$clone(v, reflect.Value).CanAddr()) {
			$s = -1; return false;
		}
		_arg = state;
		_r$22 = $clone(v, reflect.Value).Slice(0, $clone(v, reflect.Value).Len()); /* */ $s = 1; case 1: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
		_arg$1 = $clone(_r$22, reflect.Value);
		_r$23 = encUintptrSlice(_arg, _arg$1); /* */ $s = 2; case 2: if($c) { $c = false; _r$23 = _r$23.$blk(); } if (_r$23 && _r$23.$blk !== undefined) { break s; }
		$s = -1; return _r$23;
		/* */ } return; } if ($f === undefined) { $f = { $blk: encUintptrArray }; } $f._arg = _arg; $f._arg$1 = _arg$1; $f._r$22 = _r$22; $f._r$23 = _r$23; $f.state = state; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	encUintptrSlice = function(state, v) {
		var _i, _r$22, _ref, _tuple, ok, slice, state, v, x$2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _r$22 = $f._r$22; _ref = $f._ref; _tuple = $f._tuple; ok = $f.ok; slice = $f.slice; state = $f.state; v = $f.v; x$2 = $f.x$2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r$22 = $clone(v, reflect.Value).Interface(); /* */ $s = 1; case 1: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
		_tuple = $assertType(_r$22, sliceType$18, true);
		slice = _tuple[0];
		ok = _tuple[1];
		if (!ok) {
			$s = -1; return false;
		}
		_ref = slice;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			x$2 = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			if (!((x$2 === 0)) || state.sendZero) {
				state.encodeUint((new $Uint64(0, x$2.constructor === Number ? x$2 : 1)));
			}
			_i++;
		}
		$s = -1; return true;
		/* */ } return; } if ($f === undefined) { $f = { $blk: encUintptrSlice }; } $f._i = _i; $f._r$22 = _r$22; $f._ref = _ref; $f._tuple = _tuple; $f.ok = ok; $f.slice = slice; $f.state = state; $f.v = v; $f.x$2 = x$2; $f.$s = $s; $f.$r = $r; return $f;
	};
	encBuffer.ptr.prototype.WriteByte = function(c) {
		var c, e;
		e = this;
		e.data = $append(e.data, c);
	};
	encBuffer.prototype.WriteByte = function(c) { return this.$val.WriteByte(c); };
	encBuffer.ptr.prototype.Write = function(p) {
		var e, p;
		e = this;
		e.data = $appendSlice(e.data, p);
		return [p.$length, $ifaceNil];
	};
	encBuffer.prototype.Write = function(p) { return this.$val.Write(p); };
	encBuffer.ptr.prototype.WriteString = function(s) {
		var e, s;
		e = this;
		e.data = $appendSlice(e.data, s);
	};
	encBuffer.prototype.WriteString = function(s) { return this.$val.WriteString(s); };
	encBuffer.ptr.prototype.Len = function() {
		var e;
		e = this;
		return e.data.$length;
	};
	encBuffer.prototype.Len = function() { return this.$val.Len(); };
	encBuffer.ptr.prototype.Bytes = function() {
		var e;
		e = this;
		return e.data;
	};
	encBuffer.prototype.Bytes = function() { return this.$val.Bytes(); };
	encBuffer.ptr.prototype.Reset = function() {
		var e;
		e = this;
		if (e.data.$length >= 1073741824) {
			e.data = $subslice(new sliceType$2(e.scratch), 0, 0);
		} else {
			e.data = $subslice(e.data, 0, 0);
		}
	};
	encBuffer.prototype.Reset = function() { return this.$val.Reset(); };
	Encoder.ptr.prototype.newEncoderState = function(b) {
		var b, e, enc;
		enc = this;
		e = enc.freeList;
		if (e === ptrType$36.nil) {
			e = new encoderState.ptr(ptrType$37.nil, ptrType$38.nil, false, 0, arrayType$2.zero(), ptrType$36.nil);
			e.enc = enc;
		} else {
			enc.freeList = e.next;
		}
		e.sendZero = false;
		e.fieldnum = 0;
		e.b = b;
		if (b.data.$length === 0) {
			b.data = $subslice(new sliceType$2(b.scratch), 0, 0);
		}
		return e;
	};
	Encoder.prototype.newEncoderState = function(b) { return this.$val.newEncoderState(b); };
	Encoder.ptr.prototype.freeEncoderState = function(e) {
		var e, enc;
		enc = this;
		e.next = enc.freeList;
		enc.freeList = e;
	};
	Encoder.prototype.freeEncoderState = function(e) { return this.$val.freeEncoderState(e); };
	encoderState.ptr.prototype.encodeUint = function(x$2) {
		var bc, state, x$2, x$3;
		state = this;
		if ((x$2.$high < 0 || (x$2.$high === 0 && x$2.$low <= 127))) {
			state.b.WriteByte(((x$2.$low << 24 >>> 24)));
			return;
		}
		$clone(binary.BigEndian, binary.bigEndian).PutUint64($subslice(new sliceType$2(state.buf), 1), x$2);
		bc = bits.LeadingZeros64(x$2) >> 3 >> 0;
		(x$3 = state.buf, ((bc < 0 || bc >= x$3.length) ? ($throwRuntimeError("index out of range"), undefined) : x$3[bc] = (((bc - 8 >> 0) << 24 >>> 24))));
		state.b.Write($subslice(new sliceType$2(state.buf), bc, 9));
	};
	encoderState.prototype.encodeUint = function(x$2) { return this.$val.encodeUint(x$2); };
	encoderState.ptr.prototype.encodeInt = function(i) {
		var i, state, x$2, x$3, x$4, x$5;
		state = this;
		x$2 = new $Uint64(0, 0);
		if ((i.$high < 0 || (i.$high === 0 && i.$low < 0))) {
			x$2 = (x$3 = ((x$4 = $shiftLeft64(new $Int64(~i.$high, ~i.$low >>> 0), 1), new $Uint64(x$4.$high, x$4.$low))), new $Uint64(x$3.$high | 0, (x$3.$low | 1) >>> 0));
		} else {
			x$2 = ((x$5 = $shiftLeft64(i, 1), new $Uint64(x$5.$high, x$5.$low)));
		}
		state.encodeUint(x$2);
	};
	encoderState.prototype.encodeInt = function(i) { return this.$val.encodeInt(i); };
	encoderState.ptr.prototype.update = function(instr) {
		var instr, state;
		state = this;
		if (!(instr === ptrType$39.nil)) {
			state.encodeUint((new $Uint64(0, (instr.field - state.fieldnum >> 0))));
			state.fieldnum = instr.field;
		}
	};
	encoderState.prototype.update = function(instr) { return this.$val.update(instr); };
	encIndirect = function(pv, indir) {
		var _r$22, indir, pv, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$22 = $f._r$22; indir = $f.indir; pv = $f.pv; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		/* while (true) { */ case 1:
			/* if (!(indir > 0)) { break; } */ if(!(indir > 0)) { $s = 2; continue; }
			if ($clone(pv, reflect.Value).IsNil()) {
				/* break; */ $s = 2; continue;
			}
			_r$22 = $clone(pv, reflect.Value).Elem(); /* */ $s = 3; case 3: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
			pv = _r$22;
			indir = indir - (1) >> 0;
		/* } */ $s = 1; continue; case 2:
		$s = -1; return pv;
		/* */ } return; } if ($f === undefined) { $f = { $blk: encIndirect }; } $f._r$22 = _r$22; $f.indir = indir; $f.pv = pv; $f.$s = $s; $f.$r = $r; return $f;
	};
	encBool = function(i, state, v) {
		var b, i, state, v;
		b = $clone(v, reflect.Value).Bool();
		if (b || state.sendZero) {
			state.update(i);
			if (b) {
				state.encodeUint(new $Uint64(0, 1));
			} else {
				state.encodeUint(new $Uint64(0, 0));
			}
		}
	};
	encInt = function(i, state, v) {
		var i, state, v, value;
		value = $clone(v, reflect.Value).Int();
		if (!((value.$high === 0 && value.$low === 0)) || state.sendZero) {
			state.update(i);
			state.encodeInt(value);
		}
	};
	encUint = function(i, state, v) {
		var i, state, v, value;
		value = $clone(v, reflect.Value).Uint();
		if (!((value.$high === 0 && value.$low === 0)) || state.sendZero) {
			state.update(i);
			state.encodeUint(value);
		}
	};
	floatBits = function(f) {
		var f, u;
		u = math.Float64bits(f);
		return bits.ReverseBytes64(u);
	};
	encFloat = function(i, state, v) {
		var bits$1, f, i, state, v;
		f = $clone(v, reflect.Value).Float();
		if (!((f === 0)) || state.sendZero) {
			bits$1 = floatBits(f);
			state.update(i);
			state.encodeUint(bits$1);
		}
	};
	encComplex = function(i, state, v) {
		var c, i, ipart, rpart, state, v;
		c = $clone(v, reflect.Value).Complex();
		if (!((c.$real === 0 && c.$imag === 0)) || state.sendZero) {
			rpart = floatBits(c.$real);
			ipart = floatBits(c.$imag);
			state.update(i);
			state.encodeUint(rpart);
			state.encodeUint(ipart);
		}
	};
	encUint8Array = function(i, state, v) {
		var _r$22, b, i, state, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$22 = $f._r$22; b = $f.b; i = $f.i; state = $f.state; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r$22 = $clone(v, reflect.Value).Bytes(); /* */ $s = 1; case 1: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
		b = _r$22;
		if (b.$length > 0 || state.sendZero) {
			state.update(i);
			state.encodeUint((new $Uint64(0, b.$length)));
			state.b.Write(b);
		}
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: encUint8Array }; } $f._r$22 = _r$22; $f.b = b; $f.i = i; $f.state = state; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	encString = function(i, state, v) {
		var _r$22, i, s, state, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$22 = $f._r$22; i = $f.i; s = $f.s; state = $f.state; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r$22 = $clone(v, reflect.Value).String(); /* */ $s = 1; case 1: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
		s = _r$22;
		if (s.length > 0 || state.sendZero) {
			state.update(i);
			state.encodeUint((new $Uint64(0, s.length)));
			state.b.WriteString(s);
		}
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: encString }; } $f._r$22 = _r$22; $f.i = i; $f.s = s; $f.state = state; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	encStructTerminator = function(i, state, v) {
		var i, state, v;
		state.encodeUint(new $Uint64(0, 0));
	};
	valid = function(v) {
		var _1, v;
		_1 = $clone(v, reflect.Value).Kind();
		if (_1 === (0)) {
			return false;
		} else if (_1 === (22)) {
			return !$clone(v, reflect.Value).IsNil();
		}
		return true;
	};
	Encoder.ptr.prototype.encodeSingle = function(b, engine, value) {
		var _r$22, b, enc, engine, instr, state, value, x$2, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$22 = $f._r$22; b = $f.b; enc = $f.enc; engine = $f.engine; instr = $f.instr; state = $f.state; value = $f.value; x$2 = $f.x$2; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		enc = this;
		state = enc.newEncoderState(b);
		$deferred.push([$methodVal(enc, "freeEncoderState"), [state]]);
		state.fieldnum = 0;
		state.sendZero = true;
		instr = (x$2 = engine.instr, (0 >= x$2.$length ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + 0]));
		/* */ if (instr.indir > 0) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (instr.indir > 0) { */ case 1:
			_r$22 = encIndirect($clone(value, reflect.Value), instr.indir); /* */ $s = 3; case 3: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
			value = _r$22;
		/* } */ case 2:
		/* */ if (valid($clone(value, reflect.Value))) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (valid($clone(value, reflect.Value))) { */ case 4:
			$r = instr.op(instr, state, $clone(value, reflect.Value)); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 5:
		$s = -1; return;
		/* */ } return; } } catch(err) { $err = err; $s = -1; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: Encoder.ptr.prototype.encodeSingle }; } $f._r$22 = _r$22; $f.b = b; $f.enc = enc; $f.engine = engine; $f.instr = instr; $f.state = state; $f.value = value; $f.x$2 = x$2; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	Encoder.prototype.encodeSingle = function(b, engine, value) { return this.$val.encodeSingle(b, engine, value); };
	Encoder.ptr.prototype.encodeStruct = function(b, engine, value) {
		var _r$22, _r$23, b, enc, engine, field, i, instr, state, value, x$2, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$22 = $f._r$22; _r$23 = $f._r$23; b = $f.b; enc = $f.enc; engine = $f.engine; field = $f.field; i = $f.i; instr = $f.instr; state = $f.state; value = $f.value; x$2 = $f.x$2; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		enc = this;
		if (!valid($clone(value, reflect.Value))) {
			$s = -1; return;
		}
		state = enc.newEncoderState(b);
		$deferred.push([$methodVal(enc, "freeEncoderState"), [state]]);
		state.fieldnum = -1;
		i = 0;
		/* while (true) { */ case 1:
			/* if (!(i < engine.instr.$length)) { break; } */ if(!(i < engine.instr.$length)) { $s = 2; continue; }
			instr = (x$2 = engine.instr, ((i < 0 || i >= x$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + i]));
			/* */ if (i >= $clone(value, reflect.Value).NumField()) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (i >= $clone(value, reflect.Value).NumField()) { */ case 3:
				$r = instr.op(instr, state, new reflect.Value.ptr(ptrType.nil, 0, 0)); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* break; */ $s = 2; continue;
			/* } */ case 4:
			_r$22 = $clone(value, reflect.Value).FieldByIndex(instr.index); /* */ $s = 6; case 6: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
			field = _r$22;
			/* */ if (instr.indir > 0) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if (instr.indir > 0) { */ case 7:
				_r$23 = encIndirect($clone(field, reflect.Value), instr.indir); /* */ $s = 9; case 9: if($c) { $c = false; _r$23 = _r$23.$blk(); } if (_r$23 && _r$23.$blk !== undefined) { break s; }
				field = _r$23;
				if (!valid($clone(field, reflect.Value))) {
					i = i + (1) >> 0;
					/* continue; */ $s = 1; continue;
				}
			/* } */ case 8:
			$r = instr.op(instr, state, $clone(field, reflect.Value)); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			i = i + (1) >> 0;
		/* } */ $s = 1; continue; case 2:
		$s = -1; return;
		/* */ } return; } } catch(err) { $err = err; $s = -1; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: Encoder.ptr.prototype.encodeStruct }; } $f._r$22 = _r$22; $f._r$23 = _r$23; $f.b = b; $f.enc = enc; $f.engine = engine; $f.field = field; $f.i = i; $f.instr = instr; $f.state = state; $f.value = value; $f.x$2 = x$2; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	Encoder.prototype.encodeStruct = function(b, engine, value) { return this.$val.encodeStruct(b, engine, value); };
	Encoder.ptr.prototype.encodeArray = function(b, value, op, elemIndir, length, helper) {
		var _r$22, _r$23, _r$24, _v, b, elem, elemIndir, enc, helper, i, length, op, state, value, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$22 = $f._r$22; _r$23 = $f._r$23; _r$24 = $f._r$24; _v = $f._v; b = $f.b; elem = $f.elem; elemIndir = $f.elemIndir; enc = $f.enc; helper = $f.helper; i = $f.i; length = $f.length; op = $f.op; state = $f.state; value = $f.value; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		enc = this;
		state = enc.newEncoderState(b);
		$deferred.push([$methodVal(enc, "freeEncoderState"), [state]]);
		state.fieldnum = -1;
		state.sendZero = true;
		state.encodeUint((new $Uint64(0, length)));
		if (!(!(helper === $throwNilPointerError))) { _v = false; $s = 3; continue s; }
		_r$22 = helper(state, $clone(value, reflect.Value)); /* */ $s = 4; case 4: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
		_v = _r$22; case 3:
		/* */ if (_v) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (_v) { */ case 1:
			$s = -1; return;
		/* } */ case 2:
		i = 0;
		/* while (true) { */ case 5:
			/* if (!(i < length)) { break; } */ if(!(i < length)) { $s = 6; continue; }
			_r$23 = $clone(value, reflect.Value).Index(i); /* */ $s = 7; case 7: if($c) { $c = false; _r$23 = _r$23.$blk(); } if (_r$23 && _r$23.$blk !== undefined) { break s; }
			elem = _r$23;
			/* */ if (elemIndir > 0) { $s = 8; continue; }
			/* */ $s = 9; continue;
			/* if (elemIndir > 0) { */ case 8:
				_r$24 = encIndirect($clone(elem, reflect.Value), elemIndir); /* */ $s = 10; case 10: if($c) { $c = false; _r$24 = _r$24.$blk(); } if (_r$24 && _r$24.$blk !== undefined) { break s; }
				elem = _r$24;
				/* */ if (!valid($clone(elem, reflect.Value))) { $s = 11; continue; }
				/* */ $s = 12; continue;
				/* if (!valid($clone(elem, reflect.Value))) { */ case 11:
					$r = errorf("encodeArray: nil element", new sliceType$1([])); /* */ $s = 13; case 13: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 12:
			/* } */ case 9:
			$r = op(ptrType$39.nil, state, $clone(elem, reflect.Value)); /* */ $s = 14; case 14: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			i = i + (1) >> 0;
		/* } */ $s = 5; continue; case 6:
		$s = -1; return;
		/* */ } return; } } catch(err) { $err = err; $s = -1; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: Encoder.ptr.prototype.encodeArray }; } $f._r$22 = _r$22; $f._r$23 = _r$23; $f._r$24 = _r$24; $f._v = _v; $f.b = b; $f.elem = elem; $f.elemIndir = elemIndir; $f.enc = enc; $f.helper = helper; $f.i = i; $f.length = length; $f.op = op; $f.state = state; $f.value = value; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	Encoder.prototype.encodeArray = function(b, value, op, elemIndir, length, helper) { return this.$val.encodeArray(b, value, op, elemIndir, length, helper); };
	encodeReflectValue = function(state, v, op, indir) {
		var _r$22, i, indir, op, state, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$22 = $f._r$22; i = $f.i; indir = $f.indir; op = $f.op; state = $f.state; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		i = 0;
		/* while (true) { */ case 1:
			/* if (!(i < indir && $clone(v, reflect.Value).IsValid())) { break; } */ if(!(i < indir && $clone(v, reflect.Value).IsValid())) { $s = 2; continue; }
			_r$22 = reflect.Indirect($clone(v, reflect.Value)); /* */ $s = 3; case 3: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
			v = _r$22;
			i = i + (1) >> 0;
		/* } */ $s = 1; continue; case 2:
		/* */ if (!$clone(v, reflect.Value).IsValid()) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (!$clone(v, reflect.Value).IsValid()) { */ case 4:
			$r = errorf("encodeReflectValue: nil element", new sliceType$1([])); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 5:
		$r = op(ptrType$39.nil, state, $clone(v, reflect.Value)); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: encodeReflectValue }; } $f._r$22 = _r$22; $f.i = i; $f.indir = indir; $f.op = op; $f.state = state; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Encoder.ptr.prototype.encodeMap = function(b, mv, keyOp, elemOp, keyIndir, elemIndir) {
		var _arg, _arg$1, _arg$2, _arg$3, _i, _r$22, _r$23, _ref, b, elemIndir, elemOp, enc, key, keyIndir, keyOp, keys, mv, state, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _arg$3 = $f._arg$3; _i = $f._i; _r$22 = $f._r$22; _r$23 = $f._r$23; _ref = $f._ref; b = $f.b; elemIndir = $f.elemIndir; elemOp = $f.elemOp; enc = $f.enc; key = $f.key; keyIndir = $f.keyIndir; keyOp = $f.keyOp; keys = $f.keys; mv = $f.mv; state = $f.state; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		enc = this;
		state = enc.newEncoderState(b);
		state.fieldnum = -1;
		state.sendZero = true;
		_r$22 = $clone(mv, reflect.Value).MapKeys(); /* */ $s = 1; case 1: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
		keys = _r$22;
		state.encodeUint((new $Uint64(0, keys.$length)));
		_ref = keys;
		_i = 0;
		/* while (true) { */ case 2:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 3; continue; }
			key = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			$r = encodeReflectValue(state, $clone(key, reflect.Value), keyOp, keyIndir); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_arg = state;
			_r$23 = $clone(mv, reflect.Value).MapIndex($clone(key, reflect.Value)); /* */ $s = 5; case 5: if($c) { $c = false; _r$23 = _r$23.$blk(); } if (_r$23 && _r$23.$blk !== undefined) { break s; }
			_arg$1 = $clone(_r$23, reflect.Value);
			_arg$2 = elemOp;
			_arg$3 = elemIndir;
			$r = encodeReflectValue(_arg, _arg$1, _arg$2, _arg$3); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_i++;
		/* } */ $s = 2; continue; case 3:
		enc.freeEncoderState(state);
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Encoder.ptr.prototype.encodeMap }; } $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._arg$3 = _arg$3; $f._i = _i; $f._r$22 = _r$22; $f._r$23 = _r$23; $f._ref = _ref; $f.b = b; $f.elemIndir = elemIndir; $f.elemOp = elemOp; $f.enc = enc; $f.key = key; $f.keyIndir = keyIndir; $f.keyOp = keyOp; $f.keys = keys; $f.mv = mv; $f.state = state; $f.$s = $s; $f.$r = $r; return $f;
	};
	Encoder.prototype.encodeMap = function(b, mv, keyOp, elemOp, keyIndir, elemIndir) { return this.$val.encodeMap(b, mv, keyOp, elemOp, keyIndir, elemIndir); };
	Encoder.ptr.prototype.encodeInterface = function(b, iv) {
		var _arg, _r$22, _r$23, _r$24, _r$25, _r$26, _r$27, _r$28, _tuple, b, data, elem, enc, iv, name, namei, ok, state, ut, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _arg = $f._arg; _r$22 = $f._r$22; _r$23 = $f._r$23; _r$24 = $f._r$24; _r$25 = $f._r$25; _r$26 = $f._r$26; _r$27 = $f._r$27; _r$28 = $f._r$28; _tuple = $f._tuple; b = $f.b; data = $f.data; elem = $f.elem; enc = $f.enc; iv = $f.iv; name = $f.name; namei = $f.namei; ok = $f.ok; state = $f.state; ut = $f.ut; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		enc = this;
		_r$22 = $clone(iv, reflect.Value).Elem(); /* */ $s = 1; case 1: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
		elem = _r$22;
		/* */ if (($clone(elem, reflect.Value).Kind() === 22) && $clone(elem, reflect.Value).IsNil()) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (($clone(elem, reflect.Value).Kind() === 22) && $clone(elem, reflect.Value).IsNil()) { */ case 2:
			_r$23 = $clone(iv, reflect.Value).Elem(); /* */ $s = 4; case 4: if($c) { $c = false; _r$23 = _r$23.$blk(); } if (_r$23 && _r$23.$blk !== undefined) { break s; }
			_r$24 = $clone(_r$23, reflect.Value).Type(); /* */ $s = 5; case 5: if($c) { $c = false; _r$24 = _r$24.$blk(); } if (_r$24 && _r$24.$blk !== undefined) { break s; }
			_arg = _r$24;
			$r = errorf("gob: cannot encode nil pointer of type %s inside interface", new sliceType$1([_arg])); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 3:
		state = enc.newEncoderState(b);
		state.fieldnum = -1;
		state.sendZero = true;
		if ($clone(iv, reflect.Value).IsNil()) {
			state.encodeUint(new $Uint64(0, 0));
			$s = -1; return;
		}
		_r$25 = $clone(iv, reflect.Value).Elem(); /* */ $s = 7; case 7: if($c) { $c = false; _r$25 = _r$25.$blk(); } if (_r$25 && _r$25.$blk !== undefined) { break s; }
		_r$26 = $clone(_r$25, reflect.Value).Type(); /* */ $s = 8; case 8: if($c) { $c = false; _r$26 = _r$26.$blk(); } if (_r$26 && _r$26.$blk !== undefined) { break s; }
		_r$27 = userType(_r$26); /* */ $s = 9; case 9: if($c) { $c = false; _r$27 = _r$27.$blk(); } if (_r$27 && _r$27.$blk !== undefined) { break s; }
		ut = _r$27;
		_tuple = concreteTypeToName.Load(ut.base);
		namei = _tuple[0];
		ok = _tuple[1];
		/* */ if (!ok) { $s = 10; continue; }
		/* */ $s = 11; continue;
		/* if (!ok) { */ case 10:
			$r = errorf("type not registered for interface: %s", new sliceType$1([ut.base])); /* */ $s = 12; case 12: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 11:
		name = $assertType(namei, $String);
		state.encodeUint((new $Uint64(0, name.length)));
		state.b.WriteString(name);
		$r = enc.sendTypeDescriptor(enc.writer(), state, ut); /* */ $s = 13; case 13: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		enc.sendTypeId(state, ut);
		enc.pushWriter(b);
		_r$28 = encBufferPool.Get(); /* */ $s = 14; case 14: if($c) { $c = false; _r$28 = _r$28.$blk(); } if (_r$28 && _r$28.$blk !== undefined) { break s; }
		data = $assertType(_r$28, ptrType$38);
		data.Write(spaceForLength);
		$r = enc.encode(data, $clone(elem, reflect.Value), ut); /* */ $s = 15; case 15: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		if (!($interfaceIsEqual(enc.err, $ifaceNil))) {
			error_(enc.err);
		}
		enc.popWriter();
		$r = enc.writeMessage(b, data); /* */ $s = 16; case 16: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		data.Reset();
		encBufferPool.Put(data);
		if (!($interfaceIsEqual(enc.err, $ifaceNil))) {
			error_(enc.err);
		}
		enc.freeEncoderState(state);
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Encoder.ptr.prototype.encodeInterface }; } $f._arg = _arg; $f._r$22 = _r$22; $f._r$23 = _r$23; $f._r$24 = _r$24; $f._r$25 = _r$25; $f._r$26 = _r$26; $f._r$27 = _r$27; $f._r$28 = _r$28; $f._tuple = _tuple; $f.b = b; $f.data = data; $f.elem = elem; $f.enc = enc; $f.iv = iv; $f.name = name; $f.namei = namei; $f.ok = ok; $f.state = state; $f.ut = ut; $f.$s = $s; $f.$r = $r; return $f;
	};
	Encoder.prototype.encodeInterface = function(b, iv) { return this.$val.encodeInterface(b, iv); };
	isZero = function(val) {
		var _1, _r$22, _r$23, _r$24, _r$25, _r$26, _r$27, i, i$1, val, x$2, x$3, x$4, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _r$22 = $f._r$22; _r$23 = $f._r$23; _r$24 = $f._r$24; _r$25 = $f._r$25; _r$26 = $f._r$26; _r$27 = $f._r$27; i = $f.i; i$1 = $f.i$1; val = $f.val; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			_1 = $clone(val, reflect.Value).Kind();
			/* */ if (_1 === (17)) { $s = 2; continue; }
			/* */ if ((_1 === (21)) || (_1 === (23)) || (_1 === (24))) { $s = 3; continue; }
			/* */ if (_1 === (1)) { $s = 4; continue; }
			/* */ if ((_1 === (15)) || (_1 === (16))) { $s = 5; continue; }
			/* */ if ((_1 === (18)) || (_1 === (19)) || (_1 === (20)) || (_1 === (22))) { $s = 6; continue; }
			/* */ if ((_1 === (2)) || (_1 === (3)) || (_1 === (4)) || (_1 === (5)) || (_1 === (6))) { $s = 7; continue; }
			/* */ if ((_1 === (13)) || (_1 === (14))) { $s = 8; continue; }
			/* */ if ((_1 === (7)) || (_1 === (8)) || (_1 === (9)) || (_1 === (10)) || (_1 === (11)) || (_1 === (12))) { $s = 9; continue; }
			/* */ if (_1 === (25)) { $s = 10; continue; }
			/* */ $s = 11; continue;
			/* if (_1 === (17)) { */ case 2:
				i = 0;
				/* while (true) { */ case 12:
					/* if (!(i < $clone(val, reflect.Value).Len())) { break; } */ if(!(i < $clone(val, reflect.Value).Len())) { $s = 13; continue; }
					_r$22 = $clone(val, reflect.Value).Index(i); /* */ $s = 16; case 16: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
					_r$23 = isZero($clone(_r$22, reflect.Value)); /* */ $s = 17; case 17: if($c) { $c = false; _r$23 = _r$23.$blk(); } if (_r$23 && _r$23.$blk !== undefined) { break s; }
					/* */ if (!_r$23) { $s = 14; continue; }
					/* */ $s = 15; continue;
					/* if (!_r$23) { */ case 14:
						$s = -1; return false;
					/* } */ case 15:
					i = i + (1) >> 0;
				/* } */ $s = 12; continue; case 13:
				$s = -1; return true;
			/* } else if ((_1 === (21)) || (_1 === (23)) || (_1 === (24))) { */ case 3:
				$s = -1; return $clone(val, reflect.Value).Len() === 0;
			/* } else if (_1 === (1)) { */ case 4:
				$s = -1; return !$clone(val, reflect.Value).Bool();
			/* } else if ((_1 === (15)) || (_1 === (16))) { */ case 5:
				$s = -1; return (x$2 = $clone(val, reflect.Value).Complex(), (x$2.$real === 0 && x$2.$imag === 0));
			/* } else if ((_1 === (18)) || (_1 === (19)) || (_1 === (20)) || (_1 === (22))) { */ case 6:
				$s = -1; return $clone(val, reflect.Value).IsNil();
			/* } else if ((_1 === (2)) || (_1 === (3)) || (_1 === (4)) || (_1 === (5)) || (_1 === (6))) { */ case 7:
				$s = -1; return (x$3 = $clone(val, reflect.Value).Int(), (x$3.$high === 0 && x$3.$low === 0));
			/* } else if ((_1 === (13)) || (_1 === (14))) { */ case 8:
				$s = -1; return $clone(val, reflect.Value).Float() === 0;
			/* } else if ((_1 === (7)) || (_1 === (8)) || (_1 === (9)) || (_1 === (10)) || (_1 === (11)) || (_1 === (12))) { */ case 9:
				$s = -1; return (x$4 = $clone(val, reflect.Value).Uint(), (x$4.$high === 0 && x$4.$low === 0));
			/* } else if (_1 === (25)) { */ case 10:
				i$1 = 0;
				/* while (true) { */ case 18:
					/* if (!(i$1 < $clone(val, reflect.Value).NumField())) { break; } */ if(!(i$1 < $clone(val, reflect.Value).NumField())) { $s = 19; continue; }
					_r$24 = $clone(val, reflect.Value).Field(i$1); /* */ $s = 22; case 22: if($c) { $c = false; _r$24 = _r$24.$blk(); } if (_r$24 && _r$24.$blk !== undefined) { break s; }
					_r$25 = isZero($clone(_r$24, reflect.Value)); /* */ $s = 23; case 23: if($c) { $c = false; _r$25 = _r$25.$blk(); } if (_r$25 && _r$25.$blk !== undefined) { break s; }
					/* */ if (!_r$25) { $s = 20; continue; }
					/* */ $s = 21; continue;
					/* if (!_r$25) { */ case 20:
						$s = -1; return false;
					/* } */ case 21:
					i$1 = i$1 + (1) >> 0;
				/* } */ $s = 18; continue; case 19:
				$s = -1; return true;
			/* } */ case 11:
		case 1:
		_r$26 = $clone(val, reflect.Value).Type(); /* */ $s = 24; case 24: if($c) { $c = false; _r$26 = _r$26.$blk(); } if (_r$26 && _r$26.$blk !== undefined) { break s; }
		_r$27 = _r$26.String(); /* */ $s = 25; case 25: if($c) { $c = false; _r$27 = _r$27.$blk(); } if (_r$27 && _r$27.$blk !== undefined) { break s; }
		$panic(new $String("unknown type in isZero " + _r$27));
		$s = -1; return false;
		/* */ } return; } if ($f === undefined) { $f = { $blk: isZero }; } $f._1 = _1; $f._r$22 = _r$22; $f._r$23 = _r$23; $f._r$24 = _r$24; $f._r$25 = _r$25; $f._r$26 = _r$26; $f._r$27 = _r$27; $f.i = i; $f.i$1 = i$1; $f.val = val; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.$s = $s; $f.$r = $r; return $f;
	};
	Encoder.ptr.prototype.encodeGobEncoder = function(b, ut, v) {
		var _1, _r$22, _r$23, _r$24, _r$25, _r$26, _r$27, _tuple, _tuple$1, _tuple$2, b, data, enc, err, state, ut, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _r$22 = $f._r$22; _r$23 = $f._r$23; _r$24 = $f._r$24; _r$25 = $f._r$25; _r$26 = $f._r$26; _r$27 = $f._r$27; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; b = $f.b; data = $f.data; enc = $f.enc; err = $f.err; state = $f.state; ut = $f.ut; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		enc = this;
		data = sliceType$2.nil;
		err = $ifaceNil;
			_1 = ut.externalEnc;
			/* */ if (_1 === (1)) { $s = 2; continue; }
			/* */ if (_1 === (2)) { $s = 3; continue; }
			/* */ if (_1 === (3)) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (_1 === (1)) { */ case 2:
				_r$22 = $clone(v, reflect.Value).Interface(); /* */ $s = 6; case 6: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
				_r$23 = $assertType(_r$22, GobEncoder).GobEncode(); /* */ $s = 7; case 7: if($c) { $c = false; _r$23 = _r$23.$blk(); } if (_r$23 && _r$23.$blk !== undefined) { break s; }
				_tuple = _r$23;
				data = _tuple[0];
				err = _tuple[1];
				$s = 5; continue;
			/* } else if (_1 === (2)) { */ case 3:
				_r$24 = $clone(v, reflect.Value).Interface(); /* */ $s = 8; case 8: if($c) { $c = false; _r$24 = _r$24.$blk(); } if (_r$24 && _r$24.$blk !== undefined) { break s; }
				_r$25 = $assertType(_r$24, encoding.BinaryMarshaler).MarshalBinary(); /* */ $s = 9; case 9: if($c) { $c = false; _r$25 = _r$25.$blk(); } if (_r$25 && _r$25.$blk !== undefined) { break s; }
				_tuple$1 = _r$25;
				data = _tuple$1[0];
				err = _tuple$1[1];
				$s = 5; continue;
			/* } else if (_1 === (3)) { */ case 4:
				_r$26 = $clone(v, reflect.Value).Interface(); /* */ $s = 10; case 10: if($c) { $c = false; _r$26 = _r$26.$blk(); } if (_r$26 && _r$26.$blk !== undefined) { break s; }
				_r$27 = $assertType(_r$26, encoding.TextMarshaler).MarshalText(); /* */ $s = 11; case 11: if($c) { $c = false; _r$27 = _r$27.$blk(); } if (_r$27 && _r$27.$blk !== undefined) { break s; }
				_tuple$2 = _r$27;
				data = _tuple$2[0];
				err = _tuple$2[1];
			/* } */ case 5:
		case 1:
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			error_(err);
		}
		state = enc.newEncoderState(b);
		state.fieldnum = -1;
		state.encodeUint((new $Uint64(0, data.$length)));
		state.b.Write(data);
		enc.freeEncoderState(state);
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Encoder.ptr.prototype.encodeGobEncoder }; } $f._1 = _1; $f._r$22 = _r$22; $f._r$23 = _r$23; $f._r$24 = _r$24; $f._r$25 = _r$25; $f._r$26 = _r$26; $f._r$27 = _r$27; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f.b = b; $f.data = data; $f.enc = enc; $f.err = err; $f.state = state; $f.ut = ut; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Encoder.prototype.encodeGobEncoder = function(b, ut, v) { return this.$val.encodeGobEncoder(b, ut, v); };
	encOpFor = function(rt, inProgress, building) {
		var _1, _entry, _entry$1, _entry$2, _key, _r$22, _r$23, _r$24, _r$25, _r$26, _r$27, _r$28, _r$29, _r$30, _r$31, _r$32, _r$33, _r$34, _r$35, _r$36, _r$37, _r$38, _r$39, _r$40, _r$41, _r$42, _tuple, _tuple$1, _tuple$2, _tuple$3, building, elemIndir, elemIndir$1, elemIndir$2, elemOp, elemOp$1, elemOp$2, helper, helper$1, inProgress, indir, info, k, keyIndir, keyOp, op, opPtr, rt, t, typ, ut, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _entry = $f._entry; _entry$1 = $f._entry$1; _entry$2 = $f._entry$2; _key = $f._key; _r$22 = $f._r$22; _r$23 = $f._r$23; _r$24 = $f._r$24; _r$25 = $f._r$25; _r$26 = $f._r$26; _r$27 = $f._r$27; _r$28 = $f._r$28; _r$29 = $f._r$29; _r$30 = $f._r$30; _r$31 = $f._r$31; _r$32 = $f._r$32; _r$33 = $f._r$33; _r$34 = $f._r$34; _r$35 = $f._r$35; _r$36 = $f._r$36; _r$37 = $f._r$37; _r$38 = $f._r$38; _r$39 = $f._r$39; _r$40 = $f._r$40; _r$41 = $f._r$41; _r$42 = $f._r$42; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; building = $f.building; elemIndir = $f.elemIndir; elemIndir$1 = $f.elemIndir$1; elemIndir$2 = $f.elemIndir$2; elemOp = $f.elemOp; elemOp$1 = $f.elemOp$1; elemOp$2 = $f.elemOp$2; helper = $f.helper; helper$1 = $f.helper$1; inProgress = $f.inProgress; indir = $f.indir; info = $f.info; k = $f.k; keyIndir = $f.keyIndir; keyOp = $f.keyOp; op = $f.op; opPtr = $f.opPtr; rt = $f.rt; t = $f.t; typ = $f.typ; ut = $f.ut; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		elemIndir = [elemIndir];
		elemIndir$1 = [elemIndir$1];
		elemIndir$2 = [elemIndir$2];
		elemOp = [elemOp];
		elemOp$1 = [elemOp$1];
		elemOp$2 = [elemOp$2];
		helper = [helper];
		helper$1 = [helper$1];
		info = [info];
		keyIndir = [keyIndir];
		keyOp = [keyOp];
		op = [op];
		_r$22 = userType(rt); /* */ $s = 1; case 1: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
		ut = _r$22;
		/* */ if (!((ut.externalEnc === 0))) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!((ut.externalEnc === 0))) { */ case 2:
			_r$23 = gobEncodeOpFor(ut); /* */ $s = 4; case 4: if($c) { $c = false; _r$23 = _r$23.$blk(); } if (_r$23 && _r$23.$blk !== undefined) { break s; }
			$s = -1; return _r$23;
		/* } */ case 3:
		opPtr = (_entry = inProgress[reflect.Type.keyFor(rt)], _entry !== undefined ? _entry.v : ptrType$40.nil);
		if (!(opPtr === ptrType$40.nil)) {
			$s = -1; return [opPtr, ut.indir];
		}
		typ = ut.base;
		indir = ut.indir;
		_r$24 = typ.Kind(); /* */ $s = 5; case 5: if($c) { $c = false; _r$24 = _r$24.$blk(); } if (_r$24 && _r$24.$blk !== undefined) { break s; }
		k = _r$24;
		op[0] = $throwNilPointerError;
		if (((k >> 0)) < 25) {
			op[0] = ((k < 0 || k >= encOpTable.length) ? ($throwRuntimeError("index out of range"), undefined) : encOpTable[k]);
		}
		/* */ if (op[0] === $throwNilPointerError) { $s = 6; continue; }
		/* */ $s = 7; continue;
		/* if (op[0] === $throwNilPointerError) { */ case 6:
			_key = rt; (inProgress || $throwRuntimeError("assignment to entry in nil map"))[reflect.Type.keyFor(_key)] = { k: _key, v: (op.$ptr || (op.$ptr = new ptrType$40(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, op))) };
				t = typ;
				_r$25 = t.Kind(); /* */ $s = 9; case 9: if($c) { $c = false; _r$25 = _r$25.$blk(); } if (_r$25 && _r$25.$blk !== undefined) { break s; }
				_1 = _r$25;
				/* */ if (_1 === (23)) { $s = 10; continue; }
				/* */ if (_1 === (17)) { $s = 11; continue; }
				/* */ if (_1 === (21)) { $s = 12; continue; }
				/* */ if (_1 === (25)) { $s = 13; continue; }
				/* */ if (_1 === (20)) { $s = 14; continue; }
				/* */ $s = 15; continue;
				/* if (_1 === (23)) { */ case 10:
					_r$26 = t.Elem(); /* */ $s = 18; case 18: if($c) { $c = false; _r$26 = _r$26.$blk(); } if (_r$26 && _r$26.$blk !== undefined) { break s; }
					_r$27 = _r$26.Kind(); /* */ $s = 19; case 19: if($c) { $c = false; _r$27 = _r$27.$blk(); } if (_r$27 && _r$27.$blk !== undefined) { break s; }
					/* */ if (_r$27 === 8) { $s = 16; continue; }
					/* */ $s = 17; continue;
					/* if (_r$27 === 8) { */ case 16:
						op[0] = encUint8Array;
						/* break; */ $s = 8; continue;
					/* } */ case 17:
					_r$28 = t.Elem(); /* */ $s = 20; case 20: if($c) { $c = false; _r$28 = _r$28.$blk(); } if (_r$28 && _r$28.$blk !== undefined) { break s; }
					_r$29 = encOpFor(_r$28, inProgress, building); /* */ $s = 21; case 21: if($c) { $c = false; _r$29 = _r$29.$blk(); } if (_r$29 && _r$29.$blk !== undefined) { break s; }
					_tuple = _r$29;
					elemOp[0] = _tuple[0];
					elemIndir[0] = _tuple[1];
					_r$30 = t.Elem(); /* */ $s = 22; case 22: if($c) { $c = false; _r$30 = _r$30.$blk(); } if (_r$30 && _r$30.$blk !== undefined) { break s; }
					_r$31 = _r$30.Kind(); /* */ $s = 23; case 23: if($c) { $c = false; _r$31 = _r$31.$blk(); } if (_r$31 && _r$31.$blk !== undefined) { break s; }
					helper[0] = (_entry$1 = encSliceHelper[reflect.Kind.keyFor(_r$31)], _entry$1 !== undefined ? _entry$1.v : $throwNilPointerError);
					op[0] = (function(elemIndir, elemIndir$1, elemIndir$2, elemOp, elemOp$1, elemOp$2, helper, helper$1, info, keyIndir, keyOp, op) { return function $b(i, state, slice) {
						var i, slice, state, $s, $r;
						/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; i = $f.i; slice = $f.slice; state = $f.state; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
						if (!state.sendZero && ($clone(slice, reflect.Value).Len() === 0)) {
							$s = -1; return;
						}
						state.update(i);
						$r = state.enc.encodeArray(state.b, $clone(slice, reflect.Value), elemOp[0].$get(), elemIndir[0], $clone(slice, reflect.Value).Len(), helper[0]); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						$s = -1; return;
						/* */ } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.i = i; $f.slice = slice; $f.state = state; $f.$s = $s; $f.$r = $r; return $f;
					}; })(elemIndir, elemIndir$1, elemIndir$2, elemOp, elemOp$1, elemOp$2, helper, helper$1, info, keyIndir, keyOp, op);
					$s = 15; continue;
				/* } else if (_1 === (17)) { */ case 11:
					_r$32 = t.Elem(); /* */ $s = 24; case 24: if($c) { $c = false; _r$32 = _r$32.$blk(); } if (_r$32 && _r$32.$blk !== undefined) { break s; }
					_r$33 = encOpFor(_r$32, inProgress, building); /* */ $s = 25; case 25: if($c) { $c = false; _r$33 = _r$33.$blk(); } if (_r$33 && _r$33.$blk !== undefined) { break s; }
					_tuple$1 = _r$33;
					elemOp$1[0] = _tuple$1[0];
					elemIndir$1[0] = _tuple$1[1];
					_r$34 = t.Elem(); /* */ $s = 26; case 26: if($c) { $c = false; _r$34 = _r$34.$blk(); } if (_r$34 && _r$34.$blk !== undefined) { break s; }
					_r$35 = _r$34.Kind(); /* */ $s = 27; case 27: if($c) { $c = false; _r$35 = _r$35.$blk(); } if (_r$35 && _r$35.$blk !== undefined) { break s; }
					helper$1[0] = (_entry$2 = encArrayHelper[reflect.Kind.keyFor(_r$35)], _entry$2 !== undefined ? _entry$2.v : $throwNilPointerError);
					op[0] = (function(elemIndir, elemIndir$1, elemIndir$2, elemOp, elemOp$1, elemOp$2, helper, helper$1, info, keyIndir, keyOp, op) { return function $b(i, state, array) {
						var array, i, state, $s, $r;
						/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; array = $f.array; i = $f.i; state = $f.state; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
						state.update(i);
						$r = state.enc.encodeArray(state.b, $clone(array, reflect.Value), elemOp$1[0].$get(), elemIndir$1[0], $clone(array, reflect.Value).Len(), helper$1[0]); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						$s = -1; return;
						/* */ } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.array = array; $f.i = i; $f.state = state; $f.$s = $s; $f.$r = $r; return $f;
					}; })(elemIndir, elemIndir$1, elemIndir$2, elemOp, elemOp$1, elemOp$2, helper, helper$1, info, keyIndir, keyOp, op);
					$s = 15; continue;
				/* } else if (_1 === (21)) { */ case 12:
					_r$36 = t.Key(); /* */ $s = 28; case 28: if($c) { $c = false; _r$36 = _r$36.$blk(); } if (_r$36 && _r$36.$blk !== undefined) { break s; }
					_r$37 = encOpFor(_r$36, inProgress, building); /* */ $s = 29; case 29: if($c) { $c = false; _r$37 = _r$37.$blk(); } if (_r$37 && _r$37.$blk !== undefined) { break s; }
					_tuple$2 = _r$37;
					keyOp[0] = _tuple$2[0];
					keyIndir[0] = _tuple$2[1];
					_r$38 = t.Elem(); /* */ $s = 30; case 30: if($c) { $c = false; _r$38 = _r$38.$blk(); } if (_r$38 && _r$38.$blk !== undefined) { break s; }
					_r$39 = encOpFor(_r$38, inProgress, building); /* */ $s = 31; case 31: if($c) { $c = false; _r$39 = _r$39.$blk(); } if (_r$39 && _r$39.$blk !== undefined) { break s; }
					_tuple$3 = _r$39;
					elemOp$2[0] = _tuple$3[0];
					elemIndir$2[0] = _tuple$3[1];
					op[0] = (function(elemIndir, elemIndir$1, elemIndir$2, elemOp, elemOp$1, elemOp$2, helper, helper$1, info, keyIndir, keyOp, op) { return function $b(i, state, mv) {
						var i, mv, state, $s, $r;
						/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; i = $f.i; mv = $f.mv; state = $f.state; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
						if (!state.sendZero && $clone(mv, reflect.Value).IsNil()) {
							$s = -1; return;
						}
						state.update(i);
						$r = state.enc.encodeMap(state.b, $clone(mv, reflect.Value), keyOp[0].$get(), elemOp$2[0].$get(), keyIndir[0], elemIndir$2[0]); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						$s = -1; return;
						/* */ } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.i = i; $f.mv = mv; $f.state = state; $f.$s = $s; $f.$r = $r; return $f;
					}; })(elemIndir, elemIndir$1, elemIndir$2, elemOp, elemOp$1, elemOp$2, helper, helper$1, info, keyIndir, keyOp, op);
					$s = 15; continue;
				/* } else if (_1 === (25)) { */ case 13:
					_r$40 = userType(typ); /* */ $s = 32; case 32: if($c) { $c = false; _r$40 = _r$40.$blk(); } if (_r$40 && _r$40.$blk !== undefined) { break s; }
					_r$41 = getEncEngine(_r$40, building); /* */ $s = 33; case 33: if($c) { $c = false; _r$41 = _r$41.$blk(); } if (_r$41 && _r$41.$blk !== undefined) { break s; }
					_r$41;
					_r$42 = mustGetTypeInfo(typ); /* */ $s = 34; case 34: if($c) { $c = false; _r$42 = _r$42.$blk(); } if (_r$42 && _r$42.$blk !== undefined) { break s; }
					info[0] = _r$42;
					op[0] = (function(elemIndir, elemIndir$1, elemIndir$2, elemOp, elemOp$1, elemOp$2, helper, helper$1, info, keyIndir, keyOp, op) { return function $b(i, state, sv) {
						var enc, i, state, sv, $s, $r;
						/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; enc = $f.enc; i = $f.i; state = $f.state; sv = $f.sv; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
						state.update(i);
						enc = $assertType(info[0].encoder.Load(), ptrType$41);
						$r = state.enc.encodeStruct(state.b, enc, $clone(sv, reflect.Value)); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						$s = -1; return;
						/* */ } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.enc = enc; $f.i = i; $f.state = state; $f.sv = sv; $f.$s = $s; $f.$r = $r; return $f;
					}; })(elemIndir, elemIndir$1, elemIndir$2, elemOp, elemOp$1, elemOp$2, helper, helper$1, info, keyIndir, keyOp, op);
					$s = 15; continue;
				/* } else if (_1 === (20)) { */ case 14:
					op[0] = (function(elemIndir, elemIndir$1, elemIndir$2, elemOp, elemOp$1, elemOp$2, helper, helper$1, info, keyIndir, keyOp, op) { return function $b(i, state, iv) {
						var i, iv, state, $s, $r;
						/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; i = $f.i; iv = $f.iv; state = $f.state; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
						if (!state.sendZero && (!$clone(iv, reflect.Value).IsValid() || $clone(iv, reflect.Value).IsNil())) {
							$s = -1; return;
						}
						state.update(i);
						$r = state.enc.encodeInterface(state.b, $clone(iv, reflect.Value)); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						$s = -1; return;
						/* */ } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.i = i; $f.iv = iv; $f.state = state; $f.$s = $s; $f.$r = $r; return $f;
					}; })(elemIndir, elemIndir$1, elemIndir$2, elemOp, elemOp$1, elemOp$2, helper, helper$1, info, keyIndir, keyOp, op);
				/* } */ case 15:
			case 8:
		/* } */ case 7:
		/* */ if (op[0] === $throwNilPointerError) { $s = 35; continue; }
		/* */ $s = 36; continue;
		/* if (op[0] === $throwNilPointerError) { */ case 35:
			$r = errorf("can't happen: encode type %s", new sliceType$1([rt])); /* */ $s = 37; case 37: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 36:
		$s = -1; return [(op.$ptr || (op.$ptr = new ptrType$40(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, op))), indir];
		/* */ } return; } if ($f === undefined) { $f = { $blk: encOpFor }; } $f._1 = _1; $f._entry = _entry; $f._entry$1 = _entry$1; $f._entry$2 = _entry$2; $f._key = _key; $f._r$22 = _r$22; $f._r$23 = _r$23; $f._r$24 = _r$24; $f._r$25 = _r$25; $f._r$26 = _r$26; $f._r$27 = _r$27; $f._r$28 = _r$28; $f._r$29 = _r$29; $f._r$30 = _r$30; $f._r$31 = _r$31; $f._r$32 = _r$32; $f._r$33 = _r$33; $f._r$34 = _r$34; $f._r$35 = _r$35; $f._r$36 = _r$36; $f._r$37 = _r$37; $f._r$38 = _r$38; $f._r$39 = _r$39; $f._r$40 = _r$40; $f._r$41 = _r$41; $f._r$42 = _r$42; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f.building = building; $f.elemIndir = elemIndir; $f.elemIndir$1 = elemIndir$1; $f.elemIndir$2 = elemIndir$2; $f.elemOp = elemOp; $f.elemOp$1 = elemOp$1; $f.elemOp$2 = elemOp$2; $f.helper = helper; $f.helper$1 = helper$1; $f.inProgress = inProgress; $f.indir = indir; $f.info = info; $f.k = k; $f.keyIndir = keyIndir; $f.keyOp = keyOp; $f.op = op; $f.opPtr = opPtr; $f.rt = rt; $f.t = t; $f.typ = typ; $f.ut = ut; $f.$s = $s; $f.$r = $r; return $f;
	};
	gobEncodeOpFor = function(ut) {
		var _r$22, i, op, rt, ut, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$22 = $f._r$22; i = $f.i; op = $f.op; rt = $f.rt; ut = $f.ut; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		op = [op];
		rt = [rt];
		ut = [ut];
		rt[0] = ut[0].user;
		/* */ if (ut[0].encIndir === -1) { $s = 1; continue; }
		/* */ if (ut[0].encIndir > 0) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (ut[0].encIndir === -1) { */ case 1:
			rt[0] = reflect.PtrTo(rt[0]);
			$s = 3; continue;
		/* } else if (ut[0].encIndir > 0) { */ case 2:
			i = 0;
			/* while (true) { */ case 4:
				/* if (!(i < ut[0].encIndir)) { break; } */ if(!(i < ut[0].encIndir)) { $s = 5; continue; }
				_r$22 = rt[0].Elem(); /* */ $s = 6; case 6: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
				rt[0] = _r$22;
				i = i + (1) << 24 >> 24;
			/* } */ $s = 4; continue; case 5:
		/* } */ case 3:
		op[0] = $throwNilPointerError;
		op[0] = (function(op, rt, ut) { return function $b(i$1, state, v) {
			var _r$23, _v, i$1, state, v, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$23 = $f._r$23; _v = $f._v; i$1 = $f.i$1; state = $f.state; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			/* */ if (ut[0].encIndir === -1) { $s = 1; continue; }
			/* */ $s = 2; continue;
			/* if (ut[0].encIndir === -1) { */ case 1:
				/* */ if (!$clone(v, reflect.Value).CanAddr()) { $s = 3; continue; }
				/* */ $s = 4; continue;
				/* if (!$clone(v, reflect.Value).CanAddr()) { */ case 3:
					$r = errorf("unaddressable value of type %s", new sliceType$1([rt[0]])); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 4:
				v = $clone(v, reflect.Value).Addr();
			/* } */ case 2:
			if (!(!state.sendZero)) { _v = false; $s = 8; continue s; }
			_r$23 = isZero($clone(v, reflect.Value)); /* */ $s = 9; case 9: if($c) { $c = false; _r$23 = _r$23.$blk(); } if (_r$23 && _r$23.$blk !== undefined) { break s; }
			_v = _r$23; case 8:
			/* */ if (_v) { $s = 6; continue; }
			/* */ $s = 7; continue;
			/* if (_v) { */ case 6:
				$s = -1; return;
			/* } */ case 7:
			state.update(i$1);
			$r = state.enc.encodeGobEncoder(state.b, ut[0], $clone(v, reflect.Value)); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = -1; return;
			/* */ } return; } if ($f === undefined) { $f = { $blk: $b }; } $f._r$23 = _r$23; $f._v = _v; $f.i$1 = i$1; $f.state = state; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
		}; })(op, rt, ut);
		$s = -1; return [(op.$ptr || (op.$ptr = new ptrType$40(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, op))), ((ut[0].encIndir >> 0))];
		/* */ } return; } if ($f === undefined) { $f = { $blk: gobEncodeOpFor }; } $f._r$22 = _r$22; $f.i = i; $f.op = op; $f.rt = rt; $f.ut = ut; $f.$s = $s; $f.$r = $r; return $f;
	};
	compileEnc = function(ut, building) {
		var _r$22, _r$23, _r$24, _r$25, _r$26, _r$27, _r$28, _tmp, _tmp$1, _tuple, _tuple$1, _v, building, engine, f, fieldNum, indir, indir$1, op, op$1, rt, seen, srt, ut, wireFieldNum, x$2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$22 = $f._r$22; _r$23 = $f._r$23; _r$24 = $f._r$24; _r$25 = $f._r$25; _r$26 = $f._r$26; _r$27 = $f._r$27; _r$28 = $f._r$28; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _v = $f._v; building = $f.building; engine = $f.engine; f = $f.f; fieldNum = $f.fieldNum; indir = $f.indir; indir$1 = $f.indir$1; op = $f.op; op$1 = $f.op$1; rt = $f.rt; seen = $f.seen; srt = $f.srt; ut = $f.ut; wireFieldNum = $f.wireFieldNum; x$2 = $f.x$2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		srt = ut.base;
		engine = new encEngine.ptr(sliceType$20.nil);
		seen = {};
		rt = ut.base;
		if (!((ut.externalEnc === 0))) {
			rt = ut.user;
		}
		if (!(ut.externalEnc === 0)) { _v = false; $s = 4; continue s; }
		_r$22 = srt.Kind(); /* */ $s = 5; case 5: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
		_v = _r$22 === 25; case 4:
		/* */ if (_v) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (_v) { */ case 1:
			_tmp = 0;
			_tmp$1 = 0;
			fieldNum = _tmp;
			wireFieldNum = _tmp$1;
			/* while (true) { */ case 6:
				_r$23 = srt.NumField(); /* */ $s = 8; case 8: if($c) { $c = false; _r$23 = _r$23.$blk(); } if (_r$23 && _r$23.$blk !== undefined) { break s; }
				/* if (!(fieldNum < _r$23)) { break; } */ if(!(fieldNum < _r$23)) { $s = 7; continue; }
				f = [f];
				_r$24 = srt.Field(fieldNum); /* */ $s = 9; case 9: if($c) { $c = false; _r$24 = _r$24.$blk(); } if (_r$24 && _r$24.$blk !== undefined) { break s; }
				f[0] = $clone(_r$24, reflect.StructField);
				_r$25 = isSent(f[0]); /* */ $s = 12; case 12: if($c) { $c = false; _r$25 = _r$25.$blk(); } if (_r$25 && _r$25.$blk !== undefined) { break s; }
				/* */ if (!_r$25) { $s = 10; continue; }
				/* */ $s = 11; continue;
				/* if (!_r$25) { */ case 10:
					fieldNum = fieldNum + (1) >> 0;
					/* continue; */ $s = 6; continue;
				/* } */ case 11:
				_r$26 = encOpFor(f[0].Type, seen, building); /* */ $s = 13; case 13: if($c) { $c = false; _r$26 = _r$26.$blk(); } if (_r$26 && _r$26.$blk !== undefined) { break s; }
				_tuple = _r$26;
				op = _tuple[0];
				indir = _tuple[1];
				engine.instr = $append(engine.instr, new encInstr.ptr(op.$get(), wireFieldNum, f[0].Index, indir));
				wireFieldNum = wireFieldNum + (1) >> 0;
				fieldNum = fieldNum + (1) >> 0;
			/* } */ $s = 6; continue; case 7:
			_r$27 = srt.NumField(); /* */ $s = 16; case 16: if($c) { $c = false; _r$27 = _r$27.$blk(); } if (_r$27 && _r$27.$blk !== undefined) { break s; }
			/* */ if (_r$27 > 0 && (engine.instr.$length === 0)) { $s = 14; continue; }
			/* */ $s = 15; continue;
			/* if (_r$27 > 0 && (engine.instr.$length === 0)) { */ case 14:
				$r = errorf("type %s has no exported fields", new sliceType$1([rt])); /* */ $s = 17; case 17: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 15:
			engine.instr = $append(engine.instr, new encInstr.ptr(encStructTerminator, 0, sliceType$8.nil, 0));
			$s = 3; continue;
		/* } else { */ case 2:
			engine.instr = $makeSlice(sliceType$20, 1);
			_r$28 = encOpFor(rt, seen, building); /* */ $s = 18; case 18: if($c) { $c = false; _r$28 = _r$28.$blk(); } if (_r$28 && _r$28.$blk !== undefined) { break s; }
			_tuple$1 = _r$28;
			op$1 = _tuple$1[0];
			indir$1 = _tuple$1[1];
			encInstr.copy((x$2 = engine.instr, (0 >= x$2.$length ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + 0])), new encInstr.ptr(op$1.$get(), 0, sliceType$8.nil, indir$1));
		/* } */ case 3:
		$s = -1; return engine;
		/* */ } return; } if ($f === undefined) { $f = { $blk: compileEnc }; } $f._r$22 = _r$22; $f._r$23 = _r$23; $f._r$24 = _r$24; $f._r$25 = _r$25; $f._r$26 = _r$26; $f._r$27 = _r$27; $f._r$28 = _r$28; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._v = _v; $f.building = building; $f.engine = engine; $f.f = f; $f.fieldNum = fieldNum; $f.indir = indir; $f.indir$1 = indir$1; $f.op = op; $f.op$1 = op$1; $f.rt = rt; $f.seen = seen; $f.srt = srt; $f.ut = ut; $f.wireFieldNum = wireFieldNum; $f.x$2 = x$2; $f.$s = $s; $f.$r = $r; return $f;
	};
	getEncEngine = function(ut, building) {
		var _r$22, _r$23, _tuple, _tuple$1, building, enc, err, info, ok, ut, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$22 = $f._r$22; _r$23 = $f._r$23; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; building = $f.building; enc = $f.enc; err = $f.err; info = $f.info; ok = $f.ok; ut = $f.ut; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r$22 = getTypeInfo(ut); /* */ $s = 1; case 1: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
		_tuple = _r$22;
		info = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			error_(err);
		}
		_tuple$1 = $assertType(info.encoder.Load(), ptrType$41, true);
		enc = _tuple$1[0];
		ok = _tuple$1[1];
		/* */ if (!ok) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!ok) { */ case 2:
			_r$23 = buildEncEngine(info, ut, building); /* */ $s = 4; case 4: if($c) { $c = false; _r$23 = _r$23.$blk(); } if (_r$23 && _r$23.$blk !== undefined) { break s; }
			enc = _r$23;
		/* } */ case 3:
		$s = -1; return enc;
		/* */ } return; } if ($f === undefined) { $f = { $blk: getEncEngine }; } $f._r$22 = _r$22; $f._r$23 = _r$23; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.building = building; $f.enc = enc; $f.err = err; $f.info = info; $f.ok = ok; $f.ut = ut; $f.$s = $s; $f.$r = $r; return $f;
	};
	buildEncEngine = function(info, ut, building) {
		var _entry, _key, _r$22, _tuple, building, enc, info, ok, ut, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _entry = $f._entry; _key = $f._key; _r$22 = $f._r$22; _tuple = $f._tuple; building = $f.building; enc = $f.enc; info = $f.info; ok = $f.ok; ut = $f.ut; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		if (!(building === false) && (_entry = building[ptrType$42.keyFor(info)], _entry !== undefined ? _entry.v : false)) {
			$s = -1; return ptrType$41.nil;
		}
		info.encInit.Lock();
		$deferred.push([$methodVal(info.encInit, "Unlock"), []]);
		_tuple = $assertType(info.encoder.Load(), ptrType$41, true);
		enc = _tuple[0];
		ok = _tuple[1];
		/* */ if (!ok) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!ok) { */ case 1:
			if (building === false) {
				building = {};
			}
			_key = info; (building || $throwRuntimeError("assignment to entry in nil map"))[ptrType$42.keyFor(_key)] = { k: _key, v: true };
			_r$22 = compileEnc(ut, building); /* */ $s = 3; case 3: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
			enc = _r$22;
			info.encoder.Store(enc);
		/* } */ case 2:
		$s = -1; return enc;
		/* */ } return; } } catch(err) { $err = err; $s = -1; return ptrType$41.nil; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: buildEncEngine }; } $f._entry = _entry; $f._key = _key; $f._r$22 = _r$22; $f._tuple = _tuple; $f.building = building; $f.enc = enc; $f.info = info; $f.ok = ok; $f.ut = ut; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	Encoder.ptr.prototype.encode = function(b, value, ut) {
		var _r$22, _r$23, _r$24, _r$25, _v, b, enc, engine, i, indir, ut, value, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$22 = $f._r$22; _r$23 = $f._r$23; _r$24 = $f._r$24; _r$25 = $f._r$25; _v = $f._v; b = $f.b; enc = $f.enc; engine = $f.engine; i = $f.i; indir = $f.indir; ut = $f.ut; value = $f.value; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		enc = this;
		$deferred.push([catchError, [(enc.$ptr_err || (enc.$ptr_err = new ptrType$34(function() { return this.$target.err; }, function($v) { this.$target.err = $v; }, enc)))]]);
		_r$22 = getEncEngine(ut, false); /* */ $s = 1; case 1: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
		engine = _r$22;
		indir = ut.indir;
		if (!((ut.externalEnc === 0))) {
			indir = ((ut.encIndir >> 0));
		}
		i = 0;
		/* while (true) { */ case 2:
			/* if (!(i < indir)) { break; } */ if(!(i < indir)) { $s = 3; continue; }
			_r$23 = reflect.Indirect($clone(value, reflect.Value)); /* */ $s = 4; case 4: if($c) { $c = false; _r$23 = _r$23.$blk(); } if (_r$23 && _r$23.$blk !== undefined) { break s; }
			value = _r$23;
			i = i + (1) >> 0;
		/* } */ $s = 2; continue; case 3:
		if (!(ut.externalEnc === 0)) { _v = false; $s = 8; continue s; }
		_r$24 = $clone(value, reflect.Value).Type(); /* */ $s = 9; case 9: if($c) { $c = false; _r$24 = _r$24.$blk(); } if (_r$24 && _r$24.$blk !== undefined) { break s; }
		_r$25 = _r$24.Kind(); /* */ $s = 10; case 10: if($c) { $c = false; _r$25 = _r$25.$blk(); } if (_r$25 && _r$25.$blk !== undefined) { break s; }
		_v = _r$25 === 25; case 8:
		/* */ if (_v) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if (_v) { */ case 5:
			$r = enc.encodeStruct(b, engine, $clone(value, reflect.Value)); /* */ $s = 11; case 11: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 7; continue;
		/* } else { */ case 6:
			$r = enc.encodeSingle(b, engine, $clone(value, reflect.Value)); /* */ $s = 12; case 12: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 7:
		$s = -1; return;
		/* */ } return; } } catch(err) { $err = err; $s = -1; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: Encoder.ptr.prototype.encode }; } $f._r$22 = _r$22; $f._r$23 = _r$23; $f._r$24 = _r$24; $f._r$25 = _r$25; $f._v = _v; $f.b = b; $f.enc = enc; $f.engine = engine; $f.i = i; $f.indir = indir; $f.ut = ut; $f.value = value; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	Encoder.prototype.encode = function(b, value, ut) { return this.$val.encode(b, value, ut); };
	NewEncoder = function(w) {
		var enc, w;
		enc = new Encoder.ptr(new nosync.Mutex.ptr(false), sliceType$21.nil, false, ptrType$36.nil, ptrType$36.nil, new encBuffer.ptr(sliceType$2.nil, arrayType$1.zero()), $ifaceNil);
		enc.w = new sliceType$21([w]);
		enc.sent = {};
		enc.countState = enc.newEncoderState(new encBuffer.ptr(sliceType$2.nil, arrayType$1.zero()));
		return enc;
	};
	$pkg.NewEncoder = NewEncoder;
	Encoder.ptr.prototype.writer = function() {
		var enc, x$2, x$3;
		enc = this;
		return (x$2 = enc.w, x$3 = enc.w.$length - 1 >> 0, ((x$3 < 0 || x$3 >= x$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + x$3]));
	};
	Encoder.prototype.writer = function() { return this.$val.writer(); };
	Encoder.ptr.prototype.pushWriter = function(w) {
		var enc, w;
		enc = this;
		enc.w = $append(enc.w, w);
	};
	Encoder.prototype.pushWriter = function(w) { return this.$val.pushWriter(w); };
	Encoder.ptr.prototype.popWriter = function() {
		var enc;
		enc = this;
		enc.w = $subslice(enc.w, 0, (enc.w.$length - 1 >> 0));
	};
	Encoder.prototype.popWriter = function() { return this.$val.popWriter(); };
	Encoder.ptr.prototype.setError = function(err) {
		var enc, err;
		enc = this;
		if ($interfaceIsEqual(enc.err, $ifaceNil)) {
			enc.err = err;
		}
	};
	Encoder.prototype.setError = function(err) { return this.$val.setError(err); };
	Encoder.ptr.prototype.writeMessage = function(w, b) {
		var _r$22, _tuple, b, enc, err, message, messageLen, offset, w, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$22 = $f._r$22; _tuple = $f._tuple; b = $f.b; enc = $f.enc; err = $f.err; message = $f.message; messageLen = $f.messageLen; offset = $f.offset; w = $f.w; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		enc = this;
		message = b.Bytes();
		messageLen = message.$length - 9 >> 0;
		if (messageLen >= 1073741824) {
			enc.setError(errors.New("gob: encoder: message too big"));
			$s = -1; return;
		}
		enc.countState.b.Reset();
		enc.countState.encodeUint((new $Uint64(0, messageLen)));
		offset = 9 - enc.countState.b.Len() >> 0;
		$copySlice($subslice(message, offset), enc.countState.b.Bytes());
		_r$22 = w.Write($subslice(message, offset)); /* */ $s = 1; case 1: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
		_tuple = _r$22;
		err = _tuple[1];
		b.Reset();
		b.Write(spaceForLength);
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			enc.setError(err);
		}
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Encoder.ptr.prototype.writeMessage }; } $f._r$22 = _r$22; $f._tuple = _tuple; $f.b = b; $f.enc = enc; $f.err = err; $f.message = message; $f.messageLen = messageLen; $f.offset = offset; $f.w = w; $f.$s = $s; $f.$r = $r; return $f;
	};
	Encoder.prototype.writeMessage = function(w, b) { return this.$val.writeMessage(w, b); };
	Encoder.ptr.prototype.sendActualType = function(w, state, ut, actual) {
		var _1, _arg, _arg$1, _arg$10, _arg$11, _arg$12, _arg$13, _arg$14, _arg$2, _arg$3, _arg$4, _arg$5, _arg$6, _arg$7, _arg$8, _arg$9, _entry, _key, _key$1, _r$22, _r$23, _r$24, _r$25, _r$26, _r$27, _r$28, _r$29, _r$30, _r$31, _r$32, _r$33, _r$34, _r$35, _tuple, _tuple$1, actual, alreadySent, enc, err, i, info, sent, st, state, ut, w, x$2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$10 = $f._arg$10; _arg$11 = $f._arg$11; _arg$12 = $f._arg$12; _arg$13 = $f._arg$13; _arg$14 = $f._arg$14; _arg$2 = $f._arg$2; _arg$3 = $f._arg$3; _arg$4 = $f._arg$4; _arg$5 = $f._arg$5; _arg$6 = $f._arg$6; _arg$7 = $f._arg$7; _arg$8 = $f._arg$8; _arg$9 = $f._arg$9; _entry = $f._entry; _key = $f._key; _key$1 = $f._key$1; _r$22 = $f._r$22; _r$23 = $f._r$23; _r$24 = $f._r$24; _r$25 = $f._r$25; _r$26 = $f._r$26; _r$27 = $f._r$27; _r$28 = $f._r$28; _r$29 = $f._r$29; _r$30 = $f._r$30; _r$31 = $f._r$31; _r$32 = $f._r$32; _r$33 = $f._r$33; _r$34 = $f._r$34; _r$35 = $f._r$35; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; actual = $f.actual; alreadySent = $f.alreadySent; enc = $f.enc; err = $f.err; i = $f.i; info = $f.info; sent = $f.sent; st = $f.st; state = $f.state; ut = $f.ut; w = $f.w; x$2 = $f.x$2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		sent = false;
		enc = this;
		_tuple = (_entry = enc.sent[reflect.Type.keyFor(actual)], _entry !== undefined ? [_entry.v, true] : [0, false]);
		alreadySent = _tuple[1];
		if (alreadySent) {
			sent = false;
			$s = -1; return sent;
		}
		_r$22 = getTypeInfo(ut); /* */ $s = 1; case 1: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
		_tuple$1 = _r$22;
		info = _tuple$1[0];
		err = _tuple$1[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			enc.setError(err);
			$s = -1; return sent;
		}
		state.encodeInt((x$2 = (new $Int64(0, info.id)), new $Int64(-x$2.$high, -x$2.$low)));
		_arg = state.b;
		_r$23 = reflect.ValueOf(info.wire); /* */ $s = 2; case 2: if($c) { $c = false; _r$23 = _r$23.$blk(); } if (_r$23 && _r$23.$blk !== undefined) { break s; }
		_arg$1 = $clone(_r$23, reflect.Value);
		_arg$2 = wireTypeUserInfo;
		$r = enc.encode(_arg, _arg$1, _arg$2); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = enc.writeMessage(w, state.b); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		if (!($interfaceIsEqual(enc.err, $ifaceNil))) {
			$s = -1; return sent;
		}
		_key = ut.base; (enc.sent || $throwRuntimeError("assignment to entry in nil map"))[reflect.Type.keyFor(_key)] = { k: _key, v: info.id };
		if (!($interfaceIsEqual(ut.user, ut.base))) {
			_key$1 = ut.user; (enc.sent || $throwRuntimeError("assignment to entry in nil map"))[reflect.Type.keyFor(_key$1)] = { k: _key$1, v: info.id };
		}
			st = actual;
			_r$24 = st.Kind(); /* */ $s = 6; case 6: if($c) { $c = false; _r$24 = _r$24.$blk(); } if (_r$24 && _r$24.$blk !== undefined) { break s; }
			_1 = _r$24;
			/* */ if (_1 === (25)) { $s = 7; continue; }
			/* */ if ((_1 === (17)) || (_1 === (23))) { $s = 8; continue; }
			/* */ if (_1 === (21)) { $s = 9; continue; }
			/* */ $s = 10; continue;
			/* if (_1 === (25)) { */ case 7:
				i = 0;
				/* while (true) { */ case 11:
					_r$25 = st.NumField(); /* */ $s = 13; case 13: if($c) { $c = false; _r$25 = _r$25.$blk(); } if (_r$25 && _r$25.$blk !== undefined) { break s; }
					/* if (!(i < _r$25)) { break; } */ if(!(i < _r$25)) { $s = 12; continue; }
					_r$26 = st.Field(i); /* */ $s = 16; case 16: if($c) { $c = false; _r$26 = _r$26.$blk(); } if (_r$26 && _r$26.$blk !== undefined) { break s; }
					_r$27 = isExported(_r$26.Name); /* */ $s = 17; case 17: if($c) { $c = false; _r$27 = _r$27.$blk(); } if (_r$27 && _r$27.$blk !== undefined) { break s; }
					/* */ if (_r$27) { $s = 14; continue; }
					/* */ $s = 15; continue;
					/* if (_r$27) { */ case 14:
						_arg$3 = w;
						_arg$4 = state;
						_r$28 = st.Field(i); /* */ $s = 18; case 18: if($c) { $c = false; _r$28 = _r$28.$blk(); } if (_r$28 && _r$28.$blk !== undefined) { break s; }
						_arg$5 = _r$28.Type;
						_r$29 = enc.sendType(_arg$3, _arg$4, _arg$5); /* */ $s = 19; case 19: if($c) { $c = false; _r$29 = _r$29.$blk(); } if (_r$29 && _r$29.$blk !== undefined) { break s; }
						_r$29;
					/* } */ case 15:
					i = i + (1) >> 0;
				/* } */ $s = 11; continue; case 12:
				$s = 10; continue;
			/* } else if ((_1 === (17)) || (_1 === (23))) { */ case 8:
				_arg$6 = w;
				_arg$7 = state;
				_r$30 = st.Elem(); /* */ $s = 20; case 20: if($c) { $c = false; _r$30 = _r$30.$blk(); } if (_r$30 && _r$30.$blk !== undefined) { break s; }
				_arg$8 = _r$30;
				_r$31 = enc.sendType(_arg$6, _arg$7, _arg$8); /* */ $s = 21; case 21: if($c) { $c = false; _r$31 = _r$31.$blk(); } if (_r$31 && _r$31.$blk !== undefined) { break s; }
				_r$31;
				$s = 10; continue;
			/* } else if (_1 === (21)) { */ case 9:
				_arg$9 = w;
				_arg$10 = state;
				_r$32 = st.Key(); /* */ $s = 22; case 22: if($c) { $c = false; _r$32 = _r$32.$blk(); } if (_r$32 && _r$32.$blk !== undefined) { break s; }
				_arg$11 = _r$32;
				_r$33 = enc.sendType(_arg$9, _arg$10, _arg$11); /* */ $s = 23; case 23: if($c) { $c = false; _r$33 = _r$33.$blk(); } if (_r$33 && _r$33.$blk !== undefined) { break s; }
				_r$33;
				_arg$12 = w;
				_arg$13 = state;
				_r$34 = st.Elem(); /* */ $s = 24; case 24: if($c) { $c = false; _r$34 = _r$34.$blk(); } if (_r$34 && _r$34.$blk !== undefined) { break s; }
				_arg$14 = _r$34;
				_r$35 = enc.sendType(_arg$12, _arg$13, _arg$14); /* */ $s = 25; case 25: if($c) { $c = false; _r$35 = _r$35.$blk(); } if (_r$35 && _r$35.$blk !== undefined) { break s; }
				_r$35;
			/* } */ case 10:
		case 5:
		sent = true;
		$s = -1; return sent;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Encoder.ptr.prototype.sendActualType }; } $f._1 = _1; $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$10 = _arg$10; $f._arg$11 = _arg$11; $f._arg$12 = _arg$12; $f._arg$13 = _arg$13; $f._arg$14 = _arg$14; $f._arg$2 = _arg$2; $f._arg$3 = _arg$3; $f._arg$4 = _arg$4; $f._arg$5 = _arg$5; $f._arg$6 = _arg$6; $f._arg$7 = _arg$7; $f._arg$8 = _arg$8; $f._arg$9 = _arg$9; $f._entry = _entry; $f._key = _key; $f._key$1 = _key$1; $f._r$22 = _r$22; $f._r$23 = _r$23; $f._r$24 = _r$24; $f._r$25 = _r$25; $f._r$26 = _r$26; $f._r$27 = _r$27; $f._r$28 = _r$28; $f._r$29 = _r$29; $f._r$30 = _r$30; $f._r$31 = _r$31; $f._r$32 = _r$32; $f._r$33 = _r$33; $f._r$34 = _r$34; $f._r$35 = _r$35; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.actual = actual; $f.alreadySent = alreadySent; $f.enc = enc; $f.err = err; $f.i = i; $f.info = info; $f.sent = sent; $f.st = st; $f.state = state; $f.ut = ut; $f.w = w; $f.x$2 = x$2; $f.$s = $s; $f.$r = $r; return $f;
	};
	Encoder.prototype.sendActualType = function(w, state, ut, actual) { return this.$val.sendActualType(w, state, ut, actual); };
	Encoder.ptr.prototype.sendType = function(w, state, origt) {
		var _1, _r$22, _r$23, _r$24, _r$25, _r$26, _r$27, enc, origt, rt, sent, state, ut, w, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _r$22 = $f._r$22; _r$23 = $f._r$23; _r$24 = $f._r$24; _r$25 = $f._r$25; _r$26 = $f._r$26; _r$27 = $f._r$27; enc = $f.enc; origt = $f.origt; rt = $f.rt; sent = $f.sent; state = $f.state; ut = $f.ut; w = $f.w; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		sent = false;
		enc = this;
		_r$22 = userType(origt); /* */ $s = 1; case 1: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
		ut = _r$22;
		/* */ if (!((ut.externalEnc === 0))) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!((ut.externalEnc === 0))) { */ case 2:
			_r$23 = enc.sendActualType(w, state, ut, ut.base); /* */ $s = 4; case 4: if($c) { $c = false; _r$23 = _r$23.$blk(); } if (_r$23 && _r$23.$blk !== undefined) { break s; }
			sent = _r$23;
			$s = -1; return sent;
		/* } */ case 3:
			rt = ut.base;
			_r$24 = rt.Kind(); /* */ $s = 6; case 6: if($c) { $c = false; _r$24 = _r$24.$blk(); } if (_r$24 && _r$24.$blk !== undefined) { break s; }
			_1 = _r$24;
			/* */ if (_1 === (23)) { $s = 7; continue; }
			/* */ if (_1 === (17)) { $s = 8; continue; }
			/* */ if (_1 === (21)) { $s = 9; continue; }
			/* */ if (_1 === (25)) { $s = 10; continue; }
			/* */ if ((_1 === (18)) || (_1 === (19))) { $s = 11; continue; }
			/* */ $s = 12; continue;
			/* if (_1 === (23)) { */ case 7:
				_r$25 = rt.Elem(); /* */ $s = 16; case 16: if($c) { $c = false; _r$25 = _r$25.$blk(); } if (_r$25 && _r$25.$blk !== undefined) { break s; }
				_r$26 = _r$25.Kind(); /* */ $s = 17; case 17: if($c) { $c = false; _r$26 = _r$26.$blk(); } if (_r$26 && _r$26.$blk !== undefined) { break s; }
				/* */ if (_r$26 === 8) { $s = 14; continue; }
				/* */ $s = 15; continue;
				/* if (_r$26 === 8) { */ case 14:
					$s = -1; return sent;
				/* } */ case 15:
				/* break; */ $s = 5; continue;
				$s = 13; continue;
			/* } else if (_1 === (17)) { */ case 8:
				/* break; */ $s = 5; continue;
				$s = 13; continue;
			/* } else if (_1 === (21)) { */ case 9:
				/* break; */ $s = 5; continue;
				$s = 13; continue;
			/* } else if (_1 === (25)) { */ case 10:
				/* break; */ $s = 5; continue;
				$s = 13; continue;
			/* } else if ((_1 === (18)) || (_1 === (19))) { */ case 11:
				$s = -1; return sent;
			/* } else { */ case 12:
				$s = -1; return sent;
			/* } */ case 13:
		case 5:
		_r$27 = enc.sendActualType(w, state, ut, ut.base); /* */ $s = 18; case 18: if($c) { $c = false; _r$27 = _r$27.$blk(); } if (_r$27 && _r$27.$blk !== undefined) { break s; }
		sent = _r$27;
		$s = -1; return sent;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Encoder.ptr.prototype.sendType }; } $f._1 = _1; $f._r$22 = _r$22; $f._r$23 = _r$23; $f._r$24 = _r$24; $f._r$25 = _r$25; $f._r$26 = _r$26; $f._r$27 = _r$27; $f.enc = enc; $f.origt = origt; $f.rt = rt; $f.sent = sent; $f.state = state; $f.ut = ut; $f.w = w; $f.$s = $s; $f.$r = $r; return $f;
	};
	Encoder.prototype.sendType = function(w, state, origt) { return this.$val.sendType(w, state, origt); };
	Encoder.ptr.prototype.Encode = function(e) {
		var _r$22, _r$23, e, enc, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$22 = $f._r$22; _r$23 = $f._r$23; e = $f.e; enc = $f.enc; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		enc = this;
		_r$22 = reflect.ValueOf(e); /* */ $s = 1; case 1: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
		_r$23 = enc.EncodeValue($clone(_r$22, reflect.Value)); /* */ $s = 2; case 2: if($c) { $c = false; _r$23 = _r$23.$blk(); } if (_r$23 && _r$23.$blk !== undefined) { break s; }
		$s = -1; return _r$23;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Encoder.ptr.prototype.Encode }; } $f._r$22 = _r$22; $f._r$23 = _r$23; $f.e = e; $f.enc = enc; $f.$s = $s; $f.$r = $r; return $f;
	};
	Encoder.prototype.Encode = function(e) { return this.$val.Encode(e); };
	Encoder.ptr.prototype.sendTypeDescriptor = function(w, state, ut) {
		var _entry, _key, _r$22, _r$23, _tuple, _tuple$1, alreadySent, enc, err, info, rt, sent, state, ut, w, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _entry = $f._entry; _key = $f._key; _r$22 = $f._r$22; _r$23 = $f._r$23; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; alreadySent = $f.alreadySent; enc = $f.enc; err = $f.err; info = $f.info; rt = $f.rt; sent = $f.sent; state = $f.state; ut = $f.ut; w = $f.w; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		enc = this;
		rt = ut.base;
		if (!((ut.externalEnc === 0))) {
			rt = ut.user;
		}
		_tuple = (_entry = enc.sent[reflect.Type.keyFor(rt)], _entry !== undefined ? [_entry.v, true] : [0, false]);
		alreadySent = _tuple[1];
		/* */ if (!alreadySent) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!alreadySent) { */ case 1:
			_r$22 = enc.sendType(w, state, rt); /* */ $s = 3; case 3: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
			sent = _r$22;
			if (!($interfaceIsEqual(enc.err, $ifaceNil))) {
				$s = -1; return;
			}
			/* */ if (!sent) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (!sent) { */ case 4:
				_r$23 = getTypeInfo(ut); /* */ $s = 6; case 6: if($c) { $c = false; _r$23 = _r$23.$blk(); } if (_r$23 && _r$23.$blk !== undefined) { break s; }
				_tuple$1 = _r$23;
				info = _tuple$1[0];
				err = _tuple$1[1];
				if (!($interfaceIsEqual(err, $ifaceNil))) {
					enc.setError(err);
					$s = -1; return;
				}
				_key = rt; (enc.sent || $throwRuntimeError("assignment to entry in nil map"))[reflect.Type.keyFor(_key)] = { k: _key, v: info.id };
			/* } */ case 5:
		/* } */ case 2:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Encoder.ptr.prototype.sendTypeDescriptor }; } $f._entry = _entry; $f._key = _key; $f._r$22 = _r$22; $f._r$23 = _r$23; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.alreadySent = alreadySent; $f.enc = enc; $f.err = err; $f.info = info; $f.rt = rt; $f.sent = sent; $f.state = state; $f.ut = ut; $f.w = w; $f.$s = $s; $f.$r = $r; return $f;
	};
	Encoder.prototype.sendTypeDescriptor = function(w, state, ut) { return this.$val.sendTypeDescriptor(w, state, ut); };
	Encoder.ptr.prototype.sendTypeId = function(state, ut) {
		var _entry, enc, state, ut;
		enc = this;
		state.encodeInt((new $Int64(0, (_entry = enc.sent[reflect.Type.keyFor(ut.base)], _entry !== undefined ? _entry.v : 0))));
	};
	Encoder.prototype.sendTypeId = function(state, ut) { return this.$val.sendTypeId(state, ut); };
	Encoder.ptr.prototype.EncodeValue = function(value) {
		var _r$22, _r$23, _r$24, _r$25, _tuple, enc, err, state, ut, value, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$22 = $f._r$22; _r$23 = $f._r$23; _r$24 = $f._r$24; _r$25 = $f._r$25; _tuple = $f._tuple; enc = $f.enc; err = $f.err; state = $f.state; ut = $f.ut; value = $f.value; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		enc = this;
		if ($clone(value, reflect.Value).Kind() === 0) {
			$s = -1; return errors.New("gob: cannot encode nil value");
		}
		/* */ if (($clone(value, reflect.Value).Kind() === 22) && $clone(value, reflect.Value).IsNil()) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (($clone(value, reflect.Value).Kind() === 22) && $clone(value, reflect.Value).IsNil()) { */ case 1:
			_r$22 = $clone(value, reflect.Value).Type(); /* */ $s = 3; case 3: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
			_r$23 = _r$22.String(); /* */ $s = 4; case 4: if($c) { $c = false; _r$23 = _r$23.$blk(); } if (_r$23 && _r$23.$blk !== undefined) { break s; }
			$panic(new $String("gob: cannot encode nil pointer of type " + _r$23));
		/* } */ case 2:
		enc.mutex.Lock();
		$deferred.push([$methodVal(enc.mutex, "Unlock"), []]);
		enc.w = $subslice(enc.w, 0, 1);
		_r$24 = $clone(value, reflect.Value).Type(); /* */ $s = 5; case 5: if($c) { $c = false; _r$24 = _r$24.$blk(); } if (_r$24 && _r$24.$blk !== undefined) { break s; }
		_r$25 = validUserType(_r$24); /* */ $s = 6; case 6: if($c) { $c = false; _r$25 = _r$25.$blk(); } if (_r$25 && _r$25.$blk !== undefined) { break s; }
		_tuple = _r$25;
		ut = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
		}
		enc.err = $ifaceNil;
		enc.byteBuf.Reset();
		enc.byteBuf.Write(spaceForLength);
		state = enc.newEncoderState(enc.byteBuf);
		$r = enc.sendTypeDescriptor(enc.writer(), state, ut); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		enc.sendTypeId(state, ut);
		if (!($interfaceIsEqual(enc.err, $ifaceNil))) {
			$s = -1; return enc.err;
		}
		$r = enc.encode(state.b, $clone(value, reflect.Value), ut); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ if ($interfaceIsEqual(enc.err, $ifaceNil)) { $s = 9; continue; }
		/* */ $s = 10; continue;
		/* if ($interfaceIsEqual(enc.err, $ifaceNil)) { */ case 9:
			$r = enc.writeMessage(enc.writer(), state.b); /* */ $s = 11; case 11: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 10:
		enc.freeEncoderState(state);
		$s = -1; return enc.err;
		/* */ } return; } } catch(err) { $err = err; $s = -1; return $ifaceNil; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: Encoder.ptr.prototype.EncodeValue }; } $f._r$22 = _r$22; $f._r$23 = _r$23; $f._r$24 = _r$24; $f._r$25 = _r$25; $f._tuple = _tuple; $f.enc = enc; $f.err = err; $f.state = state; $f.ut = ut; $f.value = value; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	Encoder.prototype.EncodeValue = function(value) { return this.$val.EncodeValue(value); };
	errorf = function(format, args) {
		var _r$22, args, format, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$22 = $f._r$22; args = $f.args; format = $f.format; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r$22 = fmt.Errorf("gob: " + format, args); /* */ $s = 1; case 1: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
		$r = error_(_r$22); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: errorf }; } $f._r$22 = _r$22; $f.args = args; $f.format = format; $f.$s = $s; $f.$r = $r; return $f;
	};
	error_ = function(err) {
		var err, x$2;
		$panic((x$2 = new gobError.ptr(err), new x$2.constructor.elem(x$2)));
	};
	catchError = function(err) {
		var _tuple, e, err, ge, ok;
		e = $recover();
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			_tuple = $assertType(e, gobError, true);
			ge = $clone(_tuple[0], gobError);
			ok = _tuple[1];
			if (!ok) {
				$panic(e);
			}
			err.$set(ge.err);
		}
	};
	validUserType = function(rt) {
		var _r$22, _r$23, _r$24, _r$25, _r$26, _r$27, _r$28, _r$29, _r$30, _r$31, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, _tuple$5, indir, indir$1, indir$2, indir$3, ok, ok$1, ok$2, ok$3, ok$4, pt, rt, slowpoke, ui, ui$1, ut, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$22 = $f._r$22; _r$23 = $f._r$23; _r$24 = $f._r$24; _r$25 = $f._r$25; _r$26 = $f._r$26; _r$27 = $f._r$27; _r$28 = $f._r$28; _r$29 = $f._r$29; _r$30 = $f._r$30; _r$31 = $f._r$31; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; _tmp$6 = $f._tmp$6; _tmp$7 = $f._tmp$7; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; _tuple$4 = $f._tuple$4; _tuple$5 = $f._tuple$5; indir = $f.indir; indir$1 = $f.indir$1; indir$2 = $f.indir$2; indir$3 = $f.indir$3; ok = $f.ok; ok$1 = $f.ok$1; ok$2 = $f.ok$2; ok$3 = $f.ok$3; ok$4 = $f.ok$4; pt = $f.pt; rt = $f.rt; slowpoke = $f.slowpoke; ui = $f.ui; ui$1 = $f.ui$1; ut = $f.ut; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_tuple = userTypeCache.Load(rt);
		ui = _tuple[0];
		ok = _tuple[1];
		if (ok) {
			$s = -1; return [$assertType(ui, ptrType$1), $ifaceNil];
		}
		ut = new userTypeInfo.ptr($ifaceNil, $ifaceNil, 0, 0, 0, 0, 0);
		ut.base = rt;
		ut.user = rt;
		slowpoke = ut.base;
		/* while (true) { */ case 1:
			pt = ut.base;
			_r$22 = pt.Kind(); /* */ $s = 5; case 5: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
			/* */ if (!((_r$22 === 22))) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (!((_r$22 === 22))) { */ case 3:
				/* break; */ $s = 2; continue;
			/* } */ case 4:
			_r$23 = pt.Elem(); /* */ $s = 6; case 6: if($c) { $c = false; _r$23 = _r$23.$blk(); } if (_r$23 && _r$23.$blk !== undefined) { break s; }
			ut.base = _r$23;
			/* */ if ($interfaceIsEqual(ut.base, slowpoke)) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if ($interfaceIsEqual(ut.base, slowpoke)) { */ case 7:
				_r$24 = ut.base.String(); /* */ $s = 9; case 9: if($c) { $c = false; _r$24 = _r$24.$blk(); } if (_r$24 && _r$24.$blk !== undefined) { break s; }
				_r$25 = errors.New("can't represent recursive pointer type " + _r$24); /* */ $s = 10; case 10: if($c) { $c = false; _r$25 = _r$25.$blk(); } if (_r$25 && _r$25.$blk !== undefined) { break s; }
				$s = -1; return [ptrType$1.nil, _r$25];
			/* } */ case 8:
			/* */ if ((_r$26 = ut.indir % 2, _r$26 === _r$26 ? _r$26 : $throwRuntimeError("integer divide by zero")) === 0) { $s = 11; continue; }
			/* */ $s = 12; continue;
			/* if ((_r$26 = ut.indir % 2, _r$26 === _r$26 ? _r$26 : $throwRuntimeError("integer divide by zero")) === 0) { */ case 11:
				_r$27 = slowpoke.Elem(); /* */ $s = 13; case 13: if($c) { $c = false; _r$27 = _r$27.$blk(); } if (_r$27 && _r$27.$blk !== undefined) { break s; }
				slowpoke = _r$27;
			/* } */ case 12:
			ut.indir = ut.indir + (1) >> 0;
		/* } */ $s = 1; continue; case 2:
		_r$28 = implementsInterface(ut.user, gobEncoderInterfaceType); /* */ $s = 14; case 14: if($c) { $c = false; _r$28 = _r$28.$blk(); } if (_r$28 && _r$28.$blk !== undefined) { break s; }
		_tuple$1 = _r$28;
		ok$1 = _tuple$1[0];
		indir = _tuple$1[1];
		/* */ if (ok$1) { $s = 15; continue; }
		/* */ $s = 16; continue;
		/* if (ok$1) { */ case 15:
			_tmp = 1;
			_tmp$1 = indir;
			ut.externalEnc = _tmp;
			ut.encIndir = _tmp$1;
			$s = 17; continue;
		/* } else { */ case 16:
			_r$29 = implementsInterface(ut.user, binaryMarshalerInterfaceType); /* */ $s = 18; case 18: if($c) { $c = false; _r$29 = _r$29.$blk(); } if (_r$29 && _r$29.$blk !== undefined) { break s; }
			_tuple$2 = _r$29;
			ok$2 = _tuple$2[0];
			indir$1 = _tuple$2[1];
			if (ok$2) {
				_tmp$2 = 2;
				_tmp$3 = indir$1;
				ut.externalEnc = _tmp$2;
				ut.encIndir = _tmp$3;
			}
		/* } */ case 17:
		_r$30 = implementsInterface(ut.user, gobDecoderInterfaceType); /* */ $s = 19; case 19: if($c) { $c = false; _r$30 = _r$30.$blk(); } if (_r$30 && _r$30.$blk !== undefined) { break s; }
		_tuple$3 = _r$30;
		ok$3 = _tuple$3[0];
		indir$2 = _tuple$3[1];
		/* */ if (ok$3) { $s = 20; continue; }
		/* */ $s = 21; continue;
		/* if (ok$3) { */ case 20:
			_tmp$4 = 1;
			_tmp$5 = indir$2;
			ut.externalDec = _tmp$4;
			ut.decIndir = _tmp$5;
			$s = 22; continue;
		/* } else { */ case 21:
			_r$31 = implementsInterface(ut.user, binaryUnmarshalerInterfaceType); /* */ $s = 23; case 23: if($c) { $c = false; _r$31 = _r$31.$blk(); } if (_r$31 && _r$31.$blk !== undefined) { break s; }
			_tuple$4 = _r$31;
			ok$4 = _tuple$4[0];
			indir$3 = _tuple$4[1];
			if (ok$4) {
				_tmp$6 = 2;
				_tmp$7 = indir$3;
				ut.externalDec = _tmp$6;
				ut.decIndir = _tmp$7;
			}
		/* } */ case 22:
		_tuple$5 = userTypeCache.LoadOrStore(rt, ut);
		ui$1 = _tuple$5[0];
		$s = -1; return [$assertType(ui$1, ptrType$1), $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: validUserType }; } $f._r$22 = _r$22; $f._r$23 = _r$23; $f._r$24 = _r$24; $f._r$25 = _r$25; $f._r$26 = _r$26; $f._r$27 = _r$27; $f._r$28 = _r$28; $f._r$29 = _r$29; $f._r$30 = _r$30; $f._r$31 = _r$31; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f._tmp$6 = _tmp$6; $f._tmp$7 = _tmp$7; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f._tuple$4 = _tuple$4; $f._tuple$5 = _tuple$5; $f.indir = indir; $f.indir$1 = indir$1; $f.indir$2 = indir$2; $f.indir$3 = indir$3; $f.ok = ok; $f.ok$1 = ok$1; $f.ok$2 = ok$2; $f.ok$3 = ok$3; $f.ok$4 = ok$4; $f.pt = pt; $f.rt = rt; $f.slowpoke = slowpoke; $f.ui = ui; $f.ui$1 = ui$1; $f.ut = ut; $f.$s = $s; $f.$r = $r; return $f;
	};
	implementsInterface = function(typ, gobEncDecType) {
		var _r$22, _r$23, _r$24, _r$25, _r$26, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, gobEncDecType, indir, p, rt, success, typ, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$22 = $f._r$22; _r$23 = $f._r$23; _r$24 = $f._r$24; _r$25 = $f._r$25; _r$26 = $f._r$26; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; _tmp$6 = $f._tmp$6; _tmp$7 = $f._tmp$7; gobEncDecType = $f.gobEncDecType; indir = $f.indir; p = $f.p; rt = $f.rt; success = $f.success; typ = $f.typ; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		success = false;
		indir = 0;
		if ($interfaceIsEqual(typ, $ifaceNil)) {
			$s = -1; return [success, indir];
		}
		rt = typ;
		/* while (true) { */ case 1:
			_r$22 = rt.Implements(gobEncDecType); /* */ $s = 5; case 5: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
			/* */ if (_r$22) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (_r$22) { */ case 3:
				_tmp = true;
				_tmp$1 = indir;
				success = _tmp;
				indir = _tmp$1;
				$s = -1; return [success, indir];
			/* } */ case 4:
			p = rt;
			_r$23 = p.Kind(); /* */ $s = 8; case 8: if($c) { $c = false; _r$23 = _r$23.$blk(); } if (_r$23 && _r$23.$blk !== undefined) { break s; }
			/* */ if (_r$23 === 22) { $s = 6; continue; }
			/* */ $s = 7; continue;
			/* if (_r$23 === 22) { */ case 6:
				indir = indir + (1) << 24 >> 24;
				if (indir > 100) {
					_tmp$2 = false;
					_tmp$3 = 0;
					success = _tmp$2;
					indir = _tmp$3;
					$s = -1; return [success, indir];
				}
				_r$24 = p.Elem(); /* */ $s = 9; case 9: if($c) { $c = false; _r$24 = _r$24.$blk(); } if (_r$24 && _r$24.$blk !== undefined) { break s; }
				rt = _r$24;
				/* continue; */ $s = 1; continue;
			/* } */ case 7:
			/* break; */ $s = 2; continue;
		/* } */ $s = 1; continue; case 2:
		_r$25 = typ.Kind(); /* */ $s = 12; case 12: if($c) { $c = false; _r$25 = _r$25.$blk(); } if (_r$25 && _r$25.$blk !== undefined) { break s; }
		/* */ if (!((_r$25 === 22))) { $s = 10; continue; }
		/* */ $s = 11; continue;
		/* if (!((_r$25 === 22))) { */ case 10:
			_r$26 = reflect.PtrTo(typ).Implements(gobEncDecType); /* */ $s = 15; case 15: if($c) { $c = false; _r$26 = _r$26.$blk(); } if (_r$26 && _r$26.$blk !== undefined) { break s; }
			/* */ if (_r$26) { $s = 13; continue; }
			/* */ $s = 14; continue;
			/* if (_r$26) { */ case 13:
				_tmp$4 = true;
				_tmp$5 = -1;
				success = _tmp$4;
				indir = _tmp$5;
				$s = -1; return [success, indir];
			/* } */ case 14:
		/* } */ case 11:
		_tmp$6 = false;
		_tmp$7 = 0;
		success = _tmp$6;
		indir = _tmp$7;
		$s = -1; return [success, indir];
		/* */ } return; } if ($f === undefined) { $f = { $blk: implementsInterface }; } $f._r$22 = _r$22; $f._r$23 = _r$23; $f._r$24 = _r$24; $f._r$25 = _r$25; $f._r$26 = _r$26; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f._tmp$6 = _tmp$6; $f._tmp$7 = _tmp$7; $f.gobEncDecType = gobEncDecType; $f.indir = indir; $f.p = p; $f.rt = rt; $f.success = success; $f.typ = typ; $f.$s = $s; $f.$r = $r; return $f;
	};
	userType = function(rt) {
		var _r$22, _tuple, err, rt, ut, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$22 = $f._r$22; _tuple = $f._tuple; err = $f.err; rt = $f.rt; ut = $f.ut; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r$22 = validUserType(rt); /* */ $s = 1; case 1: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
		_tuple = _r$22;
		ut = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			error_(err);
		}
		$s = -1; return ut;
		/* */ } return; } if ($f === undefined) { $f = { $blk: userType }; } $f._r$22 = _r$22; $f._tuple = _tuple; $f.err = err; $f.rt = rt; $f.ut = ut; $f.$s = $s; $f.$r = $r; return $f;
	};
	setTypeId = function(typ) {
		var _key, _r$22, typ, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _key = $f._key; _r$22 = $f._r$22; typ = $f.typ; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r$22 = typ.id(); /* */ $s = 3; case 3: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
		/* */ if (!((_r$22 === 0))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!((_r$22 === 0))) { */ case 1:
			$s = -1; return;
		/* } */ case 2:
		nextId = nextId + (1) >> 0;
		$r = typ.setId(nextId); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_key = nextId; (idToType || $throwRuntimeError("assignment to entry in nil map"))[typeId.keyFor(_key)] = { k: _key, v: typ };
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: setTypeId }; } $f._key = _key; $f._r$22 = _r$22; $f.typ = typ; $f.$s = $s; $f.$r = $r; return $f;
	};
	typeId.prototype.gobType = function() {
		var _entry, t;
		t = this.$val;
		if (t === 0) {
			return $ifaceNil;
		}
		return (_entry = idToType[typeId.keyFor(t)], _entry !== undefined ? _entry.v : $ifaceNil);
	};
	$ptrType(typeId).prototype.gobType = function() { return new typeId(this.$get()).gobType(); };
	typeId.prototype.string = function() {
		var _r$22, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$22 = $f._r$22; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this.$val;
		if ($interfaceIsEqual(new typeId(t).gobType(), $ifaceNil)) {
			$s = -1; return "<nil>";
		}
		_r$22 = new typeId(t).gobType().string(); /* */ $s = 1; case 1: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
		$s = -1; return _r$22;
		/* */ } return; } if ($f === undefined) { $f = { $blk: typeId.prototype.string }; } $f._r$22 = _r$22; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	$ptrType(typeId).prototype.string = function() { return new typeId(this.$get()).string(); };
	typeId.prototype.name = function() {
		var _r$22, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$22 = $f._r$22; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this.$val;
		if ($interfaceIsEqual(new typeId(t).gobType(), $ifaceNil)) {
			$s = -1; return "<nil>";
		}
		_r$22 = new typeId(t).gobType().name(); /* */ $s = 1; case 1: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
		$s = -1; return _r$22;
		/* */ } return; } if ($f === undefined) { $f = { $blk: typeId.prototype.name }; } $f._r$22 = _r$22; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	$ptrType(typeId).prototype.name = function() { return new typeId(this.$get()).name(); };
	CommonType.ptr.prototype.id = function() {
		var t;
		t = this;
		return t.Id;
	};
	CommonType.prototype.id = function() { return this.$val.id(); };
	CommonType.ptr.prototype.setId = function(id) {
		var id, t;
		t = this;
		t.Id = id;
	};
	CommonType.prototype.setId = function(id) { return this.$val.setId(id); };
	CommonType.ptr.prototype.string = function() {
		var t;
		t = this;
		return t.Name;
	};
	CommonType.prototype.string = function() { return this.$val.string(); };
	CommonType.ptr.prototype.safeString = function(seen) {
		var seen, t;
		t = this;
		return t.Name;
	};
	CommonType.prototype.safeString = function(seen) { return this.$val.safeString(seen); };
	CommonType.ptr.prototype.name = function() {
		var t;
		t = this;
		return t.Name;
	};
	CommonType.prototype.name = function() { return this.$val.name(); };
	init$1 = function() {
		var _arg, _arg$1, _arg$2, _arg$3, _arg$4, _arg$5, _entry, _i, _key, _keys, _r$22, _r$23, _r$24, _r$25, _r$26, _r$27, _r$28, _r$29, _ref, k, v, x$2, x$3, x$4, x$5, x$6, x$7, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _arg$3 = $f._arg$3; _arg$4 = $f._arg$4; _arg$5 = $f._arg$5; _entry = $f._entry; _i = $f._i; _key = $f._key; _keys = $f._keys; _r$22 = $f._r$22; _r$23 = $f._r$23; _r$24 = $f._r$24; _r$25 = $f._r$25; _r$26 = $f._r$26; _r$27 = $f._r$27; _r$28 = $f._r$28; _r$29 = $f._r$29; _ref = $f._ref; k = $f.k; v = $f.v; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; x$6 = $f.x$6; x$7 = $f.x$7; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = checkId(16, tWireType); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_r$22 = mustGetTypeInfo(reflect.TypeOf((x$2 = new arrayType.ptr(new CommonType.ptr("", 0), 0, 0), new x$2.constructor.elem(x$2)))); /* */ $s = 2; case 2: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
		_arg = _r$22.id;
		$r = checkId(17, _arg); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_r$23 = mustGetTypeInfo(reflect.TypeOf((x$3 = new CommonType.ptr("", 0), new x$3.constructor.elem(x$3)))); /* */ $s = 4; case 4: if($c) { $c = false; _r$23 = _r$23.$blk(); } if (_r$23 && _r$23.$blk !== undefined) { break s; }
		_arg$1 = _r$23.id;
		$r = checkId(18, _arg$1); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_r$24 = mustGetTypeInfo(reflect.TypeOf((x$4 = new sliceType.ptr(new CommonType.ptr("", 0), 0), new x$4.constructor.elem(x$4)))); /* */ $s = 6; case 6: if($c) { $c = false; _r$24 = _r$24.$blk(); } if (_r$24 && _r$24.$blk !== undefined) { break s; }
		_arg$2 = _r$24.id;
		$r = checkId(19, _arg$2); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_r$25 = mustGetTypeInfo(reflect.TypeOf((x$5 = new structType.ptr(new CommonType.ptr("", 0), sliceType$22.nil), new x$5.constructor.elem(x$5)))); /* */ $s = 8; case 8: if($c) { $c = false; _r$25 = _r$25.$blk(); } if (_r$25 && _r$25.$blk !== undefined) { break s; }
		_arg$3 = _r$25.id;
		$r = checkId(20, _arg$3); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_r$26 = mustGetTypeInfo(reflect.TypeOf((x$6 = new fieldType.ptr("", 0), new x$6.constructor.elem(x$6)))); /* */ $s = 10; case 10: if($c) { $c = false; _r$26 = _r$26.$blk(); } if (_r$26 && _r$26.$blk !== undefined) { break s; }
		_arg$4 = _r$26.id;
		$r = checkId(21, _arg$4); /* */ $s = 11; case 11: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_r$27 = mustGetTypeInfo(reflect.TypeOf((x$7 = new mapType.ptr(new CommonType.ptr("", 0), 0, 0), new x$7.constructor.elem(x$7)))); /* */ $s = 12; case 12: if($c) { $c = false; _r$27 = _r$27.$blk(); } if (_r$27 && _r$27.$blk !== undefined) { break s; }
		_arg$5 = _r$27.id;
		$r = checkId(23, _arg$5); /* */ $s = 13; case 13: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		builtinIdToType = {};
		_ref = idToType;
		_i = 0;
		_keys = $keys(_ref);
		while (true) {
			if (!(_i < _keys.length)) { break; }
			_entry = _ref[_keys[_i]];
			if (_entry === undefined) {
				_i++;
				continue;
			}
			k = _entry.k;
			v = _entry.v;
			_key = k; (builtinIdToType || $throwRuntimeError("assignment to entry in nil map"))[typeId.keyFor(_key)] = { k: _key, v: v };
			_i++;
		}
		/* */ if (nextId > 64) { $s = 14; continue; }
		/* */ $s = 15; continue;
		/* if (nextId > 64) { */ case 14:
			_r$28 = fmt.Sprintln(new sliceType$1([new $String("nextId too large:"), new typeId(nextId)])); /* */ $s = 16; case 16: if($c) { $c = false; _r$28 = _r$28.$blk(); } if (_r$28 && _r$28.$blk !== undefined) { break s; }
			$panic(new $String(_r$28));
		/* } */ case 15:
		nextId = 64;
		$r = registerBasics(); /* */ $s = 17; case 17: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_r$29 = userType(reflect.TypeOf((ptrType$32.nil))); /* */ $s = 18; case 18: if($c) { $c = false; _r$29 = _r$29.$blk(); } if (_r$29 && _r$29.$blk !== undefined) { break s; }
		wireTypeUserInfo = _r$29;
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: init$1 }; } $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._arg$3 = _arg$3; $f._arg$4 = _arg$4; $f._arg$5 = _arg$5; $f._entry = _entry; $f._i = _i; $f._key = _key; $f._keys = _keys; $f._r$22 = _r$22; $f._r$23 = _r$23; $f._r$24 = _r$24; $f._r$25 = _r$25; $f._r$26 = _r$26; $f._r$27 = _r$27; $f._r$28 = _r$28; $f._r$29 = _r$29; $f._ref = _ref; $f.k = k; $f.v = v; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.x$6 = x$6; $f.x$7 = x$7; $f.$s = $s; $f.$r = $r; return $f;
	};
	newArrayType = function(name) {
		var a, name;
		a = new arrayType.ptr(new CommonType.ptr(name, 0), 0, 0);
		return a;
	};
	arrayType.ptr.prototype.init = function(elem, len) {
		var _r$22, a, elem, len, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$22 = $f._r$22; a = $f.a; elem = $f.elem; len = $f.len; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		a = this;
		$r = setTypeId(a); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_r$22 = elem.id(); /* */ $s = 2; case 2: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
		a.Elem = _r$22;
		a.Len = len;
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: arrayType.ptr.prototype.init }; } $f._r$22 = _r$22; $f.a = a; $f.elem = elem; $f.len = len; $f.$s = $s; $f.$r = $r; return $f;
	};
	arrayType.prototype.init = function(elem, len) { return this.$val.init(elem, len); };
	arrayType.ptr.prototype.safeString = function(seen) {
		var _arg, _arg$1, _entry, _key, _r$22, _r$23, a, seen, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _arg = $f._arg; _arg$1 = $f._arg$1; _entry = $f._entry; _key = $f._key; _r$22 = $f._r$22; _r$23 = $f._r$23; a = $f.a; seen = $f.seen; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		a = this;
		if ((_entry = seen[typeId.keyFor(a.CommonType.Id)], _entry !== undefined ? _entry.v : false)) {
			$s = -1; return a.CommonType.Name;
		}
		_key = a.CommonType.Id; (seen || $throwRuntimeError("assignment to entry in nil map"))[typeId.keyFor(_key)] = { k: _key, v: true };
		_arg = new $Int(a.Len);
		_r$22 = new typeId(a.Elem).gobType().safeString(seen); /* */ $s = 1; case 1: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
		_arg$1 = new $String(_r$22);
		_r$23 = fmt.Sprintf("[%d]%s", new sliceType$1([_arg, _arg$1])); /* */ $s = 2; case 2: if($c) { $c = false; _r$23 = _r$23.$blk(); } if (_r$23 && _r$23.$blk !== undefined) { break s; }
		$s = -1; return _r$23;
		/* */ } return; } if ($f === undefined) { $f = { $blk: arrayType.ptr.prototype.safeString }; } $f._arg = _arg; $f._arg$1 = _arg$1; $f._entry = _entry; $f._key = _key; $f._r$22 = _r$22; $f._r$23 = _r$23; $f.a = a; $f.seen = seen; $f.$s = $s; $f.$r = $r; return $f;
	};
	arrayType.prototype.safeString = function(seen) { return this.$val.safeString(seen); };
	arrayType.ptr.prototype.string = function() {
		var _r$22, a, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$22 = $f._r$22; a = $f.a; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		a = this;
		_r$22 = a.safeString({}); /* */ $s = 1; case 1: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
		$s = -1; return _r$22;
		/* */ } return; } if ($f === undefined) { $f = { $blk: arrayType.ptr.prototype.string }; } $f._r$22 = _r$22; $f.a = a; $f.$s = $s; $f.$r = $r; return $f;
	};
	arrayType.prototype.string = function() { return this.$val.string(); };
	newGobEncoderType = function(name) {
		var g, name, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; g = $f.g; name = $f.name; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		g = new gobEncoderType.ptr(new CommonType.ptr(name, 0));
		$r = setTypeId(g); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return g;
		/* */ } return; } if ($f === undefined) { $f = { $blk: newGobEncoderType }; } $f.g = g; $f.name = name; $f.$s = $s; $f.$r = $r; return $f;
	};
	gobEncoderType.ptr.prototype.safeString = function(seen) {
		var g, seen;
		g = this;
		return g.CommonType.Name;
	};
	gobEncoderType.prototype.safeString = function(seen) { return this.$val.safeString(seen); };
	gobEncoderType.ptr.prototype.string = function() {
		var g;
		g = this;
		return g.CommonType.Name;
	};
	gobEncoderType.prototype.string = function() { return this.$val.string(); };
	newMapType = function(name) {
		var m, name;
		m = new mapType.ptr(new CommonType.ptr(name, 0), 0, 0);
		return m;
	};
	mapType.ptr.prototype.init = function(key, elem) {
		var _r$22, _r$23, elem, key, m, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$22 = $f._r$22; _r$23 = $f._r$23; elem = $f.elem; key = $f.key; m = $f.m; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		m = this;
		$r = setTypeId(m); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_r$22 = key.id(); /* */ $s = 2; case 2: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
		m.Key = _r$22;
		_r$23 = elem.id(); /* */ $s = 3; case 3: if($c) { $c = false; _r$23 = _r$23.$blk(); } if (_r$23 && _r$23.$blk !== undefined) { break s; }
		m.Elem = _r$23;
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: mapType.ptr.prototype.init }; } $f._r$22 = _r$22; $f._r$23 = _r$23; $f.elem = elem; $f.key = key; $f.m = m; $f.$s = $s; $f.$r = $r; return $f;
	};
	mapType.prototype.init = function(key, elem) { return this.$val.init(key, elem); };
	mapType.ptr.prototype.safeString = function(seen) {
		var _entry, _key, _r$22, _r$23, _r$24, elem, key, m, seen, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _entry = $f._entry; _key = $f._key; _r$22 = $f._r$22; _r$23 = $f._r$23; _r$24 = $f._r$24; elem = $f.elem; key = $f.key; m = $f.m; seen = $f.seen; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		m = this;
		if ((_entry = seen[typeId.keyFor(m.CommonType.Id)], _entry !== undefined ? _entry.v : false)) {
			$s = -1; return m.CommonType.Name;
		}
		_key = m.CommonType.Id; (seen || $throwRuntimeError("assignment to entry in nil map"))[typeId.keyFor(_key)] = { k: _key, v: true };
		_r$22 = new typeId(m.Key).gobType().safeString(seen); /* */ $s = 1; case 1: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
		key = _r$22;
		_r$23 = new typeId(m.Elem).gobType().safeString(seen); /* */ $s = 2; case 2: if($c) { $c = false; _r$23 = _r$23.$blk(); } if (_r$23 && _r$23.$blk !== undefined) { break s; }
		elem = _r$23;
		_r$24 = fmt.Sprintf("map[%s]%s", new sliceType$1([new $String(key), new $String(elem)])); /* */ $s = 3; case 3: if($c) { $c = false; _r$24 = _r$24.$blk(); } if (_r$24 && _r$24.$blk !== undefined) { break s; }
		$s = -1; return _r$24;
		/* */ } return; } if ($f === undefined) { $f = { $blk: mapType.ptr.prototype.safeString }; } $f._entry = _entry; $f._key = _key; $f._r$22 = _r$22; $f._r$23 = _r$23; $f._r$24 = _r$24; $f.elem = elem; $f.key = key; $f.m = m; $f.seen = seen; $f.$s = $s; $f.$r = $r; return $f;
	};
	mapType.prototype.safeString = function(seen) { return this.$val.safeString(seen); };
	mapType.ptr.prototype.string = function() {
		var _r$22, m, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$22 = $f._r$22; m = $f.m; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		m = this;
		_r$22 = m.safeString({}); /* */ $s = 1; case 1: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
		$s = -1; return _r$22;
		/* */ } return; } if ($f === undefined) { $f = { $blk: mapType.ptr.prototype.string }; } $f._r$22 = _r$22; $f.m = m; $f.$s = $s; $f.$r = $r; return $f;
	};
	mapType.prototype.string = function() { return this.$val.string(); };
	newSliceType = function(name) {
		var name, s;
		s = new sliceType.ptr(new CommonType.ptr(name, 0), 0);
		return s;
	};
	sliceType.ptr.prototype.init = function(elem) {
		var _r$22, _r$23, elem, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$22 = $f._r$22; _r$23 = $f._r$23; elem = $f.elem; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		$r = setTypeId(s); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_r$22 = elem.id(); /* */ $s = 4; case 4: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
		/* */ if (_r$22 === 0) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (_r$22 === 0) { */ case 2:
			$r = setTypeId(elem); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 3:
		_r$23 = elem.id(); /* */ $s = 6; case 6: if($c) { $c = false; _r$23 = _r$23.$blk(); } if (_r$23 && _r$23.$blk !== undefined) { break s; }
		s.Elem = _r$23;
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: sliceType.ptr.prototype.init }; } $f._r$22 = _r$22; $f._r$23 = _r$23; $f.elem = elem; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	sliceType.prototype.init = function(elem) { return this.$val.init(elem); };
	sliceType.ptr.prototype.safeString = function(seen) {
		var _arg, _entry, _key, _r$22, _r$23, s, seen, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _arg = $f._arg; _entry = $f._entry; _key = $f._key; _r$22 = $f._r$22; _r$23 = $f._r$23; s = $f.s; seen = $f.seen; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		if ((_entry = seen[typeId.keyFor(s.CommonType.Id)], _entry !== undefined ? _entry.v : false)) {
			$s = -1; return s.CommonType.Name;
		}
		_key = s.CommonType.Id; (seen || $throwRuntimeError("assignment to entry in nil map"))[typeId.keyFor(_key)] = { k: _key, v: true };
		_r$22 = new typeId(s.Elem).gobType().safeString(seen); /* */ $s = 1; case 1: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
		_arg = new $String(_r$22);
		_r$23 = fmt.Sprintf("[]%s", new sliceType$1([_arg])); /* */ $s = 2; case 2: if($c) { $c = false; _r$23 = _r$23.$blk(); } if (_r$23 && _r$23.$blk !== undefined) { break s; }
		$s = -1; return _r$23;
		/* */ } return; } if ($f === undefined) { $f = { $blk: sliceType.ptr.prototype.safeString }; } $f._arg = _arg; $f._entry = _entry; $f._key = _key; $f._r$22 = _r$22; $f._r$23 = _r$23; $f.s = s; $f.seen = seen; $f.$s = $s; $f.$r = $r; return $f;
	};
	sliceType.prototype.safeString = function(seen) { return this.$val.safeString(seen); };
	sliceType.ptr.prototype.string = function() {
		var _r$22, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$22 = $f._r$22; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r$22 = s.safeString({}); /* */ $s = 1; case 1: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
		$s = -1; return _r$22;
		/* */ } return; } if ($f === undefined) { $f = { $blk: sliceType.ptr.prototype.string }; } $f._r$22 = _r$22; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	sliceType.prototype.string = function() { return this.$val.string(); };
	structType.ptr.prototype.safeString = function(seen) {
		var _arg, _arg$1, _entry, _i, _key, _r$22, _r$23, _ref, _tuple, f, ok, s, seen, str, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _arg = $f._arg; _arg$1 = $f._arg$1; _entry = $f._entry; _i = $f._i; _key = $f._key; _r$22 = $f._r$22; _r$23 = $f._r$23; _ref = $f._ref; _tuple = $f._tuple; f = $f.f; ok = $f.ok; s = $f.s; seen = $f.seen; str = $f.str; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		if (s === ptrType$25.nil) {
			$s = -1; return "<nil>";
		}
		_tuple = (_entry = seen[typeId.keyFor(s.CommonType.Id)], _entry !== undefined ? [_entry.v, true] : [false, false]);
		ok = _tuple[1];
		if (ok) {
			$s = -1; return s.CommonType.Name;
		}
		_key = s.CommonType.Id; (seen || $throwRuntimeError("assignment to entry in nil map"))[typeId.keyFor(_key)] = { k: _key, v: true };
		str = s.CommonType.Name + " = struct { ";
		_ref = s.Field;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			f = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			_arg = new $String(f.Name);
			_r$22 = new typeId(f.Id).gobType().safeString(seen); /* */ $s = 3; case 3: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
			_arg$1 = new $String(_r$22);
			_r$23 = fmt.Sprintf("%s %s; ", new sliceType$1([_arg, _arg$1])); /* */ $s = 4; case 4: if($c) { $c = false; _r$23 = _r$23.$blk(); } if (_r$23 && _r$23.$blk !== undefined) { break s; }
			str = str + (_r$23);
			_i++;
		/* } */ $s = 1; continue; case 2:
		str = str + ("}");
		$s = -1; return str;
		/* */ } return; } if ($f === undefined) { $f = { $blk: structType.ptr.prototype.safeString }; } $f._arg = _arg; $f._arg$1 = _arg$1; $f._entry = _entry; $f._i = _i; $f._key = _key; $f._r$22 = _r$22; $f._r$23 = _r$23; $f._ref = _ref; $f._tuple = _tuple; $f.f = f; $f.ok = ok; $f.s = s; $f.seen = seen; $f.str = str; $f.$s = $s; $f.$r = $r; return $f;
	};
	structType.prototype.safeString = function(seen) { return this.$val.safeString(seen); };
	structType.ptr.prototype.string = function() {
		var _r$22, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$22 = $f._r$22; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r$22 = s.safeString({}); /* */ $s = 1; case 1: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
		$s = -1; return _r$22;
		/* */ } return; } if ($f === undefined) { $f = { $blk: structType.ptr.prototype.string }; } $f._r$22 = _r$22; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	structType.prototype.string = function() { return this.$val.string(); };
	newStructType = function(name) {
		var name, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; name = $f.name; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = new structType.ptr(new CommonType.ptr(name, 0), sliceType$22.nil);
		$r = setTypeId(s); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return s;
		/* */ } return; } if ($f === undefined) { $f = { $blk: newStructType }; } $f.name = name; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	newTypeObject = function(name, ut, rt) {
		var _1, _arg, _arg$1, _arg$2, _arg$3, _arg$4, _arg$5, _arg$6, _key, _key$1, _key$2, _key$3, _key$4, _r$22, _r$23, _r$24, _r$25, _r$26, _r$27, _r$28, _r$29, _r$30, _r$31, _r$32, _r$33, _r$34, _r$35, _r$36, _r$37, _r$38, _r$39, _r$40, _r$41, _r$42, _r$43, _r$44, _r$45, _r$46, _r$47, _r$48, _r$49, _tmp, _tmp$1, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, at, err, err$1, f, gt, i, mt, name, rt, st, st$1, t, t$1, tname, typ, type0, type1, ut, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _arg$3 = $f._arg$3; _arg$4 = $f._arg$4; _arg$5 = $f._arg$5; _arg$6 = $f._arg$6; _key = $f._key; _key$1 = $f._key$1; _key$2 = $f._key$2; _key$3 = $f._key$3; _key$4 = $f._key$4; _r$22 = $f._r$22; _r$23 = $f._r$23; _r$24 = $f._r$24; _r$25 = $f._r$25; _r$26 = $f._r$26; _r$27 = $f._r$27; _r$28 = $f._r$28; _r$29 = $f._r$29; _r$30 = $f._r$30; _r$31 = $f._r$31; _r$32 = $f._r$32; _r$33 = $f._r$33; _r$34 = $f._r$34; _r$35 = $f._r$35; _r$36 = $f._r$36; _r$37 = $f._r$37; _r$38 = $f._r$38; _r$39 = $f._r$39; _r$40 = $f._r$40; _r$41 = $f._r$41; _r$42 = $f._r$42; _r$43 = $f._r$43; _r$44 = $f._r$44; _r$45 = $f._r$45; _r$46 = $f._r$46; _r$47 = $f._r$47; _r$48 = $f._r$48; _r$49 = $f._r$49; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; _tuple$4 = $f._tuple$4; at = $f.at; err = $f.err; err$1 = $f.err$1; f = $f.f; gt = $f.gt; i = $f.i; mt = $f.mt; name = $f.name; rt = $f.rt; st = $f.st; st$1 = $f.st$1; t = $f.t; t$1 = $f.t$1; tname = $f.tname; typ = $f.typ; type0 = $f.type0; type1 = $f.type1; ut = $f.ut; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		err = [err];
		rt = [rt];
		/* */ if (!((ut.externalEnc === 0))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!((ut.externalEnc === 0))) { */ case 1:
			_r$22 = newGobEncoderType(name); /* */ $s = 3; case 3: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
			$s = -1; return [_r$22, $ifaceNil];
		/* } */ case 2:
		err[0] = $ifaceNil;
		_tmp = $ifaceNil;
		_tmp$1 = $ifaceNil;
		type0 = _tmp;
		type1 = _tmp$1;
		$deferred.push([(function(err, rt) { return function() {
			if (!($interfaceIsEqual(err[0], $ifaceNil))) {
				delete types[reflect.Type.keyFor(rt[0])];
			}
		}; })(err, rt), []]);
			t = rt[0];
			_r$23 = t.Kind(); /* */ $s = 5; case 5: if($c) { $c = false; _r$23 = _r$23.$blk(); } if (_r$23 && _r$23.$blk !== undefined) { break s; }
			_1 = _r$23;
			/* */ if (_1 === (1)) { $s = 6; continue; }
			/* */ if ((_1 === (2)) || (_1 === (3)) || (_1 === (4)) || (_1 === (5)) || (_1 === (6))) { $s = 7; continue; }
			/* */ if ((_1 === (7)) || (_1 === (8)) || (_1 === (9)) || (_1 === (10)) || (_1 === (11)) || (_1 === (12))) { $s = 8; continue; }
			/* */ if ((_1 === (13)) || (_1 === (14))) { $s = 9; continue; }
			/* */ if ((_1 === (15)) || (_1 === (16))) { $s = 10; continue; }
			/* */ if (_1 === (24)) { $s = 11; continue; }
			/* */ if (_1 === (20)) { $s = 12; continue; }
			/* */ if (_1 === (17)) { $s = 13; continue; }
			/* */ if (_1 === (21)) { $s = 14; continue; }
			/* */ if (_1 === (23)) { $s = 15; continue; }
			/* */ if (_1 === (25)) { $s = 16; continue; }
			/* */ $s = 17; continue;
			/* if (_1 === (1)) { */ case 6:
				$s = -1; return [new typeId(tBool).gobType(), $ifaceNil];
			/* } else if ((_1 === (2)) || (_1 === (3)) || (_1 === (4)) || (_1 === (5)) || (_1 === (6))) { */ case 7:
				$s = -1; return [new typeId(tInt).gobType(), $ifaceNil];
			/* } else if ((_1 === (7)) || (_1 === (8)) || (_1 === (9)) || (_1 === (10)) || (_1 === (11)) || (_1 === (12))) { */ case 8:
				$s = -1; return [new typeId(tUint).gobType(), $ifaceNil];
			/* } else if ((_1 === (13)) || (_1 === (14))) { */ case 9:
				$s = -1; return [new typeId(tFloat).gobType(), $ifaceNil];
			/* } else if ((_1 === (15)) || (_1 === (16))) { */ case 10:
				$s = -1; return [new typeId(tComplex).gobType(), $ifaceNil];
			/* } else if (_1 === (24)) { */ case 11:
				$s = -1; return [new typeId(tString).gobType(), $ifaceNil];
			/* } else if (_1 === (20)) { */ case 12:
				$s = -1; return [new typeId(tInterface).gobType(), $ifaceNil];
			/* } else if (_1 === (17)) { */ case 13:
				at = newArrayType(name);
				_key = rt[0]; (types || $throwRuntimeError("assignment to entry in nil map"))[reflect.Type.keyFor(_key)] = { k: _key, v: at };
				_r$24 = t.Elem(); /* */ $s = 19; case 19: if($c) { $c = false; _r$24 = _r$24.$blk(); } if (_r$24 && _r$24.$blk !== undefined) { break s; }
				_arg = _r$24;
				_r$25 = getBaseType("", _arg); /* */ $s = 20; case 20: if($c) { $c = false; _r$25 = _r$25.$blk(); } if (_r$25 && _r$25.$blk !== undefined) { break s; }
				_tuple = _r$25;
				type0 = _tuple[0];
				err[0] = _tuple[1];
				if (!($interfaceIsEqual(err[0], $ifaceNil))) {
					$s = -1; return [$ifaceNil, err[0]];
				}
				_arg$1 = type0;
				_r$26 = t.Len(); /* */ $s = 21; case 21: if($c) { $c = false; _r$26 = _r$26.$blk(); } if (_r$26 && _r$26.$blk !== undefined) { break s; }
				_arg$2 = _r$26;
				$r = at.init(_arg$1, _arg$2); /* */ $s = 22; case 22: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = -1; return [at, $ifaceNil];
			/* } else if (_1 === (21)) { */ case 14:
				mt = newMapType(name);
				_key$1 = rt[0]; (types || $throwRuntimeError("assignment to entry in nil map"))[reflect.Type.keyFor(_key$1)] = { k: _key$1, v: mt };
				_r$27 = t.Key(); /* */ $s = 23; case 23: if($c) { $c = false; _r$27 = _r$27.$blk(); } if (_r$27 && _r$27.$blk !== undefined) { break s; }
				_arg$3 = _r$27;
				_r$28 = getBaseType("", _arg$3); /* */ $s = 24; case 24: if($c) { $c = false; _r$28 = _r$28.$blk(); } if (_r$28 && _r$28.$blk !== undefined) { break s; }
				_tuple$1 = _r$28;
				type0 = _tuple$1[0];
				err[0] = _tuple$1[1];
				if (!($interfaceIsEqual(err[0], $ifaceNil))) {
					$s = -1; return [$ifaceNil, err[0]];
				}
				_r$29 = t.Elem(); /* */ $s = 25; case 25: if($c) { $c = false; _r$29 = _r$29.$blk(); } if (_r$29 && _r$29.$blk !== undefined) { break s; }
				_arg$4 = _r$29;
				_r$30 = getBaseType("", _arg$4); /* */ $s = 26; case 26: if($c) { $c = false; _r$30 = _r$30.$blk(); } if (_r$30 && _r$30.$blk !== undefined) { break s; }
				_tuple$2 = _r$30;
				type1 = _tuple$2[0];
				err[0] = _tuple$2[1];
				if (!($interfaceIsEqual(err[0], $ifaceNil))) {
					$s = -1; return [$ifaceNil, err[0]];
				}
				$r = mt.init(type0, type1); /* */ $s = 27; case 27: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = -1; return [mt, $ifaceNil];
			/* } else if (_1 === (23)) { */ case 15:
				_r$31 = t.Elem(); /* */ $s = 30; case 30: if($c) { $c = false; _r$31 = _r$31.$blk(); } if (_r$31 && _r$31.$blk !== undefined) { break s; }
				_r$32 = _r$31.Kind(); /* */ $s = 31; case 31: if($c) { $c = false; _r$32 = _r$32.$blk(); } if (_r$32 && _r$32.$blk !== undefined) { break s; }
				/* */ if (_r$32 === 8) { $s = 28; continue; }
				/* */ $s = 29; continue;
				/* if (_r$32 === 8) { */ case 28:
					$s = -1; return [new typeId(tBytes).gobType(), $ifaceNil];
				/* } */ case 29:
				st = newSliceType(name);
				_key$2 = rt[0]; (types || $throwRuntimeError("assignment to entry in nil map"))[reflect.Type.keyFor(_key$2)] = { k: _key$2, v: st };
				_r$33 = t.Elem(); /* */ $s = 32; case 32: if($c) { $c = false; _r$33 = _r$33.$blk(); } if (_r$33 && _r$33.$blk !== undefined) { break s; }
				_r$34 = _r$33.Name(); /* */ $s = 33; case 33: if($c) { $c = false; _r$34 = _r$34.$blk(); } if (_r$34 && _r$34.$blk !== undefined) { break s; }
				_arg$5 = _r$34;
				_r$35 = t.Elem(); /* */ $s = 34; case 34: if($c) { $c = false; _r$35 = _r$35.$blk(); } if (_r$35 && _r$35.$blk !== undefined) { break s; }
				_arg$6 = _r$35;
				_r$36 = getBaseType(_arg$5, _arg$6); /* */ $s = 35; case 35: if($c) { $c = false; _r$36 = _r$36.$blk(); } if (_r$36 && _r$36.$blk !== undefined) { break s; }
				_tuple$3 = _r$36;
				type0 = _tuple$3[0];
				err[0] = _tuple$3[1];
				if (!($interfaceIsEqual(err[0], $ifaceNil))) {
					$s = -1; return [$ifaceNil, err[0]];
				}
				$r = st.init(type0); /* */ $s = 36; case 36: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = -1; return [st, $ifaceNil];
			/* } else if (_1 === (25)) { */ case 16:
				_r$37 = newStructType(name); /* */ $s = 37; case 37: if($c) { $c = false; _r$37 = _r$37.$blk(); } if (_r$37 && _r$37.$blk !== undefined) { break s; }
				st$1 = _r$37;
				_key$3 = rt[0]; (types || $throwRuntimeError("assignment to entry in nil map"))[reflect.Type.keyFor(_key$3)] = { k: _key$3, v: st$1 };
				_key$4 = st$1.CommonType.id(); (idToType || $throwRuntimeError("assignment to entry in nil map"))[typeId.keyFor(_key$4)] = { k: _key$4, v: st$1 };
				i = 0;
				/* while (true) { */ case 38:
					_r$38 = t.NumField(); /* */ $s = 40; case 40: if($c) { $c = false; _r$38 = _r$38.$blk(); } if (_r$38 && _r$38.$blk !== undefined) { break s; }
					/* if (!(i < _r$38)) { break; } */ if(!(i < _r$38)) { $s = 39; continue; }
					f = [f];
					_r$39 = t.Field(i); /* */ $s = 41; case 41: if($c) { $c = false; _r$39 = _r$39.$blk(); } if (_r$39 && _r$39.$blk !== undefined) { break s; }
					f[0] = $clone(_r$39, reflect.StructField);
					_r$40 = isSent(f[0]); /* */ $s = 44; case 44: if($c) { $c = false; _r$40 = _r$40.$blk(); } if (_r$40 && _r$40.$blk !== undefined) { break s; }
					/* */ if (!_r$40) { $s = 42; continue; }
					/* */ $s = 43; continue;
					/* if (!_r$40) { */ case 42:
						i = i + (1) >> 0;
						/* continue; */ $s = 38; continue;
					/* } */ case 43:
					_r$41 = userType(f[0].Type); /* */ $s = 45; case 45: if($c) { $c = false; _r$41 = _r$41.$blk(); } if (_r$41 && _r$41.$blk !== undefined) { break s; }
					typ = _r$41.base;
					_r$42 = typ.Name(); /* */ $s = 46; case 46: if($c) { $c = false; _r$42 = _r$42.$blk(); } if (_r$42 && _r$42.$blk !== undefined) { break s; }
					tname = _r$42;
					/* */ if (tname === "") { $s = 47; continue; }
					/* */ $s = 48; continue;
					/* if (tname === "") { */ case 47:
						_r$43 = userType(f[0].Type); /* */ $s = 49; case 49: if($c) { $c = false; _r$43 = _r$43.$blk(); } if (_r$43 && _r$43.$blk !== undefined) { break s; }
						t$1 = _r$43.base;
						_r$44 = t$1.String(); /* */ $s = 50; case 50: if($c) { $c = false; _r$44 = _r$44.$blk(); } if (_r$44 && _r$44.$blk !== undefined) { break s; }
						tname = _r$44;
					/* } */ case 48:
					_r$45 = getBaseType(tname, f[0].Type); /* */ $s = 51; case 51: if($c) { $c = false; _r$45 = _r$45.$blk(); } if (_r$45 && _r$45.$blk !== undefined) { break s; }
					_tuple$4 = _r$45;
					gt = _tuple$4[0];
					err$1 = _tuple$4[1];
					if (!($interfaceIsEqual(err$1, $ifaceNil))) {
						$s = -1; return [$ifaceNil, err$1];
					}
					_r$46 = gt.id(); /* */ $s = 54; case 54: if($c) { $c = false; _r$46 = _r$46.$blk(); } if (_r$46 && _r$46.$blk !== undefined) { break s; }
					/* */ if (_r$46 === 0) { $s = 52; continue; }
					/* */ $s = 53; continue;
					/* if (_r$46 === 0) { */ case 52:
						$r = setTypeId(gt); /* */ $s = 55; case 55: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					/* } */ case 53:
					_r$47 = gt.id(); /* */ $s = 56; case 56: if($c) { $c = false; _r$47 = _r$47.$blk(); } if (_r$47 && _r$47.$blk !== undefined) { break s; }
					st$1.Field = $append(st$1.Field, new fieldType.ptr(f[0].Name, _r$47));
					i = i + (1) >> 0;
				/* } */ $s = 38; continue; case 39:
				$s = -1; return [st$1, $ifaceNil];
			/* } else { */ case 17:
				_r$48 = rt[0].String(); /* */ $s = 57; case 57: if($c) { $c = false; _r$48 = _r$48.$blk(); } if (_r$48 && _r$48.$blk !== undefined) { break s; }
				_r$49 = errors.New("gob NewTypeObject can't handle type: " + _r$48); /* */ $s = 58; case 58: if($c) { $c = false; _r$49 = _r$49.$blk(); } if (_r$49 && _r$49.$blk !== undefined) { break s; }
				$s = -1; return [$ifaceNil, _r$49];
			/* } */ case 18:
		case 4:
		$s = -1; return [$ifaceNil, $ifaceNil];
		/* */ } return; } } catch(err) { $err = err; $s = -1; return [$ifaceNil, $ifaceNil]; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: newTypeObject }; } $f._1 = _1; $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._arg$3 = _arg$3; $f._arg$4 = _arg$4; $f._arg$5 = _arg$5; $f._arg$6 = _arg$6; $f._key = _key; $f._key$1 = _key$1; $f._key$2 = _key$2; $f._key$3 = _key$3; $f._key$4 = _key$4; $f._r$22 = _r$22; $f._r$23 = _r$23; $f._r$24 = _r$24; $f._r$25 = _r$25; $f._r$26 = _r$26; $f._r$27 = _r$27; $f._r$28 = _r$28; $f._r$29 = _r$29; $f._r$30 = _r$30; $f._r$31 = _r$31; $f._r$32 = _r$32; $f._r$33 = _r$33; $f._r$34 = _r$34; $f._r$35 = _r$35; $f._r$36 = _r$36; $f._r$37 = _r$37; $f._r$38 = _r$38; $f._r$39 = _r$39; $f._r$40 = _r$40; $f._r$41 = _r$41; $f._r$42 = _r$42; $f._r$43 = _r$43; $f._r$44 = _r$44; $f._r$45 = _r$45; $f._r$46 = _r$46; $f._r$47 = _r$47; $f._r$48 = _r$48; $f._r$49 = _r$49; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f._tuple$4 = _tuple$4; $f.at = at; $f.err = err; $f.err$1 = err$1; $f.f = f; $f.gt = gt; $f.i = i; $f.mt = mt; $f.name = name; $f.rt = rt; $f.st = st; $f.st$1 = st$1; $f.t = t; $f.t$1 = t$1; $f.tname = tname; $f.typ = typ; $f.type0 = type0; $f.type1 = type1; $f.ut = ut; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	isExported = function(name) {
		var _tuple, name, rune;
		_tuple = utf8.DecodeRuneInString(name);
		rune = _tuple[0];
		return unicode.IsUpper(rune);
	};
	isSent = function(field) {
		var _r$22, _r$23, _r$24, _r$25, _v, field, typ, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$22 = $f._r$22; _r$23 = $f._r$23; _r$24 = $f._r$24; _r$25 = $f._r$25; _v = $f._v; field = $f.field; typ = $f.typ; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		if (!isExported(field.Name)) {
			$s = -1; return false;
		}
		typ = field.Type;
		/* while (true) { */ case 1:
			_r$22 = typ.Kind(); /* */ $s = 3; case 3: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
			/* if (!(_r$22 === 22)) { break; } */ if(!(_r$22 === 22)) { $s = 2; continue; }
			_r$23 = typ.Elem(); /* */ $s = 4; case 4: if($c) { $c = false; _r$23 = _r$23.$blk(); } if (_r$23 && _r$23.$blk !== undefined) { break s; }
			typ = _r$23;
		/* } */ $s = 1; continue; case 2:
		_r$24 = typ.Kind(); /* */ $s = 8; case 8: if($c) { $c = false; _r$24 = _r$24.$blk(); } if (_r$24 && _r$24.$blk !== undefined) { break s; }
		if (_r$24 === 18) { _v = true; $s = 7; continue s; }
		_r$25 = typ.Kind(); /* */ $s = 9; case 9: if($c) { $c = false; _r$25 = _r$25.$blk(); } if (_r$25 && _r$25.$blk !== undefined) { break s; }
		_v = _r$25 === 19; case 7:
		/* */ if (_v) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if (_v) { */ case 5:
			$s = -1; return false;
		/* } */ case 6:
		$s = -1; return true;
		/* */ } return; } if ($f === undefined) { $f = { $blk: isSent }; } $f._r$22 = _r$22; $f._r$23 = _r$23; $f._r$24 = _r$24; $f._r$25 = _r$25; $f._v = _v; $f.field = field; $f.typ = typ; $f.$s = $s; $f.$r = $r; return $f;
	};
	getBaseType = function(name, rt) {
		var _r$22, _r$23, name, rt, ut, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$22 = $f._r$22; _r$23 = $f._r$23; name = $f.name; rt = $f.rt; ut = $f.ut; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r$22 = userType(rt); /* */ $s = 1; case 1: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
		ut = _r$22;
		_r$23 = getType(name, ut, ut.base); /* */ $s = 2; case 2: if($c) { $c = false; _r$23 = _r$23.$blk(); } if (_r$23 && _r$23.$blk !== undefined) { break s; }
		$s = -1; return _r$23;
		/* */ } return; } if ($f === undefined) { $f = { $blk: getBaseType }; } $f._r$22 = _r$22; $f._r$23 = _r$23; $f.name = name; $f.rt = rt; $f.ut = ut; $f.$s = $s; $f.$r = $r; return $f;
	};
	getType = function(name, ut, rt) {
		var _entry, _key, _r$22, _tuple, _tuple$1, err, name, present, rt, typ, ut, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _entry = $f._entry; _key = $f._key; _r$22 = $f._r$22; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; err = $f.err; name = $f.name; present = $f.present; rt = $f.rt; typ = $f.typ; ut = $f.ut; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_tuple = (_entry = types[reflect.Type.keyFor(rt)], _entry !== undefined ? [_entry.v, true] : [$ifaceNil, false]);
		typ = _tuple[0];
		present = _tuple[1];
		if (present) {
			$s = -1; return [typ, $ifaceNil];
		}
		_r$22 = newTypeObject(name, ut, rt); /* */ $s = 1; case 1: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
		_tuple$1 = _r$22;
		typ = _tuple$1[0];
		err = _tuple$1[1];
		if ($interfaceIsEqual(err, $ifaceNil)) {
			_key = rt; (types || $throwRuntimeError("assignment to entry in nil map"))[reflect.Type.keyFor(_key)] = { k: _key, v: typ };
		}
		$s = -1; return [typ, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: getType }; } $f._entry = _entry; $f._key = _key; $f._r$22 = _r$22; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.err = err; $f.name = name; $f.present = present; $f.rt = rt; $f.typ = typ; $f.ut = ut; $f.$s = $s; $f.$r = $r; return $f;
	};
	checkId = function(want, got) {
		var _r$22, _r$23, _r$24, _r$25, got, want, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$22 = $f._r$22; _r$23 = $f._r$23; _r$24 = $f._r$24; _r$25 = $f._r$25; got = $f.got; want = $f.want; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		/* */ if (!((want === got))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!((want === got))) { */ case 1:
			_r$22 = fmt.Fprintf(os.Stderr, "checkId: %d should be %d\n", new sliceType$1([new $Int(((got >> 0))), new $Int(((want >> 0)))])); /* */ $s = 3; case 3: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
			_r$22;
			_r$23 = new typeId(got).name(); /* */ $s = 4; case 4: if($c) { $c = false; _r$23 = _r$23.$blk(); } if (_r$23 && _r$23.$blk !== undefined) { break s; }
			_r$24 = new typeId(got).string(); /* */ $s = 5; case 5: if($c) { $c = false; _r$24 = _r$24.$blk(); } if (_r$24 && _r$24.$blk !== undefined) { break s; }
			_r$25 = new typeId(want).string(); /* */ $s = 6; case 6: if($c) { $c = false; _r$25 = _r$25.$blk(); } if (_r$25 && _r$25.$blk !== undefined) { break s; }
			$panic(new $String("bootstrap type wrong id: " + _r$23 + " " + _r$24 + " not " + _r$25));
		/* } */ case 2:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: checkId }; } $f._r$22 = _r$22; $f._r$23 = _r$23; $f._r$24 = _r$24; $f._r$25 = _r$25; $f.got = got; $f.want = want; $f.$s = $s; $f.$r = $r; return $f;
	};
	bootstrapType = function(name, e, expect) {
		var _entry, _key, _r$22, _r$23, _r$24, _tuple, e, expect, name, present, rt, typ, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _entry = $f._entry; _key = $f._key; _r$22 = $f._r$22; _r$23 = $f._r$23; _r$24 = $f._r$24; _tuple = $f._tuple; e = $f.e; expect = $f.expect; name = $f.name; present = $f.present; rt = $f.rt; typ = $f.typ; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r$22 = reflect.TypeOf(e).Elem(); /* */ $s = 1; case 1: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
		rt = _r$22;
		_tuple = (_entry = types[reflect.Type.keyFor(rt)], _entry !== undefined ? [_entry.v, true] : [$ifaceNil, false]);
		present = _tuple[1];
		/* */ if (present) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (present) { */ case 2:
			_r$23 = rt.String(); /* */ $s = 4; case 4: if($c) { $c = false; _r$23 = _r$23.$blk(); } if (_r$23 && _r$23.$blk !== undefined) { break s; }
			$panic(new $String("bootstrap type already present: " + name + ", " + _r$23));
		/* } */ case 3:
		typ = new CommonType.ptr(name, 0);
		_key = rt; (types || $throwRuntimeError("assignment to entry in nil map"))[reflect.Type.keyFor(_key)] = { k: _key, v: typ };
		$r = setTypeId(typ); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = checkId(expect, nextId); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_r$24 = userType(rt); /* */ $s = 7; case 7: if($c) { $c = false; _r$24 = _r$24.$blk(); } if (_r$24 && _r$24.$blk !== undefined) { break s; }
		_r$24;
		$s = -1; return nextId;
		/* */ } return; } if ($f === undefined) { $f = { $blk: bootstrapType }; } $f._entry = _entry; $f._key = _key; $f._r$22 = _r$22; $f._r$23 = _r$23; $f._r$24 = _r$24; $f._tuple = _tuple; $f.e = e; $f.expect = expect; $f.name = name; $f.present = present; $f.rt = rt; $f.typ = typ; $f.$s = $s; $f.$r = $r; return $f;
	};
	wireType.ptr.prototype.string = function() {
		var w;
		w = this;
		if (w === ptrType$32.nil) {
			return "unknown type";
		}
		if (!(w.ArrayT === ptrType$23.nil)) {
			return w.ArrayT.CommonType.Name;
		} else if (!(w.SliceT === ptrType$24.nil)) {
			return w.SliceT.CommonType.Name;
		} else if (!(w.StructT === ptrType$25.nil)) {
			return w.StructT.CommonType.Name;
		} else if (!(w.MapT === ptrType$26.nil)) {
			return w.MapT.CommonType.Name;
		} else if (!(w.GobEncoderT === ptrType$27.nil)) {
			return w.GobEncoderT.CommonType.Name;
		} else if (!(w.BinaryMarshalerT === ptrType$27.nil)) {
			return w.BinaryMarshalerT.CommonType.Name;
		} else if (!(w.TextMarshalerT === ptrType$27.nil)) {
			return w.TextMarshalerT.CommonType.Name;
		}
		return "unknown type";
	};
	wireType.prototype.string = function() { return this.$val.string(); };
	lookupTypeInfo = function(rt) {
		var _entry, _tuple, m, rt;
		_tuple = $assertType(typeInfoMap.Load(), mapType$1, true);
		m = _tuple[0];
		return (_entry = m[reflect.Type.keyFor(rt)], _entry !== undefined ? _entry.v : ptrType$42.nil);
	};
	getTypeInfo = function(ut) {
		var _r$22, info, rt, ut, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$22 = $f._r$22; info = $f.info; rt = $f.rt; ut = $f.ut; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		rt = ut.base;
		if (!((ut.externalEnc === 0))) {
			rt = ut.user;
		}
		info = lookupTypeInfo(rt);
		if (!(info === ptrType$42.nil)) {
			$s = -1; return [info, $ifaceNil];
		}
		_r$22 = buildTypeInfo(ut, rt); /* */ $s = 1; case 1: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
		$s = -1; return _r$22;
		/* */ } return; } if ($f === undefined) { $f = { $blk: getTypeInfo }; } $f._r$22 = _r$22; $f.info = info; $f.rt = rt; $f.ut = ut; $f.$s = $s; $f.$r = $r; return $f;
	};
	buildTypeInfo = function(ut, rt) {
		var _1, _2, _entry, _i, _key, _key$1, _keys, _r$22, _r$23, _r$24, _r$25, _r$26, _r$27, _r$28, _r$29, _r$30, _r$31, _ref, _tuple, _tuple$1, _tuple$2, err, err$1, gt, gt$1, info, info$1, k, m, newm, rt, t, typ, userType$1, ut, v, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _2 = $f._2; _entry = $f._entry; _i = $f._i; _key = $f._key; _key$1 = $f._key$1; _keys = $f._keys; _r$22 = $f._r$22; _r$23 = $f._r$23; _r$24 = $f._r$24; _r$25 = $f._r$25; _r$26 = $f._r$26; _r$27 = $f._r$27; _r$28 = $f._r$28; _r$29 = $f._r$29; _r$30 = $f._r$30; _r$31 = $f._r$31; _ref = $f._ref; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; err = $f.err; err$1 = $f.err$1; gt = $f.gt; gt$1 = $f.gt$1; info = $f.info; info$1 = $f.info$1; k = $f.k; m = $f.m; newm = $f.newm; rt = $f.rt; t = $f.t; typ = $f.typ; userType$1 = $f.userType$1; ut = $f.ut; v = $f.v; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		typeLock.Lock();
		$deferred.push([$methodVal(typeLock, "Unlock"), []]);
		info = lookupTypeInfo(rt);
		if (!(info === ptrType$42.nil)) {
			$s = -1; return [info, $ifaceNil];
		}
		_r$22 = rt.Name(); /* */ $s = 1; case 1: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
		_r$23 = getBaseType(_r$22, rt); /* */ $s = 2; case 2: if($c) { $c = false; _r$23 = _r$23.$blk(); } if (_r$23 && _r$23.$blk !== undefined) { break s; }
		_tuple = _r$23;
		gt = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [ptrType$42.nil, err];
		}
		_r$24 = gt.id(); /* */ $s = 3; case 3: if($c) { $c = false; _r$24 = _r$24.$blk(); } if (_r$24 && _r$24.$blk !== undefined) { break s; }
		info$1 = new typeInfo.ptr(_r$24, new nosync.Mutex.ptr(false), new atomic.Value.ptr($ifaceNil), ptrType$32.nil);
		/* */ if (!((ut.externalEnc === 0))) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (!((ut.externalEnc === 0))) { */ case 4:
			_r$25 = rt.Name(); /* */ $s = 7; case 7: if($c) { $c = false; _r$25 = _r$25.$blk(); } if (_r$25 && _r$25.$blk !== undefined) { break s; }
			_r$26 = getType(_r$25, ut, rt); /* */ $s = 8; case 8: if($c) { $c = false; _r$26 = _r$26.$blk(); } if (_r$26 && _r$26.$blk !== undefined) { break s; }
			_tuple$1 = _r$26;
			userType$1 = _tuple$1[0];
			err$1 = _tuple$1[1];
			if (!($interfaceIsEqual(err$1, $ifaceNil))) {
				$s = -1; return [ptrType$42.nil, err$1];
			}
			_r$27 = userType$1.id(); /* */ $s = 9; case 9: if($c) { $c = false; _r$27 = _r$27.$blk(); } if (_r$27 && _r$27.$blk !== undefined) { break s; }
			_r$28 = new typeId(_r$27).gobType(); /* */ $s = 10; case 10: if($c) { $c = false; _r$28 = _r$28.$blk(); } if (_r$28 && _r$28.$blk !== undefined) { break s; }
			gt$1 = $assertType(_r$28, ptrType$27);
			_1 = ut.externalEnc;
			if (_1 === (1)) {
				info$1.wire = new wireType.ptr(ptrType$23.nil, ptrType$24.nil, ptrType$25.nil, ptrType$26.nil, gt$1, ptrType$27.nil, ptrType$27.nil);
			} else if (_1 === (2)) {
				info$1.wire = new wireType.ptr(ptrType$23.nil, ptrType$24.nil, ptrType$25.nil, ptrType$26.nil, ptrType$27.nil, gt$1, ptrType$27.nil);
			} else if (_1 === (3)) {
				info$1.wire = new wireType.ptr(ptrType$23.nil, ptrType$24.nil, ptrType$25.nil, ptrType$26.nil, ptrType$27.nil, ptrType$27.nil, gt$1);
			}
			rt = ut.user;
			$s = 6; continue;
		/* } else { */ case 5:
			t = new typeId(info$1.id).gobType();
				typ = rt;
				_r$29 = typ.Kind(); /* */ $s = 12; case 12: if($c) { $c = false; _r$29 = _r$29.$blk(); } if (_r$29 && _r$29.$blk !== undefined) { break s; }
				_2 = _r$29;
				/* */ if (_2 === (17)) { $s = 13; continue; }
				/* */ if (_2 === (21)) { $s = 14; continue; }
				/* */ if (_2 === (23)) { $s = 15; continue; }
				/* */ if (_2 === (25)) { $s = 16; continue; }
				/* */ $s = 17; continue;
				/* if (_2 === (17)) { */ case 13:
					info$1.wire = new wireType.ptr($assertType(t, ptrType$23), ptrType$24.nil, ptrType$25.nil, ptrType$26.nil, ptrType$27.nil, ptrType$27.nil, ptrType$27.nil);
					$s = 17; continue;
				/* } else if (_2 === (21)) { */ case 14:
					info$1.wire = new wireType.ptr(ptrType$23.nil, ptrType$24.nil, ptrType$25.nil, $assertType(t, ptrType$26), ptrType$27.nil, ptrType$27.nil, ptrType$27.nil);
					$s = 17; continue;
				/* } else if (_2 === (23)) { */ case 15:
					_r$30 = typ.Elem(); /* */ $s = 20; case 20: if($c) { $c = false; _r$30 = _r$30.$blk(); } if (_r$30 && _r$30.$blk !== undefined) { break s; }
					_r$31 = _r$30.Kind(); /* */ $s = 21; case 21: if($c) { $c = false; _r$31 = _r$31.$blk(); } if (_r$31 && _r$31.$blk !== undefined) { break s; }
					/* */ if (!((_r$31 === 8))) { $s = 18; continue; }
					/* */ $s = 19; continue;
					/* if (!((_r$31 === 8))) { */ case 18:
						info$1.wire = new wireType.ptr(ptrType$23.nil, $assertType(t, ptrType$24), ptrType$25.nil, ptrType$26.nil, ptrType$27.nil, ptrType$27.nil, ptrType$27.nil);
					/* } */ case 19:
					$s = 17; continue;
				/* } else if (_2 === (25)) { */ case 16:
					info$1.wire = new wireType.ptr(ptrType$23.nil, ptrType$24.nil, $assertType(t, ptrType$25), ptrType$26.nil, ptrType$27.nil, ptrType$27.nil, ptrType$27.nil);
				/* } */ case 17:
			case 11:
		/* } */ case 6:
		newm = {};
		_tuple$2 = $assertType(typeInfoMap.Load(), mapType$1, true);
		m = _tuple$2[0];
		_ref = m;
		_i = 0;
		_keys = $keys(_ref);
		while (true) {
			if (!(_i < _keys.length)) { break; }
			_entry = _ref[_keys[_i]];
			if (_entry === undefined) {
				_i++;
				continue;
			}
			k = _entry.k;
			v = _entry.v;
			_key = k; (newm || $throwRuntimeError("assignment to entry in nil map"))[reflect.Type.keyFor(_key)] = { k: _key, v: v };
			_i++;
		}
		_key$1 = rt; (newm || $throwRuntimeError("assignment to entry in nil map"))[reflect.Type.keyFor(_key$1)] = { k: _key$1, v: info$1 };
		typeInfoMap.Store(new mapType$1(newm));
		$s = -1; return [info$1, $ifaceNil];
		/* */ } return; } } catch(err) { $err = err; $s = -1; return [ptrType$42.nil, $ifaceNil]; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: buildTypeInfo }; } $f._1 = _1; $f._2 = _2; $f._entry = _entry; $f._i = _i; $f._key = _key; $f._key$1 = _key$1; $f._keys = _keys; $f._r$22 = _r$22; $f._r$23 = _r$23; $f._r$24 = _r$24; $f._r$25 = _r$25; $f._r$26 = _r$26; $f._r$27 = _r$27; $f._r$28 = _r$28; $f._r$29 = _r$29; $f._r$30 = _r$30; $f._r$31 = _r$31; $f._ref = _ref; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f.err = err; $f.err$1 = err$1; $f.gt = gt; $f.gt$1 = gt$1; $f.info = info; $f.info$1 = info$1; $f.k = k; $f.m = m; $f.newm = newm; $f.rt = rt; $f.t = t; $f.typ = typ; $f.userType$1 = userType$1; $f.ut = ut; $f.v = v; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	mustGetTypeInfo = function(rt) {
		var _r$22, _r$23, _r$24, _tuple, err, rt, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$22 = $f._r$22; _r$23 = $f._r$23; _r$24 = $f._r$24; _tuple = $f._tuple; err = $f.err; rt = $f.rt; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r$22 = userType(rt); /* */ $s = 1; case 1: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
		_r$23 = getTypeInfo(_r$22); /* */ $s = 2; case 2: if($c) { $c = false; _r$23 = _r$23.$blk(); } if (_r$23 && _r$23.$blk !== undefined) { break s; }
		_tuple = _r$23;
		t = _tuple[0];
		err = _tuple[1];
		/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 3; continue; }
		/* */ $s = 4; continue;
		/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 3:
			_r$24 = err.Error(); /* */ $s = 5; case 5: if($c) { $c = false; _r$24 = _r$24.$blk(); } if (_r$24 && _r$24.$blk !== undefined) { break s; }
			$panic(new $String("getTypeInfo: " + _r$24));
		/* } */ case 4:
		$s = -1; return t;
		/* */ } return; } if ($f === undefined) { $f = { $blk: mustGetTypeInfo }; } $f._r$22 = _r$22; $f._r$23 = _r$23; $f._r$24 = _r$24; $f._tuple = _tuple; $f.err = err; $f.rt = rt; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	RegisterName = function(name, value) {
		var _r$22, _r$23, _r$24, _tuple, _tuple$1, dup, dup$1, n, name, t, ut, value, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$22 = $f._r$22; _r$23 = $f._r$23; _r$24 = $f._r$24; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; dup = $f.dup; dup$1 = $f.dup$1; n = $f.n; name = $f.name; t = $f.t; ut = $f.ut; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		if (name === "") {
			$panic(new $String("attempt to register empty name"));
		}
		_r$22 = userType(reflect.TypeOf(value)); /* */ $s = 1; case 1: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
		ut = _r$22;
		_tuple = nameToConcreteType.LoadOrStore(new $String(name), reflect.TypeOf(value));
		t = _tuple[0];
		dup = _tuple[1];
		/* */ if (dup && !($interfaceIsEqual(t, ut.user))) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (dup && !($interfaceIsEqual(t, ut.user))) { */ case 2:
			_r$23 = fmt.Sprintf("gob: registering duplicate types for %q: %s != %s", new sliceType$1([new $String(name), t, ut.user])); /* */ $s = 4; case 4: if($c) { $c = false; _r$23 = _r$23.$blk(); } if (_r$23 && _r$23.$blk !== undefined) { break s; }
			$panic(new $String(_r$23));
		/* } */ case 3:
		_tuple$1 = concreteTypeToName.LoadOrStore(ut.base, new $String(name));
		n = _tuple$1[0];
		dup$1 = _tuple$1[1];
		/* */ if (dup$1 && !($interfaceIsEqual(n, new $String(name)))) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if (dup$1 && !($interfaceIsEqual(n, new $String(name)))) { */ case 5:
			nameToConcreteType.Delete(new $String(name));
			_r$24 = fmt.Sprintf("gob: registering duplicate names for %s: %q != %q", new sliceType$1([ut.user, n, new $String(name)])); /* */ $s = 7; case 7: if($c) { $c = false; _r$24 = _r$24.$blk(); } if (_r$24 && _r$24.$blk !== undefined) { break s; }
			$panic(new $String(_r$24));
		/* } */ case 6:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: RegisterName }; } $f._r$22 = _r$22; $f._r$23 = _r$23; $f._r$24 = _r$24; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.dup = dup; $f.dup$1 = dup$1; $f.n = n; $f.name = name; $f.t = t; $f.ut = ut; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.RegisterName = RegisterName;
	Register = function(value) {
		var _r$22, _r$23, _r$24, _r$25, _r$26, _r$27, _r$28, _r$29, name, pt, rt, star, value, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$22 = $f._r$22; _r$23 = $f._r$23; _r$24 = $f._r$24; _r$25 = $f._r$25; _r$26 = $f._r$26; _r$27 = $f._r$27; _r$28 = $f._r$28; _r$29 = $f._r$29; name = $f.name; pt = $f.pt; rt = $f.rt; star = $f.star; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		rt = reflect.TypeOf(value);
		_r$22 = rt.String(); /* */ $s = 1; case 1: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
		name = _r$22;
		star = "";
		_r$23 = rt.Name(); /* */ $s = 4; case 4: if($c) { $c = false; _r$23 = _r$23.$blk(); } if (_r$23 && _r$23.$blk !== undefined) { break s; }
		/* */ if (_r$23 === "") { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (_r$23 === "") { */ case 2:
			pt = rt;
			_r$24 = pt.Kind(); /* */ $s = 7; case 7: if($c) { $c = false; _r$24 = _r$24.$blk(); } if (_r$24 && _r$24.$blk !== undefined) { break s; }
			/* */ if (_r$24 === 22) { $s = 5; continue; }
			/* */ $s = 6; continue;
			/* if (_r$24 === 22) { */ case 5:
				star = "*";
				rt = pt;
			/* } */ case 6:
		/* } */ case 3:
		_r$25 = rt.Name(); /* */ $s = 10; case 10: if($c) { $c = false; _r$25 = _r$25.$blk(); } if (_r$25 && _r$25.$blk !== undefined) { break s; }
		/* */ if (!(_r$25 === "")) { $s = 8; continue; }
		/* */ $s = 9; continue;
		/* if (!(_r$25 === "")) { */ case 8:
			_r$26 = rt.PkgPath(); /* */ $s = 14; case 14: if($c) { $c = false; _r$26 = _r$26.$blk(); } if (_r$26 && _r$26.$blk !== undefined) { break s; }
			/* */ if (_r$26 === "") { $s = 11; continue; }
			/* */ $s = 12; continue;
			/* if (_r$26 === "") { */ case 11:
				_r$27 = rt.Name(); /* */ $s = 15; case 15: if($c) { $c = false; _r$27 = _r$27.$blk(); } if (_r$27 && _r$27.$blk !== undefined) { break s; }
				name = star + _r$27;
				$s = 13; continue;
			/* } else { */ case 12:
				_r$28 = rt.PkgPath(); /* */ $s = 16; case 16: if($c) { $c = false; _r$28 = _r$28.$blk(); } if (_r$28 && _r$28.$blk !== undefined) { break s; }
				_r$29 = rt.Name(); /* */ $s = 17; case 17: if($c) { $c = false; _r$29 = _r$29.$blk(); } if (_r$29 && _r$29.$blk !== undefined) { break s; }
				name = star + _r$28 + "." + _r$29;
			/* } */ case 13:
		/* } */ case 9:
		$r = RegisterName(name, value); /* */ $s = 18; case 18: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Register }; } $f._r$22 = _r$22; $f._r$23 = _r$23; $f._r$24 = _r$24; $f._r$25 = _r$25; $f._r$26 = _r$26; $f._r$27 = _r$27; $f._r$28 = _r$28; $f._r$29 = _r$29; $f.name = name; $f.pt = pt; $f.rt = rt; $f.star = star; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Register = Register;
	registerBasics = function() {
		var $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = Register(new $Int(0)); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = Register(new $Int8(0)); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = Register(new $Int16(0)); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = Register(new $Int32(0)); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = Register(new $Int64(0, 0)); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = Register(new $Uint(0)); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = Register(new $Uint8(0)); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = Register(new $Uint16(0)); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = Register(new $Uint32(0)); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = Register(new $Uint64(0, 0)); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = Register(new $Float32(0)); /* */ $s = 11; case 11: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = Register(new $Float64(0)); /* */ $s = 12; case 12: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = Register(new $Complex64(0, 0)); /* */ $s = 13; case 13: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = Register(new $Complex128(0, 0)); /* */ $s = 14; case 14: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = Register(new $Uintptr(0)); /* */ $s = 15; case 15: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = Register(new $Bool(false)); /* */ $s = 16; case 16: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = Register(new $String("")); /* */ $s = 17; case 17: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = Register((sliceType$2.nil)); /* */ $s = 18; case 18: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = Register((sliceType$8.nil)); /* */ $s = 19; case 19: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = Register((sliceType$12.nil)); /* */ $s = 20; case 20: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = Register((sliceType$9.nil)); /* */ $s = 21; case 21: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = Register((sliceType$10.nil)); /* */ $s = 22; case 22: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = Register((sliceType$11.nil)); /* */ $s = 23; case 23: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = Register((sliceType$14.nil)); /* */ $s = 24; case 24: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = Register((sliceType$2.nil)); /* */ $s = 25; case 25: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = Register((sliceType$15.nil)); /* */ $s = 26; case 26: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = Register((sliceType$16.nil)); /* */ $s = 27; case 27: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = Register((sliceType$17.nil)); /* */ $s = 28; case 28: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = Register((sliceType$6.nil)); /* */ $s = 29; case 29: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = Register((sliceType$7.nil)); /* */ $s = 30; case 30: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = Register((sliceType$4.nil)); /* */ $s = 31; case 31: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = Register((sliceType$5.nil)); /* */ $s = 32; case 32: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = Register((sliceType$18.nil)); /* */ $s = 33; case 33: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = Register((sliceType$3.nil)); /* */ $s = 34; case 34: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = Register((sliceType$13.nil)); /* */ $s = 35; case 35: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: registerBasics }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	ptrType$28.methods = [{prop: "decodeUint", name: "decodeUint", pkg: "encoding/gob", typ: $funcType([], [$Uint64], false)}, {prop: "decodeInt", name: "decodeInt", pkg: "encoding/gob", typ: $funcType([], [$Int64], false)}, {prop: "getLength", name: "getLength", pkg: "encoding/gob", typ: $funcType([], [$Int, $Bool], false)}];
	ptrType$30.methods = [{prop: "Read", name: "Read", pkg: "", typ: $funcType([sliceType$2], [$Int, $error], false)}, {prop: "Drop", name: "Drop", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "Size", name: "Size", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "ReadByte", name: "ReadByte", pkg: "", typ: $funcType([], [$Uint8, $error], false)}, {prop: "Len", name: "Len", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Bytes", name: "Bytes", pkg: "", typ: $funcType([], [sliceType$2], false)}, {prop: "Reset", name: "Reset", pkg: "", typ: $funcType([], [], false)}];
	ptrType$29.methods = [{prop: "newDecoderState", name: "newDecoderState", pkg: "encoding/gob", typ: $funcType([ptrType$30], [ptrType$28], false)}, {prop: "freeDecoderState", name: "freeDecoderState", pkg: "encoding/gob", typ: $funcType([ptrType$28], [], false)}, {prop: "decodeSingle", name: "decodeSingle", pkg: "encoding/gob", typ: $funcType([ptrType$33, reflect.Value], [], false)}, {prop: "decodeStruct", name: "decodeStruct", pkg: "encoding/gob", typ: $funcType([ptrType$33, reflect.Value], [], false)}, {prop: "ignoreStruct", name: "ignoreStruct", pkg: "encoding/gob", typ: $funcType([ptrType$33], [], false)}, {prop: "ignoreSingle", name: "ignoreSingle", pkg: "encoding/gob", typ: $funcType([ptrType$33], [], false)}, {prop: "decodeArrayHelper", name: "decodeArrayHelper", pkg: "encoding/gob", typ: $funcType([ptrType$28, reflect.Value, decOp, $Int, $error, decHelper], [], false)}, {prop: "decodeArray", name: "decodeArray", pkg: "encoding/gob", typ: $funcType([ptrType$28, reflect.Value, decOp, $Int, $error, decHelper], [], false)}, {prop: "decodeMap", name: "decodeMap", pkg: "encoding/gob", typ: $funcType([reflect.Type, ptrType$28, reflect.Value, decOp, decOp, $error], [], false)}, {prop: "ignoreArrayHelper", name: "ignoreArrayHelper", pkg: "encoding/gob", typ: $funcType([ptrType$28, decOp, $Int], [], false)}, {prop: "ignoreArray", name: "ignoreArray", pkg: "encoding/gob", typ: $funcType([ptrType$28, decOp, $Int], [], false)}, {prop: "ignoreMap", name: "ignoreMap", pkg: "encoding/gob", typ: $funcType([ptrType$28, decOp, decOp], [], false)}, {prop: "decodeSlice", name: "decodeSlice", pkg: "encoding/gob", typ: $funcType([ptrType$28, reflect.Value, decOp, $error, decHelper], [], false)}, {prop: "ignoreSlice", name: "ignoreSlice", pkg: "encoding/gob", typ: $funcType([ptrType$28, decOp], [], false)}, {prop: "decodeInterface", name: "decodeInterface", pkg: "encoding/gob", typ: $funcType([reflect.Type, ptrType$28, reflect.Value], [], false)}, {prop: "ignoreInterface", name: "ignoreInterface", pkg: "encoding/gob", typ: $funcType([ptrType$28], [], false)}, {prop: "decodeGobDecoder", name: "decodeGobDecoder", pkg: "encoding/gob", typ: $funcType([ptrType$1, ptrType$28, reflect.Value], [], false)}, {prop: "ignoreGobDecoder", name: "ignoreGobDecoder", pkg: "encoding/gob", typ: $funcType([ptrType$28], [], false)}, {prop: "decOpFor", name: "decOpFor", pkg: "encoding/gob", typ: $funcType([typeId, reflect.Type, $String, mapType$2], [ptrType$31], false)}, {prop: "decIgnoreOpFor", name: "decIgnoreOpFor", pkg: "encoding/gob", typ: $funcType([typeId, mapType$3], [ptrType$31], false)}, {prop: "gobDecodeOpFor", name: "gobDecodeOpFor", pkg: "encoding/gob", typ: $funcType([ptrType$1], [ptrType$31], false)}, {prop: "compatibleType", name: "compatibleType", pkg: "encoding/gob", typ: $funcType([reflect.Type, typeId, mapType$4], [$Bool], false)}, {prop: "typeString", name: "typeString", pkg: "encoding/gob", typ: $funcType([typeId], [$String], false)}, {prop: "compileSingle", name: "compileSingle", pkg: "encoding/gob", typ: $funcType([typeId, ptrType$1], [ptrType$33, $error], false)}, {prop: "compileIgnoreSingle", name: "compileIgnoreSingle", pkg: "encoding/gob", typ: $funcType([typeId], [ptrType$33, $error], false)}, {prop: "compileDec", name: "compileDec", pkg: "encoding/gob", typ: $funcType([typeId, ptrType$1], [ptrType$33, $error], false)}, {prop: "getDecEnginePtr", name: "getDecEnginePtr", pkg: "encoding/gob", typ: $funcType([typeId, ptrType$1], [ptrType$35, $error], false)}, {prop: "getIgnoreEnginePtr", name: "getIgnoreEnginePtr", pkg: "encoding/gob", typ: $funcType([typeId], [ptrType$35, $error], false)}, {prop: "decodeValue", name: "decodeValue", pkg: "encoding/gob", typ: $funcType([typeId, reflect.Value], [], false)}, {prop: "decodeIgnoredValue", name: "decodeIgnoredValue", pkg: "encoding/gob", typ: $funcType([typeId], [], false)}, {prop: "recvType", name: "recvType", pkg: "encoding/gob", typ: $funcType([typeId], [], false)}, {prop: "recvMessage", name: "recvMessage", pkg: "encoding/gob", typ: $funcType([], [$Bool], false)}, {prop: "readMessage", name: "readMessage", pkg: "encoding/gob", typ: $funcType([$Int], [], false)}, {prop: "nextInt", name: "nextInt", pkg: "encoding/gob", typ: $funcType([], [$Int64], false)}, {prop: "nextUint", name: "nextUint", pkg: "encoding/gob", typ: $funcType([], [$Uint64], false)}, {prop: "decodeTypeSequence", name: "decodeTypeSequence", pkg: "encoding/gob", typ: $funcType([$Bool], [typeId], false)}, {prop: "Decode", name: "Decode", pkg: "", typ: $funcType([$emptyInterface], [$error], false)}, {prop: "DecodeValue", name: "DecodeValue", pkg: "", typ: $funcType([reflect.Value], [$error], false)}];
	ptrType$36.methods = [{prop: "encodeUint", name: "encodeUint", pkg: "encoding/gob", typ: $funcType([$Uint64], [], false)}, {prop: "encodeInt", name: "encodeInt", pkg: "encoding/gob", typ: $funcType([$Int64], [], false)}, {prop: "update", name: "update", pkg: "encoding/gob", typ: $funcType([ptrType$39], [], false)}];
	ptrType$38.methods = [{prop: "WriteByte", name: "WriteByte", pkg: "", typ: $funcType([$Uint8], [], false)}, {prop: "Write", name: "Write", pkg: "", typ: $funcType([sliceType$2], [$Int, $error], false)}, {prop: "WriteString", name: "WriteString", pkg: "", typ: $funcType([$String], [], false)}, {prop: "Len", name: "Len", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Bytes", name: "Bytes", pkg: "", typ: $funcType([], [sliceType$2], false)}, {prop: "Reset", name: "Reset", pkg: "", typ: $funcType([], [], false)}];
	ptrType$37.methods = [{prop: "newEncoderState", name: "newEncoderState", pkg: "encoding/gob", typ: $funcType([ptrType$38], [ptrType$36], false)}, {prop: "freeEncoderState", name: "freeEncoderState", pkg: "encoding/gob", typ: $funcType([ptrType$36], [], false)}, {prop: "encodeSingle", name: "encodeSingle", pkg: "encoding/gob", typ: $funcType([ptrType$38, ptrType$41, reflect.Value], [], false)}, {prop: "encodeStruct", name: "encodeStruct", pkg: "encoding/gob", typ: $funcType([ptrType$38, ptrType$41, reflect.Value], [], false)}, {prop: "encodeArray", name: "encodeArray", pkg: "encoding/gob", typ: $funcType([ptrType$38, reflect.Value, encOp, $Int, $Int, encHelper], [], false)}, {prop: "encodeMap", name: "encodeMap", pkg: "encoding/gob", typ: $funcType([ptrType$38, reflect.Value, encOp, encOp, $Int, $Int], [], false)}, {prop: "encodeInterface", name: "encodeInterface", pkg: "encoding/gob", typ: $funcType([ptrType$38, reflect.Value], [], false)}, {prop: "encodeGobEncoder", name: "encodeGobEncoder", pkg: "encoding/gob", typ: $funcType([ptrType$38, ptrType$1, reflect.Value], [], false)}, {prop: "encode", name: "encode", pkg: "encoding/gob", typ: $funcType([ptrType$38, reflect.Value, ptrType$1], [], false)}, {prop: "writer", name: "writer", pkg: "encoding/gob", typ: $funcType([], [io.Writer], false)}, {prop: "pushWriter", name: "pushWriter", pkg: "encoding/gob", typ: $funcType([io.Writer], [], false)}, {prop: "popWriter", name: "popWriter", pkg: "encoding/gob", typ: $funcType([], [], false)}, {prop: "setError", name: "setError", pkg: "encoding/gob", typ: $funcType([$error], [], false)}, {prop: "writeMessage", name: "writeMessage", pkg: "encoding/gob", typ: $funcType([io.Writer, ptrType$38], [], false)}, {prop: "sendActualType", name: "sendActualType", pkg: "encoding/gob", typ: $funcType([io.Writer, ptrType$36, ptrType$1, reflect.Type], [$Bool], false)}, {prop: "sendType", name: "sendType", pkg: "encoding/gob", typ: $funcType([io.Writer, ptrType$36, reflect.Type], [$Bool], false)}, {prop: "Encode", name: "Encode", pkg: "", typ: $funcType([$emptyInterface], [$error], false)}, {prop: "sendTypeDescriptor", name: "sendTypeDescriptor", pkg: "encoding/gob", typ: $funcType([io.Writer, ptrType$36, ptrType$1], [], false)}, {prop: "sendTypeId", name: "sendTypeId", pkg: "encoding/gob", typ: $funcType([ptrType$36, ptrType$1], [], false)}, {prop: "EncodeValue", name: "EncodeValue", pkg: "", typ: $funcType([reflect.Value], [$error], false)}];
	typeId.methods = [{prop: "gobType", name: "gobType", pkg: "encoding/gob", typ: $funcType([], [gobType], false)}, {prop: "string", name: "string", pkg: "encoding/gob", typ: $funcType([], [$String], false)}, {prop: "name", name: "name", pkg: "encoding/gob", typ: $funcType([], [$String], false)}];
	ptrType$45.methods = [{prop: "id", name: "id", pkg: "encoding/gob", typ: $funcType([], [typeId], false)}, {prop: "setId", name: "setId", pkg: "encoding/gob", typ: $funcType([typeId], [], false)}, {prop: "string", name: "string", pkg: "encoding/gob", typ: $funcType([], [$String], false)}, {prop: "safeString", name: "safeString", pkg: "encoding/gob", typ: $funcType([mapType$8], [$String], false)}, {prop: "name", name: "name", pkg: "encoding/gob", typ: $funcType([], [$String], false)}];
	ptrType$23.methods = [{prop: "init", name: "init", pkg: "encoding/gob", typ: $funcType([gobType, $Int], [], false)}, {prop: "safeString", name: "safeString", pkg: "encoding/gob", typ: $funcType([mapType$8], [$String], false)}, {prop: "string", name: "string", pkg: "encoding/gob", typ: $funcType([], [$String], false)}];
	ptrType$27.methods = [{prop: "safeString", name: "safeString", pkg: "encoding/gob", typ: $funcType([mapType$8], [$String], false)}, {prop: "string", name: "string", pkg: "encoding/gob", typ: $funcType([], [$String], false)}];
	ptrType$26.methods = [{prop: "init", name: "init", pkg: "encoding/gob", typ: $funcType([gobType, gobType], [], false)}, {prop: "safeString", name: "safeString", pkg: "encoding/gob", typ: $funcType([mapType$8], [$String], false)}, {prop: "string", name: "string", pkg: "encoding/gob", typ: $funcType([], [$String], false)}];
	ptrType$24.methods = [{prop: "init", name: "init", pkg: "encoding/gob", typ: $funcType([gobType], [], false)}, {prop: "safeString", name: "safeString", pkg: "encoding/gob", typ: $funcType([mapType$8], [$String], false)}, {prop: "string", name: "string", pkg: "encoding/gob", typ: $funcType([], [$String], false)}];
	ptrType$25.methods = [{prop: "safeString", name: "safeString", pkg: "encoding/gob", typ: $funcType([mapType$8], [$String], false)}, {prop: "string", name: "string", pkg: "encoding/gob", typ: $funcType([], [$String], false)}];
	ptrType$32.methods = [{prop: "string", name: "string", pkg: "encoding/gob", typ: $funcType([], [$String], false)}];
	decHelper.init([ptrType$28, reflect.Value, $Int, $error], [$Bool], false);
	decoderState.init("encoding/gob", [{prop: "dec", name: "dec", anonymous: false, exported: false, typ: ptrType$29, tag: ""}, {prop: "b", name: "b", anonymous: false, exported: false, typ: ptrType$30, tag: ""}, {prop: "fieldnum", name: "fieldnum", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "next", name: "next", anonymous: false, exported: false, typ: ptrType$28, tag: ""}]);
	decBuffer.init("encoding/gob", [{prop: "data", name: "data", anonymous: false, exported: false, typ: sliceType$2, tag: ""}, {prop: "offset", name: "offset", anonymous: false, exported: false, typ: $Int, tag: ""}]);
	decOp.init([ptrType$44, ptrType$28, reflect.Value], [], false);
	decInstr.init("encoding/gob", [{prop: "op", name: "op", anonymous: false, exported: false, typ: decOp, tag: ""}, {prop: "field", name: "field", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "index", name: "index", anonymous: false, exported: false, typ: sliceType$8, tag: ""}, {prop: "ovfl", name: "ovfl", anonymous: false, exported: false, typ: $error, tag: ""}]);
	decEngine.init("encoding/gob", [{prop: "instr", name: "instr", anonymous: false, exported: false, typ: sliceType$19, tag: ""}, {prop: "numInstr", name: "numInstr", anonymous: false, exported: false, typ: $Int, tag: ""}]);
	emptyStruct.init("", []);
	Decoder.init("encoding/gob", [{prop: "mutex", name: "mutex", anonymous: false, exported: false, typ: nosync.Mutex, tag: ""}, {prop: "r", name: "r", anonymous: false, exported: false, typ: io.Reader, tag: ""}, {prop: "buf", name: "buf", anonymous: false, exported: false, typ: decBuffer, tag: ""}, {prop: "wireType", name: "wireType", anonymous: false, exported: false, typ: mapType$5, tag: ""}, {prop: "decoderCache", name: "decoderCache", anonymous: false, exported: false, typ: mapType$7, tag: ""}, {prop: "ignorerCache", name: "ignorerCache", anonymous: false, exported: false, typ: mapType$6, tag: ""}, {prop: "freeList", name: "freeList", anonymous: false, exported: false, typ: ptrType$28, tag: ""}, {prop: "countBuf", name: "countBuf", anonymous: false, exported: false, typ: sliceType$2, tag: ""}, {prop: "err", name: "err", anonymous: false, exported: false, typ: $error, tag: ""}]);
	encHelper.init([ptrType$36, reflect.Value], [$Bool], false);
	encoderState.init("encoding/gob", [{prop: "enc", name: "enc", anonymous: false, exported: false, typ: ptrType$37, tag: ""}, {prop: "b", name: "b", anonymous: false, exported: false, typ: ptrType$38, tag: ""}, {prop: "sendZero", name: "sendZero", anonymous: false, exported: false, typ: $Bool, tag: ""}, {prop: "fieldnum", name: "fieldnum", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "buf", name: "buf", anonymous: false, exported: false, typ: arrayType$2, tag: ""}, {prop: "next", name: "next", anonymous: false, exported: false, typ: ptrType$36, tag: ""}]);
	encBuffer.init("encoding/gob", [{prop: "data", name: "data", anonymous: false, exported: false, typ: sliceType$2, tag: ""}, {prop: "scratch", name: "scratch", anonymous: false, exported: false, typ: arrayType$1, tag: ""}]);
	encOp.init([ptrType$39, ptrType$36, reflect.Value], [], false);
	encInstr.init("encoding/gob", [{prop: "op", name: "op", anonymous: false, exported: false, typ: encOp, tag: ""}, {prop: "field", name: "field", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "index", name: "index", anonymous: false, exported: false, typ: sliceType$8, tag: ""}, {prop: "indir", name: "indir", anonymous: false, exported: false, typ: $Int, tag: ""}]);
	encEngine.init("encoding/gob", [{prop: "instr", name: "instr", anonymous: false, exported: false, typ: sliceType$20, tag: ""}]);
	Encoder.init("encoding/gob", [{prop: "mutex", name: "mutex", anonymous: false, exported: false, typ: nosync.Mutex, tag: ""}, {prop: "w", name: "w", anonymous: false, exported: false, typ: sliceType$21, tag: ""}, {prop: "sent", name: "sent", anonymous: false, exported: false, typ: mapType$4, tag: ""}, {prop: "countState", name: "countState", anonymous: false, exported: false, typ: ptrType$36, tag: ""}, {prop: "freeList", name: "freeList", anonymous: false, exported: false, typ: ptrType$36, tag: ""}, {prop: "byteBuf", name: "byteBuf", anonymous: false, exported: false, typ: encBuffer, tag: ""}, {prop: "err", name: "err", anonymous: false, exported: false, typ: $error, tag: ""}]);
	gobError.init("encoding/gob", [{prop: "err", name: "err", anonymous: false, exported: false, typ: $error, tag: ""}]);
	userTypeInfo.init("encoding/gob", [{prop: "user", name: "user", anonymous: false, exported: false, typ: reflect.Type, tag: ""}, {prop: "base", name: "base", anonymous: false, exported: false, typ: reflect.Type, tag: ""}, {prop: "indir", name: "indir", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "externalEnc", name: "externalEnc", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "externalDec", name: "externalDec", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "encIndir", name: "encIndir", anonymous: false, exported: false, typ: $Int8, tag: ""}, {prop: "decIndir", name: "decIndir", anonymous: false, exported: false, typ: $Int8, tag: ""}]);
	gobType.init([{prop: "id", name: "id", pkg: "encoding/gob", typ: $funcType([], [typeId], false)}, {prop: "name", name: "name", pkg: "encoding/gob", typ: $funcType([], [$String], false)}, {prop: "safeString", name: "safeString", pkg: "encoding/gob", typ: $funcType([mapType$8], [$String], false)}, {prop: "setId", name: "setId", pkg: "encoding/gob", typ: $funcType([typeId], [], false)}, {prop: "string", name: "string", pkg: "encoding/gob", typ: $funcType([], [$String], false)}]);
	CommonType.init("", [{prop: "Name", name: "Name", anonymous: false, exported: true, typ: $String, tag: ""}, {prop: "Id", name: "Id", anonymous: false, exported: true, typ: typeId, tag: ""}]);
	arrayType.init("", [{prop: "CommonType", name: "CommonType", anonymous: true, exported: true, typ: CommonType, tag: ""}, {prop: "Elem", name: "Elem", anonymous: false, exported: true, typ: typeId, tag: ""}, {prop: "Len", name: "Len", anonymous: false, exported: true, typ: $Int, tag: ""}]);
	gobEncoderType.init("", [{prop: "CommonType", name: "CommonType", anonymous: true, exported: true, typ: CommonType, tag: ""}]);
	mapType.init("", [{prop: "CommonType", name: "CommonType", anonymous: true, exported: true, typ: CommonType, tag: ""}, {prop: "Key", name: "Key", anonymous: false, exported: true, typ: typeId, tag: ""}, {prop: "Elem", name: "Elem", anonymous: false, exported: true, typ: typeId, tag: ""}]);
	sliceType.init("", [{prop: "CommonType", name: "CommonType", anonymous: true, exported: true, typ: CommonType, tag: ""}, {prop: "Elem", name: "Elem", anonymous: false, exported: true, typ: typeId, tag: ""}]);
	fieldType.init("", [{prop: "Name", name: "Name", anonymous: false, exported: true, typ: $String, tag: ""}, {prop: "Id", name: "Id", anonymous: false, exported: true, typ: typeId, tag: ""}]);
	structType.init("", [{prop: "CommonType", name: "CommonType", anonymous: true, exported: true, typ: CommonType, tag: ""}, {prop: "Field", name: "Field", anonymous: false, exported: true, typ: sliceType$22, tag: ""}]);
	wireType.init("", [{prop: "ArrayT", name: "ArrayT", anonymous: false, exported: true, typ: ptrType$23, tag: ""}, {prop: "SliceT", name: "SliceT", anonymous: false, exported: true, typ: ptrType$24, tag: ""}, {prop: "StructT", name: "StructT", anonymous: false, exported: true, typ: ptrType$25, tag: ""}, {prop: "MapT", name: "MapT", anonymous: false, exported: true, typ: ptrType$26, tag: ""}, {prop: "GobEncoderT", name: "GobEncoderT", anonymous: false, exported: true, typ: ptrType$27, tag: ""}, {prop: "BinaryMarshalerT", name: "BinaryMarshalerT", anonymous: false, exported: true, typ: ptrType$27, tag: ""}, {prop: "TextMarshalerT", name: "TextMarshalerT", anonymous: false, exported: true, typ: ptrType$27, tag: ""}]);
	typeInfo.init("encoding/gob", [{prop: "id", name: "id", anonymous: false, exported: false, typ: typeId, tag: ""}, {prop: "encInit", name: "encInit", anonymous: false, exported: false, typ: nosync.Mutex, tag: ""}, {prop: "encoder", name: "encoder", anonymous: false, exported: false, typ: atomic.Value, tag: ""}, {prop: "wire", name: "wire", anonymous: false, exported: false, typ: ptrType$32, tag: ""}]);
	GobEncoder.init([{prop: "GobEncode", name: "GobEncode", pkg: "", typ: $funcType([], [sliceType$2, $error], false)}]);
	GobDecoder.init([{prop: "GobDecode", name: "GobDecode", pkg: "", typ: $funcType([sliceType$2], [$error], false)}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = bufio.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = encoding.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = binary.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = errors.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = fmt.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = nosync.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = io.$init(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = math.$init(); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = bits.$init(); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = os.$init(); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = reflect.$init(); /* */ $s = 11; case 11: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = atomic.$init(); /* */ $s = 12; case 12: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = unicode.$init(); /* */ $s = 13; case 13: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = utf8.$init(); /* */ $s = 14; case 14: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		noValue = new reflect.Value.ptr(ptrType.nil, 0, 0);
		userTypeCache = new nosync.Map.ptr(false);
		nextId = 0;
		typeLock = new nosync.Mutex.ptr(false);
		builtinIdToType = false;
		wireTypeUserInfo = ptrType$1.nil;
		typeInfoMap = new atomic.Value.ptr($ifaceNil);
		nameToConcreteType = new nosync.Map.ptr(false);
		concreteTypeToName = new nosync.Map.ptr(false);
		errBadUint = errors.New("gob: encoded unsigned integer out of range");
		errBadType = errors.New("gob: unknown type id or corrupted data");
		errRange = errors.New("gob: bad data: field numbers out of bounds");
		emptyStructType = reflect.TypeOf((x = new emptyStruct.ptr(), new x.constructor.elem(x)));
		errBadCount = errors.New("invalid message length");
		decArrayHelper = $makeMap(reflect.Kind.keyFor, [{ k: 1, v: decBoolArray }, { k: 15, v: decComplex64Array }, { k: 16, v: decComplex128Array }, { k: 13, v: decFloat32Array }, { k: 14, v: decFloat64Array }, { k: 2, v: decIntArray }, { k: 4, v: decInt16Array }, { k: 5, v: decInt32Array }, { k: 6, v: decInt64Array }, { k: 3, v: decInt8Array }, { k: 24, v: decStringArray }, { k: 7, v: decUintArray }, { k: 9, v: decUint16Array }, { k: 10, v: decUint32Array }, { k: 11, v: decUint64Array }, { k: 12, v: decUintptrArray }]);
		decSliceHelper = $makeMap(reflect.Kind.keyFor, [{ k: 1, v: decBoolSlice }, { k: 15, v: decComplex64Slice }, { k: 16, v: decComplex128Slice }, { k: 13, v: decFloat32Slice }, { k: 14, v: decFloat64Slice }, { k: 2, v: decIntSlice }, { k: 4, v: decInt16Slice }, { k: 5, v: decInt32Slice }, { k: 6, v: decInt64Slice }, { k: 3, v: decInt8Slice }, { k: 24, v: decStringSlice }, { k: 7, v: decUintSlice }, { k: 9, v: decUint16Slice }, { k: 10, v: decUint32Slice }, { k: 11, v: decUint64Slice }, { k: 12, v: decUintptrSlice }]);
		decOpTable = $toNativeArray($kindFunc, [$throwNilPointerError, decBool, $throwNilPointerError, decInt8, decInt16, decInt32, decInt64, $throwNilPointerError, decUint8, decUint16, decUint32, decUint64, $throwNilPointerError, decFloat32, decFloat64, decComplex64, decComplex128, $throwNilPointerError, $throwNilPointerError, $throwNilPointerError, $throwNilPointerError, $throwNilPointerError, $throwNilPointerError, $throwNilPointerError, decString]);
		encArrayHelper = $makeMap(reflect.Kind.keyFor, [{ k: 1, v: encBoolArray }, { k: 15, v: encComplex64Array }, { k: 16, v: encComplex128Array }, { k: 13, v: encFloat32Array }, { k: 14, v: encFloat64Array }, { k: 2, v: encIntArray }, { k: 4, v: encInt16Array }, { k: 5, v: encInt32Array }, { k: 6, v: encInt64Array }, { k: 3, v: encInt8Array }, { k: 24, v: encStringArray }, { k: 7, v: encUintArray }, { k: 9, v: encUint16Array }, { k: 10, v: encUint32Array }, { k: 11, v: encUint64Array }, { k: 12, v: encUintptrArray }]);
		encSliceHelper = $makeMap(reflect.Kind.keyFor, [{ k: 1, v: encBoolSlice }, { k: 15, v: encComplex64Slice }, { k: 16, v: encComplex128Slice }, { k: 13, v: encFloat32Slice }, { k: 14, v: encFloat64Slice }, { k: 2, v: encIntSlice }, { k: 4, v: encInt16Slice }, { k: 5, v: encInt32Slice }, { k: 6, v: encInt64Slice }, { k: 3, v: encInt8Slice }, { k: 24, v: encStringSlice }, { k: 7, v: encUintSlice }, { k: 9, v: encUint16Slice }, { k: 10, v: encUint32Slice }, { k: 11, v: encUint64Slice }, { k: 12, v: encUintptrSlice }]);
		encBufferPool = new nosync.Pool.ptr(sliceType$1.nil, (function() {
			var e;
			e = new encBuffer.ptr(sliceType$2.nil, arrayType$1.zero());
			e.data = $subslice(new sliceType$2(e.scratch), 0, 0);
			return e;
		}));
		encOpTable = $toNativeArray($kindFunc, [$throwNilPointerError, encBool, encInt, encInt, encInt, encInt, encInt, encUint, encUint, encUint, encUint, encUint, encUint, encFloat, encFloat, encComplex, encComplex, $throwNilPointerError, $throwNilPointerError, $throwNilPointerError, $throwNilPointerError, $throwNilPointerError, $throwNilPointerError, $throwNilPointerError, encString]);
		spaceForLength = $makeSlice(sliceType$2, 9);
		_r = reflect.TypeOf((ptrType$2.nil)).Elem(); /* */ $s = 15; case 15: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		gobEncoderInterfaceType = _r;
		_r$1 = reflect.TypeOf((ptrType$3.nil)).Elem(); /* */ $s = 16; case 16: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		gobDecoderInterfaceType = _r$1;
		_r$2 = reflect.TypeOf((ptrType$4.nil)).Elem(); /* */ $s = 17; case 17: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		binaryMarshalerInterfaceType = _r$2;
		_r$3 = reflect.TypeOf((ptrType$5.nil)).Elem(); /* */ $s = 18; case 18: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		binaryUnmarshalerInterfaceType = _r$3;
		_r$4 = reflect.TypeOf((ptrType$6.nil)).Elem(); /* */ $s = 19; case 19: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		textMarshalerInterfaceType = _r$4;
		_r$5 = reflect.TypeOf((ptrType$7.nil)).Elem(); /* */ $s = 20; case 20: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		textUnmarshalerInterfaceType = _r$5;
		types = {};
		idToType = {};
		_r$6 = bootstrapType("bool", (ptrType$8.nil), 1); /* */ $s = 21; case 21: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
		tBool = _r$6;
		_r$7 = bootstrapType("int", (ptrType$9.nil), 2); /* */ $s = 22; case 22: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
		tInt = _r$7;
		_r$8 = bootstrapType("uint", (ptrType$10.nil), 3); /* */ $s = 23; case 23: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
		tUint = _r$8;
		_r$9 = bootstrapType("float", (ptrType$11.nil), 4); /* */ $s = 24; case 24: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
		tFloat = _r$9;
		_r$10 = bootstrapType("bytes", (ptrType$12.nil), 5); /* */ $s = 25; case 25: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
		tBytes = _r$10;
		_r$11 = bootstrapType("string", (ptrType$13.nil), 6); /* */ $s = 26; case 26: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
		tString = _r$11;
		_r$12 = bootstrapType("complex", (ptrType$14.nil), 7); /* */ $s = 27; case 27: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }
		tComplex = _r$12;
		decIgnoreOpMap = $makeMap(typeId.keyFor, [{ k: tBool, v: ignoreUint }, { k: tInt, v: ignoreUint }, { k: tUint, v: ignoreUint }, { k: tFloat, v: ignoreUint }, { k: tBytes, v: ignoreUint8Array }, { k: tString, v: ignoreUint8Array }, { k: tComplex, v: ignoreTwoUints }]);
		_r$13 = bootstrapType("interface", (ptrType$15.nil), 8); /* */ $s = 28; case 28: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		tInterface = _r$13;
		_r$14 = bootstrapType("_reserved1", (ptrType$16.nil), 9); /* */ $s = 29; case 29: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
		tReserved7 = _r$14;
		_r$15 = bootstrapType("_reserved1", (ptrType$17.nil), 10); /* */ $s = 30; case 30: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
		tReserved6 = _r$15;
		_r$16 = bootstrapType("_reserved1", (ptrType$18.nil), 11); /* */ $s = 31; case 31: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
		tReserved5 = _r$16;
		_r$17 = bootstrapType("_reserved1", (ptrType$19.nil), 12); /* */ $s = 32; case 32: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }
		tReserved4 = _r$17;
		_r$18 = bootstrapType("_reserved1", (ptrType$20.nil), 13); /* */ $s = 33; case 33: if($c) { $c = false; _r$18 = _r$18.$blk(); } if (_r$18 && _r$18.$blk !== undefined) { break s; }
		tReserved3 = _r$18;
		_r$19 = bootstrapType("_reserved1", (ptrType$21.nil), 14); /* */ $s = 34; case 34: if($c) { $c = false; _r$19 = _r$19.$blk(); } if (_r$19 && _r$19.$blk !== undefined) { break s; }
		tReserved2 = _r$19;
		_r$20 = bootstrapType("_reserved1", (ptrType$22.nil), 15); /* */ $s = 35; case 35: if($c) { $c = false; _r$20 = _r$20.$blk(); } if (_r$20 && _r$20.$blk !== undefined) { break s; }
		tReserved1 = _r$20;
		_r$21 = mustGetTypeInfo(reflect.TypeOf((x$1 = new wireType.ptr(ptrType$23.nil, ptrType$24.nil, ptrType$25.nil, ptrType$26.nil, ptrType$27.nil, ptrType$27.nil, ptrType$27.nil), new x$1.constructor.elem(x$1)))); /* */ $s = 36; case 36: if($c) { $c = false; _r$21 = _r$21.$blk(); } if (_r$21 && _r$21.$blk !== undefined) { break s; }
		tWireType = _r$21.id;
		$r = init(); /* */ $s = 37; case 37: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = init$1(); /* */ $s = 38; case 38: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["log"] = (function() {
	var $pkg = {}, $init, fmt, nosync, io, os, runtime, time, Logger, sliceType, arrayType, ptrType, sliceType$1, ptrType$1, std, New, itoa, Println, Fatalf;
	fmt = $packages["fmt"];
	nosync = $packages["github.com/gopherjs/gopherjs/nosync"];
	io = $packages["io"];
	os = $packages["os"];
	runtime = $packages["runtime"];
	time = $packages["time"];
	Logger = $pkg.Logger = $newType(0, $kindStruct, "log.Logger", true, "log", true, function(mu_, prefix_, flag_, out_, buf_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.mu = new nosync.Mutex.ptr(false);
			this.prefix = "";
			this.flag = 0;
			this.out = $ifaceNil;
			this.buf = sliceType.nil;
			return;
		}
		this.mu = mu_;
		this.prefix = prefix_;
		this.flag = flag_;
		this.out = out_;
		this.buf = buf_;
	});
	sliceType = $sliceType($Uint8);
	arrayType = $arrayType($Uint8, 20);
	ptrType = $ptrType(sliceType);
	sliceType$1 = $sliceType($emptyInterface);
	ptrType$1 = $ptrType(Logger);
	New = function(out, prefix, flag) {
		var flag, out, prefix;
		return new Logger.ptr(new nosync.Mutex.ptr(false), prefix, flag, out, sliceType.nil);
	};
	$pkg.New = New;
	Logger.ptr.prototype.SetOutput = function(w) {
		var l, w, $deferred;
		/* */ var $err = null; try { $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		l = this;
		l.mu.Lock();
		$deferred.push([$methodVal(l.mu, "Unlock"), []]);
		l.out = w;
		/* */ } catch(err) { $err = err; } finally { $callDeferred($deferred, $err); }
	};
	Logger.prototype.SetOutput = function(w) { return this.$val.SetOutput(w); };
	itoa = function(buf, i, wid) {
		var _q, b, bp, buf, i, q, wid;
		b = arrayType.zero();
		bp = 19;
		while (true) {
			if (!(i >= 10 || wid > 1)) { break; }
			wid = wid - (1) >> 0;
			q = (_q = i / 10, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
			((bp < 0 || bp >= b.length) ? ($throwRuntimeError("index out of range"), undefined) : b[bp] = ((((48 + i >> 0) - ($imul(q, 10)) >> 0) << 24 >>> 24)));
			bp = bp - (1) >> 0;
			i = q;
		}
		((bp < 0 || bp >= b.length) ? ($throwRuntimeError("index out of range"), undefined) : b[bp] = (((48 + i >> 0) << 24 >>> 24)));
		buf.$set($appendSlice(buf.$get(), $subslice(new sliceType(b), bp)));
	};
	Logger.ptr.prototype.formatHeader = function(buf, t, file, line) {
		var _q, _r, _r$1, _tuple, _tuple$1, buf, day, file, hour, i, l, line, min, month, sec, short$1, t, year, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _q = $f._q; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; buf = $f.buf; day = $f.day; file = $f.file; hour = $f.hour; i = $f.i; l = $f.l; line = $f.line; min = $f.min; month = $f.month; sec = $f.sec; short$1 = $f.short$1; t = $f.t; year = $f.year; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		l = this;
		buf.$set($appendSlice(buf.$get(), l.prefix));
		/* */ if (!(((l.flag & 7) === 0))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!(((l.flag & 7) === 0))) { */ case 1:
			if (!(((l.flag & 32) === 0))) {
				time.Time.copy(t, $clone(t, time.Time).UTC());
			}
			/* */ if (!(((l.flag & 1) === 0))) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (!(((l.flag & 1) === 0))) { */ case 3:
				_r = $clone(t, time.Time).Date(); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				_tuple = _r;
				year = _tuple[0];
				month = _tuple[1];
				day = _tuple[2];
				itoa(buf, year, 4);
				buf.$set($append(buf.$get(), 47));
				itoa(buf, ((month >> 0)), 2);
				buf.$set($append(buf.$get(), 47));
				itoa(buf, day, 2);
				buf.$set($append(buf.$get(), 32));
			/* } */ case 4:
			/* */ if (!(((l.flag & 6) === 0))) { $s = 6; continue; }
			/* */ $s = 7; continue;
			/* if (!(((l.flag & 6) === 0))) { */ case 6:
				_r$1 = $clone(t, time.Time).Clock(); /* */ $s = 8; case 8: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				_tuple$1 = _r$1;
				hour = _tuple$1[0];
				min = _tuple$1[1];
				sec = _tuple$1[2];
				itoa(buf, hour, 2);
				buf.$set($append(buf.$get(), 58));
				itoa(buf, min, 2);
				buf.$set($append(buf.$get(), 58));
				itoa(buf, sec, 2);
				if (!(((l.flag & 4) === 0))) {
					buf.$set($append(buf.$get(), 46));
					itoa(buf, (_q = $clone(t, time.Time).Nanosecond() / 1000, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")), 6);
				}
				buf.$set($append(buf.$get(), 32));
			/* } */ case 7:
		/* } */ case 2:
		if (!(((l.flag & 24) === 0))) {
			if (!(((l.flag & 16) === 0))) {
				short$1 = file;
				i = file.length - 1 >> 0;
				while (true) {
					if (!(i > 0)) { break; }
					if (file.charCodeAt(i) === 47) {
						short$1 = $substring(file, (i + 1 >> 0));
						break;
					}
					i = i - (1) >> 0;
				}
				file = short$1;
			}
			buf.$set($appendSlice(buf.$get(), file));
			buf.$set($append(buf.$get(), 58));
			itoa(buf, line, -1);
			buf.$set($appendSlice(buf.$get(), ": "));
		}
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Logger.ptr.prototype.formatHeader }; } $f._q = _q; $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.buf = buf; $f.day = day; $f.file = file; $f.hour = hour; $f.i = i; $f.l = l; $f.line = line; $f.min = min; $f.month = month; $f.sec = sec; $f.short$1 = short$1; $f.t = t; $f.year = year; $f.$s = $s; $f.$r = $r; return $f;
	};
	Logger.prototype.formatHeader = function(buf, t, file, line) { return this.$val.formatHeader(buf, t, file, line); };
	Logger.ptr.prototype.Output = function(calldepth, s) {
		var _r, _tuple, _tuple$1, calldepth, err, file, l, line, now, ok, s, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; calldepth = $f.calldepth; err = $f.err; file = $f.file; l = $f.l; line = $f.line; now = $f.now; ok = $f.ok; s = $f.s; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		l = this;
		now = $clone(time.Now(), time.Time);
		file = "";
		line = 0;
		l.mu.Lock();
		$deferred.push([$methodVal(l.mu, "Unlock"), []]);
		if (!(((l.flag & 24) === 0))) {
			l.mu.Unlock();
			ok = false;
			_tuple = runtime.Caller(calldepth);
			file = _tuple[1];
			line = _tuple[2];
			ok = _tuple[3];
			if (!ok) {
				file = "???";
				line = 0;
			}
			l.mu.Lock();
		}
		l.buf = $subslice(l.buf, 0, 0);
		$r = l.formatHeader((l.$ptr_buf || (l.$ptr_buf = new ptrType(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, l))), $clone(now, time.Time), file, line); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		l.buf = $appendSlice(l.buf, s);
		if ((s.length === 0) || !((s.charCodeAt((s.length - 1 >> 0)) === 10))) {
			l.buf = $append(l.buf, 10);
		}
		_r = l.out.Write(l.buf); /* */ $s = 2; case 2: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple$1 = _r;
		err = _tuple$1[1];
		$s = -1; return err;
		/* */ } return; } } catch(err) { $err = err; $s = -1; return $ifaceNil; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: Logger.ptr.prototype.Output }; } $f._r = _r; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.calldepth = calldepth; $f.err = err; $f.file = file; $f.l = l; $f.line = line; $f.now = now; $f.ok = ok; $f.s = s; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	Logger.prototype.Output = function(calldepth, s) { return this.$val.Output(calldepth, s); };
	Logger.ptr.prototype.Printf = function(format, v) {
		var _arg, _r, _r$1, format, l, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _arg = $f._arg; _r = $f._r; _r$1 = $f._r$1; format = $f.format; l = $f.l; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		l = this;
		_r = fmt.Sprintf(format, v); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_arg = _r;
		_r$1 = l.Output(2, _arg); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$1;
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Logger.ptr.prototype.Printf }; } $f._arg = _arg; $f._r = _r; $f._r$1 = _r$1; $f.format = format; $f.l = l; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Logger.prototype.Printf = function(format, v) { return this.$val.Printf(format, v); };
	Logger.ptr.prototype.Print = function(v) {
		var _arg, _r, _r$1, l, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _arg = $f._arg; _r = $f._r; _r$1 = $f._r$1; l = $f.l; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		l = this;
		_r = fmt.Sprint(v); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_arg = _r;
		_r$1 = l.Output(2, _arg); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$1;
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Logger.ptr.prototype.Print }; } $f._arg = _arg; $f._r = _r; $f._r$1 = _r$1; $f.l = l; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Logger.prototype.Print = function(v) { return this.$val.Print(v); };
	Logger.ptr.prototype.Println = function(v) {
		var _arg, _r, _r$1, l, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _arg = $f._arg; _r = $f._r; _r$1 = $f._r$1; l = $f.l; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		l = this;
		_r = fmt.Sprintln(v); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_arg = _r;
		_r$1 = l.Output(2, _arg); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$1;
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Logger.ptr.prototype.Println }; } $f._arg = _arg; $f._r = _r; $f._r$1 = _r$1; $f.l = l; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Logger.prototype.Println = function(v) { return this.$val.Println(v); };
	Logger.ptr.prototype.Fatal = function(v) {
		var _arg, _r, _r$1, l, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _arg = $f._arg; _r = $f._r; _r$1 = $f._r$1; l = $f.l; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		l = this;
		_r = fmt.Sprint(v); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_arg = _r;
		_r$1 = l.Output(2, _arg); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$1;
		os.Exit(1);
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Logger.ptr.prototype.Fatal }; } $f._arg = _arg; $f._r = _r; $f._r$1 = _r$1; $f.l = l; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Logger.prototype.Fatal = function(v) { return this.$val.Fatal(v); };
	Logger.ptr.prototype.Fatalf = function(format, v) {
		var _arg, _r, _r$1, format, l, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _arg = $f._arg; _r = $f._r; _r$1 = $f._r$1; format = $f.format; l = $f.l; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		l = this;
		_r = fmt.Sprintf(format, v); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_arg = _r;
		_r$1 = l.Output(2, _arg); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$1;
		os.Exit(1);
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Logger.ptr.prototype.Fatalf }; } $f._arg = _arg; $f._r = _r; $f._r$1 = _r$1; $f.format = format; $f.l = l; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Logger.prototype.Fatalf = function(format, v) { return this.$val.Fatalf(format, v); };
	Logger.ptr.prototype.Fatalln = function(v) {
		var _arg, _r, _r$1, l, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _arg = $f._arg; _r = $f._r; _r$1 = $f._r$1; l = $f.l; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		l = this;
		_r = fmt.Sprintln(v); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_arg = _r;
		_r$1 = l.Output(2, _arg); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$1;
		os.Exit(1);
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Logger.ptr.prototype.Fatalln }; } $f._arg = _arg; $f._r = _r; $f._r$1 = _r$1; $f.l = l; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Logger.prototype.Fatalln = function(v) { return this.$val.Fatalln(v); };
	Logger.ptr.prototype.Panic = function(v) {
		var _r, _r$1, l, s, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; l = $f.l; s = $f.s; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		l = this;
		_r = fmt.Sprint(v); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		s = _r;
		_r$1 = l.Output(2, s); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$1;
		$panic(new $String(s));
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Logger.ptr.prototype.Panic }; } $f._r = _r; $f._r$1 = _r$1; $f.l = l; $f.s = s; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Logger.prototype.Panic = function(v) { return this.$val.Panic(v); };
	Logger.ptr.prototype.Panicf = function(format, v) {
		var _r, _r$1, format, l, s, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; format = $f.format; l = $f.l; s = $f.s; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		l = this;
		_r = fmt.Sprintf(format, v); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		s = _r;
		_r$1 = l.Output(2, s); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$1;
		$panic(new $String(s));
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Logger.ptr.prototype.Panicf }; } $f._r = _r; $f._r$1 = _r$1; $f.format = format; $f.l = l; $f.s = s; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Logger.prototype.Panicf = function(format, v) { return this.$val.Panicf(format, v); };
	Logger.ptr.prototype.Panicln = function(v) {
		var _r, _r$1, l, s, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; l = $f.l; s = $f.s; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		l = this;
		_r = fmt.Sprintln(v); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		s = _r;
		_r$1 = l.Output(2, s); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$1;
		$panic(new $String(s));
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Logger.ptr.prototype.Panicln }; } $f._r = _r; $f._r$1 = _r$1; $f.l = l; $f.s = s; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Logger.prototype.Panicln = function(v) { return this.$val.Panicln(v); };
	Logger.ptr.prototype.Flags = function() {
		var l, $deferred;
		/* */ var $err = null; try { $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		l = this;
		l.mu.Lock();
		$deferred.push([$methodVal(l.mu, "Unlock"), []]);
		return l.flag;
		/* */ } catch(err) { $err = err; return 0; } finally { $callDeferred($deferred, $err); }
	};
	Logger.prototype.Flags = function() { return this.$val.Flags(); };
	Logger.ptr.prototype.SetFlags = function(flag) {
		var flag, l, $deferred;
		/* */ var $err = null; try { $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		l = this;
		l.mu.Lock();
		$deferred.push([$methodVal(l.mu, "Unlock"), []]);
		l.flag = flag;
		/* */ } catch(err) { $err = err; } finally { $callDeferred($deferred, $err); }
	};
	Logger.prototype.SetFlags = function(flag) { return this.$val.SetFlags(flag); };
	Logger.ptr.prototype.Prefix = function() {
		var l, $deferred;
		/* */ var $err = null; try { $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		l = this;
		l.mu.Lock();
		$deferred.push([$methodVal(l.mu, "Unlock"), []]);
		return l.prefix;
		/* */ } catch(err) { $err = err; return ""; } finally { $callDeferred($deferred, $err); }
	};
	Logger.prototype.Prefix = function() { return this.$val.Prefix(); };
	Logger.ptr.prototype.SetPrefix = function(prefix) {
		var l, prefix, $deferred;
		/* */ var $err = null; try { $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		l = this;
		l.mu.Lock();
		$deferred.push([$methodVal(l.mu, "Unlock"), []]);
		l.prefix = prefix;
		/* */ } catch(err) { $err = err; } finally { $callDeferred($deferred, $err); }
	};
	Logger.prototype.SetPrefix = function(prefix) { return this.$val.SetPrefix(prefix); };
	Println = function(v) {
		var _arg, _r, _r$1, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _arg = $f._arg; _r = $f._r; _r$1 = $f._r$1; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = fmt.Sprintln(v); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_arg = _r;
		_r$1 = std.Output(2, _arg); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$1;
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Println }; } $f._arg = _arg; $f._r = _r; $f._r$1 = _r$1; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Println = Println;
	Fatalf = function(format, v) {
		var _arg, _r, _r$1, format, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _arg = $f._arg; _r = $f._r; _r$1 = $f._r$1; format = $f.format; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = fmt.Sprintf(format, v); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_arg = _r;
		_r$1 = std.Output(2, _arg); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$1;
		os.Exit(1);
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Fatalf }; } $f._arg = _arg; $f._r = _r; $f._r$1 = _r$1; $f.format = format; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Fatalf = Fatalf;
	ptrType$1.methods = [{prop: "SetOutput", name: "SetOutput", pkg: "", typ: $funcType([io.Writer], [], false)}, {prop: "formatHeader", name: "formatHeader", pkg: "log", typ: $funcType([ptrType, time.Time, $String, $Int], [], false)}, {prop: "Output", name: "Output", pkg: "", typ: $funcType([$Int, $String], [$error], false)}, {prop: "Printf", name: "Printf", pkg: "", typ: $funcType([$String, sliceType$1], [], true)}, {prop: "Print", name: "Print", pkg: "", typ: $funcType([sliceType$1], [], true)}, {prop: "Println", name: "Println", pkg: "", typ: $funcType([sliceType$1], [], true)}, {prop: "Fatal", name: "Fatal", pkg: "", typ: $funcType([sliceType$1], [], true)}, {prop: "Fatalf", name: "Fatalf", pkg: "", typ: $funcType([$String, sliceType$1], [], true)}, {prop: "Fatalln", name: "Fatalln", pkg: "", typ: $funcType([sliceType$1], [], true)}, {prop: "Panic", name: "Panic", pkg: "", typ: $funcType([sliceType$1], [], true)}, {prop: "Panicf", name: "Panicf", pkg: "", typ: $funcType([$String, sliceType$1], [], true)}, {prop: "Panicln", name: "Panicln", pkg: "", typ: $funcType([sliceType$1], [], true)}, {prop: "Flags", name: "Flags", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "SetFlags", name: "SetFlags", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "Prefix", name: "Prefix", pkg: "", typ: $funcType([], [$String], false)}, {prop: "SetPrefix", name: "SetPrefix", pkg: "", typ: $funcType([$String], [], false)}];
	Logger.init("log", [{prop: "mu", name: "mu", anonymous: false, exported: false, typ: nosync.Mutex, tag: ""}, {prop: "prefix", name: "prefix", anonymous: false, exported: false, typ: $String, tag: ""}, {prop: "flag", name: "flag", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "out", name: "out", anonymous: false, exported: false, typ: io.Writer, tag: ""}, {prop: "buf", name: "buf", anonymous: false, exported: false, typ: sliceType, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = fmt.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = nosync.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = io.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = os.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = runtime.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = time.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		std = New(os.Stderr, "", 3);
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["path/filepath"] = (function() {
	var $pkg = {}, $init, errors, os, runtime, sort, strings, utf8, lazybuf, sliceType$1, ptrType$1, Clean, FromSlash, Join, volumeNameLen, join;
	errors = $packages["errors"];
	os = $packages["os"];
	runtime = $packages["runtime"];
	sort = $packages["sort"];
	strings = $packages["strings"];
	utf8 = $packages["unicode/utf8"];
	lazybuf = $pkg.lazybuf = $newType(0, $kindStruct, "filepath.lazybuf", true, "path/filepath", false, function(path_, buf_, w_, volAndPath_, volLen_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.path = "";
			this.buf = sliceType$1.nil;
			this.w = 0;
			this.volAndPath = "";
			this.volLen = 0;
			return;
		}
		this.path = path_;
		this.buf = buf_;
		this.w = w_;
		this.volAndPath = volAndPath_;
		this.volLen = volLen_;
	});
	sliceType$1 = $sliceType($Uint8);
	ptrType$1 = $ptrType(lazybuf);
	lazybuf.ptr.prototype.index = function(i) {
		var b, i, x;
		b = this;
		if (!(b.buf === sliceType$1.nil)) {
			return (x = b.buf, ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i]));
		}
		return b.path.charCodeAt(i);
	};
	lazybuf.prototype.index = function(i) { return this.$val.index(i); };
	lazybuf.ptr.prototype.append = function(c) {
		var b, c, x, x$1;
		b = this;
		if (b.buf === sliceType$1.nil) {
			if (b.w < b.path.length && (b.path.charCodeAt(b.w) === c)) {
				b.w = b.w + (1) >> 0;
				return;
			}
			b.buf = $makeSlice(sliceType$1, b.path.length);
			$copyString(b.buf, $substring(b.path, 0, b.w));
		}
		(x = b.buf, x$1 = b.w, ((x$1 < 0 || x$1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + x$1] = c));
		b.w = b.w + (1) >> 0;
	};
	lazybuf.prototype.append = function(c) { return this.$val.append(c); };
	lazybuf.ptr.prototype.string = function() {
		var b;
		b = this;
		if (b.buf === sliceType$1.nil) {
			return $substring(b.volAndPath, 0, (b.volLen + b.w >> 0));
		}
		return $substring(b.volAndPath, 0, b.volLen) + ($bytesToString($subslice(b.buf, 0, b.w)));
	};
	lazybuf.prototype.string = function() { return this.$val.string(); };
	Clean = function(path) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, dotdot, n, originalPath, out, path, r, rooted, volLen;
		originalPath = path;
		volLen = volumeNameLen(path);
		path = $substring(path, volLen);
		if (path === "") {
			if (volLen > 1 && !((originalPath.charCodeAt(1) === 58))) {
				return FromSlash(originalPath);
			}
			return originalPath + ".";
		}
		rooted = os.IsPathSeparator(path.charCodeAt(0));
		n = path.length;
		out = new lazybuf.ptr(path, sliceType$1.nil, 0, originalPath, volLen);
		_tmp = 0;
		_tmp$1 = 0;
		r = _tmp;
		dotdot = _tmp$1;
		if (rooted) {
			out.append(47);
			_tmp$2 = 1;
			_tmp$3 = 1;
			r = _tmp$2;
			dotdot = _tmp$3;
		}
		while (true) {
			if (!(r < n)) { break; }
			if (os.IsPathSeparator(path.charCodeAt(r))) {
				r = r + (1) >> 0;
			} else if ((path.charCodeAt(r) === 46) && (((r + 1 >> 0) === n) || os.IsPathSeparator(path.charCodeAt((r + 1 >> 0))))) {
				r = r + (1) >> 0;
			} else if ((path.charCodeAt(r) === 46) && (path.charCodeAt((r + 1 >> 0)) === 46) && (((r + 2 >> 0) === n) || os.IsPathSeparator(path.charCodeAt((r + 2 >> 0))))) {
				r = r + (2) >> 0;
				if (out.w > dotdot) {
					out.w = out.w - (1) >> 0;
					while (true) {
						if (!(out.w > dotdot && !os.IsPathSeparator(out.index(out.w)))) { break; }
						out.w = out.w - (1) >> 0;
					}
				} else if (!rooted) {
					if (out.w > 0) {
						out.append(47);
					}
					out.append(46);
					out.append(46);
					dotdot = out.w;
				}
			} else {
				if (rooted && !((out.w === 1)) || !rooted && !((out.w === 0))) {
					out.append(47);
				}
				while (true) {
					if (!(r < n && !os.IsPathSeparator(path.charCodeAt(r)))) { break; }
					out.append(path.charCodeAt(r));
					r = r + (1) >> 0;
				}
			}
		}
		if (out.w === 0) {
			out.append(46);
		}
		return FromSlash(out.string());
	};
	$pkg.Clean = Clean;
	FromSlash = function(path) {
		var path;
		if (true) {
			return path;
		}
		return strings.Replace(path, "/", "/", -1);
	};
	$pkg.FromSlash = FromSlash;
	Join = function(elem) {
		var elem;
		return join(elem);
	};
	$pkg.Join = Join;
	volumeNameLen = function(path) {
		var path;
		return 0;
	};
	join = function(elem) {
		var _i, _ref, e, elem, i;
		_ref = elem;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			e = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			if (!(e === "")) {
				return Clean(strings.Join($subslice(elem, i), "/"));
			}
			_i++;
		}
		return "";
	};
	ptrType$1.methods = [{prop: "index", name: "index", pkg: "path/filepath", typ: $funcType([$Int], [$Uint8], false)}, {prop: "append", name: "append", pkg: "path/filepath", typ: $funcType([$Uint8], [], false)}, {prop: "string", name: "string", pkg: "path/filepath", typ: $funcType([], [$String], false)}];
	lazybuf.init("path/filepath", [{prop: "path", name: "path", anonymous: false, exported: false, typ: $String, tag: ""}, {prop: "buf", name: "buf", anonymous: false, exported: false, typ: sliceType$1, tag: ""}, {prop: "w", name: "w", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "volAndPath", name: "volAndPath", anonymous: false, exported: false, typ: $String, tag: ""}, {prop: "volLen", name: "volLen", anonymous: false, exported: false, typ: $Int, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = errors.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = os.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = runtime.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = sort.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = strings.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = utf8.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$pkg.ErrBadPattern = errors.New("syntax error in pattern");
		$pkg.SkipDir = errors.New("skip this directory");
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["github.com/anaseto/boohu"] = (function() {
	var $pkg = {}, $init, bytes, heap, rand, base64, gob, errors, fmt, js, log, big, filepath, sort, strings, time, unicode, utf8, aptitude, node, nodeMap, priorityQueue, dmgType, Dijkstrer, uicolor, uiMode, keyAction, runeKeyAction, examineData, explosionStyle, configAction, linestyle, rodSlice, consumableSlice, statusSlice, monsSlice, dungeon, cell, terrain, room, roomSlice, vegetation, config, event, iEvent, eventQueue, simpleAction, simpleEvent, monsterAction, monsterEvent, cloudAction, cloudEvent, game, Renderer, consumable, potion, projectile, collectable, collectData, equipable, armour, weapon, shield, equipableData, UICell, jsInput, termui, logStyle, logEntry, raynode, rayMap, monsterState, monsterStatus, monsterKind, monsterData, monsterBand, monsInterval, monsterBandData, monster, dungeonPath, playerPath, noisePath, normalPath, autoexplorePath, monPath, posCost, posSlice, player, position, direction, rod, rodProps, cloud, status, Targeter, examiner, chooser, wallChooser, sliceType, arrayType, sliceType$1, sliceType$2, sliceType$3, sliceType$4, ptrType, ptrType$1, sliceType$5, ptrType$2, ptrType$3, arrayType$1, ptrType$4, sliceType$6, sliceType$7, sliceType$8, arrayType$2, arrayType$3, ptrType$5, sliceType$9, ptrType$6, ptrType$7, sliceType$10, sliceType$11, ptrType$8, ptrType$9, sliceType$12, sliceType$13, ptrType$10, ptrType$11, sliceType$14, ptrType$12, ptrType$13, ptrType$14, sliceType$15, ptrType$15, funcType, ptrType$16, sliceType$16, mapType, funcType$1, mapType$1, ptrType$17, mapType$2, mapType$3, mapType$4, mapType$5, mapType$6, mapType$7, mapType$8, mapType$9, mapType$10, mapType$11, ptrType$18, ptrType$19, mapType$12, mapType$13, mapType$14, ptrType$20, ptrType$21, ptrType$22, ptrType$23, ptrType$24, ptrType$25, mapType$15, mapType$16, mapType$17, mapType$18, ptrType$26, ptrType$27, nodeCache, configurableKeyActions, runeNormalKeyActions, runeTargetingKeyActions, menuActions, menuTargetActions, ch, wants, interrupt, monsDesc, init, AstarPath, Dijkstra, LinkColors, SolarizedPalette, FixedRuneKey, ApplyDefaultKeyBindings, InRuneSlice, roomDistance, nearRoom, nearestRoom, intersectsRoom, GenCaveRoomSize, init$1, main, init$2, KeyToDir, idxtopos, Abs, RandInt, Min, Max, Indefinite, formatText;
	bytes = $packages["bytes"];
	heap = $packages["container/heap"];
	rand = $packages["crypto/rand"];
	base64 = $packages["encoding/base64"];
	gob = $packages["encoding/gob"];
	errors = $packages["errors"];
	fmt = $packages["fmt"];
	js = $packages["github.com/gopherjs/gopherjs/js"];
	log = $packages["log"];
	big = $packages["math/big"];
	filepath = $packages["path/filepath"];
	sort = $packages["sort"];
	strings = $packages["strings"];
	time = $packages["time"];
	unicode = $packages["unicode"];
	utf8 = $packages["unicode/utf8"];
	aptitude = $pkg.aptitude = $newType(4, $kindInt, "main.aptitude", true, "github.com/anaseto/boohu", false, null);
	node = $pkg.node = $newType(0, $kindStruct, "main.node", true, "github.com/anaseto/boohu", false, function(Pos_, Cost_, Rank_, Parent_, Open_, Closed_, Index_, Num_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Pos = new position.ptr(0, 0);
			this.Cost = 0;
			this.Rank = 0;
			this.Parent = ptrType$1.nil;
			this.Open = false;
			this.Closed = false;
			this.Index = 0;
			this.Num = 0;
			return;
		}
		this.Pos = Pos_;
		this.Cost = Cost_;
		this.Rank = Rank_;
		this.Parent = Parent_;
		this.Open = Open_;
		this.Closed = Closed_;
		this.Index = Index_;
		this.Num = Num_;
	});
	nodeMap = $pkg.nodeMap = $newType(4, $kindMap, "main.nodeMap", true, "github.com/anaseto/boohu", false, null);
	priorityQueue = $pkg.priorityQueue = $newType(12, $kindSlice, "main.priorityQueue", true, "github.com/anaseto/boohu", false, null);
	dmgType = $pkg.dmgType = $newType(4, $kindInt, "main.dmgType", true, "github.com/anaseto/boohu", false, null);
	Dijkstrer = $pkg.Dijkstrer = $newType(8, $kindInterface, "main.Dijkstrer", true, "github.com/anaseto/boohu", true, null);
	uicolor = $pkg.uicolor = $newType(4, $kindInt, "main.uicolor", true, "github.com/anaseto/boohu", false, null);
	uiMode = $pkg.uiMode = $newType(4, $kindInt, "main.uiMode", true, "github.com/anaseto/boohu", false, null);
	keyAction = $pkg.keyAction = $newType(4, $kindInt, "main.keyAction", true, "github.com/anaseto/boohu", false, null);
	runeKeyAction = $pkg.runeKeyAction = $newType(0, $kindStruct, "main.runeKeyAction", true, "github.com/anaseto/boohu", false, function(r_, k_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.r = 0;
			this.k = 0;
			return;
		}
		this.r = r_;
		this.k = k_;
	});
	examineData = $pkg.examineData = $newType(0, $kindStruct, "main.examineData", true, "github.com/anaseto/boohu", false, function(npos_, nmonster_, objects_, nobject_, sortedStairs_, stairIndex_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.npos = new position.ptr(0, 0);
			this.nmonster = 0;
			this.objects = sliceType$5.nil;
			this.nobject = 0;
			this.sortedStairs = sliceType$5.nil;
			this.stairIndex = 0;
			return;
		}
		this.npos = npos_;
		this.nmonster = nmonster_;
		this.objects = objects_;
		this.nobject = nobject_;
		this.sortedStairs = sortedStairs_;
		this.stairIndex = stairIndex_;
	});
	explosionStyle = $pkg.explosionStyle = $newType(4, $kindInt, "main.explosionStyle", true, "github.com/anaseto/boohu", false, null);
	configAction = $pkg.configAction = $newType(4, $kindInt, "main.configAction", true, "github.com/anaseto/boohu", false, null);
	linestyle = $pkg.linestyle = $newType(4, $kindInt, "main.linestyle", true, "github.com/anaseto/boohu", false, null);
	rodSlice = $pkg.rodSlice = $newType(12, $kindSlice, "main.rodSlice", true, "github.com/anaseto/boohu", false, null);
	consumableSlice = $pkg.consumableSlice = $newType(12, $kindSlice, "main.consumableSlice", true, "github.com/anaseto/boohu", false, null);
	statusSlice = $pkg.statusSlice = $newType(12, $kindSlice, "main.statusSlice", true, "github.com/anaseto/boohu", false, null);
	monsSlice = $pkg.monsSlice = $newType(12, $kindSlice, "main.monsSlice", true, "github.com/anaseto/boohu", false, null);
	dungeon = $pkg.dungeon = $newType(0, $kindStruct, "main.dungeon", true, "github.com/anaseto/boohu", false, function(Cells_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Cells = sliceType$10.nil;
			return;
		}
		this.Cells = Cells_;
	});
	cell = $pkg.cell = $newType(0, $kindStruct, "main.cell", true, "github.com/anaseto/boohu", false, function(T_, Explored_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.T = 0;
			this.Explored = false;
			return;
		}
		this.T = T_;
		this.Explored = Explored_;
	});
	terrain = $pkg.terrain = $newType(4, $kindInt, "main.terrain", true, "github.com/anaseto/boohu", false, null);
	room = $pkg.room = $newType(0, $kindStruct, "main.room", true, "github.com/anaseto/boohu", false, function(pos_, w_, h_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.pos = new position.ptr(0, 0);
			this.w = 0;
			this.h = 0;
			return;
		}
		this.pos = pos_;
		this.w = w_;
		this.h = h_;
	});
	roomSlice = $pkg.roomSlice = $newType(12, $kindSlice, "main.roomSlice", true, "github.com/anaseto/boohu", false, null);
	vegetation = $pkg.vegetation = $newType(4, $kindInt, "main.vegetation", true, "github.com/anaseto/boohu", false, null);
	config = $pkg.config = $newType(0, $kindStruct, "main.config", true, "github.com/anaseto/boohu", false, function(RuneNormalModeKeys_, RuneTargetModeKeys_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.RuneNormalModeKeys = false;
			this.RuneTargetModeKeys = false;
			return;
		}
		this.RuneNormalModeKeys = RuneNormalModeKeys_;
		this.RuneTargetModeKeys = RuneTargetModeKeys_;
	});
	event = $pkg.event = $newType(8, $kindInterface, "main.event", true, "github.com/anaseto/boohu", false, null);
	iEvent = $pkg.iEvent = $newType(0, $kindStruct, "main.iEvent", true, "github.com/anaseto/boohu", false, function(Event_, Index_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Event = $ifaceNil;
			this.Index = 0;
			return;
		}
		this.Event = Event_;
		this.Index = Index_;
	});
	eventQueue = $pkg.eventQueue = $newType(12, $kindSlice, "main.eventQueue", true, "github.com/anaseto/boohu", false, null);
	simpleAction = $pkg.simpleAction = $newType(4, $kindInt, "main.simpleAction", true, "github.com/anaseto/boohu", false, null);
	simpleEvent = $pkg.simpleEvent = $newType(0, $kindStruct, "main.simpleEvent", true, "github.com/anaseto/boohu", false, function(ERank_, EAction_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.ERank = 0;
			this.EAction = 0;
			return;
		}
		this.ERank = ERank_;
		this.EAction = EAction_;
	});
	monsterAction = $pkg.monsterAction = $newType(4, $kindInt, "main.monsterAction", true, "github.com/anaseto/boohu", false, null);
	monsterEvent = $pkg.monsterEvent = $newType(0, $kindStruct, "main.monsterEvent", true, "github.com/anaseto/boohu", false, function(ERank_, NMons_, EAction_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.ERank = 0;
			this.NMons = 0;
			this.EAction = 0;
			return;
		}
		this.ERank = ERank_;
		this.NMons = NMons_;
		this.EAction = EAction_;
	});
	cloudAction = $pkg.cloudAction = $newType(4, $kindInt, "main.cloudAction", true, "github.com/anaseto/boohu", false, null);
	cloudEvent = $pkg.cloudEvent = $newType(0, $kindStruct, "main.cloudEvent", true, "github.com/anaseto/boohu", false, function(ERank_, Pos_, EAction_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.ERank = 0;
			this.Pos = new position.ptr(0, 0);
			this.EAction = 0;
			return;
		}
		this.ERank = ERank_;
		this.Pos = Pos_;
		this.EAction = EAction_;
	});
	game = $pkg.game = $newType(0, $kindStruct, "main.game", true, "github.com/anaseto/boohu", false, function(Dungeon_, Player_, Monsters_, Bands_, Events_, Ev_, Highlight_, Collectables_, CollectableScore_, Equipables_, Rods_, Stairs_, Clouds_, Fungus_, Doors_, TemporalWalls_, GeneratedBands_, GeneratedEquipables_, GeneratedRods_, FoundEquipables_, Simellas_, UnknownDig_, UnknownBurn_, Resting_, Autoexploring_, DijkstraMapRebuild_, AutoTarget_, AutoDir_, AutoHalt_, AutoNext_, ExclusionsMap_, Quit_, ui_, Depth_, Wizard_, Log_, LogIndex_, LogNextTick_, InfoEntry_, Story_, Turn_, EventIndex_, Killed_, KilledMons_, Scumming_, Noise_, Targeting_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Dungeon = ptrType$7.nil;
			this.Player = ptrType$8.nil;
			this.Monsters = sliceType$12.nil;
			this.Bands = sliceType$13.nil;
			this.Events = ptrType$10.nil;
			this.Ev = $ifaceNil;
			this.Highlight = false;
			this.Collectables = false;
			this.CollectableScore = 0;
			this.Equipables = false;
			this.Rods = false;
			this.Stairs = false;
			this.Clouds = false;
			this.Fungus = false;
			this.Doors = false;
			this.TemporalWalls = false;
			this.GeneratedBands = false;
			this.GeneratedEquipables = false;
			this.GeneratedRods = false;
			this.FoundEquipables = false;
			this.Simellas = false;
			this.UnknownDig = false;
			this.UnknownBurn = false;
			this.Resting = false;
			this.Autoexploring = false;
			this.DijkstraMapRebuild = false;
			this.AutoTarget = ptrType$1.nil;
			this.AutoDir = ptrType$11.nil;
			this.AutoHalt = false;
			this.AutoNext = false;
			this.ExclusionsMap = false;
			this.Quit = false;
			this.ui = $ifaceNil;
			this.Depth = 0;
			this.Wizard = false;
			this.Log = sliceType$14.nil;
			this.LogIndex = 0;
			this.LogNextTick = 0;
			this.InfoEntry = "";
			this.Story = sliceType$3.nil;
			this.Turn = 0;
			this.EventIndex = 0;
			this.Killed = 0;
			this.KilledMons = false;
			this.Scumming = 0;
			this.Noise = false;
			this.Targeting = ptrType$1.nil;
			return;
		}
		this.Dungeon = Dungeon_;
		this.Player = Player_;
		this.Monsters = Monsters_;
		this.Bands = Bands_;
		this.Events = Events_;
		this.Ev = Ev_;
		this.Highlight = Highlight_;
		this.Collectables = Collectables_;
		this.CollectableScore = CollectableScore_;
		this.Equipables = Equipables_;
		this.Rods = Rods_;
		this.Stairs = Stairs_;
		this.Clouds = Clouds_;
		this.Fungus = Fungus_;
		this.Doors = Doors_;
		this.TemporalWalls = TemporalWalls_;
		this.GeneratedBands = GeneratedBands_;
		this.GeneratedEquipables = GeneratedEquipables_;
		this.GeneratedRods = GeneratedRods_;
		this.FoundEquipables = FoundEquipables_;
		this.Simellas = Simellas_;
		this.UnknownDig = UnknownDig_;
		this.UnknownBurn = UnknownBurn_;
		this.Resting = Resting_;
		this.Autoexploring = Autoexploring_;
		this.DijkstraMapRebuild = DijkstraMapRebuild_;
		this.AutoTarget = AutoTarget_;
		this.AutoDir = AutoDir_;
		this.AutoHalt = AutoHalt_;
		this.AutoNext = AutoNext_;
		this.ExclusionsMap = ExclusionsMap_;
		this.Quit = Quit_;
		this.ui = ui_;
		this.Depth = Depth_;
		this.Wizard = Wizard_;
		this.Log = Log_;
		this.LogIndex = LogIndex_;
		this.LogNextTick = LogNextTick_;
		this.InfoEntry = InfoEntry_;
		this.Story = Story_;
		this.Turn = Turn_;
		this.EventIndex = EventIndex_;
		this.Killed = Killed_;
		this.KilledMons = KilledMons_;
		this.Scumming = Scumming_;
		this.Noise = Noise_;
		this.Targeting = Targeting_;
	});
	Renderer = $pkg.Renderer = $newType(8, $kindInterface, "main.Renderer", true, "github.com/anaseto/boohu", true, null);
	consumable = $pkg.consumable = $newType(8, $kindInterface, "main.consumable", true, "github.com/anaseto/boohu", false, null);
	potion = $pkg.potion = $newType(4, $kindInt, "main.potion", true, "github.com/anaseto/boohu", false, null);
	projectile = $pkg.projectile = $newType(4, $kindInt, "main.projectile", true, "github.com/anaseto/boohu", false, null);
	collectable = $pkg.collectable = $newType(0, $kindStruct, "main.collectable", true, "github.com/anaseto/boohu", false, function(Consumable_, Quantity_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Consumable = $ifaceNil;
			this.Quantity = 0;
			return;
		}
		this.Consumable = Consumable_;
		this.Quantity = Quantity_;
	});
	collectData = $pkg.collectData = $newType(0, $kindStruct, "main.collectData", true, "github.com/anaseto/boohu", false, function(rarity_, quantity_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.rarity = 0;
			this.quantity = 0;
			return;
		}
		this.rarity = rarity_;
		this.quantity = quantity_;
	});
	equipable = $pkg.equipable = $newType(8, $kindInterface, "main.equipable", true, "github.com/anaseto/boohu", false, null);
	armour = $pkg.armour = $newType(4, $kindInt, "main.armour", true, "github.com/anaseto/boohu", false, null);
	weapon = $pkg.weapon = $newType(4, $kindInt, "main.weapon", true, "github.com/anaseto/boohu", false, null);
	shield = $pkg.shield = $newType(4, $kindInt, "main.shield", true, "github.com/anaseto/boohu", false, null);
	equipableData = $pkg.equipableData = $newType(0, $kindStruct, "main.equipableData", true, "github.com/anaseto/boohu", false, function(rarity_, minDepth_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.rarity = 0;
			this.minDepth = 0;
			return;
		}
		this.rarity = rarity_;
		this.minDepth = minDepth_;
	});
	UICell = $pkg.UICell = $newType(0, $kindStruct, "main.UICell", true, "github.com/anaseto/boohu", true, function(fg_, bg_, r_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.fg = 0;
			this.bg = 0;
			this.r = 0;
			return;
		}
		this.fg = fg_;
		this.bg = bg_;
		this.r = r_;
	});
	jsInput = $pkg.jsInput = $newType(0, $kindStruct, "main.jsInput", true, "github.com/anaseto/boohu", false, function(key_, mouse_, mouseX_, mouseY_, button_, interrupt_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.key = "";
			this.mouse = false;
			this.mouseX = 0;
			this.mouseY = 0;
			this.button = 0;
			this.interrupt = false;
			return;
		}
		this.key = key_;
		this.mouse = mouse_;
		this.mouseX = mouseX_;
		this.mouseY = mouseY_;
		this.button = button_;
		this.interrupt = interrupt_;
	});
	termui = $pkg.termui = $newType(0, $kindStruct, "main.termui", true, "github.com/anaseto/boohu", false, function(cells_, backBuffer_, cursor_, display_, cache_, ctx_, width_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.cells = sliceType$15.nil;
			this.backBuffer = sliceType$15.nil;
			this.cursor = new position.ptr(0, 0);
			this.display = null;
			this.cache = false;
			this.ctx = null;
			this.width = 0;
			return;
		}
		this.cells = cells_;
		this.backBuffer = backBuffer_;
		this.cursor = cursor_;
		this.display = display_;
		this.cache = cache_;
		this.ctx = ctx_;
		this.width = width_;
	});
	logStyle = $pkg.logStyle = $newType(4, $kindInt, "main.logStyle", true, "github.com/anaseto/boohu", false, null);
	logEntry = $pkg.logEntry = $newType(0, $kindStruct, "main.logEntry", true, "github.com/anaseto/boohu", false, function(Text_, Index_, Tick_, Style_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Text = "";
			this.Index = 0;
			this.Tick = false;
			this.Style = 0;
			return;
		}
		this.Text = Text_;
		this.Index = Index_;
		this.Tick = Tick_;
		this.Style = Style_;
	});
	raynode = $pkg.raynode = $newType(0, $kindStruct, "main.raynode", true, "github.com/anaseto/boohu", false, function(Cost_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Cost = 0;
			return;
		}
		this.Cost = Cost_;
	});
	rayMap = $pkg.rayMap = $newType(4, $kindMap, "main.rayMap", true, "github.com/anaseto/boohu", false, null);
	monsterState = $pkg.monsterState = $newType(4, $kindInt, "main.monsterState", true, "github.com/anaseto/boohu", false, null);
	monsterStatus = $pkg.monsterStatus = $newType(4, $kindInt, "main.monsterStatus", true, "github.com/anaseto/boohu", false, null);
	monsterKind = $pkg.monsterKind = $newType(4, $kindInt, "main.monsterKind", true, "github.com/anaseto/boohu", false, null);
	monsterData = $pkg.monsterData = $newType(0, $kindStruct, "main.monsterData", true, "github.com/anaseto/boohu", false, function(movementDelay_, baseAttack_, attackDelay_, maxHP_, accuracy_, armor_, evasion_, letter_, name_, dangerousness_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.movementDelay = 0;
			this.baseAttack = 0;
			this.attackDelay = 0;
			this.maxHP = 0;
			this.accuracy = 0;
			this.armor = 0;
			this.evasion = 0;
			this.letter = 0;
			this.name = "";
			this.dangerousness = 0;
			return;
		}
		this.movementDelay = movementDelay_;
		this.baseAttack = baseAttack_;
		this.attackDelay = attackDelay_;
		this.maxHP = maxHP_;
		this.accuracy = accuracy_;
		this.armor = armor_;
		this.evasion = evasion_;
		this.letter = letter_;
		this.name = name_;
		this.dangerousness = dangerousness_;
	});
	monsterBand = $pkg.monsterBand = $newType(4, $kindInt, "main.monsterBand", true, "github.com/anaseto/boohu", false, null);
	monsInterval = $pkg.monsInterval = $newType(0, $kindStruct, "main.monsInterval", true, "github.com/anaseto/boohu", false, function(min_, max_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.min = 0;
			this.max = 0;
			return;
		}
		this.min = min_;
		this.max = max_;
	});
	monsterBandData = $pkg.monsterBandData = $newType(0, $kindStruct, "main.monsterBandData", true, "github.com/anaseto/boohu", false, function(distribution_, rarity_, minDepth_, maxDepth_, band_, monster_, unique_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.distribution = false;
			this.rarity = 0;
			this.minDepth = 0;
			this.maxDepth = 0;
			this.band = false;
			this.monster = 0;
			this.unique = false;
			return;
		}
		this.distribution = distribution_;
		this.rarity = rarity_;
		this.minDepth = minDepth_;
		this.maxDepth = maxDepth_;
		this.band = band_;
		this.monster = monster_;
		this.unique = unique_;
	});
	monster = $pkg.monster = $newType(0, $kindStruct, "main.monster", true, "github.com/anaseto/boohu", false, function(Kind_, Band_, Attack_, Accuracy_, Armor_, Evasion_, HPmax_, HP_, Pos_, State_, Statuses_, Target_, Path_, Obstructing_, FireReady_, Seen_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Kind = 0;
			this.Band = 0;
			this.Attack = 0;
			this.Accuracy = 0;
			this.Armor = 0;
			this.Evasion = 0;
			this.HPmax = 0;
			this.HP = 0;
			this.Pos = new position.ptr(0, 0);
			this.State = 0;
			this.Statuses = false;
			this.Target = new position.ptr(0, 0);
			this.Path = sliceType$5.nil;
			this.Obstructing = false;
			this.FireReady = false;
			this.Seen = false;
			return;
		}
		this.Kind = Kind_;
		this.Band = Band_;
		this.Attack = Attack_;
		this.Accuracy = Accuracy_;
		this.Armor = Armor_;
		this.Evasion = Evasion_;
		this.HPmax = HPmax_;
		this.HP = HP_;
		this.Pos = Pos_;
		this.State = State_;
		this.Statuses = Statuses_;
		this.Target = Target_;
		this.Path = Path_;
		this.Obstructing = Obstructing_;
		this.FireReady = FireReady_;
		this.Seen = Seen_;
	});
	dungeonPath = $pkg.dungeonPath = $newType(0, $kindStruct, "main.dungeonPath", true, "github.com/anaseto/boohu", false, function(dungeon_, neighbors_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.dungeon = ptrType$7.nil;
			this.neighbors = arrayType$1.zero();
			return;
		}
		this.dungeon = dungeon_;
		this.neighbors = neighbors_;
	});
	playerPath = $pkg.playerPath = $newType(0, $kindStruct, "main.playerPath", true, "github.com/anaseto/boohu", false, function(game_, neighbors_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.game = ptrType$3.nil;
			this.neighbors = arrayType$1.zero();
			return;
		}
		this.game = game_;
		this.neighbors = neighbors_;
	});
	noisePath = $pkg.noisePath = $newType(0, $kindStruct, "main.noisePath", true, "github.com/anaseto/boohu", false, function(game_, neighbors_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.game = ptrType$3.nil;
			this.neighbors = arrayType$1.zero();
			return;
		}
		this.game = game_;
		this.neighbors = neighbors_;
	});
	normalPath = $pkg.normalPath = $newType(0, $kindStruct, "main.normalPath", true, "github.com/anaseto/boohu", false, function(game_, neighbors_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.game = ptrType$3.nil;
			this.neighbors = arrayType$1.zero();
			return;
		}
		this.game = game_;
		this.neighbors = neighbors_;
	});
	autoexplorePath = $pkg.autoexplorePath = $newType(0, $kindStruct, "main.autoexplorePath", true, "github.com/anaseto/boohu", false, function(game_, neighbors_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.game = ptrType$3.nil;
			this.neighbors = arrayType$1.zero();
			return;
		}
		this.game = game_;
		this.neighbors = neighbors_;
	});
	monPath = $pkg.monPath = $newType(0, $kindStruct, "main.monPath", true, "github.com/anaseto/boohu", false, function(game_, monster_, wall_, neighbors_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.game = ptrType$3.nil;
			this.monster = ptrType$9.nil;
			this.wall = false;
			this.neighbors = arrayType$1.zero();
			return;
		}
		this.game = game_;
		this.monster = monster_;
		this.wall = wall_;
		this.neighbors = neighbors_;
	});
	posCost = $pkg.posCost = $newType(0, $kindStruct, "main.posCost", true, "github.com/anaseto/boohu", false, function(pos_, cost_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.pos = new position.ptr(0, 0);
			this.cost = 0;
			return;
		}
		this.pos = pos_;
		this.cost = cost_;
	});
	posSlice = $pkg.posSlice = $newType(12, $kindSlice, "main.posSlice", true, "github.com/anaseto/boohu", false, null);
	player = $pkg.player = $newType(0, $kindStruct, "main.player", true, "github.com/anaseto/boohu", false, function(LOS_, Rays_, Pos_, HP_, MP_, Consumables_, Simellas_, Target_, Statuses_, Armour_, Weapon_, Shield_, Aptitudes_, Rods_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.LOS = false;
			this.Rays = false;
			this.Pos = new position.ptr(0, 0);
			this.HP = 0;
			this.MP = 0;
			this.Consumables = false;
			this.Simellas = 0;
			this.Target = new position.ptr(0, 0);
			this.Statuses = false;
			this.Armour = 0;
			this.Weapon = 0;
			this.Shield = 0;
			this.Aptitudes = false;
			this.Rods = false;
			return;
		}
		this.LOS = LOS_;
		this.Rays = Rays_;
		this.Pos = Pos_;
		this.HP = HP_;
		this.MP = MP_;
		this.Consumables = Consumables_;
		this.Simellas = Simellas_;
		this.Target = Target_;
		this.Statuses = Statuses_;
		this.Armour = Armour_;
		this.Weapon = Weapon_;
		this.Shield = Shield_;
		this.Aptitudes = Aptitudes_;
		this.Rods = Rods_;
	});
	position = $pkg.position = $newType(0, $kindStruct, "main.position", true, "github.com/anaseto/boohu", false, function(X_, Y_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.X = 0;
			this.Y = 0;
			return;
		}
		this.X = X_;
		this.Y = Y_;
	});
	direction = $pkg.direction = $newType(4, $kindInt, "main.direction", true, "github.com/anaseto/boohu", false, null);
	rod = $pkg.rod = $newType(4, $kindInt, "main.rod", true, "github.com/anaseto/boohu", false, null);
	rodProps = $pkg.rodProps = $newType(0, $kindStruct, "main.rodProps", true, "github.com/anaseto/boohu", false, function(Charge_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Charge = 0;
			return;
		}
		this.Charge = Charge_;
	});
	cloud = $pkg.cloud = $newType(4, $kindInt, "main.cloud", true, "github.com/anaseto/boohu", false, null);
	status = $pkg.status = $newType(4, $kindInt, "main.status", true, "github.com/anaseto/boohu", false, null);
	Targeter = $pkg.Targeter = $newType(8, $kindInterface, "main.Targeter", true, "github.com/anaseto/boohu", true, null);
	examiner = $pkg.examiner = $newType(0, $kindStruct, "main.examiner", true, "github.com/anaseto/boohu", false, function(done_, stairs_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.done = false;
			this.stairs = false;
			return;
		}
		this.done = done_;
		this.stairs = stairs_;
	});
	chooser = $pkg.chooser = $newType(0, $kindStruct, "main.chooser", true, "github.com/anaseto/boohu", false, function(done_, area_, minDist_, needsFreeWay_, free_, flammable_, wall_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.done = false;
			this.area = false;
			this.minDist = false;
			this.needsFreeWay = false;
			this.free = false;
			this.flammable = false;
			this.wall = false;
			return;
		}
		this.done = done_;
		this.area = area_;
		this.minDist = minDist_;
		this.needsFreeWay = needsFreeWay_;
		this.free = free_;
		this.flammable = flammable_;
		this.wall = wall_;
	});
	wallChooser = $pkg.wallChooser = $newType(0, $kindStruct, "main.wallChooser", true, "github.com/anaseto/boohu", false, function(done_, minDist_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.done = false;
			this.minDist = false;
			return;
		}
		this.done = done_;
		this.minDist = minDist_;
	});
	sliceType = $sliceType(node);
	arrayType = $arrayType($Int, 1659);
	sliceType$1 = $sliceType(keyAction);
	sliceType$2 = $sliceType(monsterData);
	sliceType$3 = $sliceType($String);
	sliceType$4 = $sliceType(monsterBandData);
	ptrType = $ptrType(node);
	ptrType$1 = $ptrType(position);
	sliceType$5 = $sliceType(position);
	ptrType$2 = $ptrType(priorityQueue);
	ptrType$3 = $ptrType(game);
	arrayType$1 = $arrayType(position, 8);
	ptrType$4 = $ptrType(collectable);
	sliceType$6 = $sliceType($Int);
	sliceType$7 = $sliceType($emptyInterface);
	sliceType$8 = $sliceType($Uint8);
	arrayType$2 = $arrayType($Uint8, 64);
	arrayType$3 = $arrayType($Bool, 1659);
	ptrType$5 = $ptrType(examiner);
	sliceType$9 = $sliceType($Int32);
	ptrType$6 = $ptrType(rodProps);
	ptrType$7 = $ptrType(dungeon);
	sliceType$10 = $sliceType(cell);
	sliceType$11 = $sliceType(room);
	ptrType$8 = $ptrType(player);
	ptrType$9 = $ptrType(monster);
	sliceType$12 = $sliceType(ptrType$9);
	sliceType$13 = $sliceType(monsterBand);
	ptrType$10 = $ptrType(eventQueue);
	ptrType$11 = $ptrType(direction);
	sliceType$14 = $sliceType(logEntry);
	ptrType$12 = $ptrType(config);
	ptrType$13 = $ptrType(monsterEvent);
	ptrType$14 = $ptrType(cloudEvent);
	sliceType$15 = $sliceType(UICell);
	ptrType$15 = $ptrType(js.Object);
	funcType = $funcType([ptrType$15], [], false);
	ptrType$16 = $ptrType(raynode);
	sliceType$16 = $sliceType(monsterKind);
	mapType = $mapType(position, $Bool);
	funcType$1 = $funcType([position], [$Bool], false);
	mapType$1 = $mapType($Int32, keyAction);
	ptrType$17 = $ptrType(simpleEvent);
	mapType$2 = $mapType(position, vegetation);
	mapType$3 = $mapType(position, ptrType$4);
	mapType$4 = $mapType(position, equipable);
	mapType$5 = $mapType(position, rod);
	mapType$6 = $mapType(position, cloud);
	mapType$7 = $mapType(monsterBand, $Int);
	mapType$8 = $mapType(equipable, $Bool);
	mapType$9 = $mapType(rod, $Bool);
	mapType$10 = $mapType(position, $Int);
	mapType$11 = $mapType(monsterKind, $Int);
	ptrType$18 = $ptrType(examineData);
	ptrType$19 = $ptrType(termui);
	mapType$12 = $mapType(UICell, ptrType$15);
	mapType$13 = $mapType(monsterKind, monsInterval);
	mapType$14 = $mapType(monsterStatus, $Int);
	ptrType$20 = $ptrType(dungeonPath);
	ptrType$21 = $ptrType(playerPath);
	ptrType$22 = $ptrType(noisePath);
	ptrType$23 = $ptrType(normalPath);
	ptrType$24 = $ptrType(autoexplorePath);
	ptrType$25 = $ptrType(monPath);
	mapType$15 = $mapType(consumable, $Int);
	mapType$16 = $mapType(status, $Int);
	mapType$17 = $mapType(aptitude, $Bool);
	mapType$18 = $mapType(rod, ptrType$6);
	ptrType$26 = $ptrType(chooser);
	ptrType$27 = $ptrType(wallChooser);
	aptitude.prototype.String = function() {
		var _1, ap, text;
		ap = this.$val;
		text = "";
		_1 = ap;
		if (_1 === (0)) {
			text = "You are unusually accurate, specially for ranged attacks.";
		} else if (_1 === (1)) {
			text = "You are agile.";
		} else if (_1 === (2)) {
			text = "You move fast.";
		} else if (_1 === (3)) {
			text = "You are healthy.";
		} else if (_1 === (4)) {
			text = "You move stealthily.";
		} else if (_1 === (5)) {
			text = "You are covered by scales.";
		} else if (_1 === (10)) {
			text = "You are strong.";
		} else if (_1 === (7)) {
			text = "You have big magic reserves.";
		} else if (_1 === (6)) {
			text = "The shadows follow you.";
		} else if (_1 === (8)) {
			text = "You occasionally release a confusing gas when hurt.";
		} else if (_1 === (9)) {
			text = "You occasionally get energic and smoke clouds when hurt.";
		}
		return text;
	};
	$ptrType(aptitude).prototype.String = function() { return new aptitude(this.$get()).String(); };
	game.ptr.prototype.RandomApt = function() {
		var _entry, _r, apt, count, g, max, r, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _entry = $f._entry; _r = $f._r; apt = $f.apt; count = $f.count; g = $f.g; max = $f.max; r = $f.r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		g = this;
		max = 10;
		count = 0;
		apt = 0;
		/* while (true) { */ case 1:
			count = count + (1) >> 0;
			if (count > 1000) {
				/* break; */ $s = 2; continue;
			}
			_r = RandInt(max + 1 >> 0); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			r = _r;
			apt = ((r >> 0));
			if ((_entry = g.Player.Aptitudes[aptitude.keyFor(apt)], _entry !== undefined ? _entry.v : false)) {
				/* continue; */ $s = 1; continue;
			}
			$s = -1; return [apt, true];
		/* } */ $s = 1; continue; case 2:
		$s = -1; return [apt, false];
		/* */ } return; } if ($f === undefined) { $f = { $blk: game.ptr.prototype.RandomApt }; } $f._entry = _entry; $f._r = _r; $f.apt = apt; $f.count = count; $f.g = g; $f.max = max; $f.r = r; $f.$s = $s; $f.$r = $r; return $f;
	};
	game.prototype.RandomApt = function() { return this.$val.RandomApt(); };
	game.ptr.prototype.ApplyAptitude = function(ap) {
		var _entry, _key, ap, g;
		g = this;
		if ((_entry = g.Player.Aptitudes[aptitude.keyFor(ap)], _entry !== undefined ? _entry.v : false)) {
			g.PrintStyled("Hm\xE2\x80\xA6 You already have that aptitude. " + new aptitude(ap).String(), 6);
			return;
		}
		_key = ap; (g.Player.Aptitudes || $throwRuntimeError("assignment to entry in nil map"))[aptitude.keyFor(_key)] = { k: _key, v: true };
		g.PrintStyled("You feel different. " + new aptitude(ap).String(), 4);
	};
	game.prototype.ApplyAptitude = function(ap) { return this.$val.ApplyAptitude(ap); };
	init = function() {
		nodeCache = $makeSlice(sliceType, 0, 1659);
	};
	nodeMap.prototype.get = function(p) {
		var _entry, _key, _tuple, n, nm, ok, p, x;
		nm = this.$val;
		_tuple = (_entry = nm[position.keyFor(p)], _entry !== undefined ? [_entry.v, true] : [ptrType.nil, false]);
		n = _tuple[0];
		ok = _tuple[1];
		if (!ok) {
			nodeCache = $append(nodeCache, new node.ptr($clone(p, position), 0, 0, ptrType$1.nil, false, false, 0, 0));
			n = (x = nodeCache.$length - 1 >> 0, ((x < 0 || x >= nodeCache.$length) ? ($throwRuntimeError("index out of range"), undefined) : nodeCache.$array[nodeCache.$offset + x]));
			_key = $clone(p, position); (nm || $throwRuntimeError("assignment to entry in nil map"))[position.keyFor(_key)] = { k: _key, v: n };
		}
		return n;
	};
	$ptrType(nodeMap).prototype.get = function(p) { return new nodeMap(this.$get()).get(p); };
	AstarPath = function(ast, from, to) {
		var _entry, _i, _r, _r$1, _r$2, _r$3, _r$4, _ref, _tmp, _tmp$1, _tmp$2, ast, cost, curr, current, found, from, fromNode, length, neighbor, neighborNode, nm, nq, num, p, path, to, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _entry = $f._entry; _i = $f._i; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _ref = $f._ref; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; ast = $f.ast; cost = $f.cost; curr = $f.curr; current = $f.current; found = $f.found; from = $f.from; fromNode = $f.fromNode; length = $f.length; neighbor = $f.neighbor; neighborNode = $f.neighborNode; nm = $f.nm; nq = $f.nq; num = $f.num; p = $f.p; path = $f.path; to = $f.to; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		path = sliceType$5.nil;
		length = 0;
		found = false;
		nodeCache = $subslice(nodeCache, 0, 0);
		nm = $makeMap(position.keyFor, []);
		nq = $newDataPointer(new priorityQueue([]), ptrType$2);
		$r = heap.Init(nq); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		fromNode = new nodeMap(nm).get($clone(from, position));
		fromNode.Open = true;
		num = 0;
		fromNode.Num = num;
		$r = heap.Push(nq, fromNode); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* while (true) { */ case 3:
			if (nq.Len() === 0) {
				$s = -1; return [path, length, found];
			}
			_r = heap.Pop(nq); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			current = $assertType(_r, ptrType);
			current.Open = false;
			current.Closed = true;
			if ($equal(current.Pos, to, position)) {
				p = new sliceType$5([]);
				curr = current;
				while (true) {
					p = $append(p, curr.Pos);
					if (curr.Parent === ptrType$1.nil) {
						break;
					}
					curr = (_entry = nm[position.keyFor(curr.Parent)], _entry !== undefined ? _entry.v : ptrType.nil);
				}
				_tmp = p;
				_tmp$1 = current.Cost;
				_tmp$2 = true;
				path = _tmp;
				length = _tmp$1;
				found = _tmp$2;
				$s = -1; return [path, length, found];
			}
			_r$1 = ast.Neighbors($clone(current.Pos, position)); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_ref = _r$1;
			_i = 0;
			/* while (true) { */ case 7:
				/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 8; continue; }
				neighbor = $clone(((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]), position);
				_r$2 = ast.Cost($clone(current.Pos, position), $clone(neighbor, position)); /* */ $s = 9; case 9: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				cost = current.Cost + _r$2 >> 0;
				neighborNode = new nodeMap(nm).get($clone(neighbor, position));
				/* */ if (cost < neighborNode.Cost) { $s = 10; continue; }
				/* */ $s = 11; continue;
				/* if (cost < neighborNode.Cost) { */ case 10:
					/* */ if (neighborNode.Open) { $s = 12; continue; }
					/* */ $s = 13; continue;
					/* if (neighborNode.Open) { */ case 12:
						_r$3 = heap.Remove(nq, neighborNode.Index); /* */ $s = 14; case 14: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
						_r$3;
					/* } */ case 13:
					neighborNode.Open = false;
					neighborNode.Closed = false;
				/* } */ case 11:
				/* */ if (!neighborNode.Open && !neighborNode.Closed) { $s = 15; continue; }
				/* */ $s = 16; continue;
				/* if (!neighborNode.Open && !neighborNode.Closed) { */ case 15:
					neighborNode.Cost = cost;
					neighborNode.Open = true;
					_r$4 = ast.Estimation($clone(neighbor, position), $clone(to, position)); /* */ $s = 17; case 17: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
					neighborNode.Rank = cost + _r$4 >> 0;
					neighborNode.Parent = current.Pos;
					num = num + (1) >> 0;
					neighborNode.Num = num;
					$r = heap.Push(nq, neighborNode); /* */ $s = 18; case 18: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 16:
				_i++;
			/* } */ $s = 7; continue; case 8:
		/* } */ $s = 3; continue; case 4:
		$s = -1; return [path, length, found];
		/* */ } return; } if ($f === undefined) { $f = { $blk: AstarPath }; } $f._entry = _entry; $f._i = _i; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._ref = _ref; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f.ast = ast; $f.cost = cost; $f.curr = curr; $f.current = current; $f.found = found; $f.from = from; $f.fromNode = fromNode; $f.length = length; $f.neighbor = neighbor; $f.neighborNode = neighborNode; $f.nm = nm; $f.nq = nq; $f.num = num; $f.p = p; $f.path = path; $f.to = to; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.AstarPath = AstarPath;
	priorityQueue.prototype.Len = function() {
		var pq;
		pq = this;
		return pq.$length;
	};
	$ptrType(priorityQueue).prototype.Len = function() { return this.$get().Len(); };
	priorityQueue.prototype.Less = function(i, j) {
		var i, j, pq;
		pq = this;
		return ((i < 0 || i >= pq.$length) ? ($throwRuntimeError("index out of range"), undefined) : pq.$array[pq.$offset + i]).Rank < ((j < 0 || j >= pq.$length) ? ($throwRuntimeError("index out of range"), undefined) : pq.$array[pq.$offset + j]).Rank || (((i < 0 || i >= pq.$length) ? ($throwRuntimeError("index out of range"), undefined) : pq.$array[pq.$offset + i]).Rank === ((j < 0 || j >= pq.$length) ? ($throwRuntimeError("index out of range"), undefined) : pq.$array[pq.$offset + j]).Rank) && ((i < 0 || i >= pq.$length) ? ($throwRuntimeError("index out of range"), undefined) : pq.$array[pq.$offset + i]).Num < ((j < 0 || j >= pq.$length) ? ($throwRuntimeError("index out of range"), undefined) : pq.$array[pq.$offset + j]).Num;
	};
	$ptrType(priorityQueue).prototype.Less = function(i, j) { return this.$get().Less(i, j); };
	priorityQueue.prototype.Swap = function(i, j) {
		var _tmp, _tmp$1, i, j, pq;
		pq = this;
		_tmp = ((j < 0 || j >= pq.$length) ? ($throwRuntimeError("index out of range"), undefined) : pq.$array[pq.$offset + j]);
		_tmp$1 = ((i < 0 || i >= pq.$length) ? ($throwRuntimeError("index out of range"), undefined) : pq.$array[pq.$offset + i]);
		((i < 0 || i >= pq.$length) ? ($throwRuntimeError("index out of range"), undefined) : pq.$array[pq.$offset + i] = _tmp);
		((j < 0 || j >= pq.$length) ? ($throwRuntimeError("index out of range"), undefined) : pq.$array[pq.$offset + j] = _tmp$1);
		((i < 0 || i >= pq.$length) ? ($throwRuntimeError("index out of range"), undefined) : pq.$array[pq.$offset + i]).Index = i;
		((j < 0 || j >= pq.$length) ? ($throwRuntimeError("index out of range"), undefined) : pq.$array[pq.$offset + j]).Index = j;
	};
	$ptrType(priorityQueue).prototype.Swap = function(i, j) { return this.$get().Swap(i, j); };
	$ptrType(priorityQueue).prototype.Push = function(x) {
		var n, no, pq, x;
		pq = this;
		n = pq.$get().$length;
		no = $assertType(x, ptrType);
		no.Index = n;
		pq.$set($append(pq.$get(), no));
	};
	$ptrType(priorityQueue).prototype.Pop = function() {
		var n, no, old, pq, x;
		pq = this;
		old = pq.$get();
		n = old.$length;
		no = (x = n - 1 >> 0, ((x < 0 || x >= old.$length) ? ($throwRuntimeError("index out of range"), undefined) : old.$array[old.$offset + x]));
		no.Index = -1;
		pq.$set($subslice(old, 0, (n - 1 >> 0)));
		return no;
	};
	game.ptr.prototype.Autoexplore = function(ev) {
		var _entry, _r, _r$1, _r$2, _r$3, _tuple, ev, finished, g, mons, n, sources, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _entry = $f._entry; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _tuple = $f._tuple; ev = $f.ev; finished = $f.finished; g = $f.g; mons = $f.mons; n = $f.n; sources = $f.sources; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		g = this;
		mons = g.MonsterInLOS();
		if (mons.Exists()) {
			$s = -1; return errors.New("You cannot auto-explore while there are monsters in view.");
		}
		if ((_entry = g.ExclusionsMap[position.keyFor(g.Player.Pos)], _entry !== undefined ? _entry.v : false)) {
			$s = -1; return errors.New("You cannot auto-explore while in an excluded area.");
		}
		_r = g.AllExplored(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ if (_r) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (_r) { */ case 1:
			$s = -1; return errors.New("Nothing left to explore.");
		/* } */ case 2:
		_r$1 = g.AutoexploreSources(); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		sources = _r$1;
		if (sources.$length === 0) {
			$s = -1; return errors.New("Some excluded places remain unexplored.");
		}
		$r = g.BuildAutoexploreMap(sources); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_r$2 = g.NextAuto(); /* */ $s = 6; case 6: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_tuple = _r$2;
		n = _tuple[0];
		finished = _tuple[1];
		if (finished || n === ptrType$1.nil) {
			$s = -1; return errors.New("You cannot reach safely some places.");
		}
		g.Autoexploring = true;
		g.AutoHalt = false;
		_r$3 = g.MovePlayer($clone(n, position), ev); /* */ $s = 7; case 7: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		$s = -1; return _r$3;
		/* */ } return; } if ($f === undefined) { $f = { $blk: game.ptr.prototype.Autoexplore }; } $f._entry = _entry; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._tuple = _tuple; $f.ev = ev; $f.finished = finished; $f.g = g; $f.mons = mons; $f.n = n; $f.sources = sources; $f.$s = $s; $f.$r = $r; return $f;
	};
	game.prototype.Autoexplore = function(ev) { return this.$val.Autoexplore(ev); };
	game.ptr.prototype.AllExplored = function() {
		var _entry, _entry$1, _entry$2, _i, _r, _ref, _tuple, c, g, i, np, ok, pos, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _entry = $f._entry; _entry$1 = $f._entry$1; _entry$2 = $f._entry$2; _i = $f._i; _r = $f._r; _ref = $f._ref; _tuple = $f._tuple; c = $f.c; g = $f.g; i = $f.i; np = $f.np; ok = $f.ok; pos = $f.pos; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		g = this;
		np = new normalPath.ptr(g, arrayType$1.zero());
		_ref = g.Dungeon.Cells;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			i = _i;
			c = $clone(((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]), cell);
			pos = $clone(idxtopos(i), position);
			/* */ if (c.T === 0) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (c.T === 0) { */ case 3:
				_r = np.Neighbors($clone(pos, position)); /* */ $s = 7; case 7: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				/* */ if (_r.$length === 0) { $s = 5; continue; }
				/* */ $s = 6; continue;
				/* if (_r.$length === 0) { */ case 5:
					_i++;
					/* continue; */ $s = 1; continue;
				/* } */ case 6:
			/* } */ case 4:
			if (!c.Explored || (_entry = g.Simellas[position.keyFor(pos)], _entry !== undefined ? _entry.v : 0) > 0 || !((_entry$1 = g.Collectables[position.keyFor(pos)], _entry$1 !== undefined ? _entry$1.v : ptrType$4.nil) === ptrType$4.nil)) {
				$s = -1; return false;
			} else {
				_tuple = (_entry$2 = g.Rods[position.keyFor(pos)], _entry$2 !== undefined ? [_entry$2.v, true] : [0, false]);
				ok = _tuple[1];
				if (ok) {
					$s = -1; return false;
				}
			}
			_i++;
		/* } */ $s = 1; continue; case 2:
		$s = -1; return true;
		/* */ } return; } if ($f === undefined) { $f = { $blk: game.ptr.prototype.AllExplored }; } $f._entry = _entry; $f._entry$1 = _entry$1; $f._entry$2 = _entry$2; $f._i = _i; $f._r = _r; $f._ref = _ref; $f._tuple = _tuple; $f.c = c; $f.g = g; $f.i = i; $f.np = np; $f.ok = ok; $f.pos = pos; $f.$s = $s; $f.$r = $r; return $f;
	};
	game.prototype.AllExplored = function() { return this.$val.AllExplored(); };
	game.ptr.prototype.AutoexploreSources = function() {
		var _entry, _entry$1, _entry$2, _entry$3, _i, _r, _ref, _tuple, c, g, i, np, ok, pos, sources, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _entry = $f._entry; _entry$1 = $f._entry$1; _entry$2 = $f._entry$2; _entry$3 = $f._entry$3; _i = $f._i; _r = $f._r; _ref = $f._ref; _tuple = $f._tuple; c = $f.c; g = $f.g; i = $f.i; np = $f.np; ok = $f.ok; pos = $f.pos; sources = $f.sources; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		g = this;
		sources = new sliceType$6([]);
		np = new normalPath.ptr(g, arrayType$1.zero());
		_ref = g.Dungeon.Cells;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			i = _i;
			c = $clone(((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]), cell);
			pos = $clone(idxtopos(i), position);
			/* */ if (c.T === 0) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (c.T === 0) { */ case 3:
				_r = np.Neighbors($clone(pos, position)); /* */ $s = 7; case 7: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				/* */ if (_r.$length === 0) { $s = 5; continue; }
				/* */ $s = 6; continue;
				/* if (_r.$length === 0) { */ case 5:
					_i++;
					/* continue; */ $s = 1; continue;
				/* } */ case 6:
			/* } */ case 4:
			if ((_entry = g.ExclusionsMap[position.keyFor(pos)], _entry !== undefined ? _entry.v : false)) {
				_i++;
				/* continue; */ $s = 1; continue;
			}
			if (!c.Explored || (_entry$1 = g.Simellas[position.keyFor(pos)], _entry$1 !== undefined ? _entry$1.v : 0) > 0 || !((_entry$2 = g.Collectables[position.keyFor(pos)], _entry$2 !== undefined ? _entry$2.v : ptrType$4.nil) === ptrType$4.nil)) {
				sources = $append(sources, i);
			} else {
				_tuple = (_entry$3 = g.Rods[position.keyFor(pos)], _entry$3 !== undefined ? [_entry$3.v, true] : [0, false]);
				ok = _tuple[1];
				if (ok) {
					sources = $append(sources, i);
				}
			}
			_i++;
		/* } */ $s = 1; continue; case 2:
		$s = -1; return sources;
		/* */ } return; } if ($f === undefined) { $f = { $blk: game.ptr.prototype.AutoexploreSources }; } $f._entry = _entry; $f._entry$1 = _entry$1; $f._entry$2 = _entry$2; $f._entry$3 = _entry$3; $f._i = _i; $f._r = _r; $f._ref = _ref; $f._tuple = _tuple; $f.c = c; $f.g = g; $f.i = i; $f.np = np; $f.ok = ok; $f.pos = pos; $f.sources = sources; $f.$s = $s; $f.$r = $r; return $f;
	};
	game.prototype.AutoexploreSources = function() { return this.$val.AutoexploreSources(); };
	game.ptr.prototype.BuildAutoexploreMap = function(sources) {
		var ap, g, sources, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; ap = $f.ap; g = $f.g; sources = $f.sources; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		g = this;
		ap = new autoexplorePath.ptr(g, arrayType$1.zero());
		$r = g.AutoExploreDijkstra(ap, sources); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		g.DijkstraMapRebuild = false;
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: game.ptr.prototype.BuildAutoexploreMap }; } $f.ap = ap; $f.g = g; $f.sources = sources; $f.$s = $s; $f.$r = $r; return $f;
	};
	game.prototype.BuildAutoexploreMap = function(sources) { return this.$val.BuildAutoexploreMap(sources); };
	game.ptr.prototype.NextAuto = function() {
		var _i, _r, _ref, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, ap, cost, finished, g, n, ncost, neighbors, next, pos, x, x$1, x$2, x$3, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _r = $f._r; _ref = $f._ref; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; ap = $f.ap; cost = $f.cost; finished = $f.finished; g = $f.g; n = $f.n; ncost = $f.ncost; neighbors = $f.neighbors; next = $f.next; pos = $f.pos; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = [n];
		next = ptrType$1.nil;
		finished = false;
		g = this;
		ap = new autoexplorePath.ptr(g, arrayType$1.zero());
		if ((x = $clone(g.Player.Pos, position).idx(), ((x < 0 || x >= $pkg.DijkstraMapCache.length) ? ($throwRuntimeError("index out of range"), undefined) : $pkg.DijkstraMapCache[x])) === 9999) {
			_tmp = ptrType$1.nil;
			_tmp$1 = false;
			next = _tmp;
			finished = _tmp$1;
			$s = -1; return [next, finished];
		}
		_r = ap.Neighbors($clone(g.Player.Pos, position)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		neighbors = _r;
		if (neighbors.$length === 0) {
			_tmp$2 = ptrType$1.nil;
			_tmp$3 = false;
			next = _tmp$2;
			finished = _tmp$3;
			$s = -1; return [next, finished];
		}
		n[0] = $clone((0 >= neighbors.$length ? ($throwRuntimeError("index out of range"), undefined) : neighbors.$array[neighbors.$offset + 0]), position);
		ncost = (x$1 = $clone(n[0], position).idx(), ((x$1 < 0 || x$1 >= $pkg.DijkstraMapCache.length) ? ($throwRuntimeError("index out of range"), undefined) : $pkg.DijkstraMapCache[x$1]));
		_ref = $subslice(neighbors, 1);
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			pos = $clone(((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]), position);
			cost = (x$2 = $clone(pos, position).idx(), ((x$2 < 0 || x$2 >= $pkg.DijkstraMapCache.length) ? ($throwRuntimeError("index out of range"), undefined) : $pkg.DijkstraMapCache[x$2]));
			if (cost < ncost) {
				position.copy(n[0], pos);
				ncost = cost;
			}
			_i++;
		}
		if (ncost >= (x$3 = $clone(g.Player.Pos, position).idx(), ((x$3 < 0 || x$3 >= $pkg.DijkstraMapCache.length) ? ($throwRuntimeError("index out of range"), undefined) : $pkg.DijkstraMapCache[x$3]))) {
			finished = true;
		}
		next = n[0];
		_tmp$4 = next;
		_tmp$5 = finished;
		next = _tmp$4;
		finished = _tmp$5;
		$s = -1; return [next, finished];
		/* */ } return; } if ($f === undefined) { $f = { $blk: game.ptr.prototype.NextAuto }; } $f._i = _i; $f._r = _r; $f._ref = _ref; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f.ap = ap; $f.cost = cost; $f.finished = finished; $f.g = g; $f.n = n; $f.ncost = ncost; $f.neighbors = neighbors; $f.next = next; $f.pos = pos; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.$s = $s; $f.$r = $r; return $f;
	};
	game.prototype.NextAuto = function() { return this.$val.NextAuto(); };
	game.ptr.prototype.HitDamage = function(dt, base, armor) {
		var _q, _r, _r$1, armor, attack, base, dt, g, min, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _q = $f._q; _r = $f._r; _r$1 = $f._r$1; armor = $f.armor; attack = $f.attack; base = $f.base; dt = $f.dt; g = $f.g; min = $f.min; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		g = this;
		min = (_q = base / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
		_r = RandInt((base - min >> 0) + 1 >> 0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		attack = min + _r >> 0;
		/* */ if (dt === 0) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (dt === 0) { */ case 2:
			_r$1 = RandInt(armor + 1 >> 0); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			attack = attack - (_r$1) >> 0;
		/* } */ case 3:
		if (attack < 0) {
			attack = 0;
		}
		$s = -1; return attack;
		/* */ } return; } if ($f === undefined) { $f = { $blk: game.ptr.prototype.HitDamage }; } $f._q = _q; $f._r = _r; $f._r$1 = _r$1; $f.armor = armor; $f.attack = attack; $f.base = base; $f.dt = dt; $f.g = g; $f.min = min; $f.$s = $s; $f.$r = $r; return $f;
	};
	game.prototype.HitDamage = function(dt, base, armor) { return this.$val.HitDamage(dt, base, armor); };
	monster.ptr.prototype.InflictDamage = function(g, damage, max) {
		var damage, g, m, max, oldHP, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; damage = $f.damage; g = $f.g; m = $f.m; max = $f.max; oldHP = $f.oldHP; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		m = this;
		oldHP = g.Player.HP;
		g.Player.HP = g.Player.HP - (damage) >> 0;
		$r = g.ui.WoundedAnimation(g); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ if (oldHP > max && g.Player.HP <= max) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (oldHP > max && g.Player.HP <= max) { */ case 2:
			$r = g.StoryPrintf("Critical HP: %d (hit by %s)", new sliceType$7([new $Int(g.Player.HP), new $String(new monsterKind(m.Kind).Indefinite(false))])); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = g.ui.CriticalHPWarning(g); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 3:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: monster.ptr.prototype.InflictDamage }; } $f.damage = damage; $f.g = g; $f.m = m; $f.max = max; $f.oldHP = oldHP; $f.$s = $s; $f.$r = $r; return $f;
	};
	monster.prototype.InflictDamage = function(g, damage, max) { return this.$val.InflictDamage(g, damage, max); };
	game.ptr.prototype.MakeMonstersAware = function() {
		var _entry, _i, _ref, g, m, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _entry = $f._entry; _i = $f._i; _ref = $f._ref; g = $f.g; m = $f.m; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		g = this;
		_ref = g.Monsters;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			m = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			/* */ if (m.HP <= 0) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (m.HP <= 0) { */ case 3:
				_i++;
				/* continue; */ $s = 1; continue;
			/* } */ case 4:
			/* */ if ((_entry = g.Player.LOS[position.keyFor(m.Pos)], _entry !== undefined ? _entry.v : false)) { $s = 5; continue; }
			/* */ $s = 6; continue;
			/* if ((_entry = g.Player.LOS[position.keyFor(m.Pos)], _entry !== undefined ? _entry.v : false)) { */ case 5:
				$r = m.MakeAware(g); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* */ if (!((m.State === 0))) { $s = 8; continue; }
				/* */ $s = 9; continue;
				/* if (!((m.State === 0))) { */ case 8:
					$r = m.GatherBand(g); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 9:
			/* } */ case 6:
			_i++;
		/* } */ $s = 1; continue; case 2:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: game.ptr.prototype.MakeMonstersAware }; } $f._entry = _entry; $f._i = _i; $f._ref = _ref; $f.g = g; $f.m = m; $f.$s = $s; $f.$r = $r; return $f;
	};
	game.prototype.MakeMonstersAware = function() { return this.$val.MakeMonstersAware(); };
	game.ptr.prototype.MakeNoise = function(noise, at) {
		var _entry, _entry$1, _i, _q, _r, _r$1, _ref, _tuple, at, d, dij, g, m, n, nm, noise, ok, r, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _entry = $f._entry; _entry$1 = $f._entry$1; _i = $f._i; _q = $f._q; _r = $f._r; _r$1 = $f._r$1; _ref = $f._ref; _tuple = $f._tuple; at = $f.at; d = $f.d; dij = $f.dij; g = $f.g; m = $f.m; n = $f.n; nm = $f.nm; noise = $f.noise; ok = $f.ok; r = $f.r; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		g = this;
		dij = new normalPath.ptr(g, arrayType$1.zero());
		_r = Dijkstra(dij, new sliceType$5([$clone(at, position)]), noise); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		nm = _r;
		_ref = g.Monsters;
		_i = 0;
		/* while (true) { */ case 2:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 3; continue; }
			m = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			/* */ if (!m.Exists()) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (!m.Exists()) { */ case 4:
				_i++;
				/* continue; */ $s = 2; continue;
			/* } */ case 5:
			/* */ if (m.State === 1) { $s = 6; continue; }
			/* */ $s = 7; continue;
			/* if (m.State === 1) { */ case 6:
				_i++;
				/* continue; */ $s = 2; continue;
			/* } */ case 7:
			_tuple = (_entry = nm[position.keyFor(m.Pos)], _entry !== undefined ? [_entry.v, true] : [ptrType.nil, false]);
			n = _tuple[0];
			ok = _tuple[1];
			/* */ if (!ok) { $s = 8; continue; }
			/* */ $s = 9; continue;
			/* if (!ok) { */ case 8:
				_i++;
				/* continue; */ $s = 2; continue;
			/* } */ case 9:
			d = n.Cost;
			v = noise - d >> 0;
			/* */ if (v <= 0) { $s = 10; continue; }
			/* */ $s = 11; continue;
			/* if (v <= 0) { */ case 10:
				_i++;
				/* continue; */ $s = 2; continue;
			/* } */ case 11:
			if (v > 25) {
				v = 25;
			}
			_r$1 = RandInt(30); /* */ $s = 12; case 12: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			r = _r$1;
			if (m.State === 0) {
				v = (_q = v / (2), (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
			}
			/* */ if (v > r) { $s = 13; continue; }
			/* */ $s = 14; continue;
			/* if (v > r) { */ case 13:
				if ((_entry$1 = g.Player.LOS[position.keyFor(m.Pos)], _entry$1 !== undefined ? _entry$1.v : false)) {
					m.MakeHunt(g);
				} else {
					position.copy(m.Target, at);
					m.State = 2;
				}
				$r = m.GatherBand(g); /* */ $s = 15; case 15: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 14:
			_i++;
		/* } */ $s = 2; continue; case 3:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: game.ptr.prototype.MakeNoise }; } $f._entry = _entry; $f._entry$1 = _entry$1; $f._i = _i; $f._q = _q; $f._r = _r; $f._r$1 = _r$1; $f._ref = _ref; $f._tuple = _tuple; $f.at = at; $f.d = d; $f.dij = dij; $f.g = g; $f.m = m; $f.n = n; $f.nm = nm; $f.noise = noise; $f.ok = ok; $f.r = r; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	game.prototype.MakeNoise = function(noise, at) { return this.$val.MakeNoise(noise, at); };
	game.ptr.prototype.AttackMonster = function(mons, ev) {
		var _i, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _ref, _tuple, _tuple$1, _v, behind, deltaX, deltaY, ev, g, mons, mons$1, mons$2, neighbors, pos, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _ref = $f._ref; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _v = $f._v; behind = $f.behind; deltaX = $f.deltaX; deltaY = $f.deltaY; ev = $f.ev; g = $f.g; mons = $f.mons; mons$1 = $f.mons$1; mons$2 = $f.mons$2; neighbors = $f.neighbors; pos = $f.pos; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		g = this;
			/* */ if ((g.Player.Weapon === 7)) { $s = 2; continue; }
			/* */ if (new weapon(g.Player.Weapon).Cleave()) { $s = 3; continue; }
			/* */ if (new weapon(g.Player.Weapon).Pierce()) { $s = 4; continue; }
			/* */ if ((g.Player.Weapon === 8)) { $s = 5; continue; }
			/* */ $s = 6; continue;
			/* if ((g.Player.Weapon === 7)) { */ case 2:
				_r = g.HitMonster(0, mons, ev); /* */ $s = 10; case 10: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				/* */ if (!_r) { $s = 8; continue; }
				/* */ $s = 9; continue;
				/* if (!_r) { */ case 8:
					/* break; */ $s = 1; continue;
				/* } */ case 9:
				_r$1 = RandInt(4); /* */ $s = 13; case 13: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				/* */ if (_r$1 === 0) { $s = 11; continue; }
				/* */ $s = 12; continue;
				/* if (_r$1 === 0) { */ case 11:
					$r = mons.EnterConfusion(g, ev); /* */ $s = 14; case 14: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$r = g.PrintfStyled("Frundis glows\xE2\x80\xA6 the %s appears confused.", 2, new sliceType$7([new monsterKind(mons.Kind)])); /* */ $s = 15; case 15: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 12:
				$s = 7; continue;
			/* } else if (new weapon(g.Player.Weapon).Cleave()) { */ case 3:
				neighbors = sliceType$5.nil;
				/* */ if (g.Player.HasStatus(6)) { $s = 16; continue; }
				/* */ $s = 17; continue;
				/* if (g.Player.HasStatus(6)) { */ case 16:
					_r$2 = g.Dungeon.CardinalFreeNeighbors($clone(g.Player.Pos, position)); /* */ $s = 19; case 19: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
					neighbors = _r$2;
					$s = 18; continue;
				/* } else { */ case 17:
					_r$3 = g.Dungeon.FreeNeighbors($clone(g.Player.Pos, position)); /* */ $s = 20; case 20: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
					neighbors = _r$3;
				/* } */ case 18:
				_ref = neighbors;
				_i = 0;
				/* while (true) { */ case 21:
					/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 22; continue; }
					pos = $clone(((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]), position);
					_tuple = g.MonsterAt($clone(pos, position));
					mons$1 = _tuple[0];
					/* */ if (mons$1.Exists()) { $s = 23; continue; }
					/* */ $s = 24; continue;
					/* if (mons$1.Exists()) { */ case 23:
						_r$4 = g.HitMonster(0, mons$1, ev); /* */ $s = 25; case 25: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
						_r$4;
					/* } */ case 24:
					_i++;
				/* } */ $s = 21; continue; case 22:
				$s = 7; continue;
			/* } else if (new weapon(g.Player.Weapon).Pierce()) { */ case 4:
				_r$5 = g.HitMonster(0, mons, ev); /* */ $s = 26; case 26: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
				_r$5;
				deltaX = mons.Pos.X - g.Player.Pos.X >> 0;
				deltaY = mons.Pos.Y - g.Player.Pos.Y >> 0;
				behind = new position.ptr(g.Player.Pos.X + ($imul(2, deltaX)) >> 0, g.Player.Pos.Y + ($imul(2, deltaY)) >> 0);
				/* */ if ($clone(behind, position).valid()) { $s = 27; continue; }
				/* */ $s = 28; continue;
				/* if ($clone(behind, position).valid()) { */ case 27:
					_tuple$1 = g.MonsterAt($clone(behind, position));
					mons$2 = _tuple$1[0];
					/* */ if (mons$2.Exists()) { $s = 29; continue; }
					/* */ $s = 30; continue;
					/* if (mons$2.Exists()) { */ case 29:
						_r$6 = g.HitMonster(0, mons$2, ev); /* */ $s = 31; case 31: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
						_r$6;
					/* } */ case 30:
				/* } */ case 28:
				$s = 7; continue;
			/* } else if ((g.Player.Weapon === 8)) { */ case 5:
				$r = g.HitConnected($clone(mons.Pos, position), 1, ev); /* */ $s = 32; case 32: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 7; continue;
			/* } else { */ case 6:
				_r$7 = g.HitMonster(0, mons, ev); /* */ $s = 33; case 33: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
				_r$7;
				if (!((g.Player.Weapon === 5) || (g.Player.Weapon === 6))) { _v = false; $s = 36; continue s; }
				_r$8 = RandInt(4); /* */ $s = 37; case 37: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
				_v = _r$8 === 0; case 36:
				/* */ if (_v) { $s = 34; continue; }
				/* */ $s = 35; continue;
				/* if (_v) { */ case 34:
					_r$9 = g.HitMonster(0, mons, ev); /* */ $s = 38; case 38: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
					_r$9;
				/* } */ case 35:
			/* } */ case 7:
		case 1:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: game.ptr.prototype.AttackMonster }; } $f._i = _i; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._ref = _ref; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._v = _v; $f.behind = behind; $f.deltaX = deltaX; $f.deltaY = deltaY; $f.ev = ev; $f.g = g; $f.mons = mons; $f.mons$1 = mons$1; $f.mons$2 = mons$2; $f.neighbors = neighbors; $f.pos = pos; $f.$s = $s; $f.$r = $r; return $f;
	};
	game.prototype.AttackMonster = function(mons, ev) { return this.$val.AttackMonster(mons, ev); };
	game.ptr.prototype.HitConnected = function(pos, dt, ev) {
		var _entry, _i, _key, _key$1, _r, _r$1, _ref, _tuple, conn, d, dt, ev, g, mons, nb, npos, pos, stack, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _entry = $f._entry; _i = $f._i; _key = $f._key; _key$1 = $f._key$1; _r = $f._r; _r$1 = $f._r$1; _ref = $f._ref; _tuple = $f._tuple; conn = $f.conn; d = $f.d; dt = $f.dt; ev = $f.ev; g = $f.g; mons = $f.mons; nb = $f.nb; npos = $f.npos; pos = $f.pos; stack = $f.stack; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		d = [d];
		g = this;
		d[0] = g.Dungeon;
		conn = $makeMap(position.keyFor, []);
		stack = new sliceType$5([$clone(pos, position)]);
		_key = $clone(pos, position); (conn || $throwRuntimeError("assignment to entry in nil map"))[position.keyFor(_key)] = { k: _key, v: true };
		nb = $makeSlice(sliceType$5, 0, 8);
		/* while (true) { */ case 1:
			/* if (!(stack.$length > 0)) { break; } */ if(!(stack.$length > 0)) { $s = 2; continue; }
			position.copy(pos, (x = stack.$length - 1 >> 0, ((x < 0 || x >= stack.$length) ? ($throwRuntimeError("index out of range"), undefined) : stack.$array[stack.$offset + x])));
			stack = $subslice(stack, 0, (stack.$length - 1 >> 0));
			_tuple = g.MonsterAt($clone(pos, position));
			mons = _tuple[0];
			/* */ if (!mons.Exists()) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (!mons.Exists()) { */ case 3:
				/* continue; */ $s = 1; continue;
			/* } */ case 4:
			_r = g.HitMonster(dt, mons, ev); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_r;
			_r$1 = $clone(pos, position).Neighbors(nb, (function(d) { return function(npos) {
				var npos;
				return $clone(npos, position).valid() && !((d[0].Cell($clone(npos, position)).T === 0));
			}; })(d)); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			nb = _r$1;
			_ref = nb;
			_i = 0;
			while (true) {
				if (!(_i < _ref.$length)) { break; }
				npos = $clone(((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]), position);
				if (!(_entry = conn[position.keyFor(npos)], _entry !== undefined ? _entry.v : false)) {
					_key$1 = $clone(npos, position); (conn || $throwRuntimeError("assignment to entry in nil map"))[position.keyFor(_key$1)] = { k: _key$1, v: true };
					stack = $append(stack, npos);
				}
				_i++;
			}
		/* } */ $s = 1; continue; case 2:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: game.ptr.prototype.HitConnected }; } $f._entry = _entry; $f._i = _i; $f._key = _key; $f._key$1 = _key$1; $f._r = _r; $f._r$1 = _r$1; $f._ref = _ref; $f._tuple = _tuple; $f.conn = conn; $f.d = d; $f.dt = dt; $f.ev = ev; $f.g = g; $f.mons = mons; $f.nb = nb; $f.npos = npos; $f.pos = pos; $f.stack = stack; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	game.prototype.HitConnected = function(pos, dt, ev) { return this.$val.HitConnected(pos, dt, ev); };
	game.ptr.prototype.HitNoise = function() {
		var _q, g, noise;
		g = this;
		noise = 12;
		if (g.Player.Weapon === 7) {
			noise = noise - (2) >> 0;
		}
		if (g.Player.Armour === 0) {
			noise = noise - (1) >> 0;
		}
		noise = noise + ((_q = g.Player.Armor() / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"))) >> 0;
		return noise;
	};
	game.prototype.HitNoise = function() { return this.$val.HitNoise(); };
	game.ptr.prototype.HitMonster = function(dt, mons, ev) {
		var _arg, _arg$1, _arg$2, _arg$3, _arg$4, _entry, _key, _q, _q$1, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _v, acc, attack, bonus, dt, ev, evasion, g, hit, mons, noise, oldHP, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _arg$3 = $f._arg$3; _arg$4 = $f._arg$4; _entry = $f._entry; _key = $f._key; _q = $f._q; _q$1 = $f._q$1; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _v = $f._v; acc = $f.acc; attack = $f.attack; bonus = $f.bonus; dt = $f.dt; ev = $f.ev; evasion = $f.evasion; g = $f.g; hit = $f.hit; mons = $f.mons; noise = $f.noise; oldHP = $f.oldHP; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		hit = false;
		g = this;
		_r = RandInt(g.Player.Accuracy()); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		acc = _r;
		_r$1 = RandInt(mons.Evasion); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		evasion = _r$1;
		if (mons.State === 0) {
			evasion = (_q = evasion / (3), (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
		}
		/* */ if (acc > evasion) { $s = 3; continue; }
		/* */ $s = 4; continue;
		/* if (acc > evasion) { */ case 3:
			hit = true;
			noise = 12;
			if ((g.Player.Weapon === 7) || (g.Player.Weapon === 0)) {
				noise = noise - (2) >> 0;
			}
			noise = noise + ((_q$1 = mons.Armor / 3, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero"))) >> 0;
			$r = g.MakeNoise(noise, $clone(mons.Pos, position)); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			bonus = 0;
			/* */ if (g.Player.HasStatus(0)) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if (g.Player.HasStatus(0)) { */ case 7:
				_r$2 = RandInt(4); /* */ $s = 9; case 9: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				bonus = bonus + ((2 + _r$2 >> 0)) >> 0;
			/* } */ case 8:
			_r$3 = g.HitDamage(dt, g.Player.Attack() + bonus >> 0, mons.Armor); /* */ $s = 10; case 10: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			attack = _r$3;
			if (mons.State === 0) {
				if (g.Player.Weapon === 0) {
					attack = $imul(attack, (4));
				} else {
					attack = $imul(attack, (2));
				}
			}
			oldHP = mons.HP;
			mons.HP = mons.HP - (attack) >> 0;
			$r = g.ui.HitAnimation(g, $clone(mons.Pos, position), false); /* */ $s = 11; case 11: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* */ if (mons.HP > 0) { $s = 12; continue; }
			/* */ if (oldHP > 0) { $s = 13; continue; }
			/* */ $s = 14; continue;
			/* if (mons.HP > 0) { */ case 12:
				_r$4 = new monsterKind(mons.Kind).Definite(false); /* */ $s = 15; case 15: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				_arg = new $String(_r$4);
				_arg$1 = new $Int(attack);
				$r = g.PrintfStyled("You hit %s (%d damage).", 2, new sliceType$7([_arg, _arg$1])); /* */ $s = 16; case 16: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 14; continue;
			/* } else if (oldHP > 0) { */ case 13:
				_r$5 = new monsterKind(mons.Kind).Definite(false); /* */ $s = 17; case 17: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
				_arg$2 = new $String(_r$5);
				_arg$3 = new $Int(attack);
				$r = g.PrintfStyled("You kill %s (%d damage).", 2, new sliceType$7([_arg$2, _arg$3])); /* */ $s = 18; case 18: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$r = g.HandleKill(mons, ev); /* */ $s = 19; case 19: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 14:
			if (!(mons.Kind === 4)) { _v = false; $s = 22; continue s; }
			_r$6 = RandInt(4); /* */ $s = 23; case 23: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
			_v = _r$6 === 0; case 22:
			/* */ if (_v && !g.Player.HasStatus(8) && ($clone(mons.Pos, position).Distance($clone(g.Player.Pos, position)) === 1)) { $s = 20; continue; }
			/* */ $s = 21; continue;
			/* if (_v && !g.Player.HasStatus(8) && ($clone(mons.Pos, position).Distance($clone(g.Player.Pos, position)) === 1)) { */ case 20:
				_key = 8; (g.Player.Statuses || $throwRuntimeError("assignment to entry in nil map"))[status.keyFor(_key)] = { k: _key, v: (_entry = g.Player.Statuses[status.keyFor(8)], _entry !== undefined ? _entry.v : 0) + (1) >> 0 };
				_r$7 = ev.Rank(); /* */ $s = 24; case 24: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
				_r$8 = RandInt(20); /* */ $s = 25; case 25: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
				$r = g.PushEvent(new simpleEvent.ptr((_r$7 + 30 >> 0) + _r$8 >> 0, 11)); /* */ $s = 26; case 26: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				g.Print("The brizzia's corpse releases a nauseous gas. You feel sick.");
			/* } */ case 21:
			$s = 5; continue;
		/* } else { */ case 4:
			_r$9 = new monsterKind(mons.Kind).Definite(false); /* */ $s = 27; case 27: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
			_arg$4 = new $String(_r$9);
			$r = g.Printf("You miss %s.", new sliceType$7([_arg$4])); /* */ $s = 28; case 28: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 5:
		$r = mons.MakeHuntIfHurt(g); /* */ $s = 29; case 29: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		hit = hit;
		$s = -1; return hit;
		/* */ } return; } if ($f === undefined) { $f = { $blk: game.ptr.prototype.HitMonster }; } $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._arg$3 = _arg$3; $f._arg$4 = _arg$4; $f._entry = _entry; $f._key = _key; $f._q = _q; $f._q$1 = _q$1; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._v = _v; $f.acc = acc; $f.attack = attack; $f.bonus = bonus; $f.dt = dt; $f.ev = ev; $f.evasion = evasion; $f.g = g; $f.hit = hit; $f.mons = mons; $f.noise = noise; $f.oldHP = oldHP; $f.$s = $s; $f.$r = $r; return $f;
	};
	game.prototype.HitMonster = function(dt, mons, ev) { return this.$val.HitMonster(dt, mons, ev); };
	game.ptr.prototype.HandleKill = function(mons, ev) {
		var _entry, _entry$1, _key, ev, g, mons, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _entry = $f._entry; _entry$1 = $f._entry$1; _key = $f._key; ev = $f.ev; g = $f.g; mons = $f.mons; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		g = this;
		g.Killed = g.Killed + (1) >> 0;
		if (g.KilledMons === false) {
			g.KilledMons = $makeMap(monsterKind.keyFor, []);
		}
		_key = mons.Kind; (g.KilledMons || $throwRuntimeError("assignment to entry in nil map"))[monsterKind.keyFor(_key)] = { k: _key, v: (_entry = g.KilledMons[monsterKind.keyFor(mons.Kind)], _entry !== undefined ? _entry.v : 0) + (1) >> 0 };
		/* */ if (mons.Kind === 17) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (mons.Kind === 17) { */ case 1:
			$r = mons.Explode(g, ev); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 2:
		/* */ if ((_entry$1 = g.Doors[position.keyFor(mons.Pos)], _entry$1 !== undefined ? _entry$1.v : false)) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if ((_entry$1 = g.Doors[position.keyFor(mons.Pos)], _entry$1 !== undefined ? _entry$1.v : false)) { */ case 4:
			$r = g.ComputeLOS(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 5:
		/* */ if (new monsterKind(mons.Kind).Dangerousness() > 10) { $s = 7; continue; }
		/* */ $s = 8; continue;
		/* if (new monsterKind(mons.Kind).Dangerousness() > 10) { */ case 7:
			$r = g.StoryPrintf("You killed %s.", new sliceType$7([new $String(new monsterKind(mons.Kind).Indefinite(false))])); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 8:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: game.ptr.prototype.HandleKill }; } $f._entry = _entry; $f._entry$1 = _entry$1; $f._key = _key; $f.ev = ev; $f.g = g; $f.mons = mons; $f.$s = $s; $f.$r = $r; return $f;
	};
	game.prototype.HandleKill = function(mons, ev) { return this.$val.HandleKill(mons, ev); };
	Dijkstra = function(dij, sources, maxCost) {
		var _i, _i$1, _r, _r$1, _r$2, _r$3, _ref, _ref$1, cost, current, dij, f, maxCost, n, neighbor, neighborNode, nm, nq, sources, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _i$1 = $f._i$1; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _ref = $f._ref; _ref$1 = $f._ref$1; cost = $f.cost; current = $f.current; dij = $f.dij; f = $f.f; maxCost = $f.maxCost; n = $f.n; neighbor = $f.neighbor; neighborNode = $f.neighborNode; nm = $f.nm; nq = $f.nq; sources = $f.sources; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		nodeCache = $subslice(nodeCache, 0, 0);
		nm = $makeMap(position.keyFor, []);
		nq = $newDataPointer(new priorityQueue([]), ptrType$2);
		$r = heap.Init(nq); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_ref = sources;
		_i = 0;
		/* while (true) { */ case 2:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 3; continue; }
			f = $clone(((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]), position);
			n = new nodeMap(nm).get($clone(f, position));
			n.Open = true;
			$r = heap.Push(nq, n); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_i++;
		/* } */ $s = 2; continue; case 3:
		/* while (true) { */ case 5:
			if (nq.Len() === 0) {
				$s = -1; return nm;
			}
			_r = heap.Pop(nq); /* */ $s = 7; case 7: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			current = $assertType(_r, ptrType);
			current.Open = false;
			current.Closed = true;
			_r$1 = dij.Neighbors($clone(current.Pos, position)); /* */ $s = 8; case 8: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_ref$1 = _r$1;
			_i$1 = 0;
			/* while (true) { */ case 9:
				/* if (!(_i$1 < _ref$1.$length)) { break; } */ if(!(_i$1 < _ref$1.$length)) { $s = 10; continue; }
				neighbor = $clone(((_i$1 < 0 || _i$1 >= _ref$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$1.$array[_ref$1.$offset + _i$1]), position);
				_r$2 = dij.Cost($clone(current.Pos, position), $clone(neighbor, position)); /* */ $s = 11; case 11: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				cost = current.Cost + _r$2 >> 0;
				neighborNode = new nodeMap(nm).get($clone(neighbor, position));
				/* */ if (cost < neighborNode.Cost) { $s = 12; continue; }
				/* */ $s = 13; continue;
				/* if (cost < neighborNode.Cost) { */ case 12:
					/* */ if (neighborNode.Open) { $s = 14; continue; }
					/* */ $s = 15; continue;
					/* if (neighborNode.Open) { */ case 14:
						_r$3 = heap.Remove(nq, neighborNode.Index); /* */ $s = 16; case 16: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
						_r$3;
					/* } */ case 15:
					neighborNode.Open = false;
					neighborNode.Closed = false;
				/* } */ case 13:
				/* */ if (!neighborNode.Open && !neighborNode.Closed) { $s = 17; continue; }
				/* */ $s = 18; continue;
				/* if (!neighborNode.Open && !neighborNode.Closed) { */ case 17:
					neighborNode.Cost = cost;
					/* */ if (cost < maxCost) { $s = 19; continue; }
					/* */ $s = 20; continue;
					/* if (cost < maxCost) { */ case 19:
						neighborNode.Open = true;
						neighborNode.Rank = cost;
						$r = heap.Push(nq, neighborNode); /* */ $s = 21; case 21: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					/* } */ case 20:
				/* } */ case 18:
				_i$1++;
			/* } */ $s = 9; continue; case 10:
		/* } */ $s = 5; continue; case 6:
		$s = -1; return false;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Dijkstra }; } $f._i = _i; $f._i$1 = _i$1; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._ref = _ref; $f._ref$1 = _ref$1; $f.cost = cost; $f.current = current; $f.dij = dij; $f.f = f; $f.maxCost = maxCost; $f.n = n; $f.neighbor = neighbor; $f.neighborNode = neighborNode; $f.nm = nm; $f.nq = nq; $f.sources = sources; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Dijkstra = Dijkstra;
	game.ptr.prototype.AutoExploreDijkstra = function(dij, sources) {
		var _i, _i$1, _r, _ref, _ref$1, _tmp, _tmp$1, cidx, cpos, d, dij, dmap, g, i, nidx, npos, qend, qstart, queue, s, sources, visited, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _i$1 = $f._i$1; _r = $f._r; _ref = $f._ref; _ref$1 = $f._ref$1; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; cidx = $f.cidx; cpos = $f.cpos; d = $f.d; dij = $f.dij; dmap = $f.dmap; g = $f.g; i = $f.i; nidx = $f.nidx; npos = $f.npos; qend = $f.qend; qstart = $f.qstart; queue = $f.queue; s = $f.s; sources = $f.sources; visited = $f.visited; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		g = this;
		d = g.Dungeon;
		dmap = new sliceType$6($pkg.DijkstraMapCache);
		visited = arrayType$3.zero();
		queue = arrayType.zero();
		_tmp = 0;
		_tmp$1 = 0;
		qstart = _tmp;
		qend = _tmp$1;
		i = 0;
		while (true) {
			if (!(i < 1659)) { break; }
			((i < 0 || i >= dmap.$length) ? ($throwRuntimeError("index out of range"), undefined) : dmap.$array[dmap.$offset + i] = 9999);
			i = i + (1) >> 0;
		}
		_ref = sources;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			s = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			((s < 0 || s >= dmap.$length) ? ($throwRuntimeError("index out of range"), undefined) : dmap.$array[dmap.$offset + s] = 0);
			((qend < 0 || qend >= queue.length) ? ($throwRuntimeError("index out of range"), undefined) : queue[qend] = s);
			qend = qend + (1) >> 0;
			((s < 0 || s >= visited.length) ? ($throwRuntimeError("index out of range"), undefined) : visited[s] = true);
			_i++;
		}
		/* while (true) { */ case 1:
			/* if (!(qstart < qend)) { break; } */ if(!(qstart < qend)) { $s = 2; continue; }
			cidx = ((qstart < 0 || qstart >= queue.length) ? ($throwRuntimeError("index out of range"), undefined) : queue[qstart]);
			qstart = qstart + (1) >> 0;
			cpos = $clone(idxtopos(cidx), position);
			_r = dij.Neighbors($clone(cpos, position)); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_ref$1 = _r;
			_i$1 = 0;
			/* while (true) { */ case 4:
				/* if (!(_i$1 < _ref$1.$length)) { break; } */ if(!(_i$1 < _ref$1.$length)) { $s = 5; continue; }
				npos = $clone(((_i$1 < 0 || _i$1 >= _ref$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$1.$array[_ref$1.$offset + _i$1]), position);
				nidx = $clone(npos, position).idx();
				if (!$clone(npos, position).valid() || ((x = d.Cells, ((nidx < 0 || nidx >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + nidx])).T === 0)) {
					_i$1++;
					/* continue; */ $s = 4; continue;
				}
				if (!((nidx < 0 || nidx >= visited.length) ? ($throwRuntimeError("index out of range"), undefined) : visited[nidx])) {
					((qend < 0 || qend >= queue.length) ? ($throwRuntimeError("index out of range"), undefined) : queue[qend] = nidx);
					qend = qend + (1) >> 0;
					((nidx < 0 || nidx >= visited.length) ? ($throwRuntimeError("index out of range"), undefined) : visited[nidx] = true);
					((nidx < 0 || nidx >= dmap.$length) ? ($throwRuntimeError("index out of range"), undefined) : dmap.$array[dmap.$offset + nidx] = (1 + ((cidx < 0 || cidx >= dmap.$length) ? ($throwRuntimeError("index out of range"), undefined) : dmap.$array[dmap.$offset + cidx]) >> 0));
				}
				_i$1++;
			/* } */ $s = 4; continue; case 5:
		/* } */ $s = 1; continue; case 2:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: game.ptr.prototype.AutoExploreDijkstra }; } $f._i = _i; $f._i$1 = _i$1; $f._r = _r; $f._ref = _ref; $f._ref$1 = _ref$1; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f.cidx = cidx; $f.cpos = cpos; $f.d = d; $f.dij = dij; $f.dmap = dmap; $f.g = g; $f.i = i; $f.nidx = nidx; $f.npos = npos; $f.qend = qend; $f.qstart = qstart; $f.queue = queue; $f.s = s; $f.sources = sources; $f.visited = visited; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	game.prototype.AutoExploreDijkstra = function(dij, sources) { return this.$val.AutoExploreDijkstra(dij, sources); };
	LinkColors = function() {
		$pkg.ColorBg = $pkg.ColorBase03;
		$pkg.ColorBgBorder = $pkg.ColorBase02;
		$pkg.ColorBgLOSalt = $pkg.ColorBase2;
		$pkg.ColorBgDark = $pkg.ColorBase03;
		$pkg.ColorBgLOS = $pkg.ColorBase3;
		$pkg.ColorFg = $pkg.ColorBase0;
		$pkg.ColorFgAnimationHit = $pkg.ColorMagenta;
		$pkg.ColorFgCollectable = $pkg.ColorYellow;
		$pkg.ColorFgConfusedMonster = $pkg.ColorGreen;
		$pkg.ColorFgDark = $pkg.ColorBase01;
		$pkg.ColorFgExcluded = $pkg.ColorRed;
		$pkg.ColorFgExplosionEnd = $pkg.ColorOrange;
		$pkg.ColorFgExplosionStart = $pkg.ColorYellow;
		$pkg.ColorFgExplosionWallEnd = $pkg.ColorMagenta;
		$pkg.ColorFgExplosionWallStart = $pkg.ColorViolet;
		$pkg.ColorFgHPcritical = $pkg.ColorRed;
		$pkg.ColorFgHPok = $pkg.ColorGreen;
		$pkg.ColorFgHPwounded = $pkg.ColorYellow;
		$pkg.ColorFgLOS = $pkg.ColorBase00;
		$pkg.ColorFgMPcritical = $pkg.ColorMagenta;
		$pkg.ColorFgMPok = $pkg.ColorBlue;
		$pkg.ColorFgMPpartial = $pkg.ColorViolet;
		$pkg.ColorFgMagicPlace = $pkg.ColorCyan;
		$pkg.ColorFgMonster = $pkg.ColorRed;
		$pkg.ColorFgPlace = $pkg.ColorMagenta;
		$pkg.ColorFgPlayer = $pkg.ColorBlue;
		$pkg.ColorFgProjectile = $pkg.ColorBlue;
		$pkg.ColorFgSimellas = $pkg.ColorYellow;
		$pkg.ColorFgSleepingMonster = $pkg.ColorViolet;
		$pkg.ColorFgStatusBad = $pkg.ColorRed;
		$pkg.ColorFgStatusGood = $pkg.ColorBlue;
		$pkg.ColorFgStatusOther = $pkg.ColorYellow;
		$pkg.ColorFgTargetMode = $pkg.ColorCyan;
		$pkg.ColorFgWanderingMonster = $pkg.ColorOrange;
	};
	$pkg.LinkColors = LinkColors;
	SolarizedPalette = function() {
		$pkg.ColorBase03 = 8;
		$pkg.ColorBase02 = 0;
		$pkg.ColorBase01 = 10;
		$pkg.ColorBase00 = 11;
		$pkg.ColorBase0 = 12;
		$pkg.ColorBase1 = 14;
		$pkg.ColorBase2 = 7;
		$pkg.ColorBase3 = 15;
		$pkg.ColorYellow = 3;
		$pkg.ColorOrange = 9;
		$pkg.ColorRed = 1;
		$pkg.ColorMagenta = 5;
		$pkg.ColorViolet = 13;
		$pkg.ColorBlue = 4;
		$pkg.ColorCyan = 6;
		$pkg.ColorGreen = 2;
	};
	$pkg.SolarizedPalette = SolarizedPalette;
	termui.ptr.prototype.DrawWelcome = function() {
		var ColorText, _r, _r$1, col, line, rcol, ui, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; ColorText = $f.ColorText; _r = $f._r; _r$1 = $f._r$1; col = $f.col; line = $f.line; rcol = $f.rcol; ui = $f.ui; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		ui = this;
		ui.Clear();
		col = 10;
		line = 5;
		rcol = col + 20 >> 0;
		ColorText = $pkg.ColorFgHPok;
		_r = fmt.Sprintf("       Boohu %s", new sliceType$7([new $String($pkg.Version)])); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$r = ui.DrawDark(_r, col, line - 2 >> 0, ColorText); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		ui.DrawDark("\xE2\x94\x80\xE2\x94\x80\xE2\x94\x80\xE2\x94\x80\xE2\x94\x82\\/\\/\\/\\/\\/\\/\\/\xE2\x94\x82\xE2\x94\x80\xE2\x94\x80\xE2\x94\x80\xE2\x94\x80", col, line, ColorText);
		line = line + (1) >> 0;
		ui.DrawDark("##", col, line, $pkg.ColorFgDark);
		ui.DrawLight("#", col + 2 >> 0, line, $pkg.ColorFgLOS);
		ui.DrawLightAlt("#", col + 3 >> 0, line, $pkg.ColorFgLOS);
		ui.DrawDark("\xE2\x94\x82              \xE2\x94\x82", col + 4 >> 0, line, ColorText);
		ui.DrawDark("####", rcol, line, $pkg.ColorFgDark);
		line = line + (1) >> 0;
		ui.DrawDark("#.", col, line, $pkg.ColorFgDark);
		ui.DrawLightAlt(".", col + 2 >> 0, line, $pkg.ColorFgLOS);
		ui.DrawLight(".", col + 3 >> 0, line, $pkg.ColorFgLOS);
		ui.DrawDark("\xE2\x94\x82              \xE2\x94\x82", col + 4 >> 0, line, ColorText);
		ui.DrawDark(".", rcol, line, $pkg.ColorFgDark);
		ui.DrawDark("\xE2\x99\xA3", rcol + 1 >> 0, line, $pkg.ColorFgSimellas);
		ui.DrawDark(".#", rcol + 2 >> 0, line, $pkg.ColorFgDark);
		line = line + (1) >> 0;
		ui.DrawDark("##", col, line, $pkg.ColorFgDark);
		ui.DrawLight("!", col + 2 >> 0, line, $pkg.ColorFgCollectable);
		ui.DrawLightAlt(".", col + 3 >> 0, line, $pkg.ColorFgLOS);
		ui.DrawDark("\xE2\x94\x82              \xE2\x94\x82", col + 4 >> 0, line, ColorText);
		ui.DrawDark("\xE2\x94\x82  BREAK       \xE2\x94\x82", col + 4 >> 0, line, ColorText);
		ui.DrawDark(".###", rcol, line, $pkg.ColorFgDark);
		line = line + (1) >> 0;
		ui.DrawDark(" #", col, line, $pkg.ColorFgDark);
		ui.DrawLightAlt("g", col + 2 >> 0, line, $pkg.ColorFgMonster);
		ui.DrawLight("G", col + 3 >> 0, line, $pkg.ColorFgMonster);
		ui.DrawDark("\xE2\x94\x82  OUT OF      \xE2\x94\x82", col + 4 >> 0, line, ColorText);
		ui.DrawDark("##  ", rcol, line, $pkg.ColorFgDark);
		line = line + (1) >> 0;
		ui.DrawLight("#", col, line, $pkg.ColorFgLOS);
		ui.DrawLightAlt("#", col + 1 >> 0, line, $pkg.ColorFgLOS);
		ui.DrawLight("D", col + 2 >> 0, line, $pkg.ColorFgMonster);
		ui.DrawLightAlt("g", col + 3 >> 0, line, $pkg.ColorFgMonster);
		ui.DrawDark("\xE2\x94\x82  HAREKA'S    \xE2\x94\x82", col + 4 >> 0, line, ColorText);
		ui.DrawDark(".## ", rcol, line, $pkg.ColorFgDark);
		line = line + (1) >> 0;
		ui.DrawLightAlt("#", col, line, $pkg.ColorFgLOS);
		ui.DrawLight("@", col + 1 >> 0, line, $pkg.ColorFgPlayer);
		ui.DrawLightAlt("#", col + 2 >> 0, line, $pkg.ColorFgLOS);
		ui.DrawDark("#", col + 3 >> 0, line, $pkg.ColorFgDark);
		ui.DrawDark("\xE2\x94\x82  UNDERGROUND \xE2\x94\x82", col + 4 >> 0, line, ColorText);
		ui.DrawDark("\".##", rcol, line, $pkg.ColorFgDark);
		line = line + (1) >> 0;
		ui.DrawLight("#", col, line, $pkg.ColorFgLOS);
		ui.DrawLightAlt(".", col + 1 >> 0, line, $pkg.ColorFgLOS);
		ui.DrawLight("#", col + 2 >> 0, line, $pkg.ColorFgLOS);
		ui.DrawDark("#", col + 3 >> 0, line, $pkg.ColorFgDark);
		ui.DrawDark("\xE2\x94\x82              \xE2\x94\x82", col + 4 >> 0, line, ColorText);
		ui.DrawDark("#.", rcol, line, $pkg.ColorFgDark);
		ui.DrawDark(">", rcol + 2 >> 0, line, $pkg.ColorFgPlace);
		ui.DrawDark("#", rcol + 3 >> 0, line, $pkg.ColorFgDark);
		line = line + (1) >> 0;
		ui.DrawLightAlt("#", col, line, $pkg.ColorFgLOS);
		ui.DrawLight("[", col + 1 >> 0, line, $pkg.ColorFgCollectable);
		ui.DrawLightAlt(".", col + 2 >> 0, line, $pkg.ColorFgLOS);
		ui.DrawDark("##", col + 3 >> 0, line, $pkg.ColorFgDark);
		ui.DrawDark("\xE2\x94\x82              \xE2\x94\x82", col + 4 >> 0, line, $pkg.ColorFgHPok);
		ui.DrawDark("\"\"##", rcol, line, $pkg.ColorFgDark);
		line = line + (1) >> 0;
		ui.DrawDark("\xE2\x94\x80\xE2\x94\x80\xE2\x94\x80\xE2\x94\x80\xE2\x94\x82/\\/\\/\\/\\/\\/\\/\\\xE2\x94\x82\xE2\x94\x80\xE2\x94\x80\xE2\x94\x80\xE2\x94\x80", col, line, ColorText);
		line = line + (1) >> 0;
		line = line + (1) >> 0;
		ui.DrawDark("\xE2\x94\x80\xE2\x94\x80\xE2\x94\x80Press any key to continue\xE2\x94\x80\xE2\x94\x80\xE2\x94\x80", col - 3 >> 0, line, $pkg.ColorFg);
		ui.Flush();
		_r$1 = ui.PressAnyKey(); /* */ $s = 3; case 3: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$1;
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: termui.ptr.prototype.DrawWelcome }; } $f.ColorText = ColorText; $f._r = _r; $f._r$1 = _r$1; $f.col = col; $f.line = line; $f.rcol = rcol; $f.ui = ui; $f.$s = $s; $f.$r = $r; return $f;
	};
	termui.prototype.DrawWelcome = function() { return this.$val.DrawWelcome(); };
	termui.ptr.prototype.DrawColored = function(text, x, y, fg, bg) {
		var _i, _ref, _rune, bg, col, fg, r, text, ui, x, y;
		ui = this;
		col = 0;
		_ref = text;
		_i = 0;
		while (true) {
			if (!(_i < _ref.length)) { break; }
			_rune = $decodeRune(_ref, _i);
			r = _rune[0];
			ui.SetCell(x + col >> 0, y, r, fg, bg);
			col = col + (1) >> 0;
			_i += _rune[1];
		}
	};
	termui.prototype.DrawColored = function(text, x, y, fg, bg) { return this.$val.DrawColored(text, x, y, fg, bg); };
	termui.ptr.prototype.DrawDark = function(text, x, y, fg) {
		var _i, _ref, _rune, col, fg, r, text, ui, x, y;
		ui = this;
		col = 0;
		_ref = text;
		_i = 0;
		while (true) {
			if (!(_i < _ref.length)) { break; }
			_rune = $decodeRune(_ref, _i);
			r = _rune[0];
			ui.SetCell(x + col >> 0, y, r, fg, $pkg.ColorBgDark);
			col = col + (1) >> 0;
			_i += _rune[1];
		}
	};
	termui.prototype.DrawDark = function(text, x, y, fg) { return this.$val.DrawDark(text, x, y, fg); };
	termui.ptr.prototype.DrawLight = function(text, x, y, fg) {
		var _i, _ref, _rune, col, fg, r, text, ui, x, y;
		ui = this;
		col = 0;
		_ref = text;
		_i = 0;
		while (true) {
			if (!(_i < _ref.length)) { break; }
			_rune = $decodeRune(_ref, _i);
			r = _rune[0];
			ui.SetCell(x + col >> 0, y, r, fg, $pkg.ColorBgLOS);
			col = col + (1) >> 0;
			_i += _rune[1];
		}
	};
	termui.prototype.DrawLight = function(text, x, y, fg) { return this.$val.DrawLight(text, x, y, fg); };
	termui.ptr.prototype.DrawLightAlt = function(text, x, y, fg) {
		var _i, _ref, _rune, col, fg, r, text, ui, x, y;
		ui = this;
		col = 0;
		_ref = text;
		_i = 0;
		while (true) {
			if (!(_i < _ref.length)) { break; }
			_rune = $decodeRune(_ref, _i);
			r = _rune[0];
			ui.SetCell(x + col >> 0, y, r, fg, $pkg.ColorBgLOSalt);
			col = col + (1) >> 0;
			_i += _rune[1];
		}
	};
	termui.prototype.DrawLightAlt = function(text, x, y, fg) { return this.$val.DrawLightAlt(text, x, y, fg); };
	termui.ptr.prototype.EnterWizard = function(g) {
		var _r, g, ui, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; g = $f.g; ui = $f.ui; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		ui = this;
		_r = ui.Wizard(g); /* */ $s = 4; case 4: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ if (_r) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (_r) { */ case 1:
			g.WizardMode();
			$r = ui.DrawDungeonView(g, 0); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 3; continue;
		/* } else { */ case 2:
			g.Print("Do nothing, then.");
		/* } */ case 3:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: termui.ptr.prototype.EnterWizard }; } $f._r = _r; $f.g = g; $f.ui = ui; $f.$s = $s; $f.$r = $r; return $f;
	};
	termui.prototype.EnterWizard = function(g) { return this.$val.EnterWizard(g); };
	termui.ptr.prototype.CleanError = function(err) {
		var _r, _v, err, ui, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _v = $f._v; err = $f.err; ui = $f.ui; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		ui = this;
		if (!(!($interfaceIsEqual(err, $ifaceNil)))) { _v = false; $s = 3; continue s; }
		_r = err.Error(); /* */ $s = 4; case 4: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_v = _r === "Do nothing, then."; case 3:
		/* */ if (_v) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (_v) { */ case 1:
			err = errors.New("");
		/* } */ case 2:
		$s = -1; return err;
		/* */ } return; } if ($f === undefined) { $f = { $blk: termui.ptr.prototype.CleanError }; } $f._r = _r; $f._v = _v; $f.err = err; $f.ui = ui; $f.$s = $s; $f.$r = $r; return $f;
	};
	termui.prototype.CleanError = function(err) { return this.$val.CleanError(err); };
	FixedRuneKey = function(r) {
		var _1, r;
		_1 = r;
		if ((_1 === (32)) || (_1 === (63)) || (_1 === (61))) {
			return true;
		} else {
			return false;
		}
	};
	$pkg.FixedRuneKey = FixedRuneKey;
	keyAction.prototype.NormalModeKey = function() {
		var _1, k;
		k = this.$val;
		_1 = k;
		if ((_1 === (1)) || (_1 === (2)) || (_1 === (3)) || (_1 === (4)) || (_1 === (5)) || (_1 === (6)) || (_1 === (7)) || (_1 === (8)) || (_1 === (9)) || (_1 === (10)) || (_1 === (11)) || (_1 === (12)) || (_1 === (13)) || (_1 === (14)) || (_1 === (15)) || (_1 === (16)) || (_1 === (17)) || (_1 === (18)) || (_1 === (19)) || (_1 === (20)) || (_1 === (21)) || (_1 === (22)) || (_1 === (23)) || (_1 === (24)) || (_1 === (25)) || (_1 === (26)) || (_1 === (27)) || (_1 === (28)) || (_1 === (29)) || (_1 === (30)) || (_1 === (31)) || (_1 === (32)) || (_1 === (33)) || (_1 === (34))) {
			return true;
		} else {
			return false;
		}
	};
	$ptrType(keyAction).prototype.NormalModeKey = function() { return new keyAction(this.$get()).NormalModeKey(); };
	keyAction.prototype.NormalModeDescription = function() {
		var _1, k, text;
		text = "";
		k = this.$val;
		_1 = k;
		if (_1 === (1)) {
			text = "Move west";
		} else if (_1 === (2)) {
			text = "Move south";
		} else if (_1 === (3)) {
			text = "Move north";
		} else if (_1 === (4)) {
			text = "Move east";
		} else if (_1 === (5)) {
			text = "Move north west";
		} else if (_1 === (6)) {
			text = "Move north east";
		} else if (_1 === (7)) {
			text = "Move south west";
		} else if (_1 === (8)) {
			text = "Move south east";
		} else if (_1 === (9)) {
			text = "Travel west";
		} else if (_1 === (10)) {
			text = "Travel south";
		} else if (_1 === (11)) {
			text = "Travel north";
		} else if (_1 === (12)) {
			text = "Travel east";
		} else if (_1 === (13)) {
			text = "Travel north west";
		} else if (_1 === (14)) {
			text = "Travel north east";
		} else if (_1 === (15)) {
			text = "Travel south west";
		} else if (_1 === (16)) {
			text = "Travel south east";
		} else if (_1 === (17)) {
			text = "Rest";
		} else if (_1 === (18)) {
			text = "Wait a turn";
		} else if (_1 === (19)) {
			text = "Use stairs";
		} else if (_1 === (20)) {
			text = "Go to nearest stairs";
		} else if (_1 === (21)) {
			text = "Autoexplore";
		} else if (_1 === (22)) {
			text = "Examine";
		} else if (_1 === (23)) {
			text = "Equip weapon/armour/...";
		} else if (_1 === (24)) {
			text = "Quaff potion";
		} else if (_1 === (25)) {
			text = "Throw item";
		} else if (_1 === (26)) {
			text = "Evoke rod";
		} else if (_1 === (27)) {
			text = "View Character and Quest Information";
		} else if (_1 === (28)) {
			text = "View previous messages";
		} else if (_1 === (29)) {
			text = "Write character dump to file";
		} else if (_1 === (31)) {
			text = "Save and Quit";
		} else if (_1 === (32)) {
			text = "Quit without saving";
		} else if (_1 === (30)) {
			text = "Help";
		} else if (_1 === (33)) {
			text = "Wizard (debug) mode";
		} else if (_1 === (34)) {
			text = "Wizard (debug) mode information";
		}
		text = text;
		return text;
	};
	$ptrType(keyAction).prototype.NormalModeDescription = function() { return new keyAction(this.$get()).NormalModeDescription(); };
	keyAction.prototype.TargetingModeDescription = function() {
		var _1, k, text;
		text = "";
		k = this.$val;
		_1 = k;
		if (_1 === (1)) {
			text = "Move cursor west";
		} else if (_1 === (2)) {
			text = "Move cursor south";
		} else if (_1 === (3)) {
			text = "Move cursor north";
		} else if (_1 === (4)) {
			text = "Move cursor east";
		} else if (_1 === (5)) {
			text = "Move cursor north west";
		} else if (_1 === (6)) {
			text = "Move cursor north east";
		} else if (_1 === (7)) {
			text = "Move cursor south west";
		} else if (_1 === (8)) {
			text = "Move cursor south east";
		} else if (_1 === (9)) {
			text = "Big move cursor west";
		} else if (_1 === (10)) {
			text = "Big move cursor south";
		} else if (_1 === (11)) {
			text = "Big move north";
		} else if (_1 === (12)) {
			text = "Big move east";
		} else if (_1 === (13)) {
			text = "Big move north west";
		} else if (_1 === (14)) {
			text = "Big move north east";
		} else if (_1 === (15)) {
			text = "Big move south west";
		} else if (_1 === (16)) {
			text = "Big move south east";
		} else if (_1 === (19)) {
			text = "Target next stair";
		} else if (_1 === (35)) {
			text = "Target previous monster";
		} else if (_1 === (36)) {
			text = "Target next monster";
		} else if (_1 === (37)) {
			text = "Target next object";
		} else if (_1 === (38)) {
			text = "View target description";
		} else if (_1 === (39)) {
			text = "Go to/select target";
		} else if (_1 === (40)) {
			text = "Toggle exclude area from auto-travel";
		} else if (_1 === (41)) {
			text = "Quit targeting mode";
		}
		text = text;
		return text;
	};
	$ptrType(keyAction).prototype.TargetingModeDescription = function() { return new keyAction(this.$get()).TargetingModeDescription(); };
	keyAction.prototype.TargetingModeKey = function() {
		var _1, k;
		k = this.$val;
		_1 = k;
		if ((_1 === (1)) || (_1 === (2)) || (_1 === (3)) || (_1 === (4)) || (_1 === (5)) || (_1 === (6)) || (_1 === (7)) || (_1 === (8)) || (_1 === (9)) || (_1 === (10)) || (_1 === (11)) || (_1 === (12)) || (_1 === (13)) || (_1 === (14)) || (_1 === (15)) || (_1 === (16)) || (_1 === (19)) || (_1 === (35)) || (_1 === (36)) || (_1 === (37)) || (_1 === (38)) || (_1 === (39)) || (_1 === (40)) || (_1 === (41))) {
			return true;
		} else {
			return false;
		}
	};
	$ptrType(keyAction).prototype.TargetingModeKey = function() { return new keyAction(this.$get()).TargetingModeKey(); };
	ApplyDefaultKeyBindings = function() {
		runeNormalKeyActions = $makeMap($Int32.keyFor, [{ k: 104, v: 1 }, { k: 106, v: 2 }, { k: 107, v: 3 }, { k: 108, v: 4 }, { k: 121, v: 5 }, { k: 117, v: 6 }, { k: 98, v: 7 }, { k: 110, v: 8 }, { k: 52, v: 1 }, { k: 50, v: 2 }, { k: 56, v: 3 }, { k: 54, v: 4 }, { k: 55, v: 5 }, { k: 57, v: 6 }, { k: 49, v: 7 }, { k: 51, v: 8 }, { k: 72, v: 9 }, { k: 74, v: 10 }, { k: 75, v: 11 }, { k: 76, v: 12 }, { k: 89, v: 13 }, { k: 85, v: 14 }, { k: 66, v: 15 }, { k: 78, v: 16 }, { k: 46, v: 18 }, { k: 53, v: 18 }, { k: 114, v: 17 }, { k: 62, v: 19 }, { k: 68, v: 19 }, { k: 71, v: 20 }, { k: 111, v: 21 }, { k: 120, v: 22 }, { k: 101, v: 23 }, { k: 103, v: 23 }, { k: 44, v: 23 }, { k: 113, v: 24 }, { k: 97, v: 24 }, { k: 116, v: 25 }, { k: 102, v: 25 }, { k: 118, v: 26 }, { k: 122, v: 26 }, { k: 37, v: 27 }, { k: 67, v: 27 }, { k: 109, v: 28 }, { k: 35, v: 29 }, { k: 63, v: 30 }, { k: 83, v: 31 }, { k: 81, v: 32 }, { k: 87, v: 33 }, { k: 64, v: 34 }, { k: 61, v: 42 }, { k: 77, v: 43 }]);
		runeTargetingKeyActions = $makeMap($Int32.keyFor, [{ k: 104, v: 1 }, { k: 106, v: 2 }, { k: 107, v: 3 }, { k: 108, v: 4 }, { k: 121, v: 5 }, { k: 117, v: 6 }, { k: 98, v: 7 }, { k: 110, v: 8 }, { k: 52, v: 1 }, { k: 50, v: 2 }, { k: 56, v: 3 }, { k: 54, v: 4 }, { k: 55, v: 5 }, { k: 57, v: 6 }, { k: 49, v: 7 }, { k: 51, v: 8 }, { k: 72, v: 9 }, { k: 74, v: 10 }, { k: 75, v: 11 }, { k: 76, v: 12 }, { k: 89, v: 13 }, { k: 85, v: 14 }, { k: 66, v: 15 }, { k: 78, v: 16 }, { k: 62, v: 19 }, { k: 68, v: 19 }, { k: 45, v: 35 }, { k: 43, v: 36 }, { k: 111, v: 37 }, { k: 118, v: 38 }, { k: 100, v: 38 }, { k: 46, v: 39 }, { k: 101, v: 40 }, { k: 32, v: 41 }, { k: 27, v: 41 }, { k: 63, v: 30 }, { k: 77, v: 43 }]);
		$pkg.CustomKeys = false;
	};
	$pkg.ApplyDefaultKeyBindings = ApplyDefaultKeyBindings;
	termui.ptr.prototype.HandleKeyAction = function(g, rka) {
		var _1, _entry, _r, _r$1, _r$2, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tuple, _tuple$1, _tuple$2, again, err, g, ok, quit, rka, ui, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _entry = $f._entry; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; again = $f.again; err = $f.err; g = $f.g; ok = $f.ok; quit = $f.quit; rka = $f.rka; ui = $f.ui; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		err = $ifaceNil;
		again = false;
		quit = false;
		ui = this;
		/* */ if (!((rka.r === 0))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!((rka.r === 0))) { */ case 1:
			ok = false;
			_tuple = (_entry = runeNormalKeyActions[$Int32.keyFor(rka.r)], _entry !== undefined ? [_entry.v, true] : [0, false]);
			rka.k = _tuple[0];
			ok = _tuple[1];
			/* */ if (!ok) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (!ok) { */ case 3:
					_1 = rka.r;
					/* */ if (_1 === (115)) { $s = 6; continue; }
					/* */ $s = 7; continue;
					/* if (_1 === (115)) { */ case 6:
						err = errors.New("Unknown key. Did you mean capital S for save and quit?");
						$s = 8; continue;
					/* } else { */ case 7:
						_r = fmt.Errorf("Unknown key '%c'. Type ? for help.", new sliceType$7([new $Int32(rka.r)])); /* */ $s = 9; case 9: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
						err = _r;
					/* } */ case 8:
				case 5:
				_tmp = err;
				_tmp$1 = again;
				_tmp$2 = quit;
				err = _tmp;
				again = _tmp$1;
				quit = _tmp$2;
				$s = -1; return [err, again, quit];
			/* } */ case 4:
		/* } */ case 2:
		/* */ if (rka.k === 43) { $s = 10; continue; }
		/* */ $s = 11; continue;
		/* if (rka.k === 43) { */ case 10:
			_r$1 = ui.SelectAction(g, menuActions, g.Ev); /* */ $s = 12; case 12: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_tuple$1 = _r$1;
			rka.k = _tuple$1[0];
			err = _tuple$1[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				_tmp$3 = err;
				_tmp$4 = again;
				_tmp$5 = quit;
				err = _tmp$3;
				again = _tmp$4;
				quit = _tmp$5;
				$s = -1; return [err, again, quit];
			}
		/* } */ case 11:
		_r$2 = ui.HandleKey(g, $clone(rka, runeKeyAction)); /* */ $s = 13; case 13: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_tuple$2 = _r$2;
		err = _tuple$2[0];
		again = _tuple$2[1];
		quit = _tuple$2[2];
		$s = -1; return [err, again, quit];
		/* */ } return; } if ($f === undefined) { $f = { $blk: termui.ptr.prototype.HandleKeyAction }; } $f._1 = _1; $f._entry = _entry; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f.again = again; $f.err = err; $f.g = g; $f.ok = ok; $f.quit = quit; $f.rka = rka; $f.ui = ui; $f.$s = $s; $f.$r = $r; return $f;
	};
	termui.prototype.HandleKeyAction = function(g, rka) { return this.$val.HandleKeyAction(g, rka); };
	termui.ptr.prototype.HandleKey = function(g, rka) {
		var _1, _entry, _r, _r$1, _r$10, _r$11, _r$12, _r$13, _r$14, _r$15, _r$16, _r$17, _r$18, _r$19, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tuple, _tuple$1, _v, again, dataDir, err, err$1, err$2, ex, g, quit, rka, sortedStairs, stair, stairs, ui, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _entry = $f._entry; _r = $f._r; _r$1 = $f._r$1; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$12 = $f._r$12; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _r$17 = $f._r$17; _r$18 = $f._r$18; _r$19 = $f._r$19; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$10 = $f._tmp$10; _tmp$11 = $f._tmp$11; _tmp$12 = $f._tmp$12; _tmp$13 = $f._tmp$13; _tmp$14 = $f._tmp$14; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; _tmp$6 = $f._tmp$6; _tmp$7 = $f._tmp$7; _tmp$8 = $f._tmp$8; _tmp$9 = $f._tmp$9; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _v = $f._v; again = $f.again; dataDir = $f.dataDir; err = $f.err; err$1 = $f.err$1; err$2 = $f.err$2; ex = $f.ex; g = $f.g; quit = $f.quit; rka = $f.rka; sortedStairs = $f.sortedStairs; stair = $f.stair; stairs = $f.stairs; ui = $f.ui; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		err = $ifaceNil;
		again = false;
		quit = false;
		ui = this;
			_1 = rka.k;
			/* */ if ((_1 === (1)) || (_1 === (2)) || (_1 === (3)) || (_1 === (4)) || (_1 === (5)) || (_1 === (6)) || (_1 === (7)) || (_1 === (8))) { $s = 2; continue; }
			/* */ if ((_1 === (9)) || (_1 === (10)) || (_1 === (11)) || (_1 === (12)) || (_1 === (13)) || (_1 === (14)) || (_1 === (15)) || (_1 === (16))) { $s = 3; continue; }
			/* */ if (_1 === (18)) { $s = 4; continue; }
			/* */ if (_1 === (17)) { $s = 5; continue; }
			/* */ if (_1 === (19)) { $s = 6; continue; }
			/* */ if (_1 === (20)) { $s = 7; continue; }
			/* */ if (_1 === (23)) { $s = 8; continue; }
			/* */ if (_1 === (24)) { $s = 9; continue; }
			/* */ if (_1 === (25)) { $s = 10; continue; }
			/* */ if (_1 === (26)) { $s = 11; continue; }
			/* */ if (_1 === (21)) { $s = 12; continue; }
			/* */ if (_1 === (22)) { $s = 13; continue; }
			/* */ if (_1 === (30)) { $s = 14; continue; }
			/* */ if (_1 === (27)) { $s = 15; continue; }
			/* */ if (_1 === (28)) { $s = 16; continue; }
			/* */ if (_1 === (31)) { $s = 17; continue; }
			/* */ if (_1 === (29)) { $s = 18; continue; }
			/* */ if (_1 === (34)) { $s = 19; continue; }
			/* */ if (_1 === (33)) { $s = 20; continue; }
			/* */ if (_1 === (32)) { $s = 21; continue; }
			/* */ if (_1 === (42)) { $s = 22; continue; }
			/* */ $s = 23; continue;
			/* if ((_1 === (1)) || (_1 === (2)) || (_1 === (3)) || (_1 === (4)) || (_1 === (5)) || (_1 === (6)) || (_1 === (7)) || (_1 === (8))) { */ case 2:
				_r = g.MovePlayer($clone($clone(g.Player.Pos, position).To(KeyToDir(rka.k)), position), g.Ev); /* */ $s = 25; case 25: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				err = _r;
				$s = 24; continue;
			/* } else if ((_1 === (9)) || (_1 === (10)) || (_1 === (11)) || (_1 === (12)) || (_1 === (13)) || (_1 === (14)) || (_1 === (15)) || (_1 === (16))) { */ case 3:
				_r$1 = g.GoToDir(KeyToDir(rka.k), g.Ev); /* */ $s = 26; case 26: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				err = _r$1;
				$s = 24; continue;
			/* } else if (_1 === (18)) { */ case 4:
				$r = g.WaitTurn(g.Ev); /* */ $s = 27; case 27: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 24; continue;
			/* } else if (_1 === (17)) { */ case 5:
				_r$2 = g.Rest(g.Ev); /* */ $s = 28; case 28: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				err = _r$2;
				$s = 24; continue;
			/* } else if (_1 === (19)) { */ case 6:
				/* */ if ((_entry = g.Stairs[position.keyFor(g.Player.Pos)], _entry !== undefined ? _entry.v : false)) { $s = 29; continue; }
				/* */ $s = 30; continue;
				/* if ((_entry = g.Stairs[position.keyFor(g.Player.Pos)], _entry !== undefined ? _entry.v : false)) { */ case 29:
					_r$3 = g.Descend(); /* */ $s = 34; case 34: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
					/* */ if (_r$3) { $s = 32; continue; }
					/* */ $s = 33; continue;
					/* if (_r$3) { */ case 32:
						$r = ui.Win(g); /* */ $s = 35; case 35: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						quit = true;
						_tmp = err;
						_tmp$1 = again;
						_tmp$2 = quit;
						err = _tmp;
						again = _tmp$1;
						quit = _tmp$2;
						$s = -1; return [err, again, quit];
					/* } */ case 33:
					$r = ui.DrawDungeonView(g, 0); /* */ $s = 36; case 36: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$s = 31; continue;
				/* } else { */ case 30:
					err = errors.New("No stairs here.");
				/* } */ case 31:
				$s = 24; continue;
			/* } else if (_1 === (20)) { */ case 7:
				stairs = g.StairsSlice();
				_r$4 = g.SortedNearestTo(stairs, $clone(g.Player.Pos, position)); /* */ $s = 37; case 37: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				sortedStairs = _r$4;
				/* */ if (sortedStairs.$length > 0) { $s = 38; continue; }
				/* */ $s = 39; continue;
				/* if (sortedStairs.$length > 0) { */ case 38:
					stair = $clone((0 >= sortedStairs.$length ? ($throwRuntimeError("index out of range"), undefined) : sortedStairs.$array[sortedStairs.$offset + 0]), position);
					if ($equal(g.Player.Pos, stair, position)) {
						err = errors.New("You are already on the stairs.");
						/* break; */ $s = 1; continue;
					}
					ex = new examiner.ptr(false, true);
					_r$5 = ex.Action(g, $clone(stair, position)); /* */ $s = 41; case 41: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
					err = _r$5;
					if (!($interfaceIsEqual(err, $ifaceNil))) { _v = false; $s = 44; continue s; }
					_r$6 = g.MoveToTarget(g.Ev); /* */ $s = 45; case 45: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
					_v = !_r$6; case 44:
					/* */ if (_v) { $s = 42; continue; }
					/* */ $s = 43; continue;
					/* if (_v) { */ case 42:
						err = errors.New("You could not move toward stairs.");
					/* } */ case 43:
					if (ex.Done()) {
						g.Targeting = ptrType$1.nil;
					}
					$s = 40; continue;
				/* } else { */ case 39:
					err = errors.New("You cannot go to any stairs.");
				/* } */ case 40:
				$s = 24; continue;
			/* } else if (_1 === (23)) { */ case 8:
				_r$7 = ui.Equip(g, g.Ev); /* */ $s = 46; case 46: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
				err = _r$7;
				$s = 24; continue;
			/* } else if (_1 === (24)) { */ case 9:
				_r$8 = ui.SelectPotion(g, g.Ev); /* */ $s = 47; case 47: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
				err = _r$8;
				_r$9 = ui.CleanError(err); /* */ $s = 48; case 48: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
				err = _r$9;
				$s = 24; continue;
			/* } else if (_1 === (25)) { */ case 10:
				_r$10 = ui.SelectProjectile(g, g.Ev); /* */ $s = 49; case 49: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
				err = _r$10;
				_r$11 = ui.CleanError(err); /* */ $s = 50; case 50: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
				err = _r$11;
				$s = 24; continue;
			/* } else if (_1 === (26)) { */ case 11:
				_r$12 = ui.SelectRod(g, g.Ev); /* */ $s = 51; case 51: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }
				err = _r$12;
				_r$13 = ui.CleanError(err); /* */ $s = 52; case 52: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
				err = _r$13;
				$s = 24; continue;
			/* } else if (_1 === (21)) { */ case 12:
				_r$14 = g.Autoexplore(g.Ev); /* */ $s = 53; case 53: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
				err = _r$14;
				$s = 24; continue;
			/* } else if (_1 === (22)) { */ case 13:
				_r$15 = ui.Examine(g, ptrType$1.nil); /* */ $s = 54; case 54: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
				_tuple = _r$15;
				err = _tuple[0];
				again = _tuple[1];
				quit = _tuple[2];
				$r = ui.DrawDungeonView(g, 0); /* */ $s = 55; case 55: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 24; continue;
			/* } else if (_1 === (30)) { */ case 14:
				$r = ui.KeysHelp(g); /* */ $s = 56; case 56: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				again = true;
				$s = 24; continue;
			/* } else if (_1 === (27)) { */ case 15:
				$r = ui.CharacterInfo(g); /* */ $s = 57; case 57: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				again = true;
				$s = 24; continue;
			/* } else if (_1 === (28)) { */ case 16:
				$r = ui.DrawPreviousLogs(g); /* */ $s = 58; case 58: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				again = true;
				$s = 24; continue;
			/* } else if (_1 === (31)) { */ case 17:
				$r = g.Ev.Renew(g, 0); /* */ $s = 59; case 59: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				_r$16 = g.Save(); /* */ $s = 60; case 60: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
				err$1 = _r$16;
				/* */ if (!($interfaceIsEqual(err$1, $ifaceNil))) { $s = 61; continue; }
				/* */ $s = 62; continue;
				/* if (!($interfaceIsEqual(err$1, $ifaceNil))) { */ case 61:
					$r = g.PrintfStyled("Error: %v", 6, new sliceType$7([err$1])); /* */ $s = 63; case 63: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					g.PrintStyled("Could not save game. --press any key to continue--", 6);
					$r = ui.DrawDungeonView(g, 0); /* */ $s = 64; case 64: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					_r$17 = ui.PressAnyKey(); /* */ $s = 65; case 65: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }
					_r$17;
				/* } */ case 62:
				quit = true;
				$s = 24; continue;
			/* } else if (_1 === (29)) { */ case 18:
				err$2 = g.WriteDump();
				/* */ if (!($interfaceIsEqual(err$2, $ifaceNil))) { $s = 66; continue; }
				/* */ $s = 67; continue;
				/* if (!($interfaceIsEqual(err$2, $ifaceNil))) { */ case 66:
					g.PrintStyled("Error writing dump to file.", 6);
					$s = 68; continue;
				/* } else { */ case 67:
					_tuple$1 = g.DataDir();
					dataDir = _tuple$1[0];
					$r = g.Printf("Dump written to %s.", new sliceType$7([new $String(filepath.Join(new sliceType$3([dataDir, "dump"])))])); /* */ $s = 69; case 69: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 68:
				again = true;
				$s = 24; continue;
			/* } else if (_1 === (34)) { */ case 19:
				/* */ if (g.Wizard) { $s = 70; continue; }
				/* */ $s = 71; continue;
				/* if (g.Wizard) { */ case 70:
					$r = ui.WizardInfo(g); /* */ $s = 73; case 73: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					again = true;
					$s = 72; continue;
				/* } else { */ case 71:
					err = errors.New("Unknown key. Type ? for help.");
				/* } */ case 72:
				$s = 24; continue;
			/* } else if (_1 === (33)) { */ case 20:
				$r = ui.EnterWizard(g); /* */ $s = 74; case 74: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				_tmp$3 = $ifaceNil;
				_tmp$4 = true;
				_tmp$5 = false;
				err = _tmp$3;
				again = _tmp$4;
				quit = _tmp$5;
				$s = -1; return [err, again, quit];
			/* } else if (_1 === (32)) { */ case 21:
				_r$18 = ui.Quit(g); /* */ $s = 77; case 77: if($c) { $c = false; _r$18 = _r$18.$blk(); } if (_r$18 && _r$18.$blk !== undefined) { break s; }
				/* */ if (_r$18) { $s = 75; continue; }
				/* */ $s = 76; continue;
				/* if (_r$18) { */ case 75:
					_tmp$6 = $ifaceNil;
					_tmp$7 = false;
					_tmp$8 = true;
					err = _tmp$6;
					again = _tmp$7;
					quit = _tmp$8;
					$s = -1; return [err, again, quit];
				/* } */ case 76:
				_tmp$9 = $ifaceNil;
				_tmp$10 = true;
				_tmp$11 = false;
				err = _tmp$9;
				again = _tmp$10;
				quit = _tmp$11;
				$s = -1; return [err, again, quit];
			/* } else if (_1 === (42)) { */ case 22:
				$r = ui.Configure(g); /* */ $s = 78; case 78: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				again = true;
				$s = 24; continue;
			/* } else { */ case 23:
				_r$19 = fmt.Errorf("Unknown key '%c'. Type ? for help.", new sliceType$7([new $Int32(rka.r)])); /* */ $s = 79; case 79: if($c) { $c = false; _r$19 = _r$19.$blk(); } if (_r$19 && _r$19.$blk !== undefined) { break s; }
				err = _r$19;
			/* } */ case 24:
		case 1:
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			again = true;
		}
		_tmp$12 = err;
		_tmp$13 = again;
		_tmp$14 = quit;
		err = _tmp$12;
		again = _tmp$13;
		quit = _tmp$14;
		$s = -1; return [err, again, quit];
		/* */ } return; } if ($f === undefined) { $f = { $blk: termui.ptr.prototype.HandleKey }; } $f._1 = _1; $f._entry = _entry; $f._r = _r; $f._r$1 = _r$1; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$12 = _r$12; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._r$17 = _r$17; $f._r$18 = _r$18; $f._r$19 = _r$19; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$10 = _tmp$10; $f._tmp$11 = _tmp$11; $f._tmp$12 = _tmp$12; $f._tmp$13 = _tmp$13; $f._tmp$14 = _tmp$14; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f._tmp$6 = _tmp$6; $f._tmp$7 = _tmp$7; $f._tmp$8 = _tmp$8; $f._tmp$9 = _tmp$9; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._v = _v; $f.again = again; $f.dataDir = dataDir; $f.err = err; $f.err$1 = err$1; $f.err$2 = err$2; $f.ex = ex; $f.g = g; $f.quit = quit; $f.rka = rka; $f.sortedStairs = sortedStairs; $f.stair = stair; $f.stairs = stairs; $f.ui = ui; $f.$s = $s; $f.$r = $r; return $f;
	};
	termui.prototype.HandleKey = function(g, rka) { return this.$val.HandleKey(g, rka); };
	termui.ptr.prototype.GoToPos = function(g, ev, pos) {
		var _1, _r, _r$1, _r$2, _r$3, _tmp, _tmp$1, _tmp$2, _tmp$3, _v, again, dir, err, ev, ex, g, pos, ui, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _v = $f._v; again = $f.again; dir = $f.dir; err = $f.err; ev = $f.ev; ex = $f.ex; g = $f.g; pos = $f.pos; ui = $f.ui; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		err = $ifaceNil;
		again = false;
		ui = this;
		if (!$clone(pos, position).valid()) {
			_tmp = errors.New("Invalid location.");
			_tmp$1 = true;
			err = _tmp;
			again = _tmp$1;
			$s = -1; return [err, again];
		}
			_1 = $clone(pos, position).Distance($clone(g.Player.Pos, position));
			/* */ if (_1 === (0)) { $s = 2; continue; }
			/* */ if (_1 === (1)) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (_1 === (0)) { */ case 2:
				$r = g.WaitTurn(ev); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 5; continue;
			/* } else if (_1 === (1)) { */ case 3:
				_r = $clone(pos, position).Dir($clone(g.Player.Pos, position)); /* */ $s = 7; case 7: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				dir = _r;
				_r$1 = g.MovePlayer($clone($clone(g.Player.Pos, position).To(dir), position), ev); /* */ $s = 8; case 8: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				err = _r$1;
				if (!($interfaceIsEqual(err, $ifaceNil))) {
					again = true;
				}
				$s = 5; continue;
			/* } else { */ case 4:
				ex = new examiner.ptr(false, false);
				_r$2 = ex.Action(g, $clone(pos, position)); /* */ $s = 9; case 9: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				err = _r$2;
				if (!ex.done) { _v = true; $s = 12; continue s; }
				_r$3 = g.MoveToTarget(ev); /* */ $s = 13; case 13: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				_v = !_r$3; case 12:
				/* */ if (_v) { $s = 10; continue; }
				/* */ $s = 11; continue;
				/* if (_v) { */ case 10:
					again = true;
				/* } */ case 11:
			/* } */ case 5:
		case 1:
		_tmp$2 = err;
		_tmp$3 = again;
		err = _tmp$2;
		again = _tmp$3;
		$s = -1; return [err, again];
		/* */ } return; } if ($f === undefined) { $f = { $blk: termui.ptr.prototype.GoToPos }; } $f._1 = _1; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._v = _v; $f.again = again; $f.dir = dir; $f.err = err; $f.ev = ev; $f.ex = ex; $f.g = g; $f.pos = pos; $f.ui = ui; $f.$s = $s; $f.$r = $r; return $f;
	};
	termui.prototype.GoToPos = function(g, ev, pos) { return this.$val.GoToPos(g, ev, pos); };
	termui.ptr.prototype.ExaminePos = function(g, ev, pos) {
		var _r, _tmp, _tmp$1, _tmp$2, _tuple, again, err, ev, g, pos, quit, start, ui, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tuple = $f._tuple; again = $f.again; err = $f.err; ev = $f.ev; g = $f.g; pos = $f.pos; quit = $f.quit; start = $f.start; ui = $f.ui; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		pos = [pos];
		err = $ifaceNil;
		again = false;
		quit = false;
		ui = this;
		start = ptrType$1.nil;
		if ($clone(pos[0], position).valid()) {
			start = pos[0];
		}
		_r = ui.Examine(g, start); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		err = _tuple[0];
		again = _tuple[1];
		quit = _tuple[2];
		_tmp = err;
		_tmp$1 = again;
		_tmp$2 = quit;
		err = _tmp;
		again = _tmp$1;
		quit = _tmp$2;
		$s = -1; return [err, again, quit];
		/* */ } return; } if ($f === undefined) { $f = { $blk: termui.ptr.prototype.ExaminePos }; } $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tuple = _tuple; $f.again = again; $f.err = err; $f.ev = ev; $f.g = g; $f.pos = pos; $f.quit = quit; $f.start = start; $f.ui = ui; $f.$s = $s; $f.$r = $r; return $f;
	};
	termui.prototype.ExaminePos = function(g, ev, pos) { return this.$val.ExaminePos(g, ev, pos); };
	termui.ptr.prototype.DrawKeysDescription = function(g, title, actions) {
		var _q, _q$1, _q$2, _q$3, _r, _r$1, _r$2, actions, bg, g, i, lines, title, ui, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _q = $f._q; _q$1 = $f._q$1; _q$2 = $f._q$2; _q$3 = $f._q$3; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; actions = $f.actions; bg = $f.bg; g = $f.g; i = $f.i; lines = $f.lines; title = $f.title; ui = $f.ui; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		ui = this;
		$r = ui.DrawDungeonView(g, 2); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ if ($pkg.CustomKeys) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if ($pkg.CustomKeys) { */ case 2:
			_r = fmt.Sprintf(" Default %s ", new sliceType$7([new $String(title)])); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$r = ui.DrawStyledTextLine(_r, 0, 1); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 4; continue;
		/* } else { */ case 3:
			_r$1 = fmt.Sprintf(" %s ", new sliceType$7([new $String(title)])); /* */ $s = 7; case 7: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			$r = ui.DrawStyledTextLine(_r$1, 0, 1); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 4:
		i = 0;
		/* while (true) { */ case 9:
			/* if (!(i < (actions.$length - 1 >> 0))) { break; } */ if(!(i < (actions.$length - 1 >> 0))) { $s = 10; continue; }
			bg = ui.ListItemBG((_q = i / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")));
			ui.ClearLineWithColor((_q$1 = i / 2, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero")) + 1 >> 0, bg);
			_r$2 = fmt.Sprintf(" %-36s %s", new sliceType$7([new $String(((i < 0 || i >= actions.$length) ? ($throwRuntimeError("index out of range"), undefined) : actions.$array[actions.$offset + i])), new $String((x = i + 1 >> 0, ((x < 0 || x >= actions.$length) ? ($throwRuntimeError("index out of range"), undefined) : actions.$array[actions.$offset + x])))])); /* */ $s = 11; case 11: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			$r = ui.DrawColoredTextOnBG(_r$2, 0, (_q$2 = i / 2, (_q$2 === _q$2 && _q$2 !== 1/0 && _q$2 !== -1/0) ? _q$2 >> 0 : $throwRuntimeError("integer divide by zero")) + 1 >> 0, $pkg.ColorFg, bg); /* */ $s = 12; case 12: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			i = i + (2) >> 0;
		/* } */ $s = 9; continue; case 10:
		lines = 1 + (_q$3 = actions.$length / 2, (_q$3 === _q$3 && _q$3 !== 1/0 && _q$3 !== -1/0) ? _q$3 >> 0 : $throwRuntimeError("integer divide by zero")) >> 0;
		ui.DrawTextLine(" press esc or space to continue ", lines);
		ui.Flush();
		$r = ui.WaitForContinue(g, lines); /* */ $s = 13; case 13: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: termui.ptr.prototype.DrawKeysDescription }; } $f._q = _q; $f._q$1 = _q$1; $f._q$2 = _q$2; $f._q$3 = _q$3; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.actions = actions; $f.bg = bg; $f.g = g; $f.i = i; $f.lines = lines; $f.title = title; $f.ui = ui; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	termui.prototype.DrawKeysDescription = function(g, title, actions) { return this.$val.DrawKeysDescription(g, title, actions); };
	termui.ptr.prototype.KeysHelp = function(g) {
		var g, ui, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; g = $f.g; ui = $f.ui; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		ui = this;
		$r = ui.DrawKeysDescription(g, "Keys", new sliceType$3(["Movement", "h/j/k/l/y/u/b/n or numpad or mouse left", "Rest", "r", "Wait a turn", "\xE2\x80\x9C.\xE2\x80\x9D or 5", "Use stairs", "> or D", "Go to nearest stairs", "G", "Autoexplore", "o", "Examine", "x or mouse right", "Equip weapon/armour/...", "e or g", "Quaff potion", "q or a", "Throw item", "t or f", "Evoke rod", "v or z", "View Character and Quest Information", "% or C", "View previous messages", "m", "Write character dump to file", "#", "Save and Quit", "S", "Quit without saving", "Q", "Action Menu", "M", "Change key bindings", "="])); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: termui.ptr.prototype.KeysHelp }; } $f.g = g; $f.ui = ui; $f.$s = $s; $f.$r = $r; return $f;
	};
	termui.prototype.KeysHelp = function(g) { return this.$val.KeysHelp(g); };
	termui.ptr.prototype.ExamineHelp = function(g) {
		var g, ui, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; g = $f.g; ui = $f.ui; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		ui = this;
		$r = ui.DrawKeysDescription(g, "Targeting Keys", new sliceType$3(["Move cursor", "h/j/k/l/y/u/b/n or numpad", "Cycle through monsters", "+", "Cycle through stairs", ">", "Cycle through objects", "o", "Go to/select target", "\xE2\x80\x9C.\xE2\x80\x9D or enter", "View target description", "v or d", "Toggle exclude area from auto-travel", "e"])); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: termui.ptr.prototype.ExamineHelp }; } $f.g = g; $f.ui = ui; $f.$s = $s; $f.$r = $r; return $f;
	};
	termui.prototype.ExamineHelp = function(g) { return this.$val.ExamineHelp(g); };
	termui.ptr.prototype.Equip = function(g, ev) {
		var _r, ev, g, ui, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; ev = $f.ev; g = $f.g; ui = $f.ui; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		ui = this;
		_r = g.Equip(ev); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: termui.ptr.prototype.Equip }; } $f._r = _r; $f.ev = ev; $f.g = g; $f.ui = ui; $f.$s = $s; $f.$r = $r; return $f;
	};
	termui.prototype.Equip = function(g, ev) { return this.$val.Equip(g, ev); };
	termui.ptr.prototype.CharacterInfo = function(g) {
		var _arg, _arg$1, _r, _r$1, _r$10, _r$11, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, b, desc, g, i, lines, ui, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _arg = $f._arg; _arg$1 = $f._arg$1; _r = $f._r; _r$1 = $f._r$1; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; b = $f.b; desc = $f.desc; g = $f.g; i = $f.i; lines = $f.lines; ui = $f.ui; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		ui = this;
		$r = ui.DrawDungeonView(g, 2); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		b = new bytes.Buffer.ptr(sliceType$8.nil, 0, arrayType$2.zero(), 0);
		b.WriteString(formatText("Every year, the elders send someone to collect medicinal simella plants in the Underground.  This year, the honor fell upon you, and so here you are.  According to the elders, deep in the Underground, magical stairs will lead you back to your village.  Along the way, you will collect simellas, as well as various items that will help you deal with monsters, which you may fight or flee...", 77));
		b.WriteString("\n\n");
		_arg = new $String(Indefinite(new weapon(g.Player.Weapon).String(), false));
		_r = new weapon(g.Player.Weapon).Desc(); /* */ $s = 2; case 2: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_arg$1 = new $String(_r);
		_r$1 = fmt.Sprintf("You are wielding %s. %s", new sliceType$7([_arg, _arg$1])); /* */ $s = 3; case 3: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$2 = formatText(_r$1, 77); /* */ $s = 4; case 4: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_r$3 = b.WriteString(_r$2); /* */ $s = 5; case 5: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_r$3;
		b.WriteString("\n\n");
		_r$4 = fmt.Sprintf("You are wearing a %s. %s", new sliceType$7([new armour(g.Player.Armour), new $String(new armour(g.Player.Armour).Desc())])); /* */ $s = 6; case 6: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		_r$5 = formatText(_r$4, 77); /* */ $s = 7; case 7: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		_r$6 = b.WriteString(_r$5); /* */ $s = 8; case 8: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
		_r$6;
		b.WriteString("\n\n");
		/* */ if (!((g.Player.Shield === 0))) { $s = 9; continue; }
		/* */ $s = 10; continue;
		/* if (!((g.Player.Shield === 0))) { */ case 9:
			_r$7 = fmt.Sprintf("You are wearing a %s. %s", new sliceType$7([new shield(g.Player.Shield), new $String(new shield(g.Player.Shield).Desc())])); /* */ $s = 11; case 11: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
			_r$8 = formatText(_r$7, 77); /* */ $s = 12; case 12: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
			_r$9 = b.WriteString(_r$8); /* */ $s = 13; case 13: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
			_r$9;
			b.WriteString("\n\n");
		/* } */ case 10:
		_r$10 = ui.AptitudesText(g); /* */ $s = 14; case 14: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
		_r$11 = b.WriteString(_r$10); /* */ $s = 15; case 15: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
		_r$11;
		desc = b.String();
		lines = strings.Count(desc, "\n");
		i = 0;
		while (true) {
			if (!(i <= (lines + 2 >> 0))) { break; }
			ui.ClearLine(i);
			i = i + (1) >> 0;
		}
		ui.DrawText(desc, 0, 0);
		ui.DrawTextLine(" press esc or space to continue ", lines + 2 >> 0);
		ui.Flush();
		$r = ui.WaitForContinue(g, lines + 2 >> 0); /* */ $s = 16; case 16: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = ui.DrawDungeonView(g, 0); /* */ $s = 17; case 17: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: termui.ptr.prototype.CharacterInfo }; } $f._arg = _arg; $f._arg$1 = _arg$1; $f._r = _r; $f._r$1 = _r$1; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f.b = b; $f.desc = desc; $f.g = g; $f.i = i; $f.lines = lines; $f.ui = ui; $f.$s = $s; $f.$r = $r; return $f;
	};
	termui.prototype.CharacterInfo = function(g) { return this.$val.CharacterInfo(g); };
	termui.ptr.prototype.WizardInfo = function(g) {
		var _r, _r$1, b, g, ui, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; b = $f.b; g = $f.g; ui = $f.ui; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		ui = this;
		ui.Clear();
		b = new bytes.Buffer.ptr(sliceType$8.nil, 0, arrayType$2.zero(), 0);
		_r = fmt.Fprintf(b, "Monsters: %d (%d)\n", new sliceType$7([new $Int(g.Monsters.$length), new $Int(g.MaxMonsters())])); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r;
		_r$1 = fmt.Fprintf(b, "Danger: %d (%d)\n", new sliceType$7([new $Int(g.Danger()), new $Int(g.MaxDanger())])); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$1;
		ui.DrawText(b.String(), 0, 0);
		ui.Flush();
		$r = ui.WaitForContinue(g, -1); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = ui.DrawDungeonView(g, 0); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: termui.ptr.prototype.WizardInfo }; } $f._r = _r; $f._r$1 = _r$1; $f.b = b; $f.g = g; $f.ui = ui; $f.$s = $s; $f.$r = $r; return $f;
	};
	termui.prototype.WizardInfo = function(g) { return this.$val.WizardInfo(g); };
	termui.ptr.prototype.AptitudesText = function(g) {
		var _entry, _i, _keys, _ref, apt, apts, b, g, text, ui, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _entry = $f._entry; _i = $f._i; _keys = $f._keys; _ref = $f._ref; apt = $f.apt; apts = $f.apts; b = $f.b; g = $f.g; text = $f.text; ui = $f.ui; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		ui = this;
		apts = new sliceType$3([]);
		_ref = g.Player.Aptitudes;
		_i = 0;
		_keys = $keys(_ref);
		while (true) {
			if (!(_i < _keys.length)) { break; }
			_entry = _ref[_keys[_i]];
			if (_entry === undefined) {
				_i++;
				continue;
			}
			apt = _entry.k;
			b = _entry.v;
			if (b) {
				apts = $append(apts, new aptitude(apt).String());
			}
			_i++;
		}
		$r = sort.Strings(apts); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		text = "";
		if (apts.$length > 0) {
			text = "Aptitudes:\n" + strings.Join(apts, "\n");
		} else {
			text = "You do not have any special aptitudes.";
		}
		$s = -1; return text;
		/* */ } return; } if ($f === undefined) { $f = { $blk: termui.ptr.prototype.AptitudesText }; } $f._entry = _entry; $f._i = _i; $f._keys = _keys; $f._ref = _ref; $f.apt = apt; $f.apts = apts; $f.b = b; $f.g = g; $f.text = text; $f.ui = ui; $f.$s = $s; $f.$r = $r; return $f;
	};
	termui.prototype.AptitudesText = function(g) { return this.$val.AptitudesText(g); };
	termui.ptr.prototype.DescribePosition = function(g, pos, targ) {
		var _arg, _arg$1, _arg$2, _arg$3, _arg$4, _arg$5, _arg$6, _entry, _entry$1, _entry$10, _entry$2, _entry$3, _entry$4, _entry$5, _entry$6, _entry$7, _entry$8, _entry$9, _r, _r$1, _r$10, _r$11, _r$12, _r$13, _r$14, _r$15, _r$16, _r$17, _r$18, _r$19, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, _tuple$5, c, cld, desc, eq, g, mons, ok, ok$1, okCollectable, okEq, okRod, pos, rod$1, see, targ, ui, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _arg$3 = $f._arg$3; _arg$4 = $f._arg$4; _arg$5 = $f._arg$5; _arg$6 = $f._arg$6; _entry = $f._entry; _entry$1 = $f._entry$1; _entry$10 = $f._entry$10; _entry$2 = $f._entry$2; _entry$3 = $f._entry$3; _entry$4 = $f._entry$4; _entry$5 = $f._entry$5; _entry$6 = $f._entry$6; _entry$7 = $f._entry$7; _entry$8 = $f._entry$8; _entry$9 = $f._entry$9; _r = $f._r; _r$1 = $f._r$1; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$12 = $f._r$12; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _r$17 = $f._r$17; _r$18 = $f._r$18; _r$19 = $f._r$19; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; _tuple$4 = $f._tuple$4; _tuple$5 = $f._tuple$5; c = $f.c; cld = $f.cld; desc = $f.desc; eq = $f.eq; g = $f.g; mons = $f.mons; ok = $f.ok; ok$1 = $f.ok$1; okCollectable = $f.okCollectable; okEq = $f.okEq; okRod = $f.okRod; pos = $f.pos; rod$1 = $f.rod$1; see = $f.see; targ = $f.targ; ui = $f.ui; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		ui = this;
		desc = "";
			/* */ if (!g.Dungeon.Cell($clone(pos, position)).Explored) { $s = 2; continue; }
			_r = targ.Reachable(g, $clone(pos, position)); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			/* */ if (!_r) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (!g.Dungeon.Cell($clone(pos, position)).Explored) { */ case 2:
				desc = "You do not know what is in there.";
				g.InfoEntry = desc;
				$s = -1; return;
			/* } else if (!_r) { */ case 3:
				desc = "This is out of reach.";
				g.InfoEntry = desc;
				$s = -1; return;
			/* } */ case 4:
		case 1:
		_tuple = g.MonsterAt($clone(pos, position));
		mons = _tuple[0];
		_tuple$1 = (_entry = g.Collectables[position.keyFor(pos)], _entry !== undefined ? [_entry.v, true] : [ptrType$4.nil, false]);
		c = _tuple$1[0];
		okCollectable = _tuple$1[1];
		_tuple$2 = (_entry$1 = g.Equipables[position.keyFor(pos)], _entry$1 !== undefined ? [_entry$1.v, true] : [$ifaceNil, false]);
		eq = _tuple$2[0];
		okEq = _tuple$2[1];
		_tuple$3 = (_entry$2 = g.Rods[position.keyFor(pos)], _entry$2 !== undefined ? [_entry$2.v, true] : [0, false]);
		rod$1 = _tuple$3[0];
		okRod = _tuple$3[1];
		if ($equal(pos, g.Player.Pos, position)) {
			desc = "This is you. ";
		}
		see = "see";
		if (!(_entry$3 = g.Player.LOS[position.keyFor(pos)], _entry$3 !== undefined ? _entry$3.v : false)) {
			see = "saw";
		}
		/* */ if (mons.Exists() && (_entry$4 = g.Player.LOS[position.keyFor(pos)], _entry$4 !== undefined ? _entry$4.v : false)) { $s = 6; continue; }
		/* */ $s = 7; continue;
		/* if (mons.Exists() && (_entry$4 = g.Player.LOS[position.keyFor(pos)], _entry$4 !== undefined ? _entry$4.v : false)) { */ case 6:
			_arg = new $String(see);
			_arg$1 = new $String(new monsterKind(mons.Kind).Indefinite(false));
			_r$1 = ui.MonsterInfo(mons); /* */ $s = 8; case 8: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_arg$2 = new $String(_r$1);
			_r$2 = fmt.Sprintf("You %s %s (%s). ", new sliceType$7([_arg, _arg$1, _arg$2])); /* */ $s = 9; case 9: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			desc = desc + (_r$2);
		/* } */ case 7:
			/* */ if ((_entry$5 = g.Simellas[position.keyFor(pos)], _entry$5 !== undefined ? _entry$5.v : 0) > 0) { $s = 11; continue; }
			/* */ if (okCollectable && !(c === ptrType$4.nil)) { $s = 12; continue; }
			/* */ if (okEq) { $s = 13; continue; }
			/* */ if (okRod) { $s = 14; continue; }
			/* */ if ((_entry$6 = g.Stairs[position.keyFor(pos)], _entry$6 !== undefined ? _entry$6.v : false)) { $s = 15; continue; }
			/* */ if ((_entry$7 = g.Doors[position.keyFor(pos)], _entry$7 !== undefined ? _entry$7.v : false)) { $s = 16; continue; }
			/* */ if ((g.Dungeon.Cell($clone(pos, position)).T === 0)) { $s = 17; continue; }
			/* */ $s = 18; continue;
			/* if ((_entry$5 = g.Simellas[position.keyFor(pos)], _entry$5 !== undefined ? _entry$5.v : 0) > 0) { */ case 11:
				_r$3 = fmt.Sprintf("You %s some simellas (%d).", new sliceType$7([new $String(see), new $Int((_entry$8 = g.Simellas[position.keyFor(pos)], _entry$8 !== undefined ? _entry$8.v : 0))])); /* */ $s = 20; case 20: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				desc = desc + (_r$3);
				$s = 19; continue;
			/* } else if (okCollectable && !(c === ptrType$4.nil)) { */ case 12:
				/* */ if (c.Quantity > 1) { $s = 21; continue; }
				/* */ $s = 22; continue;
				/* if (c.Quantity > 1) { */ case 21:
					_r$4 = fmt.Sprintf("You %s %d %s there.", new sliceType$7([new $String(see), new $Int(c.Quantity), c.Consumable])); /* */ $s = 24; case 24: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
					desc = desc + (_r$4);
					$s = 23; continue;
				/* } else { */ case 22:
					_arg$3 = new $String(see);
					_r$5 = c.Consumable.String(); /* */ $s = 25; case 25: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
					_r$6 = Indefinite(_r$5, false); /* */ $s = 26; case 26: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
					_arg$4 = new $String(_r$6);
					_r$7 = fmt.Sprintf("You %s %s there.", new sliceType$7([_arg$3, _arg$4])); /* */ $s = 27; case 27: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
					desc = desc + (_r$7);
				/* } */ case 23:
				$s = 19; continue;
			/* } else if (okEq) { */ case 13:
				_arg$5 = new $String(see);
				_r$8 = eq.String(); /* */ $s = 28; case 28: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
				_r$9 = Indefinite(_r$8, false); /* */ $s = 29; case 29: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
				_arg$6 = new $String(_r$9);
				_r$10 = fmt.Sprintf("You %s %s.", new sliceType$7([_arg$5, _arg$6])); /* */ $s = 30; case 30: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
				desc = desc + (_r$10);
				$s = 19; continue;
			/* } else if (okRod) { */ case 14:
				_r$11 = fmt.Sprintf("You %s a %v.", new sliceType$7([new $String(see), new rod(rod$1)])); /* */ $s = 31; case 31: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
				desc = desc + (_r$11);
				$s = 19; continue;
			/* } else if ((_entry$6 = g.Stairs[position.keyFor(pos)], _entry$6 !== undefined ? _entry$6.v : false)) { */ case 15:
				/* */ if (g.Depth === g.MaxDepth()) { $s = 32; continue; }
				/* */ $s = 33; continue;
				/* if (g.Depth === g.MaxDepth()) { */ case 32:
					_r$12 = fmt.Sprintf("You %s some glowing stairs.", new sliceType$7([new $String(see)])); /* */ $s = 35; case 35: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }
					desc = desc + (_r$12);
					$s = 34; continue;
				/* } else { */ case 33:
					_r$13 = fmt.Sprintf("You %s stairs downwards.", new sliceType$7([new $String(see)])); /* */ $s = 36; case 36: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
					desc = desc + (_r$13);
				/* } */ case 34:
				$s = 19; continue;
			/* } else if ((_entry$7 = g.Doors[position.keyFor(pos)], _entry$7 !== undefined ? _entry$7.v : false)) { */ case 16:
				_r$14 = fmt.Sprintf("You %s a door.", new sliceType$7([new $String(see)])); /* */ $s = 37; case 37: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
				desc = desc + (_r$14);
				$s = 19; continue;
			/* } else if ((g.Dungeon.Cell($clone(pos, position)).T === 0)) { */ case 17:
				_r$15 = fmt.Sprintf("You %s a wall.", new sliceType$7([new $String(see)])); /* */ $s = 38; case 38: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
				desc = desc + (_r$15);
				$s = 19; continue;
			/* } else { */ case 18:
				_tuple$4 = (_entry$9 = g.Clouds[position.keyFor(pos)], _entry$9 !== undefined ? [_entry$9.v, true] : [0, false]);
				cld = _tuple$4[0];
				ok = _tuple$4[1];
				/* */ if (ok) { $s = 39; continue; }
				/* */ $s = 40; continue;
				/* if (ok) { */ case 39:
					/* */ if (cld === 1) { $s = 42; continue; }
					/* */ $s = 43; continue;
					/* if (cld === 1) { */ case 42:
						_r$16 = fmt.Sprintf("You %s burning flames.", new sliceType$7([new $String(see)])); /* */ $s = 45; case 45: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
						desc = desc + (_r$16);
						$s = 44; continue;
					/* } else { */ case 43:
						_r$17 = fmt.Sprintf("You %s a dense fog.", new sliceType$7([new $String(see)])); /* */ $s = 46; case 46: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }
						desc = desc + (_r$17);
					/* } */ case 44:
					$s = 41; continue;
				/* } else { */ case 40:
					_tuple$5 = (_entry$10 = g.Fungus[position.keyFor(pos)], _entry$10 !== undefined ? [_entry$10.v, true] : [0, false]);
					ok$1 = _tuple$5[1];
					/* */ if (ok$1) { $s = 47; continue; }
					/* */ if (desc === "") { $s = 48; continue; }
					/* */ $s = 49; continue;
					/* if (ok$1) { */ case 47:
						_r$18 = fmt.Sprintf("You %s dense foliage there.", new sliceType$7([new $String(see)])); /* */ $s = 50; case 50: if($c) { $c = false; _r$18 = _r$18.$blk(); } if (_r$18 && _r$18.$blk !== undefined) { break s; }
						desc = desc + (_r$18);
						$s = 49; continue;
					/* } else if (desc === "") { */ case 48:
						_r$19 = fmt.Sprintf("You %s the ground.", new sliceType$7([new $String(see)])); /* */ $s = 51; case 51: if($c) { $c = false; _r$19 = _r$19.$blk(); } if (_r$19 && _r$19.$blk !== undefined) { break s; }
						desc = desc + (_r$19);
					/* } */ case 49:
				/* } */ case 41:
			/* } */ case 19:
		case 10:
		g.InfoEntry = desc;
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: termui.ptr.prototype.DescribePosition }; } $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._arg$3 = _arg$3; $f._arg$4 = _arg$4; $f._arg$5 = _arg$5; $f._arg$6 = _arg$6; $f._entry = _entry; $f._entry$1 = _entry$1; $f._entry$10 = _entry$10; $f._entry$2 = _entry$2; $f._entry$3 = _entry$3; $f._entry$4 = _entry$4; $f._entry$5 = _entry$5; $f._entry$6 = _entry$6; $f._entry$7 = _entry$7; $f._entry$8 = _entry$8; $f._entry$9 = _entry$9; $f._r = _r; $f._r$1 = _r$1; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$12 = _r$12; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._r$17 = _r$17; $f._r$18 = _r$18; $f._r$19 = _r$19; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f._tuple$4 = _tuple$4; $f._tuple$5 = _tuple$5; $f.c = c; $f.cld = cld; $f.desc = desc; $f.eq = eq; $f.g = g; $f.mons = mons; $f.ok = ok; $f.ok$1 = ok$1; $f.okCollectable = okCollectable; $f.okEq = okEq; $f.okRod = okRod; $f.pos = pos; $f.rod$1 = rod$1; $f.see = see; $f.targ = targ; $f.ui = ui; $f.$s = $s; $f.$r = $r; return $f;
	};
	termui.prototype.DescribePosition = function(g, pos, targ) { return this.$val.DescribePosition(g, pos, targ); };
	termui.ptr.prototype.Examine = function(g, start) {
		var _r, _tmp, _tmp$1, _tmp$2, _tuple, again, err, ex, g, quit, start, ui, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tuple = $f._tuple; again = $f.again; err = $f.err; ex = $f.ex; g = $f.g; quit = $f.quit; start = $f.start; ui = $f.ui; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		err = $ifaceNil;
		again = false;
		quit = false;
		ui = this;
		ex = new examiner.ptr(false, false);
		_r = ui.CursorAction(g, ex, start); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		err = _tuple[0];
		again = _tuple[1];
		quit = _tuple[2];
		_tmp = err;
		_tmp$1 = again;
		_tmp$2 = quit;
		err = _tmp;
		again = _tmp$1;
		quit = _tmp$2;
		$s = -1; return [err, again, quit];
		/* */ } return; } if ($f === undefined) { $f = { $blk: termui.ptr.prototype.Examine }; } $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tuple = _tuple; $f.again = again; $f.err = err; $f.ex = ex; $f.g = g; $f.quit = quit; $f.start = start; $f.ui = ui; $f.$s = $s; $f.$r = $r; return $f;
	};
	termui.prototype.Examine = function(g, start) { return this.$val.Examine(g, start); };
	termui.ptr.prototype.ChooseTarget = function(g, targ) {
		var _r, _r$1, _tuple, err, g, targ, ui, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; err = $f.err; g = $f.g; targ = $f.targ; ui = $f.ui; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		ui = this;
		_r = ui.CursorAction(g, targ, ptrType$1.nil); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		err = _tuple[0];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
		}
		_r$1 = targ.Done(); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		/* */ if (!_r$1) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!_r$1) { */ case 2:
			$s = -1; return errors.New("Do nothing, then.");
		/* } */ case 3:
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: termui.ptr.prototype.ChooseTarget }; } $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f.err = err; $f.g = g; $f.targ = targ; $f.ui = ui; $f.$s = $s; $f.$r = $r; return $f;
	};
	termui.prototype.ChooseTarget = function(g, targ) { return this.$val.ChooseTarget(g, targ); };
	termui.ptr.prototype.NextMonster = function(g, r, pos, data) {
		var _entry, data, g, i, mons, nmonster, pos, r, ui, x;
		ui = this;
		nmonster = data.nmonster;
		i = 0;
		while (true) {
			if (!(i < g.Monsters.$length)) { break; }
			if (r === 43) {
				nmonster = nmonster + (1) >> 0;
			} else {
				nmonster = nmonster - (1) >> 0;
			}
			if (nmonster > (g.Monsters.$length - 1 >> 0)) {
				nmonster = 0;
			} else if (nmonster < 0) {
				nmonster = g.Monsters.$length - 1 >> 0;
			}
			mons = (x = g.Monsters, ((nmonster < 0 || nmonster >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + nmonster]));
			if (mons.Exists() && (_entry = g.Player.LOS[position.keyFor(mons.Pos)], _entry !== undefined ? _entry.v : false) && !($equal(pos, mons.Pos, position))) {
				position.copy(pos, mons.Pos);
				break;
			}
			i = i + (1) >> 0;
		}
		position.copy(data.npos, pos);
		data.nmonster = nmonster;
	};
	termui.prototype.NextMonster = function(g, r, pos, data) { return this.$val.NextMonster(g, r, pos, data); };
	termui.ptr.prototype.NextStair = function(g, data) {
		var _r, data, g, stairs, ui, x, x$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; data = $f.data; g = $f.g; stairs = $f.stairs; ui = $f.ui; x = $f.x; x$1 = $f.x$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		ui = this;
		/* */ if (data.sortedStairs === sliceType$5.nil) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (data.sortedStairs === sliceType$5.nil) { */ case 1:
			stairs = g.StairsSlice();
			_r = g.SortedNearestTo(stairs, $clone(g.Player.Pos, position)); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			data.sortedStairs = _r;
		/* } */ case 2:
		if (data.stairIndex >= data.sortedStairs.$length) {
			data.stairIndex = 0;
		}
		if (data.sortedStairs.$length > 0) {
			position.copy(data.npos, (x = data.sortedStairs, x$1 = data.stairIndex, ((x$1 < 0 || x$1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + x$1])));
			data.stairIndex = data.stairIndex + (1) >> 0;
		}
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: termui.ptr.prototype.NextStair }; } $f._r = _r; $f.data = data; $f.g = g; $f.stairs = stairs; $f.ui = ui; $f.x = x; $f.x$1 = x$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	termui.prototype.NextStair = function(g, data) { return this.$val.NextStair(g, data); };
	termui.ptr.prototype.NextObject = function(g, pos, data) {
		var _entry, _entry$1, _entry$2, _entry$3, _i, _i$1, _i$2, _i$3, _keys, _keys$1, _keys$2, _keys$3, _r, _ref, _ref$1, _ref$2, _ref$3, data, g, i, nobject, p, p$1, p$2, p$3, p$4, pos, ui, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _entry = $f._entry; _entry$1 = $f._entry$1; _entry$2 = $f._entry$2; _entry$3 = $f._entry$3; _i = $f._i; _i$1 = $f._i$1; _i$2 = $f._i$2; _i$3 = $f._i$3; _keys = $f._keys; _keys$1 = $f._keys$1; _keys$2 = $f._keys$2; _keys$3 = $f._keys$3; _r = $f._r; _ref = $f._ref; _ref$1 = $f._ref$1; _ref$2 = $f._ref$2; _ref$3 = $f._ref$3; data = $f.data; g = $f.g; i = $f.i; nobject = $f.nobject; p = $f.p; p$1 = $f.p$1; p$2 = $f.p$2; p$3 = $f.p$3; p$4 = $f.p$4; pos = $f.pos; ui = $f.ui; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		ui = this;
		nobject = data.nobject;
		/* */ if (data.objects.$length === 0) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (data.objects.$length === 0) { */ case 1:
			_ref = g.Collectables;
			_i = 0;
			_keys = $keys(_ref);
			while (true) {
				if (!(_i < _keys.length)) { break; }
				_entry = _ref[_keys[_i]];
				if (_entry === undefined) {
					_i++;
					continue;
				}
				p = $clone(_entry.k, position);
				data.objects = $append(data.objects, p);
				_i++;
			}
			_ref$1 = g.Rods;
			_i$1 = 0;
			_keys$1 = $keys(_ref$1);
			while (true) {
				if (!(_i$1 < _keys$1.length)) { break; }
				_entry$1 = _ref$1[_keys$1[_i$1]];
				if (_entry$1 === undefined) {
					_i$1++;
					continue;
				}
				p$1 = $clone(_entry$1.k, position);
				data.objects = $append(data.objects, p$1);
				_i$1++;
			}
			_ref$2 = g.Equipables;
			_i$2 = 0;
			_keys$2 = $keys(_ref$2);
			while (true) {
				if (!(_i$2 < _keys$2.length)) { break; }
				_entry$2 = _ref$2[_keys$2[_i$2]];
				if (_entry$2 === undefined) {
					_i$2++;
					continue;
				}
				p$2 = $clone(_entry$2.k, position);
				data.objects = $append(data.objects, p$2);
				_i$2++;
			}
			_ref$3 = g.Simellas;
			_i$3 = 0;
			_keys$3 = $keys(_ref$3);
			while (true) {
				if (!(_i$3 < _keys$3.length)) { break; }
				_entry$3 = _ref$3[_keys$3[_i$3]];
				if (_entry$3 === undefined) {
					_i$3++;
					continue;
				}
				p$3 = $clone(_entry$3.k, position);
				data.objects = $append(data.objects, p$3);
				_i$3++;
			}
			_r = g.SortedNearestTo(data.objects, $clone(g.Player.Pos, position)); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			data.objects = _r;
		/* } */ case 2:
		i = 0;
		while (true) {
			if (!(i < data.objects.$length)) { break; }
			p$4 = $clone((x = data.objects, ((nobject < 0 || nobject >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + nobject])), position);
			nobject = nobject + (1) >> 0;
			if (nobject > (data.objects.$length - 1 >> 0)) {
				nobject = 0;
			}
			if (g.Dungeon.Cell($clone(p$4, position)).Explored) {
				position.copy(pos, p$4);
				break;
			}
			i = i + (1) >> 0;
		}
		position.copy(data.npos, pos);
		data.nobject = nobject;
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: termui.ptr.prototype.NextObject }; } $f._entry = _entry; $f._entry$1 = _entry$1; $f._entry$2 = _entry$2; $f._entry$3 = _entry$3; $f._i = _i; $f._i$1 = _i$1; $f._i$2 = _i$2; $f._i$3 = _i$3; $f._keys = _keys; $f._keys$1 = _keys$1; $f._keys$2 = _keys$2; $f._keys$3 = _keys$3; $f._r = _r; $f._ref = _ref; $f._ref$1 = _ref$1; $f._ref$2 = _ref$2; $f._ref$3 = _ref$3; $f.data = data; $f.g = g; $f.i = i; $f.nobject = nobject; $f.p = p; $f.p$1 = p$1; $f.p$2 = p$2; $f.p$3 = p$3; $f.p$4 = p$4; $f.pos = pos; $f.ui = ui; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	termui.prototype.NextObject = function(g, pos, data) { return this.$val.NextObject(g, pos, data); };
	termui.ptr.prototype.ExcludeZone = function(g, pos) {
		var _entry, g, pos, toggle, ui;
		ui = this;
		if (!g.Dungeon.Cell($clone(pos, position)).Explored) {
			g.Print("You cannot choose an unexplored cell for exclusion.");
		} else {
			toggle = !(_entry = g.ExclusionsMap[position.keyFor(pos)], _entry !== undefined ? _entry.v : false);
			g.ComputeExclusion($clone(pos, position), toggle);
		}
	};
	termui.prototype.ExcludeZone = function(g, pos) { return this.$val.ExcludeZone(g, pos); };
	termui.ptr.prototype.CursorMouseLeft = function(g, targ, pos, data) {
		var _r, _r$1, _r$2, _r$3, _tmp, _tmp$1, again, data, err, g, notarg, pos, targ, ui, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; again = $f.again; data = $f.data; err = $f.err; g = $f.g; notarg = $f.notarg; pos = $f.pos; targ = $f.targ; ui = $f.ui; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		again = false;
		notarg = false;
		ui = this;
		again = true;
		/* */ if ($equal(data.npos, pos, position)) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if ($equal(data.npos, pos, position)) { */ case 1:
			_r = targ.Action(g, $clone(pos, position)); /* */ $s = 4; case 4: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			err = _r;
			/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 5; continue; }
			/* */ $s = 6; continue;
			/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 5:
				_r$1 = err.Error(); /* */ $s = 8; case 8: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				$r = g.Print(_r$1); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 7; continue;
			/* } else { */ case 6:
				_r$2 = g.MoveToTarget(g.Ev); /* */ $s = 12; case 12: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				/* */ if (_r$2) { $s = 10; continue; }
				/* */ $s = 11; continue;
				/* if (_r$2) { */ case 10:
					again = false;
				/* } */ case 11:
				_r$3 = targ.Done(); /* */ $s = 15; case 15: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				/* */ if (_r$3) { $s = 13; continue; }
				/* */ $s = 14; continue;
				/* if (_r$3) { */ case 13:
					notarg = true;
				/* } */ case 14:
			/* } */ case 7:
			$s = 3; continue;
		/* } else { */ case 2:
			position.copy(data.npos, pos);
		/* } */ case 3:
		_tmp = again;
		_tmp$1 = notarg;
		again = _tmp;
		notarg = _tmp$1;
		$s = -1; return [again, notarg];
		/* */ } return; } if ($f === undefined) { $f = { $blk: termui.ptr.prototype.CursorMouseLeft }; } $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f.again = again; $f.data = data; $f.err = err; $f.g = g; $f.notarg = notarg; $f.pos = pos; $f.targ = targ; $f.ui = ui; $f.$s = $s; $f.$r = $r; return $f;
	};
	termui.prototype.CursorMouseLeft = function(g, targ, pos, data) { return this.$val.CursorMouseLeft(g, targ, pos, data); };
	termui.ptr.prototype.CursorKeyAction = function(g, targ, rka, data) {
		var _1, _entry, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tuple, _tuple$1, _tuple$2, _tuple$3, again, data, err, err$1, g, i, notarg, ok, ok$1, p, pos, quit, rka, targ, ui, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _entry = $f._entry; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$10 = $f._tmp$10; _tmp$11 = $f._tmp$11; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; _tmp$6 = $f._tmp$6; _tmp$7 = $f._tmp$7; _tmp$8 = $f._tmp$8; _tmp$9 = $f._tmp$9; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; again = $f.again; data = $f.data; err = $f.err; err$1 = $f.err$1; g = $f.g; i = $f.i; notarg = $f.notarg; ok = $f.ok; ok$1 = $f.ok$1; p = $f.p; pos = $f.pos; quit = $f.quit; rka = $f.rka; targ = $f.targ; ui = $f.ui; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		err = $ifaceNil;
		again = false;
		quit = false;
		notarg = false;
		ui = this;
		pos = $clone(data.npos, position);
		again = true;
		/* */ if (!((rka.r === 0))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!((rka.r === 0))) { */ case 1:
			ok = false;
			_tuple = (_entry = runeTargetingKeyActions[$Int32.keyFor(rka.r)], _entry !== undefined ? [_entry.v, true] : [0, false]);
			rka.k = _tuple[0];
			ok = _tuple[1];
			/* */ if (!ok) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (!ok) { */ case 3:
				_r = fmt.Errorf("Invalid targeting mode key '%c'. Type ? for help.", new sliceType$7([new $Int32(rka.r)])); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				err = _r;
				_tmp = err;
				_tmp$1 = again;
				_tmp$2 = quit;
				_tmp$3 = notarg;
				err = _tmp;
				again = _tmp$1;
				quit = _tmp$2;
				notarg = _tmp$3;
				$s = -1; return [err, again, quit, notarg];
			/* } */ case 4:
		/* } */ case 2:
		/* */ if (rka.k === 43) { $s = 6; continue; }
		/* */ $s = 7; continue;
		/* if (rka.k === 43) { */ case 6:
			err$1 = $ifaceNil;
			_r$1 = ui.SelectAction(g, menuTargetActions, g.Ev); /* */ $s = 8; case 8: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_tuple$1 = _r$1;
			rka.k = _tuple$1[0];
			err$1 = _tuple$1[1];
			if (!($interfaceIsEqual(err$1, $ifaceNil))) {
				_tmp$4 = err$1;
				_tmp$5 = again;
				_tmp$6 = quit;
				_tmp$7 = notarg;
				err = _tmp$4;
				again = _tmp$5;
				quit = _tmp$6;
				notarg = _tmp$7;
				$s = -1; return [err, again, quit, notarg];
			}
		/* } */ case 7:
			_1 = rka.k;
			/* */ if ((_1 === (1)) || (_1 === (2)) || (_1 === (3)) || (_1 === (4)) || (_1 === (5)) || (_1 === (6)) || (_1 === (7)) || (_1 === (8))) { $s = 10; continue; }
			/* */ if ((_1 === (9)) || (_1 === (10)) || (_1 === (11)) || (_1 === (12)) || (_1 === (13)) || (_1 === (14)) || (_1 === (15)) || (_1 === (16))) { $s = 11; continue; }
			/* */ if (_1 === (19)) { $s = 12; continue; }
			/* */ if ((_1 === (35)) || (_1 === (36))) { $s = 13; continue; }
			/* */ if (_1 === (37)) { $s = 14; continue; }
			/* */ if (_1 === (30)) { $s = 15; continue; }
			/* */ if (_1 === (39)) { $s = 16; continue; }
			/* */ if (_1 === (38)) { $s = 17; continue; }
			/* */ if (_1 === (40)) { $s = 18; continue; }
			/* */ if (_1 === (41)) { $s = 19; continue; }
			/* */ if ((_1 === (21)) || (_1 === (17)) || (_1 === (25)) || (_1 === (24)) || (_1 === (26)) || (_1 === (28)) || (_1 === (23)) || (_1 === (27))) { $s = 20; continue; }
			/* */ $s = 21; continue;
			/* if ((_1 === (1)) || (_1 === (2)) || (_1 === (3)) || (_1 === (4)) || (_1 === (5)) || (_1 === (6)) || (_1 === (7)) || (_1 === (8))) { */ case 10:
				position.copy(data.npos, $clone(pos, position).To(KeyToDir(rka.k)));
				$s = 22; continue;
			/* } else if ((_1 === (9)) || (_1 === (10)) || (_1 === (11)) || (_1 === (12)) || (_1 === (13)) || (_1 === (14)) || (_1 === (15)) || (_1 === (16))) { */ case 11:
				i = 0;
				while (true) {
					if (!(i < 5)) { break; }
					p = $clone($clone(data.npos, position).To(KeyToDir(rka.k)), position);
					if (!$clone(p, position).valid()) {
						break;
					}
					position.copy(data.npos, p);
					i = i + (1) >> 0;
				}
				$s = 22; continue;
			/* } else if (_1 === (19)) { */ case 12:
				$r = ui.NextStair(g, data); /* */ $s = 23; case 23: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 22; continue;
			/* } else if ((_1 === (35)) || (_1 === (36))) { */ case 13:
				ui.NextMonster(g, rka.r, $clone(pos, position), data);
				$s = 22; continue;
			/* } else if (_1 === (37)) { */ case 14:
				$r = ui.NextObject(g, $clone(pos, position), data); /* */ $s = 24; case 24: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 22; continue;
			/* } else if (_1 === (30)) { */ case 15:
				ui.HideCursor();
				$r = ui.ExamineHelp(g); /* */ $s = 25; case 25: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				ui.SetCursor($clone(pos, position));
				$s = 22; continue;
			/* } else if (_1 === (39)) { */ case 16:
				_r$2 = targ.Action(g, $clone(pos, position)); /* */ $s = 26; case 26: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				err = _r$2;
				if (!($interfaceIsEqual(err, $ifaceNil))) {
					/* break; */ $s = 9; continue;
				}
				g.Targeting = ptrType$1.nil;
				_r$3 = g.MoveToTarget(g.Ev); /* */ $s = 29; case 29: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				/* */ if (_r$3) { $s = 27; continue; }
				/* */ $s = 28; continue;
				/* if (_r$3) { */ case 27:
					again = false;
				/* } */ case 28:
				_r$4 = targ.Done(); /* */ $s = 32; case 32: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				/* */ if (_r$4) { $s = 30; continue; }
				/* */ $s = 31; continue;
				/* if (_r$4) { */ case 30:
					notarg = true;
				/* } */ case 31:
				$s = 22; continue;
			/* } else if (_1 === (38)) { */ case 17:
				ui.HideCursor();
				$r = ui.ViewPositionDescription(g, $clone(pos, position)); /* */ $s = 33; case 33: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				ui.SetCursor($clone(pos, position));
				$s = 22; continue;
			/* } else if (_1 === (40)) { */ case 18:
				ui.ExcludeZone(g, $clone(pos, position));
				$s = 22; continue;
			/* } else if (_1 === (41)) { */ case 19:
				g.Targeting = ptrType$1.nil;
				notarg = true;
				err = errors.New("Do nothing, then.");
				$s = 22; continue;
			/* } else if ((_1 === (21)) || (_1 === (17)) || (_1 === (25)) || (_1 === (24)) || (_1 === (26)) || (_1 === (28)) || (_1 === (23)) || (_1 === (27))) { */ case 20:
				_tuple$2 = $assertType(targ, ptrType$5, true);
				ok$1 = _tuple$2[1];
				if (!ok$1) {
					/* break; */ $s = 9; continue;
				}
				_r$5 = ui.HandleKey(g, $clone(rka, runeKeyAction)); /* */ $s = 34; case 34: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
				_tuple$3 = _r$5;
				err = _tuple$3[0];
				again = _tuple$3[1];
				quit = _tuple$3[2];
				if (!($interfaceIsEqual(err, $ifaceNil))) {
					notarg = true;
				}
				g.Targeting = ptrType$1.nil;
				$s = 22; continue;
			/* } else { */ case 21:
				_r$6 = fmt.Errorf("Invalid targeting mode key '%c'. Type ? for help.", new sliceType$7([new $Int32(rka.r)])); /* */ $s = 35; case 35: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
				err = _r$6;
			/* } */ case 22:
		case 9:
		_tmp$8 = err;
		_tmp$9 = again;
		_tmp$10 = quit;
		_tmp$11 = notarg;
		err = _tmp$8;
		again = _tmp$9;
		quit = _tmp$10;
		notarg = _tmp$11;
		$s = -1; return [err, again, quit, notarg];
		/* */ } return; } if ($f === undefined) { $f = { $blk: termui.ptr.prototype.CursorKeyAction }; } $f._1 = _1; $f._entry = _entry; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$10 = _tmp$10; $f._tmp$11 = _tmp$11; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f._tmp$6 = _tmp$6; $f._tmp$7 = _tmp$7; $f._tmp$8 = _tmp$8; $f._tmp$9 = _tmp$9; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f.again = again; $f.data = data; $f.err = err; $f.err$1 = err$1; $f.g = g; $f.i = i; $f.notarg = notarg; $f.ok = ok; $f.ok$1 = ok$1; $f.p = p; $f.pos = pos; $f.quit = quit; $f.rka = rka; $f.targ = targ; $f.ui = ui; $f.$s = $s; $f.$r = $r; return $f;
	};
	termui.prototype.CursorKeyAction = function(g, targ, rka, data) { return this.$val.CursorKeyAction(g, targ, rka, data); };
	termui.ptr.prototype.CursorAction = function(g, targ, start) {
		var _entry, _i, _r, _r$1, _ref, _tmp, _tmp$1, _tmp$2, _tuple, _tuple$1, _tuple$2, again, data, dist, err, g, minDist, mons, notarg, ok, ok$1, opos, pos, quit, st, start, targ, ui, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _entry = $f._entry; _i = $f._i; _r = $f._r; _r$1 = $f._r$1; _ref = $f._ref; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; again = $f.again; data = $f.data; dist = $f.dist; err = $f.err; g = $f.g; minDist = $f.minDist; mons = $f.mons; notarg = $f.notarg; ok = $f.ok; ok$1 = $f.ok$1; opos = $f.opos; pos = $f.pos; quit = $f.quit; st = $f.st; start = $f.start; targ = $f.targ; ui = $f.ui; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		err = $ifaceNil;
		again = false;
		quit = false;
		ui = this;
		pos = $clone(g.Player.Pos, position);
		if (!(start === ptrType$1.nil)) {
			position.copy(pos, start);
		} else {
			minDist = 999;
			_ref = g.Monsters;
			_i = 0;
			while (true) {
				if (!(_i < _ref.$length)) { break; }
				mons = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
				if (mons.Exists() && (_entry = g.Player.LOS[position.keyFor(mons.Pos)], _entry !== undefined ? _entry.v : false)) {
					dist = $clone(mons.Pos, position).Distance($clone(g.Player.Pos, position));
					if (minDist > dist) {
						minDist = dist;
						position.copy(pos, mons.Pos);
					}
				}
				_i++;
			}
		}
		data = new examineData.ptr($clone(pos, position), 0, new sliceType$5([]), 0, sliceType$5.nil, 0);
		_tuple = $assertType(targ, ptrType$5, true);
		ok = _tuple[1];
		/* */ if (ok && $equal(pos, g.Player.Pos, position) && start === ptrType$1.nil) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (ok && $equal(pos, g.Player.Pos, position) && start === ptrType$1.nil) { */ case 1:
			$r = ui.NextObject(g, new position.ptr(-1, -1), data); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* */ if (!$clone(data.npos, position).valid()) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (!$clone(data.npos, position).valid()) { */ case 4:
				$r = ui.NextStair(g, data); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 5:
			if ($clone(data.npos, position).valid()) {
				position.copy(pos, data.npos);
			}
		/* } */ case 2:
		opos = new position.ptr(-1, -1);
		/* while (true) { */ case 7:
			err = $ifaceNil;
			/* */ if (!($equal(pos, opos, position))) { $s = 9; continue; }
			/* */ $s = 10; continue;
			/* if (!($equal(pos, opos, position))) { */ case 9:
				$r = ui.DescribePosition(g, $clone(pos, position), targ); /* */ $s = 11; case 11: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 10:
			position.copy(opos, pos);
			$r = targ.ComputeHighlight(g, $clone(pos, position)); /* */ $s = 12; case 12: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			ui.SetCursor($clone(pos, position));
			$r = ui.DrawDungeonView(g, 1); /* */ $s = 13; case 13: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			ui.DrawInfoLine(g.InfoEntry);
			st = " Examine/Travel (? for help) ";
			_tuple$1 = $assertType(targ, ptrType$5, true);
			ok$1 = _tuple$1[1];
			if (!ok$1) {
				st = " Targeting (? for help) ";
			}
			ui.DrawStyledTextLine(st, 23, 2);
			ui.SetCell(79, 21, 9508, $pkg.ColorFg, $pkg.ColorBg);
			ui.Flush();
			position.copy(data.npos, pos);
			notarg = false;
			_r = ui.TargetModeEvent(g, targ, data); /* */ $s = 14; case 14: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple$2 = _r;
			err = _tuple$2[0];
			again = _tuple$2[1];
			quit = _tuple$2[2];
			notarg = _tuple$2[3];
			if (!again || notarg) {
				/* break loop; */ $s = 8; continue s;
			}
			/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 15; continue; }
			/* */ $s = 16; continue;
			/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 15:
				_r$1 = err.Error(); /* */ $s = 17; case 17: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				$r = g.Print(_r$1); /* */ $s = 18; case 18: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 16:
			if ($clone(data.npos, position).valid()) {
				position.copy(pos, data.npos);
			}
		/* } */ $s = 7; continue; case 8:
		g.Highlight = false;
		ui.HideCursor();
		_tmp = err;
		_tmp$1 = again;
		_tmp$2 = quit;
		err = _tmp;
		again = _tmp$1;
		quit = _tmp$2;
		$s = -1; return [err, again, quit];
		/* */ } return; } if ($f === undefined) { $f = { $blk: termui.ptr.prototype.CursorAction }; } $f._entry = _entry; $f._i = _i; $f._r = _r; $f._r$1 = _r$1; $f._ref = _ref; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f.again = again; $f.data = data; $f.dist = dist; $f.err = err; $f.g = g; $f.minDist = minDist; $f.mons = mons; $f.notarg = notarg; $f.ok = ok; $f.ok$1 = ok$1; $f.opos = opos; $f.pos = pos; $f.quit = quit; $f.st = st; $f.start = start; $f.targ = targ; $f.ui = ui; $f.$s = $s; $f.$r = $r; return $f;
	};
	termui.prototype.CursorAction = function(g, targ, start) { return this.$val.CursorAction(g, targ, start); };
	termui.ptr.prototype.ViewPositionDescription = function(g, pos) {
		var _arg, _arg$1, _arg$2, _arg$3, _arg$4, _arg$5, _entry, _entry$1, _entry$2, _entry$3, _entry$4, _entry$5, _entry$6, _entry$7, _r, _r$1, _r$2, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, c, eq, g, mons, ok, ok$1, ok$2, ok$3, pos, r, ui, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _arg$3 = $f._arg$3; _arg$4 = $f._arg$4; _arg$5 = $f._arg$5; _entry = $f._entry; _entry$1 = $f._entry$1; _entry$2 = $f._entry$2; _entry$3 = $f._entry$3; _entry$4 = $f._entry$4; _entry$5 = $f._entry$5; _entry$6 = $f._entry$6; _entry$7 = $f._entry$7; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; _tuple$4 = $f._tuple$4; c = $f.c; eq = $f.eq; g = $f.g; mons = $f.mons; ok = $f.ok; ok$1 = $f.ok$1; ok$2 = $f.ok$2; ok$3 = $f.ok$3; pos = $f.pos; r = $f.r; ui = $f.ui; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		ui = this;
		if (!g.Dungeon.Cell($clone(pos, position)).Explored) {
			g.Print("No description: unknown place.");
			$s = -1; return;
		}
		_tuple = g.MonsterAt($clone(pos, position));
		mons = _tuple[0];
		/* */ if (mons.Exists() && (_entry = g.Player.LOS[position.keyFor(mons.Pos)], _entry !== undefined ? _entry.v : false)) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (mons.Exists() && (_entry = g.Player.LOS[position.keyFor(mons.Pos)], _entry !== undefined ? _entry.v : false)) { */ case 1:
			ui.HideCursor();
			$r = ui.DrawMonsterDescription(g, mons); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			ui.SetCursor($clone(pos, position));
			$s = 3; continue;
		/* } else { */ case 2:
			_tuple$1 = (_entry$1 = g.Collectables[position.keyFor(pos)], _entry$1 !== undefined ? [_entry$1.v, true] : [ptrType$4.nil, false]);
			c = _tuple$1[0];
			ok = _tuple$1[1];
			/* */ if (ok) { $s = 5; continue; }
			/* */ $s = 6; continue;
			/* if (ok) { */ case 5:
				_arg = g;
				_r = c.Consumable.Desc(); /* */ $s = 8; case 8: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				_arg$1 = _r;
				$r = ui.DrawDescription(_arg, _arg$1); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 7; continue;
			/* } else { */ case 6:
				_tuple$2 = (_entry$2 = g.Rods[position.keyFor(pos)], _entry$2 !== undefined ? [_entry$2.v, true] : [0, false]);
				r = _tuple$2[0];
				ok$1 = _tuple$2[1];
				/* */ if (ok$1) { $s = 10; continue; }
				/* */ $s = 11; continue;
				/* if (ok$1) { */ case 10:
					_arg$2 = g;
					_r$1 = new rod(r).Desc(); /* */ $s = 13; case 13: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
					_arg$3 = _r$1;
					$r = ui.DrawDescription(_arg$2, _arg$3); /* */ $s = 14; case 14: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$s = 12; continue;
				/* } else { */ case 11:
					_tuple$3 = (_entry$3 = g.Equipables[position.keyFor(pos)], _entry$3 !== undefined ? [_entry$3.v, true] : [$ifaceNil, false]);
					eq = _tuple$3[0];
					ok$2 = _tuple$3[1];
					/* */ if (ok$2) { $s = 15; continue; }
					/* */ if ((_entry$4 = g.Stairs[position.keyFor(pos)], _entry$4 !== undefined ? _entry$4.v : false)) { $s = 16; continue; }
					/* */ if ((_entry$5 = g.Doors[position.keyFor(pos)], _entry$5 !== undefined ? _entry$5.v : false)) { $s = 17; continue; }
					/* */ if ((_entry$6 = g.Simellas[position.keyFor(pos)], _entry$6 !== undefined ? _entry$6.v : 0) > 0) { $s = 18; continue; }
					/* */ $s = 19; continue;
					/* if (ok$2) { */ case 15:
						_arg$4 = g;
						_r$2 = eq.Desc(); /* */ $s = 21; case 21: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
						_arg$5 = _r$2;
						$r = ui.DrawDescription(_arg$4, _arg$5); /* */ $s = 22; case 22: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						$s = 20; continue;
					/* } else if ((_entry$4 = g.Stairs[position.keyFor(pos)], _entry$4 !== undefined ? _entry$4.v : false)) { */ case 16:
						/* */ if (g.Depth === g.MaxDepth()) { $s = 23; continue; }
						/* */ $s = 24; continue;
						/* if (g.Depth === g.MaxDepth()) { */ case 23:
							$r = ui.DrawDescription(g, "These shiny-looking stairs are in fact a magical monolith. It is said they were made some centuries ago by Marevor Helith. They will lead you back to your village."); /* */ $s = 26; case 26: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
							$s = 25; continue;
						/* } else { */ case 24:
							$r = ui.DrawDescription(g, "Stairs lead to the next level of the Underground. There's no way back. Monsters do not follow you."); /* */ $s = 27; case 27: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						/* } */ case 25:
						$s = 20; continue;
					/* } else if ((_entry$5 = g.Doors[position.keyFor(pos)], _entry$5 !== undefined ? _entry$5.v : false)) { */ case 17:
						$r = ui.DrawDescription(g, "A closed door blocks your line of sight. Doors open automatically when you or a monster stand on them. Doors are flammable."); /* */ $s = 28; case 28: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						$s = 20; continue;
					/* } else if ((_entry$6 = g.Simellas[position.keyFor(pos)], _entry$6 !== undefined ? _entry$6.v : 0) > 0) { */ case 18:
						$r = ui.DrawDescription(g, "A simella is a plant with big white flowers which are used in the Underground for their medicinal properties. They can also make tasty infusions. You were actually sent here by your village to collect as many as possible of those plants."); /* */ $s = 29; case 29: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						$s = 20; continue;
					/* } else { */ case 19:
						_tuple$4 = (_entry$7 = g.Fungus[position.keyFor(pos)], _entry$7 !== undefined ? [_entry$7.v, true] : [0, false]);
						ok$3 = _tuple$4[1];
						/* */ if (ok$3 && (g.Dungeon.Cell($clone(pos, position)).T === 1)) { $s = 30; continue; }
						/* */ $s = 31; continue;
						/* if (ok$3 && (g.Dungeon.Cell($clone(pos, position)).T === 1)) { */ case 30:
							$r = ui.DrawDescription(g, "Dense foliage is difficult to see through. It is flammable."); /* */ $s = 33; case 33: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
							$s = 32; continue;
						/* } else { */ case 31:
							g.Print("Nothing worth of description here.");
						/* } */ case 32:
					/* } */ case 20:
				/* } */ case 12:
			/* } */ case 7:
		/* } */ case 3:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: termui.ptr.prototype.ViewPositionDescription }; } $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._arg$3 = _arg$3; $f._arg$4 = _arg$4; $f._arg$5 = _arg$5; $f._entry = _entry; $f._entry$1 = _entry$1; $f._entry$2 = _entry$2; $f._entry$3 = _entry$3; $f._entry$4 = _entry$4; $f._entry$5 = _entry$5; $f._entry$6 = _entry$6; $f._entry$7 = _entry$7; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f._tuple$4 = _tuple$4; $f.c = c; $f.eq = eq; $f.g = g; $f.mons = mons; $f.ok = ok; $f.ok$1 = ok$1; $f.ok$2 = ok$2; $f.ok$3 = ok$3; $f.pos = pos; $f.r = r; $f.ui = ui; $f.$s = $s; $f.$r = $r; return $f;
	};
	termui.prototype.ViewPositionDescription = function(g, pos) { return this.$val.ViewPositionDescription(g, pos); };
	termui.ptr.prototype.MonsterInfo = function(m) {
		var _entry, _i, _keys, _q, _r, _ref, health, i, infos, m, p, st, ui, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _entry = $f._entry; _i = $f._i; _keys = $f._keys; _q = $f._q; _r = $f._r; _ref = $f._ref; health = $f.health; i = $f.i; infos = $f.infos; m = $f.m; p = $f.p; st = $f.st; ui = $f.ui; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		ui = this;
		infos = new sliceType$3([]);
		infos = $append(infos, new monsterState(m.State).String());
		_ref = m.Statuses;
		_i = 0;
		_keys = $keys(_ref);
		while (true) {
			if (!(_i < _keys.length)) { break; }
			_entry = _ref[_keys[_i]];
			if (_entry === undefined) {
				_i++;
				continue;
			}
			st = _entry.k;
			i = _entry.v;
			if (i > 0) {
				infos = $append(infos, new monsterStatus(st).String());
			}
			_i++;
		}
		p = (_q = (($imul(m.HP, 100))) / m.HPmax, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
		_r = fmt.Sprintf("%d %% HP", new sliceType$7([new $Int(p)])); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		health = _r;
		infos = $append(infos, health);
		$s = -1; return strings.Join(infos, ", ");
		/* */ } return; } if ($f === undefined) { $f = { $blk: termui.ptr.prototype.MonsterInfo }; } $f._entry = _entry; $f._i = _i; $f._keys = _keys; $f._q = _q; $f._r = _r; $f._ref = _ref; $f.health = health; $f.i = i; $f.infos = infos; $f.m = m; $f.p = p; $f.st = st; $f.ui = ui; $f.$s = $s; $f.$r = $r; return $f;
	};
	termui.prototype.MonsterInfo = function(m) { return this.$val.MonsterInfo(m); };
	termui.ptr.prototype.InView = function(g, pos, targeting) {
		var g, pos, targeting, ui;
		ui = this;
		if (targeting) {
			return $clone(pos, position).DistanceY($clone(ui.cursor, position)) <= 10 && $clone(pos, position).DistanceX($clone(ui.cursor, position)) <= 39;
		}
		return $clone(pos, position).DistanceY($clone(g.Player.Pos, position)) <= 10 && $clone(pos, position).DistanceX($clone(g.Player.Pos, position)) <= 39;
	};
	termui.prototype.InView = function(g, pos, targeting) { return this.$val.InView(g, pos, targeting); };
	termui.ptr.prototype.CameraOffset = function(g, pos, targeting) {
		var g, pos, targeting, ui;
		ui = this;
		if (targeting) {
			return [(pos.X + 39 >> 0) - ui.cursor.X >> 0, (pos.Y + 10 >> 0) - ui.cursor.Y >> 0];
		}
		return [(pos.X + 39 >> 0) - g.Player.Pos.X >> 0, (pos.Y + 10 >> 0) - g.Player.Pos.Y >> 0];
	};
	termui.prototype.CameraOffset = function(g, pos, targeting) { return this.$val.CameraOffset(g, pos, targeting); };
	termui.ptr.prototype.InViewBorder = function(g, pos, targeting) {
		var g, pos, targeting, ui;
		ui = this;
		if (targeting) {
			return !(($clone(pos, position).DistanceY($clone(ui.cursor, position)) === 10)) && !(($clone(pos, position).DistanceX($clone(ui.cursor, position)) === 39));
		}
		return !(($clone(pos, position).DistanceY($clone(g.Player.Pos, position)) === 10)) && !(($clone(pos, position).DistanceX($clone(g.Player.Pos, position)) === 39));
	};
	termui.prototype.InViewBorder = function(g, pos, targeting) { return this.$val.InViewBorder(g, pos, targeting); };
	termui.ptr.prototype.DrawAtPosition = function(g, pos, targeting, r, fg, bg) {
		var _entry, _i, _r, _ref, _tmp, _tmp$1, _tuple, _tuple$1, bg, fg, g, opos, pos, r, targeting, ui, x, xo, y, yo, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _entry = $f._entry; _i = $f._i; _r = $f._r; _ref = $f._ref; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; bg = $f.bg; fg = $f.fg; g = $f.g; opos = $f.opos; pos = $f.pos; r = $f.r; targeting = $f.targeting; ui = $f.ui; x = $f.x; xo = $f.xo; y = $f.y; yo = $f.yo; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		ui = this;
		if ((_entry = g.Highlight[position.keyFor(pos)], _entry !== undefined ? _entry.v : false) || $equal(pos, ui.cursor, position)) {
			_tmp = fg;
			_tmp$1 = bg;
			bg = _tmp;
			fg = _tmp$1;
		}
		/* */ if ($pkg.CenteredCamera) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if ($pkg.CenteredCamera) { */ case 1:
			if (!ui.InView(g, $clone(pos, position), targeting)) {
				$s = -1; return;
			}
			_tuple = ui.CameraOffset(g, $clone(pos, position), targeting);
			x = _tuple[0];
			y = _tuple[1];
			ui.SetCell(x, y, r, fg, bg);
			/* */ if (ui.InViewBorder(g, $clone(pos, position), targeting) && g.Dungeon.Border($clone(pos, position))) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (ui.InViewBorder(g, $clone(pos, position), targeting) && g.Dungeon.Border($clone(pos, position))) { */ case 3:
				_r = $clone(pos, position).OutsideNeighbors(); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				_ref = _r;
				_i = 0;
				/* while (true) { */ case 6:
					/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 7; continue; }
					opos = $clone(((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]), position);
					_tuple$1 = ui.CameraOffset(g, $clone(opos, position), targeting);
					xo = _tuple$1[0];
					yo = _tuple$1[1];
					ui.SetCell(xo, yo, 35, $pkg.ColorFg, $pkg.ColorBgBorder);
					_i++;
				/* } */ $s = 6; continue; case 7:
			/* } */ case 4:
			$s = -1; return;
		/* } */ case 2:
		ui.SetCell(pos.X, pos.Y, r, fg, bg);
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: termui.ptr.prototype.DrawAtPosition }; } $f._entry = _entry; $f._i = _i; $f._r = _r; $f._ref = _ref; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.bg = bg; $f.fg = fg; $f.g = g; $f.opos = opos; $f.pos = pos; $f.r = r; $f.targeting = targeting; $f.ui = ui; $f.x = x; $f.xo = xo; $f.y = y; $f.yo = yo; $f.$s = $s; $f.$r = $r; return $f;
	};
	termui.prototype.DrawAtPosition = function(g, pos, targeting, r, fg, bg) { return this.$val.DrawAtPosition(g, pos, targeting, r, fg, bg); };
	termui.ptr.prototype.DrawDungeonView = function(g, m) {
		var _i, _r, _r$1, _r$2, _r$3, _r$4, _ref, _tuple, bgColor, d, fgColor, g, i, i$1, i$2, line, m, pos, r, ui, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _ref = $f._ref; _tuple = $f._tuple; bgColor = $f.bgColor; d = $f.d; fgColor = $f.fgColor; g = $f.g; i = $f.i; i$1 = $f.i$1; i$2 = $f.i$2; line = $f.line; m = $f.m; pos = $f.pos; r = $f.r; ui = $f.ui; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		ui = this;
		ui.Clear();
		d = g.Dungeon;
		i = 0;
		while (true) {
			if (!(i < 79)) { break; }
			ui.SetCell(i, 21, 9472, $pkg.ColorFg, $pkg.ColorBg);
			i = i + (1) >> 0;
		}
		i$1 = 0;
		while (true) {
			if (!(i$1 < 21)) { break; }
			ui.SetCell(79, i$1, 9474, $pkg.ColorFg, $pkg.ColorBg);
			i$1 = i$1 + (1) >> 0;
		}
		ui.SetCell(79, 21, 9496, $pkg.ColorFg, $pkg.ColorBg);
		_ref = d.Cells;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			i$2 = _i;
			pos = $clone(idxtopos(i$2), position);
			_r = ui.PositionDrawing(g, $clone(pos, position)); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r;
			r = _tuple[0];
			fgColor = _tuple[1];
			bgColor = _tuple[2];
			$r = ui.DrawAtPosition(g, $clone(pos, position), m === 1, r, fgColor, bgColor); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_i++;
		/* } */ $s = 1; continue; case 2:
		line = 0;
		if (m === 1) {
			ui.DrawColoredTextOnBG("\xE2\x86\x92Menu", 81, line, $pkg.ColorCyan, $pkg.ColorBg);
		} else {
			ui.DrawColoredTextOnBG("\xE2\x86\x92Menu", 81, line, $pkg.ColorBlue, $pkg.ColorBg);
		}
		line = line + (1) >> 0;
		_r$1 = fmt.Sprintf("[ %v (%d)", new sliceType$7([new armour(g.Player.Armour), new $Int(g.Player.Armor())])); /* */ $s = 5; case 5: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$r = ui.DrawText(_r$1, 81, line); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		line = line + (1) >> 0;
		_r$2 = fmt.Sprintf(") %v (%d)", new sliceType$7([new weapon(g.Player.Weapon), new $Int(g.Player.Attack())])); /* */ $s = 7; case 7: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		$r = ui.DrawText(_r$2, 81, line); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		line = line + (1) >> 0;
		/* */ if (!((g.Player.Shield === 0))) { $s = 9; continue; }
		/* */ $s = 10; continue;
		/* if (!((g.Player.Shield === 0))) { */ case 9:
			/* */ if (new weapon(g.Player.Weapon).TwoHanded()) { $s = 11; continue; }
			/* */ $s = 12; continue;
			/* if (new weapon(g.Player.Weapon).TwoHanded()) { */ case 11:
				_r$3 = fmt.Sprintf("] %v (unusable)", new sliceType$7([new shield(g.Player.Shield)])); /* */ $s = 14; case 14: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				$r = ui.DrawText(_r$3, 81, line); /* */ $s = 15; case 15: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 13; continue;
			/* } else { */ case 12:
				_r$4 = fmt.Sprintf("] %v (%d)", new sliceType$7([new shield(g.Player.Shield), new $Int(g.Player.Block())])); /* */ $s = 16; case 16: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				$r = ui.DrawText(_r$4, 81, line); /* */ $s = 17; case 17: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 13:
		/* } */ case 10:
		line = line + (1) >> 0;
		line = line + (1) >> 0;
		$r = ui.DrawStatusBar(g, line); /* */ $s = 18; case 18: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		ui.DrawLog(g);
		if (!((m === 1)) && !((m === 2))) {
			ui.Flush();
		}
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: termui.ptr.prototype.DrawDungeonView }; } $f._i = _i; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._ref = _ref; $f._tuple = _tuple; $f.bgColor = bgColor; $f.d = d; $f.fgColor = fgColor; $f.g = g; $f.i = i; $f.i$1 = i$1; $f.i$2 = i$2; $f.line = line; $f.m = m; $f.pos = pos; $f.r = r; $f.ui = ui; $f.$s = $s; $f.$r = $r; return $f;
	};
	termui.prototype.DrawDungeonView = function(g, m) { return this.$val.DrawDungeonView(g, m); };
	termui.ptr.prototype.SwappingAnimation = function(g, mpos, ppos) {
		var _r, _r$1, _tuple, _tuple$1, bgColorm, bgColorp, fgm, g, mpos, ppos, ui, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; bgColorm = $f.bgColorm; bgColorp = $f.bgColorp; fgm = $f.fgm; g = $f.g; mpos = $f.mpos; ppos = $f.ppos; ui = $f.ui; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		ui = this;
		$r = time.Sleep(new time.Duration(0, 50000000)); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_r = ui.PositionDrawing(g, $clone(mpos, position)); /* */ $s = 2; case 2: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		fgm = _tuple[1];
		bgColorm = _tuple[2];
		_r$1 = ui.PositionDrawing(g, $clone(ppos, position)); /* */ $s = 3; case 3: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple$1 = _r$1;
		bgColorp = _tuple$1[2];
		$r = ui.DrawAtPosition(g, $clone(ppos, position), true, 164, fgm, bgColorp); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = ui.DrawAtPosition(g, $clone(mpos, position), true, 164, $pkg.ColorFgPlayer, bgColorm); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		ui.Flush();
		$r = time.Sleep(new time.Duration(0, 75000000)); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = ui.DrawAtPosition(g, $clone(ppos, position), true, 164, $pkg.ColorFgPlayer, bgColorp); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = ui.DrawAtPosition(g, $clone(mpos, position), true, 164, fgm, bgColorm); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		ui.Flush();
		$r = time.Sleep(new time.Duration(0, 75000000)); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: termui.ptr.prototype.SwappingAnimation }; } $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.bgColorm = bgColorm; $f.bgColorp = bgColorp; $f.fgm = fgm; $f.g = g; $f.mpos = mpos; $f.ppos = ppos; $f.ui = ui; $f.$s = $s; $f.$r = $r; return $f;
	};
	termui.prototype.SwappingAnimation = function(g, mpos, ppos) { return this.$val.SwappingAnimation(g, mpos, ppos); };
	termui.ptr.prototype.TeleportAnimation = function(g, from, to, showto) {
		var _r, _r$1, _tuple, _tuple$1, bgColorf, bgColort, fg, from, g, r, showto, to, ui, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; bgColorf = $f.bgColorf; bgColort = $f.bgColort; fg = $f.fg; from = $f.from; g = $f.g; r = $f.r; showto = $f.showto; to = $f.to; ui = $f.ui; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		ui = this;
		$r = time.Sleep(new time.Duration(0, 50000000)); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_r = ui.PositionDrawing(g, $clone(from, position)); /* */ $s = 2; case 2: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		r = _tuple[0];
		fg = _tuple[1];
		bgColorf = _tuple[2];
		_r$1 = ui.PositionDrawing(g, $clone(to, position)); /* */ $s = 3; case 3: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple$1 = _r$1;
		bgColort = _tuple$1[2];
		$r = ui.DrawAtPosition(g, $clone(from, position), true, 164, $pkg.ColorCyan, bgColorf); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		ui.Flush();
		$r = time.Sleep(new time.Duration(0, 75000000)); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ if (showto) { $s = 6; continue; }
		/* */ $s = 7; continue;
		/* if (showto) { */ case 6:
			$r = ui.DrawAtPosition(g, $clone(from, position), true, r, fg, bgColorf); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = ui.DrawAtPosition(g, $clone(to, position), true, 164, $pkg.ColorCyan, bgColort); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			ui.Flush();
			$r = time.Sleep(new time.Duration(0, 75000000)); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 7:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: termui.ptr.prototype.TeleportAnimation }; } $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.bgColorf = bgColorf; $f.bgColort = bgColort; $f.fg = fg; $f.from = from; $f.g = g; $f.r = r; $f.showto = showto; $f.to = to; $f.ui = ui; $f.$s = $s; $f.$r = $r; return $f;
	};
	termui.prototype.TeleportAnimation = function(g, from, to, showto) { return this.$val.TeleportAnimation(g, from, to, showto); };
	termui.ptr.prototype.ProjectileTrajectoryAnimation = function(g, ray, fg) {
		var _r, _tuple, bgColor, fg, fgColor, g, i, pos, r, ray, ui, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; bgColor = $f.bgColor; fg = $f.fg; fgColor = $f.fgColor; g = $f.g; i = $f.i; pos = $f.pos; r = $f.r; ray = $f.ray; ui = $f.ui; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		ui = this;
		i = ray.$length - 1 >> 0;
		/* while (true) { */ case 1:
			/* if (!(i >= 0)) { break; } */ if(!(i >= 0)) { $s = 2; continue; }
			pos = $clone(((i < 0 || i >= ray.$length) ? ($throwRuntimeError("index out of range"), undefined) : ray.$array[ray.$offset + i]), position);
			_r = ui.PositionDrawing(g, $clone(pos, position)); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r;
			r = _tuple[0];
			fgColor = _tuple[1];
			bgColor = _tuple[2];
			$r = ui.DrawAtPosition(g, $clone(pos, position), true, 8226, fg, bgColor); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			ui.Flush();
			$r = time.Sleep(new time.Duration(0, 25000000)); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = ui.DrawAtPosition(g, $clone(pos, position), true, r, fgColor, bgColor); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			i = i - (1) >> 0;
		/* } */ $s = 1; continue; case 2:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: termui.ptr.prototype.ProjectileTrajectoryAnimation }; } $f._r = _r; $f._tuple = _tuple; $f.bgColor = bgColor; $f.fg = fg; $f.fgColor = fgColor; $f.g = g; $f.i = i; $f.pos = pos; $f.r = r; $f.ray = ray; $f.ui = ui; $f.$s = $s; $f.$r = $r; return $f;
	};
	termui.prototype.ProjectileTrajectoryAnimation = function(g, ray, fg) { return this.$val.ProjectileTrajectoryAnimation(g, ray, fg); };
	termui.ptr.prototype.ExplosionAnimation = function(g, es, pos) {
		var _entry, _i, _i$1, _r, _r$1, _r$2, _ref, _ref$1, _tuple, _tuple$1, bgColor, bgColor$1, colors, es, fg, g, npos, pos, ui, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _entry = $f._entry; _i = $f._i; _i$1 = $f._i$1; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _ref = $f._ref; _ref$1 = $f._ref$1; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; bgColor = $f.bgColor; bgColor$1 = $f.bgColor$1; colors = $f.colors; es = $f.es; fg = $f.fg; g = $f.g; npos = $f.npos; pos = $f.pos; ui = $f.ui; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		ui = this;
		$r = ui.DrawDungeonView(g, 0); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = time.Sleep(new time.Duration(0, 20000000)); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		colors = $toNativeArray($kindInt, [$pkg.ColorFgExplosionStart, $pkg.ColorFgExplosionEnd]);
		if ((es === 1) || (es === 2)) {
			colors[0] = $pkg.ColorFgExplosionWallStart;
			colors[1] = $pkg.ColorFgExplosionWallEnd;
		}
		_ref = colors;
		_i = 0;
		/* while (true) { */ case 3:
			/* if (!(_i < 2)) { break; } */ if(!(_i < 2)) { $s = 4; continue; }
			fg = ((_i < 0 || _i >= _ref.length) ? ($throwRuntimeError("index out of range"), undefined) : _ref[_i]);
			/* */ if (!((es === 2))) { $s = 5; continue; }
			/* */ $s = 6; continue;
			/* if (!((es === 2))) { */ case 5:
				_r = ui.PositionDrawing(g, $clone(pos, position)); /* */ $s = 7; case 7: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				_tuple = _r;
				bgColor = _tuple[2];
				$r = ui.DrawAtPosition(g, $clone(pos, position), true, 9788, fg, bgColor); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				ui.Flush();
				$r = time.Sleep(new time.Duration(0, 25000000)); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 6:
			_r$1 = g.Dungeon.FreeNeighbors($clone(pos, position)); /* */ $s = 10; case 10: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_ref$1 = _r$1;
			_i$1 = 0;
			/* while (true) { */ case 11:
				/* if (!(_i$1 < _ref$1.$length)) { break; } */ if(!(_i$1 < _ref$1.$length)) { $s = 12; continue; }
				npos = $clone(((_i$1 < 0 || _i$1 >= _ref$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$1.$array[_ref$1.$offset + _i$1]), position);
				/* */ if (!(_entry = g.Player.LOS[position.keyFor(npos)], _entry !== undefined ? _entry.v : false)) { $s = 13; continue; }
				/* */ $s = 14; continue;
				/* if (!(_entry = g.Player.LOS[position.keyFor(npos)], _entry !== undefined ? _entry.v : false)) { */ case 13:
					_i$1++;
					/* continue; */ $s = 11; continue;
				/* } */ case 14:
				_r$2 = ui.PositionDrawing(g, $clone(npos, position)); /* */ $s = 15; case 15: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				_tuple$1 = _r$2;
				bgColor$1 = _tuple$1[2];
				$r = ui.DrawAtPosition(g, $clone(npos, position), true, 164, fg, bgColor$1); /* */ $s = 16; case 16: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				ui.Flush();
				$r = time.Sleep(new time.Duration(0, 10000000)); /* */ $s = 17; case 17: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				_i$1++;
			/* } */ $s = 11; continue; case 12:
			_i++;
		/* } */ $s = 3; continue; case 4:
		$r = time.Sleep(new time.Duration(0, 25000000)); /* */ $s = 18; case 18: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: termui.ptr.prototype.ExplosionAnimation }; } $f._entry = _entry; $f._i = _i; $f._i$1 = _i$1; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._ref = _ref; $f._ref$1 = _ref$1; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.bgColor = bgColor; $f.bgColor$1 = bgColor$1; $f.colors = colors; $f.es = es; $f.fg = fg; $f.g = g; $f.npos = npos; $f.pos = pos; $f.ui = ui; $f.$s = $s; $f.$r = $r; return $f;
	};
	termui.prototype.ExplosionAnimation = function(g, es, pos) { return this.$val.ExplosionAnimation(g, es, pos); };
	termui.ptr.prototype.WallExplosionAnimation = function(g, pos) {
		var _i, _r, _ref, _tuple, bgColor, colors, fg, g, pos, ui, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _r = $f._r; _ref = $f._ref; _tuple = $f._tuple; bgColor = $f.bgColor; colors = $f.colors; fg = $f.fg; g = $f.g; pos = $f.pos; ui = $f.ui; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		ui = this;
		colors = $toNativeArray($kindInt, [$pkg.ColorFgExplosionWallStart, $pkg.ColorFgExplosionWallEnd]);
		_ref = colors;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < 2)) { break; } */ if(!(_i < 2)) { $s = 2; continue; }
			fg = ((_i < 0 || _i >= _ref.length) ? ($throwRuntimeError("index out of range"), undefined) : _ref[_i]);
			_r = ui.PositionDrawing(g, $clone(pos, position)); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r;
			bgColor = _tuple[2];
			$r = ui.DrawAtPosition(g, $clone(pos, position), true, 9788, fg, bgColor); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			ui.Flush();
			$r = time.Sleep(new time.Duration(0, 25000000)); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_i++;
		/* } */ $s = 1; continue; case 2:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: termui.ptr.prototype.WallExplosionAnimation }; } $f._i = _i; $f._r = _r; $f._ref = _ref; $f._tuple = _tuple; $f.bgColor = bgColor; $f.colors = colors; $f.fg = fg; $f.g = g; $f.pos = pos; $f.ui = ui; $f.$s = $s; $f.$r = $r; return $f;
	};
	termui.prototype.WallExplosionAnimation = function(g, pos) { return this.$val.WallExplosionAnimation(g, pos); };
	termui.ptr.prototype.LightningBoltAnimation = function(g, ray) {
		var _i, _r, _ref, _tuple, bgColor, colors, fg, g, i, n, pos, ray, ui, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _r = $f._r; _ref = $f._ref; _tuple = $f._tuple; bgColor = $f.bgColor; colors = $f.colors; fg = $f.fg; g = $f.g; i = $f.i; n = $f.n; pos = $f.pos; ray = $f.ray; ui = $f.ui; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		ui = this;
		$r = ui.DrawDungeonView(g, 0); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = time.Sleep(new time.Duration(0, 25000000)); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		colors = $toNativeArray($kindInt, [$pkg.ColorFgExplosionStart, $pkg.ColorFgExplosionEnd]);
		n = 0;
		_ref = colors;
		_i = 0;
		/* while (true) { */ case 3:
			/* if (!(_i < 2)) { break; } */ if(!(_i < 2)) { $s = 4; continue; }
			fg = ((_i < 0 || _i >= _ref.length) ? ($throwRuntimeError("index out of range"), undefined) : _ref[_i]);
			i = ray.$length - 1 >> 0;
			/* while (true) { */ case 5:
				/* if (!(i >= 0)) { break; } */ if(!(i >= 0)) { $s = 6; continue; }
				pos = $clone(((i < 0 || i >= ray.$length) ? ($throwRuntimeError("index out of range"), undefined) : ray.$array[ray.$offset + i]), position);
				_r = ui.PositionDrawing(g, $clone(pos, position)); /* */ $s = 7; case 7: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				_tuple = _r;
				bgColor = _tuple[2];
				$r = ui.DrawAtPosition(g, $clone(pos, position), true, 9788, fg, bgColor); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				ui.Flush();
				$r = time.Sleep($mul64($mul64(new time.Duration(0, 10), (new time.Duration(0, (2 - n >> 0)))), new time.Duration(0, 1000000))); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				i = i - (1) >> 0;
			/* } */ $s = 5; continue; case 6:
			n = n + (1) >> 0;
			_i++;
		/* } */ $s = 3; continue; case 4:
		$r = time.Sleep(new time.Duration(0, 25000000)); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: termui.ptr.prototype.LightningBoltAnimation }; } $f._i = _i; $f._r = _r; $f._ref = _ref; $f._tuple = _tuple; $f.bgColor = bgColor; $f.colors = colors; $f.fg = fg; $f.g = g; $f.i = i; $f.n = n; $f.pos = pos; $f.ray = ray; $f.ui = ui; $f.$s = $s; $f.$r = $r; return $f;
	};
	termui.prototype.LightningBoltAnimation = function(g, ray) { return this.$val.LightningBoltAnimation(g, ray); };
	termui.ptr.prototype.ProjectileSymbol = function(dir) {
		var _1, dir, r, ui;
		r = 0;
		ui = this;
		_1 = dir;
		if ((_1 === (0)) || (_1 === (1)) || (_1 === (15)) || (_1 === (7)) || (_1 === (8)) || (_1 === (9))) {
			r = 8212;
		} else if ((_1 === (2)) || (_1 === (10))) {
			r = 47;
		} else if ((_1 === (3)) || (_1 === (4)) || (_1 === (5)) || (_1 === (11)) || (_1 === (12)) || (_1 === (13))) {
			r = 124;
		} else if ((_1 === (6)) || (_1 === (14))) {
			r = 92;
		}
		r = r;
		return r;
	};
	termui.prototype.ProjectileSymbol = function(dir) { return this.$val.ProjectileSymbol(dir); };
	termui.ptr.prototype.ThrowAnimation = function(g, ray, hit) {
		var _arg, _arg$1, _arg$2, _arg$3, _arg$4, _r, _r$1, _r$2, _tuple, bgColor, fgColor, g, hit, i, pos, pos$1, r, ray, ui, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _arg$3 = $f._arg$3; _arg$4 = $f._arg$4; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _tuple = $f._tuple; bgColor = $f.bgColor; fgColor = $f.fgColor; g = $f.g; hit = $f.hit; i = $f.i; pos = $f.pos; pos$1 = $f.pos$1; r = $f.r; ray = $f.ray; ui = $f.ui; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		ui = this;
		$r = ui.DrawDungeonView(g, 0); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = time.Sleep(new time.Duration(0, 25000000)); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		i = ray.$length - 1 >> 0;
		/* while (true) { */ case 3:
			/* if (!(i >= 0)) { break; } */ if(!(i >= 0)) { $s = 4; continue; }
			pos = $clone(((i < 0 || i >= ray.$length) ? ($throwRuntimeError("index out of range"), undefined) : ray.$array[ray.$offset + i]), position);
			_r = ui.PositionDrawing(g, $clone(pos, position)); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r;
			r = _tuple[0];
			fgColor = _tuple[1];
			bgColor = _tuple[2];
			_arg = g;
			_arg$1 = $clone(pos, position);
			_r$1 = $clone(pos, position).Dir($clone(g.Player.Pos, position)); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_r$2 = ui.ProjectileSymbol(_r$1); /* */ $s = 7; case 7: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_arg$2 = _r$2;
			_arg$3 = $pkg.ColorFgProjectile;
			_arg$4 = bgColor;
			$r = ui.DrawAtPosition(_arg, _arg$1, true, _arg$2, _arg$3, _arg$4); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			ui.Flush();
			$r = time.Sleep(new time.Duration(0, 25000000)); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = ui.DrawAtPosition(g, $clone(pos, position), true, r, fgColor, bgColor); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			i = i - (1) >> 0;
		/* } */ $s = 3; continue; case 4:
		/* */ if (hit) { $s = 11; continue; }
		/* */ $s = 12; continue;
		/* if (hit) { */ case 11:
			pos$1 = $clone((0 >= ray.$length ? ($throwRuntimeError("index out of range"), undefined) : ray.$array[ray.$offset + 0]), position);
			$r = ui.HitAnimation(g, $clone(pos$1, position), true); /* */ $s = 13; case 13: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 12:
		$r = time.Sleep(new time.Duration(0, 25000000)); /* */ $s = 14; case 14: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: termui.ptr.prototype.ThrowAnimation }; } $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._arg$3 = _arg$3; $f._arg$4 = _arg$4; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._tuple = _tuple; $f.bgColor = bgColor; $f.fgColor = fgColor; $f.g = g; $f.hit = hit; $f.i = i; $f.pos = pos; $f.pos$1 = pos$1; $f.r = r; $f.ray = ray; $f.ui = ui; $f.$s = $s; $f.$r = $r; return $f;
	};
	termui.prototype.ThrowAnimation = function(g, ray, hit) { return this.$val.ThrowAnimation(g, ray, hit); };
	termui.ptr.prototype.HitAnimation = function(g, pos, targeting) {
		var _entry, _r, _tuple, _tuple$1, bgColor, g, mons, pos, targeting, ui, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _entry = $f._entry; _r = $f._r; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; bgColor = $f.bgColor; g = $f.g; mons = $f.mons; pos = $f.pos; targeting = $f.targeting; ui = $f.ui; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		ui = this;
		if (!(_entry = g.Player.LOS[position.keyFor(pos)], _entry !== undefined ? _entry.v : false)) {
			$s = -1; return;
		}
		_r = ui.PositionDrawing(g, $clone(pos, position)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		bgColor = _tuple[2];
		_tuple$1 = g.MonsterAt($clone(pos, position));
		mons = _tuple$1[0];
		/* */ if (mons.Exists()) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (mons.Exists()) { */ case 2:
			$r = ui.DrawAtPosition(g, $clone(pos, position), targeting, 164, $pkg.ColorFgAnimationHit, bgColor); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 4; continue;
		/* } else { */ case 3:
			$r = ui.DrawAtPosition(g, $clone(pos, position), targeting, 8734, $pkg.ColorFgAnimationHit, bgColor); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 4:
		ui.Flush();
		$r = time.Sleep(new time.Duration(0, 75000000)); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: termui.ptr.prototype.HitAnimation }; } $f._entry = _entry; $f._r = _r; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.bgColor = bgColor; $f.g = g; $f.mons = mons; $f.pos = pos; $f.targeting = targeting; $f.ui = ui; $f.$s = $s; $f.$r = $r; return $f;
	};
	termui.prototype.HitAnimation = function(g, pos, targeting) { return this.$val.HitAnimation(g, pos, targeting); };
	termui.ptr.prototype.PositionDrawing = function(g, pos) {
		var _1, _entry, _entry$1, _entry$10, _entry$11, _entry$12, _entry$13, _entry$14, _entry$15, _entry$16, _entry$17, _entry$2, _entry$3, _entry$4, _entry$5, _entry$6, _entry$7, _entry$8, _entry$9, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, _tuple$5, _tuple$6, _tuple$7, _tuple$8, _tuple$9, _v, bgColor, c, c$1, cld, eq, fgColor, g, m, m$1, ok, ok$1, ok$2, ok$3, ok$4, ok$5, ok$6, ok$7, ok$8, pos, r, rod$1, ui, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _entry = $f._entry; _entry$1 = $f._entry$1; _entry$10 = $f._entry$10; _entry$11 = $f._entry$11; _entry$12 = $f._entry$12; _entry$13 = $f._entry$13; _entry$14 = $f._entry$14; _entry$15 = $f._entry$15; _entry$16 = $f._entry$16; _entry$17 = $f._entry$17; _entry$2 = $f._entry$2; _entry$3 = $f._entry$3; _entry$4 = $f._entry$4; _entry$5 = $f._entry$5; _entry$6 = $f._entry$6; _entry$7 = $f._entry$7; _entry$8 = $f._entry$8; _entry$9 = $f._entry$9; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; _tuple$4 = $f._tuple$4; _tuple$5 = $f._tuple$5; _tuple$6 = $f._tuple$6; _tuple$7 = $f._tuple$7; _tuple$8 = $f._tuple$8; _tuple$9 = $f._tuple$9; _v = $f._v; bgColor = $f.bgColor; c = $f.c; c$1 = $f.c$1; cld = $f.cld; eq = $f.eq; fgColor = $f.fgColor; g = $f.g; m = $f.m; m$1 = $f.m$1; ok = $f.ok; ok$1 = $f.ok$1; ok$2 = $f.ok$2; ok$3 = $f.ok$3; ok$4 = $f.ok$4; ok$5 = $f.ok$5; ok$6 = $f.ok$6; ok$7 = $f.ok$7; ok$8 = $f.ok$8; pos = $f.pos; r = $f.r; rod$1 = $f.rod$1; ui = $f.ui; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		r = 0;
		fgColor = 0;
		bgColor = 0;
		ui = this;
		m = g.Dungeon;
		c = $clone(m.Cell($clone(pos, position)), cell);
		fgColor = $pkg.ColorFg;
		bgColor = $pkg.ColorBg;
		/* */ if (!c.Explored && !g.Wizard) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!c.Explored && !g.Wizard) { */ case 1:
			r = 32;
			_r = g.HasFreeExploredNeighbor($clone(pos, position)); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			/* */ if (_r) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (_r) { */ case 3:
				r = 164;
				fgColor = $pkg.ColorFgDark;
				bgColor = $pkg.ColorBgDark;
			/* } */ case 4:
			if ((_entry = g.Noise[position.keyFor(pos)], _entry !== undefined ? _entry.v : false)) {
				r = 9835;
				fgColor = $pkg.ColorFgWanderingMonster;
				bgColor = $pkg.ColorBgDark;
			}
			$s = -1; return [r, fgColor, bgColor];
		/* } */ case 2:
		/* */ if (g.Wizard) { $s = 6; continue; }
		/* */ $s = 7; continue;
		/* if (g.Wizard) { */ case 6:
			if (!(!c.Explored)) { _v = false; $s = 10; continue s; }
			_r$1 = g.HasFreeExploredNeighbor($clone(pos, position)); /* */ $s = 11; case 11: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_v = _r$1; case 10:
			/* */ if (_v) { $s = 8; continue; }
			/* */ $s = 9; continue;
			/* if (_v) { */ case 8:
				r = 164;
				fgColor = $pkg.ColorFgDark;
				bgColor = $pkg.ColorBgDark;
				$s = -1; return [r, fgColor, bgColor];
			/* } */ case 9:
			/* */ if (c.T === 0) { $s = 12; continue; }
			/* */ $s = 13; continue;
			/* if (c.T === 0) { */ case 12:
				_r$2 = g.Dungeon.FreeNeighbors($clone(pos, position)); /* */ $s = 16; case 16: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				/* */ if (_r$2.$length === 0) { $s = 14; continue; }
				/* */ $s = 15; continue;
				/* if (_r$2.$length === 0) { */ case 14:
					r = 32;
					$s = -1; return [r, fgColor, bgColor];
				/* } */ case 15:
			/* } */ case 13:
		/* } */ case 7:
		if ((_entry$1 = g.Player.LOS[position.keyFor(pos)], _entry$1 !== undefined ? _entry$1.v : false)) {
			fgColor = $pkg.ColorFgLOS;
			bgColor = $pkg.ColorBgLOS;
			if (((_r$3 = pos.X % 2, _r$3 === _r$3 ? _r$3 : $throwRuntimeError("integer divide by zero")) === 1) && ((_r$4 = pos.Y % 2, _r$4 === _r$4 ? _r$4 : $throwRuntimeError("integer divide by zero")) === 0)) {
				bgColor = $pkg.ColorBgLOSalt;
			} else if (((_r$5 = pos.X % 2, _r$5 === _r$5 ? _r$5 : $throwRuntimeError("integer divide by zero")) === 0) && ((_r$6 = pos.Y % 2, _r$6 === _r$6 ? _r$6 : $throwRuntimeError("integer divide by zero")) === 1)) {
				bgColor = $pkg.ColorBgLOSalt;
			}
		} else {
			fgColor = $pkg.ColorFgDark;
			bgColor = $pkg.ColorBgDark;
		}
		if ((_entry$2 = g.ExclusionsMap[position.keyFor(pos)], _entry$2 !== undefined ? _entry$2.v : false) && !((c.T === 0))) {
			fgColor = $pkg.ColorFgExcluded;
		}
			_1 = c.T;
			/* */ if (_1 === (0)) { $s = 18; continue; }
			/* */ if (_1 === (1)) { $s = 19; continue; }
			/* */ $s = 20; continue;
			/* if (_1 === (0)) { */ case 18:
				r = 35;
				if ((_entry$3 = g.TemporalWalls[position.keyFor(pos)], _entry$3 !== undefined ? _entry$3.v : false)) {
					fgColor = $pkg.ColorFgMagicPlace;
				}
				$s = 20; continue;
			/* } else if (_1 === (1)) { */ case 19:
				if ((_entry$4 = g.UnknownDig[position.keyFor(pos)], _entry$4 !== undefined ? _entry$4.v : false)) {
					r = 35;
					if ((_entry$5 = g.TemporalWalls[position.keyFor(pos)], _entry$5 !== undefined ? _entry$5.v : false)) {
						fgColor = $pkg.ColorFgMagicPlace;
					}
					/* break; */ $s = 17; continue;
				}
					/* */ if ($equal(pos, g.Player.Pos, position)) { $s = 22; continue; }
					/* */ $s = 23; continue;
					/* if ($equal(pos, g.Player.Pos, position)) { */ case 22:
						r = 64;
						fgColor = $pkg.ColorFgPlayer;
						$s = 24; continue;
					/* } else { */ case 23:
						r = 46;
						_tuple = (_entry$6 = g.Fungus[position.keyFor(pos)], _entry$6 !== undefined ? [_entry$6.v, true] : [0, false]);
						ok = _tuple[1];
						if (ok) {
							r = 34;
						}
						_tuple$1 = (_entry$7 = g.UnknownBurn[position.keyFor(pos)], _entry$7 !== undefined ? [_entry$7.v, true] : [false, false]);
						ok$1 = _tuple$1[1];
						if (ok$1) {
							r = 34;
						}
						_tuple$2 = (_entry$8 = g.Clouds[position.keyFor(pos)], _entry$8 !== undefined ? [_entry$8.v, true] : [0, false]);
						cld = _tuple$2[0];
						ok$2 = _tuple$2[1];
						if (ok$2 && (_entry$9 = g.Player.LOS[position.keyFor(pos)], _entry$9 !== undefined ? _entry$9.v : false)) {
							r = 167;
							if (cld === 1) {
								fgColor = $pkg.ColorFgWanderingMonster;
							}
						}
						_tuple$3 = (_entry$10 = g.Collectables[position.keyFor(pos)], _entry$10 !== undefined ? [_entry$10.v, true] : [ptrType$4.nil, false]);
						c$1 = _tuple$3[0];
						ok$3 = _tuple$3[1];
						/* */ if (ok$3) { $s = 25; continue; }
						/* */ $s = 26; continue;
						/* if (ok$3) { */ case 25:
							_r$7 = c$1.Consumable.Letter(); /* */ $s = 28; case 28: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
							r = _r$7;
							fgColor = $pkg.ColorFgCollectable;
							$s = 27; continue;
						/* } else { */ case 26:
							_tuple$4 = (_entry$11 = g.Equipables[position.keyFor(pos)], _entry$11 !== undefined ? [_entry$11.v, true] : [$ifaceNil, false]);
							eq = _tuple$4[0];
							ok$4 = _tuple$4[1];
							/* */ if (ok$4) { $s = 29; continue; }
							/* */ $s = 30; continue;
							/* if (ok$4) { */ case 29:
								_r$8 = eq.Letter(); /* */ $s = 32; case 32: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
								r = _r$8;
								fgColor = $pkg.ColorFgCollectable;
								$s = 31; continue;
							/* } else { */ case 30:
								_tuple$5 = (_entry$12 = g.Rods[position.keyFor(pos)], _entry$12 !== undefined ? [_entry$12.v, true] : [0, false]);
								rod$1 = _tuple$5[0];
								ok$5 = _tuple$5[1];
								if (ok$5) {
									r = new rod(rod$1).Letter();
									fgColor = $pkg.ColorFgCollectable;
								} else {
									_tuple$6 = (_entry$13 = g.Stairs[position.keyFor(pos)], _entry$13 !== undefined ? [_entry$13.v, true] : [false, false]);
									ok$6 = _tuple$6[1];
									if (ok$6) {
										r = 62;
										if (g.Depth === g.MaxDepth()) {
											fgColor = $pkg.ColorFgMagicPlace;
										} else {
											fgColor = $pkg.ColorFgPlace;
										}
									} else {
										_tuple$7 = (_entry$14 = g.Simellas[position.keyFor(pos)], _entry$14 !== undefined ? [_entry$14.v, true] : [0, false]);
										ok$7 = _tuple$7[1];
										if (ok$7) {
											r = 9827;
											fgColor = $pkg.ColorFgSimellas;
										} else {
											_tuple$8 = (_entry$15 = g.Doors[position.keyFor(pos)], _entry$15 !== undefined ? [_entry$15.v, true] : [false, false]);
											ok$8 = _tuple$8[1];
											if (ok$8) {
												r = 43;
												fgColor = $pkg.ColorFgPlace;
											}
										}
									}
								}
							/* } */ case 31:
						/* } */ case 27:
						if ((_entry$16 = g.Player.LOS[position.keyFor(pos)], _entry$16 !== undefined ? _entry$16.v : false) || g.Wizard) {
							_tuple$9 = g.MonsterAt($clone(pos, position));
							m$1 = _tuple$9[0];
							if (m$1.Exists()) {
								r = new monsterKind(m$1.Kind).Letter();
								if (m$1.Status(0)) {
									fgColor = $pkg.ColorFgConfusedMonster;
								} else if (m$1.State === 0) {
									fgColor = $pkg.ColorFgSleepingMonster;
								} else if (m$1.State === 2) {
									fgColor = $pkg.ColorFgWanderingMonster;
								} else {
									fgColor = $pkg.ColorFgMonster;
								}
							}
						} else if (!g.Wizard && (_entry$17 = g.Noise[position.keyFor(pos)], _entry$17 !== undefined ? _entry$17.v : false)) {
							r = 9835;
							fgColor = $pkg.ColorFgWanderingMonster;
						}
					/* } */ case 24:
				case 21:
			/* } */ case 20:
		case 17:
		$s = -1; return [r, fgColor, bgColor];
		/* */ } return; } if ($f === undefined) { $f = { $blk: termui.ptr.prototype.PositionDrawing }; } $f._1 = _1; $f._entry = _entry; $f._entry$1 = _entry$1; $f._entry$10 = _entry$10; $f._entry$11 = _entry$11; $f._entry$12 = _entry$12; $f._entry$13 = _entry$13; $f._entry$14 = _entry$14; $f._entry$15 = _entry$15; $f._entry$16 = _entry$16; $f._entry$17 = _entry$17; $f._entry$2 = _entry$2; $f._entry$3 = _entry$3; $f._entry$4 = _entry$4; $f._entry$5 = _entry$5; $f._entry$6 = _entry$6; $f._entry$7 = _entry$7; $f._entry$8 = _entry$8; $f._entry$9 = _entry$9; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f._tuple$4 = _tuple$4; $f._tuple$5 = _tuple$5; $f._tuple$6 = _tuple$6; $f._tuple$7 = _tuple$7; $f._tuple$8 = _tuple$8; $f._tuple$9 = _tuple$9; $f._v = _v; $f.bgColor = bgColor; $f.c = c; $f.c$1 = c$1; $f.cld = cld; $f.eq = eq; $f.fgColor = fgColor; $f.g = g; $f.m = m; $f.m$1 = m$1; $f.ok = ok; $f.ok$1 = ok$1; $f.ok$2 = ok$2; $f.ok$3 = ok$3; $f.ok$4 = ok$4; $f.ok$5 = ok$5; $f.ok$6 = ok$6; $f.ok$7 = ok$7; $f.ok$8 = ok$8; $f.pos = pos; $f.r = r; $f.rod$1 = rod$1; $f.ui = ui; $f.$s = $s; $f.$r = $r; return $f;
	};
	termui.prototype.PositionDrawing = function(g, pos) { return this.$val.PositionDrawing(g, pos); };
	termui.ptr.prototype.DrawStatusBar = function(g, line) {
		var _entry, _entry$1, _entry$2, _entry$3, _i, _i$1, _key, _keys, _q, _q$1, _q$2, _q$3, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _ref, _ref$1, _tuple, c, cld, fg, g, hpColor, line, mpColor, ok, st, st$1, sts, ui, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _entry = $f._entry; _entry$1 = $f._entry$1; _entry$2 = $f._entry$2; _entry$3 = $f._entry$3; _i = $f._i; _i$1 = $f._i$1; _key = $f._key; _keys = $f._keys; _q = $f._q; _q$1 = $f._q$1; _q$2 = $f._q$2; _q$3 = $f._q$3; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _ref = $f._ref; _ref$1 = $f._ref$1; _tuple = $f._tuple; c = $f.c; cld = $f.cld; fg = $f.fg; g = $f.g; hpColor = $f.hpColor; line = $f.line; mpColor = $f.mpColor; ok = $f.ok; st = $f.st; st$1 = $f.st$1; sts = $f.sts; ui = $f.ui; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		g = [g];
		ui = this;
		sts = new statusSlice([]);
		_tuple = (_entry = g[0].Clouds[position.keyFor(g[0].Player.Pos)], _entry !== undefined ? [_entry.v, true] : [0, false]);
		cld = _tuple[0];
		ok = _tuple[1];
		/* */ if (ok && (cld === 1)) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (ok && (cld === 1)) { */ case 1:
			_key = 11; (g[0].Player.Statuses || $throwRuntimeError("assignment to entry in nil map"))[status.keyFor(_key)] = { k: _key, v: 1 };
			$deferred.push([(function(g) { return function() {
				var _key$1;
				_key$1 = 11; (g[0].Player.Statuses || $throwRuntimeError("assignment to entry in nil map"))[status.keyFor(_key$1)] = { k: _key$1, v: 0 };
			}; })(g), []]);
		/* } */ case 2:
		_ref = g[0].Player.Statuses;
		_i = 0;
		_keys = $keys(_ref);
		while (true) {
			if (!(_i < _keys.length)) { break; }
			_entry$1 = _ref[_keys[_i]];
			if (_entry$1 === undefined) {
				_i++;
				continue;
			}
			st = _entry$1.k;
			c = _entry$1.v;
			if (c > 0) {
				sts = $append(sts, st);
			}
			_i++;
		}
		$r = sort.Sort(sts); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		hpColor = $pkg.ColorFgHPok;
		if ((_q = ($imul(g[0].Player.HP, 100)) / g[0].Player.HPMax(), (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) < 30) {
			hpColor = $pkg.ColorFgHPcritical;
		} else if ((_q$1 = ($imul(g[0].Player.HP, 100)) / g[0].Player.HPMax(), (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero")) < 70) {
			hpColor = $pkg.ColorFgHPwounded;
		}
		mpColor = $pkg.ColorFgMPok;
		if ((_q$2 = ($imul(g[0].Player.MP, 100)) / g[0].Player.MPMax(), (_q$2 === _q$2 && _q$2 !== 1/0 && _q$2 !== -1/0) ? _q$2 >> 0 : $throwRuntimeError("integer divide by zero")) < 30) {
			mpColor = $pkg.ColorFgMPcritical;
		} else if ((_q$3 = ($imul(g[0].Player.MP, 100)) / g[0].Player.MPMax(), (_q$3 === _q$3 && _q$3 !== 1/0 && _q$3 !== -1/0) ? _q$3 >> 0 : $throwRuntimeError("integer divide by zero")) < 70) {
			mpColor = $pkg.ColorFgMPpartial;
		}
		_r = fmt.Sprintf("HP: %d", new sliceType$7([new $Int(g[0].Player.HP)])); /* */ $s = 4; case 4: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$r = ui.DrawColoredText(_r, 81, line, hpColor); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		line = line + (1) >> 0;
		_r$1 = fmt.Sprintf("MP: %d", new sliceType$7([new $Int(g[0].Player.MP)])); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$r = ui.DrawColoredText(_r$1, 81, line, mpColor); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		line = line + (1) >> 0;
		line = line + (1) >> 0;
		_r$2 = fmt.Sprintf("Simellas: %d", new sliceType$7([new $Int(g[0].Player.Simellas)])); /* */ $s = 8; case 8: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		$r = ui.DrawText(_r$2, 81, line); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		line = line + (1) >> 0;
		/* */ if (g[0].Depth > g[0].MaxDepth()) { $s = 10; continue; }
		/* */ $s = 11; continue;
		/* if (g[0].Depth > g[0].MaxDepth()) { */ case 10:
			ui.DrawText("Depth: Out!", 81, line);
			$s = 12; continue;
		/* } else { */ case 11:
			_r$3 = fmt.Sprintf("Depth: %d", new sliceType$7([new $Int(g[0].Depth)])); /* */ $s = 13; case 13: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			$r = ui.DrawText(_r$3, 81, line); /* */ $s = 14; case 14: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 12:
		line = line + (1) >> 0;
		_r$4 = fmt.Sprintf("Turns: %.1f", new sliceType$7([new $Float64((g[0].Turn) / 10)])); /* */ $s = 15; case 15: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		$r = ui.DrawText(_r$4, 81, line); /* */ $s = 16; case 16: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		line = line + (1) >> 0;
		_ref$1 = sts;
		_i$1 = 0;
		/* while (true) { */ case 17:
			/* if (!(_i$1 < _ref$1.$length)) { break; } */ if(!(_i$1 < _ref$1.$length)) { $s = 18; continue; }
			st$1 = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$1.$array[_ref$1.$offset + _i$1]);
			fg = $pkg.ColorFgStatusOther;
			if (new status(st$1).Good()) {
				fg = $pkg.ColorFgStatusGood;
			} else if (new status(st$1).Bad()) {
				fg = $pkg.ColorFgStatusBad;
			}
			/* */ if ((_entry$2 = g[0].Player.Statuses[status.keyFor(st$1)], _entry$2 !== undefined ? _entry$2.v : 0) > 1) { $s = 19; continue; }
			/* */ $s = 20; continue;
			/* if ((_entry$2 = g[0].Player.Statuses[status.keyFor(st$1)], _entry$2 !== undefined ? _entry$2.v : 0) > 1) { */ case 19:
				_r$5 = fmt.Sprintf("%s (%d)", new sliceType$7([new status(st$1), new $Int((_entry$3 = g[0].Player.Statuses[status.keyFor(st$1)], _entry$3 !== undefined ? _entry$3.v : 0))])); /* */ $s = 22; case 22: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
				$r = ui.DrawColoredText(_r$5, 81, line, fg); /* */ $s = 23; case 23: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 21; continue;
			/* } else { */ case 20:
				ui.DrawColoredText(new status(st$1).String(), 81, line, fg);
			/* } */ case 21:
			line = line + (1) >> 0;
			_i$1++;
		/* } */ $s = 17; continue; case 18:
		$s = -1; return;
		/* */ } return; } } catch(err) { $err = err; $s = -1; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: termui.ptr.prototype.DrawStatusBar }; } $f._entry = _entry; $f._entry$1 = _entry$1; $f._entry$2 = _entry$2; $f._entry$3 = _entry$3; $f._i = _i; $f._i$1 = _i$1; $f._key = _key; $f._keys = _keys; $f._q = _q; $f._q$1 = _q$1; $f._q$2 = _q$2; $f._q$3 = _q$3; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._ref = _ref; $f._ref$1 = _ref$1; $f._tuple = _tuple; $f.c = c; $f.cld = cld; $f.fg = fg; $f.g = g; $f.hpColor = hpColor; $f.line = line; $f.mpColor = mpColor; $f.ok = ok; $f.st = st; $f.st$1 = st$1; $f.sts = sts; $f.ui = ui; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	termui.prototype.DrawStatusBar = function(g, line) { return this.$val.DrawStatusBar(g, line); };
	termui.ptr.prototype.LogColor = function(e) {
		var _1, e, fg, ui;
		ui = this;
		fg = $pkg.ColorFg;
		_1 = e.Style;
		if (_1 === (1)) {
			fg = $pkg.ColorRed;
		} else if (_1 === (2)) {
			fg = $pkg.ColorGreen;
		} else if (_1 === (3)) {
			fg = $pkg.ColorOrange;
		} else if (_1 === (4)) {
			fg = $pkg.ColorMagenta;
		} else if (_1 === (5)) {
			fg = $pkg.ColorViolet;
		} else if (_1 === (6)) {
			fg = $pkg.ColorRed;
		}
		return fg;
	};
	termui.prototype.LogColor = function(e) { return this.$val.LogColor(e); };
	termui.ptr.prototype.DrawLog = function(g) {
		var _i, _ref, e, fguicolor, g, i, min, ui;
		ui = this;
		min = g.Log.$length - 4 >> 0;
		if (min < 0) {
			min = 0;
		}
		_ref = $subslice(g.Log, min);
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			e = $clone(((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]), logEntry);
			fguicolor = ui.LogColor($clone(e, logEntry));
			if (e.Tick) {
				ui.DrawColoredText("\xE2\x80\xA2", 0, 22 + i >> 0, $pkg.ColorYellow);
				ui.DrawColoredText($clone(e, logEntry).String(), 2, 22 + i >> 0, fguicolor);
			} else {
				ui.DrawColoredText($clone(e, logEntry).String(), 0, 22 + i >> 0, fguicolor);
			}
			_i++;
		}
	};
	termui.prototype.DrawLog = function(g) { return this.$val.DrawLog(g); };
	InRuneSlice = function(r, s) {
		var _i, _ref, r, rr, s;
		_ref = s;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			rr = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			if (r === rr) {
				return true;
			}
			_i++;
		}
		return false;
	};
	$pkg.InRuneSlice = InRuneSlice;
	termui.ptr.prototype.RunesForKeyAction = function(k) {
		var _entry, _entry$1, _i, _i$1, _keys, _keys$1, _ref, _ref$1, chars, k, ka, ka$1, r, r$1, runes, text, ui, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _entry = $f._entry; _entry$1 = $f._entry$1; _i = $f._i; _i$1 = $f._i$1; _keys = $f._keys; _keys$1 = $f._keys$1; _ref = $f._ref; _ref$1 = $f._ref$1; chars = $f.chars; k = $f.k; ka = $f.ka; ka$1 = $f.ka$1; r = $f.r; r$1 = $f.r$1; runes = $f.runes; text = $f.text; ui = $f.ui; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		ui = this;
		runes = new sliceType$9([]);
		_ref = runeNormalKeyActions;
		_i = 0;
		_keys = $keys(_ref);
		while (true) {
			if (!(_i < _keys.length)) { break; }
			_entry = _ref[_keys[_i]];
			if (_entry === undefined) {
				_i++;
				continue;
			}
			r = _entry.k;
			ka = _entry.v;
			if ((k === ka) && !InRuneSlice(r, runes)) {
				runes = $append(runes, r);
			}
			_i++;
		}
		_ref$1 = runeTargetingKeyActions;
		_i$1 = 0;
		_keys$1 = $keys(_ref$1);
		while (true) {
			if (!(_i$1 < _keys$1.length)) { break; }
			_entry$1 = _ref$1[_keys$1[_i$1]];
			if (_entry$1 === undefined) {
				_i$1++;
				continue;
			}
			r$1 = _entry$1.k;
			ka$1 = _entry$1.v;
			if ((k === ka$1) && !InRuneSlice(r$1, runes)) {
				runes = $append(runes, r$1);
			}
			_i$1++;
		}
		chars = strings.Split(($runesToString(runes)), "");
		$r = sort.Strings(chars); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		text = strings.Join(chars, " or ");
		$s = -1; return text;
		/* */ } return; } if ($f === undefined) { $f = { $blk: termui.ptr.prototype.RunesForKeyAction }; } $f._entry = _entry; $f._entry$1 = _entry$1; $f._i = _i; $f._i$1 = _i$1; $f._keys = _keys; $f._keys$1 = _keys$1; $f._ref = _ref; $f._ref$1 = _ref$1; $f.chars = chars; $f.k = k; $f.ka = ka; $f.ka$1 = ka$1; $f.r = r; $f.r$1 = r$1; $f.runes = runes; $f.text = text; $f.ui = ui; $f.$s = $s; $f.$r = $r; return $f;
	};
	termui.prototype.RunesForKeyAction = function(k) { return this.$val.RunesForKeyAction(k); };
	termui.ptr.prototype.Configure = function(g) {
		var _1, _arg, _arg$1, _key, _key$1, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _tuple, action, bg, desc, err, err$1, g, i, ka, ka$1, lines, n, nmax, r, s, to, ui, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _arg = $f._arg; _arg$1 = $f._arg$1; _key = $f._key; _key$1 = $f._key$1; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _tuple = $f._tuple; action = $f.action; bg = $f.bg; desc = $f.desc; err = $f.err; err$1 = $f.err$1; g = $f.g; i = $f.i; ka = $f.ka; ka$1 = $f.ka$1; lines = $f.lines; n = $f.n; nmax = $f.nmax; r = $f.r; s = $f.s; to = $f.to; ui = $f.ui; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		ui = this;
		lines = 21;
		nmax = 38 - lines >> 0;
		n = 0;
		s = 0;
		/* while (true) { */ case 1:
			$r = ui.DrawDungeonView(g, 2); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			if (n >= nmax) {
				n = nmax;
			}
			if (n < 0) {
				n = 0;
			}
			to = n + lines >> 0;
			if (to >= 38) {
				to = 38;
			}
			i = n;
			/* while (true) { */ case 4:
				/* if (!(i < to)) { break; } */ if(!(i < to)) { $s = 5; continue; }
				ka = ((i < 0 || i >= configurableKeyActions.length) ? ($throwRuntimeError("index out of range"), undefined) : configurableKeyActions[i]);
				desc = new keyAction(ka).NormalModeDescription();
				if (!new keyAction(ka).NormalModeKey()) {
					desc = new keyAction(ka).TargetingModeDescription();
				}
				bg = ui.ListItemBG(i);
				ui.ClearLineWithColor(i - n >> 0, bg);
				_arg = new $String(desc);
				_r = ui.RunesForKeyAction(ka); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				_arg$1 = new $String(_r);
				_r$1 = fmt.Sprintf(" %-36s %s", new sliceType$7([_arg, _arg$1])); /* */ $s = 7; case 7: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				desc = _r$1;
				if (i === s) {
					ui.DrawColoredTextOnBG(desc, 0, i - n >> 0, $pkg.ColorYellow, bg);
				} else {
					ui.DrawColoredTextOnBG(desc, 0, i - n >> 0, $pkg.ColorFg, bg);
				}
				i = i + (1) >> 0;
			/* } */ $s = 4; continue; case 5:
			ui.ClearLine(lines);
			ui.DrawStyledTextLine(" add key (a) up/down (arrows/u/d) reset (R) quit (esc or space) ", lines, 2);
			ui.Flush();
			action = 0;
			_r$2 = ui.MenuAction(s); /* */ $s = 8; case 8: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_tuple = _r$2;
			s = _tuple[0];
			action = _tuple[1];
			if (s >= 38) {
				s = 37;
			}
			if (s < 0) {
				s = 0;
			}
			if (s < (n + 1 >> 0)) {
				n = n - (12) >> 0;
			}
			if (s > ((n + lines >> 0) - 2 >> 0)) {
				n = n + (12) >> 0;
			}
				_1 = action;
				/* */ if (_1 === (1)) { $s = 10; continue; }
				/* */ if (_1 === (3)) { $s = 11; continue; }
				/* */ if (_1 === (2)) { $s = 12; continue; }
				/* */ $s = 13; continue;
				/* if (_1 === (1)) { */ case 10:
					ui.DrawStyledTextLine(" insert new key ", lines, 2);
					ui.Flush();
					_r$3 = ui.ReadRuneKey(); /* */ $s = 14; case 14: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
					r = _r$3;
					/* */ if (r === 0) { $s = 15; continue; }
					/* */ $s = 16; continue;
					/* if (r === 0) { */ case 15:
						/* continue loop; */ $s = 1; continue s;
					/* } */ case 16:
					/* */ if (FixedRuneKey(r)) { $s = 17; continue; }
					/* */ $s = 18; continue;
					/* if (FixedRuneKey(r)) { */ case 17:
						$r = g.Printf("You cannot rebind \xE2\x80\x9C%c\xE2\x80\x9D.", new sliceType$7([new $Int32(r)])); /* */ $s = 19; case 19: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						/* continue loop; */ $s = 1; continue s;
					/* } */ case 18:
					$pkg.CustomKeys = true;
					ka$1 = ((s < 0 || s >= configurableKeyActions.length) ? ($throwRuntimeError("index out of range"), undefined) : configurableKeyActions[s]);
					if (new keyAction(ka$1).NormalModeKey()) {
						_key = r; (runeNormalKeyActions || $throwRuntimeError("assignment to entry in nil map"))[$Int32.keyFor(_key)] = { k: _key, v: ka$1 };
					} else {
						delete runeNormalKeyActions[$Int32.keyFor(r)];
					}
					if (new keyAction(ka$1).TargetingModeKey()) {
						_key$1 = r; (runeTargetingKeyActions || $throwRuntimeError("assignment to entry in nil map"))[$Int32.keyFor(_key$1)] = { k: _key$1, v: ka$1 };
					} else {
						delete runeTargetingKeyActions[$Int32.keyFor(r)];
					}
					err = g.SaveConfig();
					/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 20; continue; }
					/* */ $s = 21; continue;
					/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 20:
						_r$4 = err.Error(); /* */ $s = 22; case 22: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
						$r = g.Print(_r$4); /* */ $s = 23; case 23: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					/* } */ case 21:
					$s = 13; continue;
				/* } else if (_1 === (3)) { */ case 11:
					/* break loop; */ $s = 2; continue s;
					$s = 13; continue;
				/* } else if (_1 === (2)) { */ case 12:
					ApplyDefaultKeyBindings();
					err$1 = g.RemoveDataFile("config.gob");
					/* */ if (!($interfaceIsEqual(err$1, $ifaceNil))) { $s = 24; continue; }
					/* */ $s = 25; continue;
					/* if (!($interfaceIsEqual(err$1, $ifaceNil))) { */ case 24:
						_r$5 = err$1.Error(); /* */ $s = 26; case 26: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
						$r = g.Print(_r$5); /* */ $s = 27; case 27: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					/* } */ case 25:
				/* } */ case 13:
			case 9:
		/* } */ $s = 1; continue; case 2:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: termui.ptr.prototype.Configure }; } $f._1 = _1; $f._arg = _arg; $f._arg$1 = _arg$1; $f._key = _key; $f._key$1 = _key$1; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._tuple = _tuple; $f.action = action; $f.bg = bg; $f.desc = desc; $f.err = err; $f.err$1 = err$1; $f.g = g; $f.i = i; $f.ka = ka; $f.ka$1 = ka$1; $f.lines = lines; $f.n = n; $f.nmax = nmax; $f.r = r; $f.s = s; $f.to = to; $f.ui = ui; $f.$s = $s; $f.$r = $r; return $f;
	};
	termui.prototype.Configure = function(g) { return this.$val.Configure(g); };
	termui.ptr.prototype.DrawPreviousLogs = function(g) {
		var _r, _r$1, _tuple, e, fguicolor, g, i, i$1, i$2, j, lines, n, nmax, quit, rc, s, to, ui, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; e = $f.e; fguicolor = $f.fguicolor; g = $f.g; i = $f.i; i$1 = $f.i$1; i$2 = $f.i$2; j = $f.j; lines = $f.lines; n = $f.n; nmax = $f.nmax; quit = $f.quit; rc = $f.rc; s = $f.s; to = $f.to; ui = $f.ui; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		ui = this;
		lines = 25;
		nmax = g.Log.$length - lines >> 0;
		n = nmax;
		/* while (true) { */ case 1:
			$r = ui.DrawDungeonView(g, 2); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			if (n >= nmax) {
				n = nmax;
			}
			if (n < 0) {
				n = 0;
			}
			to = n + lines >> 0;
			if (to >= g.Log.$length) {
				to = g.Log.$length;
			}
			i = 0;
			while (true) {
				if (!(i < 4)) { break; }
				ui.SetCell(79, 21 + i >> 0, 9474, $pkg.ColorFg, $pkg.ColorBg);
				i = i + (1) >> 0;
			}
			i$1 = n;
			while (true) {
				if (!(i$1 < to)) { break; }
				e = $clone((x = g.Log, ((i$1 < 0 || i$1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i$1])), logEntry);
				fguicolor = ui.LogColor($clone(e, logEntry));
				ui.ClearLine(i$1 - n >> 0);
				rc = utf8.RuneCountInString(e.Text);
				if (e.Tick) {
					rc = rc + (2) >> 0;
				}
				if (rc >= 79) {
					j = 79;
					while (true) {
						if (!(j < 103)) { break; }
						ui.SetCell(j, i$1 - n >> 0, 32, $pkg.ColorFg, $pkg.ColorBg);
						j = j + (1) >> 0;
					}
				}
				if (e.Tick) {
					ui.DrawColoredText("\xE2\x80\xA2", 0, i$1 - n >> 0, $pkg.ColorYellow);
					ui.DrawColoredText(e.Text, 2, i$1 - n >> 0, fguicolor);
				} else {
					ui.DrawColoredText(e.Text, 0, i$1 - n >> 0, fguicolor);
				}
				i$1 = i$1 + (1) >> 0;
			}
			i$2 = g.Log.$length;
			while (true) {
				if (!(i$2 < 25)) { break; }
				ui.ClearLine(i$2 - n >> 0);
				i$2 = i$2 + (1) >> 0;
			}
			ui.ClearLine(lines);
			_r = fmt.Sprintf(" half-page up/down (u/d) quit (esc or space) \xE2\x80\x94 (%d/%d) \n", new sliceType$7([new $Int((g.Log.$length - to >> 0)), new $Int(g.Log.$length)])); /* */ $s = 4; case 4: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			s = _r;
			ui.DrawStyledTextLine(s, lines, 2);
			ui.Flush();
			quit = false;
			_r$1 = ui.Scroll(n); /* */ $s = 5; case 5: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_tuple = _r$1;
			n = _tuple[0];
			quit = _tuple[1];
			if (quit) {
				/* break loop; */ $s = 2; continue s;
			}
		/* } */ $s = 1; continue; case 2:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: termui.ptr.prototype.DrawPreviousLogs }; } $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f.e = e; $f.fguicolor = fguicolor; $f.g = g; $f.i = i; $f.i$1 = i$1; $f.i$2 = i$2; $f.j = j; $f.lines = lines; $f.n = n; $f.nmax = nmax; $f.quit = quit; $f.rc = rc; $f.s = s; $f.to = to; $f.ui = ui; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	termui.prototype.DrawPreviousLogs = function(g) { return this.$val.DrawPreviousLogs(g); };
	termui.ptr.prototype.DrawMonsterDescription = function(g, mons) {
		var _r, _r$1, g, mons, s, ui, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; g = $f.g; mons = $f.mons; s = $f.s; ui = $f.ui; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		ui = this;
		s = new monsterKind(mons.Kind).Desc();
		_r = fmt.Sprintf("They can hit for up to %d damage.", new sliceType$7([new $Int(new monsterKind(mons.Kind).BaseAttack())])); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		s = s + (" " + _r);
		_r$1 = fmt.Sprintf("They have around %d HP.", new sliceType$7([new $Int(new monsterKind(mons.Kind).MaxHP())])); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		s = s + (" " + _r$1);
		$r = ui.DrawDescription(g, s); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: termui.ptr.prototype.DrawMonsterDescription }; } $f._r = _r; $f._r$1 = _r$1; $f.g = g; $f.mons = mons; $f.s = s; $f.ui = ui; $f.$s = $s; $f.$r = $r; return $f;
	};
	termui.prototype.DrawMonsterDescription = function(g, mons) { return this.$val.DrawMonsterDescription(g, mons); };
	termui.ptr.prototype.DrawConsumableDescription = function(g, c) {
		var _arg, _arg$1, _r, c, g, ui, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _arg = $f._arg; _arg$1 = $f._arg$1; _r = $f._r; c = $f.c; g = $f.g; ui = $f.ui; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		ui = this;
		_arg = g;
		_r = c.Desc(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_arg$1 = _r;
		$r = ui.DrawDescription(_arg, _arg$1); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: termui.ptr.prototype.DrawConsumableDescription }; } $f._arg = _arg; $f._arg$1 = _arg$1; $f._r = _r; $f.c = c; $f.g = g; $f.ui = ui; $f.$s = $s; $f.$r = $r; return $f;
	};
	termui.prototype.DrawConsumableDescription = function(g, c) { return this.$val.DrawConsumableDescription(g, c); };
	termui.ptr.prototype.DrawDescription = function(g, desc) {
		var desc, g, i, lines, ui, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; desc = $f.desc; g = $f.g; i = $f.i; lines = $f.lines; ui = $f.ui; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		ui = this;
		$r = ui.DrawDungeonView(g, 2); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		desc = formatText(desc, 77);
		lines = strings.Count(desc, "\n");
		i = 0;
		while (true) {
			if (!(i <= (lines + 2 >> 0))) { break; }
			ui.ClearLine(i);
			i = i + (1) >> 0;
		}
		ui.DrawText(desc, 0, 0);
		ui.DrawTextLine(" press esc or space to continue ", lines + 2 >> 0);
		ui.Flush();
		$r = ui.WaitForContinue(g, lines + 2 >> 0); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: termui.ptr.prototype.DrawDescription }; } $f.desc = desc; $f.g = g; $f.i = i; $f.lines = lines; $f.ui = ui; $f.$s = $s; $f.$r = $r; return $f;
	};
	termui.prototype.DrawDescription = function(g, desc) { return this.$val.DrawDescription(g, desc); };
	termui.ptr.prototype.DrawText = function(text, x, y) {
		var text, ui, x, y;
		ui = this;
		ui.DrawColoredText(text, x, y, $pkg.ColorFg);
	};
	termui.prototype.DrawText = function(text, x, y) { return this.$val.DrawText(text, x, y); };
	termui.ptr.prototype.DrawColoredText = function(text, x, y, fg) {
		var fg, text, ui, x, y;
		ui = this;
		ui.DrawColoredTextOnBG(text, x, y, fg, $pkg.ColorBg);
	};
	termui.prototype.DrawColoredText = function(text, x, y, fg) { return this.$val.DrawColoredText(text, x, y, fg); };
	termui.ptr.prototype.DrawColoredTextOnBG = function(text, x, y, fg, bg) {
		var _i, _ref, _rune, bg, col, fg, r, text, ui, x, y;
		ui = this;
		col = 0;
		_ref = text;
		_i = 0;
		while (true) {
			if (!(_i < _ref.length)) { break; }
			_rune = $decodeRune(_ref, _i);
			r = _rune[0];
			if (r === 10) {
				y = y + (1) >> 0;
				col = 0;
				_i += _rune[1];
				continue;
			}
			ui.SetCell(x + col >> 0, y, r, fg, bg);
			col = col + (1) >> 0;
			_i += _rune[1];
		}
	};
	termui.prototype.DrawColoredTextOnBG = function(text, x, y, fg, bg) { return this.$val.DrawColoredTextOnBG(text, x, y, fg, bg); };
	termui.ptr.prototype.DrawLine = function(lnum) {
		var i, lnum, ui;
		ui = this;
		i = 0;
		while (true) {
			if (!(i < 79)) { break; }
			ui.SetCell(i, lnum, 9472, $pkg.ColorFg, $pkg.ColorBg);
			i = i + (1) >> 0;
		}
		ui.SetCell(79, lnum, 9508, $pkg.ColorFg, $pkg.ColorBg);
	};
	termui.prototype.DrawLine = function(lnum) { return this.$val.DrawLine(lnum); };
	termui.ptr.prototype.DrawTextLine = function(text, lnum) {
		var lnum, text, ui;
		ui = this;
		ui.DrawStyledTextLine(text, lnum, 0);
	};
	termui.prototype.DrawTextLine = function(text, lnum) { return this.$val.DrawTextLine(text, lnum); };
	termui.ptr.prototype.DrawInfoLine = function(text) {
		var text, ui;
		ui = this;
		ui.ClearLineWithColor(22, $pkg.ColorBase02);
		ui.DrawColoredTextOnBG(text, 0, 22, $pkg.ColorBlue, $pkg.ColorBase02);
	};
	termui.prototype.DrawInfoLine = function(text) { return this.$val.DrawInfoLine(text); };
	termui.ptr.prototype.DrawStyledTextLine = function(text, lnum, st) {
		var _1, _2, _q, dist, i, i$1, lnum, nchars, st, text, ui;
		ui = this;
		nchars = utf8.RuneCountInString(text);
		dist = (_q = ((79 - nchars >> 0)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
		i = 0;
		while (true) {
			if (!(i < dist)) { break; }
			ui.SetCell(i, lnum, 9472, $pkg.ColorFg, $pkg.ColorBg);
			i = i + (1) >> 0;
		}
		_1 = st;
		if (_1 === (1)) {
			ui.DrawColoredText(text, dist, lnum, $pkg.ColorYellow);
		} else if (_1 === (2)) {
			ui.DrawColoredText(text, dist, lnum, $pkg.ColorCyan);
		} else {
			ui.DrawColoredText(text, dist, lnum, $pkg.ColorFg);
		}
		i$1 = dist + nchars >> 0;
		while (true) {
			if (!(i$1 < 79)) { break; }
			ui.SetCell(i$1, lnum, 9472, $pkg.ColorFg, $pkg.ColorBg);
			i$1 = i$1 + (1) >> 0;
		}
		_2 = st;
		if (_2 === (1)) {
			ui.SetCell(79, lnum, 9488, $pkg.ColorFg, $pkg.ColorBg);
		} else if (_2 === (2)) {
			ui.SetCell(79, lnum, 9496, $pkg.ColorFg, $pkg.ColorBg);
		} else {
			ui.SetCell(79, lnum, 9508, $pkg.ColorFg, $pkg.ColorBg);
		}
	};
	termui.prototype.DrawStyledTextLine = function(text, lnum, st) { return this.$val.DrawStyledTextLine(text, lnum, st); };
	termui.ptr.prototype.ClearLine = function(lnum) {
		var i, lnum, ui;
		ui = this;
		i = 0;
		while (true) {
			if (!(i < 79)) { break; }
			ui.SetCell(i, lnum, 32, $pkg.ColorFg, $pkg.ColorBg);
			i = i + (1) >> 0;
		}
		ui.SetCell(79, lnum, 9474, $pkg.ColorFg, $pkg.ColorBg);
	};
	termui.prototype.ClearLine = function(lnum) { return this.$val.ClearLine(lnum); };
	termui.ptr.prototype.ClearLineWithColor = function(lnum, bg) {
		var bg, i, lnum, ui;
		ui = this;
		i = 0;
		while (true) {
			if (!(i < 79)) { break; }
			ui.SetCell(i, lnum, 32, $pkg.ColorFg, bg);
			i = i + (1) >> 0;
		}
		ui.SetCell(79, lnum, 9474, $pkg.ColorFg, $pkg.ColorBg);
	};
	termui.prototype.ClearLineWithColor = function(lnum, bg) { return this.$val.ClearLineWithColor(lnum, bg); };
	termui.ptr.prototype.ListItemBG = function(i) {
		var _r, bg, i, ui;
		ui = this;
		bg = $pkg.ColorBase03;
		if ((_r = i % 2, _r === _r ? _r : $throwRuntimeError("integer divide by zero")) === 1) {
			bg = $pkg.ColorBase02;
		}
		return bg;
	};
	termui.prototype.ListItemBG = function(i) { return this.$val.ListItemBG(i); };
	termui.ptr.prototype.ConsumableItem = function(g, i, lnum, c, fg) {
		var _entry, _r, bg, c, fg, g, i, lnum, ui, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _entry = $f._entry; _r = $f._r; bg = $f.bg; c = $f.c; fg = $f.fg; g = $f.g; i = $f.i; lnum = $f.lnum; ui = $f.ui; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		ui = this;
		bg = ui.ListItemBG(i);
		ui.ClearLineWithColor(lnum, bg);
		_r = fmt.Sprintf("%c - %s (%d available)", new sliceType$7([new $Int32((((i + 97 >> 0) >> 0))), c, new $Int((_entry = g.Player.Consumables[consumable.keyFor(c)], _entry !== undefined ? _entry.v : 0))])); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$r = ui.DrawColoredTextOnBG(_r, 0, lnum, fg, bg); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: termui.ptr.prototype.ConsumableItem }; } $f._entry = _entry; $f._r = _r; $f.bg = bg; $f.c = c; $f.fg = fg; $f.g = g; $f.i = i; $f.lnum = lnum; $f.ui = ui; $f.$s = $s; $f.$r = $r; return $f;
	};
	termui.prototype.ConsumableItem = function(g, i, lnum, c, fg) { return this.$val.ConsumableItem(g, i, lnum, c, fg); };
	termui.ptr.prototype.SelectProjectile = function(g, ev) {
		var _arg, _arg$1, _i, _r, _r$1, _r$2, _r$3, _ref, _tuple, alternate, c, col, col$1, cs, desc, err, ev, g, i, index, ui, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _arg = $f._arg; _arg$1 = $f._arg$1; _i = $f._i; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _ref = $f._ref; _tuple = $f._tuple; alternate = $f.alternate; c = $f.c; col = $f.col; col$1 = $f.col$1; cs = $f.cs; desc = $f.desc; err = $f.err; ev = $f.ev; g = $f.g; i = $f.i; index = $f.index; ui = $f.ui; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		ui = this;
		desc = false;
		/* while (true) { */ case 1:
			_r = g.SortedProjectiles(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			cs = _r;
			ui.ClearLine(0);
			if (desc) {
				ui.DrawColoredText("Describe", 0, 0, $pkg.ColorBlue);
				col = utf8.RuneCountInString("Describe");
				ui.DrawText(" which projectile? (press ? for throwing menu, esc or space to cancel)", col, 0);
			} else {
				ui.DrawColoredText("Throw", 0, 0, $pkg.ColorOrange);
				col$1 = utf8.RuneCountInString("Throw");
				ui.DrawText(" which projectile? (press ? for describe menu, esc or space to cancel)", col$1, 0);
			}
			_ref = cs;
			_i = 0;
			/* while (true) { */ case 4:
				/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 5; continue; }
				i = _i;
				c = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
				$r = ui.ConsumableItem(g, i, i + 1 >> 0, c, $pkg.ColorFg); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				_i++;
			/* } */ $s = 4; continue; case 5:
			ui.DrawLine(cs.$length + 1 >> 0);
			ui.Flush();
			_r$1 = ui.Select(g, ev, cs.$length); /* */ $s = 7; case 7: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_tuple = _r$1;
			index = _tuple[0];
			alternate = _tuple[1];
			err = _tuple[2];
			/* */ if (alternate) { $s = 8; continue; }
			/* */ $s = 9; continue;
			/* if (alternate) { */ case 8:
				desc = !desc;
				/* continue; */ $s = 1; continue;
			/* } */ case 9:
			/* */ if ($interfaceIsEqual(err, $ifaceNil)) { $s = 10; continue; }
			/* */ $s = 11; continue;
			/* if ($interfaceIsEqual(err, $ifaceNil)) { */ case 10:
				$r = ui.ConsumableItem(g, index, index + 1 >> 0, ((index < 0 || index >= cs.$length) ? ($throwRuntimeError("index out of range"), undefined) : cs.$array[cs.$offset + index]), $pkg.ColorYellow); /* */ $s = 12; case 12: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				ui.Flush();
				$r = time.Sleep(new time.Duration(0, 100000000)); /* */ $s = 13; case 13: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* */ if (desc) { $s = 14; continue; }
				/* */ $s = 15; continue;
				/* if (desc) { */ case 14:
					_arg = g;
					_r$2 = ((index < 0 || index >= cs.$length) ? ($throwRuntimeError("index out of range"), undefined) : cs.$array[cs.$offset + index]).Desc(); /* */ $s = 16; case 16: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
					_arg$1 = _r$2;
					$r = ui.DrawDescription(_arg, _arg$1); /* */ $s = 17; case 17: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					/* continue; */ $s = 1; continue;
				/* } */ case 15:
				_r$3 = ((index < 0 || index >= cs.$length) ? ($throwRuntimeError("index out of range"), undefined) : cs.$array[cs.$offset + index]).Use(g, ev); /* */ $s = 18; case 18: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				err = _r$3;
			/* } */ case 11:
			$s = -1; return err;
		/* } */ $s = 1; continue; case 2:
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: termui.ptr.prototype.SelectProjectile }; } $f._arg = _arg; $f._arg$1 = _arg$1; $f._i = _i; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._ref = _ref; $f._tuple = _tuple; $f.alternate = alternate; $f.c = c; $f.col = col; $f.col$1 = col$1; $f.cs = cs; $f.desc = desc; $f.err = err; $f.ev = ev; $f.g = g; $f.i = i; $f.index = index; $f.ui = ui; $f.$s = $s; $f.$r = $r; return $f;
	};
	termui.prototype.SelectProjectile = function(g, ev) { return this.$val.SelectProjectile(g, ev); };
	termui.ptr.prototype.SelectPotion = function(g, ev) {
		var _arg, _arg$1, _i, _r, _r$1, _r$2, _r$3, _ref, _tuple, alternate, c, col, col$1, cs, desc, err, ev, g, i, index, ui, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _arg = $f._arg; _arg$1 = $f._arg$1; _i = $f._i; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _ref = $f._ref; _tuple = $f._tuple; alternate = $f.alternate; c = $f.c; col = $f.col; col$1 = $f.col$1; cs = $f.cs; desc = $f.desc; err = $f.err; ev = $f.ev; g = $f.g; i = $f.i; index = $f.index; ui = $f.ui; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		ui = this;
		desc = false;
		/* while (true) { */ case 1:
			_r = g.SortedPotions(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			cs = _r;
			ui.ClearLine(0);
			if (desc) {
				ui.DrawColoredText("Describe", 0, 0, $pkg.ColorBlue);
				col = utf8.RuneCountInString("Describe");
				ui.DrawText(" which potion? (press ? for quaff menu, esc or space to cancel)", col, 0);
			} else {
				ui.DrawColoredText("Drink", 0, 0, $pkg.ColorGreen);
				col$1 = utf8.RuneCountInString("Drink");
				ui.DrawText(" which potion? (press ? for description menu, esc or space to cancel)", col$1, 0);
			}
			_ref = cs;
			_i = 0;
			/* while (true) { */ case 4:
				/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 5; continue; }
				i = _i;
				c = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
				$r = ui.ConsumableItem(g, i, i + 1 >> 0, c, $pkg.ColorFg); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				_i++;
			/* } */ $s = 4; continue; case 5:
			ui.DrawLine(cs.$length + 1 >> 0);
			ui.Flush();
			_r$1 = ui.Select(g, ev, cs.$length); /* */ $s = 7; case 7: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_tuple = _r$1;
			index = _tuple[0];
			alternate = _tuple[1];
			err = _tuple[2];
			/* */ if (alternate) { $s = 8; continue; }
			/* */ $s = 9; continue;
			/* if (alternate) { */ case 8:
				desc = !desc;
				/* continue; */ $s = 1; continue;
			/* } */ case 9:
			/* */ if ($interfaceIsEqual(err, $ifaceNil)) { $s = 10; continue; }
			/* */ $s = 11; continue;
			/* if ($interfaceIsEqual(err, $ifaceNil)) { */ case 10:
				$r = ui.ConsumableItem(g, index, index + 1 >> 0, ((index < 0 || index >= cs.$length) ? ($throwRuntimeError("index out of range"), undefined) : cs.$array[cs.$offset + index]), $pkg.ColorYellow); /* */ $s = 12; case 12: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				ui.Flush();
				$r = time.Sleep(new time.Duration(0, 100000000)); /* */ $s = 13; case 13: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* */ if (desc) { $s = 14; continue; }
				/* */ $s = 15; continue;
				/* if (desc) { */ case 14:
					_arg = g;
					_r$2 = ((index < 0 || index >= cs.$length) ? ($throwRuntimeError("index out of range"), undefined) : cs.$array[cs.$offset + index]).Desc(); /* */ $s = 16; case 16: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
					_arg$1 = _r$2;
					$r = ui.DrawDescription(_arg, _arg$1); /* */ $s = 17; case 17: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					/* continue; */ $s = 1; continue;
				/* } */ case 15:
				_r$3 = ((index < 0 || index >= cs.$length) ? ($throwRuntimeError("index out of range"), undefined) : cs.$array[cs.$offset + index]).Use(g, ev); /* */ $s = 18; case 18: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				err = _r$3;
			/* } */ case 11:
			$s = -1; return err;
		/* } */ $s = 1; continue; case 2:
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: termui.ptr.prototype.SelectPotion }; } $f._arg = _arg; $f._arg$1 = _arg$1; $f._i = _i; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._ref = _ref; $f._tuple = _tuple; $f.alternate = alternate; $f.c = c; $f.col = col; $f.col$1 = col$1; $f.cs = cs; $f.desc = desc; $f.err = err; $f.ev = ev; $f.g = g; $f.i = i; $f.index = index; $f.ui = ui; $f.$s = $s; $f.$r = $r; return $f;
	};
	termui.prototype.SelectPotion = function(g, ev) { return this.$val.SelectPotion(g, ev); };
	termui.ptr.prototype.RodItem = function(g, i, lnum, r, fg) {
		var _entry, _r, bg, fg, g, i, lnum, r, ui, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _entry = $f._entry; _r = $f._r; bg = $f.bg; fg = $f.fg; g = $f.g; i = $f.i; lnum = $f.lnum; r = $f.r; ui = $f.ui; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		ui = this;
		bg = ui.ListItemBG(i);
		ui.ClearLineWithColor(lnum, bg);
		_r = fmt.Sprintf("%c - %s (%d/%d charges, %d mana cost)", new sliceType$7([new $Int32((((i + 97 >> 0) >> 0))), new rod(r), new $Int((_entry = g.Player.Rods[rod.keyFor(r)], _entry !== undefined ? _entry.v : ptrType$6.nil).Charge), new $Int(new rod(r).MaxCharge()), new $Int(new rod(r).MPCost())])); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$r = ui.DrawColoredTextOnBG(_r, 0, lnum, fg, bg); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: termui.ptr.prototype.RodItem }; } $f._entry = _entry; $f._r = _r; $f.bg = bg; $f.fg = fg; $f.g = g; $f.i = i; $f.lnum = lnum; $f.r = r; $f.ui = ui; $f.$s = $s; $f.$r = $r; return $f;
	};
	termui.prototype.RodItem = function(g, i, lnum, r, fg) { return this.$val.RodItem(g, i, lnum, r, fg); };
	termui.ptr.prototype.SelectRod = function(g, ev) {
		var _arg, _arg$1, _i, _r, _r$1, _r$2, _r$3, _ref, _tuple, alternate, col, col$1, desc, err, ev, g, i, index, r, rs, ui, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _arg = $f._arg; _arg$1 = $f._arg$1; _i = $f._i; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _ref = $f._ref; _tuple = $f._tuple; alternate = $f.alternate; col = $f.col; col$1 = $f.col$1; desc = $f.desc; err = $f.err; ev = $f.ev; g = $f.g; i = $f.i; index = $f.index; r = $f.r; rs = $f.rs; ui = $f.ui; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		ui = this;
		desc = false;
		/* while (true) { */ case 1:
			_r = g.SortedRods(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			rs = _r;
			ui.ClearLine(0);
			if (desc) {
				ui.DrawColoredText("Describe", 0, 0, $pkg.ColorBlue);
				col = utf8.RuneCountInString("Describe");
				ui.DrawText(" which rod? (press ? for evocation menu, esc or space to cancel)", col, 0);
			} else {
				ui.DrawColoredText("Evoke", 0, 0, $pkg.ColorCyan);
				col$1 = utf8.RuneCountInString("Evoke");
				ui.DrawText(" which rod? (press ? for description menu, esc or space to cancel)", col$1, 0);
			}
			_ref = rs;
			_i = 0;
			/* while (true) { */ case 4:
				/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 5; continue; }
				i = _i;
				r = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
				$r = ui.RodItem(g, i, i + 1 >> 0, r, $pkg.ColorFg); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				_i++;
			/* } */ $s = 4; continue; case 5:
			ui.DrawLine(rs.$length + 1 >> 0);
			ui.Flush();
			_r$1 = ui.Select(g, ev, rs.$length); /* */ $s = 7; case 7: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_tuple = _r$1;
			index = _tuple[0];
			alternate = _tuple[1];
			err = _tuple[2];
			/* */ if (alternate) { $s = 8; continue; }
			/* */ $s = 9; continue;
			/* if (alternate) { */ case 8:
				desc = !desc;
				/* continue; */ $s = 1; continue;
			/* } */ case 9:
			/* */ if ($interfaceIsEqual(err, $ifaceNil)) { $s = 10; continue; }
			/* */ $s = 11; continue;
			/* if ($interfaceIsEqual(err, $ifaceNil)) { */ case 10:
				$r = ui.RodItem(g, index, index + 1 >> 0, ((index < 0 || index >= rs.$length) ? ($throwRuntimeError("index out of range"), undefined) : rs.$array[rs.$offset + index]), $pkg.ColorYellow); /* */ $s = 12; case 12: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				ui.Flush();
				$r = time.Sleep(new time.Duration(0, 100000000)); /* */ $s = 13; case 13: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* */ if (desc) { $s = 14; continue; }
				/* */ $s = 15; continue;
				/* if (desc) { */ case 14:
					_arg = g;
					_r$2 = new rod(((index < 0 || index >= rs.$length) ? ($throwRuntimeError("index out of range"), undefined) : rs.$array[rs.$offset + index])).Desc(); /* */ $s = 16; case 16: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
					_arg$1 = _r$2;
					$r = ui.DrawDescription(_arg, _arg$1); /* */ $s = 17; case 17: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					/* continue; */ $s = 1; continue;
				/* } */ case 15:
				_r$3 = new rod(((index < 0 || index >= rs.$length) ? ($throwRuntimeError("index out of range"), undefined) : rs.$array[rs.$offset + index])).Use(g, ev); /* */ $s = 18; case 18: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				err = _r$3;
			/* } */ case 11:
			$r = ui.DrawDungeonView(g, 0); /* */ $s = 19; case 19: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = -1; return err;
		/* } */ $s = 1; continue; case 2:
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: termui.ptr.prototype.SelectRod }; } $f._arg = _arg; $f._arg$1 = _arg$1; $f._i = _i; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._ref = _ref; $f._tuple = _tuple; $f.alternate = alternate; $f.col = col; $f.col$1 = col$1; $f.desc = desc; $f.err = err; $f.ev = ev; $f.g = g; $f.i = i; $f.index = index; $f.r = r; $f.rs = rs; $f.ui = ui; $f.$s = $s; $f.$r = $r; return $f;
	};
	termui.prototype.SelectRod = function(g, ev) { return this.$val.SelectRod(g, ev); };
	termui.ptr.prototype.ActionItem = function(g, i, lnum, ka, fg) {
		var _r, bg, desc, fg, g, i, ka, lnum, ui, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; bg = $f.bg; desc = $f.desc; fg = $f.fg; g = $f.g; i = $f.i; ka = $f.ka; lnum = $f.lnum; ui = $f.ui; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		ui = this;
		bg = ui.ListItemBG(i);
		ui.ClearLineWithColor(lnum, bg);
		desc = new keyAction(ka).NormalModeDescription();
		if (!new keyAction(ka).NormalModeKey()) {
			desc = new keyAction(ka).TargetingModeDescription();
		}
		_r = fmt.Sprintf("%c - %s", new sliceType$7([new $Int32((((i + 97 >> 0) >> 0))), new $String(desc)])); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$r = ui.DrawColoredTextOnBG(_r, 0, lnum, fg, bg); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: termui.ptr.prototype.ActionItem }; } $f._r = _r; $f.bg = bg; $f.desc = desc; $f.fg = fg; $f.g = g; $f.i = i; $f.ka = ka; $f.lnum = lnum; $f.ui = ui; $f.$s = $s; $f.$r = $r; return $f;
	};
	termui.prototype.ActionItem = function(g, i, lnum, ka, fg) { return this.$val.ActionItem(g, i, lnum, ka, fg); };
	termui.ptr.prototype.SelectAction = function(g, actions, ev) {
		var _i, _r, _ref, _tuple, actions, alt, col, err, ev, g, i, index, r, ui, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _r = $f._r; _ref = $f._ref; _tuple = $f._tuple; actions = $f.actions; alt = $f.alt; col = $f.col; err = $f.err; ev = $f.ev; g = $f.g; i = $f.i; index = $f.index; r = $f.r; ui = $f.ui; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		ui = this;
		/* while (true) { */ case 1:
			ui.ClearLine(0);
			ui.DrawColoredText("Choose", 0, 0, $pkg.ColorCyan);
			col = utf8.RuneCountInString("Choose");
			ui.DrawText(" which action? (esc or space to cancel)", col, 0);
			_ref = actions;
			_i = 0;
			/* while (true) { */ case 3:
				/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 4; continue; }
				i = _i;
				r = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
				$r = ui.ActionItem(g, i, i + 1 >> 0, r, $pkg.ColorFg); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				_i++;
			/* } */ $s = 3; continue; case 4:
			ui.DrawLine(actions.$length + 1 >> 0);
			ui.Flush();
			_r = ui.Select(g, ev, actions.$length); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r;
			index = _tuple[0];
			alt = _tuple[1];
			err = _tuple[2];
			/* */ if (alt) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if (alt) { */ case 7:
				/* continue; */ $s = 1; continue;
			/* } */ case 8:
			/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 9; continue; }
			/* */ $s = 10; continue;
			/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 9:
				$r = ui.DrawDungeonView(g, 2); /* */ $s = 11; case 11: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = -1; return [22, err];
			/* } */ case 10:
			$r = ui.ActionItem(g, index, index + 1 >> 0, ((index < 0 || index >= actions.$length) ? ($throwRuntimeError("index out of range"), undefined) : actions.$array[actions.$offset + index]), $pkg.ColorYellow); /* */ $s = 12; case 12: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			ui.Flush();
			$r = time.Sleep(new time.Duration(0, 100000000)); /* */ $s = 13; case 13: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = ui.DrawDungeonView(g, 2); /* */ $s = 14; case 14: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = -1; return [((index < 0 || index >= actions.$length) ? ($throwRuntimeError("index out of range"), undefined) : actions.$array[actions.$offset + index]), $ifaceNil];
		/* } */ $s = 1; continue; case 2:
		$s = -1; return [0, $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: termui.ptr.prototype.SelectAction }; } $f._i = _i; $f._r = _r; $f._ref = _ref; $f._tuple = _tuple; $f.actions = actions; $f.alt = alt; $f.col = col; $f.err = err; $f.ev = ev; $f.g = g; $f.i = i; $f.index = index; $f.r = r; $f.ui = ui; $f.$s = $s; $f.$r = $r; return $f;
	};
	termui.prototype.SelectAction = function(g, actions, ev) { return this.$val.SelectAction(g, actions, ev); };
	termui.ptr.prototype.Death = function(g) {
		var err, g, ui, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; err = $f.err; g = $f.g; ui = $f.ui; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		ui = this;
		g.Print("You die... --press esc or space to continue--");
		$r = ui.DrawDungeonView(g, 0); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = ui.WaitForContinue(g, -1); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		err = g.WriteDump();
		$r = ui.Dump(g, err); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = ui.WaitForContinue(g, -1); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: termui.ptr.prototype.Death }; } $f.err = err; $f.g = g; $f.ui = ui; $f.$s = $s; $f.$r = $r; return $f;
	};
	termui.prototype.Death = function(g) { return this.$val.Death(g); };
	termui.ptr.prototype.Win = function(g) {
		var err, g, ui, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; err = $f.err; g = $f.g; ui = $f.ui; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		ui = this;
		err = g.RemoveSaveFile();
		/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 1:
			$r = g.PrintfStyled("Error removing saved file: %v", 6, new sliceType$7([err])); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 2:
		if (g.Wizard) {
			g.Print("You escape by the magic stairs! **WIZARD** --press esc or space to continue--");
		} else {
			g.Print("You escape by the magic stairs! You win. --press esc or space to continue--");
		}
		$r = ui.DrawDungeonView(g, 0); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = ui.WaitForContinue(g, -1); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		err = g.WriteDump();
		$r = ui.Dump(g, err); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = ui.WaitForContinue(g, -1); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: termui.ptr.prototype.Win }; } $f.err = err; $f.g = g; $f.ui = ui; $f.$s = $s; $f.$r = $r; return $f;
	};
	termui.prototype.Win = function(g) { return this.$val.Win(g); };
	termui.ptr.prototype.Dump = function(g, err) {
		var _r, err, g, ui, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; err = $f.err; g = $f.g; ui = $f.ui; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		ui = this;
		ui.Clear();
		_r = g.SimplifedDump(err); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$r = ui.DrawText(_r, 0, 0); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		ui.Flush();
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: termui.ptr.prototype.Dump }; } $f._r = _r; $f.err = err; $f.g = g; $f.ui = ui; $f.$s = $s; $f.$r = $r; return $f;
	};
	termui.prototype.Dump = function(g, err) { return this.$val.Dump(g, err); };
	termui.ptr.prototype.CriticalHPWarning = function(g) {
		var _r, _tuple, bg, fg, g, r, ui, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; bg = $f.bg; fg = $f.fg; g = $f.g; r = $f.r; ui = $f.ui; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		ui = this;
		g.PrintStyled("*** CRITICAL HP WARNING *** --press esc or space to continue--", 1);
		$r = ui.DrawDungeonView(g, 0); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_r = ui.PositionDrawing(g, $clone(g.Player.Pos, position)); /* */ $s = 2; case 2: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		r = _tuple[0];
		fg = _tuple[1];
		bg = _tuple[2];
		$r = ui.DrawAtPosition(g, $clone(g.Player.Pos, position), false, r, $pkg.ColorFgHPwounded, bg); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		ui.Flush();
		$r = time.Sleep(new time.Duration(0, 75000000)); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = ui.DrawAtPosition(g, $clone(g.Player.Pos, position), false, r, $pkg.ColorFgHPcritical, bg); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		ui.Flush();
		$r = time.Sleep(new time.Duration(0, 75000000)); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = ui.DrawAtPosition(g, $clone(g.Player.Pos, position), false, r, fg, bg); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		ui.Flush();
		$r = ui.WaitForContinue(g, 21); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		g.Print("Ok. Be careful, then.");
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: termui.ptr.prototype.CriticalHPWarning }; } $f._r = _r; $f._tuple = _tuple; $f.bg = bg; $f.fg = fg; $f.g = g; $f.r = r; $f.ui = ui; $f.$s = $s; $f.$r = $r; return $f;
	};
	termui.prototype.CriticalHPWarning = function(g) { return this.$val.CriticalHPWarning(g); };
	termui.ptr.prototype.WoundedAnimation = function(g) {
		var _r, _tuple, bg, g, r, ui, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; bg = $f.bg; g = $f.g; r = $f.r; ui = $f.ui; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		ui = this;
		_r = ui.PositionDrawing(g, $clone(g.Player.Pos, position)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		r = _tuple[0];
		bg = _tuple[2];
		$r = ui.DrawAtPosition(g, $clone(g.Player.Pos, position), false, r, $pkg.ColorFgHPwounded, bg); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		ui.Flush();
		$r = time.Sleep(new time.Duration(0, 75000000)); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ if (g.Player.HP <= 15) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (g.Player.HP <= 15) { */ case 4:
			$r = ui.DrawAtPosition(g, $clone(g.Player.Pos, position), false, r, $pkg.ColorFgHPcritical, bg); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			ui.Flush();
			$r = time.Sleep(new time.Duration(0, 75000000)); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 5:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: termui.ptr.prototype.WoundedAnimation }; } $f._r = _r; $f._tuple = _tuple; $f.bg = bg; $f.g = g; $f.r = r; $f.ui = ui; $f.$s = $s; $f.$r = $r; return $f;
	};
	termui.prototype.WoundedAnimation = function(g) { return this.$val.WoundedAnimation(g); };
	termui.ptr.prototype.DrinkingPotionAnimation = function(g) {
		var _r, _tuple, bg, fg, g, r, ui, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; bg = $f.bg; fg = $f.fg; g = $f.g; r = $f.r; ui = $f.ui; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		ui = this;
		$r = ui.DrawDungeonView(g, 0); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = time.Sleep(new time.Duration(0, 50000000)); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_r = ui.PositionDrawing(g, $clone(g.Player.Pos, position)); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		r = _tuple[0];
		fg = _tuple[1];
		bg = _tuple[2];
		$r = ui.DrawAtPosition(g, $clone(g.Player.Pos, position), false, r, $pkg.ColorGreen, bg); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		ui.Flush();
		$r = time.Sleep(new time.Duration(0, 75000000)); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = ui.DrawAtPosition(g, $clone(g.Player.Pos, position), false, r, $pkg.ColorYellow, bg); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		ui.Flush();
		$r = time.Sleep(new time.Duration(0, 75000000)); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = ui.DrawAtPosition(g, $clone(g.Player.Pos, position), false, r, fg, bg); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		ui.Flush();
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: termui.ptr.prototype.DrinkingPotionAnimation }; } $f._r = _r; $f._tuple = _tuple; $f.bg = bg; $f.fg = fg; $f.g = g; $f.r = r; $f.ui = ui; $f.$s = $s; $f.$r = $r; return $f;
	};
	termui.prototype.DrinkingPotionAnimation = function(g) { return this.$val.DrinkingPotionAnimation(g); };
	termui.ptr.prototype.MagicMappingAnimation = function(g, border) {
		var _i, _r, _ref, _tuple, bg, border, fg, g, i, pos, r, ui, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _r = $f._r; _ref = $f._ref; _tuple = $f._tuple; bg = $f.bg; border = $f.border; fg = $f.fg; g = $f.g; i = $f.i; pos = $f.pos; r = $f.r; ui = $f.ui; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		ui = this;
		_ref = border;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			i = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			pos = $clone(idxtopos(i), position);
			_r = ui.PositionDrawing(g, $clone(pos, position)); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r;
			r = _tuple[0];
			fg = _tuple[1];
			bg = _tuple[2];
			$r = ui.DrawAtPosition(g, $clone(pos, position), false, r, fg, bg); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_i++;
		/* } */ $s = 1; continue; case 2:
		ui.Flush();
		$r = time.Sleep(new time.Duration(0, 12000000)); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: termui.ptr.prototype.MagicMappingAnimation }; } $f._i = _i; $f._r = _r; $f._ref = _ref; $f._tuple = _tuple; $f.bg = bg; $f.border = border; $f.fg = fg; $f.g = g; $f.i = i; $f.pos = pos; $f.r = r; $f.ui = ui; $f.$s = $s; $f.$r = $r; return $f;
	};
	termui.prototype.MagicMappingAnimation = function(g, border) { return this.$val.MagicMappingAnimation(g, border); };
	termui.ptr.prototype.Quit = function(g) {
		var _r, _r$1, err, g, quit, ui, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; err = $f.err; g = $f.g; quit = $f.quit; ui = $f.ui; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		ui = this;
		g.Print("Do you really want to quit without saving? [y/N]");
		$r = ui.DrawDungeonView(g, 0); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_r = ui.PromptConfirmation(g); /* */ $s = 2; case 2: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		quit = _r;
		/* */ if (quit) { $s = 3; continue; }
		/* */ $s = 4; continue;
		/* if (quit) { */ case 3:
			err = g.RemoveSaveFile();
			/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 6; continue; }
			/* */ $s = 7; continue;
			/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 6:
				$r = g.PrintfStyled("Error removing save file: %v \xE2\x80\x94\xE2\x80\x94press any key to quit\xE2\x80\x94\xE2\x80\x94", 6, new sliceType$7([err])); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$r = ui.DrawDungeonView(g, 0); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				_r$1 = ui.PressAnyKey(); /* */ $s = 10; case 10: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				_r$1;
			/* } */ case 7:
			$s = 5; continue;
		/* } else { */ case 4:
			g.Print("Do nothing, then.");
		/* } */ case 5:
		$s = -1; return quit;
		/* */ } return; } if ($f === undefined) { $f = { $blk: termui.ptr.prototype.Quit }; } $f._r = _r; $f._r$1 = _r$1; $f.err = err; $f.g = g; $f.quit = quit; $f.ui = ui; $f.$s = $s; $f.$r = $r; return $f;
	};
	termui.prototype.Quit = function(g) { return this.$val.Quit(g); };
	termui.ptr.prototype.Wizard = function(g) {
		var _r, g, ui, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; g = $f.g; ui = $f.ui; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		ui = this;
		g.Print("Do you really want to enter wizard mode (no return)? [y/N]");
		$r = ui.DrawDungeonView(g, 0); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_r = ui.PromptConfirmation(g); /* */ $s = 2; case 2: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: termui.ptr.prototype.Wizard }; } $f._r = _r; $f.g = g; $f.ui = ui; $f.$s = $s; $f.$r = $r; return $f;
	};
	termui.prototype.Wizard = function(g) { return this.$val.Wizard(g); };
	termui.ptr.prototype.HandlePlayerTurn = function(g, ev) {
		var _r, _r$1, _r$2, _r$3, _tmp, _tmp$1, _tuple, _tuple$1, _v, again, err, ev, g, quit, ui, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _v = $f._v; again = $f.again; err = $f.err; ev = $f.ev; g = $f.g; quit = $f.quit; ui = $f.ui; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		ui = this;
		/* while (true) { */ case 1:
			err = $ifaceNil;
			_tmp = false;
			_tmp$1 = false;
			again = _tmp;
			quit = _tmp$1;
			/* */ if (!(g.Targeting === ptrType$1.nil)) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (!(g.Targeting === ptrType$1.nil)) { */ case 3:
				_r = ui.ExaminePos(g, ev, $clone(g.Targeting, position)); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				_tuple = _r;
				err = _tuple[0];
				again = _tuple[1];
				quit = _tuple[2];
				$s = 5; continue;
			/* } else { */ case 4:
				$r = ui.DrawDungeonView(g, 0); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				_r$1 = ui.PlayerTurnEvent(g, ev); /* */ $s = 8; case 8: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				_tuple$1 = _r$1;
				err = _tuple$1[0];
				again = _tuple$1[1];
				quit = _tuple$1[2];
			/* } */ case 5:
			if (!(!($interfaceIsEqual(err, $ifaceNil)))) { _v = false; $s = 11; continue s; }
			_r$2 = err.Error(); /* */ $s = 12; case 12: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_v = !(_r$2 === ""); case 11:
			/* */ if (_v) { $s = 9; continue; }
			/* */ $s = 10; continue;
			/* if (_v) { */ case 9:
				_r$3 = err.Error(); /* */ $s = 13; case 13: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				$r = g.Print(_r$3); /* */ $s = 14; case 14: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 10:
			if (again) {
				/* continue getKey; */ $s = 1; continue s;
			}
			$s = -1; return quit;
		/* } */ $s = 1; continue; case 2:
		$s = -1; return false;
		/* */ } return; } if ($f === undefined) { $f = { $blk: termui.ptr.prototype.HandlePlayerTurn }; } $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._v = _v; $f.again = again; $f.err = err; $f.ev = ev; $f.g = g; $f.quit = quit; $f.ui = ui; $f.$s = $s; $f.$r = $r; return $f;
	};
	termui.prototype.HandlePlayerTurn = function(g, ev) { return this.$val.HandlePlayerTurn(g, ev); };
	rodSlice.prototype.Len = function() {
		var rs;
		rs = this;
		return rs.$length;
	};
	$ptrType(rodSlice).prototype.Len = function() { return this.$get().Len(); };
	rodSlice.prototype.Swap = function(i, j) {
		var _tmp, _tmp$1, i, j, rs;
		rs = this;
		_tmp = ((j < 0 || j >= rs.$length) ? ($throwRuntimeError("index out of range"), undefined) : rs.$array[rs.$offset + j]);
		_tmp$1 = ((i < 0 || i >= rs.$length) ? ($throwRuntimeError("index out of range"), undefined) : rs.$array[rs.$offset + i]);
		((i < 0 || i >= rs.$length) ? ($throwRuntimeError("index out of range"), undefined) : rs.$array[rs.$offset + i] = _tmp);
		((j < 0 || j >= rs.$length) ? ($throwRuntimeError("index out of range"), undefined) : rs.$array[rs.$offset + j] = _tmp$1);
	};
	$ptrType(rodSlice).prototype.Swap = function(i, j) { return this.$get().Swap(i, j); };
	rodSlice.prototype.Less = function(i, j) {
		var i, j, rs;
		rs = this;
		return ((((i < 0 || i >= rs.$length) ? ($throwRuntimeError("index out of range"), undefined) : rs.$array[rs.$offset + i]) >> 0)) < ((((j < 0 || j >= rs.$length) ? ($throwRuntimeError("index out of range"), undefined) : rs.$array[rs.$offset + j]) >> 0));
	};
	$ptrType(rodSlice).prototype.Less = function(i, j) { return this.$get().Less(i, j); };
	consumableSlice.prototype.Len = function() {
		var cs;
		cs = this;
		return cs.$length;
	};
	$ptrType(consumableSlice).prototype.Len = function() { return this.$get().Len(); };
	consumableSlice.prototype.Swap = function(i, j) {
		var _tmp, _tmp$1, cs, i, j;
		cs = this;
		_tmp = ((j < 0 || j >= cs.$length) ? ($throwRuntimeError("index out of range"), undefined) : cs.$array[cs.$offset + j]);
		_tmp$1 = ((i < 0 || i >= cs.$length) ? ($throwRuntimeError("index out of range"), undefined) : cs.$array[cs.$offset + i]);
		((i < 0 || i >= cs.$length) ? ($throwRuntimeError("index out of range"), undefined) : cs.$array[cs.$offset + i] = _tmp);
		((j < 0 || j >= cs.$length) ? ($throwRuntimeError("index out of range"), undefined) : cs.$array[cs.$offset + j] = _tmp$1);
	};
	$ptrType(consumableSlice).prototype.Swap = function(i, j) { return this.$get().Swap(i, j); };
	consumableSlice.prototype.Less = function(i, j) {
		var _r, _r$1, cs, i, j, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; cs = $f.cs; i = $f.i; j = $f.j; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		cs = this;
		_r = ((i < 0 || i >= cs.$length) ? ($throwRuntimeError("index out of range"), undefined) : cs.$array[cs.$offset + i]).Int(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = ((j < 0 || j >= cs.$length) ? ($throwRuntimeError("index out of range"), undefined) : cs.$array[cs.$offset + j]).Int(); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$s = -1; return _r < _r$1;
		/* */ } return; } if ($f === undefined) { $f = { $blk: consumableSlice.prototype.Less }; } $f._r = _r; $f._r$1 = _r$1; $f.cs = cs; $f.i = i; $f.j = j; $f.$s = $s; $f.$r = $r; return $f;
	};
	$ptrType(consumableSlice).prototype.Less = function(i, j) { return this.$get().Less(i, j); };
	statusSlice.prototype.Len = function() {
		var sts;
		sts = this;
		return sts.$length;
	};
	$ptrType(statusSlice).prototype.Len = function() { return this.$get().Len(); };
	statusSlice.prototype.Swap = function(i, j) {
		var _tmp, _tmp$1, i, j, sts;
		sts = this;
		_tmp = ((j < 0 || j >= sts.$length) ? ($throwRuntimeError("index out of range"), undefined) : sts.$array[sts.$offset + j]);
		_tmp$1 = ((i < 0 || i >= sts.$length) ? ($throwRuntimeError("index out of range"), undefined) : sts.$array[sts.$offset + i]);
		((i < 0 || i >= sts.$length) ? ($throwRuntimeError("index out of range"), undefined) : sts.$array[sts.$offset + i] = _tmp);
		((j < 0 || j >= sts.$length) ? ($throwRuntimeError("index out of range"), undefined) : sts.$array[sts.$offset + j] = _tmp$1);
	};
	$ptrType(statusSlice).prototype.Swap = function(i, j) { return this.$get().Swap(i, j); };
	statusSlice.prototype.Less = function(i, j) {
		var i, j, sts;
		sts = this;
		return ((i < 0 || i >= sts.$length) ? ($throwRuntimeError("index out of range"), undefined) : sts.$array[sts.$offset + i]) < ((j < 0 || j >= sts.$length) ? ($throwRuntimeError("index out of range"), undefined) : sts.$array[sts.$offset + j]);
	};
	$ptrType(statusSlice).prototype.Less = function(i, j) { return this.$get().Less(i, j); };
	monsSlice.prototype.Len = function() {
		var ms;
		ms = this;
		return ms.$length;
	};
	$ptrType(monsSlice).prototype.Len = function() { return this.$get().Len(); };
	monsSlice.prototype.Swap = function(i, j) {
		var _tmp, _tmp$1, i, j, ms;
		ms = this;
		_tmp = ((j < 0 || j >= ms.$length) ? ($throwRuntimeError("index out of range"), undefined) : ms.$array[ms.$offset + j]);
		_tmp$1 = ((i < 0 || i >= ms.$length) ? ($throwRuntimeError("index out of range"), undefined) : ms.$array[ms.$offset + i]);
		((i < 0 || i >= ms.$length) ? ($throwRuntimeError("index out of range"), undefined) : ms.$array[ms.$offset + i] = _tmp);
		((j < 0 || j >= ms.$length) ? ($throwRuntimeError("index out of range"), undefined) : ms.$array[ms.$offset + j] = _tmp$1);
	};
	$ptrType(monsSlice).prototype.Swap = function(i, j) { return this.$get().Swap(i, j); };
	monsSlice.prototype.Less = function(i, j) {
		var i, j, ms;
		ms = this;
		return new monsterKind(((i < 0 || i >= ms.$length) ? ($throwRuntimeError("index out of range"), undefined) : ms.$array[ms.$offset + i])).Dangerousness() > new monsterKind(((j < 0 || j >= ms.$length) ? ($throwRuntimeError("index out of range"), undefined) : ms.$array[ms.$offset + j])).Dangerousness();
	};
	$ptrType(monsSlice).prototype.Less = function(i, j) { return this.$get().Less(i, j); };
	game.ptr.prototype.DumpAptitudes = function() {
		var _entry, _i, _keys, _ref, apt, apts, b, g, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _entry = $f._entry; _i = $f._i; _keys = $f._keys; _ref = $f._ref; apt = $f.apt; apts = $f.apts; b = $f.b; g = $f.g; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		g = this;
		apts = new sliceType$3([]);
		_ref = g.Player.Aptitudes;
		_i = 0;
		_keys = $keys(_ref);
		while (true) {
			if (!(_i < _keys.length)) { break; }
			_entry = _ref[_keys[_i]];
			if (_entry === undefined) {
				_i++;
				continue;
			}
			apt = _entry.k;
			b = _entry.v;
			if (b) {
				apts = $append(apts, new aptitude(apt).String());
			}
			_i++;
		}
		$r = sort.Strings(apts); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		if (apts.$length === 0) {
			$s = -1; return "You do not have any special aptitudes.";
		}
		$s = -1; return "Aptitudes:\n" + strings.Join(apts, "\n");
		/* */ } return; } if ($f === undefined) { $f = { $blk: game.ptr.prototype.DumpAptitudes }; } $f._entry = _entry; $f._i = _i; $f._keys = _keys; $f._ref = _ref; $f.apt = apt; $f.apts = apts; $f.b = b; $f.g = g; $f.$s = $s; $f.$r = $r; return $f;
	};
	game.prototype.DumpAptitudes = function() { return this.$val.DumpAptitudes(); };
	game.ptr.prototype.DumpStatuses = function() {
		var _entry, _i, _keys, _ref, c, g, st, sts, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _entry = $f._entry; _i = $f._i; _keys = $f._keys; _ref = $f._ref; c = $f.c; g = $f.g; st = $f.st; sts = $f.sts; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		g = this;
		sts = new sort.StringSlice([]);
		_ref = g.Player.Statuses;
		_i = 0;
		_keys = $keys(_ref);
		while (true) {
			if (!(_i < _keys.length)) { break; }
			_entry = _ref[_keys[_i]];
			if (_entry === undefined) {
				_i++;
				continue;
			}
			st = _entry.k;
			c = _entry.v;
			if (c > 0) {
				sts = $append(sts, new status(st).String());
			}
			_i++;
		}
		$r = sort.Sort(sts); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		if (sts.$length === 0) {
			$s = -1; return "You are free of any status effects.";
		}
		$s = -1; return "Statuses:\n" + strings.Join($subslice(new sliceType$3(sts.$array), sts.$offset, sts.$offset + sts.$length), "\n");
		/* */ } return; } if ($f === undefined) { $f = { $blk: game.ptr.prototype.DumpStatuses }; } $f._entry = _entry; $f._i = _i; $f._keys = _keys; $f._ref = _ref; $f.c = c; $f.g = g; $f.st = st; $f.sts = sts; $f.$s = $s; $f.$r = $r; return $f;
	};
	game.prototype.DumpStatuses = function() { return this.$val.DumpStatuses(); };
	game.ptr.prototype.SortedRods = function() {
		var _entry, _i, _keys, _ref, g, k, p, rs, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _entry = $f._entry; _i = $f._i; _keys = $f._keys; _ref = $f._ref; g = $f.g; k = $f.k; p = $f.p; rs = $f.rs; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		g = this;
		rs = rodSlice.nil;
		_ref = g.Player.Rods;
		_i = 0;
		_keys = $keys(_ref);
		/* while (true) { */ case 1:
			/* if (!(_i < _keys.length)) { break; } */ if(!(_i < _keys.length)) { $s = 2; continue; }
			_entry = _ref[_keys[_i]];
			if (_entry === undefined) {
				_i++;
				/* continue; */ $s = 1; continue;
			}
			k = _entry.k;
			p = _entry.v;
			if (p === ptrType$6.nil) {
				_i++;
				/* continue; */ $s = 1; continue;
			}
			rs = $append(rs, k);
			_i++;
		/* } */ $s = 1; continue; case 2:
		$r = sort.Sort(rs); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return rs;
		/* */ } return; } if ($f === undefined) { $f = { $blk: game.ptr.prototype.SortedRods }; } $f._entry = _entry; $f._i = _i; $f._keys = _keys; $f._ref = _ref; $f.g = g; $f.k = k; $f.p = p; $f.rs = rs; $f.$s = $s; $f.$r = $r; return $f;
	};
	game.prototype.SortedRods = function() { return this.$val.SortedRods(); };
	game.ptr.prototype.SortedKilledMonsters = function() {
		var _entry, _i, _keys, _ref, g, mk, ms, p, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _entry = $f._entry; _i = $f._i; _keys = $f._keys; _ref = $f._ref; g = $f.g; mk = $f.mk; ms = $f.ms; p = $f.p; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		g = this;
		ms = monsSlice.nil;
		_ref = g.KilledMons;
		_i = 0;
		_keys = $keys(_ref);
		/* while (true) { */ case 1:
			/* if (!(_i < _keys.length)) { break; } */ if(!(_i < _keys.length)) { $s = 2; continue; }
			_entry = _ref[_keys[_i]];
			if (_entry === undefined) {
				_i++;
				/* continue; */ $s = 1; continue;
			}
			mk = _entry.k;
			p = _entry.v;
			if (p === 0) {
				_i++;
				/* continue; */ $s = 1; continue;
			}
			ms = $append(ms, mk);
			_i++;
		/* } */ $s = 1; continue; case 2:
		$r = sort.Sort(ms); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return ms;
		/* */ } return; } if ($f === undefined) { $f = { $blk: game.ptr.prototype.SortedKilledMonsters }; } $f._entry = _entry; $f._i = _i; $f._keys = _keys; $f._ref = _ref; $f.g = g; $f.mk = mk; $f.ms = ms; $f.p = p; $f.$s = $s; $f.$r = $r; return $f;
	};
	game.prototype.SortedKilledMonsters = function() { return this.$val.SortedKilledMonsters(); };
	game.ptr.prototype.SortedPotions = function() {
		var _entry, _i, _keys, _ref, _ref$1, cs, g, k, k$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _entry = $f._entry; _i = $f._i; _keys = $f._keys; _ref = $f._ref; _ref$1 = $f._ref$1; cs = $f.cs; g = $f.g; k = $f.k; k$1 = $f.k$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		g = this;
		cs = consumableSlice.nil;
		_ref = g.Player.Consumables;
		_i = 0;
		_keys = $keys(_ref);
		while (true) {
			if (!(_i < _keys.length)) { break; }
			_entry = _ref[_keys[_i]];
			if (_entry === undefined) {
				_i++;
				continue;
			}
			k = _entry.k;
			_ref$1 = k;
			if ($assertType(_ref$1, potion, true)[1]) {
				k$1 = _ref$1.$val;
				cs = $append(cs, new potion(k$1));
			}
			_i++;
		}
		$r = sort.Sort(cs); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return cs;
		/* */ } return; } if ($f === undefined) { $f = { $blk: game.ptr.prototype.SortedPotions }; } $f._entry = _entry; $f._i = _i; $f._keys = _keys; $f._ref = _ref; $f._ref$1 = _ref$1; $f.cs = cs; $f.g = g; $f.k = k; $f.k$1 = k$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	game.prototype.SortedPotions = function() { return this.$val.SortedPotions(); };
	game.ptr.prototype.SortedProjectiles = function() {
		var _entry, _i, _keys, _ref, _ref$1, cs, g, k, k$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _entry = $f._entry; _i = $f._i; _keys = $f._keys; _ref = $f._ref; _ref$1 = $f._ref$1; cs = $f.cs; g = $f.g; k = $f.k; k$1 = $f.k$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		g = this;
		cs = consumableSlice.nil;
		_ref = g.Player.Consumables;
		_i = 0;
		_keys = $keys(_ref);
		while (true) {
			if (!(_i < _keys.length)) { break; }
			_entry = _ref[_keys[_i]];
			if (_entry === undefined) {
				_i++;
				continue;
			}
			k = _entry.k;
			_ref$1 = k;
			if ($assertType(_ref$1, projectile, true)[1]) {
				k$1 = _ref$1.$val;
				cs = $append(cs, new projectile(k$1));
			}
			_i++;
		}
		$r = sort.Sort(cs); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return cs;
		/* */ } return; } if ($f === undefined) { $f = { $blk: game.ptr.prototype.SortedProjectiles }; } $f._entry = _entry; $f._i = _i; $f._keys = _keys; $f._ref = _ref; $f._ref$1 = _ref$1; $f.cs = cs; $f.g = g; $f.k = k; $f.k$1 = k$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	game.prototype.SortedProjectiles = function() { return this.$val.SortedProjectiles(); };
	game.ptr.prototype.Dump = function() {
		var _arg, _arg$1, _arg$2, _arg$3, _arg$4, _arg$5, _entry, _entry$1, _entry$2, _i, _i$1, _i$2, _r, _r$1, _r$10, _r$11, _r$12, _r$13, _r$14, _r$15, _r$16, _r$17, _r$18, _r$19, _r$2, _r$20, _r$21, _r$22, _r$23, _r$24, _r$25, _r$26, _r$27, _r$28, _r$29, _r$3, _r$30, _r$31, _r$32, _r$33, _r$34, _r$35, _r$36, _r$37, _r$38, _r$39, _r$4, _r$40, _r$41, _r$42, _r$43, _r$44, _r$45, _r$46, _r$47, _r$48, _r$49, _r$5, _r$50, _r$51, _r$52, _r$53, _r$6, _r$7, _r$8, _r$9, _ref, _ref$1, _ref$2, buf, c, c$1, c$2, g, i, ps, rs, x, x$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _arg$3 = $f._arg$3; _arg$4 = $f._arg$4; _arg$5 = $f._arg$5; _entry = $f._entry; _entry$1 = $f._entry$1; _entry$2 = $f._entry$2; _i = $f._i; _i$1 = $f._i$1; _i$2 = $f._i$2; _r = $f._r; _r$1 = $f._r$1; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$12 = $f._r$12; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _r$17 = $f._r$17; _r$18 = $f._r$18; _r$19 = $f._r$19; _r$2 = $f._r$2; _r$20 = $f._r$20; _r$21 = $f._r$21; _r$22 = $f._r$22; _r$23 = $f._r$23; _r$24 = $f._r$24; _r$25 = $f._r$25; _r$26 = $f._r$26; _r$27 = $f._r$27; _r$28 = $f._r$28; _r$29 = $f._r$29; _r$3 = $f._r$3; _r$30 = $f._r$30; _r$31 = $f._r$31; _r$32 = $f._r$32; _r$33 = $f._r$33; _r$34 = $f._r$34; _r$35 = $f._r$35; _r$36 = $f._r$36; _r$37 = $f._r$37; _r$38 = $f._r$38; _r$39 = $f._r$39; _r$4 = $f._r$4; _r$40 = $f._r$40; _r$41 = $f._r$41; _r$42 = $f._r$42; _r$43 = $f._r$43; _r$44 = $f._r$44; _r$45 = $f._r$45; _r$46 = $f._r$46; _r$47 = $f._r$47; _r$48 = $f._r$48; _r$49 = $f._r$49; _r$5 = $f._r$5; _r$50 = $f._r$50; _r$51 = $f._r$51; _r$52 = $f._r$52; _r$53 = $f._r$53; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _ref = $f._ref; _ref$1 = $f._ref$1; _ref$2 = $f._ref$2; buf = $f.buf; c = $f.c; c$1 = $f.c$1; c$2 = $f.c$2; g = $f.g; i = $f.i; ps = $f.ps; rs = $f.rs; x = $f.x; x$1 = $f.x$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		g = this;
		buf = new bytes.Buffer.ptr(sliceType$8.nil, 0, arrayType$2.zero(), 0);
		_r = fmt.Fprintf(buf, " -- Boohu version %s character file --\n\n", new sliceType$7([new $String($pkg.Version)])); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r;
		/* */ if (g.Wizard) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (g.Wizard) { */ case 2:
			_r$1 = fmt.Fprintf(buf, "**WIZARD MODE**\n", new sliceType$7([])); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_r$1;
		/* } */ case 3:
		/* */ if (g.Player.HP > 0 && g.Depth > g.MaxDepth()) { $s = 5; continue; }
		/* */ if (g.Player.HP <= 0) { $s = 6; continue; }
		/* */ $s = 7; continue;
		/* if (g.Player.HP > 0 && g.Depth > g.MaxDepth()) { */ case 5:
			_r$2 = fmt.Fprintf(buf, "You escaped from Hareka's Underground alive!\n", new sliceType$7([])); /* */ $s = 9; case 9: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_r$2;
			$s = 8; continue;
		/* } else if (g.Player.HP <= 0) { */ case 6:
			_r$3 = fmt.Fprintf(buf, "You died while exploring depth %d of Hareka's Underground.\n", new sliceType$7([new $Int(g.Depth)])); /* */ $s = 10; case 10: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_r$3;
			$s = 8; continue;
		/* } else { */ case 7:
			_r$4 = fmt.Fprintf(buf, "You are exploring depth %d of Hareka's Underground.\n", new sliceType$7([new $Int(g.Depth)])); /* */ $s = 11; case 11: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			_r$4;
		/* } */ case 8:
		_r$5 = fmt.Fprintf(buf, "\n", new sliceType$7([])); /* */ $s = 12; case 12: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		_r$5;
		_r$6 = fmt.Fprintf(buf, "You have %d/%d HP, and %d/%d MP.\n", new sliceType$7([new $Int(g.Player.HP), new $Int(g.Player.HPMax()), new $Int(g.Player.MP), new $Int(g.Player.MPMax())])); /* */ $s = 13; case 13: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
		_r$6;
		_r$7 = fmt.Fprintf(buf, "\n", new sliceType$7([])); /* */ $s = 14; case 14: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
		_r$7;
		_arg = buf;
		_r$8 = g.DumpAptitudes(); /* */ $s = 15; case 15: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
		_arg$1 = _r$8;
		_r$9 = fmt.Fprintf(_arg, _arg$1, new sliceType$7([])); /* */ $s = 16; case 16: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
		_r$9;
		_r$10 = fmt.Fprintf(buf, "\n\n", new sliceType$7([])); /* */ $s = 17; case 17: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
		_r$10;
		_arg$2 = buf;
		_r$11 = g.DumpStatuses(); /* */ $s = 18; case 18: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
		_arg$3 = _r$11;
		_r$12 = fmt.Fprintf(_arg$2, _arg$3, new sliceType$7([])); /* */ $s = 19; case 19: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }
		_r$12;
		_r$13 = fmt.Fprintf(buf, "\n\n", new sliceType$7([])); /* */ $s = 20; case 20: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		_r$13;
		_r$14 = fmt.Fprintf(buf, "Equipment:\n", new sliceType$7([])); /* */ $s = 21; case 21: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
		_r$14;
		_r$15 = fmt.Fprintf(buf, "You are wearing %s.\n", new sliceType$7([new $String(Indefinite(new armour(g.Player.Armour).String(), false))])); /* */ $s = 22; case 22: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
		_r$15;
		_r$16 = fmt.Fprintf(buf, "You are wielding %s.\n", new sliceType$7([new $String(Indefinite(new weapon(g.Player.Weapon).String(), false))])); /* */ $s = 23; case 23: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
		_r$16;
		/* */ if (!((g.Player.Shield === 0))) { $s = 24; continue; }
		/* */ $s = 25; continue;
		/* if (!((g.Player.Shield === 0))) { */ case 24:
			/* */ if (new weapon(g.Player.Weapon).TwoHanded()) { $s = 26; continue; }
			/* */ $s = 27; continue;
			/* if (new weapon(g.Player.Weapon).TwoHanded()) { */ case 26:
				_r$17 = fmt.Fprintf(buf, "You have %s (unused).\n", new sliceType$7([new $String(Indefinite(new shield(g.Player.Shield).String(), false))])); /* */ $s = 29; case 29: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }
				_r$17;
				$s = 28; continue;
			/* } else { */ case 27:
				_r$18 = fmt.Fprintf(buf, "You are wearing %s.\n", new sliceType$7([new $String(Indefinite(new shield(g.Player.Shield).String(), false))])); /* */ $s = 30; case 30: if($c) { $c = false; _r$18 = _r$18.$blk(); } if (_r$18 && _r$18.$blk !== undefined) { break s; }
				_r$18;
			/* } */ case 28:
		/* } */ case 25:
		_r$19 = fmt.Fprintf(buf, "\n", new sliceType$7([])); /* */ $s = 31; case 31: if($c) { $c = false; _r$19 = _r$19.$blk(); } if (_r$19 && _r$19.$blk !== undefined) { break s; }
		_r$19;
		_r$20 = g.SortedRods(); /* */ $s = 32; case 32: if($c) { $c = false; _r$20 = _r$20.$blk(); } if (_r$20 && _r$20.$blk !== undefined) { break s; }
		rs = _r$20;
		/* */ if (rs.$length > 0) { $s = 33; continue; }
		/* */ $s = 34; continue;
		/* if (rs.$length > 0) { */ case 33:
			_r$21 = fmt.Fprintf(buf, "Rods:\n", new sliceType$7([])); /* */ $s = 36; case 36: if($c) { $c = false; _r$21 = _r$21.$blk(); } if (_r$21 && _r$21.$blk !== undefined) { break s; }
			_r$21;
			_ref = rs;
			_i = 0;
			/* while (true) { */ case 37:
				/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 38; continue; }
				c = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
				_r$22 = fmt.Fprintf(buf, "- %s (%d/%d charges)\n", new sliceType$7([new rod(c), new $Int((_entry = g.Player.Rods[rod.keyFor(c)], _entry !== undefined ? _entry.v : ptrType$6.nil).Charge), new $Int(new rod(c).MaxCharge())])); /* */ $s = 39; case 39: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
				_r$22;
				_i++;
			/* } */ $s = 37; continue; case 38:
			$s = 35; continue;
		/* } else { */ case 34:
			_r$23 = fmt.Fprintf(buf, "You do not have any rods.\n", new sliceType$7([])); /* */ $s = 40; case 40: if($c) { $c = false; _r$23 = _r$23.$blk(); } if (_r$23 && _r$23.$blk !== undefined) { break s; }
			_r$23;
		/* } */ case 35:
		_r$24 = fmt.Fprintf(buf, "\n", new sliceType$7([])); /* */ $s = 41; case 41: if($c) { $c = false; _r$24 = _r$24.$blk(); } if (_r$24 && _r$24.$blk !== undefined) { break s; }
		_r$24;
		_r$25 = g.SortedPotions(); /* */ $s = 42; case 42: if($c) { $c = false; _r$25 = _r$25.$blk(); } if (_r$25 && _r$25.$blk !== undefined) { break s; }
		ps = _r$25;
		/* */ if (ps.$length > 0) { $s = 43; continue; }
		/* */ $s = 44; continue;
		/* if (ps.$length > 0) { */ case 43:
			_r$26 = fmt.Fprintf(buf, "Potions:\n", new sliceType$7([])); /* */ $s = 46; case 46: if($c) { $c = false; _r$26 = _r$26.$blk(); } if (_r$26 && _r$26.$blk !== undefined) { break s; }
			_r$26;
			_ref$1 = ps;
			_i$1 = 0;
			/* while (true) { */ case 47:
				/* if (!(_i$1 < _ref$1.$length)) { break; } */ if(!(_i$1 < _ref$1.$length)) { $s = 48; continue; }
				c$1 = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$1.$array[_ref$1.$offset + _i$1]);
				_r$27 = fmt.Fprintf(buf, "- %s (%d available)\n", new sliceType$7([c$1, new $Int((_entry$1 = g.Player.Consumables[consumable.keyFor(c$1)], _entry$1 !== undefined ? _entry$1.v : 0))])); /* */ $s = 49; case 49: if($c) { $c = false; _r$27 = _r$27.$blk(); } if (_r$27 && _r$27.$blk !== undefined) { break s; }
				_r$27;
				_i$1++;
			/* } */ $s = 47; continue; case 48:
			$s = 45; continue;
		/* } else { */ case 44:
			_r$28 = fmt.Fprintf(buf, "You do not have any potions.\n", new sliceType$7([])); /* */ $s = 50; case 50: if($c) { $c = false; _r$28 = _r$28.$blk(); } if (_r$28 && _r$28.$blk !== undefined) { break s; }
			_r$28;
		/* } */ case 45:
		_r$29 = fmt.Fprintf(buf, "\n", new sliceType$7([])); /* */ $s = 51; case 51: if($c) { $c = false; _r$29 = _r$29.$blk(); } if (_r$29 && _r$29.$blk !== undefined) { break s; }
		_r$29;
		_r$30 = g.SortedProjectiles(); /* */ $s = 52; case 52: if($c) { $c = false; _r$30 = _r$30.$blk(); } if (_r$30 && _r$30.$blk !== undefined) { break s; }
		ps = _r$30;
		/* */ if (ps.$length > 0) { $s = 53; continue; }
		/* */ $s = 54; continue;
		/* if (ps.$length > 0) { */ case 53:
			_r$31 = fmt.Fprintf(buf, "Projectiles:\n", new sliceType$7([])); /* */ $s = 56; case 56: if($c) { $c = false; _r$31 = _r$31.$blk(); } if (_r$31 && _r$31.$blk !== undefined) { break s; }
			_r$31;
			_ref$2 = ps;
			_i$2 = 0;
			/* while (true) { */ case 57:
				/* if (!(_i$2 < _ref$2.$length)) { break; } */ if(!(_i$2 < _ref$2.$length)) { $s = 58; continue; }
				c$2 = ((_i$2 < 0 || _i$2 >= _ref$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$2.$array[_ref$2.$offset + _i$2]);
				_r$32 = fmt.Fprintf(buf, "- %s (%d available)\n", new sliceType$7([c$2, new $Int((_entry$2 = g.Player.Consumables[consumable.keyFor(c$2)], _entry$2 !== undefined ? _entry$2.v : 0))])); /* */ $s = 59; case 59: if($c) { $c = false; _r$32 = _r$32.$blk(); } if (_r$32 && _r$32.$blk !== undefined) { break s; }
				_r$32;
				_i$2++;
			/* } */ $s = 57; continue; case 58:
			$s = 55; continue;
		/* } else { */ case 54:
			_r$33 = fmt.Fprintf(buf, "You do not have any projectiles.\n", new sliceType$7([])); /* */ $s = 60; case 60: if($c) { $c = false; _r$33 = _r$33.$blk(); } if (_r$33 && _r$33.$blk !== undefined) { break s; }
			_r$33;
		/* } */ case 55:
		_r$34 = fmt.Fprintf(buf, "\n", new sliceType$7([])); /* */ $s = 61; case 61: if($c) { $c = false; _r$34 = _r$34.$blk(); } if (_r$34 && _r$34.$blk !== undefined) { break s; }
		_r$34;
		_r$35 = fmt.Fprintf(buf, "Miscellaneous:\n", new sliceType$7([])); /* */ $s = 62; case 62: if($c) { $c = false; _r$35 = _r$35.$blk(); } if (_r$35 && _r$35.$blk !== undefined) { break s; }
		_r$35;
		_r$36 = fmt.Fprintf(buf, "You collected %d simellas.\n", new sliceType$7([new $Int(g.Player.Simellas)])); /* */ $s = 63; case 63: if($c) { $c = false; _r$36 = _r$36.$blk(); } if (_r$36 && _r$36.$blk !== undefined) { break s; }
		_r$36;
		_r$37 = fmt.Fprintf(buf, "You killed %d monsters.\n", new sliceType$7([new $Int(g.Killed)])); /* */ $s = 64; case 64: if($c) { $c = false; _r$37 = _r$37.$blk(); } if (_r$37 && _r$37.$blk !== undefined) { break s; }
		_r$37;
		_r$38 = fmt.Fprintf(buf, "You spent %.1f turns in the Underground.\n", new sliceType$7([new $Float64((g.Turn) / 10)])); /* */ $s = 65; case 65: if($c) { $c = false; _r$38 = _r$38.$blk(); } if (_r$38 && _r$38.$blk !== undefined) { break s; }
		_r$38;
		_r$39 = fmt.Fprintf(buf, "\n", new sliceType$7([])); /* */ $s = 66; case 66: if($c) { $c = false; _r$39 = _r$39.$blk(); } if (_r$39 && _r$39.$blk !== undefined) { break s; }
		_r$39;
		_r$40 = fmt.Fprintf(buf, "Last messages:\n", new sliceType$7([])); /* */ $s = 67; case 67: if($c) { $c = false; _r$40 = _r$40.$blk(); } if (_r$40 && _r$40.$blk !== undefined) { break s; }
		_r$40;
		i = g.Log.$length - 10 >> 0;
		/* while (true) { */ case 68:
			/* if (!(i < g.Log.$length)) { break; } */ if(!(i < g.Log.$length)) { $s = 69; continue; }
			/* */ if (i >= 0) { $s = 70; continue; }
			/* */ $s = 71; continue;
			/* if (i >= 0) { */ case 70:
				_r$41 = fmt.Fprintf(buf, "%s\n", new sliceType$7([(x = (x$1 = g.Log, ((i < 0 || i >= x$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + i])), new x.constructor.elem(x))])); /* */ $s = 72; case 72: if($c) { $c = false; _r$41 = _r$41.$blk(); } if (_r$41 && _r$41.$blk !== undefined) { break s; }
				_r$41;
			/* } */ case 71:
			i = i + (1) >> 0;
		/* } */ $s = 68; continue; case 69:
		_r$42 = fmt.Fprintf(buf, "\n", new sliceType$7([])); /* */ $s = 73; case 73: if($c) { $c = false; _r$42 = _r$42.$blk(); } if (_r$42 && _r$42.$blk !== undefined) { break s; }
		_r$42;
		_r$43 = fmt.Fprintf(buf, "Dungeon:\n", new sliceType$7([])); /* */ $s = 74; case 74: if($c) { $c = false; _r$43 = _r$43.$blk(); } if (_r$43 && _r$43.$blk !== undefined) { break s; }
		_r$43;
		_r$44 = fmt.Fprintf(buf, "\xE2\x94\x8C%s\xE2\x94\x90\n", new sliceType$7([new $String(strings.Repeat("\xE2\x94\x80", 79))])); /* */ $s = 75; case 75: if($c) { $c = false; _r$44 = _r$44.$blk(); } if (_r$44 && _r$44.$blk !== undefined) { break s; }
		_r$44;
		_r$45 = g.DumpDungeon(); /* */ $s = 76; case 76: if($c) { $c = false; _r$45 = _r$45.$blk(); } if (_r$45 && _r$45.$blk !== undefined) { break s; }
		_r$46 = buf.WriteString(_r$45); /* */ $s = 77; case 77: if($c) { $c = false; _r$46 = _r$46.$blk(); } if (_r$46 && _r$46.$blk !== undefined) { break s; }
		_r$46;
		_r$47 = fmt.Fprintf(buf, "\xE2\x94\x94%s\xE2\x94\x98\n", new sliceType$7([new $String(strings.Repeat("\xE2\x94\x80", 79))])); /* */ $s = 78; case 78: if($c) { $c = false; _r$47 = _r$47.$blk(); } if (_r$47 && _r$47.$blk !== undefined) { break s; }
		_r$47;
		_r$48 = fmt.Fprintf(buf, "\n", new sliceType$7([])); /* */ $s = 79; case 79: if($c) { $c = false; _r$48 = _r$48.$blk(); } if (_r$48 && _r$48.$blk !== undefined) { break s; }
		_r$48;
		_arg$4 = buf;
		_r$49 = g.DumpedKilledMonsters(); /* */ $s = 80; case 80: if($c) { $c = false; _r$49 = _r$49.$blk(); } if (_r$49 && _r$49.$blk !== undefined) { break s; }
		_arg$5 = _r$49;
		_r$50 = fmt.Fprintf(_arg$4, _arg$5, new sliceType$7([])); /* */ $s = 81; case 81: if($c) { $c = false; _r$50 = _r$50.$blk(); } if (_r$50 && _r$50.$blk !== undefined) { break s; }
		_r$50;
		_r$51 = fmt.Fprintf(buf, "\n", new sliceType$7([])); /* */ $s = 82; case 82: if($c) { $c = false; _r$51 = _r$51.$blk(); } if (_r$51 && _r$51.$blk !== undefined) { break s; }
		_r$51;
		_r$52 = fmt.Fprintf(buf, "Timeline:\n", new sliceType$7([])); /* */ $s = 83; case 83: if($c) { $c = false; _r$52 = _r$52.$blk(); } if (_r$52 && _r$52.$blk !== undefined) { break s; }
		_r$52;
		_r$53 = fmt.Fprintf(buf, g.DumpStory(), new sliceType$7([])); /* */ $s = 84; case 84: if($c) { $c = false; _r$53 = _r$53.$blk(); } if (_r$53 && _r$53.$blk !== undefined) { break s; }
		_r$53;
		$s = -1; return buf.String();
		/* */ } return; } if ($f === undefined) { $f = { $blk: game.ptr.prototype.Dump }; } $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._arg$3 = _arg$3; $f._arg$4 = _arg$4; $f._arg$5 = _arg$5; $f._entry = _entry; $f._entry$1 = _entry$1; $f._entry$2 = _entry$2; $f._i = _i; $f._i$1 = _i$1; $f._i$2 = _i$2; $f._r = _r; $f._r$1 = _r$1; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$12 = _r$12; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._r$17 = _r$17; $f._r$18 = _r$18; $f._r$19 = _r$19; $f._r$2 = _r$2; $f._r$20 = _r$20; $f._r$21 = _r$21; $f._r$22 = _r$22; $f._r$23 = _r$23; $f._r$24 = _r$24; $f._r$25 = _r$25; $f._r$26 = _r$26; $f._r$27 = _r$27; $f._r$28 = _r$28; $f._r$29 = _r$29; $f._r$3 = _r$3; $f._r$30 = _r$30; $f._r$31 = _r$31; $f._r$32 = _r$32; $f._r$33 = _r$33; $f._r$34 = _r$34; $f._r$35 = _r$35; $f._r$36 = _r$36; $f._r$37 = _r$37; $f._r$38 = _r$38; $f._r$39 = _r$39; $f._r$4 = _r$4; $f._r$40 = _r$40; $f._r$41 = _r$41; $f._r$42 = _r$42; $f._r$43 = _r$43; $f._r$44 = _r$44; $f._r$45 = _r$45; $f._r$46 = _r$46; $f._r$47 = _r$47; $f._r$48 = _r$48; $f._r$49 = _r$49; $f._r$5 = _r$5; $f._r$50 = _r$50; $f._r$51 = _r$51; $f._r$52 = _r$52; $f._r$53 = _r$53; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._ref = _ref; $f._ref$1 = _ref$1; $f._ref$2 = _ref$2; $f.buf = buf; $f.c = c; $f.c$1 = c$1; $f.c$2 = c$2; $f.g = g; $f.i = i; $f.ps = ps; $f.rs = rs; $f.x = x; $f.x$1 = x$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	game.prototype.Dump = function() { return this.$val.Dump(); };
	game.ptr.prototype.DumpStory = function() {
		var g;
		g = this;
		return strings.Join(g.Story, "\n");
	};
	game.prototype.DumpStory = function() { return this.$val.DumpStory(); };
	game.ptr.prototype.DumpDungeon = function() {
		var _1, _entry, _entry$1, _entry$2, _entry$3, _entry$4, _entry$5, _entry$6, _entry$7, _entry$8, _entry$9, _i, _r, _r$1, _r$2, _ref, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, _tuple$5, _tuple$6, _tuple$7, _tuple$8, buf, c, c$1, eq, g, i, m, ok, ok$1, ok$2, ok$3, ok$4, ok$5, ok$6, ok$7, pos, r, rod$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _entry = $f._entry; _entry$1 = $f._entry$1; _entry$2 = $f._entry$2; _entry$3 = $f._entry$3; _entry$4 = $f._entry$4; _entry$5 = $f._entry$5; _entry$6 = $f._entry$6; _entry$7 = $f._entry$7; _entry$8 = $f._entry$8; _entry$9 = $f._entry$9; _i = $f._i; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _ref = $f._ref; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; _tuple$4 = $f._tuple$4; _tuple$5 = $f._tuple$5; _tuple$6 = $f._tuple$6; _tuple$7 = $f._tuple$7; _tuple$8 = $f._tuple$8; buf = $f.buf; c = $f.c; c$1 = $f.c$1; eq = $f.eq; g = $f.g; i = $f.i; m = $f.m; ok = $f.ok; ok$1 = $f.ok$1; ok$2 = $f.ok$2; ok$3 = $f.ok$3; ok$4 = $f.ok$4; ok$5 = $f.ok$5; ok$6 = $f.ok$6; ok$7 = $f.ok$7; pos = $f.pos; r = $f.r; rod$1 = $f.rod$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		g = this;
		buf = new bytes.Buffer.ptr(sliceType$8.nil, 0, arrayType$2.zero(), 0);
		_ref = g.Dungeon.Cells;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			i = _i;
			c = $clone(((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]), cell);
			if ((_r = i % 79, _r === _r ? _r : $throwRuntimeError("integer divide by zero")) === 0) {
				if (i === 0) {
					buf.WriteRune(9474);
				} else {
					buf.WriteString("\xE2\x94\x82\n\xE2\x94\x82");
				}
			}
			pos = $clone(idxtopos(i), position);
			/* */ if (!c.Explored) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (!c.Explored) { */ case 3:
				buf.WriteRune(32);
				if (i === (g.Dungeon.Cells.$length - 1 >> 0)) {
					buf.WriteString("\xE2\x94\x82\n");
				}
				_i++;
				/* continue; */ $s = 1; continue;
			/* } */ case 4:
			r = 0;
				_1 = c.T;
				/* */ if (_1 === (0)) { $s = 6; continue; }
				/* */ if (_1 === (1)) { $s = 7; continue; }
				/* */ $s = 8; continue;
				/* if (_1 === (0)) { */ case 6:
					r = 35;
					$s = 8; continue;
				/* } else if (_1 === (1)) { */ case 7:
						/* */ if ($equal(pos, g.Player.Pos, position)) { $s = 10; continue; }
						/* */ $s = 11; continue;
						/* if ($equal(pos, g.Player.Pos, position)) { */ case 10:
							r = 64;
							$s = 12; continue;
						/* } else { */ case 11:
							r = 46;
							_tuple = (_entry = g.Fungus[position.keyFor(pos)], _entry !== undefined ? [_entry.v, true] : [0, false]);
							ok = _tuple[1];
							if (ok) {
								r = 34;
							}
							_tuple$1 = (_entry$1 = g.Clouds[position.keyFor(pos)], _entry$1 !== undefined ? [_entry$1.v, true] : [0, false]);
							ok$1 = _tuple$1[1];
							if (ok$1 && (_entry$2 = g.Player.LOS[position.keyFor(pos)], _entry$2 !== undefined ? _entry$2.v : false)) {
								r = 167;
							}
							_tuple$2 = (_entry$3 = g.Collectables[position.keyFor(pos)], _entry$3 !== undefined ? [_entry$3.v, true] : [ptrType$4.nil, false]);
							c$1 = _tuple$2[0];
							ok$2 = _tuple$2[1];
							/* */ if (ok$2) { $s = 13; continue; }
							/* */ $s = 14; continue;
							/* if (ok$2) { */ case 13:
								_r$1 = c$1.Consumable.Letter(); /* */ $s = 16; case 16: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
								r = _r$1;
								$s = 15; continue;
							/* } else { */ case 14:
								_tuple$3 = (_entry$4 = g.Equipables[position.keyFor(pos)], _entry$4 !== undefined ? [_entry$4.v, true] : [$ifaceNil, false]);
								eq = _tuple$3[0];
								ok$3 = _tuple$3[1];
								/* */ if (ok$3) { $s = 17; continue; }
								/* */ $s = 18; continue;
								/* if (ok$3) { */ case 17:
									_r$2 = eq.Letter(); /* */ $s = 20; case 20: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
									r = _r$2;
									$s = 19; continue;
								/* } else { */ case 18:
									_tuple$4 = (_entry$5 = g.Rods[position.keyFor(pos)], _entry$5 !== undefined ? [_entry$5.v, true] : [0, false]);
									rod$1 = _tuple$4[0];
									ok$4 = _tuple$4[1];
									if (ok$4) {
										r = new rod(rod$1).Letter();
									} else {
										_tuple$5 = (_entry$6 = g.Stairs[position.keyFor(pos)], _entry$6 !== undefined ? [_entry$6.v, true] : [false, false]);
										ok$5 = _tuple$5[1];
										if (ok$5) {
											r = 62;
										} else {
											_tuple$6 = (_entry$7 = g.Simellas[position.keyFor(pos)], _entry$7 !== undefined ? [_entry$7.v, true] : [0, false]);
											ok$6 = _tuple$6[1];
											if (ok$6) {
												r = 9827;
											} else {
												_tuple$7 = (_entry$8 = g.Doors[position.keyFor(pos)], _entry$8 !== undefined ? [_entry$8.v, true] : [false, false]);
												ok$7 = _tuple$7[1];
												if (ok$7) {
													r = 43;
												}
											}
										}
									}
								/* } */ case 19:
							/* } */ case 15:
							_tuple$8 = g.MonsterAt($clone(pos, position));
							m = _tuple$8[0];
							if (m.Exists() && ((_entry$9 = g.Player.LOS[position.keyFor(m.Pos)], _entry$9 !== undefined ? _entry$9.v : false) || g.Wizard)) {
								r = new monsterKind(m.Kind).Letter();
							}
						/* } */ case 12:
					case 9:
				/* } */ case 8:
			case 5:
			buf.WriteRune(r);
			if (i === (g.Dungeon.Cells.$length - 1 >> 0)) {
				buf.WriteString("\xE2\x94\x82\n");
			}
			_i++;
		/* } */ $s = 1; continue; case 2:
		$s = -1; return buf.String();
		/* */ } return; } if ($f === undefined) { $f = { $blk: game.ptr.prototype.DumpDungeon }; } $f._1 = _1; $f._entry = _entry; $f._entry$1 = _entry$1; $f._entry$2 = _entry$2; $f._entry$3 = _entry$3; $f._entry$4 = _entry$4; $f._entry$5 = _entry$5; $f._entry$6 = _entry$6; $f._entry$7 = _entry$7; $f._entry$8 = _entry$8; $f._entry$9 = _entry$9; $f._i = _i; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._ref = _ref; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f._tuple$4 = _tuple$4; $f._tuple$5 = _tuple$5; $f._tuple$6 = _tuple$6; $f._tuple$7 = _tuple$7; $f._tuple$8 = _tuple$8; $f.buf = buf; $f.c = c; $f.c$1 = c$1; $f.eq = eq; $f.g = g; $f.i = i; $f.m = m; $f.ok = ok; $f.ok$1 = ok$1; $f.ok$2 = ok$2; $f.ok$3 = ok$3; $f.ok$4 = ok$4; $f.ok$5 = ok$5; $f.ok$6 = ok$6; $f.ok$7 = ok$7; $f.pos = pos; $f.r = r; $f.rod$1 = rod$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	game.prototype.DumpDungeon = function() { return this.$val.DumpDungeon(); };
	game.ptr.prototype.DumpedKilledMonsters = function() {
		var _entry, _i, _r, _r$1, _r$2, _ref, buf, g, mk, ms, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _entry = $f._entry; _i = $f._i; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _ref = $f._ref; buf = $f.buf; g = $f.g; mk = $f.mk; ms = $f.ms; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		g = this;
		buf = new bytes.Buffer.ptr(sliceType$8.nil, 0, arrayType$2.zero(), 0);
		_r = fmt.Fprint(buf, new sliceType$7([new $String("Killed Monsters:\n")])); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r;
		_r$1 = g.SortedKilledMonsters(); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		ms = _r$1;
		_ref = ms;
		_i = 0;
		/* while (true) { */ case 3:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 4; continue; }
			mk = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			_r$2 = fmt.Fprintf(buf, "- %s: %d\n", new sliceType$7([new monsterKind(mk), new $Int((_entry = g.KilledMons[monsterKind.keyFor(mk)], _entry !== undefined ? _entry.v : 0))])); /* */ $s = 5; case 5: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_r$2;
			_i++;
		/* } */ $s = 3; continue; case 4:
		$s = -1; return buf.String();
		/* */ } return; } if ($f === undefined) { $f = { $blk: game.ptr.prototype.DumpedKilledMonsters }; } $f._entry = _entry; $f._i = _i; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._ref = _ref; $f.buf = buf; $f.g = g; $f.mk = mk; $f.ms = ms; $f.$s = $s; $f.$r = $r; return $f;
	};
	game.prototype.DumpedKilledMonsters = function() { return this.$val.DumpedKilledMonsters(); };
	game.ptr.prototype.SimplifedDump = function(err) {
		var _r, _r$1, _r$10, _r$11, _r$12, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _tuple, buf, dataDir, err, err$1, g, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$12 = $f._r$12; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _tuple = $f._tuple; buf = $f.buf; dataDir = $f.dataDir; err = $f.err; err$1 = $f.err$1; g = $f.g; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		g = this;
		buf = new bytes.Buffer.ptr(sliceType$8.nil, 0, arrayType$2.zero(), 0);
		_r = fmt.Fprintf(buf, " \xE2\x99\xA3 Boohu version %s play summary \xE2\x99\xA3\n\n", new sliceType$7([new $String($pkg.Version)])); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r;
		/* */ if (g.Wizard) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (g.Wizard) { */ case 2:
			_r$1 = fmt.Fprintf(buf, "**WIZARD MODE**\n", new sliceType$7([])); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_r$1;
		/* } */ case 3:
		/* */ if (g.Player.HP > 0 && g.Depth > g.MaxDepth()) { $s = 5; continue; }
		/* */ if (g.Player.HP <= 0) { $s = 6; continue; }
		/* */ $s = 7; continue;
		/* if (g.Player.HP > 0 && g.Depth > g.MaxDepth()) { */ case 5:
			_r$2 = fmt.Fprintf(buf, "You escaped from Hareka's Underground alive!\n", new sliceType$7([])); /* */ $s = 9; case 9: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_r$2;
			$s = 8; continue;
		/* } else if (g.Player.HP <= 0) { */ case 6:
			_r$3 = fmt.Fprintf(buf, "You died while exploring depth %d of Hareka's Underground.\n", new sliceType$7([new $Int(g.Depth)])); /* */ $s = 10; case 10: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_r$3;
			$s = 8; continue;
		/* } else { */ case 7:
			_r$4 = fmt.Fprintf(buf, "You are exploring depth %d of Hareka's Underground.\n", new sliceType$7([new $Int(g.Depth)])); /* */ $s = 11; case 11: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			_r$4;
		/* } */ case 8:
		_r$5 = fmt.Fprintf(buf, "You collected %d simellas.\n", new sliceType$7([new $Int(g.Player.Simellas)])); /* */ $s = 12; case 12: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		_r$5;
		_r$6 = fmt.Fprintf(buf, "You killed %d monsters.\n", new sliceType$7([new $Int(g.Killed)])); /* */ $s = 13; case 13: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
		_r$6;
		_r$7 = fmt.Fprintf(buf, "You spent %.1f turns in the Underground.\n", new sliceType$7([new $Float64((g.Turn) / 10)])); /* */ $s = 14; case 14: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
		_r$7;
		_r$8 = fmt.Fprintf(buf, "\n", new sliceType$7([])); /* */ $s = 15; case 15: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
		_r$8;
		/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 16; continue; }
		/* */ $s = 17; continue;
		/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 16:
			_r$9 = fmt.Fprintf(buf, "Error writing dump: %v.\n", new sliceType$7([err])); /* */ $s = 19; case 19: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
			_r$9;
			$s = 18; continue;
		/* } else { */ case 17:
			_tuple = g.DataDir();
			dataDir = _tuple[0];
			err$1 = _tuple[1];
			/* */ if ($interfaceIsEqual(err$1, $ifaceNil)) { $s = 20; continue; }
			/* */ $s = 21; continue;
			/* if ($interfaceIsEqual(err$1, $ifaceNil)) { */ case 20:
				_r$10 = fmt.Fprintf(buf, "Full dump written to %s.\n", new sliceType$7([new $String(filepath.Join(new sliceType$3([dataDir, "dump"])))])); /* */ $s = 22; case 22: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
				_r$10;
			/* } */ case 21:
		/* } */ case 18:
		_r$11 = fmt.Fprintf(buf, "\n\n", new sliceType$7([])); /* */ $s = 23; case 23: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
		_r$11;
		_r$12 = fmt.Fprintf(buf, "\xE2\x94\x80\xE2\x94\x80\xE2\x94\x80Press esc or space to quit\xE2\x94\x80\xE2\x94\x80\xE2\x94\x80", new sliceType$7([])); /* */ $s = 24; case 24: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }
		_r$12;
		$s = -1; return buf.String();
		/* */ } return; } if ($f === undefined) { $f = { $blk: game.ptr.prototype.SimplifedDump }; } $f._r = _r; $f._r$1 = _r$1; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$12 = _r$12; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._tuple = _tuple; $f.buf = buf; $f.dataDir = dataDir; $f.err = err; $f.err$1 = err$1; $f.g = g; $f.$s = $s; $f.$r = $r; return $f;
	};
	game.prototype.SimplifedDump = function(err) { return this.$val.SimplifedDump(err); };
	dungeon.ptr.prototype.Cell = function(pos) {
		var d, pos, x, x$1;
		d = this;
		return (x = d.Cells, x$1 = $clone(pos, position).idx(), ((x$1 < 0 || x$1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + x$1]));
	};
	dungeon.prototype.Cell = function(pos) { return this.$val.Cell(pos); };
	dungeon.ptr.prototype.Border = function(pos) {
		var d, pos;
		d = this;
		return (pos.X === 78) || (pos.Y === 20) || (pos.X === 0) || (pos.Y === 0);
	};
	dungeon.prototype.Border = function(pos) { return this.$val.Border(pos); };
	dungeon.ptr.prototype.SetCell = function(pos, t) {
		var d, pos, t, x, x$1;
		d = this;
		(x = d.Cells, x$1 = $clone(pos, position).idx(), ((x$1 < 0 || x$1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + x$1])).T = t;
	};
	dungeon.prototype.SetCell = function(pos, t) { return this.$val.SetCell(pos, t); };
	dungeon.ptr.prototype.SetExplored = function(pos) {
		var d, pos, x, x$1;
		d = this;
		(x = d.Cells, x$1 = $clone(pos, position).idx(), ((x$1 < 0 || x$1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + x$1])).Explored = true;
	};
	dungeon.prototype.SetExplored = function(pos) { return this.$val.SetExplored(pos); };
	roomDistance = function(r1, r2) {
		var r1, r2;
		return Abs(r1.pos.X - r2.pos.X >> 0) + Abs(r1.pos.Y - r2.pos.Y >> 0) >> 0;
	};
	nearRoom = function(rooms, r) {
		var _i, _r, _ref, closest, d, n, nd, nextRoom, r, rooms, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _r = $f._r; _ref = $f._ref; closest = $f.closest; d = $f.d; n = $f.n; nd = $f.nd; nextRoom = $f.nextRoom; r = $f.r; rooms = $f.rooms; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		closest = $clone((0 >= rooms.$length ? ($throwRuntimeError("index out of range"), undefined) : rooms.$array[rooms.$offset + 0]), room);
		d = roomDistance($clone(r, room), $clone(closest, room));
		_ref = rooms;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			nextRoom = $clone(((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]), room);
			nd = roomDistance($clone(r, room), $clone(nextRoom, room));
			/* */ if (nd < d) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (nd < d) { */ case 3:
				_r = RandInt(10); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				n = _r;
				if (n > 3) {
					d = nd;
					room.copy(closest, nextRoom);
				}
			/* } */ case 4:
			_i++;
		/* } */ $s = 1; continue; case 2:
		$s = -1; return closest;
		/* */ } return; } if ($f === undefined) { $f = { $blk: nearRoom }; } $f._i = _i; $f._r = _r; $f._ref = _ref; $f.closest = closest; $f.d = d; $f.n = n; $f.nd = nd; $f.nextRoom = nextRoom; $f.r = r; $f.rooms = rooms; $f.$s = $s; $f.$r = $r; return $f;
	};
	nearestRoom = function(rooms, r) {
		var _i, _r, _ref, closest, d, n, nd, nextRoom, r, rooms, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _r = $f._r; _ref = $f._ref; closest = $f.closest; d = $f.d; n = $f.n; nd = $f.nd; nextRoom = $f.nextRoom; r = $f.r; rooms = $f.rooms; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		closest = $clone((0 >= rooms.$length ? ($throwRuntimeError("index out of range"), undefined) : rooms.$array[rooms.$offset + 0]), room);
		d = roomDistance($clone(r, room), $clone(closest, room));
		_ref = rooms;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			nextRoom = $clone(((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]), room);
			nd = roomDistance($clone(r, room), $clone(nextRoom, room));
			/* */ if (nd < d) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (nd < d) { */ case 3:
				_r = RandInt(10); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				n = _r;
				if (n > 0) {
					d = nd;
					room.copy(closest, nextRoom);
				}
			/* } */ case 4:
			_i++;
		/* } */ $s = 1; continue; case 2:
		$s = -1; return closest;
		/* */ } return; } if ($f === undefined) { $f = { $blk: nearestRoom }; } $f._i = _i; $f._r = _r; $f._ref = _ref; $f.closest = closest; $f.d = d; $f.n = n; $f.nd = nd; $f.nextRoom = nextRoom; $f.r = r; $f.rooms = rooms; $f.$s = $s; $f.$r = $r; return $f;
	};
	intersectsRoom = function(rooms, r) {
		var _i, _ref, r, rooms, rr;
		_ref = rooms;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			rr = $clone(((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]), room);
			if ((((r.pos.X + r.w >> 0) - 1 >> 0) >= rr.pos.X && ((rr.pos.X + rr.w >> 0) - 1 >> 0) >= r.pos.X) && (((r.pos.Y + r.h >> 0) - 1 >> 0) >= rr.pos.Y && ((rr.pos.Y + rr.h >> 0) - 1 >> 0) >= r.pos.Y)) {
				return true;
			}
			_i++;
		}
		return false;
	};
	dungeon.ptr.prototype.connectRooms = function(r1, r2) {
		var count, d, r1, r2, x, y;
		d = this;
		x = r1.pos.X;
		if (x < r2.pos.X) {
			x = x + ((r1.w - 1 >> 0)) >> 0;
		}
		y = r1.pos.Y;
		if (y < r2.pos.Y) {
			y = y + ((r1.h - 1 >> 0)) >> 0;
		}
		d.SetCell(new position.ptr(x, y), 1);
		count = 0;
		while (true) {
			count = count + (1) >> 0;
			if (count > 1000) {
				$panic(new $String("ConnectRooms"));
			}
			if (x < r2.pos.X) {
				x = x + (1) >> 0;
				d.SetCell(new position.ptr(x, y), 1);
				continue;
			}
			if (x > r2.pos.X) {
				x = x - (1) >> 0;
				d.SetCell(new position.ptr(x, y), 1);
				continue;
			}
			if (y < r2.pos.Y) {
				y = y + (1) >> 0;
				d.SetCell(new position.ptr(x, y), 1);
				continue;
			}
			if (y > r2.pos.Y) {
				y = y - (1) >> 0;
				d.SetCell(new position.ptr(x, y), 1);
				continue;
			}
			break;
		}
		d.SetCell($clone(r2.pos, position), 1);
	};
	dungeon.prototype.connectRooms = function(r1, r2) { return this.$val.connectRooms(r1, r2); };
	dungeon.ptr.prototype.connectRoomsDiagonally = function(r1, r2) {
		var count, d, r1, r2, x, y;
		d = this;
		x = r1.pos.X;
		if (x < r2.pos.X) {
			x = x + ((r1.w - 1 >> 0)) >> 0;
		}
		y = r1.pos.Y;
		if (y < r2.pos.Y) {
			y = y + ((r1.h - 1 >> 0)) >> 0;
		}
		d.SetCell(new position.ptr(x, y), 1);
		count = 0;
		while (true) {
			count = count + (1) >> 0;
			if (count > 1000) {
				$panic(new $String("ConnectRooms"));
			}
			if (x < r2.pos.X && y < r2.pos.Y) {
				x = x + (1) >> 0;
				d.SetCell(new position.ptr(x, y), 1);
				y = y + (1) >> 0;
				d.SetCell(new position.ptr(x, y), 1);
				continue;
			}
			if (x > r2.pos.X && y < r2.pos.Y) {
				x = x - (1) >> 0;
				d.SetCell(new position.ptr(x, y), 1);
				y = y + (1) >> 0;
				d.SetCell(new position.ptr(x, y), 1);
				continue;
			}
			if (x > r2.pos.X && y > r2.pos.Y) {
				x = x - (1) >> 0;
				d.SetCell(new position.ptr(x, y), 1);
				y = y - (1) >> 0;
				d.SetCell(new position.ptr(x, y), 1);
				continue;
			}
			if (x < r2.pos.X && y > r2.pos.Y) {
				x = x + (1) >> 0;
				d.SetCell(new position.ptr(x, y), 1);
				y = y - (1) >> 0;
				d.SetCell(new position.ptr(x, y), 1);
				continue;
			}
			if (x < r2.pos.X) {
				x = x + (1) >> 0;
				d.SetCell(new position.ptr(x, y), 1);
				continue;
			}
			if (x > r2.pos.X) {
				x = x - (1) >> 0;
				d.SetCell(new position.ptr(x, y), 1);
				continue;
			}
			if (y < r2.pos.Y) {
				y = y + (1) >> 0;
				d.SetCell(new position.ptr(x, y), 1);
				continue;
			}
			if (y > r2.pos.Y) {
				y = y - (1) >> 0;
				d.SetCell(new position.ptr(x, y), 1);
				continue;
			}
			break;
		}
		d.SetCell($clone(r2.pos, position), 1);
	};
	dungeon.prototype.connectRoomsDiagonally = function(r1, r2) { return this.$val.connectRoomsDiagonally(r1, r2); };
	dungeon.ptr.prototype.Area = function(area, pos, radius) {
		var area, d, pos, pos$1, radius, x, y;
		d = this;
		area = $subslice(area, 0, 0);
		x = pos.X - radius >> 0;
		while (true) {
			if (!(x <= (pos.X + radius >> 0))) { break; }
			y = pos.Y - radius >> 0;
			while (true) {
				if (!(y <= (pos.Y + radius >> 0))) { break; }
				pos$1 = new position.ptr(x, y);
				if ($clone(pos$1, position).valid()) {
					area = $append(area, pos$1);
				}
				y = y + (1) >> 0;
			}
			x = x + (1) >> 0;
		}
		return area;
	};
	dungeon.prototype.Area = function(area, pos, radius) { return this.$val.Area(area, pos, radius); };
	dungeon.ptr.prototype.ConnectRoomsShortestPath = function(r1, r2) {
		var _i, _r, _r$1, _r$2, _r$3, _r$4, _ref, _tmp, _tmp$1, _tuple, d, mp, path, pos, r1, r1pos, r2, r2pos, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _ref = $f._ref; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tuple = $f._tuple; d = $f.d; mp = $f.mp; path = $f.path; pos = $f.pos; r1 = $f.r1; r1pos = $f.r1pos; r2 = $f.r2; r2pos = $f.r2pos; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		d = this;
		_tmp = new position.ptr(0, 0);
		_tmp$1 = new position.ptr(0, 0);
		r1pos = $clone(_tmp, position);
		r2pos = $clone(_tmp$1, position);
		_r = RandInt(r1.w); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		r1pos.X = r1.pos.X + _r >> 0;
		if (r1pos.X < r2.pos.X) {
			r1pos.X = (r1.pos.X + r1.w >> 0) - 1 >> 0;
		}
		_r$1 = RandInt(r1.h); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		r1pos.Y = r1.pos.Y + _r$1 >> 0;
		if (r1pos.Y < r2.pos.Y) {
			r1pos.Y = (r1.pos.Y + r1.h >> 0) - 1 >> 0;
		}
		_r$2 = RandInt(r2.w); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		r2pos.X = r2.pos.X + _r$2 >> 0;
		if (r2pos.X < r1.pos.X) {
			r2pos.X = (r2.pos.X + r2.w >> 0) - 1 >> 0;
		}
		_r$3 = RandInt(r2.h); /* */ $s = 4; case 4: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		r2pos.Y = r2.pos.Y + _r$3 >> 0;
		if (r2pos.Y < r1.pos.Y) {
			r2pos.Y = (r2.pos.Y + r2.h >> 0) - 1 >> 0;
		}
		mp = new dungeonPath.ptr(d, arrayType$1.zero());
		_r$4 = AstarPath(mp, $clone(r1pos, position), $clone(r2pos, position)); /* */ $s = 5; case 5: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		_tuple = _r$4;
		path = _tuple[0];
		_ref = path;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			pos = $clone(((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]), position);
			d.SetCell($clone(pos, position), 1);
			_i++;
		}
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: dungeon.ptr.prototype.ConnectRoomsShortestPath }; } $f._i = _i; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._ref = _ref; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tuple = _tuple; $f.d = d; $f.mp = mp; $f.path = path; $f.pos = pos; $f.r1 = r1; $f.r1pos = r1pos; $f.r2 = r2; $f.r2pos = r2pos; $f.$s = $s; $f.$r = $r; return $f;
	};
	dungeon.prototype.ConnectRoomsShortestPath = function(r1, r2) { return this.$val.ConnectRoomsShortestPath(r1, r2); };
	dungeon.ptr.prototype.DigRoom = function(r) {
		var d, i, j, r, rpos;
		d = this;
		i = r.pos.X;
		while (true) {
			if (!(i < (r.pos.X + r.w >> 0))) { break; }
			j = r.pos.Y;
			while (true) {
				if (!(j < (r.pos.Y + r.h >> 0))) { break; }
				rpos = new position.ptr(i, j);
				if ($clone(rpos, position).valid()) {
					d.SetCell($clone(rpos, position), 1);
				}
				j = j + (1) >> 0;
			}
			i = i + (1) >> 0;
		}
	};
	dungeon.prototype.DigRoom = function(r) { return this.$val.DigRoom(r); };
	dungeon.ptr.prototype.PutCols = function(r) {
		var d, i, j, r, rpos;
		d = this;
		i = r.pos.X + 1 >> 0;
		while (true) {
			if (!(i < ((r.pos.X + r.w >> 0) - 1 >> 0))) { break; }
			j = r.pos.Y + 1 >> 0;
			while (true) {
				if (!(j < ((r.pos.Y + r.h >> 0) - 1 >> 0))) { break; }
				rpos = new position.ptr(i, j);
				if ($clone(rpos, position).valid()) {
					d.SetCell($clone(rpos, position), 0);
				}
				j = j + (2) >> 0;
			}
			i = i + (2) >> 0;
		}
	};
	dungeon.prototype.PutCols = function(r) { return this.$val.PutCols(r); };
	dungeon.ptr.prototype.PutDiagCols = function(r) {
		var _r, _r$1, d, i, j, m, n, r, rpos, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; d = $f.d; i = $f.i; j = $f.j; m = $f.m; n = $f.n; r = $f.r; rpos = $f.rpos; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		d = this;
		_r = RandInt(2); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		n = _r;
		i = r.pos.X + 1 >> 0;
		while (true) {
			if (!(i < ((r.pos.X + r.w >> 0) - 1 >> 0))) { break; }
			m = n;
			j = r.pos.Y + 1 >> 0;
			while (true) {
				if (!(j < ((r.pos.Y + r.h >> 0) - 1 >> 0))) { break; }
				rpos = new position.ptr(i, j);
				if ($clone(rpos, position).valid() && ((_r$1 = m % 2, _r$1 === _r$1 ? _r$1 : $throwRuntimeError("integer divide by zero")) === 0)) {
					d.SetCell($clone(rpos, position), 0);
				}
				m = m + (1) >> 0;
				j = j + (1) >> 0;
			}
			n = n + (1) >> 0;
			i = i + (1) >> 0;
		}
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: dungeon.ptr.prototype.PutDiagCols }; } $f._r = _r; $f._r$1 = _r$1; $f.d = d; $f.i = i; $f.j = j; $f.m = m; $f.n = n; $f.r = r; $f.rpos = rpos; $f.$s = $s; $f.$r = $r; return $f;
	};
	dungeon.prototype.PutDiagCols = function(r) { return this.$val.PutDiagCols(r); };
	dungeon.ptr.prototype.IsAreaFree = function(pos, h, w) {
		var d, h, i, j, pos, rpos, w;
		d = this;
		i = pos.X;
		while (true) {
			if (!(i < (pos.X + w >> 0))) { break; }
			j = pos.Y;
			while (true) {
				if (!(j < (pos.Y + h >> 0))) { break; }
				rpos = new position.ptr(i, j);
				if (!$clone(rpos, position).valid() || !((d.Cell($clone(rpos, position)).T === 1))) {
					return false;
				}
				j = j + (1) >> 0;
			}
			i = i + (1) >> 0;
		}
		return true;
	};
	dungeon.prototype.IsAreaFree = function(pos, h, w) { return this.$val.IsAreaFree(pos, h, w); };
	dungeon.ptr.prototype.RoomDigCanditate = function(pos, h, w) {
		var d, h, i, j, pos, ret, rpos, w;
		ret = false;
		d = this;
		i = pos.X;
		while (true) {
			if (!(i < (pos.X + w >> 0))) { break; }
			j = pos.Y;
			while (true) {
				if (!(j < (pos.Y + h >> 0))) { break; }
				rpos = new position.ptr(i, j);
				if (!$clone(rpos, position).valid()) {
					ret = false;
					return ret;
				}
				if (d.Cell($clone(rpos, position)).T === 1) {
					ret = true;
				}
				j = j + (1) >> 0;
			}
			i = i + (1) >> 0;
		}
		ret = ret;
		return ret;
	};
	dungeon.prototype.RoomDigCanditate = function(pos, h, w) { return this.$val.RoomDigCanditate(pos, h, w); };
	dungeon.ptr.prototype.DigArea = function(pos, h, w) {
		var d, h, i, j, pos, rpos, w;
		d = this;
		i = pos.X;
		while (true) {
			if (!(i < (pos.X + w >> 0))) { break; }
			j = pos.Y;
			while (true) {
				if (!(j < (pos.Y + h >> 0))) { break; }
				rpos = new position.ptr(i, j);
				if (!$clone(rpos, position).valid()) {
					j = j + (1) >> 0;
					continue;
				}
				d.SetCell($clone(rpos, position), 1);
				j = j + (1) >> 0;
			}
			i = i + (1) >> 0;
		}
	};
	dungeon.prototype.DigArea = function(pos, h, w) { return this.$val.DigArea(pos, h, w); };
	dungeon.ptr.prototype.BuildRoom = function(pos, w, h) {
		var _i, _key, _q, _q$1, _q$2, _q$3, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _ref, area, d, doors, doorsc, dpos, h, i, i$1, i$2, m, m$1, n, n$1, p, pos, spos, w, x, x$1, x$2, y, y$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _key = $f._key; _q = $f._q; _q$1 = $f._q$1; _q$2 = $f._q$2; _q$3 = $f._q$3; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _ref = $f._ref; area = $f.area; d = $f.d; doors = $f.doors; doorsc = $f.doorsc; dpos = $f.dpos; h = $f.h; i = $f.i; i$1 = $f.i$1; i$2 = $f.i$2; m = $f.m; m$1 = $f.m$1; n = $f.n; n$1 = $f.n$1; p = $f.p; pos = $f.pos; spos = $f.spos; w = $f.w; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; y = $f.y; y$1 = $f.y$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		d = this;
		spos = new position.ptr(pos.X - 1 >> 0, pos.Y - 1 >> 0);
		if (!d.IsAreaFree($clone(spos, position), h + 2 >> 0, w + 2 >> 0)) {
			$s = -1; return false;
		}
		i = pos.X;
		while (true) {
			if (!(i < (pos.X + w >> 0))) { break; }
			d.SetCell(new position.ptr(i, pos.Y), 0);
			d.SetCell(new position.ptr(i, (pos.Y + h >> 0) - 1 >> 0), 0);
			i = i + (1) >> 0;
		}
		i$1 = pos.Y;
		while (true) {
			if (!(i$1 < (pos.Y + h >> 0))) { break; }
			d.SetCell(new position.ptr(pos.X, i$1), 0);
			d.SetCell(new position.ptr((pos.X + w >> 0) - 1 >> 0, i$1), 0);
			i$1 = i$1 + (1) >> 0;
		}
		_r = RandInt(2); /* */ $s = 4; case 4: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ if (_r === 0) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (_r === 0) { */ case 1:
			_r$1 = RandInt(2); /* */ $s = 5; case 5: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			n = _r$1;
			x = pos.X + 1 >> 0;
			while (true) {
				if (!(x < ((pos.X + w >> 0) - 1 >> 0))) { break; }
				m = n;
				y = pos.Y + 1 >> 0;
				while (true) {
					if (!(y < ((pos.Y + h >> 0) - 1 >> 0))) { break; }
					if ((_r$2 = m % 2, _r$2 === _r$2 ? _r$2 : $throwRuntimeError("integer divide by zero")) === 0) {
						d.SetCell(new position.ptr(x, y), 0);
					}
					m = m + (1) >> 0;
					y = y + (1) >> 0;
				}
				n = n + (1) >> 0;
				x = x + (1) >> 0;
			}
			$s = 3; continue;
		/* } else { */ case 2:
			_r$3 = RandInt(2); /* */ $s = 6; case 6: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			n$1 = _r$3;
			_r$4 = RandInt(2); /* */ $s = 7; case 7: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			m$1 = _r$4;
			x$1 = (pos.X + 1 >> 0) + m$1 >> 0;
			while (true) {
				if (!(x$1 < ((pos.X + w >> 0) - 1 >> 0))) { break; }
				y$1 = (pos.Y + 1 >> 0) + n$1 >> 0;
				while (true) {
					if (!(y$1 < ((pos.Y + h >> 0) - 1 >> 0))) { break; }
					d.SetCell(new position.ptr(x$1, y$1), 0);
					y$1 = y$1 + (2) >> 0;
				}
				x$1 = x$1 + (2) >> 0;
			}
		/* } */ case 3:
		area = $makeSlice(sliceType$5, 9);
		_ref = $toNativeArray($kindStruct, [$clone(pos, position), new position.ptr(pos.X, (pos.Y + h >> 0) - 1 >> 0), new position.ptr((pos.X + w >> 0) - 1 >> 0, pos.Y), new position.ptr((pos.X + w >> 0) - 1 >> 0, (pos.Y + h >> 0) - 1 >> 0)]);
		_i = 0;
		while (true) {
			if (!(_i < 4)) { break; }
			p = $clone(((_i < 0 || _i >= _ref.length) ? ($throwRuntimeError("index out of range"), undefined) : _ref[_i]), position);
			if (d.WallAreaCount(area, $clone(p, position), 1) === 4) {
				d.SetCell($clone(p, position), 1);
			}
			_i++;
		}
		doorsc = $toNativeArray($kindStruct, [new position.ptr(pos.X + (_q = w / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) >> 0, pos.Y), new position.ptr(pos.X + (_q$1 = w / 2, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero")) >> 0, (pos.Y + h >> 0) - 1 >> 0), new position.ptr(pos.X, pos.Y + (_q$2 = h / 2, (_q$2 === _q$2 && _q$2 !== 1/0 && _q$2 !== -1/0) ? _q$2 >> 0 : $throwRuntimeError("integer divide by zero")) >> 0), new position.ptr((pos.X + w >> 0) - 1 >> 0, pos.Y + (_q$3 = h / 2, (_q$3 === _q$3 && _q$3 !== 1/0 && _q$3 !== -1/0) ? _q$3 >> 0 : $throwRuntimeError("integer divide by zero")) >> 0)]);
		doors = {};
		i$2 = 0;
		/* while (true) { */ case 8:
			_r$5 = RandInt(2); /* */ $s = 10; case 10: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			/* if (!(i$2 < (3 + _r$5 >> 0))) { break; } */ if(!(i$2 < (3 + _r$5 >> 0))) { $s = 9; continue; }
			_r$6 = RandInt(4); /* */ $s = 11; case 11: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
			dpos = $clone((x$2 = _r$6, ((x$2 < 0 || x$2 >= doorsc.length) ? ($throwRuntimeError("index out of range"), undefined) : doorsc[x$2])), position);
			_key = $clone(dpos, position); (doors || $throwRuntimeError("assignment to entry in nil map"))[position.keyFor(_key)] = { k: _key, v: true };
			d.SetCell($clone(dpos, position), 1);
			i$2 = i$2 + (1) >> 0;
		/* } */ $s = 8; continue; case 9:
		$s = -1; return doors;
		/* */ } return; } if ($f === undefined) { $f = { $blk: dungeon.ptr.prototype.BuildRoom }; } $f._i = _i; $f._key = _key; $f._q = _q; $f._q$1 = _q$1; $f._q$2 = _q$2; $f._q$3 = _q$3; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._ref = _ref; $f.area = area; $f.d = d; $f.doors = doors; $f.doorsc = doorsc; $f.dpos = dpos; $f.h = h; $f.i = i; $f.i$1 = i$1; $f.i$2 = i$2; $f.m = m; $f.m$1 = m$1; $f.n = n; $f.n$1 = n$1; $f.p = p; $f.pos = pos; $f.spos = spos; $f.w = w; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.y = y; $f.y$1 = y$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	dungeon.prototype.BuildRoom = function(pos, w, h) { return this.$val.BuildRoom(pos, w, h); };
	dungeon.ptr.prototype.BuildSomeRoom = function(w, h) {
		var _r, _r$1, d, doors, h, i, pos, w, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; d = $f.d; doors = $f.doors; h = $f.h; i = $f.i; pos = $f.pos; w = $f.w; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		d = this;
		i = 0;
		/* while (true) { */ case 1:
			/* if (!(i < 200)) { break; } */ if(!(i < 200)) { $s = 2; continue; }
			_r = d.FreeCell(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			pos = $clone(_r, position);
			_r$1 = d.BuildRoom($clone(pos, position), w, h); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			doors = _r$1;
			if (!(doors === false)) {
				$s = -1; return doors;
			}
			i = i + (1) >> 0;
		/* } */ $s = 1; continue; case 2:
		$s = -1; return false;
		/* */ } return; } if ($f === undefined) { $f = { $blk: dungeon.ptr.prototype.BuildSomeRoom }; } $f._r = _r; $f._r$1 = _r$1; $f.d = d; $f.doors = doors; $f.h = h; $f.i = i; $f.pos = pos; $f.w = w; $f.$s = $s; $f.$r = $r; return $f;
	};
	dungeon.prototype.BuildSomeRoom = function(w, h) { return this.$val.BuildSomeRoom(w, h); };
	dungeon.ptr.prototype.DigSomeRoom = function(w, h) {
		var _r, _r$1, d, doors, dpos, h, i, pos, w, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; d = $f.d; doors = $f.doors; dpos = $f.dpos; h = $f.h; i = $f.i; pos = $f.pos; w = $f.w; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		d = this;
		i = 0;
		/* while (true) { */ case 1:
			/* if (!(i < 200)) { break; } */ if(!(i < 200)) { $s = 2; continue; }
			_r = d.FreeCell(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			pos = $clone(_r, position);
			dpos = new position.ptr(pos.X - 1 >> 0, pos.Y - 1 >> 0);
			/* */ if (!d.RoomDigCanditate($clone(dpos, position), h + 2 >> 0, w + 2 >> 0)) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (!d.RoomDigCanditate($clone(dpos, position), h + 2 >> 0, w + 2 >> 0)) { */ case 4:
				i = i + (1) >> 0;
				/* continue; */ $s = 1; continue;
			/* } */ case 5:
			d.DigArea($clone(dpos, position), h + 2 >> 0, w + 2 >> 0);
			_r$1 = d.BuildRoom($clone(pos, position), w, h); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			doors = _r$1;
			if (!(doors === false)) {
				$s = -1; return doors;
			}
			i = i + (1) >> 0;
		/* } */ $s = 1; continue; case 2:
		$s = -1; return false;
		/* */ } return; } if ($f === undefined) { $f = { $blk: dungeon.ptr.prototype.DigSomeRoom }; } $f._r = _r; $f._r$1 = _r$1; $f.d = d; $f.doors = doors; $f.dpos = dpos; $f.h = h; $f.i = i; $f.pos = pos; $f.w = w; $f.$s = $s; $f.$r = $r; return $f;
	};
	dungeon.prototype.DigSomeRoom = function(w, h) { return this.$val.DigSomeRoom(w, h); };
	dungeon.ptr.prototype.ResizeRoom = function(r) {
		var d, r;
		d = this;
		if ((79 - r.pos.X >> 0) < r.w) {
			r.w = 79 - r.pos.X >> 0;
		}
		if ((21 - r.pos.Y >> 0) < r.h) {
			r.h = 21 - r.pos.Y >> 0;
		}
		return r;
	};
	dungeon.prototype.ResizeRoom = function(r) { return this.$val.ResizeRoom(r); };
	game.ptr.prototype.GenRuinsMap = function(h, w) {
		var _r, _r$1, _r$10, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, count, d, g, h, i, r, ro, rooms, w, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _r$10 = $f._r$10; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; count = $f.count; d = $f.d; g = $f.g; h = $f.h; i = $f.i; r = $f.r; ro = $f.ro; rooms = $f.rooms; w = $f.w; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		g = this;
		d = new dungeon.ptr(sliceType$10.nil);
		d.Cells = $makeSlice(sliceType$10, ($imul(h, w)));
		rooms = new sliceType$11([]);
		i = 0;
		/* while (true) { */ case 1:
			/* if (!(i < 45)) { break; } */ if(!(i < 45)) { $s = 2; continue; }
			ro = new room.ptr(new position.ptr(0, 0), 0, 0);
			count = 100;
			/* while (true) { */ case 3:
				/* if (!(count > 0)) { break; } */ if(!(count > 0)) { $s = 4; continue; }
				count = count - (1) >> 0;
				_r = RandInt(w - 1 >> 0); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				_r$1 = RandInt(h - 1 >> 0); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				_r$2 = RandInt(5); /* */ $s = 7; case 7: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				_r$3 = RandInt(3); /* */ $s = 8; case 8: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				room.copy(ro, new room.ptr(new position.ptr(_r, _r$1), 3 + _r$2 >> 0, 2 + _r$3 >> 0));
				room.copy(ro, d.ResizeRoom($clone(ro, room)));
				if (!intersectsRoom(rooms, $clone(ro, room))) {
					/* break; */ $s = 4; continue;
				}
			/* } */ $s = 3; continue; case 4:
			d.DigRoom($clone(ro, room));
			_r$4 = RandInt(45); /* */ $s = 11; case 11: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			/* */ if (_r$4 === 0) { $s = 9; continue; }
			/* */ $s = 10; continue;
			/* if (_r$4 === 0) { */ case 9:
				_r$5 = RandInt(2); /* */ $s = 15; case 15: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
				/* */ if (_r$5 === 0) { $s = 12; continue; }
				/* */ $s = 13; continue;
				/* if (_r$5 === 0) { */ case 12:
					d.PutCols($clone(ro, room));
					$s = 14; continue;
				/* } else { */ case 13:
					$r = d.PutDiagCols($clone(ro, room)); /* */ $s = 16; case 16: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 14:
			/* } */ case 10:
			/* */ if (rooms.$length > 0) { $s = 17; continue; }
			/* */ $s = 18; continue;
			/* if (rooms.$length > 0) { */ case 17:
				_r$6 = RandInt(100); /* */ $s = 19; case 19: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
				r = _r$6;
				/* */ if (r > 75) { $s = 20; continue; }
				/* */ if (r > 25) { $s = 21; continue; }
				/* */ $s = 22; continue;
				/* if (r > 75) { */ case 20:
					_r$7 = nearRoom(rooms, $clone(ro, room)); /* */ $s = 24; case 24: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
					$r = d.connectRooms($clone(_r$7, room), $clone(ro, room)); /* */ $s = 25; case 25: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$s = 23; continue;
				/* } else if (r > 25) { */ case 21:
					_r$8 = nearRoom(rooms, $clone(ro, room)); /* */ $s = 26; case 26: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
					$r = d.ConnectRoomsShortestPath($clone(_r$8, room), $clone(ro, room)); /* */ $s = 27; case 27: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$s = 23; continue;
				/* } else { */ case 22:
					_r$9 = nearRoom(rooms, $clone(ro, room)); /* */ $s = 28; case 28: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
					$r = d.connectRoomsDiagonally($clone(_r$9, room), $clone(ro, room)); /* */ $s = 29; case 29: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 23:
			/* } */ case 18:
			rooms = $append(rooms, ro);
			i = i + (1) >> 0;
		/* } */ $s = 1; continue; case 2:
		g.Dungeon = d;
		g.Fungus = {};
		_r$10 = RandInt(3); /* */ $s = 30; case 30: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
		$r = g.DigFungus(_r$10); /* */ $s = 31; case 31: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = g.PutDoors(20); /* */ $s = 32; case 32: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: game.ptr.prototype.GenRuinsMap }; } $f._r = _r; $f._r$1 = _r$1; $f._r$10 = _r$10; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f.count = count; $f.d = d; $f.g = g; $f.h = h; $f.i = i; $f.r = r; $f.ro = ro; $f.rooms = rooms; $f.w = w; $f.$s = $s; $f.$r = $r; return $f;
	};
	game.prototype.GenRuinsMap = function(h, w) { return this.$val.GenRuinsMap(h, w); };
	game.ptr.prototype.DigFungus = function(n) {
		var _entry, _entry$1, _i, _key, _keys, _r, _r$1, _r$2, _r$3, _ref, _tuple, _tuple$1, conn, count, d, fungus, g, i, n, ok, pos, pos$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _entry = $f._entry; _entry$1 = $f._entry$1; _i = $f._i; _key = $f._key; _keys = $f._keys; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _ref = $f._ref; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; conn = $f.conn; count = $f.count; d = $f.d; fungus = $f.fungus; g = $f.g; i = $f.i; n = $f.n; ok = $f.ok; pos = $f.pos; pos$1 = $f.pos$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		d = [d];
		fungus = [fungus];
		g = this;
		d[0] = g.Dungeon;
		_r = g.Foliage(21, 79); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		fungus[0] = _r;
		i = 0;
		/* while (true) { */ case 2:
			/* if (!(i < 100)) { break; } */ if(!(i < 100)) { $s = 3; continue; }
			if (n <= 0) {
				/* break; */ $s = 3; continue;
			}
			_r$1 = d[0].FreeCell(); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			pos = $clone(_r$1, position);
			_tuple = (_entry = fungus[0][position.keyFor(pos)], _entry !== undefined ? [_entry.v, true] : [0, false]);
			ok = _tuple[1];
			if (ok) {
				i = i + (1) >> 0;
				/* continue; */ $s = 2; continue;
			}
			_r$2 = d[0].Connected($clone(pos, position), (function(d, fungus) { return function(npos) {
				var _entry$1, _tuple$2, npos, ok$1;
				_tuple$2 = (_entry$1 = fungus[0][position.keyFor(npos)], _entry$1 !== undefined ? [_entry$1.v, true] : [0, false]);
				ok$1 = _tuple$2[1];
				return ok$1 && d[0].IsFreeCell($clone(npos, position));
			}; })(d, fungus)); /* */ $s = 5; case 5: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_tuple$1 = _r$2;
			conn = _tuple$1[0];
			count = _tuple$1[1];
			/* */ if (count < 3) { $s = 6; continue; }
			/* */ $s = 7; continue;
			/* if (count < 3) { */ case 6:
				i = i + (1) >> 0;
				/* continue; */ $s = 2; continue;
			/* } */ case 7:
			_ref = conn;
			_i = 0;
			_keys = $keys(_ref);
			/* while (true) { */ case 8:
				/* if (!(_i < _keys.length)) { break; } */ if(!(_i < _keys.length)) { $s = 9; continue; }
				_entry$1 = _ref[_keys[_i]];
				if (_entry$1 === undefined) {
					_i++;
					/* continue; */ $s = 8; continue;
				}
				pos$1 = $clone(_entry$1.k, position);
				_r$3 = RandInt(2); /* */ $s = 12; case 12: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				/* */ if (_r$3 === 0) { $s = 10; continue; }
				/* */ $s = 11; continue;
				/* if (_r$3 === 0) { */ case 10:
					d[0].SetCell($clone(pos$1, position), 1);
				/* } */ case 11:
				_key = $clone(pos$1, position); (g.Fungus || $throwRuntimeError("assignment to entry in nil map"))[position.keyFor(_key)] = { k: _key, v: 0 };
				_i++;
			/* } */ $s = 8; continue; case 9:
			n = n - (1) >> 0;
			i = i + (1) >> 0;
		/* } */ $s = 2; continue; case 3:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: game.ptr.prototype.DigFungus }; } $f._entry = _entry; $f._entry$1 = _entry$1; $f._i = _i; $f._key = _key; $f._keys = _keys; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._ref = _ref; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.conn = conn; $f.count = count; $f.d = d; $f.fungus = fungus; $f.g = g; $f.i = i; $f.n = n; $f.ok = ok; $f.pos = pos; $f.pos$1 = pos$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	game.prototype.DigFungus = function(n) { return this.$val.DigFungus(n); };
	roomSlice.prototype.Len = function() {
		var rs;
		rs = this;
		return rs.$length;
	};
	$ptrType(roomSlice).prototype.Len = function() { return this.$get().Len(); };
	roomSlice.prototype.Swap = function(i, j) {
		var _tmp, _tmp$1, i, j, rs;
		rs = this;
		_tmp = $clone(((j < 0 || j >= rs.$length) ? ($throwRuntimeError("index out of range"), undefined) : rs.$array[rs.$offset + j]), room);
		_tmp$1 = $clone(((i < 0 || i >= rs.$length) ? ($throwRuntimeError("index out of range"), undefined) : rs.$array[rs.$offset + i]), room);
		room.copy(((i < 0 || i >= rs.$length) ? ($throwRuntimeError("index out of range"), undefined) : rs.$array[rs.$offset + i]), _tmp);
		room.copy(((j < 0 || j >= rs.$length) ? ($throwRuntimeError("index out of range"), undefined) : rs.$array[rs.$offset + j]), _tmp$1);
	};
	$ptrType(roomSlice).prototype.Swap = function(i, j) { return this.$get().Swap(i, j); };
	roomSlice.prototype.Less = function(i, j) {
		var i, j, rs;
		rs = this;
		return ((i < 0 || i >= rs.$length) ? ($throwRuntimeError("index out of range"), undefined) : rs.$array[rs.$offset + i]).pos.Y < ((j < 0 || j >= rs.$length) ? ($throwRuntimeError("index out of range"), undefined) : rs.$array[rs.$offset + j]).pos.Y || (((i < 0 || i >= rs.$length) ? ($throwRuntimeError("index out of range"), undefined) : rs.$array[rs.$offset + i]).pos.Y === ((j < 0 || j >= rs.$length) ? ($throwRuntimeError("index out of range"), undefined) : rs.$array[rs.$offset + j]).pos.Y) && ((i < 0 || i >= rs.$length) ? ($throwRuntimeError("index out of range"), undefined) : rs.$array[rs.$offset + i]).pos.X < ((j < 0 || j >= rs.$length) ? ($throwRuntimeError("index out of range"), undefined) : rs.$array[rs.$offset + j]).pos.X;
	};
	$ptrType(roomSlice).prototype.Less = function(i, j) { return this.$get().Less(i, j); };
	game.ptr.prototype.GenRoomMap = function(h, w) {
		var _i, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _ref, count, d, g, h, i, i$1, r, ro, ro$1, rooms, w, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _ref = $f._ref; count = $f.count; d = $f.d; g = $f.g; h = $f.h; i = $f.i; i$1 = $f.i$1; r = $f.r; ro = $f.ro; ro$1 = $f.ro$1; rooms = $f.rooms; w = $f.w; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		g = this;
		d = new dungeon.ptr(sliceType$10.nil);
		d.Cells = $makeSlice(sliceType$10, ($imul(h, w)));
		rooms = new sliceType$11([]);
		i = 0;
		/* while (true) { */ case 1:
			/* if (!(i < 35)) { break; } */ if(!(i < 35)) { $s = 2; continue; }
			ro = new room.ptr(new position.ptr(0, 0), 0, 0);
			count = 100;
			/* while (true) { */ case 3:
				/* if (!(count > 0)) { break; } */ if(!(count > 0)) { $s = 4; continue; }
				count = count - (1) >> 0;
				_r = RandInt(w - 1 >> 0); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				_r$1 = RandInt(h - 1 >> 0); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				_r$2 = RandInt(4); /* */ $s = 7; case 7: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				_r$3 = RandInt(3); /* */ $s = 8; case 8: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				room.copy(ro, new room.ptr(new position.ptr(_r, _r$1), 5 + _r$2 >> 0, 3 + _r$3 >> 0));
				room.copy(ro, d.ResizeRoom($clone(ro, room)));
				if (!intersectsRoom(rooms, $clone(ro, room))) {
					/* break; */ $s = 4; continue;
				}
			/* } */ $s = 3; continue; case 4:
			d.DigRoom($clone(ro, room));
			_r$4 = RandInt(35); /* */ $s = 11; case 11: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			/* */ if (_r$4 === 0) { $s = 9; continue; }
			/* */ $s = 10; continue;
			/* if (_r$4 === 0) { */ case 9:
				_r$5 = RandInt(2); /* */ $s = 15; case 15: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
				/* */ if (_r$5 === 0) { $s = 12; continue; }
				/* */ $s = 13; continue;
				/* if (_r$5 === 0) { */ case 12:
					d.PutCols($clone(ro, room));
					$s = 14; continue;
				/* } else { */ case 13:
					$r = d.PutDiagCols($clone(ro, room)); /* */ $s = 16; case 16: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 14:
			/* } */ case 10:
			rooms = $append(rooms, ro);
			i = i + (1) >> 0;
		/* } */ $s = 1; continue; case 2:
		$r = sort.Sort(($subslice(new roomSlice(rooms.$array), rooms.$offset, rooms.$offset + rooms.$length))); /* */ $s = 17; case 17: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_ref = rooms;
		_i = 0;
		/* while (true) { */ case 18:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 19; continue; }
			i$1 = _i;
			ro$1 = $clone(((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]), room);
			/* */ if (i$1 === 0) { $s = 20; continue; }
			/* */ $s = 21; continue;
			/* if (i$1 === 0) { */ case 20:
				_i++;
				/* continue; */ $s = 18; continue;
			/* } */ case 21:
			_r$6 = RandInt(100); /* */ $s = 22; case 22: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
			r = _r$6;
			/* */ if (r > 50) { $s = 23; continue; }
			/* */ if (r > 25) { $s = 24; continue; }
			/* */ $s = 25; continue;
			/* if (r > 50) { */ case 23:
				_r$7 = nearestRoom($subslice(rooms, 0, i$1), $clone(ro$1, room)); /* */ $s = 27; case 27: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
				$r = d.connectRooms($clone(_r$7, room), $clone(ro$1, room)); /* */ $s = 28; case 28: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 26; continue;
			/* } else if (r > 25) { */ case 24:
				_r$8 = nearRoom($subslice(rooms, 0, i$1), $clone(ro$1, room)); /* */ $s = 29; case 29: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
				$r = d.ConnectRoomsShortestPath($clone(_r$8, room), $clone(ro$1, room)); /* */ $s = 30; case 30: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 26; continue;
			/* } else { */ case 25:
				_r$9 = nearestRoom($subslice(rooms, 0, i$1), $clone(ro$1, room)); /* */ $s = 31; case 31: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
				$r = d.connectRoomsDiagonally($clone(_r$9, room), $clone(ro$1, room)); /* */ $s = 32; case 32: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 26:
			_i++;
		/* } */ $s = 18; continue; case 19:
		g.Dungeon = d;
		$r = g.PutDoors(90); /* */ $s = 33; case 33: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: game.ptr.prototype.GenRoomMap }; } $f._i = _i; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._ref = _ref; $f.count = count; $f.d = d; $f.g = g; $f.h = h; $f.i = i; $f.i$1 = i$1; $f.r = r; $f.ro = ro; $f.ro$1 = ro$1; $f.rooms = rooms; $f.w = w; $f.$s = $s; $f.$r = $r; return $f;
	};
	game.prototype.GenRoomMap = function(h, w) { return this.$val.GenRoomMap(h, w); };
	dungeon.ptr.prototype.FreeCell = function() {
		var _r, _r$1, c, count, d, pos, x, y, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; c = $f.c; count = $f.count; d = $f.d; pos = $f.pos; x = $f.x; y = $f.y; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		d = this;
		count = 0;
		/* while (true) { */ case 1:
			count = count + (1) >> 0;
			if (count > 1000) {
				$panic(new $String("FreeCell"));
			}
			_r = RandInt(79); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			x = _r;
			_r$1 = RandInt(21); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			y = _r$1;
			pos = new position.ptr(x, y);
			c = $clone(d.Cell($clone(pos, position)), cell);
			if (c.T === 1) {
				$s = -1; return pos;
			}
		/* } */ $s = 1; continue; case 2:
		$s = -1; return new position.ptr(0, 0);
		/* */ } return; } if ($f === undefined) { $f = { $blk: dungeon.ptr.prototype.FreeCell }; } $f._r = _r; $f._r$1 = _r$1; $f.c = c; $f.count = count; $f.d = d; $f.pos = pos; $f.x = x; $f.y = y; $f.$s = $s; $f.$r = $r; return $f;
	};
	dungeon.prototype.FreeCell = function() { return this.$val.FreeCell(); };
	dungeon.ptr.prototype.WallCell = function() {
		var _r, _r$1, c, count, d, pos, x, y, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; c = $f.c; count = $f.count; d = $f.d; pos = $f.pos; x = $f.x; y = $f.y; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		d = this;
		count = 0;
		/* while (true) { */ case 1:
			count = count + (1) >> 0;
			if (count > 1000) {
				$panic(new $String("WallCell"));
			}
			_r = RandInt(79); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			x = _r;
			_r$1 = RandInt(21); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			y = _r$1;
			pos = new position.ptr(x, y);
			c = $clone(d.Cell($clone(pos, position)), cell);
			if (c.T === 0) {
				$s = -1; return pos;
			}
		/* } */ $s = 1; continue; case 2:
		$s = -1; return new position.ptr(0, 0);
		/* */ } return; } if ($f === undefined) { $f = { $blk: dungeon.ptr.prototype.WallCell }; } $f._r = _r; $f._r$1 = _r$1; $f.c = c; $f.count = count; $f.d = d; $f.pos = pos; $f.x = x; $f.y = y; $f.$s = $s; $f.$r = $r; return $f;
	};
	dungeon.prototype.WallCell = function() { return this.$val.WallCell(); };
	game.ptr.prototype.GenCaveMap = function(h, w) {
		var _entry, _entry$1, _entry$2, _i, _i$1, _i$2, _i$3, _key, _key$1, _key$2, _keys, _keys$1, _keys$2, _r, _r$1, _r$10, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _ref, _ref$1, _ref$2, _ref$3, _tuple, _tuple$1, _v, block, cells, d, diag, digs, doors, g, h, h$1, h$2, i, lastValid, max, notValid, npos, pos, pos$1, pos$2, pos$3, pos$4, w, w$1, w$2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _entry = $f._entry; _entry$1 = $f._entry$1; _entry$2 = $f._entry$2; _i = $f._i; _i$1 = $f._i$1; _i$2 = $f._i$2; _i$3 = $f._i$3; _key = $f._key; _key$1 = $f._key$1; _key$2 = $f._key$2; _keys = $f._keys; _keys$1 = $f._keys$1; _keys$2 = $f._keys$2; _r = $f._r; _r$1 = $f._r$1; _r$10 = $f._r$10; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _ref = $f._ref; _ref$1 = $f._ref$1; _ref$2 = $f._ref$2; _ref$3 = $f._ref$3; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _v = $f._v; block = $f.block; cells = $f.cells; d = $f.d; diag = $f.diag; digs = $f.digs; doors = $f.doors; g = $f.g; h = $f.h; h$1 = $f.h$1; h$2 = $f.h$2; i = $f.i; lastValid = $f.lastValid; max = $f.max; notValid = $f.notValid; npos = $f.npos; pos = $f.pos; pos$1 = $f.pos$1; pos$2 = $f.pos$2; pos$3 = $f.pos$3; pos$4 = $f.pos$4; w = $f.w; w$1 = $f.w$1; w$2 = $f.w$2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		g = this;
		d = new dungeon.ptr(sliceType$10.nil);
		d.Cells = $makeSlice(sliceType$10, ($imul(h, w)));
		pos = new position.ptr(40, 10);
		max = 882;
		d.SetCell($clone(pos, position), 1);
		cells = 1;
		notValid = 0;
		lastValid = $clone(pos, position);
		_r = RandInt(4); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		diag = _r === 0;
		/* while (true) { */ case 2:
			/* if (!(cells < max)) { break; } */ if(!(cells < max)) { $s = 3; continue; }
			_r$1 = $clone(pos, position).RandomNeighbor(diag); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			npos = $clone(_r$1, position);
			if (!$clone(pos, position).valid() && $clone(npos, position).valid() && (d.Cell($clone(npos, position)).T === 0)) {
				position.copy(pos, lastValid);
				/* continue; */ $s = 2; continue;
			}
			position.copy(pos, npos);
			if ($clone(pos, position).valid()) {
				if (!((d.Cell($clone(pos, position)).T === 1))) {
					d.SetCell($clone(pos, position), 1);
					cells = cells + (1) >> 0;
				}
				position.copy(lastValid, pos);
			} else {
				notValid = notValid + (1) >> 0;
			}
			if (notValid > 200) {
				notValid = 0;
				position.copy(pos, lastValid);
			}
		/* } */ $s = 2; continue; case 3:
		cells = 1;
		max = 21;
		digs = 0;
		i = 0;
		block = $makeSlice(sliceType$5, 0, 64);
		/* while (true) { */ case 5:
			/* if (!(cells < max)) { break; } */ if(!(cells < max)) { $s = 6; continue; }
			i = i + (1) >> 0;
			if (digs > 3) {
				/* break; */ $s = 6; continue;
			}
			if (i > 1000) {
				/* break; */ $s = 6; continue;
			}
			_r$2 = RandInt(2); /* */ $s = 7; case 7: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			diag = _r$2 === 0;
			_r$3 = d.DigBlock(block, diag); /* */ $s = 8; case 8: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			block = _r$3;
			if (block.$length === 0) {
				/* continue loop; */ $s = 5; continue s;
			}
			if (block.$length < 4 || block.$length > 10) {
				/* continue loop; */ $s = 5; continue s;
			}
			_ref = block;
			_i = 0;
			while (true) {
				if (!(_i < _ref.$length)) { break; }
				pos$1 = $clone(((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]), position);
				d.SetCell($clone(pos$1, position), 1);
				cells = cells + (1) >> 0;
				_i++;
			}
			digs = digs + (1) >> 0;
		/* } */ $s = 5; continue; case 6:
		doors = {};
		_r$4 = RandInt(3); /* */ $s = 11; case 11: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		/* */ if (_r$4 > 0) { $s = 9; continue; }
		/* */ $s = 10; continue;
		/* if (_r$4 > 0) { */ case 9:
			_r$5 = GenCaveRoomSize(); /* */ $s = 12; case 12: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			_tuple = _r$5;
			w$1 = _tuple[0];
			h$1 = _tuple[1];
			_r$6 = d.BuildSomeRoom(w$1, h$1); /* */ $s = 13; case 13: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
			_ref$1 = _r$6;
			_i$1 = 0;
			_keys = $keys(_ref$1);
			/* while (true) { */ case 14:
				/* if (!(_i$1 < _keys.length)) { break; } */ if(!(_i$1 < _keys.length)) { $s = 15; continue; }
				_entry = _ref$1[_keys[_i$1]];
				if (_entry === undefined) {
					_i$1++;
					/* continue; */ $s = 14; continue;
				}
				pos$2 = $clone(_entry.k, position);
				_key = $clone(pos$2, position); (doors || $throwRuntimeError("assignment to entry in nil map"))[position.keyFor(_key)] = { k: _key, v: true };
				_i$1++;
			/* } */ $s = 14; continue; case 15:
			_r$7 = RandInt(3); /* */ $s = 18; case 18: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
			/* */ if (_r$7 === 0) { $s = 16; continue; }
			/* */ $s = 17; continue;
			/* if (_r$7 === 0) { */ case 16:
				_r$8 = GenCaveRoomSize(); /* */ $s = 19; case 19: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
				_tuple$1 = _r$8;
				w$2 = _tuple$1[0];
				h$2 = _tuple$1[1];
				_r$9 = d.BuildSomeRoom(w$2, h$2); /* */ $s = 20; case 20: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
				_ref$2 = _r$9;
				_i$2 = 0;
				_keys$1 = $keys(_ref$2);
				/* while (true) { */ case 21:
					/* if (!(_i$2 < _keys$1.length)) { break; } */ if(!(_i$2 < _keys$1.length)) { $s = 22; continue; }
					_entry$1 = _ref$2[_keys$1[_i$2]];
					if (_entry$1 === undefined) {
						_i$2++;
						/* continue; */ $s = 21; continue;
					}
					pos$3 = $clone(_entry$1.k, position);
					_key$1 = $clone(pos$3, position); (doors || $throwRuntimeError("assignment to entry in nil map"))[position.keyFor(_key$1)] = { k: _key$1, v: true };
					_i$2++;
				/* } */ $s = 21; continue; case 22:
			/* } */ case 17:
		/* } */ case 10:
		g.Dungeon = d;
		$r = g.PutDoors(5); /* */ $s = 23; case 23: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_ref$3 = doors;
		_i$3 = 0;
		_keys$2 = $keys(_ref$3);
		/* while (true) { */ case 24:
			/* if (!(_i$3 < _keys$2.length)) { break; } */ if(!(_i$3 < _keys$2.length)) { $s = 25; continue; }
			_entry$2 = _ref$3[_keys$2[_i$3]];
			if (_entry$2 === undefined) {
				_i$3++;
				/* continue; */ $s = 24; continue;
			}
			pos$4 = $clone(_entry$2.k, position);
			if (!(g.DoorCandidate($clone(pos$4, position)))) { _v = false; $s = 28; continue s; }
			_r$10 = RandInt(100); /* */ $s = 29; case 29: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
			_v = _r$10 > 20; case 28:
			/* */ if (_v) { $s = 26; continue; }
			/* */ $s = 27; continue;
			/* if (_v) { */ case 26:
				_key$2 = $clone(pos$4, position); (g.Doors || $throwRuntimeError("assignment to entry in nil map"))[position.keyFor(_key$2)] = { k: _key$2, v: true };
			/* } */ case 27:
			_i$3++;
		/* } */ $s = 24; continue; case 25:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: game.ptr.prototype.GenCaveMap }; } $f._entry = _entry; $f._entry$1 = _entry$1; $f._entry$2 = _entry$2; $f._i = _i; $f._i$1 = _i$1; $f._i$2 = _i$2; $f._i$3 = _i$3; $f._key = _key; $f._key$1 = _key$1; $f._key$2 = _key$2; $f._keys = _keys; $f._keys$1 = _keys$1; $f._keys$2 = _keys$2; $f._r = _r; $f._r$1 = _r$1; $f._r$10 = _r$10; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._ref = _ref; $f._ref$1 = _ref$1; $f._ref$2 = _ref$2; $f._ref$3 = _ref$3; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._v = _v; $f.block = block; $f.cells = cells; $f.d = d; $f.diag = diag; $f.digs = digs; $f.doors = doors; $f.g = g; $f.h = h; $f.h$1 = h$1; $f.h$2 = h$2; $f.i = i; $f.lastValid = lastValid; $f.max = max; $f.notValid = notValid; $f.npos = npos; $f.pos = pos; $f.pos$1 = pos$1; $f.pos$2 = pos$2; $f.pos$3 = pos$3; $f.pos$4 = pos$4; $f.w = w; $f.w$1 = w$1; $f.w$2 = w$2; $f.$s = $s; $f.$r = $r; return $f;
	};
	game.prototype.GenCaveMap = function(h, w) { return this.$val.GenCaveMap(h, w); };
	GenCaveRoomSize = function() {
		var _r, _r$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = RandInt(2); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = RandInt(2); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$s = -1; return [7 + ($imul(2, _r)) >> 0, 5 + ($imul(2, _r$1)) >> 0];
		/* */ } return; } if ($f === undefined) { $f = { $blk: GenCaveRoomSize }; } $f._r = _r; $f._r$1 = _r$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.GenCaveRoomSize = GenCaveRoomSize;
	dungeon.ptr.prototype.HasFreeNeighbor = function(pos) {
		var _i, _r, _ref, d, neighbors, pos, pos$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _r = $f._r; _ref = $f._ref; d = $f.d; neighbors = $f.neighbors; pos = $f.pos; pos$1 = $f.pos$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		d = this;
		_r = $clone(pos, position).ValidNeighbors(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		neighbors = _r;
		_ref = neighbors;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			pos$1 = $clone(((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]), position);
			if (d.Cell($clone(pos$1, position)).T === 1) {
				$s = -1; return true;
			}
			_i++;
		}
		$s = -1; return false;
		/* */ } return; } if ($f === undefined) { $f = { $blk: dungeon.ptr.prototype.HasFreeNeighbor }; } $f._i = _i; $f._r = _r; $f._ref = _ref; $f.d = d; $f.neighbors = neighbors; $f.pos = pos; $f.pos$1 = pos$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	dungeon.prototype.HasFreeNeighbor = function(pos) { return this.$val.HasFreeNeighbor(pos); };
	game.ptr.prototype.HasFreeExploredNeighbor = function(pos) {
		var _entry, _i, _r, _ref, c, d, g, neighbors, pos, pos$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _entry = $f._entry; _i = $f._i; _r = $f._r; _ref = $f._ref; c = $f.c; d = $f.d; g = $f.g; neighbors = $f.neighbors; pos = $f.pos; pos$1 = $f.pos$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		g = this;
		d = g.Dungeon;
		_r = $clone(pos, position).ValidNeighbors(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		neighbors = _r;
		_ref = neighbors;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			pos$1 = $clone(((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]), position);
			c = $clone(d.Cell($clone(pos$1, position)), cell);
			if ((c.T === 1) && c.Explored && !(_entry = g.UnknownDig[position.keyFor(pos$1)], _entry !== undefined ? _entry.v : false)) {
				$s = -1; return true;
			}
			_i++;
		}
		$s = -1; return false;
		/* */ } return; } if ($f === undefined) { $f = { $blk: game.ptr.prototype.HasFreeExploredNeighbor }; } $f._entry = _entry; $f._i = _i; $f._r = _r; $f._ref = _ref; $f.c = c; $f.d = d; $f.g = g; $f.neighbors = neighbors; $f.pos = pos; $f.pos$1 = pos$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	game.prototype.HasFreeExploredNeighbor = function(pos) { return this.$val.HasFreeExploredNeighbor(pos); };
	dungeon.ptr.prototype.DigBlock = function(block, diag) {
		var _r, _r$1, _r$2, _r$3, block, d, diag, pos, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; block = $f.block; d = $f.d; diag = $f.diag; pos = $f.pos; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		d = this;
		_r = d.WallCell(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		pos = $clone(_r, position);
		block = $subslice(block, 0, 0);
		/* while (true) { */ case 2:
			block = $append(block, pos);
			_r$1 = d.HasFreeNeighbor($clone(pos, position)); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			/* */ if (_r$1) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (_r$1) { */ case 4:
				/* break; */ $s = 3; continue;
			/* } */ case 5:
			_r$2 = $clone(pos, position).RandomNeighbor(diag); /* */ $s = 7; case 7: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			position.copy(pos, _r$2);
			/* */ if (!$clone(pos, position).valid()) { $s = 8; continue; }
			/* */ $s = 9; continue;
			/* if (!$clone(pos, position).valid()) { */ case 8:
				block = $subslice(block, 0, 0);
				_r$3 = d.WallCell(); /* */ $s = 10; case 10: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				position.copy(pos, _r$3);
				/* continue; */ $s = 2; continue;
			/* } */ case 9:
			if (!$clone(pos, position).valid()) {
				$s = -1; return sliceType$5.nil;
			}
		/* } */ $s = 2; continue; case 3:
		$s = -1; return block;
		/* */ } return; } if ($f === undefined) { $f = { $blk: dungeon.ptr.prototype.DigBlock }; } $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f.block = block; $f.d = d; $f.diag = diag; $f.pos = pos; $f.$s = $s; $f.$r = $r; return $f;
	};
	dungeon.prototype.DigBlock = function(block, diag) { return this.$val.DigBlock(block, diag); };
	game.ptr.prototype.GenCaveMapTree = function(h, w) {
		var _entry, _entry$1, _entry$2, _i, _i$1, _i$2, _i$3, _key, _key$1, _key$2, _keys, _keys$1, _keys$2, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _ref, _ref$1, _ref$2, _ref$3, _tuple, _tuple$1, _v, block, cells, center, d, diag, doors, g, h, h$1, h$2, max, pos, pos$1, pos$2, pos$3, w, w$1, w$2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _entry = $f._entry; _entry$1 = $f._entry$1; _entry$2 = $f._entry$2; _i = $f._i; _i$1 = $f._i$1; _i$2 = $f._i$2; _i$3 = $f._i$3; _key = $f._key; _key$1 = $f._key$1; _key$2 = $f._key$2; _keys = $f._keys; _keys$1 = $f._keys$1; _keys$2 = $f._keys$2; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _ref = $f._ref; _ref$1 = $f._ref$1; _ref$2 = $f._ref$2; _ref$3 = $f._ref$3; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _v = $f._v; block = $f.block; cells = $f.cells; center = $f.center; d = $f.d; diag = $f.diag; doors = $f.doors; g = $f.g; h = $f.h; h$1 = $f.h$1; h$2 = $f.h$2; max = $f.max; pos = $f.pos; pos$1 = $f.pos$1; pos$2 = $f.pos$2; pos$3 = $f.pos$3; w = $f.w; w$1 = $f.w$1; w$2 = $f.w$2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		g = this;
		d = new dungeon.ptr(sliceType$10.nil);
		d.Cells = $makeSlice(sliceType$10, ($imul(h, w)));
		center = new position.ptr(40, 10);
		d.SetCell($clone(center, position), 1);
		d.SetCell($clone($clone(center, position).E(), position), 1);
		d.SetCell($clone($clone(center, position).NE(), position), 1);
		d.SetCell($clone($clone(center, position).S(), position), 1);
		d.SetCell($clone($clone(center, position).SE(), position), 1);
		d.SetCell($clone($clone(center, position).N(), position), 1);
		d.SetCell($clone($clone(center, position).NW(), position), 1);
		d.SetCell($clone($clone(center, position).W(), position), 1);
		d.SetCell($clone($clone(center, position).SW(), position), 1);
		max = 483;
		cells = 1;
		_r = RandInt(2); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		diag = _r === 0;
		block = $makeSlice(sliceType$5, 0, 64);
		/* while (true) { */ case 2:
			/* if (!(cells < max)) { break; } */ if(!(cells < max)) { $s = 3; continue; }
			_r$1 = d.DigBlock(block, diag); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			block = _r$1;
			if (block.$length === 0) {
				/* continue loop; */ $s = 2; continue s;
			}
			_ref = block;
			_i = 0;
			while (true) {
				if (!(_i < _ref.$length)) { break; }
				pos = $clone(((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]), position);
				if (!((d.Cell($clone(pos, position)).T === 1))) {
					d.SetCell($clone(pos, position), 1);
					cells = cells + (1) >> 0;
				}
				_i++;
			}
		/* } */ $s = 2; continue; case 3:
		doors = {};
		_r$2 = RandInt(3); /* */ $s = 7; case 7: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		/* */ if (_r$2 > 0) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if (_r$2 > 0) { */ case 5:
			_r$3 = GenCaveRoomSize(); /* */ $s = 8; case 8: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_tuple = _r$3;
			w$1 = _tuple[0];
			h$1 = _tuple[1];
			_r$4 = d.DigSomeRoom(w$1, h$1); /* */ $s = 9; case 9: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			_ref$1 = _r$4;
			_i$1 = 0;
			_keys = $keys(_ref$1);
			/* while (true) { */ case 10:
				/* if (!(_i$1 < _keys.length)) { break; } */ if(!(_i$1 < _keys.length)) { $s = 11; continue; }
				_entry = _ref$1[_keys[_i$1]];
				if (_entry === undefined) {
					_i$1++;
					/* continue; */ $s = 10; continue;
				}
				pos$1 = $clone(_entry.k, position);
				_key = $clone(pos$1, position); (doors || $throwRuntimeError("assignment to entry in nil map"))[position.keyFor(_key)] = { k: _key, v: true };
				_i$1++;
			/* } */ $s = 10; continue; case 11:
			_r$5 = RandInt(3); /* */ $s = 14; case 14: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			/* */ if (_r$5 === 0) { $s = 12; continue; }
			/* */ $s = 13; continue;
			/* if (_r$5 === 0) { */ case 12:
				_r$6 = GenCaveRoomSize(); /* */ $s = 15; case 15: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
				_tuple$1 = _r$6;
				w$2 = _tuple$1[0];
				h$2 = _tuple$1[1];
				_r$7 = d.DigSomeRoom(w$2, h$2); /* */ $s = 16; case 16: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
				_ref$2 = _r$7;
				_i$2 = 0;
				_keys$1 = $keys(_ref$2);
				/* while (true) { */ case 17:
					/* if (!(_i$2 < _keys$1.length)) { break; } */ if(!(_i$2 < _keys$1.length)) { $s = 18; continue; }
					_entry$1 = _ref$2[_keys$1[_i$2]];
					if (_entry$1 === undefined) {
						_i$2++;
						/* continue; */ $s = 17; continue;
					}
					pos$2 = $clone(_entry$1.k, position);
					_key$1 = $clone(pos$2, position); (doors || $throwRuntimeError("assignment to entry in nil map"))[position.keyFor(_key$1)] = { k: _key$1, v: true };
					_i$2++;
				/* } */ $s = 17; continue; case 18:
			/* } */ case 13:
		/* } */ case 6:
		g.Dungeon = d;
		g.Fungus = {};
		_r$8 = RandInt(3); /* */ $s = 19; case 19: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
		$r = g.DigFungus(_r$8); /* */ $s = 20; case 20: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = g.PutDoors(5); /* */ $s = 21; case 21: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_ref$3 = doors;
		_i$3 = 0;
		_keys$2 = $keys(_ref$3);
		/* while (true) { */ case 22:
			/* if (!(_i$3 < _keys$2.length)) { break; } */ if(!(_i$3 < _keys$2.length)) { $s = 23; continue; }
			_entry$2 = _ref$3[_keys$2[_i$3]];
			if (_entry$2 === undefined) {
				_i$3++;
				/* continue; */ $s = 22; continue;
			}
			pos$3 = $clone(_entry$2.k, position);
			if (!(g.DoorCandidate($clone(pos$3, position)))) { _v = false; $s = 26; continue s; }
			_r$9 = RandInt(100); /* */ $s = 27; case 27: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
			_v = _r$9 > 20; case 26:
			/* */ if (_v) { $s = 24; continue; }
			/* */ $s = 25; continue;
			/* if (_v) { */ case 24:
				_key$2 = $clone(pos$3, position); (g.Doors || $throwRuntimeError("assignment to entry in nil map"))[position.keyFor(_key$2)] = { k: _key$2, v: true };
			/* } */ case 25:
			_i$3++;
		/* } */ $s = 22; continue; case 23:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: game.ptr.prototype.GenCaveMapTree }; } $f._entry = _entry; $f._entry$1 = _entry$1; $f._entry$2 = _entry$2; $f._i = _i; $f._i$1 = _i$1; $f._i$2 = _i$2; $f._i$3 = _i$3; $f._key = _key; $f._key$1 = _key$1; $f._key$2 = _key$2; $f._keys = _keys; $f._keys$1 = _keys$1; $f._keys$2 = _keys$2; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._ref = _ref; $f._ref$1 = _ref$1; $f._ref$2 = _ref$2; $f._ref$3 = _ref$3; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._v = _v; $f.block = block; $f.cells = cells; $f.center = center; $f.d = d; $f.diag = diag; $f.doors = doors; $f.g = g; $f.h = h; $f.h$1 = h$1; $f.h$2 = h$2; $f.max = max; $f.pos = pos; $f.pos$1 = pos$1; $f.pos$2 = pos$2; $f.pos$3 = pos$3; $f.w = w; $f.w$1 = w$1; $f.w$2 = w$2; $f.$s = $s; $f.$r = $r; return $f;
	};
	game.prototype.GenCaveMapTree = function(h, w) { return this.$val.GenCaveMapTree(h, w); };
	dungeon.ptr.prototype.WallAreaCount = function(area, pos, radius) {
		var _1, _i, _ref, area, count, d, npos, pos, radius;
		d = this;
		area = d.Area(area, $clone(pos, position), radius);
		count = 0;
		_ref = area;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			npos = $clone(((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]), position);
			if (d.Cell($clone(npos, position)).T === 0) {
				count = count + (1) >> 0;
			}
			_i++;
		}
		_1 = radius;
		if (_1 === (1)) {
			count = count + ((9 - area.$length >> 0)) >> 0;
		} else if (_1 === (2)) {
			count = count + ((25 - area.$length >> 0)) >> 0;
		}
		return count;
	};
	dungeon.prototype.WallAreaCount = function(area, pos, radius) { return this.$val.WallAreaCount(area, pos, radius); };
	dungeon.ptr.prototype.Connected = function(pos, nf) {
		var _entry, _i, _key, _key$1, _r, _ref, conn, count, d, nb, nf, npos, pos, stack, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _entry = $f._entry; _i = $f._i; _key = $f._key; _key$1 = $f._key$1; _r = $f._r; _ref = $f._ref; conn = $f.conn; count = $f.count; d = $f.d; nb = $f.nb; nf = $f.nf; npos = $f.npos; pos = $f.pos; stack = $f.stack; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		d = this;
		conn = $makeMap(position.keyFor, []);
		stack = new sliceType$5([$clone(pos, position)]);
		count = 0;
		_key = $clone(pos, position); (conn || $throwRuntimeError("assignment to entry in nil map"))[position.keyFor(_key)] = { k: _key, v: true };
		nb = $makeSlice(sliceType$5, 0, 8);
		/* while (true) { */ case 1:
			/* if (!(stack.$length > 0)) { break; } */ if(!(stack.$length > 0)) { $s = 2; continue; }
			position.copy(pos, (x = stack.$length - 1 >> 0, ((x < 0 || x >= stack.$length) ? ($throwRuntimeError("index out of range"), undefined) : stack.$array[stack.$offset + x])));
			stack = $subslice(stack, 0, (stack.$length - 1 >> 0));
			count = count + (1) >> 0;
			_r = $clone(pos, position).Neighbors(nb, nf); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			nb = _r;
			_ref = nb;
			_i = 0;
			while (true) {
				if (!(_i < _ref.$length)) { break; }
				npos = $clone(((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]), position);
				if (!(_entry = conn[position.keyFor(npos)], _entry !== undefined ? _entry.v : false)) {
					_key$1 = $clone(npos, position); (conn || $throwRuntimeError("assignment to entry in nil map"))[position.keyFor(_key$1)] = { k: _key$1, v: true };
					stack = $append(stack, npos);
				}
				_i++;
			}
		/* } */ $s = 1; continue; case 2:
		$s = -1; return [conn, count];
		/* */ } return; } if ($f === undefined) { $f = { $blk: dungeon.ptr.prototype.Connected }; } $f._entry = _entry; $f._i = _i; $f._key = _key; $f._key$1 = _key$1; $f._r = _r; $f._ref = _ref; $f.conn = conn; $f.count = count; $f.d = d; $f.nb = nb; $f.nf = nf; $f.npos = npos; $f.pos = pos; $f.stack = stack; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	dungeon.prototype.Connected = function(pos, nf) { return this.$val.Connected(pos, nf); };
	game.ptr.prototype.RunCellularAutomataCave = function(h, w) {
		var _entry, _entry$1, _i, _i$1, _i$2, _i$3, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _ref, _ref$1, _ref$2, _ref$3, _tuple, _tuple$1, area, block, bufm, c, c1, c2, cells, conn, count, d, diag, digs, g, h, i, i$1, i$2, i$3, i$4, j, max, ncount, pos, pos$1, pos$2, pos$3, pos$4, r, w, winner, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _entry = $f._entry; _entry$1 = $f._entry$1; _i = $f._i; _i$1 = $f._i$1; _i$2 = $f._i$2; _i$3 = $f._i$3; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _ref = $f._ref; _ref$1 = $f._ref$1; _ref$2 = $f._ref$2; _ref$3 = $f._ref$3; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; area = $f.area; block = $f.block; bufm = $f.bufm; c = $f.c; c1 = $f.c1; c2 = $f.c2; cells = $f.cells; conn = $f.conn; count = $f.count; d = $f.d; diag = $f.diag; digs = $f.digs; g = $f.g; h = $f.h; i = $f.i; i$1 = $f.i$1; i$2 = $f.i$2; i$3 = $f.i$3; i$4 = $f.i$4; j = $f.j; max = $f.max; ncount = $f.ncount; pos = $f.pos; pos$1 = $f.pos$1; pos$2 = $f.pos$2; pos$3 = $f.pos$3; pos$4 = $f.pos$4; r = $f.r; w = $f.w; winner = $f.winner; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		g = this;
		d = new dungeon.ptr(sliceType$10.nil);
		d.Cells = $makeSlice(sliceType$10, ($imul(h, w)));
		_ref = d.Cells;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			i = _i;
			_r = RandInt(100); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			r = _r;
			pos = $clone(idxtopos(i), position);
			if (r >= 45) {
				d.SetCell($clone(pos, position), 1);
			} else {
				d.SetCell($clone(pos, position), 0);
			}
			_i++;
		/* } */ $s = 1; continue; case 2:
		bufm = new dungeon.ptr(sliceType$10.nil);
		bufm.Cells = $makeSlice(sliceType$10, ($imul(h, w)));
		area = $makeSlice(sliceType$5, 0, 25);
		i$1 = 0;
		while (true) {
			if (!(i$1 < 5)) { break; }
			_ref$1 = bufm.Cells;
			_i$1 = 0;
			while (true) {
				if (!(_i$1 < _ref$1.$length)) { break; }
				j = _i$1;
				pos$1 = $clone(idxtopos(j), position);
				c1 = d.WallAreaCount(area, $clone(pos$1, position), 1);
				if (c1 >= 5) {
					bufm.SetCell($clone(pos$1, position), 0);
				} else {
					bufm.SetCell($clone(pos$1, position), 1);
				}
				if (i$1 === 3) {
					c2 = d.WallAreaCount(area, $clone(pos$1, position), 2);
					if (c2 <= 2) {
						bufm.SetCell($clone(pos$1, position), 0);
					}
				}
				_i$1++;
			}
			$copySlice(d.Cells, bufm.Cells);
			i$1 = i$1 + (1) >> 0;
		}
		conn = false;
		count = 0;
		winner = new position.ptr(0, 0);
		i$2 = 0;
		/* while (true) { */ case 4:
			/* if (!(i$2 < 15)) { break; } */ if(!(i$2 < 15)) { $s = 5; continue; }
			_r$1 = d.FreeCell(); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			pos$2 = $clone(_r$1, position);
			/* */ if ((_entry = conn[position.keyFor(pos$2)], _entry !== undefined ? _entry.v : false)) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if ((_entry = conn[position.keyFor(pos$2)], _entry !== undefined ? _entry.v : false)) { */ case 7:
				i$2 = i$2 + (1) >> 0;
				/* continue; */ $s = 4; continue;
			/* } */ case 8:
			ncount = 0;
			_r$2 = d.Connected($clone(pos$2, position), $methodVal(d, "IsFreeCell")); /* */ $s = 9; case 9: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_tuple = _r$2;
			conn = _tuple[0];
			ncount = _tuple[1];
			if (ncount > count) {
				count = ncount;
				position.copy(winner, pos$2);
			}
			if (count >= 613) {
				/* break; */ $s = 5; continue;
			}
			i$2 = i$2 + (1) >> 0;
		/* } */ $s = 4; continue; case 5:
		_r$3 = d.Connected($clone(winner, position), $methodVal(d, "IsFreeCell")); /* */ $s = 10; case 10: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_tuple$1 = _r$3;
		conn = _tuple$1[0];
		count = _tuple$1[1];
		if (count <= 613) {
			$s = -1; return false;
		}
		_ref$2 = d.Cells;
		_i$2 = 0;
		while (true) {
			if (!(_i$2 < _ref$2.$length)) { break; }
			i$3 = _i$2;
			c = $clone(((_i$2 < 0 || _i$2 >= _ref$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$2.$array[_ref$2.$offset + _i$2]), cell);
			pos$3 = $clone(idxtopos(i$3), position);
			if ((c.T === 1) && !(_entry$1 = conn[position.keyFor(pos$3)], _entry$1 !== undefined ? _entry$1.v : false)) {
				d.SetCell($clone(pos$3, position), 0);
			}
			_i$2++;
		}
		max = 21;
		cells = 1;
		digs = 0;
		i$4 = 0;
		block = $makeSlice(sliceType$5, 0, 64);
		/* while (true) { */ case 11:
			/* if (!(cells < max)) { break; } */ if(!(cells < max)) { $s = 12; continue; }
			i$4 = i$4 + (1) >> 0;
			if (digs > 4) {
				/* break; */ $s = 12; continue;
			}
			if (i$4 > 1000) {
				/* break; */ $s = 12; continue;
			}
			_r$4 = RandInt(2); /* */ $s = 13; case 13: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			diag = _r$4 === 0;
			_r$5 = d.DigBlock(block, diag); /* */ $s = 14; case 14: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			block = _r$5;
			if (block.$length === 0) {
				/* continue loop; */ $s = 11; continue s;
			}
			if (block.$length < 4 || block.$length > 10) {
				/* continue loop; */ $s = 11; continue s;
			}
			_ref$3 = block;
			_i$3 = 0;
			while (true) {
				if (!(_i$3 < _ref$3.$length)) { break; }
				pos$4 = $clone(((_i$3 < 0 || _i$3 >= _ref$3.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$3.$array[_ref$3.$offset + _i$3]), position);
				d.SetCell($clone(pos$4, position), 1);
				cells = cells + (1) >> 0;
				_i$3++;
			}
			digs = digs + (1) >> 0;
		/* } */ $s = 11; continue; case 12:
		g.Dungeon = d;
		$r = g.PutDoors(10); /* */ $s = 15; case 15: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return true;
		/* */ } return; } if ($f === undefined) { $f = { $blk: game.ptr.prototype.RunCellularAutomataCave }; } $f._entry = _entry; $f._entry$1 = _entry$1; $f._i = _i; $f._i$1 = _i$1; $f._i$2 = _i$2; $f._i$3 = _i$3; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._ref = _ref; $f._ref$1 = _ref$1; $f._ref$2 = _ref$2; $f._ref$3 = _ref$3; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.area = area; $f.block = block; $f.bufm = bufm; $f.c = c; $f.c1 = c1; $f.c2 = c2; $f.cells = cells; $f.conn = conn; $f.count = count; $f.d = d; $f.diag = diag; $f.digs = digs; $f.g = g; $f.h = h; $f.i = i; $f.i$1 = i$1; $f.i$2 = i$2; $f.i$3 = i$3; $f.i$4 = i$4; $f.j = j; $f.max = max; $f.ncount = ncount; $f.pos = pos; $f.pos$1 = pos$1; $f.pos$2 = pos$2; $f.pos$3 = pos$3; $f.pos$4 = pos$4; $f.r = r; $f.w = w; $f.winner = winner; $f.$s = $s; $f.$r = $r; return $f;
	};
	game.prototype.RunCellularAutomataCave = function(h, w) { return this.$val.RunCellularAutomataCave(h, w); };
	game.ptr.prototype.GenCellularAutomataCaveMap = function(h, w) {
		var _r, count, g, h, w, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; count = $f.count; g = $f.g; h = $f.h; w = $f.w; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		g = this;
		count = 0;
		/* while (true) { */ case 1:
			count = count + (1) >> 0;
			if (count > 100) {
				$panic(new $String("genCellularAutomataCaveMap"));
			}
			_r = g.RunCellularAutomataCave(h, w); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			/* */ if (_r) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (_r) { */ case 3:
				/* break; */ $s = 2; continue;
			/* } */ case 4:
		/* } */ $s = 1; continue; case 2:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: game.ptr.prototype.GenCellularAutomataCaveMap }; } $f._r = _r; $f.count = count; $f.g = g; $f.h = h; $f.w = w; $f.$s = $s; $f.$r = $r; return $f;
	};
	game.prototype.GenCellularAutomataCaveMap = function(h, w) { return this.$val.GenCellularAutomataCaveMap(h, w); };
	game.ptr.prototype.Foliage = function(h, w) {
		var _i, _i$1, _i$2, _key, _r, _ref, _ref$1, _ref$2, area, bufm, c, c1, c2, d, fungus, g, h, i, i$1, i$2, j, pos, pos$1, r, w, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _i$1 = $f._i$1; _i$2 = $f._i$2; _key = $f._key; _r = $f._r; _ref = $f._ref; _ref$1 = $f._ref$1; _ref$2 = $f._ref$2; area = $f.area; bufm = $f.bufm; c = $f.c; c1 = $f.c1; c2 = $f.c2; d = $f.d; fungus = $f.fungus; g = $f.g; h = $f.h; i = $f.i; i$1 = $f.i$1; i$2 = $f.i$2; j = $f.j; pos = $f.pos; pos$1 = $f.pos$1; r = $f.r; w = $f.w; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		g = this;
		d = new dungeon.ptr(sliceType$10.nil);
		d.Cells = $makeSlice(sliceType$10, ($imul(h, w)));
		_ref = d.Cells;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			i = _i;
			_r = RandInt(100); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			r = _r;
			pos = $clone(idxtopos(i), position);
			if (r >= 43) {
				d.SetCell($clone(pos, position), 0);
			} else {
				d.SetCell($clone(pos, position), 1);
			}
			_i++;
		/* } */ $s = 1; continue; case 2:
		area = $makeSlice(sliceType$5, 0, 25);
		i$1 = 0;
		while (true) {
			if (!(i$1 < 6)) { break; }
			bufm = new dungeon.ptr(sliceType$10.nil);
			bufm.Cells = $makeSlice(sliceType$10, ($imul(h, w)));
			$copySlice(bufm.Cells, d.Cells);
			_ref$1 = bufm.Cells;
			_i$1 = 0;
			while (true) {
				if (!(_i$1 < _ref$1.$length)) { break; }
				j = _i$1;
				pos$1 = $clone(idxtopos(j), position);
				c1 = d.WallAreaCount(area, $clone(pos$1, position), 1);
				if (i$1 < 4) {
					if (c1 <= 4) {
						bufm.SetCell($clone(pos$1, position), 1);
					} else {
						bufm.SetCell($clone(pos$1, position), 0);
					}
				}
				if (i$1 === 4) {
					if (c1 > 6) {
						bufm.SetCell($clone(pos$1, position), 0);
					}
				}
				if (i$1 === 5) {
					c2 = d.WallAreaCount(area, $clone(pos$1, position), 2);
					if (c2 < 5 && c1 <= 2) {
						bufm.SetCell($clone(pos$1, position), 1);
					}
				}
				_i$1++;
			}
			d.Cells = bufm.Cells;
			i$1 = i$1 + (1) >> 0;
		}
		fungus = {};
		_ref$2 = d.Cells;
		_i$2 = 0;
		while (true) {
			if (!(_i$2 < _ref$2.$length)) { break; }
			i$2 = _i$2;
			c = $clone(((_i$2 < 0 || _i$2 >= _ref$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$2.$array[_ref$2.$offset + _i$2]), cell);
			if (c.T === 1) {
				_key = $clone(idxtopos(i$2), position); (fungus || $throwRuntimeError("assignment to entry in nil map"))[position.keyFor(_key)] = { k: _key, v: 0 };
			}
			_i$2++;
		}
		$s = -1; return fungus;
		/* */ } return; } if ($f === undefined) { $f = { $blk: game.ptr.prototype.Foliage }; } $f._i = _i; $f._i$1 = _i$1; $f._i$2 = _i$2; $f._key = _key; $f._r = _r; $f._ref = _ref; $f._ref$1 = _ref$1; $f._ref$2 = _ref$2; $f.area = area; $f.bufm = bufm; $f.c = c; $f.c1 = c1; $f.c2 = c2; $f.d = d; $f.fungus = fungus; $f.g = g; $f.h = h; $f.i = i; $f.i$1 = i$1; $f.i$2 = i$2; $f.j = j; $f.pos = pos; $f.pos$1 = pos$1; $f.r = r; $f.w = w; $f.$s = $s; $f.$r = $r; return $f;
	};
	game.prototype.Foliage = function(h, w) { return this.$val.Foliage(h, w); };
	game.ptr.prototype.DoorCandidate = function(pos) {
		var _entry, _entry$1, _entry$2, _entry$3, d, g, pos;
		g = this;
		d = g.Dungeon;
		if (!$clone(pos, position).valid() || !((d.Cell($clone(pos, position)).T === 1))) {
			return false;
		}
		return $clone($clone(pos, position).W(), position).valid() && $clone($clone(pos, position).E(), position).valid() && (d.Cell($clone($clone(pos, position).W(), position)).T === 1) && (d.Cell($clone($clone(pos, position).E(), position)).T === 1) && !(_entry = g.Doors[position.keyFor($clone(pos, position).W())], _entry !== undefined ? _entry.v : false) && !(_entry$1 = g.Doors[position.keyFor($clone(pos, position).E())], _entry$1 !== undefined ? _entry$1.v : false) && (!$clone($clone(pos, position).N(), position).valid() || (d.Cell($clone($clone(pos, position).N(), position)).T === 0)) && (!$clone($clone(pos, position).S(), position).valid() || (d.Cell($clone($clone(pos, position).S(), position)).T === 0)) && (($clone($clone(pos, position).NW(), position).valid() && (d.Cell($clone($clone(pos, position).NW(), position)).T === 1)) || ($clone($clone(pos, position).SW(), position).valid() && (d.Cell($clone($clone(pos, position).SW(), position)).T === 1)) || ($clone($clone(pos, position).NE(), position).valid() && (d.Cell($clone($clone(pos, position).NE(), position)).T === 1)) || ($clone($clone(pos, position).SE(), position).valid() && (d.Cell($clone($clone(pos, position).SE(), position)).T === 1))) || $clone($clone(pos, position).N(), position).valid() && $clone($clone(pos, position).S(), position).valid() && (d.Cell($clone($clone(pos, position).N(), position)).T === 1) && (d.Cell($clone($clone(pos, position).S(), position)).T === 1) && !(_entry$2 = g.Doors[position.keyFor($clone(pos, position).N())], _entry$2 !== undefined ? _entry$2.v : false) && !(_entry$3 = g.Doors[position.keyFor($clone(pos, position).S())], _entry$3 !== undefined ? _entry$3.v : false) && (!$clone($clone(pos, position).E(), position).valid() || (d.Cell($clone($clone(pos, position).E(), position)).T === 0)) && (!$clone($clone(pos, position).W(), position).valid() || (d.Cell($clone($clone(pos, position).W(), position)).T === 0)) && (($clone($clone(pos, position).NW(), position).valid() && (d.Cell($clone($clone(pos, position).NW(), position)).T === 1)) || ($clone($clone(pos, position).SW(), position).valid() && (d.Cell($clone($clone(pos, position).SW(), position)).T === 1)) || ($clone($clone(pos, position).NE(), position).valid() && (d.Cell($clone($clone(pos, position).NE(), position)).T === 1)) || ($clone($clone(pos, position).SE(), position).valid() && (d.Cell($clone($clone(pos, position).SE(), position)).T === 1)));
	};
	game.prototype.DoorCandidate = function(pos) { return this.$val.DoorCandidate(pos); };
	game.ptr.prototype.PutDoors = function(percentage) {
		var _i, _key, _r, _ref, _v, g, i, percentage, pos, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _key = $f._key; _r = $f._r; _ref = $f._ref; _v = $f._v; g = $f.g; i = $f.i; percentage = $f.percentage; pos = $f.pos; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		g = this;
		g.Doors = $makeMap(position.keyFor, []);
		_ref = g.Dungeon.Cells;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			i = _i;
			pos = $clone(idxtopos(i), position);
			if (!(g.DoorCandidate($clone(pos, position)))) { _v = false; $s = 5; continue s; }
			_r = RandInt(100); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_v = _r < percentage; case 5:
			/* */ if (_v) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (_v) { */ case 3:
				_key = $clone(pos, position); (g.Doors || $throwRuntimeError("assignment to entry in nil map"))[position.keyFor(_key)] = { k: _key, v: true };
			/* } */ case 4:
			_i++;
		/* } */ $s = 1; continue; case 2:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: game.ptr.prototype.PutDoors }; } $f._i = _i; $f._key = _key; $f._r = _r; $f._ref = _ref; $f._v = _v; $f.g = g; $f.i = i; $f.percentage = percentage; $f.pos = pos; $f.$s = $s; $f.$r = $r; return $f;
	};
	game.prototype.PutDoors = function(percentage) { return this.$val.PutDoors(percentage); };
	init$1 = function() {
		var $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = gob.Register(new potion(0)); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = gob.Register(new projectile(0)); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = gob.Register(new simpleEvent.ptr(0, 0)); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = gob.Register(new monsterEvent.ptr(0, 0, 0)); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = gob.Register(new cloudEvent.ptr(0, new position.ptr(0, 0), 0)); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = gob.Register(new armour(0)); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = gob.Register(new weapon(0)); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = gob.Register(new shield(0)); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: init$1 }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	game.ptr.prototype.GameSave = function() {
		var _r, data, enc, err, g, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; data = $f.data; enc = $f.enc; err = $f.err; g = $f.g; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		data = [data];
		g = this;
		data[0] = new bytes.Buffer.ptr(sliceType$8.nil, 0, arrayType$2.zero(), 0);
		enc = gob.NewEncoder(data[0]);
		_r = enc.Encode(g); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		err = _r;
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [sliceType$8.nil, err];
		}
		$s = -1; return [data[0].Bytes(), $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: game.ptr.prototype.GameSave }; } $f._r = _r; $f.data = data; $f.enc = enc; $f.err = err; $f.g = g; $f.$s = $s; $f.$r = $r; return $f;
	};
	game.prototype.GameSave = function() { return this.$val.GameSave(); };
	config.ptr.prototype.ConfigSave = function() {
		var _r, c, data, enc, err, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; c = $f.c; data = $f.data; enc = $f.enc; err = $f.err; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		data = [data];
		c = this;
		data[0] = new bytes.Buffer.ptr(sliceType$8.nil, 0, arrayType$2.zero(), 0);
		enc = gob.NewEncoder(data[0]);
		_r = enc.Encode(c); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		err = _r;
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [sliceType$8.nil, err];
		}
		$s = -1; return [data[0].Bytes(), $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: config.ptr.prototype.ConfigSave }; } $f._r = _r; $f.c = c; $f.data = data; $f.enc = enc; $f.err = err; $f.$s = $s; $f.$r = $r; return $f;
	};
	config.prototype.ConfigSave = function() { return this.$val.ConfigSave(); };
	game.ptr.prototype.DecodeGameSave = function(data) {
		var _r, buf, data, dec, err, g, lg, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; buf = $f.buf; data = $f.data; dec = $f.dec; err = $f.err; g = $f.g; lg = $f.lg; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		g = this;
		buf = bytes.NewBuffer(data);
		dec = gob.NewDecoder(buf);
		lg = new game.ptr(ptrType$7.nil, ptrType$8.nil, sliceType$12.nil, sliceType$13.nil, ptrType$10.nil, $ifaceNil, false, false, 0, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, ptrType$1.nil, ptrType$11.nil, false, false, false, false, $ifaceNil, 0, false, sliceType$14.nil, 0, 0, "", sliceType$3.nil, 0, 0, 0, false, 0, false, ptrType$1.nil);
		_r = dec.Decode(lg); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		err = _r;
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [ptrType$3.nil, err];
		}
		$s = -1; return [lg, $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: game.ptr.prototype.DecodeGameSave }; } $f._r = _r; $f.buf = buf; $f.data = data; $f.dec = dec; $f.err = err; $f.g = g; $f.lg = lg; $f.$s = $s; $f.$r = $r; return $f;
	};
	game.prototype.DecodeGameSave = function(data) { return this.$val.DecodeGameSave(data); };
	game.ptr.prototype.DecodeConfigSave = function(data) {
		var _r, buf, c, data, dec, err, g, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; buf = $f.buf; c = $f.c; data = $f.data; dec = $f.dec; err = $f.err; g = $f.g; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		g = this;
		buf = bytes.NewBuffer(data);
		dec = gob.NewDecoder(buf);
		c = new config.ptr(false, false);
		_r = dec.Decode(c); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		err = _r;
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [ptrType$12.nil, err];
		}
		$s = -1; return [c, $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: game.ptr.prototype.DecodeConfigSave }; } $f._r = _r; $f.buf = buf; $f.c = c; $f.data = data; $f.dec = dec; $f.err = err; $f.g = g; $f.$s = $s; $f.$r = $r; return $f;
	};
	game.prototype.DecodeConfigSave = function(data) { return this.$val.DecodeConfigSave(data); };
	eventQueue.prototype.Len = function() {
		var evq;
		evq = this;
		return evq.$length;
	};
	$ptrType(eventQueue).prototype.Len = function() { return this.$get().Len(); };
	eventQueue.prototype.Less = function(i, j) {
		var _r, _r$1, _r$2, _r$3, _v, evq, i, j, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _v = $f._v; evq = $f.evq; i = $f.i; j = $f.j; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		evq = this;
		_r = ((i < 0 || i >= evq.$length) ? ($throwRuntimeError("index out of range"), undefined) : evq.$array[evq.$offset + i]).Event.Rank(); /* */ $s = 2; case 2: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = ((j < 0 || j >= evq.$length) ? ($throwRuntimeError("index out of range"), undefined) : evq.$array[evq.$offset + j]).Event.Rank(); /* */ $s = 3; case 3: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		if (_r < _r$1) { _v = true; $s = 1; continue s; }
		_r$2 = ((i < 0 || i >= evq.$length) ? ($throwRuntimeError("index out of range"), undefined) : evq.$array[evq.$offset + i]).Event.Rank(); /* */ $s = 4; case 4: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_r$3 = ((j < 0 || j >= evq.$length) ? ($throwRuntimeError("index out of range"), undefined) : evq.$array[evq.$offset + j]).Event.Rank(); /* */ $s = 5; case 5: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_v = (_r$2 === _r$3) && ((i < 0 || i >= evq.$length) ? ($throwRuntimeError("index out of range"), undefined) : evq.$array[evq.$offset + i]).Index < ((j < 0 || j >= evq.$length) ? ($throwRuntimeError("index out of range"), undefined) : evq.$array[evq.$offset + j]).Index; case 1:
		$s = -1; return _v;
		/* */ } return; } if ($f === undefined) { $f = { $blk: eventQueue.prototype.Less }; } $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._v = _v; $f.evq = evq; $f.i = i; $f.j = j; $f.$s = $s; $f.$r = $r; return $f;
	};
	$ptrType(eventQueue).prototype.Less = function(i, j) { return this.$get().Less(i, j); };
	eventQueue.prototype.Swap = function(i, j) {
		var _tmp, _tmp$1, evq, i, j;
		evq = this;
		_tmp = $clone(((j < 0 || j >= evq.$length) ? ($throwRuntimeError("index out of range"), undefined) : evq.$array[evq.$offset + j]), iEvent);
		_tmp$1 = $clone(((i < 0 || i >= evq.$length) ? ($throwRuntimeError("index out of range"), undefined) : evq.$array[evq.$offset + i]), iEvent);
		iEvent.copy(((i < 0 || i >= evq.$length) ? ($throwRuntimeError("index out of range"), undefined) : evq.$array[evq.$offset + i]), _tmp);
		iEvent.copy(((j < 0 || j >= evq.$length) ? ($throwRuntimeError("index out of range"), undefined) : evq.$array[evq.$offset + j]), _tmp$1);
	};
	$ptrType(eventQueue).prototype.Swap = function(i, j) { return this.$get().Swap(i, j); };
	$ptrType(eventQueue).prototype.Push = function(x) {
		var evq, no, x;
		evq = this;
		no = $clone($assertType(x, iEvent), iEvent);
		evq.$set($append(evq.$get(), no));
	};
	$ptrType(eventQueue).prototype.Pop = function() {
		var evq, n, no, old, x;
		evq = this;
		old = evq.$get();
		n = old.$length;
		no = $clone((x = n - 1 >> 0, ((x < 0 || x >= old.$length) ? ($throwRuntimeError("index out of range"), undefined) : old.$array[old.$offset + x])), iEvent);
		evq.$set($subslice(old, 0, (n - 1 >> 0)));
		return new no.constructor.elem(no);
	};
	game.ptr.prototype.PushEvent = function(ev) {
		var ev, g, iev, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; ev = $f.ev; g = $f.g; iev = $f.iev; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		g = this;
		iev = new iEvent.ptr(ev, g.EventIndex);
		g.EventIndex = g.EventIndex + (1) >> 0;
		$r = heap.Push(g.Events, new iev.constructor.elem(iev)); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: game.ptr.prototype.PushEvent }; } $f.ev = ev; $f.g = g; $f.iev = iev; $f.$s = $s; $f.$r = $r; return $f;
	};
	game.prototype.PushEvent = function(ev) { return this.$val.PushEvent(ev); };
	game.ptr.prototype.PopIEvent = function() {
		var _r, g, iev, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; g = $f.g; iev = $f.iev; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		g = this;
		_r = heap.Pop(g.Events); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		iev = $clone($assertType(_r, iEvent), iEvent);
		$s = -1; return iev;
		/* */ } return; } if ($f === undefined) { $f = { $blk: game.ptr.prototype.PopIEvent }; } $f._r = _r; $f.g = g; $f.iev = iev; $f.$s = $s; $f.$r = $r; return $f;
	};
	game.prototype.PopIEvent = function() { return this.$val.PopIEvent(); };
	simpleEvent.ptr.prototype.Rank = function() {
		var sev;
		sev = this;
		return sev.ERank;
	};
	simpleEvent.prototype.Rank = function() { return this.$val.Rank(); };
	simpleEvent.ptr.prototype.Renew = function(g, delay) {
		var delay, g, sev, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; delay = $f.delay; g = $f.g; sev = $f.sev; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		sev = this;
		sev.ERank = sev.ERank + (delay) >> 0;
		$r = g.PushEvent(sev); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: simpleEvent.ptr.prototype.Renew }; } $f.delay = delay; $f.g = g; $f.sev = sev; $f.$s = $s; $f.$r = $r; return $f;
	};
	simpleEvent.prototype.Renew = function(g, delay) { return this.$val.Renew(g, delay); };
	simpleEvent.ptr.prototype.Action = function(g) {
		var _1, _entry, _entry$1, _entry$2, _entry$3, _entry$4, _entry$5, _entry$6, _entry$7, _entry$8, _key, _key$1, _key$10, _key$11, _key$12, _key$13, _key$2, _key$3, _key$4, _key$5, _key$6, _key$7, _key$8, _key$9, _q, _q$1, _r, _r$1, _r$2, _r$3, g, sev, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _entry = $f._entry; _entry$1 = $f._entry$1; _entry$2 = $f._entry$2; _entry$3 = $f._entry$3; _entry$4 = $f._entry$4; _entry$5 = $f._entry$5; _entry$6 = $f._entry$6; _entry$7 = $f._entry$7; _entry$8 = $f._entry$8; _key = $f._key; _key$1 = $f._key$1; _key$10 = $f._key$10; _key$11 = $f._key$11; _key$12 = $f._key$12; _key$13 = $f._key$13; _key$2 = $f._key$2; _key$3 = $f._key$3; _key$4 = $f._key$4; _key$5 = $f._key$5; _key$6 = $f._key$6; _key$7 = $f._key$7; _key$8 = $f._key$8; _key$9 = $f._key$9; _q = $f._q; _q$1 = $f._q$1; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; g = $f.g; sev = $f.sev; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		sev = this;
			_1 = sev.EAction;
			/* */ if (_1 === (0)) { $s = 2; continue; }
			/* */ if (_1 === (1)) { $s = 3; continue; }
			/* */ if (_1 === (2)) { $s = 4; continue; }
			/* */ if (_1 === (3)) { $s = 5; continue; }
			/* */ if (_1 === (4)) { $s = 6; continue; }
			/* */ if (_1 === (5)) { $s = 7; continue; }
			/* */ if (_1 === (6)) { $s = 8; continue; }
			/* */ if (_1 === (7)) { $s = 9; continue; }
			/* */ if (_1 === (8)) { $s = 10; continue; }
			/* */ if (_1 === (9)) { $s = 11; continue; }
			/* */ if (_1 === (10)) { $s = 12; continue; }
			/* */ if (_1 === (11)) { $s = 13; continue; }
			/* */ if (_1 === (12)) { $s = 14; continue; }
			/* */ if (_1 === (13)) { $s = 15; continue; }
			/* */ if (_1 === (14)) { $s = 16; continue; }
			/* */ $s = 17; continue;
			/* if (_1 === (0)) { */ case 2:
				$r = g.ComputeNoise(); /* */ $s = 18; case 18: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				g.LogNextTick = g.LogIndex;
				_r = g.AutoPlayer(sev); /* */ $s = 19; case 19: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				g.AutoNext = _r;
				if (g.AutoNext) {
					$s = -1; return;
				}
				_r$1 = g.ui.HandlePlayerTurn(g, sev); /* */ $s = 20; case 20: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				g.Quit = _r$1;
				if (g.Quit) {
					$s = -1; return;
				}
				$s = 17; continue;
			/* } else if (_1 === (1)) { */ case 3:
				$r = g.HealPlayer(sev); /* */ $s = 21; case 21: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 17; continue;
			/* } else if (_1 === (2)) { */ case 4:
				$r = g.MPRegen(sev); /* */ $s = 22; case 22: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 17; continue;
			/* } else if (_1 === (3)) { */ case 5:
				$r = g.Teleportation(sev); /* */ $s = 23; case 23: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				_key = 7; (g.Player.Statuses || $throwRuntimeError("assignment to entry in nil map"))[status.keyFor(_key)] = { k: _key, v: 0 };
				$s = 17; continue;
			/* } else if (_1 === (4)) { */ case 6:
				_key$1 = 0; (g.Player.Statuses || $throwRuntimeError("assignment to entry in nil map"))[status.keyFor(_key$1)] = { k: _key$1, v: 0 };
				_key$2 = 1; (g.Player.Statuses || $throwRuntimeError("assignment to entry in nil map"))[status.keyFor(_key$2)] = { k: _key$2, v: 1 };
				_key$3 = 2; (g.Player.Statuses || $throwRuntimeError("assignment to entry in nil map"))[status.keyFor(_key$3)] = { k: _key$3, v: 1 };
				g.Player.HP = g.Player.HP - (((_q = ($imul(10, g.Player.HP)) / Max(g.Player.HPMax(), g.Player.HP), (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")))) >> 0;
				g.PrintStyled("You are no longer berserk.", 5);
				_r$2 = RandInt(40); /* */ $s = 24; case 24: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				$r = g.PushEvent(new simpleEvent.ptr((sev.Rank() + 90 >> 0) + _r$2 >> 0, 5)); /* */ $s = 25; case 25: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				_r$3 = RandInt(60); /* */ $s = 26; case 26: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				$r = g.PushEvent(new simpleEvent.ptr((sev.Rank() + 270 >> 0) + _r$3 >> 0, 6)); /* */ $s = 27; case 27: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 17; continue;
			/* } else if (_1 === (5)) { */ case 7:
				g.PrintStyled("You feel no longer slow.", 5);
				_key$4 = 1; (g.Player.Statuses || $throwRuntimeError("assignment to entry in nil map"))[status.keyFor(_key$4)] = { k: _key$4, v: 0 };
				$s = 17; continue;
			/* } else if (_1 === (6)) { */ case 8:
				g.PrintStyled("You feel no longer exhausted.", 5);
				_key$5 = 2; (g.Player.Statuses || $throwRuntimeError("assignment to entry in nil map"))[status.keyFor(_key$5)] = { k: _key$5, v: 0 };
				$s = 17; continue;
			/* } else if (_1 === (7)) { */ case 9:
				_key$6 = 3; (g.Player.Statuses || $throwRuntimeError("assignment to entry in nil map"))[status.keyFor(_key$6)] = { k: _key$6, v: (_entry = g.Player.Statuses[status.keyFor(3)], _entry !== undefined ? _entry.v : 0) - (1) >> 0 };
				if ((_entry$1 = g.Player.Statuses[status.keyFor(3)], _entry$1 !== undefined ? _entry$1.v : 0) === 0) {
					g.PrintStyled("You feel no longer speedy.", 5);
				}
				$s = 17; continue;
			/* } else if (_1 === (8)) { */ case 10:
				_key$7 = 4; (g.Player.Statuses || $throwRuntimeError("assignment to entry in nil map"))[status.keyFor(_key$7)] = { k: _key$7, v: (_entry$2 = g.Player.Statuses[status.keyFor(4)], _entry$2 !== undefined ? _entry$2.v : 0) - (1) >> 0 };
				if ((_entry$3 = g.Player.Statuses[status.keyFor(4)], _entry$3 !== undefined ? _entry$3.v : 0) === 0) {
					g.PrintStyled("You feel no longer agile.", 5);
				}
				$s = 17; continue;
			/* } else if (_1 === (9)) { */ case 11:
				_key$8 = 5; (g.Player.Statuses || $throwRuntimeError("assignment to entry in nil map"))[status.keyFor(_key$8)] = { k: _key$8, v: (_entry$4 = g.Player.Statuses[status.keyFor(5)], _entry$4 !== undefined ? _entry$4.v : 0) - (1) >> 0 };
				g.Player.HP = g.Player.HP - (((_q$1 = ($imul(10, g.Player.HP)) / Max(g.Player.HPMax(), g.Player.HP), (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero")))) >> 0;
				if ((_entry$5 = g.Player.Statuses[status.keyFor(5)], _entry$5 !== undefined ? _entry$5.v : 0) === 0) {
					g.PrintStyled("You feel no longer attached to the ground.", 5);
				}
				$s = 17; continue;
			/* } else if (_1 === (10)) { */ case 12:
				g.PrintStyled("You feel no longer confused.", 5);
				_key$9 = 6; (g.Player.Statuses || $throwRuntimeError("assignment to entry in nil map"))[status.keyFor(_key$9)] = { k: _key$9, v: 0 };
				$s = 17; continue;
			/* } else if (_1 === (11)) { */ case 13:
				g.PrintStyled("You feel no longer sick.", 5);
				_key$10 = 8; (g.Player.Statuses || $throwRuntimeError("assignment to entry in nil map"))[status.keyFor(_key$10)] = { k: _key$10, v: 0 };
				$s = 17; continue;
			/* } else if (_1 === (12)) { */ case 14:
				g.PrintStyled("You manage to free your shield from the projectile.", 5);
				_key$11 = 9; (g.Player.Statuses || $throwRuntimeError("assignment to entry in nil map"))[status.keyFor(_key$11)] = { k: _key$11, v: 0 };
				$s = 17; continue;
			/* } else if (_1 === (13)) { */ case 15:
				_key$12 = 10; (g.Player.Statuses || $throwRuntimeError("assignment to entry in nil map"))[status.keyFor(_key$12)] = { k: _key$12, v: (_entry$6 = g.Player.Statuses[status.keyFor(10)], _entry$6 !== undefined ? _entry$6.v : 0) - (1) >> 0 };
				if ((_entry$7 = g.Player.Statuses[status.keyFor(10)], _entry$7 !== undefined ? _entry$7.v : 0) === 0) {
					g.PrintStyled("Your equipment is now free from acid.", 5);
				}
				$s = 17; continue;
			/* } else if (_1 === (14)) { */ case 16:
				_key$13 = 12; (g.Player.Statuses || $throwRuntimeError("assignment to entry in nil map"))[status.keyFor(_key$13)] = { k: _key$13, v: 0 };
				if ((_entry$8 = g.Player.Statuses[status.keyFor(12)], _entry$8 !== undefined ? _entry$8.v : 0) === 0) {
					g.PrintStyled("You feel no longer like an earth dragon.", 5);
				}
			/* } */ case 17:
		case 1:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: simpleEvent.ptr.prototype.Action }; } $f._1 = _1; $f._entry = _entry; $f._entry$1 = _entry$1; $f._entry$2 = _entry$2; $f._entry$3 = _entry$3; $f._entry$4 = _entry$4; $f._entry$5 = _entry$5; $f._entry$6 = _entry$6; $f._entry$7 = _entry$7; $f._entry$8 = _entry$8; $f._key = _key; $f._key$1 = _key$1; $f._key$10 = _key$10; $f._key$11 = _key$11; $f._key$12 = _key$12; $f._key$13 = _key$13; $f._key$2 = _key$2; $f._key$3 = _key$3; $f._key$4 = _key$4; $f._key$5 = _key$5; $f._key$6 = _key$6; $f._key$7 = _key$7; $f._key$8 = _key$8; $f._key$9 = _key$9; $f._q = _q; $f._q$1 = _q$1; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f.g = g; $f.sev = sev; $f.$s = $s; $f.$r = $r; return $f;
	};
	simpleEvent.prototype.Action = function(g) { return this.$val.Action(g); };
	monsterEvent.ptr.prototype.Rank = function() {
		var mev;
		mev = this;
		return mev.ERank;
	};
	monsterEvent.prototype.Rank = function() { return this.$val.Rank(); };
	monsterEvent.ptr.prototype.Action = function(g) {
		var _1, _key, _key$1, g, mev, mons, mons$1, mons$2, mons$3, x, x$1, x$2, x$3, x$4, x$5, x$6, x$7, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _key = $f._key; _key$1 = $f._key$1; g = $f.g; mev = $f.mev; mons = $f.mons; mons$1 = $f.mons$1; mons$2 = $f.mons$2; mons$3 = $f.mons$3; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; x$6 = $f.x$6; x$7 = $f.x$7; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		mev = this;
			_1 = mev.EAction;
			/* */ if (_1 === (0)) { $s = 2; continue; }
			/* */ if (_1 === (1)) { $s = 3; continue; }
			/* */ if (_1 === (2)) { $s = 4; continue; }
			/* */ if (_1 === (3)) { $s = 5; continue; }
			/* */ $s = 6; continue;
			/* if (_1 === (0)) { */ case 2:
				mons = (x = g.Monsters, x$1 = mev.NMons, ((x$1 < 0 || x$1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + x$1]));
				/* */ if (mons.Exists()) { $s = 7; continue; }
				/* */ $s = 8; continue;
				/* if (mons.Exists()) { */ case 7:
					$r = mons.HandleTurn(g, mev); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 8:
				$s = 6; continue;
			/* } else if (_1 === (1)) { */ case 3:
				mons$1 = (x$2 = g.Monsters, x$3 = mev.NMons, ((x$3 < 0 || x$3 >= x$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + x$3]));
				/* */ if (mons$1.Exists()) { $s = 10; continue; }
				/* */ $s = 11; continue;
				/* if (mons$1.Exists()) { */ case 10:
					$r = mons$1.Heal(g, mev); /* */ $s = 12; case 12: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 11:
				$s = 6; continue;
			/* } else if (_1 === (2)) { */ case 4:
				mons$2 = (x$4 = g.Monsters, x$5 = mev.NMons, ((x$5 < 0 || x$5 >= x$4.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$4.$array[x$4.$offset + x$5]));
				/* */ if (mons$2.Exists()) { $s = 13; continue; }
				/* */ $s = 14; continue;
				/* if (mons$2.Exists()) { */ case 13:
					_key = 0; (mons$2.Statuses || $throwRuntimeError("assignment to entry in nil map"))[monsterStatus.keyFor(_key)] = { k: _key, v: 0 };
					$r = g.Printf("The %s is no longer confused.", new sliceType$7([new monsterKind(mons$2.Kind)])); /* */ $s = 15; case 15: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 14:
				$s = 6; continue;
			/* } else if (_1 === (3)) { */ case 5:
				mons$3 = (x$6 = g.Monsters, x$7 = mev.NMons, ((x$7 < 0 || x$7 >= x$6.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$6.$array[x$6.$offset + x$7]));
				if (mons$3.Exists()) {
					_key$1 = 1; (mons$3.Statuses || $throwRuntimeError("assignment to entry in nil map"))[monsterStatus.keyFor(_key$1)] = { k: _key$1, v: 0 };
				}
			/* } */ case 6:
		case 1:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: monsterEvent.ptr.prototype.Action }; } $f._1 = _1; $f._key = _key; $f._key$1 = _key$1; $f.g = g; $f.mev = mev; $f.mons = mons; $f.mons$1 = mons$1; $f.mons$2 = mons$2; $f.mons$3 = mons$3; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.x$6 = x$6; $f.x$7 = x$7; $f.$s = $s; $f.$r = $r; return $f;
	};
	monsterEvent.prototype.Action = function(g) { return this.$val.Action(g); };
	monsterEvent.ptr.prototype.Renew = function(g, delay) {
		var delay, g, mev, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; delay = $f.delay; g = $f.g; mev = $f.mev; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		mev = this;
		mev.ERank = mev.ERank + (delay) >> 0;
		$r = g.PushEvent(mev); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: monsterEvent.ptr.prototype.Renew }; } $f.delay = delay; $f.g = g; $f.mev = mev; $f.$s = $s; $f.$r = $r; return $f;
	};
	monsterEvent.prototype.Renew = function(g, delay) { return this.$val.Renew(g, delay); };
	cloudEvent.ptr.prototype.Rank = function() {
		var cev;
		cev = this;
		return cev.ERank;
	};
	cloudEvent.prototype.Rank = function() { return this.$val.Rank(); };
	cloudEvent.ptr.prototype.Action = function(g) {
		var _1, _entry, _entry$1, _i, _key, _r, _r$1, _r$2, _ref, _tuple, cev, g, ok, pos, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _entry = $f._entry; _entry$1 = $f._entry$1; _i = $f._i; _key = $f._key; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _ref = $f._ref; _tuple = $f._tuple; cev = $f.cev; g = $f.g; ok = $f.ok; pos = $f.pos; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		cev = this;
			_1 = cev.EAction;
			/* */ if (_1 === (0)) { $s = 2; continue; }
			/* */ if (_1 === (1)) { $s = 3; continue; }
			/* */ if (_1 === (2)) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (_1 === (0)) { */ case 2:
				delete g.Clouds[position.keyFor(cev.Pos)];
				$r = g.ComputeLOS(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 5; continue;
			/* } else if (_1 === (1)) { */ case 3:
				if (!(_entry = g.Player.LOS[position.keyFor(cev.Pos)], _entry !== undefined ? _entry.v : false) && (g.Dungeon.Cell($clone(cev.Pos, position)).T === 0)) {
					_key = $clone(cev.Pos, position); (g.UnknownDig || $throwRuntimeError("assignment to entry in nil map"))[position.keyFor(_key)] = { k: _key, v: true };
				} else {
					delete g.TemporalWalls[position.keyFor(cev.Pos)];
				}
				if (g.Dungeon.Cell($clone(cev.Pos, position)).T === 1) {
					/* break; */ $s = 1; continue;
				}
				g.Dungeon.SetCell($clone(cev.Pos, position), 1);
				$r = g.MakeNoise(15, $clone(cev.Pos, position)); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$r = g.Fog($clone(cev.Pos, position), 1, new simpleEvent.ptr(cev.Rank(), 0)); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$r = g.ComputeLOS(); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 5; continue;
			/* } else if (_1 === (2)) { */ case 4:
				_tuple = (_entry$1 = g.Clouds[position.keyFor(cev.Pos)], _entry$1 !== undefined ? [_entry$1.v, true] : [0, false]);
				ok = _tuple[1];
				if (!ok) {
					/* break; */ $s = 1; continue;
				}
				$r = g.BurnCreature($clone(cev.Pos, position), cev); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				_r = RandInt(10); /* */ $s = 13; case 13: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				/* */ if (_r === 0) { $s = 11; continue; }
				/* */ $s = 12; continue;
				/* if (_r === 0) { */ case 11:
					delete g.Clouds[position.keyFor(cev.Pos)];
					$r = g.Fog($clone(cev.Pos, position), 1, new simpleEvent.ptr(cev.Rank(), 0)); /* */ $s = 14; case 14: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$r = g.ComputeLOS(); /* */ $s = 15; case 15: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					/* break; */ $s = 1; continue;
				/* } */ case 12:
				_r$1 = g.Dungeon.FreeNeighbors($clone(cev.Pos, position)); /* */ $s = 16; case 16: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				_ref = _r$1;
				_i = 0;
				/* while (true) { */ case 17:
					/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 18; continue; }
					pos = $clone(((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]), position);
					_r$2 = RandInt(3); /* */ $s = 21; case 21: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
					/* */ if (_r$2 > 0) { $s = 19; continue; }
					/* */ $s = 20; continue;
					/* if (_r$2 > 0) { */ case 19:
						_i++;
						/* continue; */ $s = 17; continue;
					/* } */ case 20:
					$r = g.Burn($clone(pos, position), cev); /* */ $s = 22; case 22: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					_i++;
				/* } */ $s = 17; continue; case 18:
				$r = cev.Renew(g, 10); /* */ $s = 23; case 23: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 5:
		case 1:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: cloudEvent.ptr.prototype.Action }; } $f._1 = _1; $f._entry = _entry; $f._entry$1 = _entry$1; $f._i = _i; $f._key = _key; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._ref = _ref; $f._tuple = _tuple; $f.cev = cev; $f.g = g; $f.ok = ok; $f.pos = pos; $f.$s = $s; $f.$r = $r; return $f;
	};
	cloudEvent.prototype.Action = function(g) { return this.$val.Action(g); };
	game.ptr.prototype.BurnCreature = function(pos, ev) {
		var _arg, _r, _r$1, _r$2, _tuple, damage, ev, g, mons, pos, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _arg = $f._arg; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _tuple = $f._tuple; damage = $f.damage; ev = $f.ev; g = $f.g; mons = $f.mons; pos = $f.pos; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		g = this;
		_tuple = g.MonsterAt($clone(pos, position));
		mons = _tuple[0];
		/* */ if (mons.Exists()) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (mons.Exists()) { */ case 1:
			_r = RandInt(10); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			mons.HP = mons.HP - ((1 + _r >> 0)) >> 0;
			/* */ if (mons.HP <= 0) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (mons.HP <= 0) { */ case 4:
				_r$1 = new monsterKind(mons.Kind).Definite(true); /* */ $s = 7; case 7: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				_arg = new $String(_r$1);
				$r = g.PrintfStyled("%s is killed by the fire.", 2, new sliceType$7([_arg])); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$r = g.HandleKill(mons, ev); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 6; continue;
			/* } else { */ case 5:
				$r = mons.MakeAwareIfHurt(g); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 6:
		/* } */ case 2:
		/* */ if ($equal(pos, g.Player.Pos, position)) { $s = 11; continue; }
		/* */ $s = 12; continue;
		/* if ($equal(pos, g.Player.Pos, position)) { */ case 11:
			_r$2 = RandInt(10); /* */ $s = 13; case 13: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			damage = 1 + _r$2 >> 0;
			g.Player.HP = g.Player.HP - (damage) >> 0;
			$r = g.PrintfStyled("The fire burns you (%d damage).", 3, new sliceType$7([new $Int(damage)])); /* */ $s = 14; case 14: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 12:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: game.ptr.prototype.BurnCreature }; } $f._arg = _arg; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._tuple = _tuple; $f.damage = damage; $f.ev = ev; $f.g = g; $f.mons = mons; $f.pos = pos; $f.$s = $s; $f.$r = $r; return $f;
	};
	game.prototype.BurnCreature = function(pos, ev) { return this.$val.BurnCreature(pos, ev); };
	game.ptr.prototype.Burn = function(pos, ev) {
		var _entry, _entry$1, _entry$2, _entry$3, _entry$4, _key, _key$1, _r, _tuple, _tuple$1, _tuple$2, _tuple$3, ev, g, ok, ok$1, okDoor, okFungus, pos, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _entry = $f._entry; _entry$1 = $f._entry$1; _entry$2 = $f._entry$2; _entry$3 = $f._entry$3; _entry$4 = $f._entry$4; _key = $f._key; _key$1 = $f._key$1; _r = $f._r; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; ev = $f.ev; g = $f.g; ok = $f.ok; ok$1 = $f.ok$1; okDoor = $f.okDoor; okFungus = $f.okFungus; pos = $f.pos; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		g = this;
		_tuple = (_entry = g.Clouds[position.keyFor(pos)], _entry !== undefined ? [_entry.v, true] : [0, false]);
		ok = _tuple[1];
		if (ok) {
			$s = -1; return;
		}
		_tuple$1 = (_entry$1 = g.Fungus[position.keyFor(pos)], _entry$1 !== undefined ? [_entry$1.v, true] : [0, false]);
		okFungus = _tuple$1[1];
		_tuple$2 = (_entry$2 = g.Doors[position.keyFor(pos)], _entry$2 !== undefined ? [_entry$2.v, true] : [false, false]);
		okDoor = _tuple$2[1];
		if (!okFungus && !okDoor) {
			$s = -1; return;
		}
		delete g.Fungus[position.keyFor(pos)];
		_tuple$3 = (_entry$3 = g.Doors[position.keyFor(pos)], _entry$3 !== undefined ? [_entry$3.v, true] : [false, false]);
		ok$1 = _tuple$3[1];
		if (ok$1) {
			delete g.Doors[position.keyFor(pos)];
			g.Print("The door vanishes in flames.");
		}
		_key = $clone(pos, position); (g.Clouds || $throwRuntimeError("assignment to entry in nil map"))[position.keyFor(_key)] = { k: _key, v: 1 };
		if (!(_entry$4 = g.Player.LOS[position.keyFor(pos)], _entry$4 !== undefined ? _entry$4.v : false)) {
			_key$1 = $clone(pos, position); (g.UnknownBurn || $throwRuntimeError("assignment to entry in nil map"))[position.keyFor(_key$1)] = { k: _key$1, v: true };
		}
		_r = ev.Rank(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$r = g.PushEvent(new cloudEvent.ptr(_r + 10 >> 0, $clone(pos, position), 2)); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = g.BurnCreature($clone(pos, position), ev); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: game.ptr.prototype.Burn }; } $f._entry = _entry; $f._entry$1 = _entry$1; $f._entry$2 = _entry$2; $f._entry$3 = _entry$3; $f._entry$4 = _entry$4; $f._key = _key; $f._key$1 = _key$1; $f._r = _r; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f.ev = ev; $f.g = g; $f.ok = ok; $f.ok$1 = ok$1; $f.okDoor = okDoor; $f.okFungus = okFungus; $f.pos = pos; $f.$s = $s; $f.$r = $r; return $f;
	};
	game.prototype.Burn = function(pos, ev) { return this.$val.Burn(pos, ev); };
	cloudEvent.ptr.prototype.Renew = function(g, delay) {
		var cev, delay, g, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; cev = $f.cev; delay = $f.delay; g = $f.g; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		cev = this;
		cev.ERank = cev.ERank + (delay) >> 0;
		$r = g.PushEvent(cev); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: cloudEvent.ptr.prototype.Renew }; } $f.cev = cev; $f.delay = delay; $f.g = g; $f.$s = $s; $f.$r = $r; return $f;
	};
	cloudEvent.prototype.Renew = function(g, delay) { return this.$val.Renew(g, delay); };
	termui.ptr.prototype.ExploreStep = function(g) {
		var _r, g, next, stop, ui, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; g = $f.g; next = $f.next; stop = $f.stop; ui = $f.ui; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		next = [next];
		ui = [ui];
		ui[0] = this;
		next[0] = new $Chan($Bool, 0);
		stop = false;
		$go((function(next, ui) { return function $b() {
			var $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			$r = time.Sleep(new time.Duration(0, 10000000)); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = ui[0].Interrupt(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = -1; return;
			/* */ } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.$s = $s; $f.$r = $r; return $f;
		}; })(next, ui), []);
		$go((function(next, ui) { return function $b() {
			var _r, err, interrupted, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; err = $f.err; interrupted = $f.interrupted; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			_r = ui[0].PressAnyKey(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			err = _r;
			interrupted = !($interfaceIsEqual(err, $ifaceNil));
			$r = $send(next[0], !interrupted); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = -1; return;
			/* */ } return; } if ($f === undefined) { $f = { $blk: $b }; } $f._r = _r; $f.err = err; $f.interrupted = interrupted; $f.$s = $s; $f.$r = $r; return $f;
		}; })(next, ui), []);
		_r = $recv(next[0]); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		stop = _r[0];
		$r = ui[0].DrawDungeonView(g, 0); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return stop;
		/* */ } return; } if ($f === undefined) { $f = { $blk: termui.ptr.prototype.ExploreStep }; } $f._r = _r; $f.g = g; $f.next = next; $f.stop = stop; $f.ui = ui; $f.$s = $s; $f.$r = $r; return $f;
	};
	termui.prototype.ExploreStep = function(g) { return this.$val.ExploreStep(g); };
	game.ptr.prototype.FreeCell = function() {
		var _r, _r$1, _tuple, c, count, d, g, mons, pos, x, y, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; c = $f.c; count = $f.count; d = $f.d; g = $f.g; mons = $f.mons; pos = $f.pos; x = $f.x; y = $f.y; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		g = this;
		d = g.Dungeon;
		count = 0;
		/* while (true) { */ case 1:
			count = count + (1) >> 0;
			if (count > 1000) {
				$panic(new $String("FreeCell"));
			}
			_r = RandInt(79); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			x = _r;
			_r$1 = RandInt(21); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			y = _r$1;
			pos = new position.ptr(x, y);
			c = $clone(d.Cell($clone(pos, position)), cell);
			if (!((c.T === 1))) {
				/* continue; */ $s = 1; continue;
			}
			if (!(g.Player === ptrType$8.nil) && $equal(g.Player.Pos, pos, position)) {
				/* continue; */ $s = 1; continue;
			}
			_tuple = g.MonsterAt($clone(pos, position));
			mons = _tuple[0];
			if (mons.Exists()) {
				/* continue; */ $s = 1; continue;
			}
			$s = -1; return pos;
		/* } */ $s = 1; continue; case 2:
		$s = -1; return new position.ptr(0, 0);
		/* */ } return; } if ($f === undefined) { $f = { $blk: game.ptr.prototype.FreeCell }; } $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f.c = c; $f.count = count; $f.d = d; $f.g = g; $f.mons = mons; $f.pos = pos; $f.x = x; $f.y = y; $f.$s = $s; $f.$r = $r; return $f;
	};
	game.prototype.FreeCell = function() { return this.$val.FreeCell(); };
	game.ptr.prototype.FreeCellForImportantStair = function() {
		var _r, g, pos, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; g = $f.g; pos = $f.pos; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		g = this;
		/* while (true) { */ case 1:
			_r = g.FreeCellForStatic(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			pos = $clone(_r, position);
			if ($clone(pos, position).Distance($clone(g.Player.Pos, position)) > 12) {
				$s = -1; return pos;
			}
		/* } */ $s = 1; continue; case 2:
		$s = -1; return new position.ptr(0, 0);
		/* */ } return; } if ($f === undefined) { $f = { $blk: game.ptr.prototype.FreeCellForImportantStair }; } $f._r = _r; $f.g = g; $f.pos = pos; $f.$s = $s; $f.$r = $r; return $f;
	};
	game.prototype.FreeCellForImportantStair = function() { return this.$val.FreeCellForImportantStair(); };
	game.ptr.prototype.FreeCellForStatic = function() {
		var _entry, _entry$1, _entry$2, _entry$3, _entry$4, _entry$5, _r, _r$1, _tuple, _tuple$1, _tuple$2, c, count, d, g, mons, ok, ok$1, pos, x, y, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _entry = $f._entry; _entry$1 = $f._entry$1; _entry$2 = $f._entry$2; _entry$3 = $f._entry$3; _entry$4 = $f._entry$4; _entry$5 = $f._entry$5; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; c = $f.c; count = $f.count; d = $f.d; g = $f.g; mons = $f.mons; ok = $f.ok; ok$1 = $f.ok$1; pos = $f.pos; x = $f.x; y = $f.y; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		g = this;
		d = g.Dungeon;
		count = 0;
		/* while (true) { */ case 1:
			count = count + (1) >> 0;
			if (count > 1000) {
				$panic(new $String("FreeCellForStatic"));
			}
			_r = RandInt(79); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			x = _r;
			_r$1 = RandInt(21); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			y = _r$1;
			pos = new position.ptr(x, y);
			c = $clone(d.Cell($clone(pos, position)), cell);
			if (!((c.T === 1))) {
				/* continue; */ $s = 1; continue;
			}
			if (!(g.Player === ptrType$8.nil) && $equal(g.Player.Pos, pos, position)) {
				/* continue; */ $s = 1; continue;
			}
			_tuple = g.MonsterAt($clone(pos, position));
			mons = _tuple[0];
			if (mons.Exists()) {
				/* continue; */ $s = 1; continue;
			}
			if ((_entry = g.Doors[position.keyFor(pos)], _entry !== undefined ? _entry.v : false)) {
				/* continue; */ $s = 1; continue;
			}
			if ((_entry$1 = g.Simellas[position.keyFor(pos)], _entry$1 !== undefined ? _entry$1.v : 0) > 0) {
				/* continue; */ $s = 1; continue;
			}
			if (!((_entry$2 = g.Collectables[position.keyFor(pos)], _entry$2 !== undefined ? _entry$2.v : ptrType$4.nil) === ptrType$4.nil)) {
				/* continue; */ $s = 1; continue;
			}
			if ((_entry$3 = g.Stairs[position.keyFor(pos)], _entry$3 !== undefined ? _entry$3.v : false)) {
				/* continue; */ $s = 1; continue;
			}
			_tuple$1 = (_entry$4 = g.Rods[position.keyFor(pos)], _entry$4 !== undefined ? [_entry$4.v, true] : [0, false]);
			ok = _tuple$1[1];
			if (ok) {
				/* continue; */ $s = 1; continue;
			}
			_tuple$2 = (_entry$5 = g.Equipables[position.keyFor(pos)], _entry$5 !== undefined ? [_entry$5.v, true] : [$ifaceNil, false]);
			ok$1 = _tuple$2[1];
			if (ok$1) {
				/* continue; */ $s = 1; continue;
			}
			$s = -1; return pos;
		/* } */ $s = 1; continue; case 2:
		$s = -1; return new position.ptr(0, 0);
		/* */ } return; } if ($f === undefined) { $f = { $blk: game.ptr.prototype.FreeCellForStatic }; } $f._entry = _entry; $f._entry$1 = _entry$1; $f._entry$2 = _entry$2; $f._entry$3 = _entry$3; $f._entry$4 = _entry$4; $f._entry$5 = _entry$5; $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f.c = c; $f.count = count; $f.d = d; $f.g = g; $f.mons = mons; $f.ok = ok; $f.ok$1 = ok$1; $f.pos = pos; $f.x = x; $f.y = y; $f.$s = $s; $f.$r = $r; return $f;
	};
	game.prototype.FreeCellForStatic = function() { return this.$val.FreeCellForStatic(); };
	game.ptr.prototype.FreeCellForMonster = function() {
		var _r, _r$1, _tuple, c, count, d, g, mons, pos, x, y, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; c = $f.c; count = $f.count; d = $f.d; g = $f.g; mons = $f.mons; pos = $f.pos; x = $f.x; y = $f.y; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		g = this;
		d = g.Dungeon;
		count = 0;
		/* while (true) { */ case 1:
			count = count + (1) >> 0;
			if (count > 1000) {
				$panic(new $String("FreeCellForMonster"));
			}
			_r = RandInt(79); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			x = _r;
			_r$1 = RandInt(21); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			y = _r$1;
			pos = new position.ptr(x, y);
			c = $clone(d.Cell($clone(pos, position)), cell);
			if (!((c.T === 1))) {
				/* continue; */ $s = 1; continue;
			}
			if (!(g.Player === ptrType$8.nil) && $clone(g.Player.Pos, position).Distance($clone(pos, position)) < 8) {
				/* continue; */ $s = 1; continue;
			}
			_tuple = g.MonsterAt($clone(pos, position));
			mons = _tuple[0];
			if (mons.Exists()) {
				/* continue; */ $s = 1; continue;
			}
			$s = -1; return pos;
		/* } */ $s = 1; continue; case 2:
		$s = -1; return new position.ptr(0, 0);
		/* */ } return; } if ($f === undefined) { $f = { $blk: game.ptr.prototype.FreeCellForMonster }; } $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f.c = c; $f.count = count; $f.d = d; $f.g = g; $f.mons = mons; $f.pos = pos; $f.x = x; $f.y = y; $f.$s = $s; $f.$r = $r; return $f;
	};
	game.prototype.FreeCellForMonster = function() { return this.$val.FreeCellForMonster(); };
	game.ptr.prototype.FreeCellForBandMonster = function(pos) {
		var _r, _r$1, _r$2, _tuple, count, g, mons, neighbors, pos, r, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _tuple = $f._tuple; count = $f.count; g = $f.g; mons = $f.mons; neighbors = $f.neighbors; pos = $f.pos; r = $f.r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		g = this;
		count = 0;
		/* while (true) { */ case 1:
			count = count + (1) >> 0;
			/* */ if (count > 1000) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (count > 1000) { */ case 3:
				_r = g.FreeCellForMonster(); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				$s = -1; return _r;
			/* } */ case 4:
			_r$1 = g.Dungeon.FreeNeighbors($clone(pos, position)); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			neighbors = _r$1;
			_r$2 = RandInt(neighbors.$length); /* */ $s = 7; case 7: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			r = _r$2;
			position.copy(pos, ((r < 0 || r >= neighbors.$length) ? ($throwRuntimeError("index out of range"), undefined) : neighbors.$array[neighbors.$offset + r]));
			if (!(g.Player === ptrType$8.nil) && $clone(g.Player.Pos, position).Distance($clone(pos, position)) < 8) {
				/* continue; */ $s = 1; continue;
			}
			_tuple = g.MonsterAt($clone(pos, position));
			mons = _tuple[0];
			if (mons.Exists()) {
				/* continue; */ $s = 1; continue;
			}
			$s = -1; return pos;
		/* } */ $s = 1; continue; case 2:
		$s = -1; return new position.ptr(0, 0);
		/* */ } return; } if ($f === undefined) { $f = { $blk: game.ptr.prototype.FreeCellForBandMonster }; } $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._tuple = _tuple; $f.count = count; $f.g = g; $f.mons = mons; $f.neighbors = neighbors; $f.pos = pos; $f.r = r; $f.$s = $s; $f.$r = $r; return $f;
	};
	game.prototype.FreeCellForBandMonster = function(pos) { return this.$val.FreeCellForBandMonster(pos); };
	game.ptr.prototype.FreeForStairs = function() {
		var _entry, _r, _r$1, _tuple, c, count, d, g, ok, pos, x, y, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _entry = $f._entry; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; c = $f.c; count = $f.count; d = $f.d; g = $f.g; ok = $f.ok; pos = $f.pos; x = $f.x; y = $f.y; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		g = this;
		d = g.Dungeon;
		count = 0;
		/* while (true) { */ case 1:
			count = count + (1) >> 0;
			if (count > 1000) {
				$panic(new $String("FreeForStairs"));
			}
			_r = RandInt(79); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			x = _r;
			_r$1 = RandInt(21); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			y = _r$1;
			pos = new position.ptr(x, y);
			c = $clone(d.Cell($clone(pos, position)), cell);
			if (!((c.T === 1))) {
				/* continue; */ $s = 1; continue;
			}
			_tuple = (_entry = g.Collectables[position.keyFor(pos)], _entry !== undefined ? [_entry.v, true] : [ptrType$4.nil, false]);
			ok = _tuple[1];
			if (ok) {
				/* continue; */ $s = 1; continue;
			}
			$s = -1; return pos;
		/* } */ $s = 1; continue; case 2:
		$s = -1; return new position.ptr(0, 0);
		/* */ } return; } if ($f === undefined) { $f = { $blk: game.ptr.prototype.FreeForStairs }; } $f._entry = _entry; $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f.c = c; $f.count = count; $f.d = d; $f.g = g; $f.ok = ok; $f.pos = pos; $f.x = x; $f.y = y; $f.$s = $s; $f.$r = $r; return $f;
	};
	game.prototype.FreeForStairs = function() { return this.$val.FreeForStairs(); };
	game.ptr.prototype.MaxDepth = function() {
		var g;
		g = this;
		return 12;
	};
	game.prototype.MaxDepth = function() { return this.$val.MaxDepth(); };
	game.ptr.prototype.GenDungeon = function() {
		var _1, _r, _r$1, _r$2, g, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; g = $f.g; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		g = this;
		g.Fungus = {};
			_r = RandInt(6); /* */ $s = 2; case 2: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_1 = _r;
			/* */ if (_1 === (0)) { $s = 3; continue; }
			/* */ if (_1 === (1)) { $s = 4; continue; }
			/* */ if (_1 === (2)) { $s = 5; continue; }
			/* */ if (_1 === (3)) { $s = 6; continue; }
			/* */ $s = 7; continue;
			/* if (_1 === (0)) { */ case 3:
				$r = g.GenCaveMap(21, 79); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				_r$1 = g.Foliage(21, 79); /* */ $s = 10; case 10: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				g.Fungus = _r$1;
				$s = 8; continue;
			/* } else if (_1 === (1)) { */ case 4:
				$r = g.GenRoomMap(21, 79); /* */ $s = 11; case 11: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 8; continue;
			/* } else if (_1 === (2)) { */ case 5:
				$r = g.GenCellularAutomataCaveMap(21, 79); /* */ $s = 12; case 12: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				_r$2 = g.Foliage(21, 79); /* */ $s = 13; case 13: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				g.Fungus = _r$2;
				$s = 8; continue;
			/* } else if (_1 === (3)) { */ case 6:
				$r = g.GenCaveMapTree(21, 79); /* */ $s = 14; case 14: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 8; continue;
			/* } else { */ case 7:
				$r = g.GenRuinsMap(21, 79); /* */ $s = 15; case 15: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 8:
		case 1:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: game.ptr.prototype.GenDungeon }; } $f._1 = _1; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.g = g; $f.$s = $s; $f.$r = $r; return $f;
	};
	game.prototype.GenDungeon = function() { return this.$val.GenDungeon(); };
	game.ptr.prototype.InitPlayer = function() {
		var _1, _2, _key, _key$1, _key$2, _key$3, _key$4, _key$5, _key$6, _key$7, _key$8, _r, _r$1, g, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _2 = $f._2; _key = $f._key; _key$1 = $f._key$1; _key$2 = $f._key$2; _key$3 = $f._key$3; _key$4 = $f._key$4; _key$5 = $f._key$5; _key$6 = $f._key$6; _key$7 = $f._key$7; _key$8 = $f._key$8; _r = $f._r; _r$1 = $f._r$1; g = $f.g; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		g = this;
		g.Player = new player.ptr(false, false, new position.ptr(0, 0), 40, 10, false, 0, new position.ptr(0, 0), false, 0, 0, 0, $makeMap(aptitude.keyFor, []), false);
		g.Player.Consumables = $makeMap(consumable.keyFor, [{ k: new potion(0), v: 1 }]);
			_r = RandInt(3); /* */ $s = 2; case 2: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_1 = _r;
			if (_1 === (1)) {
				_key = new projectile(1); (g.Player.Consumables || $throwRuntimeError("assignment to entry in nil map"))[consumable.keyFor(_key)] = { k: _key, v: 1 };
			} else {
				_key$1 = new projectile(0); (g.Player.Consumables || $throwRuntimeError("assignment to entry in nil map"))[consumable.keyFor(_key$1)] = { k: _key$1, v: 2 };
			}
		case 1:
			_r$1 = RandInt(9); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_2 = _r$1;
			if ((_2 === (0)) || (_2 === (1))) {
				_key$2 = new potion(1); (g.Player.Consumables || $throwRuntimeError("assignment to entry in nil map"))[consumable.keyFor(_key$2)] = { k: _key$2, v: 1 };
			} else if ((_2 === (2)) || (_2 === (3))) {
				_key$3 = new potion(2); (g.Player.Consumables || $throwRuntimeError("assignment to entry in nil map"))[consumable.keyFor(_key$3)] = { k: _key$3, v: 1 };
			} else if (_2 === (4)) {
				_key$4 = new potion(4); (g.Player.Consumables || $throwRuntimeError("assignment to entry in nil map"))[consumable.keyFor(_key$4)] = { k: _key$4, v: 1 };
			} else if (_2 === (5)) {
				_key$5 = new potion(5); (g.Player.Consumables || $throwRuntimeError("assignment to entry in nil map"))[consumable.keyFor(_key$5)] = { k: _key$5, v: 1 };
			} else if (_2 === (6)) {
				_key$6 = new potion(8); (g.Player.Consumables || $throwRuntimeError("assignment to entry in nil map"))[consumable.keyFor(_key$6)] = { k: _key$6, v: 1 };
			} else if (_2 === (7)) {
				_key$7 = new potion(9); (g.Player.Consumables || $throwRuntimeError("assignment to entry in nil map"))[consumable.keyFor(_key$7)] = { k: _key$7, v: 1 };
			} else if (_2 === (8)) {
				_key$8 = new potion(10); (g.Player.Consumables || $throwRuntimeError("assignment to entry in nil map"))[consumable.keyFor(_key$8)] = { k: _key$8, v: 1 };
			}
		case 3:
		g.Player.Rods = $makeMap(rod.keyFor, []);
		g.Player.Statuses = $makeMap(status.keyFor, []);
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: game.ptr.prototype.InitPlayer }; } $f._1 = _1; $f._2 = _2; $f._key = _key; $f._key$1 = _key$1; $f._key$2 = _key$2; $f._key$3 = _key$3; $f._key$4 = _key$4; $f._key$5 = _key$5; $f._key$6 = _key$6; $f._key$7 = _key$7; $f._key$8 = _key$8; $f._r = _r; $f._r$1 = _r$1; $f.g = g; $f.$s = $s; $f.$r = $r; return $f;
	};
	game.prototype.InitPlayer = function() { return this.$val.InitPlayer(); };
	game.ptr.prototype.InitLevel = function() {
		var _entry, _entry$1, _i, _i$1, _i$2, _key, _key$1, _keys, _keys$1, _q, _r, _r$1, _r$10, _r$11, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _ref, _ref$1, _ref$2, _tuple, _tuple$1, _v, apt, data, eq, g, i, i$1, i$2, nstairs, ok, ok$1, pos, pos$1, props, r, r$1, rchg, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _entry = $f._entry; _entry$1 = $f._entry$1; _i = $f._i; _i$1 = $f._i$1; _i$2 = $f._i$2; _key = $f._key; _key$1 = $f._key$1; _keys = $f._keys; _keys$1 = $f._keys$1; _q = $f._q; _r = $f._r; _r$1 = $f._r$1; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _ref = $f._ref; _ref$1 = $f._ref$1; _ref$2 = $f._ref$2; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _v = $f._v; apt = $f.apt; data = $f.data; eq = $f.eq; g = $f.g; i = $f.i; i$1 = $f.i$1; i$2 = $f.i$2; nstairs = $f.nstairs; ok = $f.ok; ok$1 = $f.ok$1; pos = $f.pos; pos$1 = $f.pos$1; props = $f.props; r = $f.r; r$1 = $f.r$1; rchg = $f.rchg; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		g = this;
		$r = g.GenDungeon(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ if (g.Depth === 0) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (g.Depth === 0) { */ case 2:
			$r = g.InitPlayer(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			g.GeneratedRods = $makeMap(rod.keyFor, []);
			g.GeneratedEquipables = $makeMap(equipable.keyFor, []);
			g.FoundEquipables = $makeMap(equipable.keyFor, [{ k: new armour(0), v: true }, { k: new weapon(0), v: true }]);
			g.GeneratedBands = $makeMap(monsterBand.keyFor, []);
			g.KilledMons = $makeMap(monsterKind.keyFor, []);
		/* } */ case 3:
		_r = g.FreeCell(); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		position.copy(g.Player.Pos, _r);
		g.UnknownDig = $makeMap(position.keyFor, []);
		g.UnknownBurn = $makeMap(position.keyFor, []);
		g.ExclusionsMap = $makeMap(position.keyFor, []);
		g.TemporalWalls = $makeMap(position.keyFor, []);
		$r = g.GenMonsters(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		g.Collectables = {};
		$r = g.GenCollectables(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		g.Equipables = {};
		_ref = $pkg.EquipablesRepartitionData;
		_i = 0;
		_keys = $keys(_ref);
		/* while (true) { */ case 8:
			/* if (!(_i < _keys.length)) { break; } */ if(!(_i < _keys.length)) { $s = 9; continue; }
			_entry = _ref[_keys[_i]];
			if (_entry === undefined) {
				_i++;
				/* continue; */ $s = 8; continue;
			}
			eq = _entry.k;
			data = $clone(_entry.v, equipableData);
			_tuple = $assertType(eq, weapon, true);
			ok = _tuple[1];
			if (ok) {
				_i++;
				/* continue; */ $s = 8; continue;
			}
			$r = g.GenEquip(eq, $clone(data, equipableData)); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_i++;
		/* } */ $s = 8; continue; case 9:
		$r = g.GenWeapon(); /* */ $s = 11; case 11: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		g.Rods = $makeMap(position.keyFor, []);
		r = ($imul(7, ((g.GeneratedRodsCount() + 1 >> 0)))) - ($imul(2, ((g.Depth + 1 >> 0)))) >> 0;
		if (r < -3) {
			r = 0;
		} else if (r < 2) {
			r = 1;
		}
		_r$1 = RandInt(r); /* */ $s = 14; case 14: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		/* */ if ((_r$1 === 0) && g.GeneratedRodsCount() < 3) { $s = 12; continue; }
		/* */ $s = 13; continue;
		/* if ((_r$1 === 0) && g.GeneratedRodsCount() < 3) { */ case 12:
			$r = g.GenerateRod(); /* */ $s = 15; case 15: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 13:
		r = (($imul(5, g.Player.AptitudeCount())) - g.Depth >> 0) + 2 >> 0;
		if (r < 2) {
			r = 1;
		}
		_r$2 = RandInt(r); /* */ $s = 18; case 18: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		/* */ if ((_r$2 === 0) && g.Depth > 0 && g.Player.AptitudeCount() < 3) { $s = 16; continue; }
		/* */ $s = 17; continue;
		/* if ((_r$2 === 0) && g.Depth > 0 && g.Player.AptitudeCount() < 3) { */ case 16:
			_r$3 = g.RandomApt(); /* */ $s = 19; case 19: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_tuple$1 = _r$3;
			apt = _tuple$1[0];
			ok$1 = _tuple$1[1];
			if (ok$1) {
				g.ApplyAptitude(apt);
			}
		/* } */ case 17:
		g.Stairs = {};
		_r$4 = RandInt(3); /* */ $s = 20; case 20: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		nstairs = 1 + _r$4 >> 0;
		/* */ if (g.Depth === g.MaxDepth()) { $s = 21; continue; }
		/* */ if ((g.Depth === (g.MaxDepth() - 1 >> 0)) && nstairs > 2) { $s = 22; continue; }
		/* */ $s = 23; continue;
		/* if (g.Depth === g.MaxDepth()) { */ case 21:
			nstairs = 1;
			$s = 23; continue;
		/* } else if ((g.Depth === (g.MaxDepth() - 1 >> 0)) && nstairs > 2) { */ case 22:
			_r$5 = RandInt(2); /* */ $s = 24; case 24: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			nstairs = 1 + _r$5 >> 0;
		/* } */ case 23:
		i = 0;
		/* while (true) { */ case 25:
			/* if (!(i < nstairs)) { break; } */ if(!(i < nstairs)) { $s = 26; continue; }
			pos = new position.ptr(0, 0);
			/* */ if (g.Depth > 9) { $s = 27; continue; }
			/* */ $s = 28; continue;
			/* if (g.Depth > 9) { */ case 27:
				_r$6 = g.FreeCellForImportantStair(); /* */ $s = 30; case 30: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
				position.copy(pos, _r$6);
				$s = 29; continue;
			/* } else { */ case 28:
				_r$7 = g.FreeCellForStatic(); /* */ $s = 31; case 31: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
				position.copy(pos, _r$7);
			/* } */ case 29:
			_key = $clone(pos, position); (g.Stairs || $throwRuntimeError("assignment to entry in nil map"))[position.keyFor(_key)] = { k: _key, v: true };
			i = i + (1) >> 0;
		/* } */ $s = 25; continue; case 26:
		g.Simellas = {};
		i$1 = 0;
		/* while (true) { */ case 32:
			/* if (!(i$1 < 5)) { break; } */ if(!(i$1 < 5)) { $s = 33; continue; }
			_r$8 = g.FreeCellForStatic(); /* */ $s = 34; case 34: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
			pos$1 = $clone(_r$8, position);
			_r$9 = RandInt(g.Depth + (_q = ($imul(g.Depth, g.Depth)) / 10, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) >> 0); /* */ $s = 35; case 35: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
			_key$1 = $clone(pos$1, position); (g.Simellas || $throwRuntimeError("assignment to entry in nil map"))[position.keyFor(_key$1)] = { k: _key$1, v: 1 + _r$9 >> 0 };
			i$1 = i$1 + (1) >> 0;
		/* } */ $s = 32; continue; case 33:
		if (g.Depth === 0) {
			g.Print("You're in Hareka's Underground searching for medicinal simellas. Good luck!");
			g.PrintStyled("\xE2\x96\xBA Press ? for help or click on right upper \xE2\x86\x92Menu button.", 4);
		}
		if (g.Depth === g.MaxDepth()) {
			g.PrintStyled("You feel magic in the air. The way out is close.", 4);
		}
		$r = g.ComputeLOS(); /* */ $s = 36; case 36: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = g.MakeMonstersAware(); /* */ $s = 37; case 37: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		if (g.FrundisInLevel()) {
			g.PrintStyled("You hear some faint music\xE2\x80\xA6 \xE2\x99\xAB larilon, larila \xE2\x99\xAB \xE2\x99\xAA", 4);
		}
		_ref$1 = g.Player.Rods;
		_i$1 = 0;
		_keys$1 = $keys(_ref$1);
		/* while (true) { */ case 38:
			/* if (!(_i$1 < _keys$1.length)) { break; } */ if(!(_i$1 < _keys$1.length)) { $s = 39; continue; }
			_entry$1 = _ref$1[_keys$1[_i$1]];
			if (_entry$1 === undefined) {
				_i$1++;
				/* continue; */ $s = 38; continue;
			}
			r$1 = _entry$1.k;
			props = _entry$1.v;
			/* */ if (props.Charge < new rod(r$1).MaxCharge()) { $s = 40; continue; }
			/* */ $s = 41; continue;
			/* if (props.Charge < new rod(r$1).MaxCharge()) { */ case 40:
				_r$10 = RandInt(1 + new rod(r$1).Rate() >> 0); /* */ $s = 42; case 42: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
				rchg = _r$10;
				if (!(rchg === 0)) { _v = false; $s = 45; continue s; }
				_r$11 = RandInt(2); /* */ $s = 46; case 46: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
				_v = _r$11 === 0; case 45:
				/* */ if (_v) { $s = 43; continue; }
				/* */ $s = 44; continue;
				/* if (_v) { */ case 43:
					rchg = rchg + (1) >> 0;
				/* } */ case 44:
				props.Charge = props.Charge + (rchg) >> 0;
			/* } */ case 41:
			if (props.Charge > new rod(r$1).MaxCharge()) {
				props.Charge = new rod(r$1).MaxCharge();
			}
			_i$1++;
		/* } */ $s = 38; continue; case 39:
		g.Clouds = $makeMap(position.keyFor, []);
		/* */ if (g.Depth === 0) { $s = 47; continue; }
		/* */ $s = 48; continue;
		/* if (g.Depth === 0) { */ case 47:
			g.Events = $newDataPointer(new eventQueue([]), ptrType$10);
			$r = heap.Init(g.Events); /* */ $s = 50; case 50: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = g.PushEvent(new simpleEvent.ptr(0, 0)); /* */ $s = 51; case 51: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = g.PushEvent(new simpleEvent.ptr(50, 1)); /* */ $s = 52; case 52: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = g.PushEvent(new simpleEvent.ptr(100, 2)); /* */ $s = 53; case 53: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 49; continue;
		/* } else { */ case 48:
			$r = g.CleanEvents(); /* */ $s = 54; case 54: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 49:
		_ref$2 = g.Monsters;
		_i$2 = 0;
		/* while (true) { */ case 55:
			/* if (!(_i$2 < _ref$2.$length)) { break; } */ if(!(_i$2 < _ref$2.$length)) { $s = 56; continue; }
			i$2 = _i$2;
			$r = g.PushEvent(new monsterEvent.ptr(g.Turn + 1 >> 0, i$2, 0)); /* */ $s = 57; case 57: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = g.PushEvent(new monsterEvent.ptr(g.Turn + 50 >> 0, i$2, 1)); /* */ $s = 58; case 58: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_i$2++;
		/* } */ $s = 55; continue; case 56:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: game.ptr.prototype.InitLevel }; } $f._entry = _entry; $f._entry$1 = _entry$1; $f._i = _i; $f._i$1 = _i$1; $f._i$2 = _i$2; $f._key = _key; $f._key$1 = _key$1; $f._keys = _keys; $f._keys$1 = _keys$1; $f._q = _q; $f._r = _r; $f._r$1 = _r$1; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._ref = _ref; $f._ref$1 = _ref$1; $f._ref$2 = _ref$2; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._v = _v; $f.apt = apt; $f.data = data; $f.eq = eq; $f.g = g; $f.i = i; $f.i$1 = i$1; $f.i$2 = i$2; $f.nstairs = nstairs; $f.ok = ok; $f.ok$1 = ok$1; $f.pos = pos; $f.pos$1 = pos$1; $f.props = props; $f.r = r; $f.r$1 = r$1; $f.rchg = rchg; $f.$s = $s; $f.$r = $r; return $f;
	};
	game.prototype.InitLevel = function() { return this.$val.InitLevel(); };
	game.ptr.prototype.CleanEvents = function() {
		var _r, _ref, evq, g, iev, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _ref = $f._ref; evq = $f.evq; g = $f.g; iev = $f.iev; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		g = this;
		evq = $newDataPointer(new eventQueue([]), ptrType$10);
		/* while (true) { */ case 1:
			/* if (!(g.Events.Len() > 0)) { break; } */ if(!(g.Events.Len() > 0)) { $s = 2; continue; }
			_r = g.PopIEvent(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			iev = $clone(_r, iEvent);
			_ref = iev.Event;
			/* */ if ($assertType(_ref, ptrType$13, true)[1]) { $s = 4; continue; }
			/* */ if ($assertType(_ref, ptrType$14, true)[1]) { $s = 5; continue; }
			/* */ $s = 6; continue;
			/* if ($assertType(_ref, ptrType$13, true)[1]) { */ case 4:
				$s = 7; continue;
			/* } else if ($assertType(_ref, ptrType$14, true)[1]) { */ case 5:
				$s = 7; continue;
			/* } else { */ case 6:
				$r = heap.Push(evq, new iev.constructor.elem(iev)); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 7:
		/* } */ $s = 1; continue; case 2:
		g.Events = evq;
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: game.ptr.prototype.CleanEvents }; } $f._r = _r; $f._ref = _ref; $f.evq = evq; $f.g = g; $f.iev = iev; $f.$s = $s; $f.$r = $r; return $f;
	};
	game.prototype.CleanEvents = function() { return this.$val.CleanEvents(); };
	game.ptr.prototype.StairsSlice = function() {
		var _entry, _i, _keys, _ref, b, g, stairPos, stairs;
		g = this;
		stairs = new sliceType$5([]);
		_ref = g.Stairs;
		_i = 0;
		_keys = $keys(_ref);
		while (true) {
			if (!(_i < _keys.length)) { break; }
			_entry = _ref[_keys[_i]];
			if (_entry === undefined) {
				_i++;
				continue;
			}
			stairPos = $clone(_entry.k, position);
			b = _entry.v;
			if (b && g.Dungeon.Cell($clone(stairPos, position)).Explored) {
				stairs = $append(stairs, stairPos);
			}
			_i++;
		}
		return stairs;
	};
	game.prototype.StairsSlice = function() { return this.$val.StairsSlice(); };
	game.ptr.prototype.GenCollectables = function() {
		var _entry, _i, _key, _keys, _q, _q$1, _q$2, _r, _r$1, _r$2, _r$3, _ref, c, data, g, i, pos, r, rounds, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _entry = $f._entry; _i = $f._i; _key = $f._key; _keys = $f._keys; _q = $f._q; _q$1 = $f._q$1; _q$2 = $f._q$2; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _ref = $f._ref; c = $f.c; data = $f.data; g = $f.g; i = $f.i; pos = $f.pos; r = $f.r; rounds = $f.rounds; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		g = this;
		rounds = 50;
		i = 0;
		/* while (true) { */ case 1:
			/* if (!(i < rounds)) { break; } */ if(!(i < rounds)) { $s = 2; continue; }
			_ref = $pkg.ConsumablesCollectData;
			_i = 0;
			_keys = $keys(_ref);
			/* while (true) { */ case 3:
				/* if (!(_i < _keys.length)) { break; } */ if(!(_i < _keys.length)) { $s = 4; continue; }
				_entry = _ref[_keys[_i]];
				if (_entry === undefined) {
					_i++;
					/* continue; */ $s = 3; continue;
				}
				c = _entry.k;
				data = $clone(_entry.v, collectData);
				r = 0;
				/* */ if (g.CollectableScore >= (_q = ($imul(5, ((g.Depth + 1 >> 0)))) / 3, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"))) { $s = 5; continue; }
				/* */ if (g.CollectableScore < (_q$1 = ($imul(4, ((g.Depth + 1 >> 0)))) / 3, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero"))) { $s = 6; continue; }
				/* */ $s = 7; continue;
				/* if (g.CollectableScore >= (_q = ($imul(5, ((g.Depth + 1 >> 0)))) / 3, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"))) { */ case 5:
					_r = RandInt($imul(($imul(data.rarity, rounds)), 4)); /* */ $s = 9; case 9: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
					r = _r;
					$s = 8; continue;
				/* } else if (g.CollectableScore < (_q$1 = ($imul(4, ((g.Depth + 1 >> 0)))) / 3, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero"))) { */ case 6:
					_r$1 = RandInt((_q$2 = ($imul(data.rarity, rounds)) / 4, (_q$2 === _q$2 && _q$2 !== 1/0 && _q$2 !== -1/0) ? _q$2 >> 0 : $throwRuntimeError("integer divide by zero"))); /* */ $s = 10; case 10: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
					r = _r$1;
					$s = 8; continue;
				/* } else { */ case 7:
					_r$2 = RandInt($imul(data.rarity, rounds)); /* */ $s = 11; case 11: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
					r = _r$2;
				/* } */ case 8:
				/* */ if (r === 0) { $s = 12; continue; }
				/* */ $s = 13; continue;
				/* if (r === 0) { */ case 12:
					g.CollectableScore = g.CollectableScore + (1) >> 0;
					_r$3 = g.FreeCellForStatic(); /* */ $s = 14; case 14: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
					pos = $clone(_r$3, position);
					_key = $clone(pos, position); (g.Collectables || $throwRuntimeError("assignment to entry in nil map"))[position.keyFor(_key)] = { k: _key, v: new collectable.ptr(c, data.quantity) };
				/* } */ case 13:
				_i++;
			/* } */ $s = 3; continue; case 4:
			i = i + (1) >> 0;
		/* } */ $s = 1; continue; case 2:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: game.ptr.prototype.GenCollectables }; } $f._entry = _entry; $f._i = _i; $f._key = _key; $f._keys = _keys; $f._q = _q; $f._q$1 = _q$1; $f._q$2 = _q$2; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._ref = _ref; $f.c = c; $f.data = data; $f.g = g; $f.i = i; $f.pos = pos; $f.r = r; $f.rounds = rounds; $f.$s = $s; $f.$r = $r; return $f;
	};
	game.prototype.GenCollectables = function() { return this.$val.GenCollectables(); };
	game.ptr.prototype.SeenGoodWeapon = function() {
		var _entry, _entry$1, _entry$2, _entry$3, _entry$4, _entry$5, _entry$6, _entry$7, g;
		g = this;
		return (_entry = g.GeneratedEquipables[equipable.keyFor(new weapon(5))], _entry !== undefined ? _entry.v : false) || (_entry$1 = g.GeneratedEquipables[equipable.keyFor(new weapon(6))], _entry$1 !== undefined ? _entry$1.v : false) || (_entry$2 = g.GeneratedEquipables[equipable.keyFor(new weapon(3))], _entry$2 !== undefined ? _entry$2.v : false) || (_entry$3 = g.GeneratedEquipables[equipable.keyFor(new weapon(4))], _entry$3 !== undefined ? _entry$3.v : false) || (_entry$4 = g.GeneratedEquipables[equipable.keyFor(new weapon(1))], _entry$4 !== undefined ? _entry$4.v : false) || (_entry$5 = g.GeneratedEquipables[equipable.keyFor(new weapon(2))], _entry$5 !== undefined ? _entry$5.v : false) || (_entry$6 = g.GeneratedEquipables[equipable.keyFor(new weapon(7))], _entry$6 !== undefined ? _entry$6.v : false) || (_entry$7 = g.GeneratedEquipables[equipable.keyFor(new weapon(8))], _entry$7 !== undefined ? _entry$7.v : false);
	};
	game.prototype.SeenGoodWeapon = function() { return this.$val.SeenGoodWeapon(); };
	game.ptr.prototype.GenWeapon = function() {
		var _entry, _key, _key$1, _r, _r$1, _r$2, _r$3, g, i, n, n$1, pos, r, r$1, wps, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _entry = $f._entry; _key = $f._key; _key$1 = $f._key$1; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; g = $f.g; i = $f.i; n = $f.n; n$1 = $f.n$1; pos = $f.pos; r = $f.r; r$1 = $f.r$1; wps = $f.wps; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		g = this;
		wps = $toNativeArray($kindInt, [0, 1, 2, 3, 4, 5, 6, 7, 8]);
		n = 11;
		if (!g.SeenGoodWeapon()) {
			n = n - (($imul(4, g.Depth))) >> 0;
			if (n < 2) {
				n = 2;
			}
		} else if (!((g.Player.Weapon === 0))) {
			n = $imul(n, (2));
		}
		_r = RandInt(n); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		r = _r;
		/* */ if (!((r === 0)) && !g.SeenGoodWeapon() && g.Depth > 3) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!((r === 0)) && !g.SeenGoodWeapon() && g.Depth > 3) { */ case 2:
			_r$1 = RandInt(n); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			r = _r$1;
		/* } */ case 3:
		if (!((r === 0))) {
			$s = -1; return;
		}
		/* while (true) { */ case 5:
			i = 0;
			/* while (true) { */ case 7:
				/* if (!(i < 9)) { break; } */ if(!(i < 9)) { $s = 8; continue; }
				if ((((i < 0 || i >= wps.length) ? ($throwRuntimeError("index out of range"), undefined) : wps[i]) === 7) && (_entry = g.GeneratedEquipables[equipable.keyFor(new weapon(7))], _entry !== undefined ? _entry.v : false)) {
					$s = -1; return;
				}
				n$1 = 30;
				if (new weapon(((i < 0 || i >= wps.length) ? ($throwRuntimeError("index out of range"), undefined) : wps[i])).TwoHanded() && g.Depth < 3) {
					n$1 = $imul(n$1, (((3 - g.Depth >> 0))));
				}
				if (((i < 0 || i >= wps.length) ? ($throwRuntimeError("index out of range"), undefined) : wps[i]) === 0) {
					n$1 = $imul(n$1, (2));
				}
				_r$2 = RandInt(n$1); /* */ $s = 9; case 9: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				r$1 = _r$2;
				/* */ if (r$1 === 0) { $s = 10; continue; }
				/* */ $s = 11; continue;
				/* if (r$1 === 0) { */ case 10:
					_r$3 = g.FreeCellForStatic(); /* */ $s = 12; case 12: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
					pos = $clone(_r$3, position);
					_key = $clone(pos, position); (g.Equipables || $throwRuntimeError("assignment to entry in nil map"))[position.keyFor(_key)] = { k: _key, v: new weapon(((i < 0 || i >= wps.length) ? ($throwRuntimeError("index out of range"), undefined) : wps[i])) };
					_key$1 = new weapon(((i < 0 || i >= wps.length) ? ($throwRuntimeError("index out of range"), undefined) : wps[i])); (g.GeneratedEquipables || $throwRuntimeError("assignment to entry in nil map"))[equipable.keyFor(_key$1)] = { k: _key$1, v: true };
					/* break loop; */ $s = 6; continue s;
				/* } */ case 11:
				i = i + (1) >> 0;
			/* } */ $s = 7; continue; case 8:
		/* } */ $s = 5; continue; case 6:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: game.ptr.prototype.GenWeapon }; } $f._entry = _entry; $f._key = _key; $f._key$1 = _key$1; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f.g = g; $f.i = i; $f.n = n; $f.n$1 = n$1; $f.pos = pos; $f.r = r; $f.r$1 = r$1; $f.wps = wps; $f.$s = $s; $f.$r = $r; return $f;
	};
	game.prototype.GenWeapon = function() { return this.$val.GenWeapon(); };
	game.ptr.prototype.GenEquip = function(eq, data) {
		var _entry, _entry$1, _key, _key$1, _q, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _ref, data, depthAdjust, eq, g, pos, r, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _entry = $f._entry; _entry$1 = $f._entry$1; _key = $f._key; _key$1 = $f._key$1; _q = $f._q; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _ref = $f._ref; data = $f.data; depthAdjust = $f.depthAdjust; eq = $f.eq; g = $f.g; pos = $f.pos; r = $f.r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		g = this;
		depthAdjust = data.minDepth - g.Depth >> 0;
		r = 0;
		/* */ if (depthAdjust >= 0) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (depthAdjust >= 0) { */ case 1:
			_r = RandInt($imul(($imul(data.rarity, ((depthAdjust + 1 >> 0)))), ((depthAdjust + 1 >> 0)))); /* */ $s = 4; case 4: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			r = _r;
			$s = 3; continue;
		/* } else { */ case 2:
			_ref = eq;
			/* */ if ($assertType(_ref, shield, true)[1]) { $s = 5; continue; }
			/* */ if ($assertType(_ref, armour, true)[1]) { $s = 6; continue; }
			/* */ $s = 7; continue;
			/* if ($assertType(_ref, shield, true)[1]) { */ case 5:
				/* */ if (!(_entry = g.GeneratedEquipables[equipable.keyFor(eq)], _entry !== undefined ? _entry.v : false)) { $s = 9; continue; }
				/* */ $s = 10; continue;
				/* if (!(_entry = g.GeneratedEquipables[equipable.keyFor(eq)], _entry !== undefined ? _entry.v : false)) { */ case 9:
					_r$1 = $clone(data, equipableData).FavorableRoll(-depthAdjust); /* */ $s = 12; case 12: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
					r = _r$1;
					$s = 11; continue;
				/* } else { */ case 10:
					_r$2 = RandInt($imul(data.rarity, 2)); /* */ $s = 13; case 13: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
					r = _r$2;
				/* } */ case 11:
				$s = 8; continue;
			/* } else if ($assertType(_ref, armour, true)[1]) { */ case 6:
				/* */ if (!(_entry$1 = g.GeneratedEquipables[equipable.keyFor(eq)], _entry$1 !== undefined ? _entry$1.v : false) && !($interfaceIsEqual(eq, new armour(0)))) { $s = 14; continue; }
				/* */ $s = 15; continue;
				/* if (!(_entry$1 = g.GeneratedEquipables[equipable.keyFor(eq)], _entry$1 !== undefined ? _entry$1.v : false) && !($interfaceIsEqual(eq, new armour(0)))) { */ case 14:
					_r$3 = $clone(data, equipableData).FavorableRoll(-depthAdjust); /* */ $s = 17; case 17: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
					r = _r$3;
					$s = 16; continue;
				/* } else { */ case 15:
					_r$4 = RandInt((_q = ($imul(5, data.rarity)) / 4, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"))); /* */ $s = 18; case 18: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
					r = _r$4;
				/* } */ case 16:
				$s = 8; continue;
			/* } else { */ case 7:
				$s = -1; return;
			/* } */ case 8:
		/* } */ case 3:
		/* */ if (r === 0) { $s = 19; continue; }
		/* */ $s = 20; continue;
		/* if (r === 0) { */ case 19:
			_r$5 = g.FreeCellForStatic(); /* */ $s = 21; case 21: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			pos = $clone(_r$5, position);
			_key = $clone(pos, position); (g.Equipables || $throwRuntimeError("assignment to entry in nil map"))[position.keyFor(_key)] = { k: _key, v: eq };
			_key$1 = eq; (g.GeneratedEquipables || $throwRuntimeError("assignment to entry in nil map"))[equipable.keyFor(_key$1)] = { k: _key$1, v: true };
		/* } */ case 20:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: game.ptr.prototype.GenEquip }; } $f._entry = _entry; $f._entry$1 = _entry$1; $f._key = _key; $f._key$1 = _key$1; $f._q = _q; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._ref = _ref; $f.data = data; $f.depthAdjust = depthAdjust; $f.eq = eq; $f.g = g; $f.pos = pos; $f.r = r; $f.$s = $s; $f.$r = $r; return $f;
	};
	game.prototype.GenEquip = function(eq, data) { return this.$val.GenEquip(eq, data); };
	game.ptr.prototype.FrundisInLevel = function() {
		var _entry, _i, _keys, _ref, _tuple, eq, g, ok, wp;
		g = this;
		_ref = g.Equipables;
		_i = 0;
		_keys = $keys(_ref);
		while (true) {
			if (!(_i < _keys.length)) { break; }
			_entry = _ref[_keys[_i]];
			if (_entry === undefined) {
				_i++;
				continue;
			}
			eq = _entry.v;
			_tuple = $assertType(eq, weapon, true);
			wp = _tuple[0];
			ok = _tuple[1];
			if (ok && (wp === 7)) {
				return true;
			}
			_i++;
		}
		return false;
	};
	game.prototype.FrundisInLevel = function() { return this.$val.FrundisInLevel(); };
	game.ptr.prototype.Descend = function() {
		var _r, _r$1, g, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; g = $f.g; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		g = this;
		if (g.Depth >= g.MaxDepth()) {
			g.Depth = g.Depth + (1) >> 0;
			$s = -1; return true;
		}
		g.Print("You descend deeper in the dungeon.");
		g.Depth = g.Depth + (1) >> 0;
		_r = g.Ev.Rank(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$r = g.PushEvent(new simpleEvent.ptr(_r, 0)); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = g.InitLevel(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_r$1 = g.Save(); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$1;
		$s = -1; return false;
		/* */ } return; } if ($f === undefined) { $f = { $blk: game.ptr.prototype.Descend }; } $f._r = _r; $f._r$1 = _r$1; $f.g = g; $f.$s = $s; $f.$r = $r; return $f;
	};
	game.prototype.Descend = function() { return this.$val.Descend(); };
	game.ptr.prototype.WizardMode = function() {
		var _key, g;
		g = this;
		g.Wizard = true;
		_key = new potion(3); (g.Player.Consumables || $throwRuntimeError("assignment to entry in nil map"))[consumable.keyFor(_key)] = { k: _key, v: 12 };
		g.PrintStyled("You are now in wizard mode and cannot obtain winner status.", 4);
	};
	game.prototype.WizardMode = function() { return this.$val.WizardMode(); };
	game.ptr.prototype.AutoPlayer = function(ev) {
		var _r, _r$1, _r$10, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _tuple, _v, _v$1, _v$2, err, ev, finished, g, mons, n, sources, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _r$10 = $f._r$10; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _tuple = $f._tuple; _v = $f._v; _v$1 = $f._v$1; _v$2 = $f._v$2; err = $f.err; ev = $f.ev; finished = $f.finished; g = $f.g; mons = $f.mons; n = $f.n; sources = $f.sources; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		g = this;
		/* */ if (g.Resting) { $s = 1; continue; }
		/* */ if (g.Autoexploring) { $s = 2; continue; }
		/* */ if (!(g.AutoTarget === ptrType$1.nil)) { $s = 3; continue; }
		/* */ if (!(g.AutoDir === ptrType$11.nil)) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (g.Resting) { */ case 1:
			/* */ if (g.MonsterInLOS() === ptrType$9.nil && (g.Player.HP < g.Player.HPMax() || g.Player.MP < g.Player.MPMax() || g.Player.HasStatus(2) || g.Player.HasStatus(6) || g.Player.HasStatus(5))) { $s = 6; continue; }
			/* */ $s = 7; continue;
			/* if (g.MonsterInLOS() === ptrType$9.nil && (g.Player.HP < g.Player.HPMax() || g.Player.MP < g.Player.MPMax() || g.Player.HasStatus(2) || g.Player.HasStatus(6) || g.Player.HasStatus(5))) { */ case 6:
				$r = g.WaitTurn(ev); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = -1; return true;
			/* } */ case 7:
			g.Resting = false;
			$s = 5; continue;
		/* } else if (g.Autoexploring) { */ case 2:
			_r = g.ui.ExploreStep(g); /* */ $s = 11; case 11: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			/* */ if (_r) { $s = 9; continue; }
			/* */ $s = 10; continue;
			/* if (_r) { */ case 9:
				g.AutoHalt = true;
			/* } */ case 10:
			mons = g.MonsterInLOS();
				/* */ if (mons.Exists()) { $s = 13; continue; }
				/* */ if (g.AutoHalt) { $s = 14; continue; }
				/* */ $s = 15; continue;
				/* if (mons.Exists()) { */ case 13:
					g.Print("You stop exploring.");
					$s = 16; continue;
				/* } else if (g.AutoHalt) { */ case 14:
					g.Print("You stop exploring.");
					$s = 16; continue;
				/* } else { */ case 15:
					n = ptrType$1.nil;
					finished = false;
					/* */ if (g.DijkstraMapRebuild) { $s = 17; continue; }
					/* */ $s = 18; continue;
					/* if (g.DijkstraMapRebuild) { */ case 17:
						_r$1 = g.AllExplored(); /* */ $s = 21; case 21: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
						/* */ if (_r$1) { $s = 19; continue; }
						/* */ $s = 20; continue;
						/* if (_r$1) { */ case 19:
							g.Print("You finished exploring.");
							/* break; */ $s = 12; continue;
						/* } */ case 20:
						_r$2 = g.AutoexploreSources(); /* */ $s = 22; case 22: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
						sources = _r$2;
						$r = g.BuildAutoexploreMap(sources); /* */ $s = 23; case 23: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					/* } */ case 18:
					_r$3 = g.NextAuto(); /* */ $s = 24; case 24: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
					_tuple = _r$3;
					n = _tuple[0];
					finished = _tuple[1];
					if (finished) {
						n = ptrType$1.nil;
					}
					if (!(finished)) { _v = false; $s = 28; continue s; }
					_r$4 = g.AllExplored(); /* */ $s = 29; case 29: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
					_v = _r$4; case 28:
					/* */ if (_v) { $s = 25; continue; }
					/* */ if (n === ptrType$1.nil) { $s = 26; continue; }
					/* */ $s = 27; continue;
					/* if (_v) { */ case 25:
						g.Print("You finished exploring.");
						$s = 27; continue;
					/* } else if (n === ptrType$1.nil) { */ case 26:
						g.Print("You could not reach safely some places.");
					/* } */ case 27:
					/* */ if (!(n === ptrType$1.nil)) { $s = 30; continue; }
					/* */ $s = 31; continue;
					/* if (!(n === ptrType$1.nil)) { */ case 30:
						_r$5 = g.MovePlayer($clone(n, position), ev); /* */ $s = 32; case 32: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
						err = _r$5;
						/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 33; continue; }
						/* */ $s = 34; continue;
						/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 33:
							_r$6 = err.Error(); /* */ $s = 35; case 35: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
							$r = g.Print(_r$6); /* */ $s = 36; case 36: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
							/* break; */ $s = 12; continue;
						/* } */ case 34:
						$s = -1; return true;
					/* } */ case 31:
				/* } */ case 16:
			case 12:
			g.Autoexploring = false;
			$s = 5; continue;
		/* } else if (!(g.AutoTarget === ptrType$1.nil)) { */ case 3:
			_r$7 = g.ui.ExploreStep(g); /* */ $s = 40; case 40: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
			if (!(!_r$7)) { _v$1 = false; $s = 39; continue s; }
			_r$8 = g.MoveToTarget(ev); /* */ $s = 41; case 41: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
			_v$1 = _r$8; case 39:
			/* */ if (_v$1) { $s = 37; continue; }
			/* */ $s = 38; continue;
			/* if (_v$1) { */ case 37:
				$s = -1; return true;
			/* } */ case 38:
			$s = 5; continue;
		/* } else if (!(g.AutoDir === ptrType$11.nil)) { */ case 4:
			_r$9 = g.ui.ExploreStep(g); /* */ $s = 45; case 45: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
			if (!(!_r$9)) { _v$2 = false; $s = 44; continue s; }
			_r$10 = g.AutoToDir(ev); /* */ $s = 46; case 46: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
			_v$2 = _r$10; case 44:
			/* */ if (_v$2) { $s = 42; continue; }
			/* */ $s = 43; continue;
			/* if (_v$2) { */ case 42:
				$s = -1; return true;
			/* } */ case 43:
		/* } */ case 5:
		$s = -1; return false;
		/* */ } return; } if ($f === undefined) { $f = { $blk: game.ptr.prototype.AutoPlayer }; } $f._r = _r; $f._r$1 = _r$1; $f._r$10 = _r$10; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._tuple = _tuple; $f._v = _v; $f._v$1 = _v$1; $f._v$2 = _v$2; $f.err = err; $f.ev = ev; $f.finished = finished; $f.g = g; $f.mons = mons; $f.n = n; $f.sources = sources; $f.$s = $s; $f.$r = $r; return $f;
	};
	game.prototype.AutoPlayer = function(ev) { return this.$val.AutoPlayer(ev); };
	game.ptr.prototype.EventLoop = function() {
		var _arg, _r, _r$1, _r$2, err, ev, g, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _arg = $f._arg; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; err = $f.err; ev = $f.ev; g = $f.g; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		g = this;
		/* while (true) { */ case 1:
			/* */ if (g.Player.HP <= 0) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (g.Player.HP <= 0) { */ case 3:
				/* */ if (g.Wizard) { $s = 5; continue; }
				/* */ $s = 6; continue;
				/* if (g.Wizard) { */ case 5:
					g.Player.HP = g.Player.HPMax();
					$s = 7; continue;
				/* } else { */ case 6:
					err = g.RemoveSaveFile();
					/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 8; continue; }
					/* */ $s = 9; continue;
					/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 8:
						_r = err.Error(); /* */ $s = 10; case 10: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
						_arg = new $String(_r);
						$r = g.PrintfStyled("Error removing save file: %v", 6, new sliceType$7([_arg])); /* */ $s = 11; case 11: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					/* } */ case 9:
					$r = g.ui.Death(g); /* */ $s = 12; case 12: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					/* break loop; */ $s = 2; continue s;
				/* } */ case 7:
			/* } */ case 4:
			if (g.Events.Len() === 0) {
				/* break loop; */ $s = 2; continue s;
			}
			_r$1 = g.PopIEvent(); /* */ $s = 13; case 13: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			ev = _r$1.Event;
			_r$2 = ev.Rank(); /* */ $s = 14; case 14: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			g.Turn = _r$2;
			g.Ev = ev;
			$r = ev.Action(g); /* */ $s = 15; case 15: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			if (g.AutoNext) {
				/* continue loop; */ $s = 1; continue s;
			}
			if (g.Quit) {
				/* break loop; */ $s = 2; continue s;
			}
		/* } */ $s = 1; continue; case 2:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: game.ptr.prototype.EventLoop }; } $f._arg = _arg; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.err = err; $f.ev = ev; $f.g = g; $f.$s = $s; $f.$r = $r; return $f;
	};
	game.prototype.EventLoop = function() { return this.$val.EventLoop(); };
	game.ptr.prototype.UseConsumable = function(c) {
		var _arg, _entry, _entry$1, _key, _r, _r$1, c, g, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _arg = $f._arg; _entry = $f._entry; _entry$1 = $f._entry$1; _key = $f._key; _r = $f._r; _r$1 = $f._r$1; c = $f.c; g = $f.g; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		g = this;
		_key = c; (g.Player.Consumables || $throwRuntimeError("assignment to entry in nil map"))[consumable.keyFor(_key)] = { k: _key, v: (_entry = g.Player.Consumables[consumable.keyFor(c)], _entry !== undefined ? _entry.v : 0) - (1) >> 0 };
		_r = c.String(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = Indefinite(_r, false); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_arg = new $String(_r$1);
		$r = g.StoryPrintf("You used %s.", new sliceType$7([_arg])); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		if ((_entry$1 = g.Player.Consumables[consumable.keyFor(c)], _entry$1 !== undefined ? _entry$1.v : 0) <= 0) {
			delete g.Player.Consumables[consumable.keyFor(c)];
		}
		g.FairAction();
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: game.ptr.prototype.UseConsumable }; } $f._arg = _arg; $f._entry = _entry; $f._entry$1 = _entry$1; $f._key = _key; $f._r = _r; $f._r$1 = _r$1; $f.c = c; $f.g = g; $f.$s = $s; $f.$r = $r; return $f;
	};
	game.prototype.UseConsumable = function(c) { return this.$val.UseConsumable(c); };
	potion.prototype.String = function() {
		var _1, p, text;
		text = "";
		p = this.$val;
		text = "potion";
		_1 = p;
		if (_1 === (0)) {
			text = text + (" of heal wounds");
		} else if (_1 === (1)) {
			text = text + (" of teleportation");
		} else if (_1 === (3)) {
			text = text + (" of descent");
		} else if (_1 === (6)) {
			text = text + (" of magic mapping");
		} else if (_1 === (7)) {
			text = text + (" of refill magic");
		} else if (_1 === (2)) {
			text = text + (" of berserk");
		} else if (_1 === (4)) {
			text = text + (" of swiftness");
		} else if (_1 === (5)) {
			text = text + (" of lignification");
		} else if (_1 === (8)) {
			text = text + (" of walls");
		} else if (_1 === (9)) {
			text = text + (" of controlled blink");
		} else if (_1 === (10)) {
			text = text + (" of digging");
		}
		text = text;
		return text;
	};
	$ptrType(potion).prototype.String = function() { return new potion(this.$get()).String(); };
	potion.prototype.Plural = function() {
		var p, text;
		text = "";
		p = this.$val;
		text = new potion(p).String();
		return text;
	};
	$ptrType(potion).prototype.Plural = function() { return new potion(this.$get()).Plural(); };
	potion.prototype.Desc = function() {
		var _1, _r, p, text, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _r = $f._r; p = $f.p; text = $f.text; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		text = "";
		p = this.$val;
		_1 = p;
		if (_1 === (0)) {
			text = "heals you a good deal.";
		} else if (_1 === (1)) {
			text = "teleports you away after a short delay.";
		} else if (_1 === (3)) {
			text = "makes you go deeper in the Underground.";
		} else if (_1 === (6)) {
			text = "shows you the map.";
		} else if (_1 === (7)) {
			text = "replenishes your magical reserves.";
		} else if (_1 === (2)) {
			text = "makes you enter a crazy rage, temporarily making you faster, stronger and healthier. You cannot drink potions while berserk, and afterwards it leaves you slow and exhausted.";
		} else if (_1 === (4)) {
			text = "makes you move faster and better at avoiding blows for a short time.";
		} else if (_1 === (5)) {
			text = "makes you more resistant to physical blows, but you are attached to the ground while the effect lasts.";
		} else if (_1 === (8)) {
			text = "replaces free cells around you with temporal walls.";
		} else if (_1 === (9)) {
			text = "makes you blink to a targeted cell in your line of sight.";
		} else if (_1 === (10)) {
			text = "makes you dig walls like an earth dragon.";
		}
		_r = fmt.Sprintf("The %s %s", new sliceType$7([new potion(p), new $String(text)])); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		text = _r;
		$s = -1; return text;
		/* */ } return; } if ($f === undefined) { $f = { $blk: potion.prototype.Desc }; } $f._1 = _1; $f._r = _r; $f.p = p; $f.text = text; $f.$s = $s; $f.$r = $r; return $f;
	};
	$ptrType(potion).prototype.Desc = function() { return new potion(this.$get()).Desc(); };
	potion.prototype.Letter = function() {
		var p;
		p = this.$val;
		return 33;
	};
	$ptrType(potion).prototype.Letter = function() { return new potion(this.$get()).Letter(); };
	potion.prototype.Int = function() {
		var p;
		p = this.$val;
		return ((p >> 0));
	};
	$ptrType(potion).prototype.Int = function() { return new potion(this.$get()).Int(); };
	potion.prototype.Use = function(g, ev) {
		var _1, _entry, _r, _r$1, _r$10, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _tuple, err, ev, g, ok, p, quant, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _entry = $f._entry; _r = $f._r; _r$1 = $f._r$1; _r$10 = $f._r$10; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _tuple = $f._tuple; err = $f.err; ev = $f.ev; g = $f.g; ok = $f.ok; p = $f.p; quant = $f.quant; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this.$val;
		_tuple = (_entry = g.Player.Consumables[consumable.keyFor(new potion(p))], _entry !== undefined ? [_entry.v, true] : [0, false]);
		quant = _tuple[0];
		ok = _tuple[1];
		if (!ok || quant <= 0) {
			$s = -1; return errors.New("no such consumable: " + new potion(p).String());
		}
		if (g.Player.HasStatus(8)) {
			$s = -1; return errors.New("You cannot drink potions while sick.");
		}
		if (g.Player.HasStatus(0)) {
			$s = -1; return errors.New("You cannot drink potions while berserk.");
		}
		err = $ifaceNil;
			_1 = p;
			/* */ if (_1 === (0)) { $s = 2; continue; }
			/* */ if (_1 === (1)) { $s = 3; continue; }
			/* */ if (_1 === (2)) { $s = 4; continue; }
			/* */ if (_1 === (3)) { $s = 5; continue; }
			/* */ if (_1 === (4)) { $s = 6; continue; }
			/* */ if (_1 === (5)) { $s = 7; continue; }
			/* */ if (_1 === (6)) { $s = 8; continue; }
			/* */ if (_1 === (7)) { $s = 9; continue; }
			/* */ if (_1 === (8)) { $s = 10; continue; }
			/* */ if (_1 === (9)) { $s = 11; continue; }
			/* */ if (_1 === (10)) { $s = 12; continue; }
			/* */ $s = 13; continue;
			/* if (_1 === (0)) { */ case 2:
				_r = g.QuaffHealWounds(ev); /* */ $s = 14; case 14: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				err = _r;
				$s = 13; continue;
			/* } else if (_1 === (1)) { */ case 3:
				_r$1 = g.QuaffTeleportation(ev); /* */ $s = 15; case 15: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				err = _r$1;
				$s = 13; continue;
			/* } else if (_1 === (2)) { */ case 4:
				_r$2 = g.QuaffBerserk(ev); /* */ $s = 16; case 16: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				err = _r$2;
				$s = 13; continue;
			/* } else if (_1 === (3)) { */ case 5:
				_r$3 = g.QuaffDescent(ev); /* */ $s = 17; case 17: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				err = _r$3;
				$s = 13; continue;
			/* } else if (_1 === (4)) { */ case 6:
				_r$4 = g.QuaffSwiftness(ev); /* */ $s = 18; case 18: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				err = _r$4;
				$s = 13; continue;
			/* } else if (_1 === (5)) { */ case 7:
				_r$5 = g.QuaffLignification(ev); /* */ $s = 19; case 19: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
				err = _r$5;
				$s = 13; continue;
			/* } else if (_1 === (6)) { */ case 8:
				_r$6 = g.QuaffMagicMapping(ev); /* */ $s = 20; case 20: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
				err = _r$6;
				$s = 13; continue;
			/* } else if (_1 === (7)) { */ case 9:
				_r$7 = g.QuaffMagic(ev); /* */ $s = 21; case 21: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
				err = _r$7;
				$s = 13; continue;
			/* } else if (_1 === (8)) { */ case 10:
				_r$8 = g.QuaffWallPotion(ev); /* */ $s = 22; case 22: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
				err = _r$8;
				$s = 13; continue;
			/* } else if (_1 === (9)) { */ case 11:
				_r$9 = g.QuaffCBlinkPotion(ev); /* */ $s = 23; case 23: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
				err = _r$9;
				$s = 13; continue;
			/* } else if (_1 === (10)) { */ case 12:
				_r$10 = g.QuaffDigPotion(ev); /* */ $s = 24; case 24: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
				err = _r$10;
			/* } */ case 13:
		case 1:
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
		}
		$r = ev.Renew(g, 5); /* */ $s = 25; case 25: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = g.UseConsumable(new potion(p)); /* */ $s = 26; case 26: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = g.ui.DrinkingPotionAnimation(g); /* */ $s = 27; case 27: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: potion.prototype.Use }; } $f._1 = _1; $f._entry = _entry; $f._r = _r; $f._r$1 = _r$1; $f._r$10 = _r$10; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._tuple = _tuple; $f.err = err; $f.ev = ev; $f.g = g; $f.ok = ok; $f.p = p; $f.quant = quant; $f.$s = $s; $f.$r = $r; return $f;
	};
	$ptrType(potion).prototype.Use = function(g, ev) { return new potion(this.$get()).Use(g, ev); };
	game.ptr.prototype.QuaffTeleportation = function(ev) {
		var _key, _r, _r$1, delay, ev, g, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _key = $f._key; _r = $f._r; _r$1 = $f._r$1; delay = $f.delay; ev = $f.ev; g = $f.g; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		g = this;
		if (g.Player.HasStatus(5)) {
			$s = -1; return errors.New("You cannot teleport while lignified.");
		}
		if (g.Player.HasStatus(7)) {
			$s = -1; return errors.New("You already quaffed a potion of teleportation.");
		}
		_r = RandInt(30); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		delay = 20 + _r >> 0;
		_key = 7; (g.Player.Statuses || $throwRuntimeError("assignment to entry in nil map"))[status.keyFor(_key)] = { k: _key, v: 1 };
		_r$1 = ev.Rank(); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$r = g.PushEvent(new simpleEvent.ptr(_r$1 + delay >> 0, 3)); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = g.Printf("You quaff a %s. You feel unstable.", new sliceType$7([new potion(1)])); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: game.ptr.prototype.QuaffTeleportation }; } $f._key = _key; $f._r = _r; $f._r$1 = _r$1; $f.delay = delay; $f.ev = ev; $f.g = g; $f.$s = $s; $f.$r = $r; return $f;
	};
	game.prototype.QuaffTeleportation = function(ev) { return this.$val.QuaffTeleportation(ev); };
	game.ptr.prototype.QuaffBerserk = function(ev) {
		var _key, _r, _r$1, ev, g, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _key = $f._key; _r = $f._r; _r$1 = $f._r$1; ev = $f.ev; g = $f.g; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		g = this;
		if (g.Player.HasStatus(2)) {
			$s = -1; return errors.New("You are too exhausted to berserk.");
		}
		_key = 0; (g.Player.Statuses || $throwRuntimeError("assignment to entry in nil map"))[status.keyFor(_key)] = { k: _key, v: 1 };
		_r = ev.Rank(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = RandInt(20); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$r = g.PushEvent(new simpleEvent.ptr((_r + 65 >> 0) + _r$1 >> 0, 4)); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = g.Printf("You quaff a %s. You feel a sudden urge to kill things.", new sliceType$7([new potion(2)])); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		g.Player.HP = g.Player.HP + (10) >> 0;
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: game.ptr.prototype.QuaffBerserk }; } $f._key = _key; $f._r = _r; $f._r$1 = _r$1; $f.ev = ev; $f.g = g; $f.$s = $s; $f.$r = $r; return $f;
	};
	game.prototype.QuaffBerserk = function(ev) { return this.$val.QuaffBerserk(ev); };
	game.ptr.prototype.QuaffHealWounds = function(ev) {
		var _q, ev, g, hp, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _q = $f._q; ev = $f.ev; g = $f.g; hp = $f.hp; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		g = this;
		hp = g.Player.HP;
		g.Player.HP = g.Player.HP + ((_q = ($imul(2, g.Player.HPMax())) / 3, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"))) >> 0;
		if (g.Player.HP > g.Player.HPMax()) {
			g.Player.HP = g.Player.HPMax();
		}
		$r = g.Printf("You quaff a %s (%d -> %d).", new sliceType$7([new potion(0), new $Int(hp), new $Int(g.Player.HP)])); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: game.ptr.prototype.QuaffHealWounds }; } $f._q = _q; $f.ev = ev; $f.g = g; $f.hp = hp; $f.$s = $s; $f.$r = $r; return $f;
	};
	game.prototype.QuaffHealWounds = function(ev) { return this.$val.QuaffHealWounds(ev); };
	game.ptr.prototype.QuaffMagic = function(ev) {
		var _q, ev, g, mp, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _q = $f._q; ev = $f.ev; g = $f.g; mp = $f.mp; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		g = this;
		mp = g.Player.MP;
		g.Player.MP = g.Player.MP + ((_q = ($imul(2, g.Player.MPMax())) / 3, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"))) >> 0;
		if (g.Player.MP > g.Player.MPMax()) {
			g.Player.MP = g.Player.MPMax();
		}
		$r = g.Printf("You quaff the %s (%d -> %d).", new sliceType$7([new potion(7), new $Int(mp), new $Int(g.Player.MP)])); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: game.ptr.prototype.QuaffMagic }; } $f._q = _q; $f.ev = ev; $f.g = g; $f.mp = mp; $f.$s = $s; $f.$r = $r; return $f;
	};
	game.prototype.QuaffMagic = function(ev) { return this.$val.QuaffMagic(ev); };
	game.ptr.prototype.QuaffDescent = function(ev) {
		var _r, ev, g, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; ev = $f.ev; g = $f.g; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		g = this;
		if (g.Player.HasStatus(5)) {
			$s = -1; return errors.New("You cannot descend while lignified.");
		}
		if (g.Depth >= g.MaxDepth()) {
			$s = -1; return errors.New("You cannot descend more!");
		}
		$r = g.Printf("You quaff the %s. You feel yourself falling through the ground.", new sliceType$7([new potion(3)])); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		g.Depth = g.Depth + (1) >> 0;
		$r = g.InitLevel(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_r = g.Save(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r;
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: game.ptr.prototype.QuaffDescent }; } $f._r = _r; $f.ev = ev; $f.g = g; $f.$s = $s; $f.$r = $r; return $f;
	};
	game.prototype.QuaffDescent = function(ev) { return this.$val.QuaffDescent(ev); };
	game.ptr.prototype.QuaffSwiftness = function(ev) {
		var _entry, _entry$1, _key, _key$1, _r, _r$1, _r$2, _r$3, _r$4, ev, g, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _entry = $f._entry; _entry$1 = $f._entry$1; _key = $f._key; _key$1 = $f._key$1; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; ev = $f.ev; g = $f.g; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		g = this;
		/* */ if (g.Player.HasStatus(3) && g.Player.HasStatus(4)) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (g.Player.HasStatus(3) && g.Player.HasStatus(4)) { */ case 1:
			_r = fmt.Errorf("You already quaffed a %s potion.", new sliceType$7([new potion(4)])); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$s = -1; return _r;
		/* } */ case 2:
		_key = 3; (g.Player.Statuses || $throwRuntimeError("assignment to entry in nil map"))[status.keyFor(_key)] = { k: _key, v: (_entry = g.Player.Statuses[status.keyFor(3)], _entry !== undefined ? _entry.v : 0) + (1) >> 0 };
		_r$1 = ev.Rank(); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$2 = RandInt(20); /* */ $s = 5; case 5: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		$r = g.PushEvent(new simpleEvent.ptr((_r$1 + 85 >> 0) + _r$2 >> 0, 7)); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_key$1 = 4; (g.Player.Statuses || $throwRuntimeError("assignment to entry in nil map"))[status.keyFor(_key$1)] = { k: _key$1, v: (_entry$1 = g.Player.Statuses[status.keyFor(4)], _entry$1 !== undefined ? _entry$1.v : 0) + (1) >> 0 };
		_r$3 = ev.Rank(); /* */ $s = 7; case 7: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_r$4 = RandInt(20); /* */ $s = 8; case 8: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		$r = g.PushEvent(new simpleEvent.ptr((_r$3 + 85 >> 0) + _r$4 >> 0, 8)); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = g.Printf("You quaff the %s. You feel speedy and agile.", new sliceType$7([new potion(4)])); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: game.ptr.prototype.QuaffSwiftness }; } $f._entry = _entry; $f._entry$1 = _entry$1; $f._key = _key; $f._key$1 = _key$1; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f.ev = ev; $f.g = g; $f.$s = $s; $f.$r = $r; return $f;
	};
	game.prototype.QuaffSwiftness = function(ev) { return this.$val.QuaffSwiftness(ev); };
	game.ptr.prototype.QuaffDigPotion = function(ev) {
		var _key, _r, _r$1, ev, g, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _key = $f._key; _r = $f._r; _r$1 = $f._r$1; ev = $f.ev; g = $f.g; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		g = this;
		if (g.Player.HasStatus(12)) {
			$s = -1; return errors.New("You are already digging.");
		}
		_key = 12; (g.Player.Statuses || $throwRuntimeError("assignment to entry in nil map"))[status.keyFor(_key)] = { k: _key, v: 1 };
		_r = ev.Rank(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = RandInt(20); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$r = g.PushEvent(new simpleEvent.ptr((_r + 75 >> 0) + _r$1 >> 0, 14)); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = g.Printf("You quaff the %s. You feel like an earth dragon.", new sliceType$7([new potion(10)])); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: game.ptr.prototype.QuaffDigPotion }; } $f._key = _key; $f._r = _r; $f._r$1 = _r$1; $f.ev = ev; $f.g = g; $f.$s = $s; $f.$r = $r; return $f;
	};
	game.prototype.QuaffDigPotion = function(ev) { return this.$val.QuaffDigPotion(ev); };
	game.ptr.prototype.QuaffLignification = function(ev) {
		var _key, _r, _r$1, ev, g, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _key = $f._key; _r = $f._r; _r$1 = $f._r$1; ev = $f.ev; g = $f.g; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		g = this;
		if (g.Player.HasStatus(5)) {
			$s = -1; return errors.New("You are already lignified.");
		}
		_key = 5; (g.Player.Statuses || $throwRuntimeError("assignment to entry in nil map"))[status.keyFor(_key)] = { k: _key, v: 1 };
		_r = ev.Rank(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = RandInt(100); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$r = g.PushEvent(new simpleEvent.ptr((_r + 150 >> 0) + _r$1 >> 0, 9)); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = g.Printf("You quaff the %s. You feel rooted to the ground.", new sliceType$7([new potion(5)])); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		g.Player.HP = g.Player.HP + (10) >> 0;
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: game.ptr.prototype.QuaffLignification }; } $f._key = _key; $f._r = _r; $f._r$1 = _r$1; $f.ev = ev; $f.g = g; $f.$s = $s; $f.$r = $r; return $f;
	};
	game.prototype.QuaffLignification = function(ev) { return this.$val.QuaffLignification(ev); };
	game.ptr.prototype.QuaffMagicMapping = function(ev) {
		var _entry, _entry$1, _entry$2, _entry$3, _i, _i$1, _i$2, _i$3, _key, _keys, _r, _ref, _ref$1, _ref$2, _ref$3, _v, c, cdists, d, dist, dist$1, dists, dp, draw, ev, g, i, i$1, pos, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _entry = $f._entry; _entry$1 = $f._entry$1; _entry$2 = $f._entry$2; _entry$3 = $f._entry$3; _i = $f._i; _i$1 = $f._i$1; _i$2 = $f._i$2; _i$3 = $f._i$3; _key = $f._key; _keys = $f._keys; _r = $f._r; _ref = $f._ref; _ref$1 = $f._ref$1; _ref$2 = $f._ref$2; _ref$3 = $f._ref$3; _v = $f._v; c = $f.c; cdists = $f.cdists; d = $f.d; dist = $f.dist; dist$1 = $f.dist$1; dists = $f.dists; dp = $f.dp; draw = $f.draw; ev = $f.ev; g = $f.g; i = $f.i; i$1 = $f.i$1; pos = $f.pos; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		g = this;
		dp = new dungeonPath.ptr(g.Dungeon, arrayType$1.zero());
		$r = g.AutoExploreDijkstra(dp, new sliceType$6([$clone(g.Player.Pos, position).idx()])); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		cdists = {};
		_ref = $pkg.DijkstraMapCache;
		_i = 0;
		while (true) {
			if (!(_i < 1659)) { break; }
			i = _i;
			dist = ((_i < 0 || _i >= _ref.length) ? ($throwRuntimeError("index out of range"), undefined) : _ref[_i]);
			_key = dist; (cdists || $throwRuntimeError("assignment to entry in nil map"))[$Int.keyFor(_key)] = { k: _key, v: $append((_entry = cdists[$Int.keyFor(dist)], _entry !== undefined ? _entry.v : sliceType$6.nil), i) };
			_i++;
		}
		dists = sliceType$6.nil;
		_ref$1 = cdists;
		_i$1 = 0;
		_keys = $keys(_ref$1);
		while (true) {
			if (!(_i$1 < _keys.length)) { break; }
			_entry$1 = _ref$1[_keys[_i$1]];
			if (_entry$1 === undefined) {
				_i$1++;
				continue;
			}
			dist$1 = _entry$1.k;
			dists = $append(dists, dist$1);
			_i$1++;
		}
		$r = sort.Ints(dists); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = g.ui.DrawDungeonView(g, 0); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_ref$2 = dists;
		_i$2 = 0;
		/* while (true) { */ case 4:
			/* if (!(_i$2 < _ref$2.$length)) { break; } */ if(!(_i$2 < _ref$2.$length)) { $s = 5; continue; }
			d = ((_i$2 < 0 || _i$2 >= _ref$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$2.$array[_ref$2.$offset + _i$2]);
			draw = false;
			_ref$3 = (_entry$2 = cdists[$Int.keyFor(d)], _entry$2 !== undefined ? _entry$2.v : sliceType$6.nil);
			_i$3 = 0;
			/* while (true) { */ case 6:
				/* if (!(_i$3 < _ref$3.$length)) { break; } */ if(!(_i$3 < _ref$3.$length)) { $s = 7; continue; }
				i$1 = ((_i$3 < 0 || _i$3 >= _ref$3.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$3.$array[_ref$3.$offset + _i$3]);
				pos = $clone(idxtopos(i$1), position);
				c = $clone(g.Dungeon.Cell($clone(pos, position)), cell);
				if (c.T === 1) { _v = true; $s = 10; continue s; }
				_r = g.Dungeon.HasFreeNeighbor($clone(pos, position)); /* */ $s = 11; case 11: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				_v = _r; case 10:
				/* */ if ((_v) && !c.Explored) { $s = 8; continue; }
				/* */ $s = 9; continue;
				/* if ((_v) && !c.Explored) { */ case 8:
					g.Dungeon.SetExplored($clone(pos, position));
					draw = true;
				/* } */ case 9:
				_i$3++;
			/* } */ $s = 6; continue; case 7:
			/* */ if (draw) { $s = 12; continue; }
			/* */ $s = 13; continue;
			/* if (draw) { */ case 12:
				$r = g.ui.MagicMappingAnimation(g, (_entry$3 = cdists[$Int.keyFor(d)], _entry$3 !== undefined ? _entry$3.v : sliceType$6.nil)); /* */ $s = 14; case 14: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 13:
			_i$2++;
		/* } */ $s = 4; continue; case 5:
		$r = g.Printf("You quaff the %s. You feel wiser.", new sliceType$7([new potion(6)])); /* */ $s = 15; case 15: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: game.ptr.prototype.QuaffMagicMapping }; } $f._entry = _entry; $f._entry$1 = _entry$1; $f._entry$2 = _entry$2; $f._entry$3 = _entry$3; $f._i = _i; $f._i$1 = _i$1; $f._i$2 = _i$2; $f._i$3 = _i$3; $f._key = _key; $f._keys = _keys; $f._r = _r; $f._ref = _ref; $f._ref$1 = _ref$1; $f._ref$2 = _ref$2; $f._ref$3 = _ref$3; $f._v = _v; $f.c = c; $f.cdists = cdists; $f.d = d; $f.dist = dist; $f.dist$1 = dist$1; $f.dists = dists; $f.dp = dp; $f.draw = draw; $f.ev = ev; $f.g = g; $f.i = i; $f.i$1 = i$1; $f.pos = pos; $f.$s = $s; $f.$r = $r; return $f;
	};
	game.prototype.QuaffMagicMapping = function(ev) { return this.$val.QuaffMagicMapping(ev); };
	game.ptr.prototype.QuaffWallPotion = function(ev) {
		var _i, _key, _r, _r$1, _r$2, _ref, _tuple, ev, g, mons, neighbors, pos, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _key = $f._key; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _ref = $f._ref; _tuple = $f._tuple; ev = $f.ev; g = $f.g; mons = $f.mons; neighbors = $f.neighbors; pos = $f.pos; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		g = this;
		_r = g.Dungeon.FreeNeighbors($clone(g.Player.Pos, position)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		neighbors = _r;
		_ref = neighbors;
		_i = 0;
		/* while (true) { */ case 2:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 3; continue; }
			pos = $clone(((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]), position);
			_tuple = g.MonsterAt($clone(pos, position));
			mons = _tuple[0];
			/* */ if (mons.Exists()) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (mons.Exists()) { */ case 4:
				_i++;
				/* continue; */ $s = 2; continue;
			/* } */ case 5:
			$r = g.MakeNoise(15, $clone(pos, position)); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			g.Dungeon.SetCell($clone(pos, position), 0);
			delete g.Clouds[position.keyFor(g.Player.Target)];
			if (!(g.TemporalWalls === false)) {
				_key = $clone(pos, position); (g.TemporalWalls || $throwRuntimeError("assignment to entry in nil map"))[position.keyFor(_key)] = { k: _key, v: true };
			}
			_r$1 = ev.Rank(); /* */ $s = 7; case 7: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_r$2 = RandInt(50); /* */ $s = 8; case 8: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			$r = g.PushEvent(new cloudEvent.ptr((_r$1 + 200 >> 0) + _r$2 >> 0, $clone(pos, position), 1)); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_i++;
		/* } */ $s = 2; continue; case 3:
		$r = g.Printf("You quaff the %s. You feel surrounded by temporal walls.", new sliceType$7([new potion(8)])); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = g.ComputeLOS(); /* */ $s = 11; case 11: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: game.ptr.prototype.QuaffWallPotion }; } $f._i = _i; $f._key = _key; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._ref = _ref; $f._tuple = _tuple; $f.ev = ev; $f.g = g; $f.mons = mons; $f.neighbors = neighbors; $f.pos = pos; $f.$s = $s; $f.$r = $r; return $f;
	};
	game.prototype.QuaffWallPotion = function(ev) { return this.$val.QuaffWallPotion(ev); };
	game.ptr.prototype.QuaffCBlinkPotion = function(ev) {
		var _r, err, ev, g, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; err = $f.err; ev = $f.ev; g = $f.g; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		g = this;
		if (g.Player.HasStatus(5)) {
			$s = -1; return errors.New("You cannot blink while lignified.");
		}
		_r = g.ui.ChooseTarget(g, new chooser.ptr(false, false, false, false, true, false, false)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		err = _r;
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
		}
		position.copy(g.Player.Pos, g.Player.Target);
		$r = g.Printf("You quaff the %s. You blink.", new sliceType$7([new potion(9)])); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = g.CollectGround(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = g.ComputeLOS(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = g.MakeMonstersAware(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: game.ptr.prototype.QuaffCBlinkPotion }; } $f._r = _r; $f.err = err; $f.ev = ev; $f.g = g; $f.$s = $s; $f.$r = $r; return $f;
	};
	game.prototype.QuaffCBlinkPotion = function(ev) { return this.$val.QuaffCBlinkPotion(ev); };
	projectile.prototype.String = function() {
		var _1, p, text;
		text = "";
		p = this.$val;
		_1 = p;
		if (_1 === (0)) {
			text = "dart of confusion";
		} else if (_1 === (1)) {
			text = "explosive magara";
		}
		text = text;
		return text;
	};
	$ptrType(projectile).prototype.String = function() { return new projectile(this.$get()).String(); };
	projectile.prototype.Plural = function() {
		var _1, p, text;
		text = "";
		p = this.$val;
		_1 = p;
		if (_1 === (0)) {
			text = "darts of confusion";
		} else if (_1 === (1)) {
			text = "explosive magaras";
		}
		text = text;
		return text;
	};
	$ptrType(projectile).prototype.Plural = function() { return new projectile(this.$get()).Plural(); };
	projectile.prototype.Desc = function() {
		var _1, _r, p, text, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _r = $f._r; p = $f.p; text = $f.text; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		text = "";
		p = this.$val;
		_1 = p;
		if (_1 === (0)) {
			text = "can be silently thrown to confuse foes, dealing up to 7 damage. Confused monsters cannot move diagonally.";
		} else if (_1 === (1)) {
			text = "can be thrown to cause a fire explosion halving HP of monsters in a square area. It can occasionally destroy walls.";
		}
		_r = fmt.Sprintf("The %s %s", new sliceType$7([new projectile(p), new $String(text)])); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		text = _r;
		$s = -1; return text;
		/* */ } return; } if ($f === undefined) { $f = { $blk: projectile.prototype.Desc }; } $f._1 = _1; $f._r = _r; $f.p = p; $f.text = text; $f.$s = $s; $f.$r = $r; return $f;
	};
	$ptrType(projectile).prototype.Desc = function() { return new projectile(this.$get()).Desc(); };
	projectile.prototype.Letter = function() {
		var p;
		p = this.$val;
		return 40;
	};
	$ptrType(projectile).prototype.Letter = function() { return new projectile(this.$get()).Letter(); };
	projectile.prototype.Int = function() {
		var p;
		p = this.$val;
		return ((p >> 0));
	};
	$ptrType(projectile).prototype.Int = function() { return new projectile(this.$get()).Int(); };
	projectile.prototype.Use = function(g, ev) {
		var _1, _entry, _r, _r$1, _tuple, err, ev, g, ok, p, quant, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _entry = $f._entry; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; err = $f.err; ev = $f.ev; g = $f.g; ok = $f.ok; p = $f.p; quant = $f.quant; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this.$val;
		_tuple = (_entry = g.Player.Consumables[consumable.keyFor(new projectile(p))], _entry !== undefined ? [_entry.v, true] : [0, false]);
		quant = _tuple[0];
		ok = _tuple[1];
		if (!ok || quant <= 0) {
			$s = -1; return errors.New("no such consumable: " + new projectile(p).String());
		}
		err = $ifaceNil;
			_1 = p;
			/* */ if (_1 === (0)) { $s = 2; continue; }
			/* */ if (_1 === (1)) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (_1 === (0)) { */ case 2:
				_r = g.ThrowConfusingDart(ev); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				err = _r;
				$s = 4; continue;
			/* } else if (_1 === (1)) { */ case 3:
				_r$1 = g.ThrowExplosiveMagara(ev); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				err = _r$1;
			/* } */ case 4:
		case 1:
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
		}
		$r = g.UseConsumable(new projectile(p)); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: projectile.prototype.Use }; } $f._1 = _1; $f._entry = _entry; $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f.err = err; $f.ev = ev; $f.g = g; $f.ok = ok; $f.p = p; $f.quant = quant; $f.$s = $s; $f.$r = $r; return $f;
	};
	$ptrType(projectile).prototype.Use = function(g, ev) { return new projectile(this.$get()).Use(g, ev); };
	game.ptr.prototype.ThrowConfusingDart = function(ev) {
		var _arg, _arg$1, _arg$2, _arg$3, _arg$4, _arg$5, _entry, _q, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _tuple, acc, attack, bonus, err, ev, evasion, g, mons, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _arg$3 = $f._arg$3; _arg$4 = $f._arg$4; _arg$5 = $f._arg$5; _entry = $f._entry; _q = $f._q; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _tuple = $f._tuple; acc = $f.acc; attack = $f.attack; bonus = $f.bonus; err = $f.err; ev = $f.ev; evasion = $f.evasion; g = $f.g; mons = $f.mons; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		g = this;
		_r = g.ui.ChooseTarget(g, new chooser.ptr(false, false, false, true, false, false, false)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		err = _r;
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
		}
		_tuple = g.MonsterAt($clone(g.Player.Target, position));
		mons = _tuple[0];
		_r$1 = RandInt(g.Player.RangedAccuracy()); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		acc = _r$1;
		_r$2 = RandInt(mons.Evasion); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		evasion = _r$2;
		if (mons.State === 0) {
			evasion = (_q = evasion / (3), (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
		}
		/* */ if (acc > evasion) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (acc > evasion) { */ case 4:
			bonus = 0;
			/* */ if (g.Player.HasStatus(0)) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if (g.Player.HasStatus(0)) { */ case 7:
				_r$3 = RandInt(5); /* */ $s = 9; case 9: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				bonus = bonus + (_r$3) >> 0;
			/* } */ case 8:
			if ((_entry = g.Player.Aptitudes[aptitude.keyFor(10)], _entry !== undefined ? _entry.v : false)) {
				bonus = bonus + (2) >> 0;
			}
			_r$4 = g.HitDamage(0, 7 + bonus >> 0, mons.Armor); /* */ $s = 10; case 10: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			attack = _r$4;
			mons.HP = mons.HP - (attack) >> 0;
			/* */ if (mons.HP > 0) { $s = 11; continue; }
			/* */ $s = 12; continue;
			/* if (mons.HP > 0) { */ case 11:
				$r = mons.EnterConfusion(g, ev); /* */ $s = 14; case 14: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$r = g.PrintfStyled("Your %s hits the %s (%d dmg), who appears confused.", 2, new sliceType$7([new projectile(0), new monsterKind(mons.Kind), new $Int(attack)])); /* */ $s = 15; case 15: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				_arg = g;
				_r$5 = g.Ray($clone(mons.Pos, position)); /* */ $s = 16; case 16: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
				_arg$1 = _r$5;
				$r = g.ui.ThrowAnimation(_arg, _arg$1, true); /* */ $s = 17; case 17: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$r = mons.MakeHuntIfHurt(g); /* */ $s = 18; case 18: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 13; continue;
			/* } else { */ case 12:
				$r = g.PrintfStyled("Your %s kills the %s.", 2, new sliceType$7([new projectile(0), new monsterKind(mons.Kind)])); /* */ $s = 19; case 19: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				_arg$2 = g;
				_r$6 = g.Ray($clone(mons.Pos, position)); /* */ $s = 20; case 20: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
				_arg$3 = _r$6;
				$r = g.ui.ThrowAnimation(_arg$2, _arg$3, true); /* */ $s = 21; case 21: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$r = g.HandleKill(mons, ev); /* */ $s = 22; case 22: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 13:
			$s = 6; continue;
		/* } else { */ case 5:
			$r = g.Printf("Your %s missed the %s.", new sliceType$7([new projectile(0), new monsterKind(mons.Kind)])); /* */ $s = 23; case 23: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_arg$4 = g;
			_r$7 = g.Ray($clone(mons.Pos, position)); /* */ $s = 24; case 24: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
			_arg$5 = _r$7;
			$r = g.ui.ThrowAnimation(_arg$4, _arg$5, false); /* */ $s = 25; case 25: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 6:
		$r = ev.Renew(g, 10); /* */ $s = 26; case 26: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: game.ptr.prototype.ThrowConfusingDart }; } $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._arg$3 = _arg$3; $f._arg$4 = _arg$4; $f._arg$5 = _arg$5; $f._entry = _entry; $f._q = _q; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._tuple = _tuple; $f.acc = acc; $f.attack = attack; $f.bonus = bonus; $f.err = err; $f.ev = ev; $f.evasion = evasion; $f.g = g; $f.mons = mons; $f.$s = $s; $f.$r = $r; return $f;
	};
	game.prototype.ThrowConfusingDart = function(ev) { return this.$val.ThrowConfusingDart(ev); };
	game.ptr.prototype.ThrowExplosiveMagara = function(ev) {
		var _arg, _arg$1, _arg$2, _arg$3, _entry, _i, _key, _q, _r, _r$1, _r$2, _r$3, _r$4, _ref, _tuple, _v, err, ev, g, mons, neighbors, pos, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _arg$3 = $f._arg$3; _entry = $f._entry; _i = $f._i; _key = $f._key; _q = $f._q; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _ref = $f._ref; _tuple = $f._tuple; _v = $f._v; err = $f.err; ev = $f.ev; g = $f.g; mons = $f.mons; neighbors = $f.neighbors; pos = $f.pos; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		g = this;
		_r = g.ui.ChooseTarget(g, new chooser.ptr(false, true, true, false, false, true, true)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		err = _r;
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
		}
		_r$1 = $clone(g.Player.Target, position).ValidNeighbors(); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		neighbors = _r$1;
		_r$2 = g.ExplosionSound(); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_arg = new $String(_r$2);
		$r = g.Printf("You throw the explosive magara... %s", new sliceType$7([_arg])); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = g.MakeNoise(18, $clone(g.Player.Target, position)); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_arg$1 = g;
		_r$3 = g.Ray($clone(g.Player.Target, position)); /* */ $s = 6; case 6: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_arg$2 = _r$3;
		_arg$3 = $pkg.ColorFgPlayer;
		$r = g.ui.ProjectileTrajectoryAnimation(_arg$1, _arg$2, _arg$3); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = g.ui.ExplosionAnimation(g, 0, $clone(g.Player.Target, position)); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_ref = $append(neighbors, g.Player.Target);
		_i = 0;
		/* while (true) { */ case 9:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 10; continue; }
			pos = $clone(((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]), position);
			$r = g.Burn($clone(pos, position), ev); /* */ $s = 11; case 11: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_tuple = g.MonsterAt($clone(pos, position));
			mons = _tuple[0];
			/* */ if (mons.Exists()) { $s = 12; continue; }
			if (!(g.Dungeon.Cell($clone(pos, position)).T === 0)) { _v = false; $s = 15; continue s; }
			_r$4 = RandInt(2); /* */ $s = 16; case 16: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			_v = _r$4 === 0; case 15:
			/* */ if (_v) { $s = 13; continue; }
			/* */ $s = 14; continue;
			/* if (mons.Exists()) { */ case 12:
				mons.HP = (_q = mons.HP / (2), (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
				if (mons.HP === 0) {
					mons.HP = 1;
				}
				$r = g.MakeNoise(12, $clone(mons.Pos, position)); /* */ $s = 17; case 17: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$r = mons.MakeHuntIfHurt(g); /* */ $s = 18; case 18: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 14; continue;
			/* } else if (_v) { */ case 13:
				g.Dungeon.SetCell($clone(pos, position), 1);
				/* */ if (!(_entry = g.Player.LOS[position.keyFor(pos)], _entry !== undefined ? _entry.v : false)) { $s = 19; continue; }
				/* */ $s = 20; continue;
				/* if (!(_entry = g.Player.LOS[position.keyFor(pos)], _entry !== undefined ? _entry.v : false)) { */ case 19:
					_key = $clone(pos, position); (g.UnknownDig || $throwRuntimeError("assignment to entry in nil map"))[position.keyFor(_key)] = { k: _key, v: true };
					$s = 21; continue;
				/* } else { */ case 20:
					$r = g.ui.WallExplosionAnimation(g, $clone(pos, position)); /* */ $s = 22; case 22: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 21:
				$r = g.MakeNoise(18, $clone(pos, position)); /* */ $s = 23; case 23: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$r = g.Fog($clone(pos, position), 1, ev); /* */ $s = 24; case 24: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 14:
			_i++;
		/* } */ $s = 9; continue; case 10:
		$r = ev.Renew(g, 10); /* */ $s = 25; case 25: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: game.ptr.prototype.ThrowExplosiveMagara }; } $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._arg$3 = _arg$3; $f._entry = _entry; $f._i = _i; $f._key = _key; $f._q = _q; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._ref = _ref; $f._tuple = _tuple; $f._v = _v; $f.err = err; $f.ev = ev; $f.g = g; $f.mons = mons; $f.neighbors = neighbors; $f.pos = pos; $f.$s = $s; $f.$r = $r; return $f;
	};
	game.prototype.ThrowExplosiveMagara = function(ev) { return this.$val.ThrowExplosiveMagara(ev); };
	armour.prototype.Equip = function(g) {
		var _entry, _key, _key$1, ar, g, oar, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _entry = $f._entry; _key = $f._key; _key$1 = $f._key$1; ar = $f.ar; g = $f.g; oar = $f.oar; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		ar = this.$val;
		oar = g.Player.Armour;
		g.Player.Armour = ar;
		/* */ if (!(_entry = g.FoundEquipables[equipable.keyFor(new armour(ar))], _entry !== undefined ? _entry.v : false)) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!(_entry = g.FoundEquipables[equipable.keyFor(new armour(ar))], _entry !== undefined ? _entry.v : false)) { */ case 1:
			if (g.FoundEquipables === false) {
				g.FoundEquipables = $makeMap(equipable.keyFor, []);
			}
			$r = g.StoryPrintf("You found and put on %s.", new sliceType$7([new $String(Indefinite(new armour(ar).String(), false))])); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_key = new armour(ar); (g.FoundEquipables || $throwRuntimeError("assignment to entry in nil map"))[equipable.keyFor(_key)] = { k: _key, v: true };
		/* } */ case 2:
		$r = g.Printf("You put the %s on and leave your %s on the ground.", new sliceType$7([new armour(ar), new armour(oar)])); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_key$1 = $clone(g.Player.Pos, position); (g.Equipables || $throwRuntimeError("assignment to entry in nil map"))[position.keyFor(_key$1)] = { k: _key$1, v: new armour(oar) };
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: armour.prototype.Equip }; } $f._entry = _entry; $f._key = _key; $f._key$1 = _key$1; $f.ar = ar; $f.g = g; $f.oar = oar; $f.$s = $s; $f.$r = $r; return $f;
	};
	$ptrType(armour).prototype.Equip = function(g) { return new armour(this.$get()).Equip(g); };
	armour.prototype.String = function() {
		var _1, ar;
		ar = this.$val;
		_1 = ar;
		if (_1 === (0)) {
			return "robe";
		} else if (_1 === (1)) {
			return "leather armour";
		} else if (_1 === (2)) {
			return "chain mail";
		} else if (_1 === (3)) {
			return "plate armour";
		} else {
			return "some piece of armour";
		}
	};
	$ptrType(armour).prototype.String = function() { return new armour(this.$get()).String(); };
	armour.prototype.Desc = function() {
		var _1, ar, text;
		ar = this.$val;
		text = "";
		_1 = ar;
		if (_1 === (0)) {
			text = "A robe provides no special protection, and will not help you much in your journey.";
		} else if (_1 === (1)) {
			text = "A leather armour provides some protection against blows.";
		} else if (_1 === (2)) {
			text = "A chain mail provides more protection than a leather armour, but the blows you receive are louder.";
		} else if (_1 === (3)) {
			text = "A plate armour provides great protection against blows, but blows you receive are quite noisy.";
		}
		return text;
	};
	$ptrType(armour).prototype.Desc = function() { return new armour(this.$get()).Desc(); };
	armour.prototype.Letter = function() {
		var ar;
		ar = this.$val;
		return 91;
	};
	$ptrType(armour).prototype.Letter = function() { return new armour(this.$get()).Letter(); };
	weapon.prototype.Equip = function(g) {
		var _entry, _key, _key$1, g, owp, wp, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _entry = $f._entry; _key = $f._key; _key$1 = $f._key$1; g = $f.g; owp = $f.owp; wp = $f.wp; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		wp = this.$val;
		owp = g.Player.Weapon;
		g.Player.Weapon = wp;
		/* */ if (!(_entry = g.FoundEquipables[equipable.keyFor(new weapon(wp))], _entry !== undefined ? _entry.v : false)) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!(_entry = g.FoundEquipables[equipable.keyFor(new weapon(wp))], _entry !== undefined ? _entry.v : false)) { */ case 1:
			if (g.FoundEquipables === false) {
				g.FoundEquipables = $makeMap(equipable.keyFor, []);
			}
			$r = g.StoryPrintf("You found and took %s.", new sliceType$7([new $String(Indefinite(new weapon(wp).String(), false))])); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_key = new weapon(wp); (g.FoundEquipables || $throwRuntimeError("assignment to entry in nil map"))[equipable.keyFor(_key)] = { k: _key, v: true };
		/* } */ case 2:
		$r = g.Printf("You take the %s and leave your %s on the ground.", new sliceType$7([new weapon(wp), new weapon(owp)])); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ if (wp === 7) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if (wp === 7) { */ case 5:
			$r = g.PrintfStyled("\xE2\x99\xAB \xE2\x99\xAA \xE2\x80\xA6 Oh, you're there, let's fight our way out!", 4, new sliceType$7([])); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 6:
		_key$1 = $clone(g.Player.Pos, position); (g.Equipables || $throwRuntimeError("assignment to entry in nil map"))[position.keyFor(_key$1)] = { k: _key$1, v: new weapon(owp) };
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: weapon.prototype.Equip }; } $f._entry = _entry; $f._key = _key; $f._key$1 = _key$1; $f.g = g; $f.owp = owp; $f.wp = wp; $f.$s = $s; $f.$r = $r; return $f;
	};
	$ptrType(weapon).prototype.Equip = function(g) { return new weapon(this.$get()).Equip(g); };
	weapon.prototype.String = function() {
		var _1, wp;
		wp = this.$val;
		_1 = wp;
		if (_1 === (0)) {
			return "dagger";
		} else if (_1 === (1)) {
			return "axe";
		} else if (_1 === (2)) {
			return "battle axe";
		} else if (_1 === (3)) {
			return "spear";
		} else if (_1 === (4)) {
			return "halberd";
		} else if (_1 === (5)) {
			return "sword";
		} else if (_1 === (6)) {
			return "double sword";
		} else if (_1 === (7)) {
			return "staff Frundis";
		} else if (_1 === (8)) {
			return "lightning whip";
		} else {
			return "some weapon";
		}
	};
	$ptrType(weapon).prototype.String = function() { return new weapon(this.$get()).String(); };
	weapon.prototype.Desc = function() {
		var _1, _r, text, wp, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _r = $f._r; text = $f.text; wp = $f.wp; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		wp = this.$val;
		text = "";
		_1 = wp;
		if (_1 === (0)) {
			text = "A dagger is the most basic weapon. Great against sleeping monsters, but that's all.";
		} else if (_1 === (1)) {
			text = "An axe is a one-handed weapon that can hit at once any foes adjacent to you.";
		} else if (_1 === (2)) {
			text = "A battle axe is a big two-handed weapon that can hit at once any foes adjacent to you.";
		} else if (_1 === (3)) {
			text = "A spear is a one-handed weapon that can hit two opponents in a row at once. Useful in corridors.";
		} else if (_1 === (4)) {
			text = "An halberd is a big two-handed weapon that can hit two opponents in a row at once. Useful in corridors.";
		} else if (_1 === (5)) {
			text = "A sword is a one-handed weapon that occasionally gets additional free hits.";
		} else if (_1 === (6)) {
			text = "A double sword is a big two-handed weapon that occasionally gets additional free hits.";
		} else if (_1 === (7)) {
			text = "Frundis is a musician and harmonist, which happens to be a two-handed staff too. It may occasionally confuse monsters on hit. It magically helps reducing noise in combat too.";
		} else if (_1 === (8)) {
			text = "The lightning whip is a one-handed weapon that inflicts electrical damage to a monster and any foes connected to it.";
		}
		_r = fmt.Sprintf("%s It can hit for up to %d damage.", new sliceType$7([new $String(text), new $Int(new weapon(wp).Attack())])); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: weapon.prototype.Desc }; } $f._1 = _1; $f._r = _r; $f.text = text; $f.wp = wp; $f.$s = $s; $f.$r = $r; return $f;
	};
	$ptrType(weapon).prototype.Desc = function() { return new weapon(this.$get()).Desc(); };
	weapon.prototype.Attack = function() {
		var _1, wp;
		wp = this.$val;
		_1 = wp;
		if ((_1 === (1)) || (_1 === (3)) || (_1 === (5))) {
			return 11;
		} else if ((_1 === (2)) || (_1 === (4)) || (_1 === (6))) {
			return 15;
		} else if (_1 === (7)) {
			return 13;
		} else if (_1 === (0)) {
			return 9;
		} else if (_1 === (8)) {
			return 8;
		} else {
			return 0;
		}
	};
	$ptrType(weapon).prototype.Attack = function() { return new weapon(this.$get()).Attack(); };
	weapon.prototype.TwoHanded = function() {
		var _1, wp;
		wp = this.$val;
		_1 = wp;
		if ((_1 === (2)) || (_1 === (4)) || (_1 === (6)) || (_1 === (7))) {
			return true;
		} else {
			return false;
		}
	};
	$ptrType(weapon).prototype.TwoHanded = function() { return new weapon(this.$get()).TwoHanded(); };
	weapon.prototype.Letter = function() {
		var wp;
		wp = this.$val;
		return 41;
	};
	$ptrType(weapon).prototype.Letter = function() { return new weapon(this.$get()).Letter(); };
	weapon.prototype.Cleave = function() {
		var _1, wp;
		wp = this.$val;
		_1 = wp;
		if ((_1 === (1)) || (_1 === (2))) {
			return true;
		} else {
			return false;
		}
	};
	$ptrType(weapon).prototype.Cleave = function() { return new weapon(this.$get()).Cleave(); };
	weapon.prototype.Pierce = function() {
		var _1, wp;
		wp = this.$val;
		_1 = wp;
		if ((_1 === (3)) || (_1 === (4))) {
			return true;
		} else {
			return false;
		}
	};
	$ptrType(weapon).prototype.Pierce = function() { return new weapon(this.$get()).Pierce(); };
	shield.prototype.Equip = function(g) {
		var _entry, _key, _key$1, g, osh, sh, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _entry = $f._entry; _key = $f._key; _key$1 = $f._key$1; g = $f.g; osh = $f.osh; sh = $f.sh; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		sh = this.$val;
		osh = g.Player.Shield;
		g.Player.Shield = sh;
		/* */ if (!(_entry = g.FoundEquipables[equipable.keyFor(new shield(sh))], _entry !== undefined ? _entry.v : false)) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!(_entry = g.FoundEquipables[equipable.keyFor(new shield(sh))], _entry !== undefined ? _entry.v : false)) { */ case 1:
			if (g.FoundEquipables === false) {
				g.FoundEquipables = $makeMap(equipable.keyFor, []);
			}
			$r = g.StoryPrintf("You found and put on %s.", new sliceType$7([new $String(Indefinite(new shield(sh).String(), false))])); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_key = new shield(sh); (g.FoundEquipables || $throwRuntimeError("assignment to entry in nil map"))[equipable.keyFor(_key)] = { k: _key, v: true };
		/* } */ case 2:
		/* */ if (!((osh === 0))) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (!((osh === 0))) { */ case 4:
			_key$1 = $clone(g.Player.Pos, position); (g.Equipables || $throwRuntimeError("assignment to entry in nil map"))[position.keyFor(_key$1)] = { k: _key$1, v: new shield(osh) };
			$r = g.Printf("You put the %s on and leave your %s on the ground.", new sliceType$7([new shield(sh), new shield(osh)])); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 6; continue;
		/* } else { */ case 5:
			delete g.Equipables[position.keyFor(g.Player.Pos)];
			$r = g.Printf("You put the %s on.", new sliceType$7([new shield(sh)])); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 6:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: shield.prototype.Equip }; } $f._entry = _entry; $f._key = _key; $f._key$1 = _key$1; $f.g = g; $f.osh = osh; $f.sh = sh; $f.$s = $s; $f.$r = $r; return $f;
	};
	$ptrType(shield).prototype.Equip = function(g) { return new shield(this.$get()).Equip(g); };
	shield.prototype.String = function() {
		var _1, sh, text;
		text = "";
		sh = this.$val;
		_1 = sh;
		if (_1 === (1)) {
			text = "buckler";
		} else if (_1 === (2)) {
			text = "shield";
		}
		text = text;
		return text;
	};
	$ptrType(shield).prototype.String = function() { return new shield(this.$get()).String(); };
	shield.prototype.Desc = function() {
		var _1, sh, text;
		text = "";
		sh = this.$val;
		_1 = sh;
		if (_1 === (1)) {
			text = "A buckler is a small shield that can sometimes block attacks, including some magical attacks. You cannot use it if you are wielding a two-handed weapon.";
		} else if (_1 === (2)) {
			text = "A shield can block attacks, including some magical attacks. You cannot use it if you are wielding a two-handed weapon.";
		}
		text = text;
		return text;
	};
	$ptrType(shield).prototype.Desc = function() { return new shield(this.$get()).Desc(); };
	shield.prototype.Letter = function() {
		var sh;
		sh = this.$val;
		return 93;
	};
	$ptrType(shield).prototype.Letter = function() { return new shield(this.$get()).Letter(); };
	shield.prototype.Block = function() {
		var _1, block, sh;
		block = 0;
		sh = this.$val;
		_1 = sh;
		if (_1 === (1)) {
			block = block + (6) >> 0;
		} else if (_1 === (2)) {
			block = block + (9) >> 0;
		}
		block = block;
		return block;
	};
	$ptrType(shield).prototype.Block = function() { return new shield(this.$get()).Block(); };
	equipableData.ptr.prototype.FavorableRoll = function(lateness) {
		var _q, _r, _r$1, data, lateness, r, ratio, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _q = $f._q; _r = $f._r; _r$1 = $f._r$1; data = $f.data; lateness = $f.lateness; r = $f.r; ratio = $f.ratio; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		data = this;
		ratio = (_q = data.rarity / (($imul(2, lateness))), (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
		if (ratio < 2) {
			ratio = 2;
		}
		_r = RandInt(ratio); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		r = _r;
		/* */ if (!((r === 0)) && (ratio === 2) && lateness >= 3) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!((r === 0)) && (ratio === 2) && lateness >= 3) { */ case 2:
			_r$1 = RandInt(ratio); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			r = _r$1;
		/* } */ case 3:
		$s = -1; return r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: equipableData.ptr.prototype.FavorableRoll }; } $f._q = _q; $f._r = _r; $f._r$1 = _r$1; $f.data = data; $f.lateness = lateness; $f.r = r; $f.ratio = ratio; $f.$s = $s; $f.$r = $r; return $f;
	};
	equipableData.prototype.FavorableRoll = function(lateness) { return this.$val.FavorableRoll(lateness); };
	main = function() {
		var _r, _tuple, err, g, load, tui, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; err = $f.err; g = $f.g; load = $f.load; tui = $f.tui; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		tui = new termui.ptr(sliceType$15.nil, sliceType$15.nil, new position.ptr(0, 0), null, false, null, 0);
		err = tui.Init();
		/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 1:
			$r = log.Fatalf("boohu: %v\n", new sliceType$7([err])); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 2:
		$deferred.push([$methodVal(tui, "Close"), []]);
		ApplyDefaultKeyBindings();
		tui.PostInit();
		LinkColors();
		$r = tui.DrawWelcome(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		g = new game.ptr(ptrType$7.nil, ptrType$8.nil, sliceType$12.nil, sliceType$13.nil, ptrType$10.nil, $ifaceNil, false, false, 0, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, ptrType$1.nil, ptrType$11.nil, false, false, false, false, $ifaceNil, 0, false, sliceType$14.nil, 0, 0, "", sliceType$3.nil, 0, 0, 0, false, 0, false, ptrType$1.nil);
		_r = g.Load(); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		load = _tuple[0];
		err = _tuple[1];
		/* */ if (!load) { $s = 6; continue; }
		/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 7; continue; }
		/* */ $s = 8; continue;
		/* if (!load) { */ case 6:
			$r = g.InitLevel(); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 8; continue;
		/* } else if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 7:
			$r = g.InitLevel(); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = g.Printf("Error loading saved game\xE2\x80\xA6 starting new game. (%v)", new sliceType$7([err])); /* */ $s = 11; case 11: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 8:
		g.ui = tui;
		$r = g.EventLoop(); /* */ $s = 12; case 12: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		tui.Clear();
		tui.DrawText("Refresh the page to start again", 0, 0);
		tui.DrawText($pkg.SaveError, 0, 1);
		tui.Flush();
		$s = -1; return;
		/* */ } return; } } catch(err) { $err = err; $s = -1; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: main }; } $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.g = g; $f.load = load; $f.tui = tui; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	game.ptr.prototype.DataDir = function() {
		var g;
		g = this;
		return ["", $ifaceNil];
	};
	game.prototype.DataDir = function() { return this.$val.DataDir(); };
	game.ptr.prototype.Save = function() {
		var _r, _r$1, _tuple, err, g, s, save, storage, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; err = $f.err; g = $f.g; s = $f.s; save = $f.save; storage = $f.storage; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		g = this;
		$s = -1; return $ifaceNil;
		_r = g.GameSave(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		save = _tuple[0];
		err = _tuple[1];
		/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 2:
			_r$1 = err.Error(); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			$pkg.SaveError = _r$1;
			$s = -1; return err;
		/* } */ case 3:
		storage = $global.localStorage;
		if (!!!(storage)) {
			$pkg.SaveError = "localStorage not found";
			$s = -1; return errors.New("localStorage not found");
		}
		s = base64.StdEncoding.EncodeToString(save);
		storage.setItem($externalize("boohusave", $String), $externalize(s, $String));
		$pkg.SaveError = "no errors";
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: game.ptr.prototype.Save }; } $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f.err = err; $f.g = g; $f.s = s; $f.save = save; $f.storage = storage; $f.$s = $s; $f.$r = $r; return $f;
	};
	game.prototype.Save = function() { return this.$val.Save(); };
	game.ptr.prototype.SaveConfig = function() {
		var g;
		g = this;
		return $ifaceNil;
	};
	game.prototype.SaveConfig = function() { return this.$val.SaveConfig(); };
	game.ptr.prototype.RemoveSaveFile = function() {
		var g, storage;
		g = this;
		storage = $global.localStorage;
		storage.removeItem($externalize("boohusave", $String));
		return $ifaceNil;
	};
	game.prototype.RemoveSaveFile = function() { return this.$val.RemoveSaveFile(); };
	game.ptr.prototype.RemoveDataFile = function(file) {
		var file, g, storage;
		g = this;
		storage = $global.localStorage;
		storage.removeItem($externalize(file, $String));
		return $ifaceNil;
	};
	game.prototype.RemoveDataFile = function(file) { return this.$val.RemoveDataFile(file); };
	game.ptr.prototype.Load = function() {
		var _r, _tuple, _tuple$1, err, g, lg, s, save, storage, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; err = $f.err; g = $f.g; lg = $f.lg; s = $f.s; save = $f.save; storage = $f.storage; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		g = this;
		storage = $global.localStorage;
		if (!!!(storage)) {
			$s = -1; return [true, errors.New("localStorage not found")];
		}
		save = storage.getItem($externalize("boohusave", $String));
		if (!!!(save)) {
			$s = -1; return [false, $ifaceNil];
		}
		_tuple = base64.StdEncoding.DecodeString($internalize(save, $String));
		s = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [true, err];
		}
		_r = g.DecodeGameSave(s); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple$1 = _r;
		lg = _tuple$1[0];
		err = _tuple$1[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [true, err];
		}
		game.copy(g, lg);
		$s = -1; return [true, $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: game.ptr.prototype.Load }; } $f._r = _r; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.err = err; $f.g = g; $f.lg = lg; $f.s = s; $f.save = save; $f.storage = storage; $f.$s = $s; $f.$r = $r; return $f;
	};
	game.prototype.Load = function() { return this.$val.Load(); };
	game.ptr.prototype.WriteDump = function() {
		var g;
		g = this;
		return $ifaceNil;
	};
	game.prototype.WriteDump = function() { return this.$val.WriteDump(); };
	termui.ptr.prototype.Init = function() {
		var ui;
		ui = this;
		ui.cells = $makeSlice(sliceType$15, 2781);
		$global.document.addEventListener($externalize("keypress", $String), $externalize((function $b(e) {
			var _selection, e, s, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _selection = $f._selection; e = $f.e; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			_selection = $select([[wants], []]);
			/* */ if (_selection[0] === 0) { $s = 1; continue; }
			/* */ if (_selection[0] === 1) { $s = 2; continue; }
			/* */ $s = 3; continue;
			/* if (_selection[0] === 0) { */ case 1:
				s = $internalize(e.key, $String);
				$r = $send(ch, $clone(new jsInput.ptr(s, false, 0, 0, 0, false), jsInput)); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 3; continue;
			/* } else if (_selection[0] === 1) { */ case 2:
			/* } */ case 3:
			$s = -1; return;
			/* */ } return; } if ($f === undefined) { $f = { $blk: $b }; } $f._selection = _selection; $f.e = e; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
		}), funcType));
		$global.document.addEventListener($externalize("mousedown", $String), $externalize((function $b(e) {
			var _selection, _tuple, e, x, y, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _selection = $f._selection; _tuple = $f._tuple; e = $f.e; x = $f.x; y = $f.y; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			_selection = $select([[wants], []]);
			/* */ if (_selection[0] === 0) { $s = 1; continue; }
			/* */ if (_selection[0] === 1) { $s = 2; continue; }
			/* */ $s = 3; continue;
			/* if (_selection[0] === 0) { */ case 1:
				_tuple = ui.GetMousePos(e);
				x = _tuple[0];
				y = _tuple[1];
				$r = $send(ch, $clone(new jsInput.ptr("", true, x, y, $parseInt(e.button) >> 0, false), jsInput)); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 3; continue;
			/* } else if (_selection[0] === 1) { */ case 2:
			/* } */ case 3:
			$s = -1; return;
			/* */ } return; } if ($f === undefined) { $f = { $blk: $b }; } $f._selection = _selection; $f._tuple = _tuple; $f.e = e; $f.x = x; $f.y = y; $f.$s = $s; $f.$r = $r; return $f;
		}), funcType));
		ui.ResetCells();
		ui.backBuffer = $makeSlice(sliceType$15, 2781);
		ui.InitElements();
		return $ifaceNil;
	};
	termui.prototype.Init = function() { return this.$val.Init(); };
	uicolor.prototype.String = function() {
		var _1, c, color;
		c = this.$val;
		color = "#002b36";
		_1 = c;
		if (_1 === (0)) {
			color = "#073642";
		} else if (_1 === (1)) {
			color = "#dc322f";
		} else if (_1 === (2)) {
			color = "#859900";
		} else if (_1 === (3)) {
			color = "#b58900";
		} else if (_1 === (4)) {
			color = "#268bd2";
		} else if (_1 === (5)) {
			color = "#d33682";
		} else if (_1 === (6)) {
			color = "#2aa198";
		} else if (_1 === (7)) {
			color = "#eee8d5";
		} else if (_1 === (8)) {
			color = "#002b36";
		} else if (_1 === (9)) {
			color = "#cb4b16";
		} else if (_1 === (10)) {
			color = "#586e75";
		} else if (_1 === (11)) {
			color = "#657b83";
		} else if (_1 === (12)) {
			color = "#839496";
		} else if (_1 === (13)) {
			color = "#6c71c4";
		} else if (_1 === (14)) {
			color = "#93a1a1";
		} else if (_1 === (15)) {
			color = "#fdf6e3";
		}
		return color;
	};
	$ptrType(uicolor).prototype.String = function() { return new uicolor(this.$get()).String(); };
	termui.ptr.prototype.GetIndex = function(x, y) {
		var ui, x, y;
		ui = this;
		return ($imul(y, 103)) + x >> 0;
	};
	termui.prototype.GetIndex = function(x, y) { return this.$val.GetIndex(x, y); };
	termui.ptr.prototype.GetPos = function(i) {
		var _q, _q$1, i, ui;
		ui = this;
		return [i - ($imul(((_q = i / 103, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"))), 103)) >> 0, (_q$1 = i / 103, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero"))];
	};
	termui.prototype.GetPos = function(i) { return this.$val.GetPos(i); };
	termui.ptr.prototype.ResetCells = function() {
		var i, ui, x, x$1;
		ui = this;
		i = 0;
		while (true) {
			if (!(i < ui.cells.$length)) { break; }
			(x = ui.cells, ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i])).r = 32;
			(x$1 = ui.cells, ((i < 0 || i >= x$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + i])).bg = $pkg.ColorBg;
			i = i + (1) >> 0;
		}
	};
	termui.prototype.ResetCells = function() { return this.$val.ResetCells(); };
	init$2 = function() {
		ch = new $Chan(jsInput, 0);
		wants = new $Chan($Bool, 0);
		interrupt = new $Chan($Bool, 0);
	};
	termui.ptr.prototype.Interrupt = function() {
		var ui, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; ui = $f.ui; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		ui = this;
		$r = $send(interrupt, true); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: termui.ptr.prototype.Interrupt }; } $f.ui = ui; $f.$s = $s; $f.$r = $r; return $f;
	};
	termui.prototype.Interrupt = function() { return this.$val.Interrupt(); };
	termui.ptr.prototype.Close = function() {
		var ui;
		ui = this;
	};
	termui.prototype.Close = function() { return this.$val.Close(); };
	termui.ptr.prototype.PostInit = function() {
		var ui;
		ui = this;
		SolarizedPalette();
		ui.HideCursor();
	};
	termui.prototype.PostInit = function() { return this.$val.PostInit(); };
	termui.ptr.prototype.Clear = function() {
		var ui;
		ui = this;
		ui.ResetCells();
	};
	termui.prototype.Clear = function() { return this.$val.Clear(); };
	termui.ptr.prototype.Flush = function() {
		var _tuple, cell$1, i, ui, x, x$1, x$2, x$3, x$4, y;
		ui = this;
		i = 0;
		while (true) {
			if (!(i < ui.cells.$length)) { break; }
			if ($equal((x = ui.cells, ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i])), (x$1 = ui.backBuffer, ((i < 0 || i >= x$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + i])), UICell)) {
				i = i + (1) >> 0;
				continue;
			}
			cell$1 = $clone((x$2 = ui.cells, ((i < 0 || i >= x$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + i])), UICell);
			if (cell$1.r === 32) {
				cell$1.r = 160;
			}
			_tuple = ui.GetPos(i);
			x$3 = _tuple[0];
			y = _tuple[1];
			ui.Draw($clone(cell$1, UICell), x$3, y);
			UICell.copy((x$4 = ui.backBuffer, ((i < 0 || i >= x$4.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$4.$array[x$4.$offset + i])), cell$1);
			i = i + (1) >> 0;
		}
	};
	termui.prototype.Flush = function() { return this.$val.Flush(); };
	termui.ptr.prototype.HideCursor = function() {
		var ui;
		ui = this;
		position.copy(ui.cursor, new position.ptr(-1, -1));
	};
	termui.prototype.HideCursor = function() { return this.$val.HideCursor(); };
	termui.ptr.prototype.SetCursor = function(pos) {
		var pos, ui;
		ui = this;
		position.copy(ui.cursor, pos);
	};
	termui.prototype.SetCursor = function(pos) { return this.$val.SetCursor(pos); };
	termui.ptr.prototype.SetCell = function(x, y, r, fg, bg) {
		var bg, fg, i, r, ui, x, x$1, x$2, y;
		ui = this;
		i = ui.GetIndex(x, y);
		if (i >= ui.cells.$length) {
			return;
		}
		UICell.copy((x$1 = ui.cells, x$2 = ui.GetIndex(x, y), ((x$2 < 0 || x$2 >= x$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + x$2])), new UICell.ptr(fg, bg, r));
	};
	termui.prototype.SetCell = function(x, y, r, fg, bg) { return this.$val.SetCell(x, y, r, fg, bg); };
	termui.ptr.prototype.ReadKey = function(s) {
		var _tuple, bs, r, s, ui;
		r = 0;
		ui = this;
		bs = strings.NewReader(s);
		_tuple = bs.ReadRune();
		r = _tuple[0];
		r = r;
		return r;
	};
	termui.prototype.ReadKey = function(s) { return this.$val.ReadKey(s); };
	termui.ptr.prototype.PollEvent = function() {
		var _r, _r$1, _selection, in$1, ui, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _selection = $f._selection; in$1 = $f.in$1; ui = $f.ui; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		in$1 = new jsInput.ptr("", false, 0, 0, 0, false);
		ui = this;
		_r = $select([[wants, true], [interrupt]]); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_selection = _r;
		/* */ if (_selection[0] === 0) { $s = 2; continue; }
		/* */ if (_selection[0] === 1) { $s = 3; continue; }
		/* */ $s = 4; continue;
		/* if (_selection[0] === 0) { */ case 2:
			_r$1 = $recv(ch); /* */ $s = 5; case 5: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			jsInput.copy(in$1, _r$1[0]);
			$s = 4; continue;
		/* } else if (_selection[0] === 1) { */ case 3:
			in$1.interrupt = _selection[1][0];
		/* } */ case 4:
		jsInput.copy(in$1, in$1);
		$s = -1; return in$1;
		/* */ } return; } if ($f === undefined) { $f = { $blk: termui.ptr.prototype.PollEvent }; } $f._r = _r; $f._r$1 = _r$1; $f._selection = _selection; $f.in$1 = in$1; $f.ui = ui; $f.$s = $s; $f.$r = $r; return $f;
	};
	termui.prototype.PollEvent = function() { return this.$val.PollEvent(); };
	termui.ptr.prototype.WaitForContinue = function(g, line) {
		var _1, _r, g, in$1, line, ui, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _r = $f._r; g = $f.g; in$1 = $f.in$1; line = $f.line; ui = $f.ui; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		ui = this;
		/* while (true) { */ case 1:
			_r = ui.PollEvent(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			in$1 = $clone(_r, jsInput);
			_1 = in$1.key;
			if (_1 === ("Escape") || _1 === (" ")) {
				/* break loop; */ $s = 2; continue s;
			}
			if (in$1.mouse && line >= 0) {
				if (in$1.mouseY > line || in$1.mouseX > 79) {
					/* break loop; */ $s = 2; continue s;
				}
			} else if (in$1.mouse) {
				/* break loop; */ $s = 2; continue s;
			}
		/* } */ $s = 1; continue; case 2:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: termui.ptr.prototype.WaitForContinue }; } $f._1 = _1; $f._r = _r; $f.g = g; $f.in$1 = in$1; $f.line = line; $f.ui = ui; $f.$s = $s; $f.$r = $r; return $f;
	};
	termui.prototype.WaitForContinue = function(g, line) { return this.$val.WaitForContinue(g, line); };
	termui.ptr.prototype.PromptConfirmation = function(g) {
		var _1, _r, g, in$1, ui, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _r = $f._r; g = $f.g; in$1 = $f.in$1; ui = $f.ui; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		ui = this;
		/* while (true) { */ case 1:
			_r = ui.PollEvent(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			in$1 = $clone(_r, jsInput);
			_1 = in$1.key;
			if (_1 === ("Y") || _1 === ("y")) {
				$s = -1; return true;
			} else {
				$s = -1; return false;
			}
		/* } */ $s = 1; continue; case 2:
		$s = -1; return false;
		/* */ } return; } if ($f === undefined) { $f = { $blk: termui.ptr.prototype.PromptConfirmation }; } $f._1 = _1; $f._r = _r; $f.g = g; $f.in$1 = in$1; $f.ui = ui; $f.$s = $s; $f.$r = $r; return $f;
	};
	termui.prototype.PromptConfirmation = function(g) { return this.$val.PromptConfirmation(g); };
	termui.ptr.prototype.PressAnyKey = function() {
		var _r, e, ui, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; e = $f.e; ui = $f.ui; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		ui = this;
		/* while (true) { */ case 1:
			_r = ui.PollEvent(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			e = $clone(_r, jsInput);
			if (e.interrupt) {
				$s = -1; return errors.New("interrupted");
			}
			if (!(e.key === "") || e.mouse) {
				$s = -1; return $ifaceNil;
			}
		/* } */ $s = 1; continue; case 2:
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: termui.ptr.prototype.PressAnyKey }; } $f._r = _r; $f.e = e; $f.ui = ui; $f.$s = $s; $f.$r = $r; return $f;
	};
	termui.prototype.PressAnyKey = function() { return this.$val.PressAnyKey(); };
	termui.ptr.prototype.PlayerTurnEvent = function(g, ev) {
		var _1, _2, _3, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tuple, _tuple$1, _tuple$2, _tuple$3, again, err, ev, g, in$1, pos, quit, ui, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _2 = $f._2; _3 = $f._3; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; _tmp$6 = $f._tmp$6; _tmp$7 = $f._tmp$7; _tmp$8 = $f._tmp$8; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; again = $f.again; err = $f.err; ev = $f.ev; g = $f.g; in$1 = $f.in$1; pos = $f.pos; quit = $f.quit; ui = $f.ui; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		err = $ifaceNil;
		again = false;
		quit = false;
		ui = this;
		again = true;
		_r = ui.PollEvent(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		in$1 = $clone(_r, jsInput);
			_1 = in$1.key;
			/* */ if (_1 === ("S")) { $s = 3; continue; }
			/* */ if (_1 === ("")) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (_1 === ("S")) { */ case 3:
				err = errors.New("Command not available for the web html5 version.");
				_tmp = err;
				_tmp$1 = true;
				_tmp$2 = false;
				err = _tmp;
				again = _tmp$1;
				quit = _tmp$2;
				$s = -1; return [err, again, quit];
			/* } else if (_1 === ("")) { */ case 4:
				/* */ if (in$1.mouse) { $s = 7; continue; }
				/* */ $s = 8; continue;
				/* if (in$1.mouse) { */ case 7:
					pos = new position.ptr(in$1.mouseX, in$1.mouseY);
						_2 = in$1.button;
						/* */ if (_2 === (0)) { $s = 10; continue; }
						/* */ if (_2 === (2)) { $s = 11; continue; }
						/* */ $s = 12; continue;
						/* if (_2 === (0)) { */ case 10:
							/* */ if (in$1.mouseX > 79 && (in$1.mouseY === 0)) { $s = 13; continue; }
							/* */ if (in$1.mouseX > 79 || in$1.mouseY > 21) { $s = 14; continue; }
							/* */ $s = 15; continue;
							/* if (in$1.mouseX > 79 && (in$1.mouseY === 0)) { */ case 13:
								_r$1 = ui.HandleKeyAction(g, new runeKeyAction.ptr(0, 43)); /* */ $s = 17; case 17: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
								_tuple = _r$1;
								err = _tuple[0];
								again = _tuple[1];
								quit = _tuple[2];
								if (!($interfaceIsEqual(err, $ifaceNil))) {
									again = true;
								}
								_tmp$3 = err;
								_tmp$4 = again;
								_tmp$5 = quit;
								err = _tmp$3;
								again = _tmp$4;
								quit = _tmp$5;
								$s = -1; return [err, again, quit];
							/* } else if (in$1.mouseX > 79 || in$1.mouseY > 21) { */ case 14:
								again = true;
								$s = 16; continue;
							/* } else { */ case 15:
								_r$2 = ui.ExaminePos(g, ev, $clone(pos, position)); /* */ $s = 18; case 18: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
								_tuple$1 = _r$2;
								err = _tuple$1[0];
								again = _tuple$1[1];
								quit = _tuple$1[2];
							/* } */ case 16:
							$s = 12; continue;
						/* } else if (_2 === (2)) { */ case 11:
							_r$3 = ui.ExaminePos(g, ev, $clone(pos, position)); /* */ $s = 19; case 19: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
							_tuple$2 = _r$3;
							err = _tuple$2[0];
							again = _tuple$2[1];
							quit = _tuple$2[2];
						/* } */ case 12:
					case 9:
				/* } */ case 8:
				$s = 6; continue;
			/* } else { */ case 5:
				_3 = in$1.key;
				if (_3 === ("Enter")) {
					in$1.key = ".";
				} else if (_3 === ("ArrowLeft")) {
					in$1.key = "4";
				} else if (_3 === ("ArrowRight")) {
					in$1.key = "6";
				} else if (_3 === ("ArrowUp")) {
					in$1.key = "8";
				} else if (_3 === ("ArrowDown")) {
					in$1.key = "2";
				}
				/* */ if (utf8.RuneCountInString(in$1.key) > 1) { $s = 20; continue; }
				/* */ $s = 21; continue;
				/* if (utf8.RuneCountInString(in$1.key) > 1) { */ case 20:
					_r$4 = fmt.Errorf("Invalid key: \xE2\x80\x9C%s\xE2\x80\x9D.", new sliceType$7([new $String(in$1.key)])); /* */ $s = 23; case 23: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
					err = _r$4;
					$s = 22; continue;
				/* } else { */ case 21:
					_r$5 = ui.HandleKeyAction(g, new runeKeyAction.ptr(ui.ReadKey(in$1.key), 0)); /* */ $s = 24; case 24: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
					_tuple$3 = _r$5;
					err = _tuple$3[0];
					again = _tuple$3[1];
					quit = _tuple$3[2];
				/* } */ case 22:
			/* } */ case 6:
		case 2:
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			again = true;
		}
		_tmp$6 = err;
		_tmp$7 = again;
		_tmp$8 = quit;
		err = _tmp$6;
		again = _tmp$7;
		quit = _tmp$8;
		$s = -1; return [err, again, quit];
		/* */ } return; } if ($f === undefined) { $f = { $blk: termui.ptr.prototype.PlayerTurnEvent }; } $f._1 = _1; $f._2 = _2; $f._3 = _3; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f._tmp$6 = _tmp$6; $f._tmp$7 = _tmp$7; $f._tmp$8 = _tmp$8; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f.again = again; $f.err = err; $f.ev = ev; $f.g = g; $f.in$1 = in$1; $f.pos = pos; $f.quit = quit; $f.ui = ui; $f.$s = $s; $f.$r = $r; return $f;
	};
	termui.prototype.PlayerTurnEvent = function(g, ev) { return this.$val.PlayerTurnEvent(g, ev); };
	termui.ptr.prototype.Scroll = function(n) {
		var _1, _2, _r, _tmp, _tmp$1, in$1, m, n, quit, ui, x, y, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _2 = $f._2; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; in$1 = $f.in$1; m = $f.m; n = $f.n; quit = $f.quit; ui = $f.ui; x = $f.x; y = $f.y; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		m = 0;
		quit = false;
		ui = this;
		_r = ui.PollEvent(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		in$1 = $clone(_r, jsInput);
		_1 = in$1.key;
		if (_1 === ("Escape") || _1 === ("\x1B") || _1 === (" ")) {
			quit = true;
		} else if (_1 === ("u")) {
			n = n - (12) >> 0;
		} else if (_1 === ("d")) {
			n = n + (12) >> 0;
		} else if (_1 === ("j") || _1 === ("2")) {
			n = n + (1) >> 0;
		} else if (_1 === ("k") || _1 === ("8")) {
			n = n - (1) >> 0;
		} else if (_1 === ("")) {
			if (in$1.mouse) {
				switch (0) { default:
					_2 = in$1.button;
					if (_2 === (0)) {
						y = in$1.mouseY;
						x = in$1.mouseX;
						if (x >= 79) {
							quit = true;
							break;
						}
						if (y > 27) {
							break;
						}
						n = n + ((y - 12 >> 0)) >> 0;
					}
				}
			}
		}
		_tmp = n;
		_tmp$1 = quit;
		m = _tmp;
		quit = _tmp$1;
		$s = -1; return [m, quit];
		/* */ } return; } if ($f === undefined) { $f = { $blk: termui.ptr.prototype.Scroll }; } $f._1 = _1; $f._2 = _2; $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f.in$1 = in$1; $f.m = m; $f.n = n; $f.quit = quit; $f.ui = ui; $f.x = x; $f.y = y; $f.$s = $s; $f.$r = $r; return $f;
	};
	termui.prototype.Scroll = function(n) { return this.$val.Scroll(n); };
	termui.ptr.prototype.ReadRuneKey = function() {
		var _1, _r, in$1, r, ui, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _r = $f._r; in$1 = $f.in$1; r = $f.r; ui = $f.ui; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		ui = this;
		/* while (true) { */ case 1:
			_r = ui.PollEvent(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			in$1 = $clone(_r, jsInput);
			_1 = in$1.key;
			if (_1 === ("\x1B") || _1 === ("Escape") || _1 === (" ")) {
				$s = -1; return 0;
			} else if (_1 === ("Enter")) {
				$s = -1; return 46;
			}
			r = ui.ReadKey(in$1.key);
			if (unicode.IsPrint(r)) {
				$s = -1; return r;
			}
		/* } */ $s = 1; continue; case 2:
		$s = -1; return 0;
		/* */ } return; } if ($f === undefined) { $f = { $blk: termui.ptr.prototype.ReadRuneKey }; } $f._1 = _1; $f._r = _r; $f.in$1 = in$1; $f.r = r; $f.ui = ui; $f.$s = $s; $f.$r = $r; return $f;
	};
	termui.prototype.ReadRuneKey = function() { return this.$val.ReadRuneKey(); };
	termui.ptr.prototype.MenuAction = function(n) {
		var _1, _r, _tmp, _tmp$1, action, in$1, m, n, ui, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; action = $f.action; in$1 = $f.in$1; m = $f.m; n = $f.n; ui = $f.ui; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		m = 0;
		action = 0;
		ui = this;
		_r = ui.PollEvent(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		in$1 = $clone(_r, jsInput);
		_1 = in$1.key;
		if (_1 === ("a")) {
			action = 1;
		} else if (_1 === ("\x1B") || _1 === ("Escape") || _1 === (" ")) {
			action = 3;
		} else if (_1 === ("u")) {
			n = n - (10) >> 0;
		} else if (_1 === ("d")) {
			n = n + (10) >> 0;
		} else if (_1 === ("j") || _1 === ("2")) {
			n = n + (1) >> 0;
		} else if (_1 === ("k") || _1 === ("8")) {
			n = n - (1) >> 0;
		} else if (_1 === ("R")) {
			action = 2;
		}
		_tmp = n;
		_tmp$1 = action;
		m = _tmp;
		action = _tmp$1;
		$s = -1; return [m, action];
		/* */ } return; } if ($f === undefined) { $f = { $blk: termui.ptr.prototype.MenuAction }; } $f._1 = _1; $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f.action = action; $f.in$1 = in$1; $f.m = m; $f.n = n; $f.ui = ui; $f.$s = $s; $f.$r = $r; return $f;
	};
	termui.prototype.MenuAction = function(n) { return this.$val.MenuAction(n); };
	termui.ptr.prototype.TargetModeEvent = function(g, targ, data) {
		var _1, _2, _r, _r$1, _r$2, _r$3, _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple, _tuple$1, _tuple$2, again, data, err, g, in$1, notarg, quit, targ, ui, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _2 = $f._2; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; again = $f.again; data = $f.data; err = $f.err; g = $f.g; in$1 = $f.in$1; notarg = $f.notarg; quit = $f.quit; targ = $f.targ; ui = $f.ui; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		err = $ifaceNil;
		again = false;
		quit = false;
		notarg = false;
		ui = this;
		again = true;
		_r = ui.PollEvent(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		in$1 = $clone(_r, jsInput);
			_1 = in$1.key;
			/* */ if (_1 === ("\x1B") || _1 === ("Escape") || _1 === (" ")) { $s = 3; continue; }
			/* */ if (_1 === ("Enter")) { $s = 4; continue; }
			/* */ if (_1 === ("")) { $s = 5; continue; }
			/* */ if (_1 === ("ArrowLeft")) { $s = 6; continue; }
			/* */ if (_1 === ("ArrowRight")) { $s = 7; continue; }
			/* */ if (_1 === ("ArrowUp")) { $s = 8; continue; }
			/* */ if (_1 === ("ArrowDown")) { $s = 9; continue; }
			/* */ $s = 10; continue;
			/* if (_1 === ("\x1B") || _1 === ("Escape") || _1 === (" ")) { */ case 3:
				g.Targeting = ptrType$1.nil;
				notarg = true;
				$s = -1; return [err, again, quit, notarg];
			/* } else if (_1 === ("Enter")) { */ case 4:
				in$1.key = ".";
				$s = 10; continue;
			/* } else if (_1 === ("")) { */ case 5:
				/* */ if (in$1.mouse) { $s = 11; continue; }
				/* */ $s = 12; continue;
				/* if (in$1.mouse) { */ case 11:
						_2 = in$1.button;
						/* */ if (_2 === (0)) { $s = 14; continue; }
						/* */ if (_2 === (2)) { $s = 15; continue; }
						/* */ if (_2 === (1)) { $s = 16; continue; }
						/* */ $s = 17; continue;
						/* if (_2 === (0)) { */ case 14:
							/* */ if (in$1.mouseX > 79 && (in$1.mouseY === 0)) { $s = 18; continue; }
							/* */ if (in$1.mouseX > 79 || in$1.mouseY > 21) { $s = 19; continue; }
							/* */ $s = 20; continue;
							/* if (in$1.mouseX > 79 && (in$1.mouseY === 0)) { */ case 18:
								_r$1 = ui.CursorKeyAction(g, targ, new runeKeyAction.ptr(0, 43), data); /* */ $s = 22; case 22: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
								_tuple = _r$1;
								err = _tuple[0];
								again = _tuple[1];
								quit = _tuple[2];
								notarg = _tuple[3];
								$s = 21; continue;
							/* } else if (in$1.mouseX > 79 || in$1.mouseY > 21) { */ case 19:
								g.Targeting = ptrType$1.nil;
								notarg = true;
								err = errors.New("Do nothing, then.");
								$s = 21; continue;
							/* } else { */ case 20:
								_r$2 = ui.CursorMouseLeft(g, targ, new position.ptr(in$1.mouseX, in$1.mouseY), data); /* */ $s = 23; case 23: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
								_tuple$1 = _r$2;
								again = _tuple$1[0];
								notarg = _tuple$1[1];
							/* } */ case 21:
							$s = 17; continue;
						/* } else if (_2 === (2)) { */ case 15:
							position.copy(data.npos, new position.ptr(in$1.mouseX, in$1.mouseY));
							$s = 17; continue;
						/* } else if (_2 === (1)) { */ case 16:
							g.Targeting = ptrType$1.nil;
							notarg = true;
						/* } */ case 17:
					case 13:
				/* } */ case 12:
				_tmp = err;
				_tmp$1 = again;
				_tmp$2 = quit;
				_tmp$3 = notarg;
				err = _tmp;
				again = _tmp$1;
				quit = _tmp$2;
				notarg = _tmp$3;
				$s = -1; return [err, again, quit, notarg];
			/* } else if (_1 === ("ArrowLeft")) { */ case 6:
				in$1.key = "4";
				$s = 10; continue;
			/* } else if (_1 === ("ArrowRight")) { */ case 7:
				in$1.key = "6";
				$s = 10; continue;
			/* } else if (_1 === ("ArrowUp")) { */ case 8:
				in$1.key = "8";
				$s = 10; continue;
			/* } else if (_1 === ("ArrowDown")) { */ case 9:
				in$1.key = "2";
			/* } */ case 10:
		case 2:
		/* */ if (utf8.RuneCountInString(in$1.key) > 1) { $s = 24; continue; }
		/* */ $s = 25; continue;
		/* if (utf8.RuneCountInString(in$1.key) > 1) { */ case 24:
			$r = g.Printf("Invalid key: \xE2\x80\x9C%s\xE2\x80\x9D.", new sliceType$7([new $String(in$1.key)])); /* */ $s = 26; case 26: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			notarg = true;
			$s = -1; return [err, again, quit, notarg];
		/* } */ case 25:
		_r$3 = ui.CursorKeyAction(g, targ, new runeKeyAction.ptr(ui.ReadKey(in$1.key), 0), data); /* */ $s = 27; case 27: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_tuple$2 = _r$3;
		err = _tuple$2[0];
		again = _tuple$2[1];
		quit = _tuple$2[2];
		notarg = _tuple$2[3];
		$s = -1; return [err, again, quit, notarg];
		/* */ } return; } if ($f === undefined) { $f = { $blk: termui.ptr.prototype.TargetModeEvent }; } $f._1 = _1; $f._2 = _2; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f.again = again; $f.data = data; $f.err = err; $f.g = g; $f.in$1 = in$1; $f.notarg = notarg; $f.quit = quit; $f.targ = targ; $f.ui = ui; $f.$s = $s; $f.$r = $r; return $f;
	};
	termui.prototype.TargetModeEvent = function(g, targ, data) { return this.$val.TargetModeEvent(g, targ, data); };
	termui.ptr.prototype.Select = function(g, ev, l) {
		var _1, _r, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$15, _tmp$16, _tmp$17, _tmp$18, _tmp$19, _tmp$2, _tmp$20, _tmp$21, _tmp$22, _tmp$23, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, alternate, err, ev, g, in$1, index, l, r, ui, x, y, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$10 = $f._tmp$10; _tmp$11 = $f._tmp$11; _tmp$12 = $f._tmp$12; _tmp$13 = $f._tmp$13; _tmp$14 = $f._tmp$14; _tmp$15 = $f._tmp$15; _tmp$16 = $f._tmp$16; _tmp$17 = $f._tmp$17; _tmp$18 = $f._tmp$18; _tmp$19 = $f._tmp$19; _tmp$2 = $f._tmp$2; _tmp$20 = $f._tmp$20; _tmp$21 = $f._tmp$21; _tmp$22 = $f._tmp$22; _tmp$23 = $f._tmp$23; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; _tmp$6 = $f._tmp$6; _tmp$7 = $f._tmp$7; _tmp$8 = $f._tmp$8; _tmp$9 = $f._tmp$9; alternate = $f.alternate; err = $f.err; ev = $f.ev; g = $f.g; in$1 = $f.in$1; index = $f.index; l = $f.l; r = $f.r; ui = $f.ui; x = $f.x; y = $f.y; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		index = 0;
		alternate = false;
		err = $ifaceNil;
		ui = this;
		/* while (true) { */ case 1:
			_r = ui.PollEvent(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			in$1 = $clone(_r, jsInput);
			r = ui.ReadKey(in$1.key);
			if (in$1.key === "\x1B" || in$1.key === "Escape" || in$1.key === " ") {
				_tmp = -1;
				_tmp$1 = false;
				_tmp$2 = errors.New("Do nothing, then.");
				index = _tmp;
				alternate = _tmp$1;
				err = _tmp$2;
				$s = -1; return [index, alternate, err];
			} else if (in$1.key === "?") {
				_tmp$3 = -1;
				_tmp$4 = true;
				_tmp$5 = $ifaceNil;
				index = _tmp$3;
				alternate = _tmp$4;
				err = _tmp$5;
				$s = -1; return [index, alternate, err];
			} else if (97 <= r && ((r >> 0)) < (97 + l >> 0)) {
				_tmp$6 = (((r - 97 >> 0) >> 0));
				_tmp$7 = false;
				_tmp$8 = $ifaceNil;
				index = _tmp$6;
				alternate = _tmp$7;
				err = _tmp$8;
				$s = -1; return [index, alternate, err];
			} else if (in$1.key === "" && in$1.mouse) {
				y = in$1.mouseY;
				x = in$1.mouseX;
				_1 = in$1.button;
				if (_1 === (0)) {
					if (y < 0 || y > l || x >= 79) {
						_tmp$9 = -1;
						_tmp$10 = false;
						_tmp$11 = errors.New("Do nothing, then.");
						index = _tmp$9;
						alternate = _tmp$10;
						err = _tmp$11;
						$s = -1; return [index, alternate, err];
					}
					if (y === 0) {
						_tmp$12 = -1;
						_tmp$13 = true;
						_tmp$14 = $ifaceNil;
						index = _tmp$12;
						alternate = _tmp$13;
						err = _tmp$14;
						$s = -1; return [index, alternate, err];
					}
					_tmp$15 = y - 1 >> 0;
					_tmp$16 = false;
					_tmp$17 = $ifaceNil;
					index = _tmp$15;
					alternate = _tmp$16;
					err = _tmp$17;
					$s = -1; return [index, alternate, err];
				} else if (_1 === (2)) {
					_tmp$18 = -1;
					_tmp$19 = true;
					_tmp$20 = $ifaceNil;
					index = _tmp$18;
					alternate = _tmp$19;
					err = _tmp$20;
					$s = -1; return [index, alternate, err];
				} else if (_1 === (1)) {
					_tmp$21 = -1;
					_tmp$22 = false;
					_tmp$23 = errors.New("Do nothing, then.");
					index = _tmp$21;
					alternate = _tmp$22;
					err = _tmp$23;
					$s = -1; return [index, alternate, err];
				}
			}
		/* } */ $s = 1; continue; case 2:
		$s = -1; return [index, alternate, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: termui.ptr.prototype.Select }; } $f._1 = _1; $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$10 = _tmp$10; $f._tmp$11 = _tmp$11; $f._tmp$12 = _tmp$12; $f._tmp$13 = _tmp$13; $f._tmp$14 = _tmp$14; $f._tmp$15 = _tmp$15; $f._tmp$16 = _tmp$16; $f._tmp$17 = _tmp$17; $f._tmp$18 = _tmp$18; $f._tmp$19 = _tmp$19; $f._tmp$2 = _tmp$2; $f._tmp$20 = _tmp$20; $f._tmp$21 = _tmp$21; $f._tmp$22 = _tmp$22; $f._tmp$23 = _tmp$23; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f._tmp$6 = _tmp$6; $f._tmp$7 = _tmp$7; $f._tmp$8 = _tmp$8; $f._tmp$9 = _tmp$9; $f.alternate = alternate; $f.err = err; $f.ev = ev; $f.g = g; $f.in$1 = in$1; $f.index = index; $f.l = l; $f.r = r; $f.ui = ui; $f.x = x; $f.y = y; $f.$s = $s; $f.$r = $r; return $f;
	};
	termui.prototype.Select = function(g, ev, l) { return this.$val.Select(g, ev, l); };
	termui.ptr.prototype.InitElements = function() {
		var canvas, mesure, ui;
		ui = this;
		canvas = $global.document.getElementById($externalize("gamecanvas", $String));
		ui.ctx = canvas.getContext($externalize("2d", $String));
		ui.ctx.font = $externalize("18px monospace", $String);
		mesure = ui.ctx.measureText($externalize("W", $String));
		ui.width = ($parseInt(mesure.width) >> 0) + 1 >> 0;
		ui.cache = {};
		return $ifaceNil;
	};
	termui.prototype.InitElements = function() { return this.$val.InitElements(); };
	termui.ptr.prototype.Draw = function(cell$1, x, y) {
		var _entry, _key, _tuple, canvas, cell$1, ctx, cv, ok, ui, x, y;
		ui = this;
		canvas = null;
		_tuple = (_entry = ui.cache[UICell.keyFor(cell$1)], _entry !== undefined ? [_entry.v, true] : [null, false]);
		cv = _tuple[0];
		ok = _tuple[1];
		if (ok) {
			canvas = cv;
		} else {
			canvas = $global.document.createElement($externalize("canvas", $String));
			ctx = canvas.getContext($externalize("2d", $String));
			canvas.width = ui.width;
			canvas.height = 22;
			ctx.font = ui.ctx.font;
			ctx.fillStyle = $externalize(new uicolor(cell$1.bg).String(), $String);
			ctx.fillRect(0, 0, ui.width, 22);
			ctx.fillStyle = $externalize(new uicolor(cell$1.fg).String(), $String);
			ctx.fillText($externalize(($encodeRune(cell$1.r)), $String), 0, 18);
			_key = $clone(cell$1, UICell); (ui.cache || $throwRuntimeError("assignment to entry in nil map"))[UICell.keyFor(_key)] = { k: _key, v: canvas };
		}
		ui.ctx.drawImage(canvas, $imul(x, ui.width), $imul(22, y));
	};
	termui.prototype.Draw = function(cell$1, x, y) { return this.$val.Draw(cell$1, x, y); };
	termui.ptr.prototype.GetMousePos = function(evt) {
		var _q, _q$1, _q$2, _tmp, _tmp$1, canvas, evt, rect, ui, x, y;
		x = 0;
		y = 0;
		ui = this;
		canvas = $global.document.getElementById($externalize("gamecanvas", $String));
		rect = canvas.getBoundingClientRect();
		x = ($parseInt(evt.clientX) >> 0) - ($parseInt(rect.left) >> 0) >> 0;
		y = ($parseInt(evt.clientY) >> 0) - ($parseInt(rect.top) >> 0) >> 0;
		_tmp = (_q = ((x - (_q$1 = ui.width / 2, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero")) >> 0)) / ui.width, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
		_tmp$1 = (_q$2 = ((y - 8 >> 0)) / 22, (_q$2 === _q$2 && _q$2 !== 1/0 && _q$2 !== -1/0) ? _q$2 >> 0 : $throwRuntimeError("integer divide by zero"));
		x = _tmp;
		y = _tmp$1;
		return [x, y];
	};
	termui.prototype.GetMousePos = function(evt) { return this.$val.GetMousePos(evt); };
	logEntry.ptr.prototype.String = function() {
		var e;
		e = this;
		return e.Text;
	};
	logEntry.prototype.String = function() { return this.$val.String(); };
	game.ptr.prototype.Print = function(s) {
		var e, g, s;
		g = this;
		e = new logEntry.ptr(s, g.LogIndex, false, 0);
		g.PrintEntry($clone(e, logEntry));
	};
	game.prototype.Print = function(s) { return this.$val.Print(s); };
	game.ptr.prototype.PrintStyled = function(s, style) {
		var e, g, s, style;
		g = this;
		e = new logEntry.ptr(s, g.LogIndex, false, style);
		g.PrintEntry($clone(e, logEntry));
	};
	game.prototype.PrintStyled = function(s, style) { return this.$val.PrintStyled(s, style); };
	game.ptr.prototype.Printf = function(format, a) {
		var _r, a, e, format, g, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; a = $f.a; e = $f.e; format = $f.format; g = $f.g; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		g = this;
		_r = fmt.Sprintf(format, a); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		e = new logEntry.ptr(_r, g.LogIndex, false, 0);
		g.PrintEntry($clone(e, logEntry));
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: game.ptr.prototype.Printf }; } $f._r = _r; $f.a = a; $f.e = e; $f.format = format; $f.g = g; $f.$s = $s; $f.$r = $r; return $f;
	};
	game.prototype.Printf = function(format, a) { return this.$val.Printf(format, a); };
	game.ptr.prototype.PrintfStyled = function(format, style, a) {
		var _r, a, e, format, g, style, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; a = $f.a; e = $f.e; format = $f.format; g = $f.g; style = $f.style; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		g = this;
		_r = fmt.Sprintf(format, a); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		e = new logEntry.ptr(_r, g.LogIndex, false, style);
		g.PrintEntry($clone(e, logEntry));
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: game.ptr.prototype.PrintfStyled }; } $f._r = _r; $f.a = a; $f.e = e; $f.format = format; $f.g = g; $f.style = style; $f.$s = $s; $f.$r = $r; return $f;
	};
	game.prototype.PrintfStyled = function(format, style, a) { return this.$val.PrintfStyled(format, style, a); };
	game.ptr.prototype.PrintEntry = function(e) {
		var e, g;
		g = this;
		if (e.Index === g.LogNextTick) {
			e.Tick = true;
		}
		g.Log = $append(g.Log, e);
		g.LogIndex = g.LogIndex + (1) >> 0;
		if (g.Log.$length > 10000) {
			g.Log = $subslice(g.Log, 5000);
		}
	};
	game.prototype.PrintEntry = function(e) { return this.$val.PrintEntry(e); };
	game.ptr.prototype.StoryPrint = function(s) {
		var _r, g, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; g = $f.g; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		g = this;
		_r = fmt.Sprintf("Depth %2d|Turn %7.1f| %s", new sliceType$7([new $Int(g.Depth), new $Float64((g.Turn) / 10), new $String(s)])); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		g.Story = $append(g.Story, _r);
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: game.ptr.prototype.StoryPrint }; } $f._r = _r; $f.g = g; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	game.prototype.StoryPrint = function(s) { return this.$val.StoryPrint(s); };
	game.ptr.prototype.StoryPrintf = function(format, a) {
		var _arg, _arg$1, _arg$2, _r, _r$1, a, format, g, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _r = $f._r; _r$1 = $f._r$1; a = $f.a; format = $f.format; g = $f.g; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		g = this;
		_arg = new $Int(g.Depth);
		_arg$1 = new $Float64((g.Turn) / 10);
		_r = fmt.Sprintf(format, a); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_arg$2 = new $String(_r);
		_r$1 = fmt.Sprintf("Depth %2d|Turn %7.1f| %s", new sliceType$7([_arg, _arg$1, _arg$2])); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		g.Story = $append(g.Story, _r$1);
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: game.ptr.prototype.StoryPrintf }; } $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._r = _r; $f._r$1 = _r$1; $f.a = a; $f.format = format; $f.g = g; $f.$s = $s; $f.$r = $r; return $f;
	};
	game.prototype.StoryPrintf = function(format, a) { return this.$val.StoryPrintf(format, a); };
	game.ptr.prototype.CrackSound = function() {
		var _1, _r, g, text, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _r = $f._r; g = $f.g; text = $f.text; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		text = "";
		g = this;
			_r = RandInt(4); /* */ $s = 2; case 2: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_1 = _r;
			if (_1 === (0)) {
				text = "Crack!";
			} else if (_1 === (1)) {
				text = "Crash!";
			} else if (_1 === (2)) {
				text = "Crunch!";
			} else if (_1 === (3)) {
				text = "Creak!";
			}
		case 1:
		text = text;
		$s = -1; return text;
		/* */ } return; } if ($f === undefined) { $f = { $blk: game.ptr.prototype.CrackSound }; } $f._1 = _1; $f._r = _r; $f.g = g; $f.text = text; $f.$s = $s; $f.$r = $r; return $f;
	};
	game.prototype.CrackSound = function() { return this.$val.CrackSound(); };
	game.ptr.prototype.ExplosionSound = function() {
		var _1, _r, g, text, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _r = $f._r; g = $f.g; text = $f.text; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		text = "";
		g = this;
			_r = RandInt(3); /* */ $s = 2; case 2: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_1 = _r;
			if (_1 === (0)) {
				text = "Bang!";
			} else if (_1 === (1)) {
				text = "Pop!";
			} else if (_1 === (2)) {
				text = "Boom!";
			}
		case 1:
		text = text;
		$s = -1; return text;
		/* */ } return; } if ($f === undefined) { $f = { $blk: game.ptr.prototype.ExplosionSound }; } $f._1 = _1; $f._r = _r; $f.g = g; $f.text = text; $f.$s = $s; $f.$r = $r; return $f;
	};
	game.prototype.ExplosionSound = function() { return this.$val.ExplosionSound(); };
	rayMap.prototype.get = function(p) {
		var _entry, _key, _tuple, ok, p, r, rm;
		rm = this.$val;
		_tuple = (_entry = rm[position.keyFor(p)], _entry !== undefined ? [_entry.v, true] : [ptrType$16.nil, false]);
		r = _tuple[0];
		ok = _tuple[1];
		if (!ok) {
			r = new raynode.ptr(0);
			_key = $clone(p, position); (rm || $throwRuntimeError("assignment to entry in nil map"))[position.keyFor(_key)] = { k: _key, v: r };
		}
		return r;
	};
	$ptrType(rayMap).prototype.get = function(p) { return new rayMap(this.$get()).get(p); };
	game.ptr.prototype.bestParent = function(rm, from, pos) {
		var _entry, _entry$1, _entry$2, _r, b, from, g, p, pos, rm, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _entry = $f._entry; _entry$1 = $f._entry$1; _entry$2 = $f._entry$2; _r = $f._r; b = $f.b; from = $f.from; g = $f.g; p = $f.p; pos = $f.pos; rm = $f.rm; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		g = this;
		_r = $clone(pos, position).Parents($clone(from, position)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		p = _r;
		b = $clone((0 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 0]), position);
		if (p.$length > 1 && ((_entry = rm[position.keyFor((1 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 1]))], _entry !== undefined ? _entry.v : ptrType$16.nil).Cost + g.losCost($clone((1 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 1]), position)) >> 0) < ((_entry$1 = rm[position.keyFor(b)], _entry$1 !== undefined ? _entry$1.v : ptrType$16.nil).Cost + g.losCost($clone(b, position)) >> 0)) {
			position.copy(b, (1 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 1]));
		}
		$s = -1; return [b, (_entry$2 = rm[position.keyFor(b)], _entry$2 !== undefined ? _entry$2.v : ptrType$16.nil).Cost + g.losCost($clone(b, position)) >> 0];
		/* */ } return; } if ($f === undefined) { $f = { $blk: game.ptr.prototype.bestParent }; } $f._entry = _entry; $f._entry$1 = _entry$1; $f._entry$2 = _entry$2; $f._r = _r; $f.b = b; $f.from = from; $f.g = g; $f.p = p; $f.pos = pos; $f.rm = rm; $f.$s = $s; $f.$r = $r; return $f;
	};
	game.prototype.bestParent = function(rm, from, pos) { return this.$val.bestParent(rm, from, pos); };
	game.ptr.prototype.losCost = function(pos) {
		var _entry, _entry$1, _entry$2, _tuple, _tuple$1, _tuple$2, _tuple$3, c, g, mons, ok, ok$1, ok$2, pos;
		g = this;
		if ($equal(g.Player.Pos, pos, position)) {
			return 0;
		}
		c = $clone(g.Dungeon.Cell($clone(pos, position)), cell);
		if (c.T === 0) {
			return g.LosRange();
		}
		_tuple = (_entry = g.Clouds[position.keyFor(pos)], _entry !== undefined ? [_entry.v, true] : [0, false]);
		ok = _tuple[1];
		if (ok) {
			return g.LosRange();
		}
		_tuple$1 = (_entry$1 = g.Doors[position.keyFor(pos)], _entry$1 !== undefined ? [_entry$1.v, true] : [false, false]);
		ok$1 = _tuple$1[1];
		if (ok$1) {
			if (!($equal(pos, g.Player.Pos, position))) {
				_tuple$2 = g.MonsterAt($clone(pos, position));
				mons = _tuple$2[0];
				if (!mons.Exists()) {
					return g.LosRange();
				}
			}
		}
		_tuple$3 = (_entry$2 = g.Fungus[position.keyFor(pos)], _entry$2 !== undefined ? [_entry$2.v, true] : [0, false]);
		ok$2 = _tuple$3[1];
		if (ok$2) {
			return g.LosRange() - 1 >> 0;
		}
		return 1;
	};
	game.prototype.losCost = function(pos) { return this.$val.losCost(pos); };
	game.ptr.prototype.buildRayMap = function(from, distance) {
		var _i, _i$1, _key, _key$1, _key$2, _r, _r$1, _ref, _ref$1, _tuple, _tuple$1, c, c$1, d, distance, from, g, pos, pos$1, rm, x, y, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _i$1 = $f._i$1; _key = $f._key; _key$1 = $f._key$1; _key$2 = $f._key$2; _r = $f._r; _r$1 = $f._r$1; _ref = $f._ref; _ref$1 = $f._ref$1; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; c = $f.c; c$1 = $f.c$1; d = $f.d; distance = $f.distance; from = $f.from; g = $f.g; pos = $f.pos; pos$1 = $f.pos$1; rm = $f.rm; x = $f.x; y = $f.y; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		g = this;
		rm = $makeMap(position.keyFor, []);
		_key = $clone(from, position); (rm || $throwRuntimeError("assignment to entry in nil map"))[position.keyFor(_key)] = { k: _key, v: new raynode.ptr(0) };
		d = 1;
		/* while (true) { */ case 1:
			/* if (!(d <= distance)) { break; } */ if(!(d <= distance)) { $s = 2; continue; }
			x = -d + from.X >> 0;
			/* while (true) { */ case 3:
				/* if (!(x <= (d + from.X >> 0))) { break; } */ if(!(x <= (d + from.X >> 0))) { $s = 4; continue; }
				_ref = new sliceType$5([new position.ptr(x, from.Y + d >> 0), new position.ptr(x, from.Y - d >> 0)]);
				_i = 0;
				/* while (true) { */ case 5:
					/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 6; continue; }
					pos = $clone(((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]), position);
					/* */ if (!$clone(pos, position).valid()) { $s = 7; continue; }
					/* */ $s = 8; continue;
					/* if (!$clone(pos, position).valid()) { */ case 7:
						_i++;
						/* continue; */ $s = 5; continue;
					/* } */ case 8:
					_r = g.bestParent(rm, $clone(from, position), $clone(pos, position)); /* */ $s = 9; case 9: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
					_tuple = _r;
					c = _tuple[1];
					_key$1 = $clone(pos, position); (rm || $throwRuntimeError("assignment to entry in nil map"))[position.keyFor(_key$1)] = { k: _key$1, v: new raynode.ptr(c) };
					_i++;
				/* } */ $s = 5; continue; case 6:
				x = x + (1) >> 0;
			/* } */ $s = 3; continue; case 4:
			y = (-d + 1 >> 0) + from.Y >> 0;
			/* while (true) { */ case 10:
				/* if (!(y <= ((d - 1 >> 0) + from.Y >> 0))) { break; } */ if(!(y <= ((d - 1 >> 0) + from.Y >> 0))) { $s = 11; continue; }
				_ref$1 = new sliceType$5([new position.ptr(from.X + d >> 0, y), new position.ptr(from.X - d >> 0, y)]);
				_i$1 = 0;
				/* while (true) { */ case 12:
					/* if (!(_i$1 < _ref$1.$length)) { break; } */ if(!(_i$1 < _ref$1.$length)) { $s = 13; continue; }
					pos$1 = $clone(((_i$1 < 0 || _i$1 >= _ref$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$1.$array[_ref$1.$offset + _i$1]), position);
					/* */ if (!$clone(pos$1, position).valid()) { $s = 14; continue; }
					/* */ $s = 15; continue;
					/* if (!$clone(pos$1, position).valid()) { */ case 14:
						_i$1++;
						/* continue; */ $s = 12; continue;
					/* } */ case 15:
					_r$1 = g.bestParent(rm, $clone(from, position), $clone(pos$1, position)); /* */ $s = 16; case 16: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
					_tuple$1 = _r$1;
					c$1 = _tuple$1[1];
					_key$2 = $clone(pos$1, position); (rm || $throwRuntimeError("assignment to entry in nil map"))[position.keyFor(_key$2)] = { k: _key$2, v: new raynode.ptr(c$1) };
					_i$1++;
				/* } */ $s = 12; continue; case 13:
				y = y + (1) >> 0;
			/* } */ $s = 10; continue; case 11:
			d = d + (1) >> 0;
		/* } */ $s = 1; continue; case 2:
		$s = -1; return rm;
		/* */ } return; } if ($f === undefined) { $f = { $blk: game.ptr.prototype.buildRayMap }; } $f._i = _i; $f._i$1 = _i$1; $f._key = _key; $f._key$1 = _key$1; $f._key$2 = _key$2; $f._r = _r; $f._r$1 = _r$1; $f._ref = _ref; $f._ref$1 = _ref$1; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.c = c; $f.c$1 = c$1; $f.d = d; $f.distance = distance; $f.from = from; $f.g = g; $f.pos = pos; $f.pos$1 = pos$1; $f.rm = rm; $f.x = x; $f.y = y; $f.$s = $s; $f.$r = $r; return $f;
	};
	game.prototype.buildRayMap = function(from, distance) { return this.$val.buildRayMap(from, distance); };
	game.ptr.prototype.LosRange = function() {
		var _entry, g, losRange;
		g = this;
		losRange = 6;
		if ((_entry = g.Player.Aptitudes[aptitude.keyFor(6)], _entry !== undefined ? _entry.v : false)) {
			losRange = losRange - (2) >> 0;
		}
		return losRange;
	};
	game.prototype.LosRange = function() { return this.$val.LosRange(); };
	game.ptr.prototype.StopAuto = function() {
		var g;
		g = this;
		g.AutoHalt = true;
		g.AutoDir = ptrType$11.nil;
		g.AutoTarget = ptrType$1.nil;
		g.Resting = false;
	};
	game.prototype.StopAuto = function() { return this.$val.StopAuto(); };
	game.ptr.prototype.ComputeLOS = function() {
		var _entry, _entry$1, _i, _i$1, _key, _keys, _r, _r$1, _ref, _ref$1, g, losRange, m, mons, n, pos, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _entry = $f._entry; _entry$1 = $f._entry$1; _i = $f._i; _i$1 = $f._i$1; _key = $f._key; _keys = $f._keys; _r = $f._r; _r$1 = $f._r$1; _ref = $f._ref; _ref$1 = $f._ref$1; g = $f.g; losRange = $f.losRange; m = $f.m; mons = $f.mons; n = $f.n; pos = $f.pos; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		g = this;
		m = $makeMap(position.keyFor, []);
		losRange = g.LosRange();
		_r = g.buildRayMap($clone(g.Player.Pos, position), losRange); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		g.Player.Rays = _r;
		_ref = g.Player.Rays;
		_i = 0;
		_keys = $keys(_ref);
		/* while (true) { */ case 2:
			/* if (!(_i < _keys.length)) { break; } */ if(!(_i < _keys.length)) { $s = 3; continue; }
			_entry = _ref[_keys[_i]];
			if (_entry === undefined) {
				_i++;
				/* continue; */ $s = 2; continue;
			}
			pos = $clone(_entry.k, position);
			n = _entry.v;
			/* */ if (n.Cost < g.LosRange()) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (n.Cost < g.LosRange()) { */ case 4:
				_key = $clone(pos, position); (m || $throwRuntimeError("assignment to entry in nil map"))[position.keyFor(_key)] = { k: _key, v: true };
				$r = g.SeePosition($clone(pos, position)); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 5:
			_i++;
		/* } */ $s = 2; continue; case 3:
		g.Player.LOS = m;
		_ref$1 = g.Monsters;
		_i$1 = 0;
		/* while (true) { */ case 7:
			/* if (!(_i$1 < _ref$1.$length)) { break; } */ if(!(_i$1 < _ref$1.$length)) { $s = 8; continue; }
			mons = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$1.$array[_ref$1.$offset + _i$1]);
			/* */ if (mons.Exists() && (_entry$1 = g.Player.LOS[position.keyFor(mons.Pos)], _entry$1 !== undefined ? _entry$1.v : false)) { $s = 9; continue; }
			/* */ $s = 10; continue;
			/* if (mons.Exists() && (_entry$1 = g.Player.LOS[position.keyFor(mons.Pos)], _entry$1 !== undefined ? _entry$1.v : false)) { */ case 9:
				g.StopAuto();
				/* */ if (mons.Seen) { $s = 11; continue; }
				/* */ $s = 12; continue;
				/* if (mons.Seen) { */ case 11:
					_i$1++;
					/* continue; */ $s = 7; continue;
				/* } */ case 12:
				mons.Seen = true;
				$r = g.Printf("You see %s (%v).", new sliceType$7([new $String(new monsterKind(mons.Kind).Indefinite(false)), new monsterState(mons.State)])); /* */ $s = 13; case 13: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* */ if (new monsterKind(mons.Kind).Dangerousness() > 10) { $s = 14; continue; }
				/* */ $s = 15; continue;
				/* if (new monsterKind(mons.Kind).Dangerousness() > 10) { */ case 14:
					_r$1 = new monsterKind(mons.Kind).SeenStoryText(); /* */ $s = 16; case 16: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
					$r = g.StoryPrint(_r$1); /* */ $s = 17; case 17: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 15:
			/* } */ case 10:
			_i$1++;
		/* } */ $s = 7; continue; case 8:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: game.ptr.prototype.ComputeLOS }; } $f._entry = _entry; $f._entry$1 = _entry$1; $f._i = _i; $f._i$1 = _i$1; $f._key = _key; $f._keys = _keys; $f._r = _r; $f._r$1 = _r$1; $f._ref = _ref; $f._ref$1 = _ref$1; $f.g = g; $f.losRange = losRange; $f.m = m; $f.mons = mons; $f.n = n; $f.pos = pos; $f.$s = $s; $f.$r = $r; return $f;
	};
	game.prototype.ComputeLOS = function() { return this.$val.ComputeLOS(); };
	game.ptr.prototype.SeePosition = function(pos) {
		var _arg, _arg$1, _arg$2, _arg$3, _arg$4, _arg$5, _arg$6, _entry, _entry$1, _entry$2, _entry$3, _entry$4, _entry$5, _entry$6, _entry$7, _entry$8, _r, _r$1, _r$2, _r$3, _r$4, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, c, cld, eq, g, ok, ok$1, ok$2, ok$3, ok$4, pos, rod$1, see, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _arg$3 = $f._arg$3; _arg$4 = $f._arg$4; _arg$5 = $f._arg$5; _arg$6 = $f._arg$6; _entry = $f._entry; _entry$1 = $f._entry$1; _entry$2 = $f._entry$2; _entry$3 = $f._entry$3; _entry$4 = $f._entry$4; _entry$5 = $f._entry$5; _entry$6 = $f._entry$6; _entry$7 = $f._entry$7; _entry$8 = $f._entry$8; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; _tuple$4 = $f._tuple$4; c = $f.c; cld = $f.cld; eq = $f.eq; g = $f.g; ok = $f.ok; ok$1 = $f.ok$1; ok$2 = $f.ok$2; ok$3 = $f.ok$3; ok$4 = $f.ok$4; pos = $f.pos; rod$1 = $f.rod$1; see = $f.see; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		g = this;
		/* */ if (!g.Dungeon.Cell($clone(pos, position)).Explored) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!g.Dungeon.Cell($clone(pos, position)).Explored) { */ case 1:
			see = "see";
			_tuple = (_entry = g.Collectables[position.keyFor(pos)], _entry !== undefined ? [_entry.v, true] : [ptrType$4.nil, false]);
			c = _tuple[0];
			ok = _tuple[1];
			/* */ if (ok) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (ok) { */ case 4:
				g.StopAuto();
				/* */ if (c.Quantity > 1) { $s = 7; continue; }
				/* */ $s = 8; continue;
				/* if (c.Quantity > 1) { */ case 7:
					_arg = new $String(see);
					_arg$1 = new $Int(c.Quantity);
					_r = c.Consumable.Plural(); /* */ $s = 10; case 10: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
					_arg$2 = new $String(_r);
					$r = g.Printf("You %s %d %s.", new sliceType$7([_arg, _arg$1, _arg$2])); /* */ $s = 11; case 11: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$s = 9; continue;
				/* } else { */ case 8:
					_arg$3 = new $String(see);
					_r$1 = c.Consumable.String(); /* */ $s = 12; case 12: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
					_r$2 = Indefinite(_r$1, false); /* */ $s = 13; case 13: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
					_arg$4 = new $String(_r$2);
					$r = g.Printf("You %s %s.", new sliceType$7([_arg$3, _arg$4])); /* */ $s = 14; case 14: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 9:
				$s = 6; continue;
			/* } else { */ case 5:
				_tuple$1 = (_entry$1 = g.Stairs[position.keyFor(pos)], _entry$1 !== undefined ? [_entry$1.v, true] : [false, false]);
				ok$1 = _tuple$1[1];
				/* */ if (ok$1) { $s = 15; continue; }
				/* */ $s = 16; continue;
				/* if (ok$1) { */ case 15:
					g.StopAuto();
					$r = g.Printf("You %s stairs.", new sliceType$7([new $String(see)])); /* */ $s = 18; case 18: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$s = 17; continue;
				/* } else { */ case 16:
					_tuple$2 = (_entry$2 = g.Equipables[position.keyFor(pos)], _entry$2 !== undefined ? [_entry$2.v, true] : [$ifaceNil, false]);
					eq = _tuple$2[0];
					ok$2 = _tuple$2[1];
					/* */ if (ok$2) { $s = 19; continue; }
					/* */ $s = 20; continue;
					/* if (ok$2) { */ case 19:
						g.StopAuto();
						_arg$5 = new $String(see);
						_r$3 = eq.String(); /* */ $s = 22; case 22: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
						_r$4 = Indefinite(_r$3, false); /* */ $s = 23; case 23: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
						_arg$6 = new $String(_r$4);
						$r = g.Printf("You %s %s.", new sliceType$7([_arg$5, _arg$6])); /* */ $s = 24; case 24: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						$s = 21; continue;
					/* } else { */ case 20:
						_tuple$3 = (_entry$3 = g.Rods[position.keyFor(pos)], _entry$3 !== undefined ? [_entry$3.v, true] : [0, false]);
						rod$1 = _tuple$3[0];
						ok$3 = _tuple$3[1];
						/* */ if (ok$3) { $s = 25; continue; }
						/* */ $s = 26; continue;
						/* if (ok$3) { */ case 25:
							g.StopAuto();
							$r = g.Printf("You %s %s.", new sliceType$7([new $String(see), new $String(Indefinite(new rod(rod$1).String(), false))])); /* */ $s = 27; case 27: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						/* } */ case 26:
					/* } */ case 21:
				/* } */ case 17:
			/* } */ case 6:
			g.FairAction();
			g.Dungeon.SetExplored($clone(pos, position));
			g.DijkstraMapRebuild = true;
			$s = 3; continue;
		/* } else { */ case 2:
			/* */ if ((_entry$4 = g.UnknownDig[position.keyFor(pos)], _entry$4 !== undefined ? _entry$4.v : false)) { $s = 28; continue; }
			/* */ $s = 29; continue;
			/* if ((_entry$4 = g.UnknownDig[position.keyFor(pos)], _entry$4 !== undefined ? _entry$4.v : false)) { */ case 28:
				g.StopAuto();
				$r = g.Printf("There is no more a wall there.", new sliceType$7([])); /* */ $s = 30; case 30: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				g.DijkstraMapRebuild = true;
			/* } */ case 29:
			_tuple$4 = (_entry$5 = g.Clouds[position.keyFor(pos)], _entry$5 !== undefined ? [_entry$5.v, true] : [0, false]);
			cld = _tuple$4[0];
			ok$4 = _tuple$4[1];
			/* */ if (ok$4 && (cld === 1) && (_entry$6 = g.UnknownBurn[position.keyFor(pos)], _entry$6 !== undefined ? _entry$6.v : false)) { $s = 31; continue; }
			/* */ $s = 32; continue;
			/* if (ok$4 && (cld === 1) && (_entry$6 = g.UnknownBurn[position.keyFor(pos)], _entry$6 !== undefined ? _entry$6.v : false)) { */ case 31:
				g.StopAuto();
				$r = g.Printf("There are flames there.", new sliceType$7([])); /* */ $s = 33; case 33: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				g.DijkstraMapRebuild = true;
			/* } */ case 32:
		/* } */ case 3:
		if ((_entry$7 = g.UnknownDig[position.keyFor(pos)], _entry$7 !== undefined ? _entry$7.v : false)) {
			delete g.UnknownDig[position.keyFor(pos)];
			delete g.TemporalWalls[position.keyFor(pos)];
		}
		if ((_entry$8 = g.UnknownBurn[position.keyFor(pos)], _entry$8 !== undefined ? _entry$8.v : false)) {
			delete g.UnknownBurn[position.keyFor(pos)];
		}
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: game.ptr.prototype.SeePosition }; } $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._arg$3 = _arg$3; $f._arg$4 = _arg$4; $f._arg$5 = _arg$5; $f._arg$6 = _arg$6; $f._entry = _entry; $f._entry$1 = _entry$1; $f._entry$2 = _entry$2; $f._entry$3 = _entry$3; $f._entry$4 = _entry$4; $f._entry$5 = _entry$5; $f._entry$6 = _entry$6; $f._entry$7 = _entry$7; $f._entry$8 = _entry$8; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f._tuple$4 = _tuple$4; $f.c = c; $f.cld = cld; $f.eq = eq; $f.g = g; $f.ok = ok; $f.ok$1 = ok$1; $f.ok$2 = ok$2; $f.ok$3 = ok$3; $f.ok$4 = ok$4; $f.pos = pos; $f.rod$1 = rod$1; $f.see = see; $f.$s = $s; $f.$r = $r; return $f;
	};
	game.prototype.SeePosition = function(pos) { return this.$val.SeePosition(pos); };
	game.ptr.prototype.ComputeExclusion = function(pos, toggle) {
		var _i, _i$1, _key, _key$1, _key$2, _ref, _ref$1, d, exclusionRange, g, pos, pos$1, pos$2, toggle, x, y;
		g = this;
		exclusionRange = g.LosRange();
		_key = $clone(pos, position); (g.ExclusionsMap || $throwRuntimeError("assignment to entry in nil map"))[position.keyFor(_key)] = { k: _key, v: toggle };
		d = 1;
		while (true) {
			if (!(d <= exclusionRange)) { break; }
			x = -d + pos.X >> 0;
			while (true) {
				if (!(x <= (d + pos.X >> 0))) { break; }
				_ref = new sliceType$5([new position.ptr(x, pos.Y + d >> 0), new position.ptr(x, pos.Y - d >> 0)]);
				_i = 0;
				while (true) {
					if (!(_i < _ref.$length)) { break; }
					pos$1 = $clone(((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]), position);
					if (!$clone(pos$1, position).valid()) {
						_i++;
						continue;
					}
					_key$1 = $clone(pos$1, position); (g.ExclusionsMap || $throwRuntimeError("assignment to entry in nil map"))[position.keyFor(_key$1)] = { k: _key$1, v: toggle };
					_i++;
				}
				x = x + (1) >> 0;
			}
			y = (-d + 1 >> 0) + pos.Y >> 0;
			while (true) {
				if (!(y <= ((d - 1 >> 0) + pos.Y >> 0))) { break; }
				_ref$1 = new sliceType$5([new position.ptr(pos.X + d >> 0, y), new position.ptr(pos.X - d >> 0, y)]);
				_i$1 = 0;
				while (true) {
					if (!(_i$1 < _ref$1.$length)) { break; }
					pos$2 = $clone(((_i$1 < 0 || _i$1 >= _ref$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$1.$array[_ref$1.$offset + _i$1]), position);
					if (!$clone(pos$2, position).valid()) {
						_i$1++;
						continue;
					}
					_key$2 = $clone(pos$2, position); (g.ExclusionsMap || $throwRuntimeError("assignment to entry in nil map"))[position.keyFor(_key$2)] = { k: _key$2, v: toggle };
					_i$1++;
				}
				y = y + (1) >> 0;
			}
			d = d + (1) >> 0;
		}
	};
	game.prototype.ComputeExclusion = function(pos, toggle) { return this.$val.ComputeExclusion(pos, toggle); };
	game.ptr.prototype.Ray = function(pos) {
		var _entry, _r, _tuple, g, pos, ray, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _entry = $f._entry; _r = $f._r; _tuple = $f._tuple; g = $f.g; pos = $f.pos; ray = $f.ray; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		g = this;
		if (!(_entry = g.Player.LOS[position.keyFor(pos)], _entry !== undefined ? _entry.v : false)) {
			$s = -1; return sliceType$5.nil;
		}
		ray = new sliceType$5([]);
		/* while (true) { */ case 1:
			/* if (!(!($equal(pos, g.Player.Pos, position)))) { break; } */ if(!(!($equal(pos, g.Player.Pos, position)))) { $s = 2; continue; }
			ray = $append(ray, pos);
			_r = g.bestParent(g.Player.Rays, $clone(g.Player.Pos, position), $clone(pos, position)); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r;
			position.copy(pos, _tuple[0]);
		/* } */ $s = 1; continue; case 2:
		$s = -1; return ray;
		/* */ } return; } if ($f === undefined) { $f = { $blk: game.ptr.prototype.Ray }; } $f._entry = _entry; $f._r = _r; $f._tuple = _tuple; $f.g = g; $f.pos = pos; $f.ray = ray; $f.$s = $s; $f.$r = $r; return $f;
	};
	game.prototype.Ray = function(pos) { return this.$val.Ray(pos); };
	game.ptr.prototype.ComputeRayHighlight = function(pos) {
		var _i, _key, _r, _ref, g, p, pos, ray, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _key = $f._key; _r = $f._r; _ref = $f._ref; g = $f.g; p = $f.p; pos = $f.pos; ray = $f.ray; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		g = this;
		g.Highlight = $makeMap(position.keyFor, []);
		_r = g.Ray($clone(pos, position)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		ray = _r;
		_ref = ray;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			p = $clone(((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]), position);
			_key = $clone(p, position); (g.Highlight || $throwRuntimeError("assignment to entry in nil map"))[position.keyFor(_key)] = { k: _key, v: true };
			_i++;
		}
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: game.ptr.prototype.ComputeRayHighlight }; } $f._i = _i; $f._key = _key; $f._r = _r; $f._ref = _ref; $f.g = g; $f.p = p; $f.pos = pos; $f.ray = ray; $f.$s = $s; $f.$r = $r; return $f;
	};
	game.prototype.ComputeRayHighlight = function(pos) { return this.$val.ComputeRayHighlight(pos); };
	game.ptr.prototype.ComputeNoise = function() {
		var _1, _entry, _entry$1, _i, _key, _keys, _r, _r$1, _ref, _tuple, _v, count, dij, g, mons, nm, noise, pos, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _entry = $f._entry; _entry$1 = $f._entry$1; _i = $f._i; _key = $f._key; _keys = $f._keys; _r = $f._r; _r$1 = $f._r$1; _ref = $f._ref; _tuple = $f._tuple; _v = $f._v; count = $f.count; dij = $f.dij; g = $f.g; mons = $f.mons; nm = $f.nm; noise = $f.noise; pos = $f.pos; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		g = this;
		dij = new noisePath.ptr(g, arrayType$1.zero());
		_r = Dijkstra(dij, new sliceType$5([$clone(g.Player.Pos, position)]), g.LosRange() + 2 >> 0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		nm = _r;
		count = 0;
		noise = $makeMap(position.keyFor, []);
		_ref = nm;
		_i = 0;
		_keys = $keys(_ref);
		/* while (true) { */ case 2:
			/* if (!(_i < _keys.length)) { break; } */ if(!(_i < _keys.length)) { $s = 3; continue; }
			_entry = _ref[_keys[_i]];
			if (_entry === undefined) {
				_i++;
				/* continue; */ $s = 2; continue;
			}
			pos = $clone(_entry.k, position);
			/* */ if ((_entry$1 = g.Player.LOS[position.keyFor(pos)], _entry$1 !== undefined ? _entry$1.v : false)) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if ((_entry$1 = g.Player.LOS[position.keyFor(pos)], _entry$1 !== undefined ? _entry$1.v : false)) { */ case 4:
				_i++;
				/* continue; */ $s = 2; continue;
			/* } */ case 5:
			_tuple = g.MonsterAt($clone(pos, position));
			mons = _tuple[0];
			if (!(mons.Exists() && !((mons.State === 0)))) { _v = false; $s = 8; continue s; }
			_r$1 = RandInt(3); /* */ $s = 9; case 9: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_v = _r$1 === 0; case 8:
			/* */ if (_v) { $s = 6; continue; }
			/* */ $s = 7; continue;
			/* if (_v) { */ case 6:
				_1 = mons.Kind;
				if ((_1 === (15)) || (_1 === (7)) || (_1 === (18))) {
				} else {
					_key = $clone(pos, position); (noise || $throwRuntimeError("assignment to entry in nil map"))[position.keyFor(_key)] = { k: _key, v: true };
					count = count + (1) >> 0;
				}
			/* } */ case 7:
			_i++;
		/* } */ $s = 2; continue; case 3:
		/* */ if (count > 0) { $s = 10; continue; }
		/* */ $s = 11; continue;
		/* if (count > 0) { */ case 10:
			/* */ if (count > 1) { $s = 12; continue; }
			/* */ $s = 13; continue;
			/* if (count > 1) { */ case 12:
				$r = g.Printf("You hear some footsteps (%dx).", new sliceType$7([new $Int(count)])); /* */ $s = 15; case 15: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 14; continue;
			/* } else { */ case 13:
				g.Print("You hear some footsteps.");
			/* } */ case 14:
			g.StopAuto();
		/* } */ case 11:
		g.Noise = noise;
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: game.ptr.prototype.ComputeNoise }; } $f._1 = _1; $f._entry = _entry; $f._entry$1 = _entry$1; $f._i = _i; $f._key = _key; $f._keys = _keys; $f._r = _r; $f._r$1 = _r$1; $f._ref = _ref; $f._tuple = _tuple; $f._v = _v; $f.count = count; $f.dij = dij; $f.g = g; $f.mons = mons; $f.nm = nm; $f.noise = noise; $f.pos = pos; $f.$s = $s; $f.$r = $r; return $f;
	};
	game.prototype.ComputeNoise = function() { return this.$val.ComputeNoise(); };
	monsterState.prototype.String = function() {
		var _1, m, st;
		m = this.$val;
		st = "";
		_1 = m;
		if (_1 === (0)) {
			st = "resting";
		} else if (_1 === (2)) {
			st = "wandering";
		} else if (_1 === (1)) {
			st = "hunting";
		}
		return st;
	};
	$ptrType(monsterState).prototype.String = function() { return new monsterState(this.$get()).String(); };
	monsterStatus.prototype.String = function() {
		var _1, st, text;
		text = "";
		st = this.$val;
		_1 = st;
		if (_1 === (0)) {
			text = "confused";
		} else if (_1 === (1)) {
			text = "exhausted";
		} else if (_1 === (2)) {
			text = "afraid";
		}
		text = text;
		return text;
	};
	$ptrType(monsterStatus).prototype.String = function() { return new monsterStatus(this.$get()).String(); };
	monsterKind.prototype.String = function() {
		var mk;
		mk = this.$val;
		return ((mk < 0 || mk >= $pkg.MonsData.$length) ? ($throwRuntimeError("index out of range"), undefined) : $pkg.MonsData.$array[$pkg.MonsData.$offset + mk]).name;
	};
	$ptrType(monsterKind).prototype.String = function() { return new monsterKind(this.$get()).String(); };
	monsterKind.prototype.MovementDelay = function() {
		var mk;
		mk = this.$val;
		return ((mk < 0 || mk >= $pkg.MonsData.$length) ? ($throwRuntimeError("index out of range"), undefined) : $pkg.MonsData.$array[$pkg.MonsData.$offset + mk]).movementDelay;
	};
	$ptrType(monsterKind).prototype.MovementDelay = function() { return new monsterKind(this.$get()).MovementDelay(); };
	monsterKind.prototype.Letter = function() {
		var mk;
		mk = this.$val;
		return ((mk < 0 || mk >= $pkg.MonsData.$length) ? ($throwRuntimeError("index out of range"), undefined) : $pkg.MonsData.$array[$pkg.MonsData.$offset + mk]).letter;
	};
	$ptrType(monsterKind).prototype.Letter = function() { return new monsterKind(this.$get()).Letter(); };
	monsterKind.prototype.AttackDelay = function() {
		var mk;
		mk = this.$val;
		return ((mk < 0 || mk >= $pkg.MonsData.$length) ? ($throwRuntimeError("index out of range"), undefined) : $pkg.MonsData.$array[$pkg.MonsData.$offset + mk]).attackDelay;
	};
	$ptrType(monsterKind).prototype.AttackDelay = function() { return new monsterKind(this.$get()).AttackDelay(); };
	monsterKind.prototype.BaseAttack = function() {
		var mk;
		mk = this.$val;
		return ((mk < 0 || mk >= $pkg.MonsData.$length) ? ($throwRuntimeError("index out of range"), undefined) : $pkg.MonsData.$array[$pkg.MonsData.$offset + mk]).baseAttack;
	};
	$ptrType(monsterKind).prototype.BaseAttack = function() { return new monsterKind(this.$get()).BaseAttack(); };
	monsterKind.prototype.MaxHP = function() {
		var mk;
		mk = this.$val;
		return ((mk < 0 || mk >= $pkg.MonsData.$length) ? ($throwRuntimeError("index out of range"), undefined) : $pkg.MonsData.$array[$pkg.MonsData.$offset + mk]).maxHP;
	};
	$ptrType(monsterKind).prototype.MaxHP = function() { return new monsterKind(this.$get()).MaxHP(); };
	monsterKind.prototype.Dangerousness = function() {
		var mk;
		mk = this.$val;
		return ((mk < 0 || mk >= $pkg.MonsData.$length) ? ($throwRuntimeError("index out of range"), undefined) : $pkg.MonsData.$array[$pkg.MonsData.$offset + mk]).dangerousness;
	};
	$ptrType(monsterKind).prototype.Dangerousness = function() { return new monsterKind(this.$get()).Dangerousness(); };
	monsterKind.prototype.Ranged = function() {
		var _1, mk;
		mk = this.$val;
		_1 = mk;
		if ((_1 === (13)) || (_1 === (2)) || (_1 === (8)) || (_1 === (18))) {
			return true;
		} else {
			return false;
		}
	};
	$ptrType(monsterKind).prototype.Ranged = function() { return new monsterKind(this.$get()).Ranged(); };
	monsterKind.prototype.Smiting = function() {
		var _1, mk;
		mk = this.$val;
		_1 = mk;
		if (_1 === (15)) {
			return true;
		} else {
			return false;
		}
	};
	$ptrType(monsterKind).prototype.Smiting = function() { return new monsterKind(this.$get()).Smiting(); };
	monsterKind.prototype.Desc = function() {
		var mk;
		mk = this.$val;
		return ((mk < 0 || mk >= monsDesc.$length) ? ($throwRuntimeError("index out of range"), undefined) : monsDesc.$array[monsDesc.$offset + mk]);
	};
	$ptrType(monsterKind).prototype.Desc = function() { return new monsterKind(this.$get()).Desc(); };
	monsterKind.prototype.SeenStoryText = function() {
		var _1, _r, mk, text, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _r = $f._r; mk = $f.mk; text = $f.text; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		text = "";
		mk = this.$val;
			_1 = mk;
			/* */ if (_1 === (19)) { $s = 2; continue; }
			/* */ $s = 3; continue;
			/* if (_1 === (19)) { */ case 2:
				text = "You saw Marevor.";
				$s = 4; continue;
			/* } else { */ case 3:
				_r = fmt.Sprintf("You saw %s.", new sliceType$7([new $String(Indefinite(new monsterKind(mk).String(), false))])); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				text = _r;
			/* } */ case 4:
		case 1:
		text = text;
		$s = -1; return text;
		/* */ } return; } if ($f === undefined) { $f = { $blk: monsterKind.prototype.SeenStoryText }; } $f._1 = _1; $f._r = _r; $f.mk = mk; $f.text = text; $f.$s = $s; $f.$r = $r; return $f;
	};
	$ptrType(monsterKind).prototype.SeenStoryText = function() { return new monsterKind(this.$get()).SeenStoryText(); };
	monsterKind.prototype.Indefinite = function(capital) {
		var _1, capital, mk, text;
		text = "";
		mk = this.$val;
		_1 = mk;
		if (_1 === (19)) {
			text = new monsterKind(mk).String();
		} else {
			text = Indefinite(new monsterKind(mk).String(), capital);
		}
		text = text;
		return text;
	};
	$ptrType(monsterKind).prototype.Indefinite = function(capital) { return new monsterKind(this.$get()).Indefinite(capital); };
	monsterKind.prototype.Definite = function(capital) {
		var _1, _r, _r$1, capital, mk, text, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _r = $f._r; _r$1 = $f._r$1; capital = $f.capital; mk = $f.mk; text = $f.text; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		text = "";
		mk = this.$val;
			_1 = mk;
			/* */ if (_1 === (19)) { $s = 2; continue; }
			/* */ if (capital) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (_1 === (19)) { */ case 2:
				text = new monsterKind(mk).String();
				$s = 5; continue;
			/* } else if (capital) { */ case 3:
				_r = fmt.Sprintf("The %s", new sliceType$7([new $String(new monsterKind(mk).String())])); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				text = _r;
				$s = 5; continue;
			/* } else { */ case 4:
				_r$1 = fmt.Sprintf("the %s", new sliceType$7([new $String(new monsterKind(mk).String())])); /* */ $s = 7; case 7: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				text = _r$1;
			/* } */ case 5:
		case 1:
		text = text;
		$s = -1; return text;
		/* */ } return; } if ($f === undefined) { $f = { $blk: monsterKind.prototype.Definite }; } $f._1 = _1; $f._r = _r; $f._r$1 = _r$1; $f.capital = capital; $f.mk = mk; $f.text = text; $f.$s = $s; $f.$r = $r; return $f;
	};
	$ptrType(monsterKind).prototype.Definite = function(capital) { return new monsterKind(this.$get()).Definite(capital); };
	game.ptr.prototype.GenBand = function(mbd, band) {
		var _entry, _entry$1, _i, _keys, _r, _r$1, _r$2, _r$3, _ref, _v, band, bandMonsters, g, i, interval, m, mbd, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _entry = $f._entry; _entry$1 = $f._entry$1; _i = $f._i; _keys = $f._keys; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _ref = $f._ref; _v = $f._v; band = $f.band; bandMonsters = $f.bandMonsters; g = $f.g; i = $f.i; interval = $f.interval; m = $f.m; mbd = $f.mbd; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		g = this;
		if ((_entry = g.GeneratedBands[monsterBand.keyFor(band)], _entry !== undefined ? _entry.v : 0) > 0 && mbd.unique) {
			$s = -1; return sliceType$16.nil;
		}
		_r = RandInt(3); /* */ $s = 4; case 4: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		if (g.Depth > (mbd.maxDepth + _r >> 0)) { _v = true; $s = 3; continue s; }
		_r$1 = RandInt(10); /* */ $s = 5; case 5: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_v = _r$1 === 0; case 3:
		/* */ if (_v) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (_v) { */ case 1:
			$s = -1; return sliceType$16.nil;
		/* } */ case 2:
		_r$2 = RandInt(3); /* */ $s = 8; case 8: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		/* */ if (g.Depth < (mbd.minDepth - _r$2 >> 0)) { $s = 6; continue; }
		/* */ $s = 7; continue;
		/* if (g.Depth < (mbd.minDepth - _r$2 >> 0)) { */ case 6:
			$s = -1; return sliceType$16.nil;
		/* } */ case 7:
		if (!mbd.band) {
			$s = -1; return new sliceType$16([mbd.monster]);
		}
		bandMonsters = new sliceType$16([]);
		_ref = mbd.distribution;
		_i = 0;
		_keys = $keys(_ref);
		/* while (true) { */ case 9:
			/* if (!(_i < _keys.length)) { break; } */ if(!(_i < _keys.length)) { $s = 10; continue; }
			_entry$1 = _ref[_keys[_i]];
			if (_entry$1 === undefined) {
				_i++;
				/* continue; */ $s = 9; continue;
			}
			m = _entry$1.k;
			interval = $clone(_entry$1.v, monsInterval);
			i = 0;
			/* while (true) { */ case 11:
				_r$3 = RandInt((interval.max - interval.min >> 0) + 1 >> 0); /* */ $s = 13; case 13: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				/* if (!(i < (interval.min + _r$3 >> 0))) { break; } */ if(!(i < (interval.min + _r$3 >> 0))) { $s = 12; continue; }
				bandMonsters = $append(bandMonsters, m);
				i = i + (1) >> 0;
			/* } */ $s = 11; continue; case 12:
			_i++;
		/* } */ $s = 9; continue; case 10:
		$s = -1; return bandMonsters;
		/* */ } return; } if ($f === undefined) { $f = { $blk: game.ptr.prototype.GenBand }; } $f._entry = _entry; $f._entry$1 = _entry$1; $f._i = _i; $f._keys = _keys; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._ref = _ref; $f._v = _v; $f.band = band; $f.bandMonsters = bandMonsters; $f.g = g; $f.i = i; $f.interval = interval; $f.m = m; $f.mbd = mbd; $f.$s = $s; $f.$r = $r; return $f;
	};
	game.prototype.GenBand = function(mbd, band) { return this.$val.GenBand(mbd, band); };
	monster.ptr.prototype.Init = function() {
		var _r, m, x, x$1, x$2, x$3, x$4, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; m = $f.m; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		m = this;
		_r = RandInt(3); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		m.HPmax = ((x = m.Kind, ((x < 0 || x >= $pkg.MonsData.$length) ? ($throwRuntimeError("index out of range"), undefined) : $pkg.MonsData.$array[$pkg.MonsData.$offset + x])).maxHP - 1 >> 0) + _r >> 0;
		m.Attack = (x$1 = m.Kind, ((x$1 < 0 || x$1 >= $pkg.MonsData.$length) ? ($throwRuntimeError("index out of range"), undefined) : $pkg.MonsData.$array[$pkg.MonsData.$offset + x$1])).baseAttack;
		m.HP = m.HPmax;
		m.Accuracy = (x$2 = m.Kind, ((x$2 < 0 || x$2 >= $pkg.MonsData.$length) ? ($throwRuntimeError("index out of range"), undefined) : $pkg.MonsData.$array[$pkg.MonsData.$offset + x$2])).accuracy;
		m.Armor = (x$3 = m.Kind, ((x$3 < 0 || x$3 >= $pkg.MonsData.$length) ? ($throwRuntimeError("index out of range"), undefined) : $pkg.MonsData.$array[$pkg.MonsData.$offset + x$3])).armor;
		m.Evasion = (x$4 = m.Kind, ((x$4 < 0 || x$4 >= $pkg.MonsData.$length) ? ($throwRuntimeError("index out of range"), undefined) : $pkg.MonsData.$array[$pkg.MonsData.$offset + x$4])).evasion;
		m.Statuses = $makeMap(monsterStatus.keyFor, []);
		if (m.Kind === 19) {
			m.State = 2;
		}
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: monster.ptr.prototype.Init }; } $f._r = _r; $f.m = m; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.$s = $s; $f.$r = $r; return $f;
	};
	monster.prototype.Init = function() { return this.$val.Init(); };
	monster.ptr.prototype.Status = function(st) {
		var _entry, m, st;
		m = this;
		return (_entry = m.Statuses[monsterStatus.keyFor(st)], _entry !== undefined ? _entry.v : 0) > 0;
	};
	monster.prototype.Status = function(st) { return this.$val.Status(st); };
	monster.ptr.prototype.Exists = function() {
		var m;
		m = this;
		return !(m === ptrType$9.nil) && m.HP > 0;
	};
	monster.prototype.Exists = function() { return this.$val.Exists(); };
	monster.ptr.prototype.AlternatePlacement = function(g) {
		var _i, _r, _r$1, _ref, _tuple, g, m, mons, neighbors, pos, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _r = $f._r; _r$1 = $f._r$1; _ref = $f._ref; _tuple = $f._tuple; g = $f.g; m = $f.m; mons = $f.mons; neighbors = $f.neighbors; pos = $f.pos; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		pos = [pos];
		m = this;
		neighbors = sliceType$5.nil;
		/* */ if (m.Status(0)) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (m.Status(0)) { */ case 1:
			_r = g.Dungeon.CardinalFreeNeighbors($clone(m.Pos, position)); /* */ $s = 4; case 4: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			neighbors = _r;
			$s = 3; continue;
		/* } else { */ case 2:
			_r$1 = g.Dungeon.FreeNeighbors($clone(m.Pos, position)); /* */ $s = 5; case 5: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			neighbors = _r$1;
		/* } */ case 3:
		_ref = neighbors;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			pos[0] = $clone(((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]), position);
			if (!(($clone(pos[0], position).Distance($clone(g.Player.Pos, position)) === 1))) {
				_i++;
				continue;
			}
			_tuple = g.MonsterAt($clone(pos[0], position));
			mons = _tuple[0];
			if (mons.Exists()) {
				_i++;
				continue;
			}
			$s = -1; return pos[0];
		}
		$s = -1; return ptrType$1.nil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: monster.ptr.prototype.AlternatePlacement }; } $f._i = _i; $f._r = _r; $f._r$1 = _r$1; $f._ref = _ref; $f._tuple = _tuple; $f.g = g; $f.m = m; $f.mons = mons; $f.neighbors = neighbors; $f.pos = pos; $f.$s = $s; $f.$r = $r; return $f;
	};
	monster.prototype.AlternatePlacement = function(g) { return this.$val.AlternatePlacement(g); };
	monster.ptr.prototype.TeleportPlayer = function(g, ev) {
		var _r, _r$1, _r$2, acc, ev, evasion, g, m, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; acc = $f.acc; ev = $f.ev; evasion = $f.evasion; g = $f.g; m = $f.m; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		m = this;
		_r = RandInt(g.Player.Evasion()); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		evasion = _r;
		_r$1 = RandInt(m.Accuracy); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		acc = _r$1;
		/* */ if (acc > evasion) { $s = 3; continue; }
		_r$2 = RandInt(2); /* */ $s = 6; case 6: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		/* */ if (_r$2 === 0) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (acc > evasion) { */ case 3:
			g.Print("Marevor pushes you through a monolith.");
			$r = g.StoryPrint("Marevor pushed you through a monolith."); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = g.Teleportation(ev); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 5; continue;
		/* } else if (_r$2 === 0) { */ case 4:
			g.Print("Marevor inadvertently goes into a monolith.");
			$r = m.TeleportAway(g); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 5:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: monster.ptr.prototype.TeleportPlayer }; } $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.acc = acc; $f.ev = ev; $f.evasion = evasion; $f.g = g; $f.m = m; $f.$s = $s; $f.$r = $r; return $f;
	};
	monster.prototype.TeleportPlayer = function(g, ev) { return this.$val.TeleportPlayer(g, ev); };
	monster.ptr.prototype.TeleportAway = function(g) {
		var _1, _arg, _entry, _entry$1, _r, _r$1, count, g, i, m, opos, pos, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _arg = $f._arg; _entry = $f._entry; _entry$1 = $f._entry$1; _r = $f._r; _r$1 = $f._r$1; count = $f.count; g = $f.g; i = $f.i; m = $f.m; opos = $f.opos; pos = $f.pos; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		m = this;
		pos = $clone(m.Pos, position);
		i = 0;
		count = 0;
		/* while (true) { */ case 1:
			count = count + (1) >> 0;
			if (count > 1000) {
				$panic(new $String("TeleportOther"));
			}
			_r = g.FreeCell(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			position.copy(pos, _r);
			if ($clone(pos, position).Distance($clone(m.Pos, position)) < 15 && i < 1000) {
				i = i + (1) >> 0;
				/* continue; */ $s = 1; continue;
			}
			/* break; */ $s = 2; continue;
		/* } */ $s = 1; continue; case 2:
		_1 = m.State;
		if (_1 === (1)) {
			m.State = 2;
		} else if ((_1 === (0)) || (_1 === (2))) {
			m.State = 2;
			position.copy(m.Target, m.Pos);
		}
		/* */ if ((_entry = g.Player.LOS[position.keyFor(m.Pos)], _entry !== undefined ? _entry.v : false)) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if ((_entry = g.Player.LOS[position.keyFor(m.Pos)], _entry !== undefined ? _entry.v : false)) { */ case 4:
			_r$1 = new monsterKind(m.Kind).Definite(true); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_arg = new $String(_r$1);
			$r = g.Printf("%s teleports away.", new sliceType$7([_arg])); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 5:
		opos = $clone(m.Pos, position);
		position.copy(m.Pos, pos);
		/* */ if ((_entry$1 = g.Player.LOS[position.keyFor(opos)], _entry$1 !== undefined ? _entry$1.v : false)) { $s = 8; continue; }
		/* */ $s = 9; continue;
		/* if ((_entry$1 = g.Player.LOS[position.keyFor(opos)], _entry$1 !== undefined ? _entry$1.v : false)) { */ case 8:
			$r = g.ui.TeleportAnimation(g, $clone(opos, position), $clone(pos, position), false); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 9:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: monster.ptr.prototype.TeleportAway }; } $f._1 = _1; $f._arg = _arg; $f._entry = _entry; $f._entry$1 = _entry$1; $f._r = _r; $f._r$1 = _r$1; $f.count = count; $f.g = g; $f.i = i; $f.m = m; $f.opos = opos; $f.pos = pos; $f.$s = $s; $f.$r = $r; return $f;
	};
	monster.prototype.TeleportAway = function(g) { return this.$val.TeleportAway(g); };
	monster.ptr.prototype.TeleportMonsterAway = function(g) {
		var _entry, _i, _r, _r$1, _ref, _tuple, _v, g, m, mons, neighbors, pos, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _entry = $f._entry; _i = $f._i; _r = $f._r; _r$1 = $f._r$1; _ref = $f._ref; _tuple = $f._tuple; _v = $f._v; g = $f.g; m = $f.m; mons = $f.mons; neighbors = $f.neighbors; pos = $f.pos; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		m = this;
		_r = g.Dungeon.FreeNeighbors($clone(m.Pos, position)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		neighbors = _r;
		_ref = neighbors;
		_i = 0;
		/* while (true) { */ case 2:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 3; continue; }
			pos = $clone(((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]), position);
			if ($equal(pos, m.Pos, position)) { _v = true; $s = 6; continue s; }
			_r$1 = RandInt(3); /* */ $s = 7; case 7: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_v = !((_r$1 === 0)); case 6:
			/* */ if (_v) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (_v) { */ case 4:
				_i++;
				/* continue; */ $s = 2; continue;
			/* } */ case 5:
			_tuple = g.MonsterAt($clone(pos, position));
			mons = _tuple[0];
			/* */ if (mons.Exists()) { $s = 8; continue; }
			/* */ $s = 9; continue;
			/* if (mons.Exists()) { */ case 8:
				if ((_entry = g.Player.LOS[position.keyFor(m.Pos)], _entry !== undefined ? _entry.v : false)) {
					g.Print("Marevor makes some strange gestures.");
				}
				$r = mons.TeleportAway(g); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = -1; return true;
			/* } */ case 9:
			_i++;
		/* } */ $s = 2; continue; case 3:
		$s = -1; return false;
		/* */ } return; } if ($f === undefined) { $f = { $blk: monster.ptr.prototype.TeleportMonsterAway }; } $f._entry = _entry; $f._i = _i; $f._r = _r; $f._r$1 = _r$1; $f._ref = _ref; $f._tuple = _tuple; $f._v = _v; $f.g = g; $f.m = m; $f.mons = mons; $f.neighbors = neighbors; $f.pos = pos; $f.$s = $s; $f.$r = $r; return $f;
	};
	monster.prototype.TeleportMonsterAway = function(g) { return this.$val.TeleportMonsterAway(g); };
	monster.ptr.prototype.AttackAction = function(g, ev) {
		var _r, ev, g, i, m, pos, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; ev = $f.ev; g = $f.g; i = $f.i; m = $f.m; pos = $f.pos; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		m = this;
			/* */ if (m.Obstructing) { $s = 2; continue; }
			/* */ $s = 3; continue;
			/* if (m.Obstructing) { */ case 2:
				m.Obstructing = false;
				_r = m.AlternatePlacement(g); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				pos = _r;
				/* */ if (!(pos === ptrType$1.nil)) { $s = 6; continue; }
				/* */ $s = 7; continue;
				/* if (!(pos === ptrType$1.nil)) { */ case 6:
					position.copy(m.Pos, pos);
					$r = ev.Renew(g, new monsterKind(m.Kind).MovementDelay()); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$s = -1; return;
				/* } */ case 7:
				/* */ if (m.Kind === 9) { $s = 9; continue; }
				/* */ if (m.Kind === 19) { $s = 10; continue; }
				/* */ $s = 11; continue;
				/* if (m.Kind === 9) { */ case 9:
					i = 0;
					/* while (true) { */ case 13:
						/* if (!(i <= 3)) { break; } */ if(!(i <= 3)) { $s = 14; continue; }
						$r = m.HitPlayer(g, ev); /* */ $s = 15; case 15: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						i = i + (1) >> 0;
					/* } */ $s = 13; continue; case 14:
					$s = 12; continue;
				/* } else if (m.Kind === 19) { */ case 10:
					$r = m.TeleportPlayer(g, ev); /* */ $s = 16; case 16: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$s = 12; continue;
				/* } else { */ case 11:
					$r = m.HitPlayer(g, ev); /* */ $s = 17; case 17: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 12:
				$r = ev.Renew(g, new monsterKind(m.Kind).AttackDelay()); /* */ $s = 18; case 18: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 4; continue;
			/* } else { */ case 3:
				/* */ if (m.Kind === 9) { $s = 19; continue; }
				/* */ if (m.Kind === 19) { $s = 20; continue; }
				/* */ $s = 21; continue;
				/* if (m.Kind === 9) { */ case 19:
					i = 0;
					/* while (true) { */ case 23:
						/* if (!(i <= 3)) { break; } */ if(!(i <= 3)) { $s = 24; continue; }
						$r = m.HitPlayer(g, ev); /* */ $s = 25; case 25: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						i = i + (1) >> 0;
					/* } */ $s = 23; continue; case 24:
					$s = 22; continue;
				/* } else if (m.Kind === 19) { */ case 20:
					$r = m.TeleportPlayer(g, ev); /* */ $s = 26; case 26: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$s = 22; continue;
				/* } else { */ case 21:
					$r = m.HitPlayer(g, ev); /* */ $s = 27; case 27: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 22:
				$r = ev.Renew(g, new monsterKind(m.Kind).AttackDelay()); /* */ $s = 28; case 28: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 4:
		case 1:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: monster.ptr.prototype.AttackAction }; } $f._r = _r; $f.ev = ev; $f.g = g; $f.i = i; $f.m = m; $f.pos = pos; $f.$s = $s; $f.$r = $r; return $f;
	};
	monster.prototype.AttackAction = function(g, ev) { return this.$val.AttackAction(g, ev); };
	monster.ptr.prototype.HandleTurn = function(g, ev) {
		var _1, _2, _arg, _entry, _entry$1, _entry$2, _entry$3, _entry$4, _i, _i$1, _key, _r, _r$1, _r$10, _r$11, _r$12, _r$13, _r$14, _r$15, _r$16, _r$17, _r$18, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _ref, _ref$1, _tuple, _v, _v$1, attack, ev, g, keepWandering, m, mons, mons$1, mpos, npos, ppos, r, recomputeLOS, target, wander, x, x$1, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _2 = $f._2; _arg = $f._arg; _entry = $f._entry; _entry$1 = $f._entry$1; _entry$2 = $f._entry$2; _entry$3 = $f._entry$3; _entry$4 = $f._entry$4; _i = $f._i; _i$1 = $f._i$1; _key = $f._key; _r = $f._r; _r$1 = $f._r$1; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$12 = $f._r$12; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _r$17 = $f._r$17; _r$18 = $f._r$18; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _ref = $f._ref; _ref$1 = $f._ref$1; _tuple = $f._tuple; _v = $f._v; _v$1 = $f._v$1; attack = $f.attack; ev = $f.ev; g = $f.g; keepWandering = $f.keepWandering; m = $f.m; mons = $f.mons; mons$1 = $f.mons$1; mpos = $f.mpos; npos = $f.npos; ppos = $f.ppos; r = $f.r; recomputeLOS = $f.recomputeLOS; target = $f.target; wander = $f.wander; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; x$6 = $f.x$6; x$7 = $f.x$7; x$8 = $f.x$8; x$9 = $f.x$9; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		m = this;
		ppos = $clone(g.Player.Pos, position);
		mpos = $clone(m.Pos, position);
		$r = m.MakeAware(g); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ if (m.State === 0) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (m.State === 0) { */ case 2:
			_r = RandInt(1500); /* */ $s = 4; case 4: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			wander = _r;
			/* */ if (wander === 0) { $s = 5; continue; }
			/* */ $s = 6; continue;
			/* if (wander === 0) { */ case 5:
				_r$1 = g.FreeCell(); /* */ $s = 7; case 7: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				position.copy(m.Target, _r$1);
				m.State = 2;
				$r = m.GatherBand(g); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 6:
			$r = ev.Renew(g, new monsterKind(m.Kind).MovementDelay()); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = -1; return;
		/* } */ case 3:
		if (!(m.State === 1)) { _v = false; $s = 12; continue s; }
		_r$2 = m.RangedAttack(g, ev); /* */ $s = 13; case 13: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_v = _r$2; case 12:
		/* */ if (_v) { $s = 10; continue; }
		/* */ $s = 11; continue;
		/* if (_v) { */ case 10:
			$s = -1; return;
		/* } */ case 11:
		if (!(m.State === 1)) { _v$1 = false; $s = 16; continue s; }
		_r$3 = m.SmitingAttack(g, ev); /* */ $s = 17; case 17: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_v$1 = _r$3; case 16:
		/* */ if (_v$1) { $s = 14; continue; }
		/* */ $s = 15; continue;
		/* if (_v$1) { */ case 14:
			$s = -1; return;
		/* } */ case 15:
		/* */ if (m.Kind === 18) { $s = 18; continue; }
		/* */ $s = 19; continue;
		/* if (m.Kind === 18) { */ case 18:
			$r = ev.Renew(g, new monsterKind(m.Kind).MovementDelay()); /* */ $s = 20; case 20: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = -1; return;
		/* } */ case 19:
		/* */ if ($clone(mpos, position).Distance($clone(ppos, position)) === 1) { $s = 21; continue; }
		/* */ $s = 22; continue;
		/* if ($clone(mpos, position).Distance($clone(ppos, position)) === 1) { */ case 21:
			attack = true;
			/* */ if (m.Status(0)) { $s = 23; continue; }
			/* */ $s = 24; continue;
			/* if (m.Status(0)) { */ case 23:
					_r$4 = $clone(m.Pos, position).Dir($clone(g.Player.Pos, position)); /* */ $s = 26; case 26: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
					_1 = _r$4;
					if ((_1 === (0)) || (_1 === (4)) || (_1 === (8)) || (_1 === (12))) {
					} else {
						attack = false;
					}
				case 25:
			/* } */ case 24:
			/* */ if (attack) { $s = 27; continue; }
			/* */ $s = 28; continue;
			/* if (attack) { */ case 27:
				$r = m.AttackAction(g, ev); /* */ $s = 29; case 29: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = -1; return;
			/* } */ case 28:
		/* } */ case 22:
		/* */ if (m.Kind === 19) { $s = 30; continue; }
		/* */ $s = 31; continue;
		/* if (m.Kind === 19) { */ case 30:
			_r$5 = m.TeleportMonsterAway(g); /* */ $s = 34; case 34: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			/* */ if (_r$5) { $s = 32; continue; }
			/* */ $s = 33; continue;
			/* if (_r$5) { */ case 32:
				$r = ev.Renew(g, new monsterKind(m.Kind).MovementDelay()); /* */ $s = 35; case 35: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = -1; return;
			/* } */ case 33:
		/* } */ case 31:
		m.Obstructing = false;
		/* */ if (!(m.Path.$length > 0 && $equal((x = m.Path, (0 >= x.$length ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + 0])), m.Target, position) && $equal((x$1 = m.Path, x$2 = m.Path.$length - 1 >> 0, ((x$2 < 0 || x$2 >= x$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + x$2])), mpos, position))) { $s = 36; continue; }
		/* */ $s = 37; continue;
		/* if (!(m.Path.$length > 0 && $equal((x = m.Path, (0 >= x.$length ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + 0])), m.Target, position) && $equal((x$1 = m.Path, x$2 = m.Path.$length - 1 >> 0, ((x$2 < 0 || x$2 >= x$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + x$2])), mpos, position))) { */ case 36:
			_r$6 = m.APath(g, $clone(mpos, position), $clone(m.Target, position)); /* */ $s = 38; case 38: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
			m.Path = _r$6;
			/* */ if (m.Path === sliceType$5.nil) { $s = 39; continue; }
			/* */ $s = 40; continue;
			/* if (m.Path === sliceType$5.nil) { */ case 39:
				_r$7 = g.Dungeon.FreeNeighbors($clone(m.Target, position)); /* */ $s = 41; case 41: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
				_ref = _r$7;
				_i = 0;
				/* while (true) { */ case 42:
					/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 43; continue; }
					npos = $clone(((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]), position);
					_r$8 = m.APath(g, $clone(mpos, position), $clone(npos, position)); /* */ $s = 44; case 44: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
					m.Path = _r$8;
					if (!(m.Path === sliceType$5.nil)) {
						position.copy(m.Target, npos);
						/* break; */ $s = 43; continue;
					}
					_i++;
				/* } */ $s = 42; continue; case 43:
			/* } */ case 40:
		/* } */ case 37:
		/* */ if (m.Path === sliceType$5.nil || m.Path.$length < 2) { $s = 45; continue; }
		/* */ $s = 46; continue;
		/* if (m.Path === sliceType$5.nil || m.Path.$length < 2) { */ case 45:
				_2 = m.State;
				/* */ if (_2 === (2)) { $s = 48; continue; }
				/* */ if (_2 === (1)) { $s = 49; continue; }
				/* */ $s = 50; continue;
				/* if (_2 === (2)) { */ case 48:
					_r$9 = RandInt(100); /* */ $s = 51; case 51: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
					keepWandering = _r$9;
					/* */ if (keepWandering > 75 && (x$3 = (x$4 = g.Bands, x$5 = m.Band, ((x$5 < 0 || x$5 >= x$4.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$4.$array[x$4.$offset + x$5])), ((x$3 < 0 || x$3 >= $pkg.MonsBands.$length) ? ($throwRuntimeError("index out of range"), undefined) : $pkg.MonsBands.$array[$pkg.MonsBands.$offset + x$3])).band) { $s = 52; continue; }
					/* */ $s = 53; continue;
					/* if (keepWandering > 75 && (x$3 = (x$4 = g.Bands, x$5 = m.Band, ((x$5 < 0 || x$5 >= x$4.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$4.$array[x$4.$offset + x$5])), ((x$3 < 0 || x$3 >= $pkg.MonsBands.$length) ? ($throwRuntimeError("index out of range"), undefined) : $pkg.MonsBands.$array[$pkg.MonsBands.$offset + x$3])).band) { */ case 52:
						_ref$1 = g.Monsters;
						_i$1 = 0;
						while (true) {
							if (!(_i$1 < _ref$1.$length)) { break; }
							mons = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$1.$array[_ref$1.$offset + _i$1]);
							position.copy(m.Target, mons.Pos);
							_i$1++;
						}
						$s = 54; continue;
					/* } else { */ case 53:
						_r$10 = g.FreeCell(); /* */ $s = 55; case 55: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
						position.copy(m.Target, _r$10);
					/* } */ case 54:
					$r = m.GatherBand(g); /* */ $s = 56; case 56: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$s = 50; continue;
				/* } else if (_2 === (1)) { */ case 49:
					_r$11 = g.FreeCell(); /* */ $s = 57; case 57: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
					position.copy(m.Target, _r$11);
					m.State = 2;
					$r = m.GatherBand(g); /* */ $s = 58; case 58: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 50:
			case 47:
			$r = ev.Renew(g, new monsterKind(m.Kind).MovementDelay()); /* */ $s = 59; case 59: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = -1; return;
		/* } */ case 46:
		target = $clone((x$6 = m.Path, x$7 = m.Path.$length - 2 >> 0, ((x$7 < 0 || x$7 >= x$6.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$6.$array[x$6.$offset + x$7])), position);
		_tuple = g.MonsterAt($clone(target, position));
		mons$1 = _tuple[0];
			/* */ if (!mons$1.Exists()) { $s = 61; continue; }
			/* */ if (!(_entry = g.Player.LOS[position.keyFor(mons$1.Pos)], _entry !== undefined ? _entry.v : false) && $clone(g.Player.Pos, position).Distance($clone(mons$1.Target, position)) > 2 && !((mons$1.State === 1))) { $s = 62; continue; }
			/* */ if (($clone(mons$1.Pos, position).Distance($clone(g.Player.Pos, position)) === 1)) { $s = 63; continue; }
			/* */ $s = 64; continue;
			/* if (!mons$1.Exists()) { */ case 61:
				recomputeLOS = (_entry$1 = g.Doors[position.keyFor(m.Pos)], _entry$1 !== undefined ? _entry$1.v : false) || (_entry$2 = g.Doors[position.keyFor(target)], _entry$2 !== undefined ? _entry$2.v : false);
				/* */ if ((m.Kind === 14) && (g.Dungeon.Cell($clone(target, position)).T === 0)) { $s = 66; continue; }
				/* */ if (g.Dungeon.Cell($clone(target, position)).T === 0) { $s = 67; continue; }
				/* */ $s = 68; continue;
				/* if ((m.Kind === 14) && (g.Dungeon.Cell($clone(target, position)).T === 0)) { */ case 66:
					g.Dungeon.SetCell($clone(target, position), 1);
					if (!(_entry$3 = g.Player.LOS[position.keyFor(target)], _entry$3 !== undefined ? _entry$3.v : false)) {
						_key = $clone(m.Pos, position); (g.UnknownDig || $throwRuntimeError("assignment to entry in nil map"))[position.keyFor(_key)] = { k: _key, v: true };
					}
					$r = g.MakeNoise(18, $clone(m.Pos, position)); /* */ $s = 70; case 70: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$r = g.Fog($clone(m.Pos, position), 1, ev); /* */ $s = 71; case 71: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					/* */ if ($clone(g.Player.Pos, position).Distance($clone(target, position)) < 12) { $s = 72; continue; }
					/* */ $s = 73; continue;
					/* if ($clone(g.Player.Pos, position).Distance($clone(target, position)) < 12) { */ case 72:
						_r$12 = g.CrackSound(); /* */ $s = 74; case 74: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }
						_arg = new $String(_r$12);
						$r = g.Printf("%s You hear an earth-breaking noise.", new sliceType$7([_arg])); /* */ $s = 75; case 75: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						g.StopAuto();
					/* } */ case 73:
					position.copy(m.Pos, target);
					m.Path = $subslice(m.Path, 0, (m.Path.$length - 1 >> 0));
					/* */ if (recomputeLOS) { $s = 76; continue; }
					/* */ $s = 77; continue;
					/* if (recomputeLOS) { */ case 76:
						$r = g.ComputeLOS(); /* */ $s = 78; case 78: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					/* } */ case 77:
					$s = 69; continue;
				/* } else if (g.Dungeon.Cell($clone(target, position)).T === 0) { */ case 67:
					_r$13 = m.APath(g, $clone(mpos, position), $clone(m.Target, position)); /* */ $s = 79; case 79: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
					m.Path = _r$13;
					$s = 69; continue;
				/* } else { */ case 68:
					position.copy(m.Pos, target);
					if (new monsterKind(m.Kind).Ranged() && !m.FireReady && (_entry$4 = g.Player.LOS[position.keyFor(m.Pos)], _entry$4 !== undefined ? _entry$4.v : false)) {
						m.FireReady = true;
					}
					m.Path = $subslice(m.Path, 0, (m.Path.$length - 1 >> 0));
					/* */ if (recomputeLOS) { $s = 80; continue; }
					/* */ $s = 81; continue;
					/* if (recomputeLOS) { */ case 80:
						$r = g.ComputeLOS(); /* */ $s = 82; case 82: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					/* } */ case 81:
				/* } */ case 69:
				$s = 65; continue;
			/* } else if (!(_entry = g.Player.LOS[position.keyFor(mons$1.Pos)], _entry !== undefined ? _entry.v : false) && $clone(g.Player.Pos, position).Distance($clone(mons$1.Target, position)) > 2 && !((mons$1.State === 1))) { */ case 62:
				_r$14 = RandInt(5); /* */ $s = 83; case 83: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
				r = _r$14;
				/* */ if (r === 0) { $s = 84; continue; }
				/* */ if (((r === 1) || (r === 2)) && (mons$1.State === 0)) { $s = 85; continue; }
				/* */ $s = 86; continue;
				/* if (r === 0) { */ case 84:
					_r$15 = g.FreeCell(); /* */ $s = 87; case 87: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
					position.copy(m.Target, _r$15);
					$r = m.GatherBand(g); /* */ $s = 88; case 88: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$s = 86; continue;
				/* } else if (((r === 1) || (r === 2)) && (mons$1.State === 0)) { */ case 85:
					_r$16 = g.FreeCell(); /* */ $s = 89; case 89: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
					position.copy(mons$1.Target, _r$16);
					mons$1.State = 2;
					$r = mons$1.GatherBand(g); /* */ $s = 90; case 90: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 86:
				$s = 65; continue;
			/* } else if (($clone(mons$1.Pos, position).Distance($clone(g.Player.Pos, position)) === 1)) { */ case 63:
				_r$17 = m.APath(g, $clone(mpos, position), $clone(m.Target, position)); /* */ $s = 91; case 91: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }
				m.Path = _r$17;
				if (m.Path.$length < 2 || $equal((x$8 = m.Path, x$9 = m.Path.$length - 2 >> 0, ((x$9 < 0 || x$9 >= x$8.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$8.$array[x$8.$offset + x$9])), mons$1.Pos, position)) {
					mons$1.Obstructing = true;
				}
				$s = 65; continue;
			/* } else { */ case 64:
				_r$18 = m.APath(g, $clone(mpos, position), $clone(m.Target, position)); /* */ $s = 92; case 92: if($c) { $c = false; _r$18 = _r$18.$blk(); } if (_r$18 && _r$18.$blk !== undefined) { break s; }
				m.Path = _r$18;
			/* } */ case 65:
		case 60:
		$r = ev.Renew(g, new monsterKind(m.Kind).MovementDelay()); /* */ $s = 93; case 93: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: monster.ptr.prototype.HandleTurn }; } $f._1 = _1; $f._2 = _2; $f._arg = _arg; $f._entry = _entry; $f._entry$1 = _entry$1; $f._entry$2 = _entry$2; $f._entry$3 = _entry$3; $f._entry$4 = _entry$4; $f._i = _i; $f._i$1 = _i$1; $f._key = _key; $f._r = _r; $f._r$1 = _r$1; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$12 = _r$12; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._r$17 = _r$17; $f._r$18 = _r$18; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._ref = _ref; $f._ref$1 = _ref$1; $f._tuple = _tuple; $f._v = _v; $f._v$1 = _v$1; $f.attack = attack; $f.ev = ev; $f.g = g; $f.keepWandering = keepWandering; $f.m = m; $f.mons = mons; $f.mons$1 = mons$1; $f.mpos = mpos; $f.npos = npos; $f.ppos = ppos; $f.r = r; $f.recomputeLOS = recomputeLOS; $f.target = target; $f.wander = wander; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.x$6 = x$6; $f.x$7 = x$7; $f.x$8 = x$8; $f.x$9 = x$9; $f.$s = $s; $f.$r = $r; return $f;
	};
	monster.prototype.HandleTurn = function(g, ev) { return this.$val.HandleTurn(g, ev); };
	monster.ptr.prototype.DramaticAdjustment = function(g, baseAttack, attack, evasion) {
		var _r, _r$1, _r$2, attack, baseAttack, evasion, g, m, n, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; attack = $f.attack; baseAttack = $f.baseAttack; evasion = $f.evasion; g = $f.g; m = $f.m; n = $f.n; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		m = this;
		/* */ if (attack >= g.Player.HP) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (attack >= g.Player.HP) { */ case 1:
			_r = RandInt(2); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			/* */ if (_r === 0) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (_r === 0) { */ case 3:
				_r$1 = g.HitDamage(0, baseAttack, g.Player.Armor()); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				attack = _r$1;
			/* } */ case 4:
			/* */ if (attack >= g.Player.HP) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if (attack >= g.Player.HP) { */ case 7:
				_r$2 = RandInt(g.Player.Evasion()); /* */ $s = 9; case 9: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				n = _r$2;
				if (n > evasion) {
					evasion = n;
				}
			/* } */ case 8:
		/* } */ case 2:
		$s = -1; return [attack, evasion];
		/* */ } return; } if ($f === undefined) { $f = { $blk: monster.ptr.prototype.DramaticAdjustment }; } $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.attack = attack; $f.baseAttack = baseAttack; $f.evasion = evasion; $f.g = g; $f.m = m; $f.n = n; $f.$s = $s; $f.$r = $r; return $f;
	};
	monster.prototype.DramaticAdjustment = function(g, baseAttack, attack, evasion) { return this.$val.DramaticAdjustment(g, baseAttack, attack, evasion); };
	monster.ptr.prototype.HitPlayer = function(g, ev) {
		var _arg, _arg$1, _arg$2, _entry, _entry$1, _q, _q$1, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _tuple, _v, _v$1, acc, attack, ev, evasion, g, m, noise, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _entry = $f._entry; _entry$1 = $f._entry$1; _q = $f._q; _q$1 = $f._q$1; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _tuple = $f._tuple; _v = $f._v; _v$1 = $f._v$1; acc = $f.acc; attack = $f.attack; ev = $f.ev; evasion = $f.evasion; g = $f.g; m = $f.m; noise = $f.noise; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		m = this;
		if (g.Player.HP <= 0) {
			$s = -1; return;
		}
		_r = RandInt(g.Player.Evasion()); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		evasion = _r;
		_r$1 = RandInt(m.Accuracy); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		acc = _r$1;
		_r$2 = g.HitDamage(0, m.Attack, g.Player.Armor()); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		attack = _r$2;
		_r$3 = m.DramaticAdjustment(g, m.Attack, attack, evasion); /* */ $s = 4; case 4: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_tuple = _r$3;
		attack = _tuple[0];
		evasion = _tuple[1];
		/* */ if (acc > evasion) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if (acc > evasion) { */ case 5:
			_r$4 = m.Blocked(g); /* */ $s = 10; case 10: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			/* */ if (_r$4) { $s = 8; continue; }
			/* */ $s = 9; continue;
			/* if (_r$4) { */ case 8:
				$r = g.Printf("You block the %s's attack with your %s.", new sliceType$7([new monsterKind(m.Kind), new shield(g.Player.Shield)])); /* */ $s = 11; case 11: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = -1; return;
			/* } */ case 9:
			noise = g.HitNoise();
			$r = g.MakeNoise(noise, $clone(g.Player.Pos, position)); /* */ $s = 12; case 12: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_r$5 = new monsterKind(m.Kind).Definite(true); /* */ $s = 13; case 13: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			_arg = new $String(_r$5);
			_arg$1 = new $Int(attack);
			$r = g.PrintfStyled("%s hits you (%d damage).", 3, new sliceType$7([_arg, _arg$1])); /* */ $s = 14; case 14: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = m.InflictDamage(g, attack, m.Attack); /* */ $s = 15; case 15: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			if (g.Player.HP <= 0) {
				$s = -1; return;
			}
			$r = m.HitSideEffects(g, ev); /* */ $s = 16; case 16: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			if (!((_entry = g.Player.Aptitudes[aptitude.keyFor(8)], _entry !== undefined ? _entry.v : false) && g.Player.HP < (_q = g.Player.HPMax() / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")))) { _v = false; $s = 19; continue s; }
			_r$6 = RandInt(3); /* */ $s = 20; case 20: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
			_v = _r$6 === 0; case 19:
			/* */ if (_v) { $s = 17; continue; }
			/* */ $s = 18; continue;
			/* if (_v) { */ case 17:
				$r = m.EnterConfusion(g, ev); /* */ $s = 21; case 21: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$r = g.Printf("You release a confusing gas on the %s.", new sliceType$7([new monsterKind(m.Kind)])); /* */ $s = 22; case 22: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 18:
			if (!((_entry$1 = g.Player.Aptitudes[aptitude.keyFor(9)], _entry$1 !== undefined ? _entry$1.v : false) && g.Player.HP < (_q$1 = g.Player.HPMax() / 2, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero")))) { _v$1 = false; $s = 25; continue s; }
			_r$7 = RandInt(2); /* */ $s = 26; case 26: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
			_v$1 = _r$7 === 0; case 25:
			/* */ if (_v$1) { $s = 23; continue; }
			/* */ $s = 24; continue;
			/* if (_v$1) { */ case 23:
				$r = g.Smoke(ev); /* */ $s = 27; case 27: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 24:
			$s = 7; continue;
		/* } else { */ case 6:
			_r$8 = new monsterKind(m.Kind).Definite(true); /* */ $s = 28; case 28: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
			_arg$2 = new $String(_r$8);
			$r = g.Printf("%s misses you.", new sliceType$7([_arg$2])); /* */ $s = 29; case 29: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 7:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: monster.ptr.prototype.HitPlayer }; } $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._entry = _entry; $f._entry$1 = _entry$1; $f._q = _q; $f._q$1 = _q$1; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._tuple = _tuple; $f._v = _v; $f._v$1 = _v$1; $f.acc = acc; $f.attack = attack; $f.ev = ev; $f.evasion = evasion; $f.g = g; $f.m = m; $f.noise = noise; $f.$s = $s; $f.$r = $r; return $f;
	};
	monster.prototype.HitPlayer = function(g, ev) { return this.$val.HitPlayer(g, ev); };
	monster.ptr.prototype.EnterConfusion = function(g, ev) {
		var _key, _r, _r$1, ev, g, m, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _key = $f._key; _r = $f._r; _r$1 = $f._r$1; ev = $f.ev; g = $f.g; m = $f.m; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		m = this;
		/* */ if (!m.Status(0)) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!m.Status(0)) { */ case 1:
			_key = 0; (m.Statuses || $throwRuntimeError("assignment to entry in nil map"))[monsterStatus.keyFor(_key)] = { k: _key, v: 1 };
			m.Path = sliceType$5.nil;
			_r = ev.Rank(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_r$1 = RandInt(100); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			$r = g.PushEvent(new monsterEvent.ptr((_r + 50 >> 0) + _r$1 >> 0, m.Index(g), 2)); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 2:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: monster.ptr.prototype.EnterConfusion }; } $f._key = _key; $f._r = _r; $f._r$1 = _r$1; $f.ev = ev; $f.g = g; $f.m = m; $f.$s = $s; $f.$r = $r; return $f;
	};
	monster.prototype.EnterConfusion = function(g, ev) { return this.$val.EnterConfusion(g, ev); };
	monster.ptr.prototype.HitSideEffects = function(g, ev) {
		var _1, _key, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _tuple, dir, ev, g, m, mons, pos, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _key = $f._key; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _tuple = $f._tuple; dir = $f.dir; ev = $f.ev; g = $f.g; m = $f.m; mons = $f.mons; pos = $f.pos; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		m = this;
			_1 = m.Kind;
			/* */ if (_1 === (11)) { $s = 2; continue; }
			/* */ if (_1 === (7)) { $s = 3; continue; }
			/* */ if (_1 === (12)) { $s = 4; continue; }
			/* */ if (_1 === (16)) { $s = 5; continue; }
			/* */ if (_1 === (6)) { $s = 6; continue; }
			/* */ $s = 7; continue;
			/* if (_1 === (11)) { */ case 2:
				_r = RandInt(2); /* */ $s = 10; case 10: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				/* */ if (_r === 0) { $s = 8; continue; }
				/* */ $s = 9; continue;
				/* if (_r === 0) { */ case 8:
					$r = g.Confusion(ev); /* */ $s = 11; case 11: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 9:
				$s = 7; continue;
			/* } else if (_1 === (7)) { */ case 3:
				_r$1 = RandInt(5); /* */ $s = 14; case 14: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				/* */ if ((_r$1 === 0) && !g.Player.HasStatus(0) && !g.Player.HasStatus(2)) { $s = 12; continue; }
				/* */ $s = 13; continue;
				/* if ((_r$1 === 0) && !g.Player.HasStatus(0) && !g.Player.HasStatus(2)) { */ case 12:
					_key = 0; (g.Player.Statuses || $throwRuntimeError("assignment to entry in nil map"))[status.keyFor(_key)] = { k: _key, v: 1 };
					_r$2 = ev.Rank(); /* */ $s = 15; case 15: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
					_r$3 = RandInt(40); /* */ $s = 16; case 16: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
					$r = g.PushEvent(new simpleEvent.ptr((_r$2 + 25 >> 0) + _r$3 >> 0, 4)); /* */ $s = 17; case 17: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					g.Print("You feel a sudden urge to kill things.");
				/* } */ case 13:
				$s = 7; continue;
			/* } else if (_1 === (12)) { */ case 4:
				_r$4 = RandInt(2); /* */ $s = 20; case 20: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				/* */ if (_r$4 === 0) { $s = 18; continue; }
				/* */ $s = 19; continue;
				/* if (_r$4 === 0) { */ case 18:
					$r = g.Blink(ev); /* */ $s = 21; case 21: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 19:
				$s = 7; continue;
			/* } else if (_1 === (16)) { */ case 5:
				$r = g.Corrosion(ev); /* */ $s = 22; case 22: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 7; continue;
			/* } else if (_1 === (6)) { */ case 6:
				_r$5 = $clone(g.Player.Pos, position).Dir($clone(m.Pos, position)); /* */ $s = 23; case 23: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
				dir = _r$5;
				pos = $clone($clone(g.Player.Pos, position).To(dir), position);
				_r$6 = RandInt(2); /* */ $s = 26; case 26: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
				/* */ if ((_r$6 === 0) && !g.Player.HasStatus(5) && $clone(pos, position).valid() && (g.Dungeon.Cell($clone(pos, position)).T === 1)) { $s = 24; continue; }
				/* */ $s = 25; continue;
				/* if ((_r$6 === 0) && !g.Player.HasStatus(5) && $clone(pos, position).valid() && (g.Dungeon.Cell($clone(pos, position)).T === 1)) { */ case 24:
					_tuple = g.MonsterAt($clone(pos, position));
					mons = _tuple[0];
					/* */ if (!mons.Exists()) { $s = 27; continue; }
					/* */ $s = 28; continue;
					/* if (!mons.Exists()) { */ case 27:
						position.copy(g.Player.Pos, pos);
						$r = g.CollectGround(); /* */ $s = 29; case 29: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						$r = g.ComputeLOS(); /* */ $s = 30; case 30: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						$r = g.MakeMonstersAware(); /* */ $s = 31; case 31: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					/* } */ case 28:
					g.Print("The yack pushes you.");
				/* } */ case 25:
			/* } */ case 7:
		case 1:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: monster.ptr.prototype.HitSideEffects }; } $f._1 = _1; $f._key = _key; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._tuple = _tuple; $f.dir = dir; $f.ev = ev; $f.g = g; $f.m = m; $f.mons = mons; $f.pos = pos; $f.$s = $s; $f.$r = $r; return $f;
	};
	monster.prototype.HitSideEffects = function(g, ev) { return this.$val.HitSideEffects(g, ev); };
	monster.ptr.prototype.RangedAttack = function(g, ev) {
		var _1, _entry, _r, _r$1, _r$2, _r$3, ev, g, m, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _entry = $f._entry; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; ev = $f.ev; g = $f.g; m = $f.m; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		m = this;
		if (!new monsterKind(m.Kind).Ranged()) {
			$s = -1; return false;
		}
		if ($clone(m.Pos, position).Distance($clone(g.Player.Pos, position)) <= 1 && !((m.Kind === 18))) {
			$s = -1; return false;
		}
		if (!(_entry = g.Player.LOS[position.keyFor(m.Pos)], _entry !== undefined ? _entry.v : false)) {
			m.FireReady = false;
			$s = -1; return false;
		}
		/* */ if (!m.FireReady) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!m.FireReady) { */ case 1:
			m.FireReady = true;
			/* */ if ($clone(m.Pos, position).Distance($clone(g.Player.Pos, position)) <= 3) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if ($clone(m.Pos, position).Distance($clone(g.Player.Pos, position)) <= 3) { */ case 3:
				$r = ev.Renew(g, new monsterKind(m.Kind).AttackDelay()); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = -1; return true;
			/* } else { */ case 4:
				$s = -1; return false;
			/* } */ case 5:
		/* } */ case 2:
		if (m.Status(1)) {
			$s = -1; return false;
		}
			_1 = m.Kind;
			/* */ if (_1 === (13)) { $s = 8; continue; }
			/* */ if (_1 === (2)) { $s = 9; continue; }
			/* */ if (_1 === (8)) { $s = 10; continue; }
			/* */ if (_1 === (18)) { $s = 11; continue; }
			/* */ $s = 12; continue;
			/* if (_1 === (13)) { */ case 8:
				_r = m.TormentBolt(g, ev); /* */ $s = 13; case 13: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				$s = -1; return _r;
			/* } else if (_1 === (2)) { */ case 9:
				_r$1 = m.ThrowRock(g, ev); /* */ $s = 14; case 14: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				$s = -1; return _r$1;
			/* } else if (_1 === (8)) { */ case 10:
				_r$2 = m.ThrowJavelin(g, ev); /* */ $s = 15; case 15: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				$s = -1; return _r$2;
			/* } else if (_1 === (18)) { */ case 11:
				_r$3 = m.ThrowAcid(g, ev); /* */ $s = 16; case 16: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				$s = -1; return _r$3;
			/* } */ case 12:
		case 7:
		$s = -1; return false;
		/* */ } return; } if ($f === undefined) { $f = { $blk: monster.ptr.prototype.RangedAttack }; } $f._1 = _1; $f._entry = _entry; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f.ev = ev; $f.g = g; $f.m = m; $f.$s = $s; $f.$r = $r; return $f;
	};
	monster.prototype.RangedAttack = function(g, ev) { return this.$val.RangedAttack(g, ev); };
	monster.ptr.prototype.RangeBlocked = function(g) {
		var _i, _r, _ref, _tuple, blocked, g, m, mons, pos, ray, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _r = $f._r; _ref = $f._ref; _tuple = $f._tuple; blocked = $f.blocked; g = $f.g; m = $f.m; mons = $f.mons; pos = $f.pos; ray = $f.ray; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		m = this;
		_r = g.Ray($clone(m.Pos, position)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		ray = _r;
		blocked = false;
		_ref = $subslice(ray, 1);
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			pos = $clone(((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]), position);
			_tuple = g.MonsterAt($clone(pos, position));
			mons = _tuple[0];
			if (mons === ptrType$9.nil) {
				_i++;
				continue;
			}
			blocked = true;
			break;
		}
		$s = -1; return blocked;
		/* */ } return; } if ($f === undefined) { $f = { $blk: monster.ptr.prototype.RangeBlocked }; } $f._i = _i; $f._r = _r; $f._ref = _ref; $f._tuple = _tuple; $f.blocked = blocked; $f.g = g; $f.m = m; $f.mons = mons; $f.pos = pos; $f.ray = ray; $f.$s = $s; $f.$r = $r; return $f;
	};
	monster.prototype.RangeBlocked = function(g) { return this.$val.RangeBlocked(g); };
	monster.ptr.prototype.Index = function(g) {
		var _i, _ref, g, i, m, mons;
		m = this;
		_ref = g.Monsters;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			mons = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			if (mons.Exists() && $equal(mons.Pos, m.Pos, position)) {
				return i;
			}
			_i++;
		}
		return 0;
	};
	monster.prototype.Index = function(g) { return this.$val.Index(g); };
	monster.ptr.prototype.TormentBolt = function(g, ev) {
		var _arg, _key, _q, _r, _r$1, _r$2, _r$3, _r$4, blocked, damage, ev, g, hit, m, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _arg = $f._arg; _key = $f._key; _q = $f._q; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; blocked = $f.blocked; damage = $f.damage; ev = $f.ev; g = $f.g; hit = $f.hit; m = $f.m; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		m = this;
		_r = m.RangeBlocked(g); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		blocked = _r;
		if (blocked) {
			$s = -1; return false;
		}
		_r$1 = m.Blocked(g); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		hit = !_r$1;
		$r = g.MakeNoise(9, $clone(m.Pos, position)); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ if (hit) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (hit) { */ case 4:
			$r = g.MakeNoise(12, $clone(g.Player.Pos, position)); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			damage = g.Player.HP - (_q = g.Player.HP / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) >> 0;
			_r$2 = new monsterKind(m.Kind).Definite(true); /* */ $s = 8; case 8: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_arg = new $String(_r$2);
			$r = g.PrintfStyled("%s throws a bolt of torment at you.", 3, new sliceType$7([_arg])); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = m.InflictDamage(g, damage, 15); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 6; continue;
		/* } else { */ case 5:
			$r = g.Printf("You block the %s's bolt of torment.", new sliceType$7([new monsterKind(m.Kind)])); /* */ $s = 11; case 11: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 6:
		_key = 1; (m.Statuses || $throwRuntimeError("assignment to entry in nil map"))[monsterStatus.keyFor(_key)] = { k: _key, v: 1 };
		_r$3 = ev.Rank(); /* */ $s = 12; case 12: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_r$4 = RandInt(50); /* */ $s = 13; case 13: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		$r = g.PushEvent(new monsterEvent.ptr((_r$3 + 100 >> 0) + _r$4 >> 0, m.Index(g), 3)); /* */ $s = 14; case 14: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = ev.Renew(g, new monsterKind(m.Kind).AttackDelay()); /* */ $s = 15; case 15: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return true;
		/* */ } return; } if ($f === undefined) { $f = { $blk: monster.ptr.prototype.TormentBolt }; } $f._arg = _arg; $f._key = _key; $f._q = _q; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f.blocked = blocked; $f.damage = damage; $f.ev = ev; $f.g = g; $f.hit = hit; $f.m = m; $f.$s = $s; $f.$r = $r; return $f;
	};
	monster.prototype.TormentBolt = function(g, ev) { return this.$val.TormentBolt(g, ev); };
	monster.ptr.prototype.Blocked = function(g) {
		var _q, _r, _r$1, acc, block, blocked, g, m, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _q = $f._q; _r = $f._r; _r$1 = $f._r$1; acc = $f.acc; block = $f.block; blocked = $f.blocked; g = $f.g; m = $f.m; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		m = this;
		blocked = false;
		/* */ if (!((g.Player.Shield === 0)) && !new weapon(g.Player.Weapon).TwoHanded()) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!((g.Player.Shield === 0)) && !new weapon(g.Player.Weapon).TwoHanded()) { */ case 1:
			_r = RandInt(g.Player.Block()); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			block = _r;
			_r$1 = RandInt(m.Accuracy); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			acc = _r$1;
			/* */ if (block >= acc) { $s = 5; continue; }
			/* */ $s = 6; continue;
			/* if (block >= acc) { */ case 5:
				$r = g.MakeNoise(12 + (_q = g.Player.Block() / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) >> 0, $clone(g.Player.Pos, position)); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				blocked = true;
			/* } */ case 6:
		/* } */ case 2:
		$s = -1; return blocked;
		/* */ } return; } if ($f === undefined) { $f = { $blk: monster.ptr.prototype.Blocked }; } $f._q = _q; $f._r = _r; $f._r$1 = _r$1; $f.acc = acc; $f.block = block; $f.blocked = blocked; $f.g = g; $f.m = m; $f.$s = $s; $f.$r = $r; return $f;
	};
	monster.prototype.Blocked = function(g) { return this.$val.Blocked(g); };
	monster.ptr.prototype.ThrowRock = function(g, ev) {
		var _arg, _arg$1, _q, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _tuple, acc, attack, block, blocked, ev, evasion, g, hit, m, noise, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _arg = $f._arg; _arg$1 = $f._arg$1; _q = $f._q; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _tuple = $f._tuple; acc = $f.acc; attack = $f.attack; block = $f.block; blocked = $f.blocked; ev = $f.ev; evasion = $f.evasion; g = $f.g; hit = $f.hit; m = $f.m; noise = $f.noise; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		m = this;
		_r = m.RangeBlocked(g); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		blocked = _r;
		if (blocked) {
			$s = -1; return false;
		}
		block = false;
		hit = true;
		_r$1 = RandInt(g.Player.Evasion()); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		evasion = _r$1;
		_r$2 = RandInt(m.Accuracy); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		acc = _r$2;
		_r$3 = g.HitDamage(0, 15, g.Player.Armor()); /* */ $s = 4; case 4: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		attack = _r$3;
		_r$4 = m.DramaticAdjustment(g, 15, attack, evasion); /* */ $s = 5; case 5: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		_tuple = _r$4;
		attack = _tuple[0];
		evasion = _tuple[1];
		/* */ if ((_q = ($imul(3, acc)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) <= evasion) { $s = 6; continue; }
		/* */ $s = 7; continue;
		/* if ((_q = ($imul(3, acc)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) <= evasion) { */ case 6:
			hit = false;
			$s = 8; continue;
		/* } else { */ case 7:
			_r$5 = m.Blocked(g); /* */ $s = 9; case 9: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			block = _r$5;
			hit = !block;
		/* } */ case 8:
		/* */ if (hit) { $s = 10; continue; }
		/* */ if (block) { $s = 11; continue; }
		/* */ $s = 12; continue;
		/* if (hit) { */ case 10:
			noise = g.HitNoise();
			$r = g.MakeNoise(noise, $clone(g.Player.Pos, position)); /* */ $s = 14; case 14: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_r$6 = new monsterKind(m.Kind).Definite(true); /* */ $s = 15; case 15: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
			_arg = new $String(_r$6);
			_arg$1 = new $Int(attack);
			$r = g.PrintfStyled("%s throws a rock at you (%d damage).", 3, new sliceType$7([_arg, _arg$1])); /* */ $s = 16; case 16: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_r$7 = RandInt(4); /* */ $s = 19; case 19: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
			/* */ if (_r$7 === 0) { $s = 17; continue; }
			/* */ $s = 18; continue;
			/* if (_r$7 === 0) { */ case 17:
				$r = g.Confusion(ev); /* */ $s = 20; case 20: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 18:
			$r = m.InflictDamage(g, attack, 15); /* */ $s = 21; case 21: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 13; continue;
		/* } else if (block) { */ case 11:
			$r = g.Printf("You block %s's rock.", new sliceType$7([new $String(new monsterKind(m.Kind).Indefinite(false))])); /* */ $s = 22; case 22: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 13; continue;
		/* } else { */ case 12:
			$r = g.Printf("You dodge %s's rock.", new sliceType$7([new $String(new monsterKind(m.Kind).Indefinite(false))])); /* */ $s = 23; case 23: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 13:
		$r = ev.Renew(g, $imul(2, new monsterKind(m.Kind).AttackDelay())); /* */ $s = 24; case 24: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return true;
		/* */ } return; } if ($f === undefined) { $f = { $blk: monster.ptr.prototype.ThrowRock }; } $f._arg = _arg; $f._arg$1 = _arg$1; $f._q = _q; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._tuple = _tuple; $f.acc = acc; $f.attack = attack; $f.block = block; $f.blocked = blocked; $f.ev = ev; $f.evasion = evasion; $f.g = g; $f.hit = hit; $f.m = m; $f.noise = noise; $f.$s = $s; $f.$r = $r; return $f;
	};
	monster.prototype.ThrowRock = function(g, ev) { return this.$val.ThrowRock(g, ev); };
	monster.ptr.prototype.ThrowJavelin = function(g, ev) {
		var _arg, _arg$1, _arg$2, _key, _key$1, _r, _r$1, _r$10, _r$11, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _tuple, acc, attack, block, blocked, ev, evasion, g, hit, m, noise, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _key = $f._key; _key$1 = $f._key$1; _r = $f._r; _r$1 = $f._r$1; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _tuple = $f._tuple; acc = $f.acc; attack = $f.attack; block = $f.block; blocked = $f.blocked; ev = $f.ev; evasion = $f.evasion; g = $f.g; hit = $f.hit; m = $f.m; noise = $f.noise; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		m = this;
		_r = m.RangeBlocked(g); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		blocked = _r;
		if (blocked) {
			$s = -1; return false;
		}
		block = false;
		hit = true;
		_r$1 = RandInt(g.Player.Evasion()); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		evasion = _r$1;
		_r$2 = RandInt(m.Accuracy); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		acc = _r$2;
		_r$3 = g.HitDamage(0, 11, g.Player.Armor()); /* */ $s = 4; case 4: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		attack = _r$3;
		_r$4 = m.DramaticAdjustment(g, 11, attack, evasion); /* */ $s = 5; case 5: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		_tuple = _r$4;
		attack = _tuple[0];
		evasion = _tuple[1];
		/* */ if (acc <= evasion) { $s = 6; continue; }
		/* */ $s = 7; continue;
		/* if (acc <= evasion) { */ case 6:
			hit = false;
			$s = 8; continue;
		/* } else { */ case 7:
			_r$5 = m.Blocked(g); /* */ $s = 9; case 9: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			block = _r$5;
			hit = !block;
		/* } */ case 8:
		/* */ if (hit) { $s = 10; continue; }
		/* */ if (block) { $s = 11; continue; }
		/* */ $s = 12; continue;
		/* if (hit) { */ case 10:
			noise = g.HitNoise();
			$r = g.MakeNoise(noise, $clone(g.Player.Pos, position)); /* */ $s = 14; case 14: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_r$6 = new monsterKind(m.Kind).Definite(true); /* */ $s = 15; case 15: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
			_arg = new $String(_r$6);
			_arg$1 = new $String(Indefinite("javelin", false));
			_arg$2 = new $Int(attack);
			$r = g.Printf("%s throws %s at you (%d damage).", new sliceType$7([_arg, _arg$1, _arg$2])); /* */ $s = 16; case 16: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = m.InflictDamage(g, attack, 11); /* */ $s = 17; case 17: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 13; continue;
		/* } else if (block) { */ case 11:
			_r$7 = RandInt(3); /* */ $s = 21; case 21: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
			/* */ if (_r$7 === 0) { $s = 18; continue; }
			/* */ if (!g.Player.HasStatus(9)) { $s = 19; continue; }
			/* */ $s = 20; continue;
			/* if (_r$7 === 0) { */ case 18:
				$r = g.Printf("You block %s's %s.", new sliceType$7([new $String(new monsterKind(m.Kind).Indefinite(false)), new $String("javelin")])); /* */ $s = 22; case 22: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 20; continue;
			/* } else if (!g.Player.HasStatus(9)) { */ case 19:
				_key = 9; (g.Player.Statuses || $throwRuntimeError("assignment to entry in nil map"))[status.keyFor(_key)] = { k: _key, v: 1 };
				_r$8 = ev.Rank(); /* */ $s = 23; case 23: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
				_r$9 = RandInt(100); /* */ $s = 24; case 24: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
				$r = g.PushEvent(new simpleEvent.ptr((_r$8 + 100 >> 0) + _r$9 >> 0, 12)); /* */ $s = 25; case 25: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$r = g.Printf("%s's %s gets fixed on your shield.", new sliceType$7([new $String(new monsterKind(m.Kind).Indefinite(true)), new $String("javelin")])); /* */ $s = 26; case 26: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 20:
			$s = 13; continue;
		/* } else { */ case 12:
			$r = g.Printf("You dodge %s's %s.", new sliceType$7([new $String(new monsterKind(m.Kind).Indefinite(false)), new $String("javelin")])); /* */ $s = 27; case 27: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 13:
		_key$1 = 1; (m.Statuses || $throwRuntimeError("assignment to entry in nil map"))[monsterStatus.keyFor(_key$1)] = { k: _key$1, v: 1 };
		_r$10 = ev.Rank(); /* */ $s = 28; case 28: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
		_r$11 = RandInt(50); /* */ $s = 29; case 29: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
		$r = g.PushEvent(new monsterEvent.ptr((_r$10 + 50 >> 0) + _r$11 >> 0, m.Index(g), 3)); /* */ $s = 30; case 30: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = ev.Renew(g, new monsterKind(m.Kind).AttackDelay()); /* */ $s = 31; case 31: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return true;
		/* */ } return; } if ($f === undefined) { $f = { $blk: monster.ptr.prototype.ThrowJavelin }; } $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._key = _key; $f._key$1 = _key$1; $f._r = _r; $f._r$1 = _r$1; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._tuple = _tuple; $f.acc = acc; $f.attack = attack; $f.block = block; $f.blocked = blocked; $f.ev = ev; $f.evasion = evasion; $f.g = g; $f.hit = hit; $f.m = m; $f.noise = noise; $f.$s = $s; $f.$r = $r; return $f;
	};
	monster.prototype.ThrowJavelin = function(g, ev) { return this.$val.ThrowJavelin(g, ev); };
	monster.ptr.prototype.ThrowAcid = function(g, ev) {
		var _arg, _arg$1, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _tuple, acc, attack, block, blocked, ev, evasion, g, hit, m, noise, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _arg = $f._arg; _arg$1 = $f._arg$1; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _tuple = $f._tuple; acc = $f.acc; attack = $f.attack; block = $f.block; blocked = $f.blocked; ev = $f.ev; evasion = $f.evasion; g = $f.g; hit = $f.hit; m = $f.m; noise = $f.noise; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		m = this;
		_r = m.RangeBlocked(g); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		blocked = _r;
		if (blocked) {
			$s = -1; return false;
		}
		block = false;
		hit = true;
		_r$1 = RandInt(g.Player.Evasion()); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		evasion = _r$1;
		_r$2 = RandInt(m.Accuracy); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		acc = _r$2;
		_r$3 = g.HitDamage(0, 12, g.Player.Armor()); /* */ $s = 4; case 4: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		attack = _r$3;
		_r$4 = m.DramaticAdjustment(g, 12, attack, evasion); /* */ $s = 5; case 5: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		_tuple = _r$4;
		attack = _tuple[0];
		evasion = _tuple[1];
		/* */ if (acc <= evasion) { $s = 6; continue; }
		/* */ $s = 7; continue;
		/* if (acc <= evasion) { */ case 6:
			hit = false;
			$s = 8; continue;
		/* } else { */ case 7:
			_r$5 = m.Blocked(g); /* */ $s = 9; case 9: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			block = _r$5;
			hit = !block;
		/* } */ case 8:
		/* */ if (hit) { $s = 10; continue; }
		/* */ if (block) { $s = 11; continue; }
		/* */ $s = 12; continue;
		/* if (hit) { */ case 10:
			noise = g.HitNoise();
			$r = g.MakeNoise(noise, $clone(g.Player.Pos, position)); /* */ $s = 14; case 14: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_r$6 = new monsterKind(m.Kind).Definite(true); /* */ $s = 15; case 15: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
			_arg = new $String(_r$6);
			_arg$1 = new $Int(attack);
			$r = g.Printf("%s throws acid at you (%d damage).", new sliceType$7([_arg, _arg$1])); /* */ $s = 16; case 16: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = m.InflictDamage(g, attack, 11); /* */ $s = 17; case 17: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_r$7 = RandInt(2); /* */ $s = 20; case 20: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
			/* */ if (_r$7 === 0) { $s = 18; continue; }
			/* */ $s = 19; continue;
			/* if (_r$7 === 0) { */ case 18:
				$r = g.Corrosion(ev); /* */ $s = 21; case 21: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				_r$8 = RandInt(2); /* */ $s = 24; case 24: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
				/* */ if (_r$8 === 0) { $s = 22; continue; }
				/* */ $s = 23; continue;
				/* if (_r$8 === 0) { */ case 22:
					$r = g.Confusion(ev); /* */ $s = 25; case 25: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 23:
			/* } */ case 19:
			$s = 13; continue;
		/* } else if (block) { */ case 11:
			$r = g.Printf("You block %s's acid projectile.", new sliceType$7([new $String(new monsterKind(m.Kind).Indefinite(false))])); /* */ $s = 26; case 26: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_r$9 = RandInt(2); /* */ $s = 29; case 29: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
			/* */ if (_r$9 === 0) { $s = 27; continue; }
			/* */ $s = 28; continue;
			/* if (_r$9 === 0) { */ case 27:
				$r = g.Corrosion(ev); /* */ $s = 30; case 30: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 28:
			$s = 13; continue;
		/* } else { */ case 12:
			$r = g.Printf("You dodge %s's acid projectile.", new sliceType$7([new $String(new monsterKind(m.Kind).Indefinite(false))])); /* */ $s = 31; case 31: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 13:
		$r = ev.Renew(g, new monsterKind(m.Kind).AttackDelay()); /* */ $s = 32; case 32: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return true;
		/* */ } return; } if ($f === undefined) { $f = { $blk: monster.ptr.prototype.ThrowAcid }; } $f._arg = _arg; $f._arg$1 = _arg$1; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._tuple = _tuple; $f.acc = acc; $f.attack = attack; $f.block = block; $f.blocked = blocked; $f.ev = ev; $f.evasion = evasion; $f.g = g; $f.hit = hit; $f.m = m; $f.noise = noise; $f.$s = $s; $f.$r = $r; return $f;
	};
	monster.prototype.ThrowAcid = function(g, ev) { return this.$val.ThrowAcid(g, ev); };
	monster.ptr.prototype.SmitingAttack = function(g, ev) {
		var _1, _entry, _r, ev, g, m, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _entry = $f._entry; _r = $f._r; ev = $f.ev; g = $f.g; m = $f.m; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		m = this;
		if (!new monsterKind(m.Kind).Smiting()) {
			$s = -1; return false;
		}
		if (!(_entry = g.Player.LOS[position.keyFor(m.Pos)], _entry !== undefined ? _entry.v : false)) {
			m.FireReady = false;
			$s = -1; return false;
		}
		/* */ if (!m.FireReady) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!m.FireReady) { */ case 1:
			m.FireReady = true;
			/* */ if ($clone(m.Pos, position).Distance($clone(g.Player.Pos, position)) <= 3) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if ($clone(m.Pos, position).Distance($clone(g.Player.Pos, position)) <= 3) { */ case 3:
				$r = ev.Renew(g, new monsterKind(m.Kind).AttackDelay()); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = -1; return true;
			/* } else { */ case 4:
				$s = -1; return false;
			/* } */ case 5:
		/* } */ case 2:
		if (m.Status(1)) {
			$s = -1; return false;
		}
			_1 = m.Kind;
			/* */ if (_1 === (15)) { $s = 8; continue; }
			/* */ $s = 9; continue;
			/* if (_1 === (15)) { */ case 8:
				_r = m.AbsorbMana(g, ev); /* */ $s = 10; case 10: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				$s = -1; return _r;
			/* } */ case 9:
		case 7:
		$s = -1; return false;
		/* */ } return; } if ($f === undefined) { $f = { $blk: monster.ptr.prototype.SmitingAttack }; } $f._1 = _1; $f._entry = _entry; $f._r = _r; $f.ev = ev; $f.g = g; $f.m = m; $f.$s = $s; $f.$r = $r; return $f;
	};
	monster.prototype.SmitingAttack = function(g, ev) { return this.$val.SmitingAttack(g, ev); };
	monster.ptr.prototype.AbsorbMana = function(g, ev) {
		var _arg, _key, _q, _r, _r$1, _r$2, ev, g, m, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _arg = $f._arg; _key = $f._key; _q = $f._q; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; ev = $f.ev; g = $f.g; m = $f.m; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		m = this;
		if (g.Player.MP === 0) {
			$s = -1; return false;
		}
		g.Player.MP = (_q = ($imul(2, g.Player.MP)) / 3, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
		_r = new monsterKind(m.Kind).Definite(true); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_arg = new $String(_r);
		$r = g.Printf("%s absorbs your mana.", new sliceType$7([_arg])); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_key = 1; (m.Statuses || $throwRuntimeError("assignment to entry in nil map"))[monsterStatus.keyFor(_key)] = { k: _key, v: 1 };
		_r$1 = ev.Rank(); /* */ $s = 3; case 3: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$2 = RandInt(20); /* */ $s = 4; case 4: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		$r = g.PushEvent(new monsterEvent.ptr((_r$1 + 10 >> 0) + _r$2 >> 0, m.Index(g), 3)); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = ev.Renew(g, new monsterKind(m.Kind).AttackDelay()); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return true;
		/* */ } return; } if ($f === undefined) { $f = { $blk: monster.ptr.prototype.AbsorbMana }; } $f._arg = _arg; $f._key = _key; $f._q = _q; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.ev = ev; $f.g = g; $f.m = m; $f.$s = $s; $f.$r = $r; return $f;
	};
	monster.prototype.AbsorbMana = function(g, ev) { return this.$val.AbsorbMana(g, ev); };
	monster.ptr.prototype.Explode = function(g, ev) {
		var _arg, _arg$1, _entry, _i, _key, _q, _q$1, _r, _r$1, _r$2, _r$3, _ref, _tuple, _v, c, dmg, ev, g, m, mons, neighbors, pos, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _arg = $f._arg; _arg$1 = $f._arg$1; _entry = $f._entry; _i = $f._i; _key = $f._key; _q = $f._q; _q$1 = $f._q$1; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _ref = $f._ref; _tuple = $f._tuple; _v = $f._v; c = $f.c; dmg = $f.dmg; ev = $f.ev; g = $f.g; m = $f.m; mons = $f.mons; neighbors = $f.neighbors; pos = $f.pos; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		m = this;
		_r = $clone(m.Pos, position).ValidNeighbors(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		neighbors = _r;
		$r = g.MakeNoise(18, $clone(m.Pos, position)); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_r$1 = g.ExplosionSound(); /* */ $s = 3; case 3: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_arg = new $String(_r$1);
		_r$2 = new monsterKind(m.Kind).Definite(true); /* */ $s = 4; case 4: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_arg$1 = new $String(_r$2);
		$r = g.Printf("%s %s blows with a noisy pop.", new sliceType$7([_arg, _arg$1])); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = g.ui.ExplosionAnimation(g, 0, $clone(m.Pos, position)); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_ref = $append(neighbors, m.Pos);
		_i = 0;
		/* while (true) { */ case 7:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 8; continue; }
			pos = $clone(((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]), position);
			c = $clone(g.Dungeon.Cell($clone(pos, position)), cell);
			/* */ if (c.T === 1) { $s = 9; continue; }
			/* */ $s = 10; continue;
			/* if (c.T === 1) { */ case 9:
				$r = g.Burn($clone(pos, position), ev); /* */ $s = 11; case 11: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 10:
			_tuple = g.MonsterAt($clone(pos, position));
			mons = _tuple[0];
			/* */ if (mons.Exists()) { $s = 12; continue; }
			/* */ if ($equal(g.Player.Pos, pos, position)) { $s = 13; continue; }
			if (!(c.T === 0)) { _v = false; $s = 16; continue s; }
			_r$3 = RandInt(2); /* */ $s = 17; case 17: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_v = _r$3 === 0; case 16:
			/* */ if (_v) { $s = 14; continue; }
			/* */ $s = 15; continue;
			/* if (mons.Exists()) { */ case 12:
				mons.HP = (_q = mons.HP / (2), (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
				if (mons.HP === 0) {
					mons.HP = 1;
				}
				$r = g.MakeNoise(12, $clone(mons.Pos, position)); /* */ $s = 18; case 18: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$r = mons.MakeHuntIfHurt(g); /* */ $s = 19; case 19: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 15; continue;
			/* } else if ($equal(g.Player.Pos, pos, position)) { */ case 13:
				dmg = (_q$1 = g.Player.HP / 2, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero"));
				$r = m.InflictDamage(g, dmg, 15); /* */ $s = 20; case 20: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 15; continue;
			/* } else if (_v) { */ case 14:
				g.Dungeon.SetCell($clone(pos, position), 1);
				/* */ if (!(_entry = g.Player.LOS[position.keyFor(pos)], _entry !== undefined ? _entry.v : false)) { $s = 21; continue; }
				/* */ $s = 22; continue;
				/* if (!(_entry = g.Player.LOS[position.keyFor(pos)], _entry !== undefined ? _entry.v : false)) { */ case 21:
					_key = $clone(pos, position); (g.UnknownDig || $throwRuntimeError("assignment to entry in nil map"))[position.keyFor(_key)] = { k: _key, v: true };
					$s = 23; continue;
				/* } else { */ case 22:
					$r = g.ui.WallExplosionAnimation(g, $clone(pos, position)); /* */ $s = 24; case 24: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 23:
				$r = g.MakeNoise(18, $clone(pos, position)); /* */ $s = 25; case 25: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$r = g.Fog($clone(pos, position), 1, ev); /* */ $s = 26; case 26: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 15:
			_i++;
		/* } */ $s = 7; continue; case 8:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: monster.ptr.prototype.Explode }; } $f._arg = _arg; $f._arg$1 = _arg$1; $f._entry = _entry; $f._i = _i; $f._key = _key; $f._q = _q; $f._q$1 = _q$1; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._ref = _ref; $f._tuple = _tuple; $f._v = _v; $f.c = c; $f.dmg = dmg; $f.ev = ev; $f.g = g; $f.m = m; $f.mons = mons; $f.neighbors = neighbors; $f.pos = pos; $f.$s = $s; $f.$r = $r; return $f;
	};
	monster.prototype.Explode = function(g, ev) { return this.$val.Explode(g, ev); };
	monster.ptr.prototype.MakeHunt = function(g) {
		var g, m;
		m = this;
		m.State = 1;
		position.copy(m.Target, g.Player.Pos);
	};
	monster.prototype.MakeHunt = function(g) { return this.$val.MakeHunt(g); };
	monster.ptr.prototype.MakeHuntIfHurt = function(g) {
		var _arg, _arg$1, _r, _r$1, g, m, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _arg = $f._arg; _arg$1 = $f._arg$1; _r = $f._r; _r$1 = $f._r$1; g = $f.g; m = $f.m; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		m = this;
		/* */ if (m.Exists() && !((m.State === 1))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (m.Exists() && !((m.State === 1))) { */ case 1:
			m.MakeHunt(g);
			/* */ if (m.State === 0) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (m.State === 0) { */ case 3:
				_r = new monsterKind(m.Kind).Definite(true); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				_arg = new $String(_r);
				$r = g.Printf("%s awakes.", new sliceType$7([_arg])); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 4:
			/* */ if (m.Kind === 5) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if (m.Kind === 5) { */ case 7:
				_r$1 = new monsterKind(m.Kind).Definite(true); /* */ $s = 9; case 9: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				_arg$1 = new $String(_r$1);
				$r = g.Printf("%s barks.", new sliceType$7([_arg$1])); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$r = g.MakeNoise(12, $clone(m.Pos, position)); /* */ $s = 11; case 11: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 8:
		/* } */ case 2:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: monster.ptr.prototype.MakeHuntIfHurt }; } $f._arg = _arg; $f._arg$1 = _arg$1; $f._r = _r; $f._r$1 = _r$1; $f.g = g; $f.m = m; $f.$s = $s; $f.$r = $r; return $f;
	};
	monster.prototype.MakeHuntIfHurt = function(g) { return this.$val.MakeHuntIfHurt(g); };
	monster.ptr.prototype.MakeAwareIfHurt = function(g) {
		var _entry, _r, g, m, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _entry = $f._entry; _r = $f._r; g = $f.g; m = $f.m; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		m = this;
		/* */ if ((_entry = g.Player.LOS[position.keyFor(m.Pos)], _entry !== undefined ? _entry.v : false) && !((m.State === 1))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if ((_entry = g.Player.LOS[position.keyFor(m.Pos)], _entry !== undefined ? _entry.v : false) && !((m.State === 1))) { */ case 1:
			$r = m.MakeHuntIfHurt(g); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = -1; return;
		/* } */ case 2:
		if (!((m.State === 0))) {
			$s = -1; return;
		}
		m.State = 2;
		_r = g.FreeCell(); /* */ $s = 4; case 4: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		position.copy(m.Target, _r);
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: monster.ptr.prototype.MakeAwareIfHurt }; } $f._entry = _entry; $f._r = _r; $f.g = g; $f.m = m; $f.$s = $s; $f.$r = $r; return $f;
	};
	monster.prototype.MakeAwareIfHurt = function(g) { return this.$val.MakeAwareIfHurt(g); };
	monster.ptr.prototype.MakeAware = function(g) {
		var _arg, _arg$1, _arg$2, _entry, _entry$1, _entry$2, _entry$3, _entry$4, _q, _q$1, _r, _r$1, _r$2, _r$3, _r$4, adjust, adjust$1, g, m, r, r$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _entry = $f._entry; _entry$1 = $f._entry$1; _entry$2 = $f._entry$2; _entry$3 = $f._entry$3; _entry$4 = $f._entry$4; _q = $f._q; _q$1 = $f._q$1; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; adjust = $f.adjust; adjust$1 = $f.adjust$1; g = $f.g; m = $f.m; r = $f.r; r$1 = $f.r$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		m = this;
		if (!(_entry = g.Player.LOS[position.keyFor(m.Pos)], _entry !== undefined ? _entry.v : false)) {
			$s = -1; return;
		}
		/* */ if (m.State === 0) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (m.State === 0) { */ case 1:
			adjust = (($clone(m.Pos, position).Distance($clone(g.Player.Pos, position)) - (_q = g.LosRange() / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) >> 0) + 1 >> 0);
			if ((_entry$1 = g.Player.Aptitudes[aptitude.keyFor(6)], _entry$1 !== undefined ? _entry$1.v : false)) {
				adjust = adjust + (1) >> 0;
			}
			adjust = $imul(adjust, (adjust));
			_r = RandInt(25 + ($imul(3, adjust)) >> 0); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			r = _r;
			if ((_entry$2 = g.Player.Aptitudes[aptitude.keyFor(4)], _entry$2 !== undefined ? _entry$2.v : false)) {
				r = $imul(r, (2));
			}
			if (r > 5) {
				$s = -1; return;
			}
		/* } */ case 2:
		/* */ if (m.State === 2) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (m.State === 2) { */ case 4:
			adjust$1 = (($clone(m.Pos, position).Distance($clone(g.Player.Pos, position)) - (_q$1 = g.LosRange() / 2, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero")) >> 0) + 1 >> 0);
			if ((_entry$3 = g.Player.Aptitudes[aptitude.keyFor(6)], _entry$3 !== undefined ? _entry$3.v : false)) {
				adjust$1 = adjust$1 + (1) >> 0;
			}
			adjust$1 = $imul(adjust$1, (adjust$1));
			_r$1 = RandInt(30 + adjust$1 >> 0); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			r$1 = _r$1;
			if ((_entry$4 = g.Player.Aptitudes[aptitude.keyFor(4)], _entry$4 !== undefined ? _entry$4.v : false)) {
				r$1 = r$1 + (5) >> 0;
			}
			if (r$1 >= 25) {
				$s = -1; return;
			}
		/* } */ case 5:
		/* */ if (m.State === 0) { $s = 7; continue; }
		/* */ $s = 8; continue;
		/* if (m.State === 0) { */ case 7:
			_r$2 = new monsterKind(m.Kind).Definite(true); /* */ $s = 9; case 9: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_arg = new $String(_r$2);
			$r = g.Printf("%s awakes.", new sliceType$7([_arg])); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 8:
		/* */ if (m.State === 2) { $s = 11; continue; }
		/* */ $s = 12; continue;
		/* if (m.State === 2) { */ case 11:
			_r$3 = new monsterKind(m.Kind).Definite(true); /* */ $s = 13; case 13: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_arg$1 = new $String(_r$3);
			$r = g.Printf("%s notices you.", new sliceType$7([_arg$1])); /* */ $s = 14; case 14: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 12:
		/* */ if (!((m.State === 1)) && (m.Kind === 5)) { $s = 15; continue; }
		/* */ $s = 16; continue;
		/* if (!((m.State === 1)) && (m.Kind === 5)) { */ case 15:
			_r$4 = new monsterKind(m.Kind).Definite(true); /* */ $s = 17; case 17: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			_arg$2 = new $String(_r$4);
			$r = g.Printf("%s barks.", new sliceType$7([_arg$2])); /* */ $s = 18; case 18: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = g.MakeNoise(12, $clone(m.Pos, position)); /* */ $s = 19; case 19: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 16:
		m.MakeHunt(g);
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: monster.ptr.prototype.MakeAware }; } $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._entry = _entry; $f._entry$1 = _entry$1; $f._entry$2 = _entry$2; $f._entry$3 = _entry$3; $f._entry$4 = _entry$4; $f._q = _q; $f._q$1 = _q$1; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f.adjust = adjust; $f.adjust$1 = adjust$1; $f.g = g; $f.m = m; $f.r = r; $f.r$1 = r$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	monster.prototype.MakeAware = function(g) { return this.$val.MakeAware(g); };
	monster.ptr.prototype.Heal = function(g, ev) {
		var ev, g, m, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; ev = $f.ev; g = $f.g; m = $f.m; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		m = this;
		if (m.HP < m.HPmax) {
			m.HP = m.HP + (1) >> 0;
		}
		$r = ev.Renew(g, 50); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: monster.ptr.prototype.Heal }; } $f.ev = ev; $f.g = g; $f.m = m; $f.$s = $s; $f.$r = $r; return $f;
	};
	monster.prototype.Heal = function(g, ev) { return this.$val.Heal(g, ev); };
	monster.ptr.prototype.GatherBand = function(g) {
		var _entry, _i, _r, _r$1, _ref, _tuple, dij, g, m, mons, n, nm, ok, r, x, x$1, x$2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _entry = $f._entry; _i = $f._i; _r = $f._r; _r$1 = $f._r$1; _ref = $f._ref; _tuple = $f._tuple; dij = $f.dij; g = $f.g; m = $f.m; mons = $f.mons; n = $f.n; nm = $f.nm; ok = $f.ok; r = $f.r; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		m = this;
		if (!(x = (x$1 = g.Bands, x$2 = m.Band, ((x$2 < 0 || x$2 >= x$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + x$2])), ((x < 0 || x >= $pkg.MonsBands.$length) ? ($throwRuntimeError("index out of range"), undefined) : $pkg.MonsBands.$array[$pkg.MonsBands.$offset + x])).band) {
			$s = -1; return;
		}
		dij = new normalPath.ptr(g, arrayType$1.zero());
		_r = Dijkstra(dij, new sliceType$5([$clone(m.Pos, position)]), 4); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		nm = _r;
		_ref = g.Monsters;
		_i = 0;
		/* while (true) { */ case 2:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 3; continue; }
			mons = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			/* */ if (mons.Band === m.Band) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (mons.Band === m.Band) { */ case 4:
				/* */ if ((mons.State === 1) && !((m.State === 1))) { $s = 6; continue; }
				/* */ $s = 7; continue;
				/* if ((mons.State === 1) && !((m.State === 1))) { */ case 6:
					_i++;
					/* continue; */ $s = 2; continue;
				/* } */ case 7:
				_tuple = (_entry = nm[position.keyFor(mons.Pos)], _entry !== undefined ? [_entry.v, true] : [ptrType.nil, false]);
				n = _tuple[0];
				ok = _tuple[1];
				/* */ if (!ok || n.Cost > 4) { $s = 8; continue; }
				/* */ $s = 9; continue;
				/* if (!ok || n.Cost > 4) { */ case 8:
					_i++;
					/* continue; */ $s = 2; continue;
				/* } */ case 9:
				_r$1 = RandInt(100); /* */ $s = 10; case 10: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				r = _r$1;
				if (r > 50 || (mons.State === 2) && r > 10) {
					position.copy(mons.Target, m.Target);
					mons.State = m.State;
				}
			/* } */ case 5:
			_i++;
		/* } */ $s = 2; continue; case 3:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: monster.ptr.prototype.GatherBand }; } $f._entry = _entry; $f._i = _i; $f._r = _r; $f._r$1 = _r$1; $f._ref = _ref; $f._tuple = _tuple; $f.dij = dij; $f.g = g; $f.m = m; $f.mons = mons; $f.n = n; $f.nm = nm; $f.ok = ok; $f.r = r; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.$s = $s; $f.$r = $r; return $f;
	};
	monster.prototype.GatherBand = function(g) { return this.$val.GatherBand(g); };
	game.ptr.prototype.MonsterAt = function(pos) {
		var _i, _ref, g, i, index, m, mons, pos;
		g = this;
		mons = ptrType$9.nil;
		index = 0;
		_ref = g.Monsters;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			m = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			if ($equal(m.Pos, pos, position) && m.HP > 0) {
				mons = m;
				index = i;
				break;
			}
			_i++;
		}
		return [mons, index];
	};
	game.prototype.MonsterAt = function(pos) { return this.$val.MonsterAt(pos); };
	game.ptr.prototype.Danger = function() {
		var _i, _ref, danger, g, mons;
		g = this;
		danger = 0;
		_ref = g.Monsters;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			mons = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			danger = danger + (new monsterKind(mons.Kind).Dangerousness()) >> 0;
			_i++;
		}
		return danger;
	};
	game.prototype.Danger = function() { return this.$val.Danger(); };
	game.ptr.prototype.MaxDanger = function() {
		var _1, _entry, _entry$1, _entry$2, _entry$3, _i, _i$1, _keys, _keys$1, _q, _q$1, _q$2, _q$3, _q$4, _q$5, _q$6, _q$7, _ref, _ref$1, adjust, c, g, max, props, q;
		g = this;
		max = (20 + ($imul(10, g.Depth)) >> 0) + (_q = ($imul(g.Depth, g.Depth)) / 3, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) >> 0;
		adjust = $imul(-2, g.Depth);
		_ref = g.Player.Consumables;
		_i = 0;
		_keys = $keys(_ref);
		while (true) {
			if (!(_i < _keys.length)) { break; }
			_entry = _ref[_keys[_i]];
			if (_entry === undefined) {
				_i++;
				continue;
			}
			c = _entry.k;
			q = _entry.v;
			_1 = c;
			if ($interfaceIsEqual(_1, new potion((0))) || $interfaceIsEqual(_1, new potion((9)))) {
				adjust = adjust + (($imul(Min(5, g.Depth), Min(q, Min(5, g.Depth))))) >> 0;
			} else if ($interfaceIsEqual(_1, new potion((1))) || $interfaceIsEqual(_1, new potion((10))) || $interfaceIsEqual(_1, new potion((8)))) {
				adjust = adjust + (($imul(Min(3, g.Depth), Min(q, 3)))) >> 0;
			} else if ($interfaceIsEqual(_1, new potion((4))) || $interfaceIsEqual(_1, new potion((5))) || $interfaceIsEqual(_1, new potion((7))) || $interfaceIsEqual(_1, new potion((2))) || $interfaceIsEqual(_1, new projectile((1)))) {
				adjust = adjust + (($imul(Min(2, g.Depth), Min(q, 3)))) >> 0;
			} else if ($interfaceIsEqual(_1, new projectile((0)))) {
				adjust = adjust + (($imul(Min(1, g.Depth), Min(q, 7)))) >> 0;
			}
			_i++;
		}
		_ref$1 = g.Player.Rods;
		_i$1 = 0;
		_keys$1 = $keys(_ref$1);
		while (true) {
			if (!(_i$1 < _keys$1.length)) { break; }
			_entry$1 = _ref$1[_keys$1[_i$1]];
			if (_entry$1 === undefined) {
				_i$1++;
				continue;
			}
			props = _entry$1.v;
			if (!(props === ptrType$6.nil)) {
				adjust = adjust + (($imul(Min(props.Charge, 2), Min(2, g.Depth)))) >> 0;
			}
			_i$1++;
		}
		if (g.Depth < g.MaxDepth() && (_entry$2 = g.Player.Consumables[consumable.keyFor(new potion(3))], _entry$2 !== undefined ? _entry$2.v : 0) > 0) {
			adjust = adjust + (g.Depth) >> 0;
		}
		if (g.Player.Weapon === 0) {
			adjust = adjust - (($imul(Min(3, g.Depth), Max(1, g.Depth - 2 >> 0)))) >> 0;
		}
		if (g.Player.Armour === 3) {
			adjust = adjust + ((g.MaxDepth() - g.Depth >> 0)) >> 0;
		}
		if (g.Depth > 3 && (g.Player.Shield === 0) && !new weapon(g.Player.Weapon).TwoHanded()) {
			adjust = adjust - (($imul(Min(g.Depth, 6), 2))) >> 0;
		}
		if (new weapon(g.Player.Weapon).TwoHanded() && g.Depth < 4) {
			adjust = adjust + (($imul(((4 - g.Depth >> 0)), 2))) >> 0;
		}
		if ((g.Player.Armour === 2) || (g.Player.Armour === 1)) {
			adjust = adjust + (((_q$1 = g.MaxDepth() / 2, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero")) - g.Depth >> 0)) >> 0;
		}
		if (!((g.Player.Weapon === 0)) && g.Depth < 3) {
			adjust = adjust + ((4 + ($imul(((3 - g.Depth >> 0)), 3)) >> 0)) >> 0;
		}
		if (g.Player.Armour === 0) {
			adjust = adjust - ((_q$2 = ($imul(3, g.Depth)) / 2, (_q$2 === _q$2 && _q$2 !== 1/0 && _q$2 !== -1/0) ? _q$2 >> 0 : $throwRuntimeError("integer divide by zero"))) >> 0;
		}
		if ((max + adjust >> 0) < (max - (_q$3 = max / 3, (_q$3 === _q$3 && _q$3 !== 1/0 && _q$3 !== -1/0) ? _q$3 >> 0 : $throwRuntimeError("integer divide by zero")) >> 0)) {
			max = max - (_q$5 = max / 3, (_q$5 === _q$5 && _q$5 !== 1/0 && _q$5 !== -1/0) ? _q$5 >> 0 : $throwRuntimeError("integer divide by zero")) >> 0;
		} else if ((max + adjust >> 0) > (max + (_q$4 = max / 3, (_q$4 === _q$4 && _q$4 !== 1/0 && _q$4 !== -1/0) ? _q$4 >> 0 : $throwRuntimeError("integer divide by zero")) >> 0)) {
			max = max + (_q$6 = max / 3, (_q$6 === _q$6 && _q$6 !== 1/0 && _q$6 !== -1/0) ? _q$6 >> 0 : $throwRuntimeError("integer divide by zero")) >> 0;
		} else {
			max = max + adjust >> 0;
		}
		if ((g.MaxDepth() - g.Depth >> 0) < (_entry$3 = g.Player.Consumables[consumable.keyFor(new potion(6))], _entry$3 !== undefined ? _entry$3.v : 0)) {
			max = (_q$7 = ($imul(max, 110)) / 100, (_q$7 === _q$7 && _q$7 !== 1/0 && _q$7 !== -1/0) ? _q$7 >> 0 : $throwRuntimeError("integer divide by zero"));
		}
		return max;
	};
	game.prototype.MaxDanger = function() { return this.$val.MaxDanger(); };
	game.ptr.prototype.MaxMonsters = function() {
		var g, max;
		g = this;
		max = 13 + ($imul(3, g.Depth)) >> 0;
		if (max > 33) {
			max = 33;
		}
		return max;
	};
	game.prototype.MaxMonsters = function() { return this.$val.MaxMonsters(); };
	game.ptr.prototype.GenMonsters = function() {
		var _entry, _i, _i$1, _index, _key, _r, _r$1, _r$2, _r$3, _ref, _ref$1, band, danger, data, g, mk, mons, monsters, nband, nmons, pos, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _entry = $f._entry; _i = $f._i; _i$1 = $f._i$1; _index = $f._index; _key = $f._key; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _ref = $f._ref; _ref$1 = $f._ref$1; band = $f.band; danger = $f.danger; data = $f.data; g = $f.g; mk = $f.mk; mons = $f.mons; monsters = $f.monsters; nband = $f.nband; nmons = $f.nmons; pos = $f.pos; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		g = this;
		g.Monsters = new sliceType$12([]);
		g.Bands = new sliceType$13([]);
		danger = g.MaxDanger();
		nmons = g.MaxMonsters();
		nband = 0;
		/* while (true) { */ case 1:
			/* if (!(danger > 0 && nmons > 0)) { break; } */ if(!(danger > 0 && nmons > 0)) { $s = 2; continue; }
			_ref = $pkg.MonsBands;
			_i = 0;
			/* while (true) { */ case 3:
				/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 4; continue; }
				band = _i;
				data = $clone(((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]), monsterBandData);
				_r = RandInt($imul(data.rarity, 2)); /* */ $s = 7; case 7: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				/* */ if (!((_r === 0))) { $s = 5; continue; }
				/* */ $s = 6; continue;
				/* if (!((_r === 0))) { */ case 5:
					_i++;
					/* continue; */ $s = 3; continue;
				/* } */ case 6:
				_r$1 = g.GenBand($clone(data, monsterBandData), ((band >> 0))); /* */ $s = 8; case 8: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				monsters = _r$1;
				/* */ if (monsters === sliceType$16.nil) { $s = 9; continue; }
				/* */ $s = 10; continue;
				/* if (monsters === sliceType$16.nil) { */ case 9:
					_i++;
					/* continue; */ $s = 3; continue;
				/* } */ case 10:
				_index = ((band >> 0));
				_key = _index; (g.GeneratedBands || $throwRuntimeError("assignment to entry in nil map"))[monsterBand.keyFor(_key)] = { k: _key, v: (_entry = g.GeneratedBands[monsterBand.keyFor(_index)], _entry !== undefined ? _entry.v : 0) + (1) >> 0 };
				g.Bands = $append(g.Bands, ((band >> 0)));
				_r$2 = g.FreeCellForMonster(); /* */ $s = 11; case 11: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				pos = $clone(_r$2, position);
				_ref$1 = monsters;
				_i$1 = 0;
				/* while (true) { */ case 12:
					/* if (!(_i$1 < _ref$1.$length)) { break; } */ if(!(_i$1 < _ref$1.$length)) { $s = 13; continue; }
					mk = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$1.$array[_ref$1.$offset + _i$1]);
					danger = danger - (new monsterKind(mk).Dangerousness()) >> 0;
					nmons = nmons - (1) >> 0;
					if (danger <= 0 || nmons <= 0) {
						$s = -1; return;
					}
					mons = new monster.ptr(mk, 0, 0, 0, 0, 0, 0, 0, new position.ptr(0, 0), 0, false, new position.ptr(0, 0), sliceType$5.nil, false, false, false);
					$r = mons.Init(); /* */ $s = 14; case 14: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					position.copy(mons.Pos, pos);
					mons.Band = nband;
					g.Monsters = $append(g.Monsters, mons);
					_r$3 = g.FreeCellForBandMonster($clone(pos, position)); /* */ $s = 15; case 15: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
					position.copy(pos, _r$3);
					_i$1++;
				/* } */ $s = 12; continue; case 13:
				nband = nband + (1) >> 0;
				_i++;
			/* } */ $s = 3; continue; case 4:
		/* } */ $s = 1; continue; case 2:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: game.ptr.prototype.GenMonsters }; } $f._entry = _entry; $f._i = _i; $f._i$1 = _i$1; $f._index = _index; $f._key = _key; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._ref = _ref; $f._ref$1 = _ref$1; $f.band = band; $f.danger = danger; $f.data = data; $f.g = g; $f.mk = mk; $f.mons = mons; $f.monsters = monsters; $f.nband = nband; $f.nmons = nmons; $f.pos = pos; $f.$s = $s; $f.$r = $r; return $f;
	};
	game.prototype.GenMonsters = function() { return this.$val.GenMonsters(); };
	game.ptr.prototype.MonsterInLOS = function() {
		var _entry, _i, _ref, g, mons;
		g = this;
		_ref = g.Monsters;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			mons = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			if (mons.Exists() && (_entry = g.Player.LOS[position.keyFor(mons.Pos)], _entry !== undefined ? _entry.v : false)) {
				return mons;
			}
			_i++;
		}
		return ptrType$9.nil;
	};
	game.prototype.MonsterInLOS = function() { return this.$val.MonsterInLOS(); };
	position.ptr.prototype.Neighbors = function(nb, keep) {
		var _i, _r, _ref, keep, nb, neighbors, npos, pos, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _r = $f._r; _ref = $f._ref; keep = $f.keep; nb = $f.nb; neighbors = $f.neighbors; npos = $f.npos; pos = $f.pos; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		pos = this;
		neighbors = $toNativeArray($kindStruct, [$clone($clone(pos, position).E(), position), $clone($clone(pos, position).W(), position), $clone($clone(pos, position).N(), position), $clone($clone(pos, position).S(), position), $clone($clone(pos, position).NE(), position), $clone($clone(pos, position).NW(), position), $clone($clone(pos, position).SE(), position), $clone($clone(pos, position).SW(), position)]);
		nb = $subslice(nb, 0, 0);
		_ref = neighbors;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < 8)) { break; } */ if(!(_i < 8)) { $s = 2; continue; }
			npos = $clone(((_i < 0 || _i >= _ref.length) ? ($throwRuntimeError("index out of range"), undefined) : _ref[_i]), position);
			_r = keep($clone(npos, position)); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			/* */ if (_r) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (_r) { */ case 3:
				nb = $append(nb, npos);
			/* } */ case 4:
			_i++;
		/* } */ $s = 1; continue; case 2:
		$s = -1; return nb;
		/* */ } return; } if ($f === undefined) { $f = { $blk: position.ptr.prototype.Neighbors }; } $f._i = _i; $f._r = _r; $f._ref = _ref; $f.keep = keep; $f.nb = nb; $f.neighbors = neighbors; $f.npos = npos; $f.pos = pos; $f.$s = $s; $f.$r = $r; return $f;
	};
	position.prototype.Neighbors = function(nb, keep) { return this.$val.Neighbors(nb, keep); };
	position.ptr.prototype.CardinalNeighbors = function(nb, keep) {
		var _i, _r, _ref, keep, nb, neighbors, npos, pos, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _r = $f._r; _ref = $f._ref; keep = $f.keep; nb = $f.nb; neighbors = $f.neighbors; npos = $f.npos; pos = $f.pos; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		pos = this;
		neighbors = $toNativeArray($kindStruct, [$clone($clone(pos, position).E(), position), $clone($clone(pos, position).W(), position), $clone($clone(pos, position).N(), position), $clone($clone(pos, position).S(), position)]);
		nb = $subslice(nb, 0, 0);
		_ref = neighbors;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < 4)) { break; } */ if(!(_i < 4)) { $s = 2; continue; }
			npos = $clone(((_i < 0 || _i >= _ref.length) ? ($throwRuntimeError("index out of range"), undefined) : _ref[_i]), position);
			_r = keep($clone(npos, position)); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			/* */ if (_r) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (_r) { */ case 3:
				nb = $append(nb, npos);
			/* } */ case 4:
			_i++;
		/* } */ $s = 1; continue; case 2:
		$s = -1; return nb;
		/* */ } return; } if ($f === undefined) { $f = { $blk: position.ptr.prototype.CardinalNeighbors }; } $f._i = _i; $f._r = _r; $f._ref = _ref; $f.keep = keep; $f.nb = nb; $f.neighbors = neighbors; $f.npos = npos; $f.pos = pos; $f.$s = $s; $f.$r = $r; return $f;
	};
	position.prototype.CardinalNeighbors = function(nb, keep) { return this.$val.CardinalNeighbors(nb, keep); };
	position.ptr.prototype.OutsideNeighbors = function() {
		var _r, nb, pos, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; nb = $f.nb; pos = $f.pos; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		pos = this;
		nb = $makeSlice(sliceType$5, 0, 8);
		_r = $clone(pos, position).Neighbors(nb, (function(npos) {
			var npos;
			return !$clone(npos, position).valid();
		})); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		nb = _r;
		$s = -1; return nb;
		/* */ } return; } if ($f === undefined) { $f = { $blk: position.ptr.prototype.OutsideNeighbors }; } $f._r = _r; $f.nb = nb; $f.pos = pos; $f.$s = $s; $f.$r = $r; return $f;
	};
	position.prototype.OutsideNeighbors = function() { return this.$val.OutsideNeighbors(); };
	position.ptr.prototype.ValidNeighbors = function() {
		var _r, nb, pos, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; nb = $f.nb; pos = $f.pos; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		pos = this;
		nb = $makeSlice(sliceType$5, 0, 8);
		_r = $clone(pos, position).Neighbors(nb, $methodExpr(position, "valid")); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		nb = _r;
		$s = -1; return nb;
		/* */ } return; } if ($f === undefined) { $f = { $blk: position.ptr.prototype.ValidNeighbors }; } $f._r = _r; $f.nb = nb; $f.pos = pos; $f.$s = $s; $f.$r = $r; return $f;
	};
	position.prototype.ValidNeighbors = function() { return this.$val.ValidNeighbors(); };
	dungeon.ptr.prototype.IsFreeCell = function(pos) {
		var d, pos;
		d = this;
		return $clone(pos, position).valid() && !((d.Cell($clone(pos, position)).T === 0));
	};
	dungeon.prototype.IsFreeCell = function(pos) { return this.$val.IsFreeCell(pos); };
	dungeon.ptr.prototype.FreeNeighbors = function(pos) {
		var _r, d, nb, pos, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; d = $f.d; nb = $f.nb; pos = $f.pos; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		d = this;
		nb = $makeSlice(sliceType$5, 0, 8);
		_r = $clone(pos, position).Neighbors(nb, $methodVal(d, "IsFreeCell")); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		nb = _r;
		$s = -1; return nb;
		/* */ } return; } if ($f === undefined) { $f = { $blk: dungeon.ptr.prototype.FreeNeighbors }; } $f._r = _r; $f.d = d; $f.nb = nb; $f.pos = pos; $f.$s = $s; $f.$r = $r; return $f;
	};
	dungeon.prototype.FreeNeighbors = function(pos) { return this.$val.FreeNeighbors(pos); };
	dungeon.ptr.prototype.CardinalFreeNeighbors = function(pos) {
		var _r, d, nb, pos, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; d = $f.d; nb = $f.nb; pos = $f.pos; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		d = this;
		nb = $makeSlice(sliceType$5, 0, 4);
		_r = $clone(pos, position).CardinalNeighbors(nb, $methodVal(d, "IsFreeCell")); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		nb = _r;
		$s = -1; return nb;
		/* */ } return; } if ($f === undefined) { $f = { $blk: dungeon.ptr.prototype.CardinalFreeNeighbors }; } $f._r = _r; $f.d = d; $f.nb = nb; $f.pos = pos; $f.$s = $s; $f.$r = $r; return $f;
	};
	dungeon.prototype.CardinalFreeNeighbors = function(pos) { return this.$val.CardinalFreeNeighbors(pos); };
	dungeonPath.ptr.prototype.Neighbors = function(pos) {
		var _r, dp, nb, pos, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; dp = $f.dp; nb = $f.nb; pos = $f.pos; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		dp = this;
		nb = $subslice(new sliceType$5(dp.neighbors), 0, 0);
		_r = $clone(pos, position).Neighbors(nb, $methodExpr(position, "valid")); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: dungeonPath.ptr.prototype.Neighbors }; } $f._r = _r; $f.dp = dp; $f.nb = nb; $f.pos = pos; $f.$s = $s; $f.$r = $r; return $f;
	};
	dungeonPath.prototype.Neighbors = function(pos) { return this.$val.Neighbors(pos); };
	dungeonPath.ptr.prototype.Cost = function(from, to) {
		var dp, from, to;
		dp = this;
		if (dp.dungeon.Cell($clone(to, position)).T === 0) {
			return 4;
		}
		return 1;
	};
	dungeonPath.prototype.Cost = function(from, to) { return this.$val.Cost(from, to); };
	dungeonPath.ptr.prototype.Estimation = function(from, to) {
		var dp, from, to;
		dp = this;
		return $clone(from, position).Distance($clone(to, position));
	};
	dungeonPath.prototype.Estimation = function(from, to) { return this.$val.Estimation(from, to); };
	playerPath.ptr.prototype.Neighbors = function(pos) {
		var _r, _r$1, d, keep, nb, pos, pp, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; d = $f.d; keep = $f.keep; nb = $f.nb; pos = $f.pos; pp = $f.pp; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		d = [d];
		pp = [pp];
		pp[0] = this;
		d[0] = pp[0].game.Dungeon;
		nb = $subslice(new sliceType$5(pp[0].neighbors), 0, 0);
		keep = (function(d, pp) { return function(npos) {
			var _entry, _entry$1, _entry$2, _entry$3, _tuple, cld, npos, ok;
			_tuple = (_entry = pp[0].game.Clouds[position.keyFor(npos)], _entry !== undefined ? [_entry.v, true] : [0, false]);
			cld = _tuple[0];
			ok = _tuple[1];
			if (ok && (cld === 1) && !(_entry$1 = pp[0].game.UnknownBurn[position.keyFor(npos)], _entry$1 !== undefined ? _entry$1.v : false)) {
				return false;
			}
			return $clone(npos, position).valid() && !((d[0].Cell($clone(npos, position)).T === 0)) && d[0].Cell($clone(npos, position)).Explored && !(_entry$2 = pp[0].game.UnknownDig[position.keyFor(npos)], _entry$2 !== undefined ? _entry$2.v : false) && !(_entry$3 = pp[0].game.ExclusionsMap[position.keyFor(npos)], _entry$3 !== undefined ? _entry$3.v : false);
		}; })(d, pp);
		/* */ if (pp[0].game.Player.HasStatus(6)) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (pp[0].game.Player.HasStatus(6)) { */ case 1:
			_r = $clone(pos, position).CardinalNeighbors(nb, keep); /* */ $s = 4; case 4: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			nb = _r;
			$s = 3; continue;
		/* } else { */ case 2:
			_r$1 = $clone(pos, position).Neighbors(nb, keep); /* */ $s = 5; case 5: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			nb = _r$1;
		/* } */ case 3:
		$s = -1; return nb;
		/* */ } return; } if ($f === undefined) { $f = { $blk: playerPath.ptr.prototype.Neighbors }; } $f._r = _r; $f._r$1 = _r$1; $f.d = d; $f.keep = keep; $f.nb = nb; $f.pos = pos; $f.pp = pp; $f.$s = $s; $f.$r = $r; return $f;
	};
	playerPath.prototype.Neighbors = function(pos) { return this.$val.Neighbors(pos); };
	playerPath.ptr.prototype.Cost = function(from, to) {
		var from, pp, to;
		pp = this;
		return 1;
	};
	playerPath.prototype.Cost = function(from, to) { return this.$val.Cost(from, to); };
	playerPath.ptr.prototype.Estimation = function(from, to) {
		var from, pp, to;
		pp = this;
		return $clone(from, position).Distance($clone(to, position));
	};
	playerPath.prototype.Estimation = function(from, to) { return this.$val.Estimation(from, to); };
	noisePath.ptr.prototype.Neighbors = function(pos) {
		var _r, d, fp, keep, nb, pos, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; d = $f.d; fp = $f.fp; keep = $f.keep; nb = $f.nb; pos = $f.pos; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		d = [d];
		fp = this;
		nb = $subslice(new sliceType$5(fp.neighbors), 0, 0);
		d[0] = fp.game.Dungeon;
		keep = (function(d) { return function(npos) {
			var npos;
			return $clone(npos, position).valid() && !((d[0].Cell($clone(npos, position)).T === 0));
		}; })(d);
		_r = $clone(pos, position).Neighbors(nb, keep); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: noisePath.ptr.prototype.Neighbors }; } $f._r = _r; $f.d = d; $f.fp = fp; $f.keep = keep; $f.nb = nb; $f.pos = pos; $f.$s = $s; $f.$r = $r; return $f;
	};
	noisePath.prototype.Neighbors = function(pos) { return this.$val.Neighbors(pos); };
	noisePath.ptr.prototype.Cost = function(from, to) {
		var fp, from, to;
		fp = this;
		return 1;
	};
	noisePath.prototype.Cost = function(from, to) { return this.$val.Cost(from, to); };
	normalPath.ptr.prototype.Neighbors = function(pos) {
		var _r, _r$1, d, keep, nb, np, pos, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; d = $f.d; keep = $f.keep; nb = $f.nb; np = $f.np; pos = $f.pos; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		d = [d];
		np = this;
		nb = $subslice(new sliceType$5(np.neighbors), 0, 0);
		d[0] = np.game.Dungeon;
		keep = (function(d) { return function(npos) {
			var npos;
			return $clone(npos, position).valid() && !((d[0].Cell($clone(npos, position)).T === 0));
		}; })(d);
		/* */ if (np.game.Player.HasStatus(6)) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (np.game.Player.HasStatus(6)) { */ case 1:
			_r = $clone(pos, position).CardinalNeighbors(nb, keep); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$s = -1; return _r;
		/* } */ case 2:
		_r$1 = $clone(pos, position).Neighbors(nb, keep); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$s = -1; return _r$1;
		/* */ } return; } if ($f === undefined) { $f = { $blk: normalPath.ptr.prototype.Neighbors }; } $f._r = _r; $f._r$1 = _r$1; $f.d = d; $f.keep = keep; $f.nb = nb; $f.np = np; $f.pos = pos; $f.$s = $s; $f.$r = $r; return $f;
	};
	normalPath.prototype.Neighbors = function(pos) { return this.$val.Neighbors(pos); };
	normalPath.ptr.prototype.Cost = function(from, to) {
		var from, np, to;
		np = this;
		return 1;
	};
	normalPath.prototype.Cost = function(from, to) { return this.$val.Cost(from, to); };
	autoexplorePath.ptr.prototype.Neighbors = function(pos) {
		var _entry, _r, _r$1, ap, d, keep, nb, pos, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _entry = $f._entry; _r = $f._r; _r$1 = $f._r$1; ap = $f.ap; d = $f.d; keep = $f.keep; nb = $f.nb; pos = $f.pos; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		ap = [ap];
		d = [d];
		ap[0] = this;
		if ((_entry = ap[0].game.ExclusionsMap[position.keyFor(pos)], _entry !== undefined ? _entry.v : false)) {
			$s = -1; return sliceType$5.nil;
		}
		d[0] = ap[0].game.Dungeon;
		nb = $subslice(new sliceType$5(ap[0].neighbors), 0, 0);
		keep = (function(ap, d) { return function(npos) {
			var _entry$1, _entry$2, _entry$3, _tuple, cld, npos, ok;
			_tuple = (_entry$1 = ap[0].game.Clouds[position.keyFor(npos)], _entry$1 !== undefined ? [_entry$1.v, true] : [0, false]);
			cld = _tuple[0];
			ok = _tuple[1];
			if (ok && (cld === 1) && !(_entry$2 = ap[0].game.UnknownBurn[position.keyFor(npos)], _entry$2 !== undefined ? _entry$2.v : false)) {
				return false;
			}
			return $clone(npos, position).valid() && !((d[0].Cell($clone(npos, position)).T === 0)) && !(_entry$3 = ap[0].game.ExclusionsMap[position.keyFor(npos)], _entry$3 !== undefined ? _entry$3.v : false);
		}; })(ap, d);
		/* */ if (ap[0].game.Player.HasStatus(6)) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (ap[0].game.Player.HasStatus(6)) { */ case 1:
			_r = $clone(pos, position).CardinalNeighbors(nb, keep); /* */ $s = 4; case 4: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			nb = _r;
			$s = 3; continue;
		/* } else { */ case 2:
			_r$1 = $clone(pos, position).Neighbors(nb, keep); /* */ $s = 5; case 5: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			nb = _r$1;
		/* } */ case 3:
		$s = -1; return nb;
		/* */ } return; } if ($f === undefined) { $f = { $blk: autoexplorePath.ptr.prototype.Neighbors }; } $f._entry = _entry; $f._r = _r; $f._r$1 = _r$1; $f.ap = ap; $f.d = d; $f.keep = keep; $f.nb = nb; $f.pos = pos; $f.$s = $s; $f.$r = $r; return $f;
	};
	autoexplorePath.prototype.Neighbors = function(pos) { return this.$val.Neighbors(pos); };
	autoexplorePath.ptr.prototype.Cost = function(from, to) {
		var ap, from, to;
		ap = this;
		return 1;
	};
	autoexplorePath.prototype.Cost = function(from, to) { return this.$val.Cost(from, to); };
	monPath.ptr.prototype.Neighbors = function(pos) {
		var _r, _r$1, d, keep, mp, nb, pos, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; d = $f.d; keep = $f.keep; mp = $f.mp; nb = $f.nb; pos = $f.pos; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		d = [d];
		mp = [mp];
		mp[0] = this;
		nb = $subslice(new sliceType$5(mp[0].neighbors), 0, 0);
		d[0] = mp[0].game.Dungeon;
		keep = (function(d, mp) { return function(npos) {
			var npos;
			return $clone(npos, position).valid() && (!((d[0].Cell($clone(npos, position)).T === 0)) || mp[0].wall);
		}; })(d, mp);
		/* */ if (mp[0].monster.Status(0)) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (mp[0].monster.Status(0)) { */ case 1:
			_r = $clone(pos, position).CardinalNeighbors(nb, keep); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$s = -1; return _r;
		/* } */ case 2:
		_r$1 = $clone(pos, position).Neighbors(nb, keep); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$s = -1; return _r$1;
		/* */ } return; } if ($f === undefined) { $f = { $blk: monPath.ptr.prototype.Neighbors }; } $f._r = _r; $f._r$1 = _r$1; $f.d = d; $f.keep = keep; $f.mp = mp; $f.nb = nb; $f.pos = pos; $f.$s = $s; $f.$r = $r; return $f;
	};
	monPath.prototype.Neighbors = function(pos) { return this.$val.Neighbors(pos); };
	monPath.ptr.prototype.Cost = function(from, to) {
		var _tuple, from, g, mons, mp, to;
		mp = this;
		g = mp.game;
		_tuple = g.MonsterAt($clone(to, position));
		mons = _tuple[0];
		if (!mons.Exists()) {
			if (mp.wall && (g.Dungeon.Cell($clone(to, position)).T === 0) && !((mp.monster.State === 1))) {
				return 6;
			}
			return 1;
		}
		return 4;
	};
	monPath.prototype.Cost = function(from, to) { return this.$val.Cost(from, to); };
	monPath.ptr.prototype.Estimation = function(from, to) {
		var from, mp, to;
		mp = this;
		return $clone(from, position).Distance($clone(to, position));
	};
	monPath.prototype.Estimation = function(from, to) { return this.$val.Estimation(from, to); };
	monster.ptr.prototype.APath = function(g, from, to) {
		var _r, _tuple, found, from, g, m, mp, path, to, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; found = $f.found; from = $f.from; g = $f.g; m = $f.m; mp = $f.mp; path = $f.path; to = $f.to; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		m = this;
		mp = new monPath.ptr(g, m, false, arrayType$1.zero());
		if (m.Kind === 14) {
			mp.wall = true;
		}
		_r = AstarPath(mp, $clone(from, position), $clone(to, position)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		path = _tuple[0];
		found = _tuple[2];
		if (!found) {
			$s = -1; return sliceType$5.nil;
		}
		$s = -1; return path;
		/* */ } return; } if ($f === undefined) { $f = { $blk: monster.ptr.prototype.APath }; } $f._r = _r; $f._tuple = _tuple; $f.found = found; $f.from = from; $f.g = g; $f.m = m; $f.mp = mp; $f.path = path; $f.to = to; $f.$s = $s; $f.$r = $r; return $f;
	};
	monster.prototype.APath = function(g, from, to) { return this.$val.APath(g, from, to); };
	game.ptr.prototype.PlayerPath = function(from, to) {
		var _r, _tuple, found, from, g, path, pp, to, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; found = $f.found; from = $f.from; g = $f.g; path = $f.path; pp = $f.pp; to = $f.to; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		g = this;
		pp = new playerPath.ptr(g, arrayType$1.zero());
		_r = AstarPath(pp, $clone(from, position), $clone(to, position)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		path = _tuple[0];
		found = _tuple[2];
		if (!found) {
			$s = -1; return sliceType$5.nil;
		}
		$s = -1; return path;
		/* */ } return; } if ($f === undefined) { $f = { $blk: game.ptr.prototype.PlayerPath }; } $f._r = _r; $f._tuple = _tuple; $f.found = found; $f.from = from; $f.g = g; $f.path = path; $f.pp = pp; $f.to = to; $f.$s = $s; $f.$r = $r; return $f;
	};
	game.prototype.PlayerPath = function(from, to) { return this.$val.PlayerPath(from, to); };
	game.ptr.prototype.SortedNearestTo = function(cells, to) {
		var _i, _i$1, _r, _ref, _ref$1, _tuple, cells, cost, found, g, pc, pos, pp, ps, sorted, to, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _i$1 = $f._i$1; _r = $f._r; _ref = $f._ref; _ref$1 = $f._ref$1; _tuple = $f._tuple; cells = $f.cells; cost = $f.cost; found = $f.found; g = $f.g; pc = $f.pc; pos = $f.pos; pp = $f.pp; ps = $f.ps; sorted = $f.sorted; to = $f.to; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		g = this;
		ps = new posSlice([]);
		_ref = cells;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			pos = $clone(((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]), position);
			pp = new dungeonPath.ptr(g.Dungeon, arrayType$1.zero());
			_r = AstarPath(pp, $clone(pos, position), $clone(to, position)); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r;
			cost = _tuple[1];
			found = _tuple[2];
			if (found) {
				ps = $append(ps, new posCost.ptr($clone(pos, position), cost));
			}
			_i++;
		/* } */ $s = 1; continue; case 2:
		$r = sort.Sort(ps); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		sorted = new sliceType$5([]);
		_ref$1 = ps;
		_i$1 = 0;
		while (true) {
			if (!(_i$1 < _ref$1.$length)) { break; }
			pc = $clone(((_i$1 < 0 || _i$1 >= _ref$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$1.$array[_ref$1.$offset + _i$1]), posCost);
			sorted = $append(sorted, pc.pos);
			_i$1++;
		}
		$s = -1; return sorted;
		/* */ } return; } if ($f === undefined) { $f = { $blk: game.ptr.prototype.SortedNearestTo }; } $f._i = _i; $f._i$1 = _i$1; $f._r = _r; $f._ref = _ref; $f._ref$1 = _ref$1; $f._tuple = _tuple; $f.cells = cells; $f.cost = cost; $f.found = found; $f.g = g; $f.pc = pc; $f.pos = pos; $f.pp = pp; $f.ps = ps; $f.sorted = sorted; $f.to = to; $f.$s = $s; $f.$r = $r; return $f;
	};
	game.prototype.SortedNearestTo = function(cells, to) { return this.$val.SortedNearestTo(cells, to); };
	posSlice.prototype.Len = function() {
		var ps;
		ps = this;
		return ps.$length;
	};
	$ptrType(posSlice).prototype.Len = function() { return this.$get().Len(); };
	posSlice.prototype.Swap = function(i, j) {
		var _tmp, _tmp$1, i, j, ps;
		ps = this;
		_tmp = $clone(((j < 0 || j >= ps.$length) ? ($throwRuntimeError("index out of range"), undefined) : ps.$array[ps.$offset + j]), posCost);
		_tmp$1 = $clone(((i < 0 || i >= ps.$length) ? ($throwRuntimeError("index out of range"), undefined) : ps.$array[ps.$offset + i]), posCost);
		posCost.copy(((i < 0 || i >= ps.$length) ? ($throwRuntimeError("index out of range"), undefined) : ps.$array[ps.$offset + i]), _tmp);
		posCost.copy(((j < 0 || j >= ps.$length) ? ($throwRuntimeError("index out of range"), undefined) : ps.$array[ps.$offset + j]), _tmp$1);
	};
	$ptrType(posSlice).prototype.Swap = function(i, j) { return this.$get().Swap(i, j); };
	posSlice.prototype.Less = function(i, j) {
		var i, j, ps;
		ps = this;
		return ((i < 0 || i >= ps.$length) ? ($throwRuntimeError("index out of range"), undefined) : ps.$array[ps.$offset + i]).cost < ((j < 0 || j >= ps.$length) ? ($throwRuntimeError("index out of range"), undefined) : ps.$array[ps.$offset + j]).cost;
	};
	$ptrType(posSlice).prototype.Less = function(i, j) { return this.$get().Less(i, j); };
	player.ptr.prototype.HPMax = function() {
		var _entry, hpmax, p;
		p = this;
		hpmax = 40;
		if ((_entry = p.Aptitudes[aptitude.keyFor(3)], _entry !== undefined ? _entry.v : false)) {
			hpmax = hpmax + (10) >> 0;
		}
		return hpmax;
	};
	player.prototype.HPMax = function() { return this.$val.HPMax(); };
	player.ptr.prototype.MPMax = function() {
		var _entry, mpmax, p;
		p = this;
		mpmax = 10;
		if ((_entry = p.Aptitudes[aptitude.keyFor(7)], _entry !== undefined ? _entry.v : false)) {
			mpmax = mpmax + (5) >> 0;
		}
		return mpmax;
	};
	player.prototype.MPMax = function() { return this.$val.MPMax(); };
	player.ptr.prototype.Accuracy = function() {
		var _entry, acc, p;
		p = this;
		acc = 15;
		if ((_entry = p.Aptitudes[aptitude.keyFor(0)], _entry !== undefined ? _entry.v : false)) {
			acc = acc + (2) >> 0;
		}
		return acc;
	};
	player.prototype.Accuracy = function() { return this.$val.Accuracy(); };
	player.ptr.prototype.RangedAccuracy = function() {
		var _entry, acc, p;
		p = this;
		acc = 15;
		if ((_entry = p.Aptitudes[aptitude.keyFor(0)], _entry !== undefined ? _entry.v : false)) {
			acc = acc + (10) >> 0;
		}
		return acc;
	};
	player.prototype.RangedAccuracy = function() { return this.$val.RangedAccuracy(); };
	player.ptr.prototype.Armor = function() {
		var _1, _entry, _entry$1, _q, ar, p;
		p = this;
		ar = 0;
		_1 = p.Armour;
		if (_1 === (1)) {
			ar = ar + (3) >> 0;
		} else if (_1 === (2)) {
			ar = ar + (4) >> 0;
		} else if (_1 === (3)) {
			ar = ar + (6) >> 0;
		}
		if ((_entry = p.Aptitudes[aptitude.keyFor(5)], _entry !== undefined ? _entry.v : false)) {
			ar = ar + (2) >> 0;
		}
		if (p.HasStatus(5)) {
			ar = 9 + (_q = ar / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) >> 0;
		}
		if (p.HasStatus(10)) {
			ar = ar - (($imul(2, (_entry$1 = p.Statuses[status.keyFor(10)], _entry$1 !== undefined ? _entry$1.v : 0)))) >> 0;
			if (ar < 0) {
				ar = 0;
			}
		}
		return ar;
	};
	player.prototype.Armor = function() { return this.$val.Armor(); };
	player.ptr.prototype.Attack = function() {
		var _entry, _entry$1, _q, attack, p, penalty;
		p = this;
		attack = new weapon(p.Weapon).Attack();
		if ((_entry = p.Aptitudes[aptitude.keyFor(10)], _entry !== undefined ? _entry.v : false)) {
			attack = attack + ((_q = attack / 5, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"))) >> 0;
		}
		if (p.HasStatus(10)) {
			penalty = (_entry$1 = p.Statuses[status.keyFor(10)], _entry$1 !== undefined ? _entry$1.v : 0);
			if (penalty > 5) {
				penalty = 5;
			}
			attack = attack - (penalty) >> 0;
		}
		return attack;
	};
	player.prototype.Attack = function() { return this.$val.Attack(); };
	player.ptr.prototype.Block = function() {
		var _q, block, p;
		p = this;
		block = new shield(p.Shield).Block();
		if (p.HasStatus(9)) {
			block = (_q = block / (3), (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
		}
		return block;
	};
	player.prototype.Block = function() { return this.$val.Block(); };
	player.ptr.prototype.Evasion = function() {
		var _entry, ev, p;
		p = this;
		ev = 15;
		if ((_entry = p.Aptitudes[aptitude.keyFor(1)], _entry !== undefined ? _entry.v : false)) {
			ev = ev + (3) >> 0;
		}
		if (p.HasStatus(4)) {
			ev = ev + (7) >> 0;
		}
		return ev;
	};
	player.prototype.Evasion = function() { return this.$val.Evasion(); };
	player.ptr.prototype.HasStatus = function(st) {
		var _entry, p, st;
		p = this;
		return (_entry = p.Statuses[status.keyFor(st)], _entry !== undefined ? _entry.v : 0) > 0;
	};
	player.prototype.HasStatus = function(st) { return this.$val.HasStatus(st); };
	player.ptr.prototype.AptitudeCount = function() {
		var _entry, _i, _keys, _ref, b, count, p;
		p = this;
		count = 0;
		_ref = p.Aptitudes;
		_i = 0;
		_keys = $keys(_ref);
		while (true) {
			if (!(_i < _keys.length)) { break; }
			_entry = _ref[_keys[_i]];
			if (_entry === undefined) {
				_i++;
				continue;
			}
			b = _entry.v;
			if (b) {
				count = count + (1) >> 0;
			}
			_i++;
		}
		return count;
	};
	player.prototype.AptitudeCount = function() { return this.$val.AptitudeCount(); };
	game.ptr.prototype.AutoToDir = function(ev) {
		var _r, _r$1, err, ev, g, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; err = $f.err; ev = $f.ev; g = $f.g; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		g = this;
		/* */ if (g.MonsterInLOS() === ptrType$9.nil) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (g.MonsterInLOS() === ptrType$9.nil) { */ case 1:
			_r = g.MovePlayer($clone($clone(g.Player.Pos, position).To(g.AutoDir.$get()), position), ev); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			err = _r;
			/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 4:
				_r$1 = err.Error(); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				$r = g.Print(_r$1); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				g.AutoDir = ptrType$11.nil;
				$s = -1; return false;
			/* } */ case 5:
			$s = -1; return true;
		/* } */ case 2:
		g.AutoDir = ptrType$11.nil;
		$s = -1; return false;
		/* */ } return; } if ($f === undefined) { $f = { $blk: game.ptr.prototype.AutoToDir }; } $f._r = _r; $f._r$1 = _r$1; $f.err = err; $f.ev = ev; $f.g = g; $f.$s = $s; $f.$r = $r; return $f;
	};
	game.prototype.AutoToDir = function(ev) { return this.$val.AutoToDir(ev); };
	game.ptr.prototype.GoToDir = function(dir, ev) {
		var _r, dir, err, ev, g, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; dir = $f.dir; err = $f.err; ev = $f.ev; g = $f.g; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		dir = [dir];
		g = this;
		if (!(g.MonsterInLOS() === ptrType$9.nil)) {
			g.AutoDir = ptrType$11.nil;
			$s = -1; return errors.New("You cannot travel while there are monsters in view.");
		}
		_r = g.MovePlayer($clone($clone(g.Player.Pos, position).To(dir[0]), position), ev); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		err = _r;
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
		}
		g.AutoDir = (dir.$ptr || (dir.$ptr = new ptrType$11(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, dir)));
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: game.ptr.prototype.GoToDir }; } $f._r = _r; $f.dir = dir; $f.err = err; $f.ev = ev; $f.g = g; $f.$s = $s; $f.$r = $r; return $f;
	};
	game.prototype.GoToDir = function(dir, ev) { return this.$val.GoToDir(dir, ev); };
	game.ptr.prototype.MoveToTarget = function(ev) {
		var _r, _r$1, _r$2, err, ev, g, path, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; err = $f.err; ev = $f.ev; g = $f.g; path = $f.path; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		g = this;
		/* */ if (!(g.AutoTarget === ptrType$1.nil)) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!(g.AutoTarget === ptrType$1.nil)) { */ case 1:
			_r = g.PlayerPath($clone(g.Player.Pos, position), $clone(g.AutoTarget, position)); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			path = _r;
			if (!(g.MonsterInLOS() === ptrType$9.nil)) {
				g.AutoTarget = ptrType$1.nil;
			}
			/* */ if (path.$length >= 1) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (path.$length >= 1) { */ case 4:
				err = $ifaceNil;
				/* */ if (path.$length > 1) { $s = 6; continue; }
				/* */ $s = 7; continue;
				/* if (path.$length > 1) { */ case 6:
					_r$1 = g.MovePlayer($clone((x = path.$length - 2 >> 0, ((x < 0 || x >= path.$length) ? ($throwRuntimeError("index out of range"), undefined) : path.$array[path.$offset + x])), position), ev); /* */ $s = 9; case 9: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
					err = _r$1;
					$s = 8; continue;
				/* } else { */ case 7:
					$r = g.WaitTurn(ev); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 8:
				/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 11; continue; }
				/* */ if (!(g.AutoTarget === ptrType$1.nil) && $equal(g.Player.Pos, g.AutoTarget, position)) { $s = 12; continue; }
				/* */ $s = 13; continue;
				/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 11:
					_r$2 = err.Error(); /* */ $s = 14; case 14: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
					$r = g.Print(_r$2); /* */ $s = 15; case 15: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					g.AutoTarget = ptrType$1.nil;
					$s = -1; return false;
				/* } else if (!(g.AutoTarget === ptrType$1.nil) && $equal(g.Player.Pos, g.AutoTarget, position)) { */ case 12:
					g.AutoTarget = ptrType$1.nil;
				/* } */ case 13:
				$s = -1; return true;
			/* } */ case 5:
		/* } */ case 2:
		g.AutoTarget = ptrType$1.nil;
		$s = -1; return false;
		/* */ } return; } if ($f === undefined) { $f = { $blk: game.ptr.prototype.MoveToTarget }; } $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.err = err; $f.ev = ev; $f.g = g; $f.path = path; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	game.prototype.MoveToTarget = function(ev) { return this.$val.MoveToTarget(ev); };
	game.ptr.prototype.WaitTurn = function(ev) {
		var ev, g, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; ev = $f.ev; g = $f.g; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		g = this;
		$r = g.ScummingAction(ev); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = ev.Renew(g, 10); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: game.ptr.prototype.WaitTurn }; } $f.ev = ev; $f.g = g; $f.$s = $s; $f.$r = $r; return $f;
	};
	game.prototype.WaitTurn = function(ev) { return this.$val.WaitTurn(ev); };
	game.ptr.prototype.ExistsMonster = function() {
		var _i, _ref, g, mons;
		g = this;
		_ref = g.Monsters;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			mons = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			if (mons.Exists()) {
				return true;
			}
			_i++;
		}
		return false;
	};
	game.prototype.ExistsMonster = function() { return this.$val.ExistsMonster(); };
	game.ptr.prototype.ScummingAction = function(ev) {
		var _arg, _i, _key, _key$1, _q, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _ref, delay, ev, g, neighbors, pos, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _arg = $f._arg; _i = $f._i; _key = $f._key; _key$1 = $f._key$1; _q = $f._q; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _ref = $f._ref; delay = $f.delay; ev = $f.ev; g = $f.g; neighbors = $f.neighbors; pos = $f.pos; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		g = this;
		if ((g.Player.HP === g.Player.HPMax()) && (g.Player.MP === g.Player.MPMax())) {
			g.Scumming = g.Scumming + (1) >> 0;
		}
		if (g.Scumming === 100) {
			if (g.ExistsMonster()) {
				g.PrintStyled("You feel a little bored.", 1);
				g.StopAuto();
			}
		}
		/* */ if (g.Scumming > 120) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (g.Scumming > 120) { */ case 1:
			if (!g.ExistsMonster()) {
				g.Scumming = 0;
				$s = -1; return;
			}
			g.Player.HP = (_q = g.Player.HP / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
			_r = RandInt(2); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			/* */ if (_r === 0) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (_r === 0) { */ case 3:
				$r = g.MakeNoise(100, $clone(g.Player.Pos, position)); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				_r$1 = $clone(g.Player.Pos, position).ValidNeighbors(); /* */ $s = 8; case 8: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				neighbors = _r$1;
				_ref = neighbors;
				_i = 0;
				/* while (true) { */ case 9:
					/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 10; continue; }
					pos = $clone(((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]), position);
					_r$2 = RandInt(3); /* */ $s = 13; case 13: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
					/* */ if (!((_r$2 === 0))) { $s = 11; continue; }
					/* */ $s = 12; continue;
					/* if (!((_r$2 === 0))) { */ case 11:
						g.Dungeon.SetCell($clone(pos, position), 1);
						$r = g.ui.WallExplosionAnimation(g, $clone(pos, position)); /* */ $s = 14; case 14: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						$r = g.Fog($clone(pos, position), 1, ev); /* */ $s = 15; case 15: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					/* } */ case 12:
					_i++;
				/* } */ $s = 9; continue; case 10:
				_r$3 = g.ExplosionSound(); /* */ $s = 16; case 16: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				_arg = new $String(_r$3);
				$r = g.PrintfStyled("%s An explosion comes from the ground. You are lignified.", 1, new sliceType$7([_arg])); /* */ $s = 17; case 17: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				_key = 5; (g.Player.Statuses || $throwRuntimeError("assignment to entry in nil map"))[status.keyFor(_key)] = { k: _key, v: 1 };
				_r$4 = ev.Rank(); /* */ $s = 18; case 18: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				_r$5 = RandInt(10); /* */ $s = 19; case 19: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
				$r = g.PushEvent(new simpleEvent.ptr((_r$4 + 240 >> 0) + _r$5 >> 0, 9)); /* */ $s = 20; case 20: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 5; continue;
			/* } else { */ case 4:
				_r$6 = RandInt(5); /* */ $s = 21; case 21: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
				delay = 20 + _r$6 >> 0;
				_key$1 = 7; (g.Player.Statuses || $throwRuntimeError("assignment to entry in nil map"))[status.keyFor(_key$1)] = { k: _key$1, v: 1 };
				_r$7 = ev.Rank(); /* */ $s = 22; case 22: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
				$r = g.PushEvent(new simpleEvent.ptr(_r$7 + delay >> 0, 3)); /* */ $s = 23; case 23: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				g.PrintStyled("Something hurt you! You feel unstable.", 1);
			/* } */ case 5:
			g.Scumming = 0;
			g.StopAuto();
		/* } */ case 2:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: game.ptr.prototype.ScummingAction }; } $f._arg = _arg; $f._i = _i; $f._key = _key; $f._key$1 = _key$1; $f._q = _q; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._ref = _ref; $f.delay = delay; $f.ev = ev; $f.g = g; $f.neighbors = neighbors; $f.pos = pos; $f.$s = $s; $f.$r = $r; return $f;
	};
	game.prototype.ScummingAction = function(ev) { return this.$val.ScummingAction(ev); };
	game.ptr.prototype.FairAction = function() {
		var g;
		g = this;
		g.Scumming = g.Scumming - (10) >> 0;
		if (g.Scumming < 0) {
			g.Scumming = 0;
		}
	};
	game.prototype.FairAction = function() { return this.$val.FairAction(); };
	game.ptr.prototype.Rest = function(ev) {
		var _r, ev, g, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; ev = $f.ev; g = $f.g; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		g = this;
		/* */ if (!(g.MonsterInLOS() === ptrType$9.nil)) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!(g.MonsterInLOS() === ptrType$9.nil)) { */ case 1:
			_r = fmt.Errorf("You cannot sleep while monsters are in view.", new sliceType$7([])); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$s = -1; return _r;
		/* } */ case 2:
		if ((g.Player.HP === g.Player.HPMax()) && (g.Player.MP === g.Player.MPMax()) && !g.Player.HasStatus(2) && !g.Player.HasStatus(6) && !g.Player.HasStatus(5)) {
			$s = -1; return errors.New("You do not need to rest.");
		}
		$r = g.WaitTurn(ev); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		g.Resting = true;
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: game.ptr.prototype.Rest }; } $f._r = _r; $f.ev = ev; $f.g = g; $f.$s = $s; $f.$r = $r; return $f;
	};
	game.prototype.Rest = function(ev) { return this.$val.Rest(ev); };
	game.ptr.prototype.Equip = function(ev) {
		var _entry, _tuple, eq, ev, g, ok, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _entry = $f._entry; _tuple = $f._tuple; eq = $f.eq; ev = $f.ev; g = $f.g; ok = $f.ok; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		g = this;
		_tuple = (_entry = g.Equipables[position.keyFor(g.Player.Pos)], _entry !== undefined ? [_entry.v, true] : [$ifaceNil, false]);
		eq = _tuple[0];
		ok = _tuple[1];
		/* */ if (ok) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (ok) { */ case 1:
			$r = eq.Equip(g); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = ev.Renew(g, 10); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = -1; return $ifaceNil;
		/* } */ case 2:
		$s = -1; return errors.New("Found nothing to equip here.");
		/* */ } return; } if ($f === undefined) { $f = { $blk: game.ptr.prototype.Equip }; } $f._entry = _entry; $f._tuple = _tuple; $f.eq = eq; $f.ev = ev; $f.g = g; $f.ok = ok; $f.$s = $s; $f.$r = $r; return $f;
	};
	game.prototype.Equip = function(ev) { return this.$val.Equip(ev); };
	game.ptr.prototype.Teleportation = function(ev) {
		var _r, count, ev, g, i, opos, pos, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; count = $f.count; ev = $f.ev; g = $f.g; i = $f.i; opos = $f.opos; pos = $f.pos; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		g = this;
		pos = new position.ptr(0, 0);
		i = 0;
		count = 0;
		/* while (true) { */ case 1:
			count = count + (1) >> 0;
			if (count > 1000) {
				$panic(new $String("Teleportation"));
			}
			_r = g.FreeCell(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			position.copy(pos, _r);
			if ($clone(pos, position).Distance($clone(g.Player.Pos, position)) < 15 && i < 1000) {
				i = i + (1) >> 0;
				/* continue; */ $s = 1; continue;
			}
			/* break; */ $s = 2; continue;
		/* } */ $s = 1; continue; case 2:
		/* */ if ($clone(pos, position).valid()) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if ($clone(pos, position).valid()) { */ case 4:
			opos = $clone(g.Player.Pos, position);
			position.copy(g.Player.Pos, pos);
			g.Print("You feel yourself teleported away.");
			$r = g.ui.TeleportAnimation(g, $clone(opos, position), $clone(pos, position), true); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = g.CollectGround(); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = g.ComputeLOS(); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = g.MakeMonstersAware(); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 6; continue;
		/* } else { */ case 5:
			g.Print("Something went wrong with the teleportation.");
		/* } */ case 6:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: game.ptr.prototype.Teleportation }; } $f._r = _r; $f.count = count; $f.ev = ev; $f.g = g; $f.i = i; $f.opos = opos; $f.pos = pos; $f.$s = $s; $f.$r = $r; return $f;
	};
	game.prototype.Teleportation = function(ev) { return this.$val.Teleportation(ev); };
	game.ptr.prototype.CollectGround = function() {
		var _arg, _arg$1, _arg$2, _arg$3, _entry, _entry$1, _entry$2, _entry$3, _entry$4, _entry$5, _entry$6, _entry$7, _entry$8, _entry$9, _key, _key$1, _r, _r$1, _r$2, _r$3, _r$4, _tuple, _tuple$1, _tuple$2, c, eq, g, ok, ok$1, ok$2, pos, r, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _arg$3 = $f._arg$3; _entry = $f._entry; _entry$1 = $f._entry$1; _entry$2 = $f._entry$2; _entry$3 = $f._entry$3; _entry$4 = $f._entry$4; _entry$5 = $f._entry$5; _entry$6 = $f._entry$6; _entry$7 = $f._entry$7; _entry$8 = $f._entry$8; _entry$9 = $f._entry$9; _key = $f._key; _key$1 = $f._key$1; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; c = $f.c; eq = $f.eq; g = $f.g; ok = $f.ok; ok$1 = $f.ok$1; ok$2 = $f.ok$2; pos = $f.pos; r = $f.r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		g = this;
		pos = $clone(g.Player.Pos, position);
		/* */ if ((_entry = g.Simellas[position.keyFor(pos)], _entry !== undefined ? _entry.v : 0) > 0) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if ((_entry = g.Simellas[position.keyFor(pos)], _entry !== undefined ? _entry.v : 0) > 0) { */ case 1:
			g.Player.Simellas = g.Player.Simellas + ((_entry$1 = g.Simellas[position.keyFor(pos)], _entry$1 !== undefined ? _entry$1.v : 0)) >> 0;
			/* */ if ((_entry$2 = g.Simellas[position.keyFor(pos)], _entry$2 !== undefined ? _entry$2.v : 0) === 1) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if ((_entry$2 = g.Simellas[position.keyFor(pos)], _entry$2 !== undefined ? _entry$2.v : 0) === 1) { */ case 3:
				g.Print("You pick up a simella.");
				$s = 5; continue;
			/* } else { */ case 4:
				$r = g.Printf("You pick up %d simellas.", new sliceType$7([new $Int((_entry$3 = g.Simellas[position.keyFor(pos)], _entry$3 !== undefined ? _entry$3.v : 0))])); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 5:
			g.DijkstraMapRebuild = true;
			delete g.Simellas[position.keyFor(pos)];
		/* } */ case 2:
		_tuple = (_entry$4 = g.Collectables[position.keyFor(pos)], _entry$4 !== undefined ? [_entry$4.v, true] : [ptrType$4.nil, false]);
		c = _tuple[0];
		ok = _tuple[1];
		/* */ if (ok && !(c === ptrType$4.nil)) { $s = 7; continue; }
		/* */ $s = 8; continue;
		/* if (ok && !(c === ptrType$4.nil)) { */ case 7:
			_key = c.Consumable; (g.Player.Consumables || $throwRuntimeError("assignment to entry in nil map"))[consumable.keyFor(_key)] = { k: _key, v: (_entry$5 = g.Player.Consumables[consumable.keyFor(c.Consumable)], _entry$5 !== undefined ? _entry$5.v : 0) + (c.Quantity) >> 0 };
			g.DijkstraMapRebuild = true;
			delete g.Collectables[position.keyFor(pos)];
			/* */ if (c.Quantity > 1) { $s = 9; continue; }
			/* */ $s = 10; continue;
			/* if (c.Quantity > 1) { */ case 9:
				_arg = new $Int(c.Quantity);
				_r = c.Consumable.Plural(); /* */ $s = 12; case 12: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				_arg$1 = new $String(_r);
				$r = g.Printf("You take %d %s.", new sliceType$7([_arg, _arg$1])); /* */ $s = 13; case 13: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 11; continue;
			/* } else { */ case 10:
				_r$1 = c.Consumable.String(); /* */ $s = 14; case 14: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				_r$2 = Indefinite(_r$1, false); /* */ $s = 15; case 15: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				_arg$2 = new $String(_r$2);
				$r = g.Printf("You take %s.", new sliceType$7([_arg$2])); /* */ $s = 16; case 16: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 11:
		/* } */ case 8:
		_tuple$1 = (_entry$6 = g.Rods[position.keyFor(pos)], _entry$6 !== undefined ? [_entry$6.v, true] : [0, false]);
		r = _tuple$1[0];
		ok$1 = _tuple$1[1];
		/* */ if (ok$1) { $s = 17; continue; }
		/* */ $s = 18; continue;
		/* if (ok$1) { */ case 17:
			_key$1 = r; (g.Player.Rods || $throwRuntimeError("assignment to entry in nil map"))[rod.keyFor(_key$1)] = { k: _key$1, v: new rodProps.ptr(new rod(r).MaxCharge() - 1 >> 0) };
			g.DijkstraMapRebuild = true;
			delete g.Rods[position.keyFor(pos)];
			$r = g.Printf("You take a %s.", new sliceType$7([new rod(r)])); /* */ $s = 19; case 19: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = g.StoryPrintf("You found and took a %s.", new sliceType$7([new rod(r)])); /* */ $s = 20; case 20: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 18:
		_tuple$2 = (_entry$7 = g.Equipables[position.keyFor(pos)], _entry$7 !== undefined ? [_entry$7.v, true] : [$ifaceNil, false]);
		eq = _tuple$2[0];
		ok$2 = _tuple$2[1];
		/* */ if (ok$2) { $s = 21; continue; }
		/* */ if ((_entry$8 = g.Stairs[position.keyFor(pos)], _entry$8 !== undefined ? _entry$8.v : false)) { $s = 22; continue; }
		/* */ if ((_entry$9 = g.Doors[position.keyFor(pos)], _entry$9 !== undefined ? _entry$9.v : false)) { $s = 23; continue; }
		/* */ $s = 24; continue;
		/* if (ok$2) { */ case 21:
			_r$3 = eq.String(); /* */ $s = 25; case 25: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_r$4 = Indefinite(_r$3, false); /* */ $s = 26; case 26: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			_arg$3 = new $String(_r$4);
			$r = g.Printf("You stand over %s.", new sliceType$7([_arg$3])); /* */ $s = 27; case 27: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 24; continue;
		/* } else if ((_entry$8 = g.Stairs[position.keyFor(pos)], _entry$8 !== undefined ? _entry$8.v : false)) { */ case 22:
			g.Print("You stand over stairs.");
			$s = 24; continue;
		/* } else if ((_entry$9 = g.Doors[position.keyFor(pos)], _entry$9 !== undefined ? _entry$9.v : false)) { */ case 23:
			g.Print("You stand at the door.");
		/* } */ case 24:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: game.ptr.prototype.CollectGround }; } $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._arg$3 = _arg$3; $f._entry = _entry; $f._entry$1 = _entry$1; $f._entry$2 = _entry$2; $f._entry$3 = _entry$3; $f._entry$4 = _entry$4; $f._entry$5 = _entry$5; $f._entry$6 = _entry$6; $f._entry$7 = _entry$7; $f._entry$8 = _entry$8; $f._entry$9 = _entry$9; $f._key = _key; $f._key$1 = _key$1; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f.c = c; $f.eq = eq; $f.g = g; $f.ok = ok; $f.ok$1 = ok$1; $f.ok$2 = ok$2; $f.pos = pos; $f.r = r; $f.$s = $s; $f.$r = $r; return $f;
	};
	game.prototype.CollectGround = function() { return this.$val.CollectGround(); };
	game.ptr.prototype.MovePlayer = function(pos, ev) {
		var _1, _entry, _r, _r$1, _tuple, c, delay, ev, g, mons, pos, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _entry = $f._entry; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; c = $f.c; delay = $f.delay; ev = $f.ev; g = $f.g; mons = $f.mons; pos = $f.pos; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		g = this;
		if (!$clone(pos, position).valid()) {
			$s = -1; return errors.New("You cannot move there.");
		}
		c = $clone(g.Dungeon.Cell($clone(pos, position)), cell);
		if ((c.T === 0) && !g.Player.HasStatus(12)) {
			$s = -1; return errors.New("You cannot move into a wall.");
		}
		/* */ if (g.Player.HasStatus(6)) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (g.Player.HasStatus(6)) { */ case 1:
				_r = $clone(pos, position).Dir($clone(g.Player.Pos, position)); /* */ $s = 4; case 4: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				_1 = _r;
				if ((_1 === (0)) || (_1 === (4)) || (_1 === (8)) || (_1 === (12))) {
				} else {
					$s = -1; return errors.New("You cannot use diagonal movements while confused.");
				}
			case 3:
		/* } */ case 2:
		delay = 10;
		_tuple = g.MonsterAt($clone(pos, position));
		mons = _tuple[0];
		/* */ if (!mons.Exists()) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if (!mons.Exists()) { */ case 5:
			if (g.Player.HasStatus(5)) {
				$s = -1; return errors.New("You cannot move while lignified");
			}
			/* */ if (c.T === 0) { $s = 8; continue; }
			/* */ $s = 9; continue;
			/* if (c.T === 0) { */ case 8:
				g.Dungeon.SetCell($clone(pos, position), 1);
				$r = g.MakeNoise(18, $clone(pos, position)); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				_r$1 = g.CrackSound(); /* */ $s = 11; case 11: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				$r = g.Print(_r$1); /* */ $s = 12; case 12: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$r = g.Fog($clone(pos, position), 1, ev); /* */ $s = 13; case 13: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 9:
			position.copy(g.Player.Pos, pos);
			$r = g.CollectGround(); /* */ $s = 14; case 14: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = g.ComputeLOS(); /* */ $s = 15; case 15: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* */ if (!g.Autoexploring) { $s = 16; continue; }
			/* */ $s = 17; continue;
			/* if (!g.Autoexploring) { */ case 16:
				$r = g.ScummingAction(ev); /* */ $s = 18; case 18: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 17:
			$r = g.MakeMonstersAware(); /* */ $s = 19; case 19: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			if ((_entry = g.Player.Aptitudes[aptitude.keyFor(2)], _entry !== undefined ? _entry.v : false)) {
				delay = delay - (2) >> 0;
			}
			if (g.Player.HasStatus(3)) {
				if (g.Player.HasStatus(0)) {
					delay = delay - (2) >> 0;
				} else {
					delay = delay - (3) >> 0;
				}
			}
			$s = 7; continue;
		/* } else { */ case 6:
			g.FairAction();
			$r = g.AttackMonster(mons, ev); /* */ $s = 20; case 20: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 7:
		if (g.Player.HasStatus(0)) {
			delay = delay - (3) >> 0;
		}
		if (g.Player.HasStatus(1)) {
			delay = delay + (3) >> 0;
		}
		$r = ev.Renew(g, delay); /* */ $s = 21; case 21: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: game.ptr.prototype.MovePlayer }; } $f._1 = _1; $f._entry = _entry; $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f.c = c; $f.delay = delay; $f.ev = ev; $f.g = g; $f.mons = mons; $f.pos = pos; $f.$s = $s; $f.$r = $r; return $f;
	};
	game.prototype.MovePlayer = function(pos, ev) { return this.$val.MovePlayer(pos, ev); };
	game.ptr.prototype.HealPlayer = function(ev) {
		var delay, ev, g, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; delay = $f.delay; ev = $f.ev; g = $f.g; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		g = this;
		if (g.Player.HP < g.Player.HPMax()) {
			g.Player.HP = g.Player.HP + (1) >> 0;
		}
		delay = 50;
		$r = ev.Renew(g, delay); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: game.ptr.prototype.HealPlayer }; } $f.delay = delay; $f.ev = ev; $f.g = g; $f.$s = $s; $f.$r = $r; return $f;
	};
	game.prototype.HealPlayer = function(ev) { return this.$val.HealPlayer(ev); };
	game.ptr.prototype.MPRegen = function(ev) {
		var delay, ev, g, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; delay = $f.delay; ev = $f.ev; g = $f.g; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		g = this;
		if (g.Player.MP < g.Player.MPMax()) {
			g.Player.MP = g.Player.MP + (1) >> 0;
		}
		delay = 100;
		$r = ev.Renew(g, delay); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: game.ptr.prototype.MPRegen }; } $f.delay = delay; $f.ev = ev; $f.g = g; $f.$s = $s; $f.$r = $r; return $f;
	};
	game.prototype.MPRegen = function(ev) { return this.$val.MPRegen(ev); };
	game.ptr.prototype.Smoke = function(ev) {
		var _entry, _entry$1, _entry$2, _i, _key, _key$1, _keys, _r, _r$1, _r$2, _r$3, _r$4, _ref, _tuple, dij, ev, g, nm, ok, pos, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _entry = $f._entry; _entry$1 = $f._entry$1; _entry$2 = $f._entry$2; _i = $f._i; _key = $f._key; _key$1 = $f._key$1; _keys = $f._keys; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _ref = $f._ref; _tuple = $f._tuple; dij = $f.dij; ev = $f.ev; g = $f.g; nm = $f.nm; ok = $f.ok; pos = $f.pos; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		g = this;
		dij = new normalPath.ptr(g, arrayType$1.zero());
		_r = Dijkstra(dij, new sliceType$5([$clone(g.Player.Pos, position)]), 2); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		nm = _r;
		_ref = nm;
		_i = 0;
		_keys = $keys(_ref);
		/* while (true) { */ case 2:
			/* if (!(_i < _keys.length)) { break; } */ if(!(_i < _keys.length)) { $s = 3; continue; }
			_entry = _ref[_keys[_i]];
			if (_entry === undefined) {
				_i++;
				/* continue; */ $s = 2; continue;
			}
			pos = $clone(_entry.k, position);
			_tuple = (_entry$1 = g.Clouds[position.keyFor(pos)], _entry$1 !== undefined ? [_entry$1.v, true] : [0, false]);
			ok = _tuple[1];
			/* */ if (!ok) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (!ok) { */ case 4:
				_key = $clone(pos, position); (g.Clouds || $throwRuntimeError("assignment to entry in nil map"))[position.keyFor(_key)] = { k: _key, v: 0 };
				_r$1 = ev.Rank(); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				_r$2 = RandInt(100); /* */ $s = 7; case 7: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				$r = g.PushEvent(new cloudEvent.ptr((_r$1 + 100 >> 0) + _r$2 >> 0, $clone(pos, position), 0)); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 5:
			_i++;
		/* } */ $s = 2; continue; case 3:
		_key$1 = 3; (g.Player.Statuses || $throwRuntimeError("assignment to entry in nil map"))[status.keyFor(_key$1)] = { k: _key$1, v: (_entry$2 = g.Player.Statuses[status.keyFor(3)], _entry$2 !== undefined ? _entry$2.v : 0) + (1) >> 0 };
		_r$3 = ev.Rank(); /* */ $s = 9; case 9: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_r$4 = RandInt(10); /* */ $s = 10; case 10: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		$r = g.PushEvent(new simpleEvent.ptr((_r$3 + 20 >> 0) + _r$4 >> 0, 7)); /* */ $s = 11; case 11: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = g.ComputeLOS(); /* */ $s = 12; case 12: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		g.Print("You feel an energy burst and smoking coming out from you.");
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: game.ptr.prototype.Smoke }; } $f._entry = _entry; $f._entry$1 = _entry$1; $f._entry$2 = _entry$2; $f._i = _i; $f._key = _key; $f._key$1 = _key$1; $f._keys = _keys; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._ref = _ref; $f._tuple = _tuple; $f.dij = dij; $f.ev = ev; $f.g = g; $f.nm = nm; $f.ok = ok; $f.pos = pos; $f.$s = $s; $f.$r = $r; return $f;
	};
	game.prototype.Smoke = function(ev) { return this.$val.Smoke(ev); };
	game.ptr.prototype.Corrosion = function(ev) {
		var _entry, _key, _r, _r$1, ev, g, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _entry = $f._entry; _key = $f._key; _r = $f._r; _r$1 = $f._r$1; ev = $f.ev; g = $f.g; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		g = this;
		_key = 10; (g.Player.Statuses || $throwRuntimeError("assignment to entry in nil map"))[status.keyFor(_key)] = { k: _key, v: (_entry = g.Player.Statuses[status.keyFor(10)], _entry !== undefined ? _entry.v : 0) + (1) >> 0 };
		_r = ev.Rank(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = RandInt(40); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$r = g.PushEvent(new simpleEvent.ptr((_r + 80 >> 0) + _r$1 >> 0, 13)); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		g.Print("Your equipment is corroded.");
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: game.ptr.prototype.Corrosion }; } $f._entry = _entry; $f._key = _key; $f._r = _r; $f._r$1 = _r$1; $f.ev = ev; $f.g = g; $f.$s = $s; $f.$r = $r; return $f;
	};
	game.prototype.Corrosion = function(ev) { return this.$val.Corrosion(ev); };
	game.ptr.prototype.Confusion = function(ev) {
		var _entry, _key, _r, _r$1, ev, g, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _entry = $f._entry; _key = $f._key; _r = $f._r; _r$1 = $f._r$1; ev = $f.ev; g = $f.g; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		g = this;
		/* */ if (!g.Player.HasStatus(6)) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!g.Player.HasStatus(6)) { */ case 1:
			_key = 6; (g.Player.Statuses || $throwRuntimeError("assignment to entry in nil map"))[status.keyFor(_key)] = { k: _key, v: (_entry = g.Player.Statuses[status.keyFor(6)], _entry !== undefined ? _entry.v : 0) + (1) >> 0 };
			_r = ev.Rank(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_r$1 = RandInt(100); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			$r = g.PushEvent(new simpleEvent.ptr((_r + 100 >> 0) + _r$1 >> 0, 10)); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			g.Print("You feel confused.");
		/* } */ case 2:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: game.ptr.prototype.Confusion }; } $f._entry = _entry; $f._key = _key; $f._r = _r; $f._r$1 = _r$1; $f.ev = ev; $f.g = g; $f.$s = $s; $f.$r = $r; return $f;
	};
	game.prototype.Confusion = function(ev) { return this.$val.Confusion(ev); };
	position.ptr.prototype.E = function() {
		var pos;
		pos = this;
		return new position.ptr(pos.X + 1 >> 0, pos.Y);
	};
	position.prototype.E = function() { return this.$val.E(); };
	position.ptr.prototype.SE = function() {
		var pos;
		pos = this;
		return new position.ptr(pos.X + 1 >> 0, pos.Y + 1 >> 0);
	};
	position.prototype.SE = function() { return this.$val.SE(); };
	position.ptr.prototype.NE = function() {
		var pos;
		pos = this;
		return new position.ptr(pos.X + 1 >> 0, pos.Y - 1 >> 0);
	};
	position.prototype.NE = function() { return this.$val.NE(); };
	position.ptr.prototype.N = function() {
		var pos;
		pos = this;
		return new position.ptr(pos.X, pos.Y - 1 >> 0);
	};
	position.prototype.N = function() { return this.$val.N(); };
	position.ptr.prototype.S = function() {
		var pos;
		pos = this;
		return new position.ptr(pos.X, pos.Y + 1 >> 0);
	};
	position.prototype.S = function() { return this.$val.S(); };
	position.ptr.prototype.W = function() {
		var pos;
		pos = this;
		return new position.ptr(pos.X - 1 >> 0, pos.Y);
	};
	position.prototype.W = function() { return this.$val.W(); };
	position.ptr.prototype.SW = function() {
		var pos;
		pos = this;
		return new position.ptr(pos.X - 1 >> 0, pos.Y + 1 >> 0);
	};
	position.prototype.SW = function() { return this.$val.SW(); };
	position.ptr.prototype.NW = function() {
		var pos;
		pos = this;
		return new position.ptr(pos.X - 1 >> 0, pos.Y - 1 >> 0);
	};
	position.prototype.NW = function() { return this.$val.NW(); };
	position.ptr.prototype.Distance = function(to) {
		var deltaX, deltaY, pos, to;
		pos = this;
		deltaX = Abs(to.X - pos.X >> 0);
		deltaY = Abs(to.Y - pos.Y >> 0);
		if (deltaX > deltaY) {
			return deltaX;
		}
		return deltaY;
	};
	position.prototype.Distance = function(to) { return this.$val.Distance(to); };
	position.ptr.prototype.DistanceX = function(to) {
		var deltaX, pos, to;
		pos = this;
		deltaX = Abs(to.X - pos.X >> 0);
		return deltaX;
	};
	position.prototype.DistanceX = function(to) { return this.$val.DistanceX(to); };
	position.ptr.prototype.DistanceY = function(to) {
		var deltaY, pos, to;
		pos = this;
		deltaY = Abs(to.Y - pos.Y >> 0);
		return deltaY;
	};
	position.prototype.DistanceY = function(to) { return this.$val.DistanceY(to); };
	KeyToDir = function(k) {
		var _1, dir, k;
		dir = 0;
		_1 = k;
		if ((_1 === (1)) || (_1 === (9))) {
			dir = 8;
		} else if ((_1 === (4)) || (_1 === (12))) {
			dir = 0;
		} else if ((_1 === (2)) || (_1 === (10))) {
			dir = 12;
		} else if ((_1 === (3)) || (_1 === (11))) {
			dir = 4;
		} else if ((_1 === (5)) || (_1 === (13))) {
			dir = 6;
		} else if ((_1 === (7)) || (_1 === (15))) {
			dir = 10;
		} else if ((_1 === (6)) || (_1 === (14))) {
			dir = 2;
		} else if ((_1 === (8)) || (_1 === (16))) {
			dir = 14;
		}
		dir = dir;
		return dir;
	};
	$pkg.KeyToDir = KeyToDir;
	position.ptr.prototype.To = function(dir) {
		var _1, dir, pos, to;
		pos = this;
		to = $clone(pos, position);
		_1 = dir;
		if ((_1 === (0)) || (_1 === (1)) || (_1 === (15))) {
			position.copy(to, $clone(pos, position).E());
		} else if (_1 === (2)) {
			position.copy(to, $clone(pos, position).NE());
		} else if ((_1 === (3)) || (_1 === (4)) || (_1 === (5))) {
			position.copy(to, $clone(pos, position).N());
		} else if (_1 === (6)) {
			position.copy(to, $clone(pos, position).NW());
		} else if ((_1 === (7)) || (_1 === (8)) || (_1 === (9))) {
			position.copy(to, $clone(pos, position).W());
		} else if (_1 === (10)) {
			position.copy(to, $clone(pos, position).SW());
		} else if ((_1 === (11)) || (_1 === (12)) || (_1 === (13))) {
			position.copy(to, $clone(pos, position).S());
		} else if (_1 === (14)) {
			position.copy(to, $clone(pos, position).SE());
		}
		return to;
	};
	position.prototype.To = function(dir) { return this.$val.To(dir); };
	position.ptr.prototype.Dir = function(from) {
		var _r, deltaX, deltaY, from, pos, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; deltaX = $f.deltaX; deltaY = $f.deltaY; from = $f.from; pos = $f.pos; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		pos = this;
		deltaX = Abs(pos.X - from.X >> 0);
		deltaY = Abs(pos.Y - from.Y >> 0);
			/* */ if (pos.X > from.X && (pos.Y === from.Y)) { $s = 2; continue; }
			/* */ if (pos.X > from.X && pos.Y < from.Y) { $s = 3; continue; }
			/* */ if ((pos.X === from.X) && pos.Y < from.Y) { $s = 4; continue; }
			/* */ if (pos.X < from.X && pos.Y < from.Y) { $s = 5; continue; }
			/* */ if (pos.X < from.X && (pos.Y === from.Y)) { $s = 6; continue; }
			/* */ if (pos.X < from.X && pos.Y > from.Y) { $s = 7; continue; }
			/* */ if ((pos.X === from.X) && pos.Y > from.Y) { $s = 8; continue; }
			/* */ if (pos.X > from.X && pos.Y > from.Y) { $s = 9; continue; }
			/* */ $s = 10; continue;
			/* if (pos.X > from.X && (pos.Y === from.Y)) { */ case 2:
				$s = -1; return 0;
			/* } else if (pos.X > from.X && pos.Y < from.Y) { */ case 3:
				if (deltaX > deltaY) {
					$s = -1; return 1;
				} else if ((deltaX === deltaY)) {
					$s = -1; return 2;
				} else {
					$s = -1; return 3;
				}
				$s = 11; continue;
			/* } else if ((pos.X === from.X) && pos.Y < from.Y) { */ case 4:
				$s = -1; return 4;
			/* } else if (pos.X < from.X && pos.Y < from.Y) { */ case 5:
				if (deltaY > deltaX) {
					$s = -1; return 5;
				} else if ((deltaX === deltaY)) {
					$s = -1; return 6;
				} else {
					$s = -1; return 7;
				}
				$s = 11; continue;
			/* } else if (pos.X < from.X && (pos.Y === from.Y)) { */ case 6:
				$s = -1; return 8;
			/* } else if (pos.X < from.X && pos.Y > from.Y) { */ case 7:
				if (deltaX > deltaY) {
					$s = -1; return 9;
				} else if ((deltaX === deltaY)) {
					$s = -1; return 10;
				} else {
					$s = -1; return 11;
				}
				$s = 11; continue;
			/* } else if ((pos.X === from.X) && pos.Y > from.Y) { */ case 8:
				$s = -1; return 12;
			/* } else if (pos.X > from.X && pos.Y > from.Y) { */ case 9:
				if (deltaY > deltaX) {
					$s = -1; return 13;
				} else if ((deltaX === deltaY)) {
					$s = -1; return 14;
				} else {
					$s = -1; return 15;
				}
				$s = 11; continue;
			/* } else { */ case 10:
				_r = fmt.Sprintf("internal error: invalid position:%+v-%+v", new sliceType$7([new pos.constructor.elem(pos), new from.constructor.elem(from)])); /* */ $s = 12; case 12: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				$panic(new $String(_r));
			/* } */ case 11:
		case 1:
		$s = -1; return 0;
		/* */ } return; } if ($f === undefined) { $f = { $blk: position.ptr.prototype.Dir }; } $f._r = _r; $f.deltaX = deltaX; $f.deltaY = deltaY; $f.from = from; $f.pos = pos; $f.$s = $s; $f.$r = $r; return $f;
	};
	position.prototype.Dir = function(from) { return this.$val.Dir(from); };
	position.ptr.prototype.Parents = function(from) {
		var _1, _r, from, p, pos, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _r = $f._r; from = $f.from; p = $f.p; pos = $f.pos; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		pos = this;
		p = new sliceType$5([]);
			_r = $clone(pos, position).Dir($clone(from, position)); /* */ $s = 2; case 2: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_1 = _r;
			if (_1 === (0)) {
				p = $append(p, $clone(pos, position).W());
			} else if (_1 === (1)) {
				p = $append(p, $clone(pos, position).W(), $clone(pos, position).SW());
			} else if (_1 === (2)) {
				p = $append(p, $clone(pos, position).SW());
			} else if (_1 === (3)) {
				p = $append(p, $clone(pos, position).S(), $clone(pos, position).SW());
			} else if (_1 === (4)) {
				p = $append(p, $clone(pos, position).S());
			} else if (_1 === (5)) {
				p = $append(p, $clone(pos, position).S(), $clone(pos, position).SE());
			} else if (_1 === (6)) {
				p = $append(p, $clone(pos, position).SE());
			} else if (_1 === (7)) {
				p = $append(p, $clone(pos, position).E(), $clone(pos, position).SE());
			} else if (_1 === (8)) {
				p = $append(p, $clone(pos, position).E());
			} else if (_1 === (9)) {
				p = $append(p, $clone(pos, position).E(), $clone(pos, position).NE());
			} else if (_1 === (10)) {
				p = $append(p, $clone(pos, position).NE());
			} else if (_1 === (11)) {
				p = $append(p, $clone(pos, position).N(), $clone(pos, position).NE());
			} else if (_1 === (12)) {
				p = $append(p, $clone(pos, position).N());
			} else if (_1 === (13)) {
				p = $append(p, $clone(pos, position).N(), $clone(pos, position).NW());
			} else if (_1 === (14)) {
				p = $append(p, $clone(pos, position).NW());
			} else if (_1 === (15)) {
				p = $append(p, $clone(pos, position).W(), $clone(pos, position).NW());
			}
		case 1:
		$s = -1; return p;
		/* */ } return; } if ($f === undefined) { $f = { $blk: position.ptr.prototype.Parents }; } $f._1 = _1; $f._r = _r; $f.from = from; $f.p = p; $f.pos = pos; $f.$s = $s; $f.$r = $r; return $f;
	};
	position.prototype.Parents = function(from) { return this.$val.Parents(from); };
	position.ptr.prototype.RandomNeighbor = function(diag) {
		var _r, _r$1, diag, pos, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; diag = $f.diag; pos = $f.pos; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		pos = this;
		/* */ if (diag) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (diag) { */ case 1:
			_r = $clone(pos, position).RandomNeighborDiagonals(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$s = -1; return _r;
		/* } */ case 2:
		_r$1 = $clone(pos, position).RandomNeighborCardinal(); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$s = -1; return _r$1;
		/* */ } return; } if ($f === undefined) { $f = { $blk: position.ptr.prototype.RandomNeighbor }; } $f._r = _r; $f._r$1 = _r$1; $f.diag = diag; $f.pos = pos; $f.$s = $s; $f.$r = $r; return $f;
	};
	position.prototype.RandomNeighbor = function(diag) { return this.$val.RandomNeighbor(diag); };
	position.ptr.prototype.RandomNeighborDiagonals = function() {
		var _1, _r, _r$1, _r$2, _r$3, neighbors, pos, r, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; neighbors = $f.neighbors; pos = $f.pos; r = $f.r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		pos = this;
		neighbors = $toNativeArray($kindStruct, [$clone($clone(pos, position).E(), position), $clone($clone(pos, position).W(), position), $clone($clone(pos, position).N(), position), $clone($clone(pos, position).S(), position), $clone($clone(pos, position).NE(), position), $clone($clone(pos, position).NW(), position), $clone($clone(pos, position).SE(), position), $clone($clone(pos, position).SW(), position)]);
		r = 0;
			_r = RandInt(8); /* */ $s = 2; case 2: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_1 = _r;
			/* */ if (_1 === (0)) { $s = 3; continue; }
			/* */ if (_1 === (1)) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (_1 === (0)) { */ case 3:
				_r$1 = RandInt($subslice(new sliceType$5(neighbors), 0, 4).$length); /* */ $s = 7; case 7: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				r = _r$1;
				$s = 6; continue;
			/* } else if (_1 === (1)) { */ case 4:
				_r$2 = RandInt($subslice(new sliceType$5(neighbors), 0, 2).$length); /* */ $s = 8; case 8: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				r = _r$2;
				$s = 6; continue;
			/* } else { */ case 5:
				_r$3 = RandInt($subslice(new sliceType$5(neighbors), 4).$length); /* */ $s = 9; case 9: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				r = _r$3;
			/* } */ case 6:
		case 1:
		$s = -1; return ((r < 0 || r >= neighbors.length) ? ($throwRuntimeError("index out of range"), undefined) : neighbors[r]);
		/* */ } return; } if ($f === undefined) { $f = { $blk: position.ptr.prototype.RandomNeighborDiagonals }; } $f._1 = _1; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f.neighbors = neighbors; $f.pos = pos; $f.r = r; $f.$s = $s; $f.$r = $r; return $f;
	};
	position.prototype.RandomNeighborDiagonals = function() { return this.$val.RandomNeighborDiagonals(); };
	position.ptr.prototype.RandomNeighborCardinal = function() {
		var _1, _r, _r$1, _r$2, _r$3, neighbors, pos, r, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; neighbors = $f.neighbors; pos = $f.pos; r = $f.r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		pos = this;
		neighbors = $toNativeArray($kindStruct, [$clone($clone(pos, position).E(), position), $clone($clone(pos, position).W(), position), $clone($clone(pos, position).N(), position), $clone($clone(pos, position).S(), position), $clone($clone(pos, position).NE(), position), $clone($clone(pos, position).NW(), position), $clone($clone(pos, position).SE(), position), $clone($clone(pos, position).SW(), position)]);
		r = 0;
			_r = RandInt(6); /* */ $s = 2; case 2: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_1 = _r;
			/* */ if (_1 === (0)) { $s = 3; continue; }
			/* */ if (_1 === (1)) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (_1 === (0)) { */ case 3:
				_r$1 = RandInt($subslice(new sliceType$5(neighbors), 0, 4).$length); /* */ $s = 7; case 7: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				r = _r$1;
				$s = 6; continue;
			/* } else if (_1 === (1)) { */ case 4:
				_r$2 = RandInt(8); /* */ $s = 8; case 8: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				r = _r$2;
				$s = 6; continue;
			/* } else { */ case 5:
				_r$3 = RandInt($subslice(new sliceType$5(neighbors), 0, 2).$length); /* */ $s = 9; case 9: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				r = _r$3;
			/* } */ case 6:
		case 1:
		$s = -1; return ((r < 0 || r >= neighbors.length) ? ($throwRuntimeError("index out of range"), undefined) : neighbors[r]);
		/* */ } return; } if ($f === undefined) { $f = { $blk: position.ptr.prototype.RandomNeighborCardinal }; } $f._1 = _1; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f.neighbors = neighbors; $f.pos = pos; $f.r = r; $f.$s = $s; $f.$r = $r; return $f;
	};
	position.prototype.RandomNeighborCardinal = function() { return this.$val.RandomNeighborCardinal(); };
	idxtopos = function(i) {
		var _q, _r, i;
		return new position.ptr((_r = i % 79, _r === _r ? _r : $throwRuntimeError("integer divide by zero")), (_q = i / 79, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")));
	};
	position.ptr.prototype.idx = function() {
		var pos;
		pos = this;
		return ($imul(pos.Y, 79)) + pos.X >> 0;
	};
	position.prototype.idx = function() { return this.$val.idx(); };
	position.ptr.prototype.valid = function() {
		var pos;
		pos = this;
		return pos.Y >= 0 && pos.Y < 21 && pos.X >= 0 && pos.X < 79;
	};
	position.prototype.valid = function() { return this.$val.valid(); };
	rod.prototype.Letter = function() {
		var r;
		r = this.$val;
		return 47;
	};
	$ptrType(rod).prototype.Letter = function() { return new rod(this.$get()).Letter(); };
	rod.prototype.Rare = function() {
		var _1, r;
		r = this.$val;
		_1 = r;
		if ((_1 === (0)) || (_1 === (2)) || (_1 === (7)) || (_1 === (8))) {
			return true;
		} else {
			return false;
		}
	};
	$ptrType(rod).prototype.Rare = function() { return new rod(this.$get()).Rare(); };
	rod.prototype.String = function() {
		var _1, r, text;
		r = this.$val;
		text = "";
		_1 = r;
		if (_1 === (0)) {
			text = "rod of digging";
		} else if (_1 === (1)) {
			text = "rod of blinking";
		} else if (_1 === (2)) {
			text = "rod of teleport other";
		} else if (_1 === (5)) {
			text = "rod of fog";
		} else if (_1 === (10)) {
			text = "rod of fear";
		} else if (_1 === (4)) {
			text = "rod of fireball";
		} else if (_1 === (3)) {
			text = "rod of lightning bolt";
		} else if (_1 === (6)) {
			text = "rod of obstruction";
		} else if (_1 === (7)) {
			text = "rod of shatter";
		} else if (_1 === (8)) {
			text = "rod of swapping";
		} else if (_1 === (11)) {
			text = "rod of freezing clouds";
		} else if (_1 === (9)) {
			text = "rod of confusing clouds";
		}
		return text;
	};
	$ptrType(rod).prototype.String = function() { return new rod(this.$get()).String(); };
	rod.prototype.Desc = function() {
		var _1, _r, r, text, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _r = $f._r; r = $f.r; text = $f.text; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		r = this.$val;
		text = "";
		_1 = r;
		if (_1 === (0)) {
			text = "digs through walls.";
		} else if (_1 === (1)) {
			text = "makes you blink away within your line of sight.";
		} else if (_1 === (2)) {
			text = "teleports away one of your foes.";
		} else if (_1 === (5)) {
			text = "creates a dense fog that reduces your (and monster's) line of sight.";
		} else if (_1 === (4)) {
			text = "throws a 1-radius fireball at your foes.";
		} else if (_1 === (3)) {
			text = "throws a lightning bolt through one or more enemies.";
		} else if (_1 === (6)) {
			text = "creates a temporary wall at targeted location.";
		} else if (_1 === (7)) {
			text = "induces an explosion around a wall. The wall can disintegrate.";
		} else if (_1 === (8)) {
			text = "makes you swap positions with a targeted monster.";
		} else if (_1 === (10)) {
			text = "TODO";
		} else if (_1 === (11)) {
			text = "TODO";
		} else if (_1 === (9)) {
			text = "TODO";
		}
		_r = fmt.Sprintf("The %s %s Rods sometimes regain charges as you go deeper. This rod can have up to %d charges.", new sliceType$7([new rod(r), new $String(text), new $Int(new rod(r).MaxCharge())])); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: rod.prototype.Desc }; } $f._1 = _1; $f._r = _r; $f.r = r; $f.text = text; $f.$s = $s; $f.$r = $r; return $f;
	};
	$ptrType(rod).prototype.Desc = function() { return new rod(this.$get()).Desc(); };
	rod.prototype.MaxCharge = function() {
		var _1, charges, r;
		charges = 0;
		r = this.$val;
		_1 = r;
		if (_1 === (1)) {
			charges = 5;
		} else if ((_1 === (2)) || (_1 === (0))) {
			charges = 3;
		} else {
			charges = 4;
		}
		charges = charges;
		return charges;
	};
	$ptrType(rod).prototype.MaxCharge = function() { return new rod(this.$get()).MaxCharge(); };
	rod.prototype.Rate = function() {
		var r, rate;
		r = this.$val;
		rate = new rod(r).MaxCharge() - 2 >> 0;
		if (rate < 1) {
			rate = 1;
		}
		return rate;
	};
	$ptrType(rod).prototype.Rate = function() { return new rod(this.$get()).Rate(); };
	rod.prototype.MPCost = function() {
		var _1, mp, r;
		mp = 0;
		r = this.$val;
		_1 = r;
		if (_1 === (1)) {
			mp = 3;
		} else if ((_1 === (2)) || (_1 === (0)) || (_1 === (7))) {
			mp = 5;
		} else {
			mp = 4;
		}
		mp = mp;
		return mp;
	};
	$ptrType(rod).prototype.MPCost = function() { return new rod(this.$get()).MPCost(); };
	rod.prototype.Use = function(g, ev) {
		var _1, _entry, _entry$1, _entry$2, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, err, ev, g, r, rods, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _entry = $f._entry; _entry$1 = $f._entry$1; _entry$2 = $f._entry$2; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; err = $f.err; ev = $f.ev; g = $f.g; r = $f.r; rods = $f.rods; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		r = this.$val;
		rods = g.Player.Rods;
		if ((_entry = rods[rod.keyFor(r)], _entry !== undefined ? _entry.v : ptrType$6.nil).Charge <= 0) {
			$s = -1; return errors.New("No charges remaining on this rod.");
		}
		if (new rod(r).MPCost() > g.Player.MP) {
			$s = -1; return errors.New("Not enough magic points for using this rod.");
		}
		err = $ifaceNil;
			_1 = r;
			/* */ if (_1 === (1)) { $s = 2; continue; }
			/* */ if (_1 === (2)) { $s = 3; continue; }
			/* */ if (_1 === (3)) { $s = 4; continue; }
			/* */ if (_1 === (4)) { $s = 5; continue; }
			/* */ if (_1 === (5)) { $s = 6; continue; }
			/* */ if (_1 === (0)) { $s = 7; continue; }
			/* */ if (_1 === (6)) { $s = 8; continue; }
			/* */ if (_1 === (7)) { $s = 9; continue; }
			/* */ if (_1 === (8)) { $s = 10; continue; }
			/* */ $s = 11; continue;
			/* if (_1 === (1)) { */ case 2:
				_r = g.EvokeRodBlink(ev); /* */ $s = 12; case 12: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				err = _r;
				$s = 11; continue;
			/* } else if (_1 === (2)) { */ case 3:
				_r$1 = g.EvokeRodTeleportOther(ev); /* */ $s = 13; case 13: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				err = _r$1;
				$s = 11; continue;
			/* } else if (_1 === (3)) { */ case 4:
				_r$2 = g.EvokeRodLightningBolt(ev); /* */ $s = 14; case 14: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				err = _r$2;
				$s = 11; continue;
			/* } else if (_1 === (4)) { */ case 5:
				_r$3 = g.EvokeRodFireball(ev); /* */ $s = 15; case 15: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				err = _r$3;
				$s = 11; continue;
			/* } else if (_1 === (5)) { */ case 6:
				_r$4 = g.EvokeRodFog(ev); /* */ $s = 16; case 16: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				err = _r$4;
				$s = 11; continue;
			/* } else if (_1 === (0)) { */ case 7:
				_r$5 = g.EvokeRodDigging(ev); /* */ $s = 17; case 17: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
				err = _r$5;
				$s = 11; continue;
			/* } else if (_1 === (6)) { */ case 8:
				_r$6 = g.EvokeRodObstruction(ev); /* */ $s = 18; case 18: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
				err = _r$6;
				$s = 11; continue;
			/* } else if (_1 === (7)) { */ case 9:
				_r$7 = g.EvokeRodShatter(ev); /* */ $s = 19; case 19: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
				err = _r$7;
				$s = 11; continue;
			/* } else if (_1 === (8)) { */ case 10:
				_r$8 = g.EvokeRodSwapping(ev); /* */ $s = 20; case 20: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
				err = _r$8;
			/* } */ case 11:
		case 1:
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
		}
		(_entry$2 = rods[rod.keyFor(r)], _entry$2 !== undefined ? _entry$2.v : ptrType$6.nil).Charge = (_entry$1 = rods[rod.keyFor(r)], _entry$1 !== undefined ? _entry$1.v : ptrType$6.nil).Charge - (1) >> 0;
		g.Player.MP = g.Player.MP - (new rod(r).MPCost()) >> 0;
		$r = g.StoryPrintf("You evoked your %s.", new sliceType$7([new rod(r)])); /* */ $s = 21; case 21: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		g.FairAction();
		$r = ev.Renew(g, 7); /* */ $s = 22; case 22: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: rod.prototype.Use }; } $f._1 = _1; $f._entry = _entry; $f._entry$1 = _entry$1; $f._entry$2 = _entry$2; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f.err = err; $f.ev = ev; $f.g = g; $f.r = r; $f.rods = rods; $f.$s = $s; $f.$r = $r; return $f;
	};
	$ptrType(rod).prototype.Use = function(g, ev) { return new rod(this.$get()).Use(g, ev); };
	game.ptr.prototype.EvokeRodBlink = function(ev) {
		var ev, g, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; ev = $f.ev; g = $f.g; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		g = this;
		if (g.Player.HasStatus(5)) {
			$s = -1; return errors.New("You cannot blink while lignified.");
		}
		$r = g.Blink(ev); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: game.ptr.prototype.EvokeRodBlink }; } $f.ev = ev; $f.g = g; $f.$s = $s; $f.$r = $r; return $f;
	};
	game.prototype.EvokeRodBlink = function(ev) { return this.$val.EvokeRodBlink(ev); };
	game.ptr.prototype.Blink = function(ev) {
		var _entry, _i, _keys, _r, _r$1, _ref, _tuple, b, ev, g, losPos, mons, npos, opos, pos, x, x$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _entry = $f._entry; _i = $f._i; _keys = $f._keys; _r = $f._r; _r$1 = $f._r$1; _ref = $f._ref; _tuple = $f._tuple; b = $f.b; ev = $f.ev; g = $f.g; losPos = $f.losPos; mons = $f.mons; npos = $f.npos; opos = $f.opos; pos = $f.pos; x = $f.x; x$1 = $f.x$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		g = this;
		if (g.Player.HasStatus(5)) {
			$s = -1; return;
		}
		losPos = new sliceType$5([]);
		_ref = g.Player.LOS;
		_i = 0;
		_keys = $keys(_ref);
		/* while (true) { */ case 1:
			/* if (!(_i < _keys.length)) { break; } */ if(!(_i < _keys.length)) { $s = 2; continue; }
			_entry = _ref[_keys[_i]];
			if (_entry === undefined) {
				_i++;
				/* continue; */ $s = 1; continue;
			}
			pos = $clone(_entry.k, position);
			b = _entry.v;
			/* */ if (!b) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (!b) { */ case 3:
				_i++;
				/* continue; */ $s = 1; continue;
			/* } */ case 4:
			if (!((g.Dungeon.Cell($clone(pos, position)).T === 1))) {
				_i++;
				/* continue; */ $s = 1; continue;
			}
			_tuple = g.MonsterAt($clone(pos, position));
			mons = _tuple[0];
			if (mons.Exists()) {
				_i++;
				/* continue; */ $s = 1; continue;
			}
			losPos = $append(losPos, pos);
			_i++;
		/* } */ $s = 1; continue; case 2:
		if (losPos.$length === 0) {
			g.Print("You could not blink.");
			$s = -1; return;
		}
		_r = RandInt(losPos.$length); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		npos = $clone((x = _r, ((x < 0 || x >= losPos.$length) ? ($throwRuntimeError("index out of range"), undefined) : losPos.$array[losPos.$offset + x])), position);
		/* */ if ($clone(npos, position).Distance($clone(g.Player.Pos, position)) <= 3) { $s = 6; continue; }
		/* */ $s = 7; continue;
		/* if ($clone(npos, position).Distance($clone(g.Player.Pos, position)) <= 3) { */ case 6:
			_r$1 = RandInt(losPos.$length); /* */ $s = 8; case 8: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			position.copy(npos, (x$1 = _r$1, ((x$1 < 0 || x$1 >= losPos.$length) ? ($throwRuntimeError("index out of range"), undefined) : losPos.$array[losPos.$offset + x$1])));
		/* } */ case 7:
		opos = $clone(g.Player.Pos, position);
		position.copy(g.Player.Pos, npos);
		g.Print("You blink away.");
		$r = g.ui.TeleportAnimation(g, $clone(opos, position), $clone(npos, position), true); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = g.CollectGround(); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = g.ComputeLOS(); /* */ $s = 11; case 11: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = g.MakeMonstersAware(); /* */ $s = 12; case 12: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: game.ptr.prototype.Blink }; } $f._entry = _entry; $f._i = _i; $f._keys = _keys; $f._r = _r; $f._r$1 = _r$1; $f._ref = _ref; $f._tuple = _tuple; $f.b = b; $f.ev = ev; $f.g = g; $f.losPos = losPos; $f.mons = mons; $f.npos = npos; $f.opos = opos; $f.pos = pos; $f.x = x; $f.x$1 = x$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	game.prototype.Blink = function(ev) { return this.$val.Blink(ev); };
	game.ptr.prototype.EvokeRodTeleportOther = function(ev) {
		var _r, _tuple, err, ev, g, mons, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; err = $f.err; ev = $f.ev; g = $f.g; mons = $f.mons; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		g = this;
		_r = g.ui.ChooseTarget(g, new chooser.ptr(false, false, false, false, false, false, false)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		err = _r;
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
		}
		_tuple = g.MonsterAt($clone(g.Player.Target, position));
		mons = _tuple[0];
		$r = mons.TeleportAway(g); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: game.ptr.prototype.EvokeRodTeleportOther }; } $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.ev = ev; $f.g = g; $f.mons = mons; $f.$s = $s; $f.$r = $r; return $f;
	};
	game.prototype.EvokeRodTeleportOther = function(ev) { return this.$val.EvokeRodTeleportOther(ev); };
	game.ptr.prototype.EvokeRodLightningBolt = function(ev) {
		var _i, _r, _r$1, _r$2, _ref, _tuple, err, ev, g, mons, pos, ray, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _ref = $f._ref; _tuple = $f._tuple; err = $f.err; ev = $f.ev; g = $f.g; mons = $f.mons; pos = $f.pos; ray = $f.ray; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		g = this;
		_r = g.ui.ChooseTarget(g, new chooser.ptr(false, false, false, false, false, true, false)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		err = _r;
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
		}
		_r$1 = g.Ray($clone(g.Player.Target, position)); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		ray = _r$1;
		g.Print("A lightning bolt emerges straight from the rod.");
		$r = g.ui.LightningBoltAnimation(g, ray); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_ref = ray;
		_i = 0;
		/* while (true) { */ case 4:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 5; continue; }
			pos = $clone(((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]), position);
			$r = g.Burn($clone(pos, position), ev); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_tuple = g.MonsterAt($clone(pos, position));
			mons = _tuple[0];
			/* */ if (mons === ptrType$9.nil) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if (mons === ptrType$9.nil) { */ case 7:
				_i++;
				/* continue; */ $s = 4; continue;
			/* } */ case 8:
			_r$2 = RandInt(21); /* */ $s = 9; case 9: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			mons.HP = mons.HP - (_r$2) >> 0;
			/* */ if (mons.HP <= 0) { $s = 10; continue; }
			/* */ $s = 11; continue;
			/* if (mons.HP <= 0) { */ case 10:
				$r = g.Printf("%s is killed by the bolt.", new sliceType$7([new $String(new monsterKind(mons.Kind).Indefinite(true))])); /* */ $s = 12; case 12: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$r = g.HandleKill(mons, ev); /* */ $s = 13; case 13: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 11:
			$r = g.MakeNoise(12, $clone(mons.Pos, position)); /* */ $s = 14; case 14: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = mons.MakeHuntIfHurt(g); /* */ $s = 15; case 15: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_i++;
		/* } */ $s = 4; continue; case 5:
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: game.ptr.prototype.EvokeRodLightningBolt }; } $f._i = _i; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._ref = _ref; $f._tuple = _tuple; $f.err = err; $f.ev = ev; $f.g = g; $f.mons = mons; $f.pos = pos; $f.ray = ray; $f.$s = $s; $f.$r = $r; return $f;
	};
	game.prototype.EvokeRodLightningBolt = function(ev) { return this.$val.EvokeRodLightningBolt(ev); };
	game.ptr.prototype.EvokeRodFireball = function(ev) {
		var _arg, _arg$1, _arg$2, _i, _r, _r$1, _r$2, _r$3, _ref, _tuple, err, ev, g, mons, neighbors, pos, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _i = $f._i; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _ref = $f._ref; _tuple = $f._tuple; err = $f.err; ev = $f.ev; g = $f.g; mons = $f.mons; neighbors = $f.neighbors; pos = $f.pos; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		g = this;
		_r = g.ui.ChooseTarget(g, new chooser.ptr(false, true, true, false, false, true, false)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		err = _r;
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
		}
		_r$1 = g.Dungeon.FreeNeighbors($clone(g.Player.Target, position)); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		neighbors = _r$1;
		g.Print("A fireball emerges straight from the rod.");
		_arg = g;
		_r$2 = g.Ray($clone(g.Player.Target, position)); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_arg$1 = _r$2;
		_arg$2 = $pkg.ColorFgExplosionStart;
		$r = g.ui.ProjectileTrajectoryAnimation(_arg, _arg$1, _arg$2); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = g.ui.ExplosionAnimation(g, 0, $clone(g.Player.Target, position)); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_ref = $append(neighbors, g.Player.Target);
		_i = 0;
		/* while (true) { */ case 6:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 7; continue; }
			pos = $clone(((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]), position);
			$r = g.Burn($clone(pos, position), ev); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_tuple = g.MonsterAt($clone(pos, position));
			mons = _tuple[0];
			/* */ if (mons === ptrType$9.nil) { $s = 9; continue; }
			/* */ $s = 10; continue;
			/* if (mons === ptrType$9.nil) { */ case 9:
				_i++;
				/* continue; */ $s = 6; continue;
			/* } */ case 10:
			_r$3 = RandInt(21); /* */ $s = 11; case 11: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			mons.HP = mons.HP - (_r$3) >> 0;
			/* */ if (mons.HP <= 0) { $s = 12; continue; }
			/* */ $s = 13; continue;
			/* if (mons.HP <= 0) { */ case 12:
				$r = g.Printf("%s is killed by the fireball.", new sliceType$7([new $String(new monsterKind(mons.Kind).Indefinite(true))])); /* */ $s = 14; case 14: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$r = g.HandleKill(mons, ev); /* */ $s = 15; case 15: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 13:
			$r = g.MakeNoise(12, $clone(mons.Pos, position)); /* */ $s = 16; case 16: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = mons.MakeHuntIfHurt(g); /* */ $s = 17; case 17: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_i++;
		/* } */ $s = 6; continue; case 7:
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: game.ptr.prototype.EvokeRodFireball }; } $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._i = _i; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._ref = _ref; $f._tuple = _tuple; $f.err = err; $f.ev = ev; $f.g = g; $f.mons = mons; $f.neighbors = neighbors; $f.pos = pos; $f.$s = $s; $f.$r = $r; return $f;
	};
	game.prototype.EvokeRodFireball = function(ev) { return this.$val.EvokeRodFireball(ev); };
	game.ptr.prototype.EvokeRodFog = function(ev) {
		var ev, g, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; ev = $f.ev; g = $f.g; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		g = this;
		$r = g.Fog($clone(g.Player.Pos, position), 3, ev); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		g.Print("You are surrounded by a dense fog.");
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: game.ptr.prototype.EvokeRodFog }; } $f.ev = ev; $f.g = g; $f.$s = $s; $f.$r = $r; return $f;
	};
	game.prototype.EvokeRodFog = function(ev) { return this.$val.EvokeRodFog(ev); };
	game.ptr.prototype.Fog = function(at, radius, ev) {
		var _entry, _entry$1, _i, _key, _keys, _r, _r$1, _r$2, _ref, _tuple, at, dij, ev, g, nm, ok, pos, radius, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _entry = $f._entry; _entry$1 = $f._entry$1; _i = $f._i; _key = $f._key; _keys = $f._keys; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _ref = $f._ref; _tuple = $f._tuple; at = $f.at; dij = $f.dij; ev = $f.ev; g = $f.g; nm = $f.nm; ok = $f.ok; pos = $f.pos; radius = $f.radius; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		g = this;
		dij = new normalPath.ptr(g, arrayType$1.zero());
		_r = Dijkstra(dij, new sliceType$5([$clone(at, position)]), radius); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		nm = _r;
		_ref = nm;
		_i = 0;
		_keys = $keys(_ref);
		/* while (true) { */ case 2:
			/* if (!(_i < _keys.length)) { break; } */ if(!(_i < _keys.length)) { $s = 3; continue; }
			_entry = _ref[_keys[_i]];
			if (_entry === undefined) {
				_i++;
				/* continue; */ $s = 2; continue;
			}
			pos = $clone(_entry.k, position);
			_tuple = (_entry$1 = g.Clouds[position.keyFor(pos)], _entry$1 !== undefined ? [_entry$1.v, true] : [0, false]);
			ok = _tuple[1];
			/* */ if (!ok) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (!ok) { */ case 4:
				_key = $clone(pos, position); (g.Clouds || $throwRuntimeError("assignment to entry in nil map"))[position.keyFor(_key)] = { k: _key, v: 0 };
				_r$1 = ev.Rank(); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				_r$2 = RandInt(100); /* */ $s = 7; case 7: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				$r = g.PushEvent(new cloudEvent.ptr((_r$1 + 100 >> 0) + _r$2 >> 0, $clone(pos, position), 0)); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 5:
			_i++;
		/* } */ $s = 2; continue; case 3:
		$r = g.ComputeLOS(); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: game.ptr.prototype.Fog }; } $f._entry = _entry; $f._entry$1 = _entry$1; $f._i = _i; $f._key = _key; $f._keys = _keys; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._ref = _ref; $f._tuple = _tuple; $f.at = at; $f.dij = dij; $f.ev = ev; $f.g = g; $f.nm = nm; $f.ok = ok; $f.pos = pos; $f.radius = radius; $f.$s = $s; $f.$r = $r; return $f;
	};
	game.prototype.Fog = function(at, radius, ev) { return this.$val.Fog(at, radius, ev); };
	game.ptr.prototype.EvokeRodDigging = function(ev) {
		var _entry, _key, _r, _r$1, _r$2, err, ev, g, i, pos, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _entry = $f._entry; _key = $f._key; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; err = $f.err; ev = $f.ev; g = $f.g; i = $f.i; pos = $f.pos; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		g = this;
		_r = g.ui.ChooseTarget(g, new wallChooser.ptr(false, false)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		err = _r;
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
		}
		pos = $clone(g.Player.Target, position);
		i = 0;
		/* while (true) { */ case 2:
			/* if (!(i < 3)) { break; } */ if(!(i < 3)) { $s = 3; continue; }
			g.Dungeon.SetCell($clone(pos, position), 1);
			$r = g.MakeNoise(17, $clone(pos, position)); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = g.Fog($clone(pos, position), 1, ev); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_r$1 = $clone(pos, position).Dir($clone(g.Player.Pos, position)); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_r$2 = $clone(pos, position).To(_r$1); /* */ $s = 7; case 7: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			position.copy(pos, _r$2);
			if (!(_entry = g.Player.LOS[position.keyFor(pos)], _entry !== undefined ? _entry.v : false)) {
				_key = $clone(pos, position); (g.UnknownDig || $throwRuntimeError("assignment to entry in nil map"))[position.keyFor(_key)] = { k: _key, v: true };
			}
			if (!$clone(pos, position).valid() || !((g.Dungeon.Cell($clone(pos, position)).T === 0))) {
				/* break; */ $s = 3; continue;
			}
			i = i + (1) >> 0;
		/* } */ $s = 2; continue; case 3:
		g.Print("You see the wall disintegrate with a crash.");
		$r = g.ComputeLOS(); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = g.MakeMonstersAware(); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: game.ptr.prototype.EvokeRodDigging }; } $f._entry = _entry; $f._key = _key; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.err = err; $f.ev = ev; $f.g = g; $f.i = i; $f.pos = pos; $f.$s = $s; $f.$r = $r; return $f;
	};
	game.prototype.EvokeRodDigging = function(ev) { return this.$val.EvokeRodDigging(ev); };
	game.ptr.prototype.EvokeRodShatter = function(ev) {
		var _arg, _arg$1, _arg$2, _arg$3, _arg$4, _arg$5, _i, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _ref, _tuple, err, ev, g, mons, neighbors, pos, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _arg$3 = $f._arg$3; _arg$4 = $f._arg$4; _arg$5 = $f._arg$5; _i = $f._i; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _ref = $f._ref; _tuple = $f._tuple; err = $f.err; ev = $f.ev; g = $f.g; mons = $f.mons; neighbors = $f.neighbors; pos = $f.pos; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		g = this;
		_r = g.ui.ChooseTarget(g, new wallChooser.ptr(false, true)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		err = _r;
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
		}
		_r$1 = g.Dungeon.FreeNeighbors($clone(g.Player.Target, position)); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		neighbors = _r$1;
		_r$2 = RandInt(2); /* */ $s = 6; case 6: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		/* */ if (_r$2 === 0) { $s = 3; continue; }
		/* */ $s = 4; continue;
		/* if (_r$2 === 0) { */ case 3:
			g.Dungeon.SetCell($clone(g.Player.Target, position), 1);
			$r = g.ComputeLOS(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = g.MakeMonstersAware(); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = g.MakeNoise(19, $clone(g.Player.Target, position)); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			g.Print("You see the wall disappear in a noisy explosion.");
			_arg = g;
			_r$3 = g.Ray($clone(g.Player.Target, position)); /* */ $s = 10; case 10: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_arg$1 = _r$3;
			_arg$2 = $pkg.ColorFgExplosionWallStart;
			$r = g.ui.ProjectileTrajectoryAnimation(_arg, _arg$1, _arg$2); /* */ $s = 11; case 11: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = g.ui.ExplosionAnimation(g, 1, $clone(g.Player.Target, position)); /* */ $s = 12; case 12: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = g.Fog($clone(g.Player.Target, position), 2, ev); /* */ $s = 13; case 13: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 5; continue;
		/* } else { */ case 4:
			$r = g.MakeNoise(15, $clone(g.Player.Target, position)); /* */ $s = 14; case 14: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			g.Print("You see an explosion around the wall.");
			_arg$3 = g;
			_r$4 = g.Ray($clone(g.Player.Target, position)); /* */ $s = 15; case 15: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			_arg$4 = _r$4;
			_arg$5 = $pkg.ColorFgExplosionWallStart;
			$r = g.ui.ProjectileTrajectoryAnimation(_arg$3, _arg$4, _arg$5); /* */ $s = 16; case 16: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = g.ui.ExplosionAnimation(g, 2, $clone(g.Player.Target, position)); /* */ $s = 17; case 17: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 5:
		_ref = neighbors;
		_i = 0;
		/* while (true) { */ case 18:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 19; continue; }
			pos = $clone(((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]), position);
			_tuple = g.MonsterAt($clone(pos, position));
			mons = _tuple[0];
			/* */ if (!mons.Exists()) { $s = 20; continue; }
			/* */ $s = 21; continue;
			/* if (!mons.Exists()) { */ case 20:
				_i++;
				/* continue; */ $s = 18; continue;
			/* } */ case 21:
			_r$5 = RandInt(30); /* */ $s = 22; case 22: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			mons.HP = mons.HP - (_r$5) >> 0;
			/* */ if (mons.HP <= 0) { $s = 23; continue; }
			/* */ $s = 24; continue;
			/* if (mons.HP <= 0) { */ case 23:
				$r = g.Printf("%s is killed by the explosion.", new sliceType$7([new $String(new monsterKind(mons.Kind).Indefinite(true))])); /* */ $s = 25; case 25: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$r = g.HandleKill(mons, ev); /* */ $s = 26; case 26: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 24:
			$r = g.MakeNoise(12, $clone(mons.Pos, position)); /* */ $s = 27; case 27: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = mons.MakeHuntIfHurt(g); /* */ $s = 28; case 28: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_i++;
		/* } */ $s = 18; continue; case 19:
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: game.ptr.prototype.EvokeRodShatter }; } $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._arg$3 = _arg$3; $f._arg$4 = _arg$4; $f._arg$5 = _arg$5; $f._i = _i; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._ref = _ref; $f._tuple = _tuple; $f.err = err; $f.ev = ev; $f.g = g; $f.mons = mons; $f.neighbors = neighbors; $f.pos = pos; $f.$s = $s; $f.$r = $r; return $f;
	};
	game.prototype.EvokeRodShatter = function(ev) { return this.$val.EvokeRodShatter(ev); };
	game.ptr.prototype.EvokeRodObstruction = function(ev) {
		var _i, _key, _r, _r$1, _r$2, _r$3, _ref, err, ev, g, neighbors, pos, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _key = $f._key; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _ref = $f._ref; err = $f.err; ev = $f.ev; g = $f.g; neighbors = $f.neighbors; pos = $f.pos; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		g = this;
		_r = g.ui.ChooseTarget(g, new chooser.ptr(false, false, false, true, true, false, false)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		err = _r;
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
		}
		_r$1 = g.Dungeon.FreeNeighbors($clone(g.Player.Target, position)); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		neighbors = _r$1;
		_ref = neighbors;
		_i = 0;
		/* while (true) { */ case 3:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 4; continue; }
			pos = $clone(((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]), position);
			$r = g.MakeNoise(18, $clone(pos, position)); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* break; */ $s = 4; continue;
		/* } */ $s = 3; continue; case 4:
		g.Dungeon.SetCell($clone(g.Player.Target, position), 0);
		delete g.Clouds[position.keyFor(g.Player.Target)];
		if (!(g.TemporalWalls === false)) {
			_key = $clone(g.Player.Target, position); (g.TemporalWalls || $throwRuntimeError("assignment to entry in nil map"))[position.keyFor(_key)] = { k: _key, v: true };
		}
		_r$2 = ev.Rank(); /* */ $s = 6; case 6: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_r$3 = RandInt(50); /* */ $s = 7; case 7: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		$r = g.PushEvent(new cloudEvent.ptr((_r$2 + 200 >> 0) + _r$3 >> 0, $clone(g.Player.Target, position), 1)); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = g.Printf("You see a wall appear from nothing.", new sliceType$7([])); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = g.ComputeLOS(); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: game.ptr.prototype.EvokeRodObstruction }; } $f._i = _i; $f._key = _key; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._ref = _ref; $f.err = err; $f.ev = ev; $f.g = g; $f.neighbors = neighbors; $f.pos = pos; $f.$s = $s; $f.$r = $r; return $f;
	};
	game.prototype.EvokeRodObstruction = function(ev) { return this.$val.EvokeRodObstruction(ev); };
	game.ptr.prototype.EvokeRodSwapping = function(ev) {
		var _r, _tmp, _tmp$1, _tuple, err, ev, g, mons, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tuple = $f._tuple; err = $f.err; ev = $f.ev; g = $f.g; mons = $f.mons; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		g = this;
		if (g.Player.HasStatus(5)) {
			$s = -1; return errors.New("You cannot use this rod while lignified.");
		}
		_r = g.ui.ChooseTarget(g, new chooser.ptr(false, false, false, false, false, false, false)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		err = _r;
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
		}
		_tuple = g.MonsterAt($clone(g.Player.Target, position));
		mons = _tuple[0];
		_tmp = $clone(g.Player.Pos, position);
		_tmp$1 = $clone(mons.Pos, position);
		position.copy(mons.Pos, _tmp);
		position.copy(g.Player.Pos, _tmp$1);
		$r = mons.MakeAware(g); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = g.Printf("You swap positions with the %s.", new sliceType$7([new monsterKind(mons.Kind)])); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = g.ui.SwappingAnimation(g, $clone(mons.Pos, position), $clone(g.Player.Pos, position)); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = g.CollectGround(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = g.ComputeLOS(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = g.MakeMonstersAware(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: game.ptr.prototype.EvokeRodSwapping }; } $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tuple = _tuple; $f.err = err; $f.ev = ev; $f.g = g; $f.mons = mons; $f.$s = $s; $f.$r = $r; return $f;
	};
	game.prototype.EvokeRodSwapping = function(ev) { return this.$val.EvokeRodSwapping(ev); };
	game.ptr.prototype.GeneratedRodsCount = function() {
		var _entry, _i, _keys, _ref, b, count, g;
		g = this;
		count = 0;
		_ref = g.GeneratedRods;
		_i = 0;
		_keys = $keys(_ref);
		while (true) {
			if (!(_i < _keys.length)) { break; }
			_entry = _ref[_keys[_i]];
			if (_entry === undefined) {
				_i++;
				continue;
			}
			b = _entry.v;
			if (b) {
				count = count + (1) >> 0;
			}
			_i++;
		}
		return count;
	};
	game.prototype.GeneratedRodsCount = function() { return this.$val.GeneratedRodsCount(); };
	game.ptr.prototype.GenerateRod = function() {
		var _entry, _entry$1, _key, _key$1, _r, _r$1, _r$2, _r$3, _v, count, g, pos, r, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _entry = $f._entry; _entry$1 = $f._entry$1; _key = $f._key; _key$1 = $f._key$1; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _v = $f._v; count = $f.count; g = $f.g; pos = $f.pos; r = $f.r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		g = this;
		count = 0;
		/* while (true) { */ case 1:
			count = count + (1) >> 0;
			if (count > 1000) {
				$panic(new $String("GenerateRod"));
			}
			_r = g.FreeCellForStatic(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			pos = $clone(_r, position);
			_r$1 = RandInt(9); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			r = ((_r$1 >> 0));
			if (!(new rod(r).Rare())) { _v = false; $s = 7; continue s; }
			_r$2 = RandInt(3); /* */ $s = 8; case 8: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_v = _r$2 === 0; case 7:
			/* */ if (_v) { $s = 5; continue; }
			/* */ $s = 6; continue;
			/* if (_v) { */ case 5:
				_r$3 = RandInt(9); /* */ $s = 9; case 9: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				r = ((_r$3 >> 0));
			/* } */ case 6:
			if ((_entry = g.Player.Rods[rod.keyFor(r)], _entry !== undefined ? _entry.v : ptrType$6.nil) === ptrType$6.nil && !(_entry$1 = g.GeneratedRods[rod.keyFor(r)], _entry$1 !== undefined ? _entry$1.v : false)) {
				_key = r; (g.GeneratedRods || $throwRuntimeError("assignment to entry in nil map"))[rod.keyFor(_key)] = { k: _key, v: true };
				_key$1 = $clone(pos, position); (g.Rods || $throwRuntimeError("assignment to entry in nil map"))[position.keyFor(_key$1)] = { k: _key$1, v: r };
				$s = -1; return;
			}
		/* } */ $s = 1; continue; case 2:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: game.ptr.prototype.GenerateRod }; } $f._entry = _entry; $f._entry$1 = _entry$1; $f._key = _key; $f._key$1 = _key$1; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._v = _v; $f.count = count; $f.g = g; $f.pos = pos; $f.r = r; $f.$s = $s; $f.$r = $r; return $f;
	};
	game.prototype.GenerateRod = function() { return this.$val.GenerateRod(); };
	status.prototype.Good = function() {
		var _1, st;
		st = this.$val;
		_1 = st;
		if ((_1 === (0)) || (_1 === (3)) || (_1 === (4)) || (_1 === (12))) {
			return true;
		} else {
			return false;
		}
	};
	$ptrType(status).prototype.Good = function() { return new status(this.$get()).Good(); };
	status.prototype.Bad = function() {
		var _1, st;
		st = this.$val;
		_1 = st;
		if ((_1 === (1)) || (_1 === (6)) || (_1 === (8)) || (_1 === (9)) || (_1 === (11)) || (_1 === (10))) {
			return true;
		} else {
			return false;
		}
	};
	$ptrType(status).prototype.Bad = function() { return new status(this.$get()).Bad(); };
	status.prototype.String = function() {
		var _1, st;
		st = this.$val;
		_1 = st;
		if (_1 === (0)) {
			return "Berserk";
		} else if (_1 === (1)) {
			return "Slow";
		} else if (_1 === (2)) {
			return "Exhausted";
		} else if (_1 === (3)) {
			return "Swift";
		} else if (_1 === (5)) {
			return "Lignified";
		} else if (_1 === (4)) {
			return "Agile";
		} else if (_1 === (6)) {
			return "Confused";
		} else if (_1 === (7)) {
			return "Tele";
		} else if (_1 === (8)) {
			return "Nausea";
		} else if (_1 === (9)) {
			return "-Shield";
		} else if (_1 === (10)) {
			return "Corroded";
		} else if (_1 === (11)) {
			return "Flames";
		} else if (_1 === (12)) {
			return "Dig";
		} else {
			return "unknown";
		}
	};
	$ptrType(status).prototype.String = function() { return new status(this.$get()).String(); };
	examiner.ptr.prototype.ComputeHighlight = function(g, pos) {
		var ex, g, pos, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; ex = $f.ex; g = $f.g; pos = $f.pos; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		ex = this;
		$r = g.ComputePathHighlight($clone(pos, position)); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: examiner.ptr.prototype.ComputeHighlight }; } $f.ex = ex; $f.g = g; $f.pos = pos; $f.$s = $s; $f.$r = $r; return $f;
	};
	examiner.prototype.ComputeHighlight = function(g, pos) { return this.$val.ComputeHighlight(g, pos); };
	game.ptr.prototype.ComputePathHighlight = function(pos) {
		var _i, _key, _r, _ref, g, p, path, pos, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _key = $f._key; _r = $f._r; _ref = $f._ref; g = $f.g; p = $f.p; path = $f.path; pos = $f.pos; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		g = this;
		_r = g.PlayerPath($clone(g.Player.Pos, position), $clone(pos, position)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		path = _r;
		g.Highlight = $makeMap(position.keyFor, []);
		_ref = path;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			p = $clone(((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]), position);
			_key = $clone(p, position); (g.Highlight || $throwRuntimeError("assignment to entry in nil map"))[position.keyFor(_key)] = { k: _key, v: true };
			_i++;
		}
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: game.ptr.prototype.ComputePathHighlight }; } $f._i = _i; $f._key = _key; $f._r = _r; $f._ref = _ref; $f.g = g; $f.p = p; $f.path = path; $f.pos = pos; $f.$s = $s; $f.$r = $r; return $f;
	};
	game.prototype.ComputePathHighlight = function(pos) { return this.$val.ComputePathHighlight(pos); };
	examiner.ptr.prototype.Action = function(g, pos) {
		var _entry, _entry$1, _r, c, ex, g, path, pos, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _entry = $f._entry; _entry$1 = $f._entry$1; _r = $f._r; c = $f.c; ex = $f.ex; g = $f.g; path = $f.path; pos = $f.pos; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		pos = [pos];
		ex = this;
		if ((_entry = g.ExclusionsMap[position.keyFor(g.Player.Pos)], _entry !== undefined ? _entry.v : false)) {
			$s = -1; return errors.New("You cannot travel while in an excluded area.");
		}
		if (!g.Dungeon.Cell($clone(pos[0], position)).Explored) {
			$s = -1; return errors.New("You do not know this place.");
		}
		if ((_entry$1 = g.ExclusionsMap[position.keyFor(pos[0])], _entry$1 !== undefined ? _entry$1.v : false)) {
			$s = -1; return errors.New("You cannot travel to an excluded area.");
		}
		if (g.Dungeon.Cell($clone(pos[0], position)).T === 0) {
			$s = -1; return errors.New("You cannot travel into a wall.");
		}
		_r = g.PlayerPath($clone(g.Player.Pos, position), $clone(pos[0], position)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		path = _r;
		if (path === sliceType$5.nil) {
			if (ex.stairs) {
				$s = -1; return errors.New("There is no safe path to the nearest stairs.");
			}
			$s = -1; return errors.New("There is no safe path to this place.");
		}
		c = $clone(g.Dungeon.Cell($clone(pos[0], position)), cell);
		if (c.Explored && (c.T === 1)) {
			g.AutoTarget = pos[0];
			g.Targeting = pos[0];
			ex.done = true;
			$s = -1; return $ifaceNil;
		}
		$s = -1; return errors.New("Invalid destination.");
		/* */ } return; } if ($f === undefined) { $f = { $blk: examiner.ptr.prototype.Action }; } $f._entry = _entry; $f._entry$1 = _entry$1; $f._r = _r; $f.c = c; $f.ex = ex; $f.g = g; $f.path = path; $f.pos = pos; $f.$s = $s; $f.$r = $r; return $f;
	};
	examiner.prototype.Action = function(g, pos) { return this.$val.Action(g, pos); };
	examiner.ptr.prototype.Reachable = function(g, pos) {
		var ex, g, pos;
		ex = this;
		return true;
	};
	examiner.prototype.Reachable = function(g, pos) { return this.$val.Reachable(g, pos); };
	examiner.ptr.prototype.Done = function() {
		var ex;
		ex = this;
		return ex.done;
	};
	examiner.prototype.Done = function() { return this.$val.Done(); };
	chooser.ptr.prototype.ComputeHighlight = function(g, pos) {
		var _i, _key, _r, _ref, ch$1, g, neighbors, pos, pos$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _key = $f._key; _r = $f._r; _ref = $f._ref; ch$1 = $f.ch$1; g = $f.g; neighbors = $f.neighbors; pos = $f.pos; pos$1 = $f.pos$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		ch$1 = this;
		$r = g.ComputeRayHighlight($clone(pos, position)); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		if (!ch$1.area) {
			$s = -1; return;
		}
		_r = g.Dungeon.FreeNeighbors($clone(pos, position)); /* */ $s = 2; case 2: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		neighbors = _r;
		_ref = neighbors;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			pos$1 = $clone(((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]), position);
			_key = $clone(pos$1, position); (g.Highlight || $throwRuntimeError("assignment to entry in nil map"))[position.keyFor(_key)] = { k: _key, v: true };
			_i++;
		}
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: chooser.ptr.prototype.ComputeHighlight }; } $f._i = _i; $f._key = _key; $f._r = _r; $f._ref = _ref; $f.ch$1 = ch$1; $f.g = g; $f.neighbors = neighbors; $f.pos = pos; $f.pos$1 = pos$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	chooser.prototype.ComputeHighlight = function(g, pos) { return this.$val.ComputeHighlight(g, pos); };
	chooser.ptr.prototype.Reachable = function(g, pos) {
		var _entry, ch$1, g, pos;
		ch$1 = this;
		return (_entry = g.Player.LOS[position.keyFor(pos)], _entry !== undefined ? _entry.v : false);
	};
	chooser.prototype.Reachable = function(g, pos) { return this.$val.Reachable(g, pos); };
	chooser.ptr.prototype.Action = function(g, pos) {
		var _entry, _entry$1, _i, _r, _r$1, _r$2, _r$3, _ref, _tuple, _tuple$1, _tuple$2, _tuple$3, _v, _v$1, _v$2, _v$3, c, ch$1, g, mons, mons$1, nc, neighbors, npos, okDoors, okFungus, pos, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _entry = $f._entry; _entry$1 = $f._entry$1; _i = $f._i; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _ref = $f._ref; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; _v = $f._v; _v$1 = $f._v$1; _v$2 = $f._v$2; _v$3 = $f._v$3; c = $f.c; ch$1 = $f.ch$1; g = $f.g; mons = $f.mons; mons$1 = $f.mons$1; nc = $f.nc; neighbors = $f.neighbors; npos = $f.npos; okDoors = $f.okDoors; okFungus = $f.okFungus; pos = $f.pos; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		ch$1 = this;
		if (!ch$1.Reachable(g, $clone(pos, position))) {
			$s = -1; return errors.New("You cannot target that place.");
		}
		if (ch$1.minDist && $clone(pos, position).Distance($clone(g.Player.Pos, position)) <= 1) {
			$s = -1; return errors.New("Invalid target: too close.");
		}
		c = $clone(g.Dungeon.Cell($clone(pos, position)), cell);
		if (c.T === 0) {
			$s = -1; return errors.New("You cannot target a wall.");
		}
		if (!(ch$1.area || ch$1.needsFreeWay)) { _v = false; $s = 3; continue s; }
		_r = ch$1.freeWay(g, $clone(pos, position)); /* */ $s = 4; case 4: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_v = !_r; case 3:
		/* */ if (_v) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (_v) { */ case 1:
			$s = -1; return errors.New("Invalid target: there are monsters in the way.");
		/* } */ case 2:
		_tuple = g.MonsterAt($clone(pos, position));
		mons = _tuple[0];
		if (ch$1.free) {
			if (mons.Exists()) {
				$s = -1; return errors.New("Invalid target: there is a monster there.");
			}
			if ($equal(g.Player.Pos, pos, position)) {
				$s = -1; return errors.New("Invalid target: you are here.");
			}
			position.copy(g.Player.Target, pos);
			ch$1.done = true;
			$s = -1; return $ifaceNil;
		}
		if (mons.Exists()) { _v$1 = true; $s = 7; continue s; }
		if (!(ch$1.flammable)) { _v$2 = false; $s = 8; continue s; }
		_r$1 = ch$1.flammableInWay(g, $clone(pos, position)); /* */ $s = 9; case 9: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_v$2 = _r$1; case 8:
		_v$1 = _v$2; case 7:
		/* */ if (_v$1) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if (_v$1) { */ case 5:
			position.copy(g.Player.Target, pos);
			ch$1.done = true;
			$s = -1; return $ifaceNil;
		/* } */ case 6:
		if (!(ch$1.flammable)) { _v$3 = false; $s = 12; continue s; }
		_r$2 = ch$1.flammableInWay(g, $clone(pos, position)); /* */ $s = 13; case 13: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_v$3 = _r$2; case 12:
		/* */ if (_v$3) { $s = 10; continue; }
		/* */ $s = 11; continue;
		/* if (_v$3) { */ case 10:
			position.copy(g.Player.Target, pos);
			ch$1.done = true;
			$s = -1; return $ifaceNil;
		/* } */ case 11:
		if (!ch$1.area) {
			$s = -1; return errors.New("You must target a monster.");
		}
		_r$3 = $clone(pos, position).ValidNeighbors(); /* */ $s = 14; case 14: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		neighbors = _r$3;
		_ref = neighbors;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			npos = $clone(((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]), position);
			nc = $clone(g.Dungeon.Cell($clone(npos, position)), cell);
			if (!ch$1.wall && (nc.T === 0)) {
				_i++;
				continue;
			}
			_tuple$1 = g.MonsterAt($clone(npos, position));
			mons$1 = _tuple$1[0];
			_tuple$2 = (_entry = g.Fungus[position.keyFor(pos)], _entry !== undefined ? [_entry.v, true] : [0, false]);
			okFungus = _tuple$2[1];
			_tuple$3 = (_entry$1 = g.Doors[position.keyFor(pos)], _entry$1 !== undefined ? [_entry$1.v, true] : [false, false]);
			okDoors = _tuple$3[1];
			if (ch$1.flammable && (okFungus || okDoors) || mons$1.Exists() || (nc.T === 0)) {
				position.copy(g.Player.Target, pos);
				ch$1.done = true;
				$s = -1; return $ifaceNil;
			}
			_i++;
		}
		if (ch$1.flammable && ch$1.wall) {
			$s = -1; return errors.New("Invalid target: no monsters, walls nor flammable terrain in the area.");
		}
		if (ch$1.flammable) {
			$s = -1; return errors.New("Invalid target: no monsters nor flammable terrain in the area.");
		}
		if (ch$1.wall) {
			$s = -1; return errors.New("Invalid target: no monsters nor walls in the area.");
		}
		$s = -1; return errors.New("Invalid target: no monsters in the area.");
		/* */ } return; } if ($f === undefined) { $f = { $blk: chooser.ptr.prototype.Action }; } $f._entry = _entry; $f._entry$1 = _entry$1; $f._i = _i; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._ref = _ref; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f._v = _v; $f._v$1 = _v$1; $f._v$2 = _v$2; $f._v$3 = _v$3; $f.c = c; $f.ch$1 = ch$1; $f.g = g; $f.mons = mons; $f.mons$1 = mons$1; $f.nc = nc; $f.neighbors = neighbors; $f.npos = npos; $f.okDoors = okDoors; $f.okFungus = okFungus; $f.pos = pos; $f.$s = $s; $f.$r = $r; return $f;
	};
	chooser.prototype.Action = function(g, pos) { return this.$val.Action(g, pos); };
	chooser.ptr.prototype.Done = function() {
		var ch$1;
		ch$1 = this;
		return ch$1.done;
	};
	chooser.prototype.Done = function() { return this.$val.Done(); };
	chooser.ptr.prototype.freeWay = function(g, pos) {
		var _i, _r, _ref, _tuple, ch$1, g, mons, pos, ray, rpos, tpos, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _r = $f._r; _ref = $f._ref; _tuple = $f._tuple; ch$1 = $f.ch$1; g = $f.g; mons = $f.mons; pos = $f.pos; ray = $f.ray; rpos = $f.rpos; tpos = $f.tpos; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		ch$1 = this;
		_r = g.Ray($clone(pos, position)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		ray = _r;
		tpos = $clone(pos, position);
		_ref = ray;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			rpos = $clone(((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]), position);
			_tuple = g.MonsterAt($clone(rpos, position));
			mons = _tuple[0];
			if (!mons.Exists()) {
				_i++;
				continue;
			}
			position.copy(tpos, mons.Pos);
			_i++;
		}
		$s = -1; return $equal(tpos, pos, position);
		/* */ } return; } if ($f === undefined) { $f = { $blk: chooser.ptr.prototype.freeWay }; } $f._i = _i; $f._r = _r; $f._ref = _ref; $f._tuple = _tuple; $f.ch$1 = ch$1; $f.g = g; $f.mons = mons; $f.pos = pos; $f.ray = ray; $f.rpos = rpos; $f.tpos = tpos; $f.$s = $s; $f.$r = $r; return $f;
	};
	chooser.prototype.freeWay = function(g, pos) { return this.$val.freeWay(g, pos); };
	chooser.ptr.prototype.flammableInWay = function(g, pos) {
		var _entry, _entry$1, _i, _r, _ref, _tuple, _tuple$1, ch$1, g, ok, ok$1, pos, ray, rpos, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _entry = $f._entry; _entry$1 = $f._entry$1; _i = $f._i; _r = $f._r; _ref = $f._ref; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; ch$1 = $f.ch$1; g = $f.g; ok = $f.ok; ok$1 = $f.ok$1; pos = $f.pos; ray = $f.ray; rpos = $f.rpos; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		ch$1 = this;
		_r = g.Ray($clone(pos, position)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		ray = _r;
		_ref = ray;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			rpos = $clone(((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]), position);
			if ($equal(rpos, g.Player.Pos, position)) {
				_i++;
				continue;
			}
			_tuple = (_entry = g.Fungus[position.keyFor(rpos)], _entry !== undefined ? [_entry.v, true] : [0, false]);
			ok = _tuple[1];
			if (ok) {
				$s = -1; return true;
			}
			_tuple$1 = (_entry$1 = g.Doors[position.keyFor(rpos)], _entry$1 !== undefined ? [_entry$1.v, true] : [false, false]);
			ok$1 = _tuple$1[1];
			if (ok$1) {
				$s = -1; return true;
			}
			_i++;
		}
		$s = -1; return false;
		/* */ } return; } if ($f === undefined) { $f = { $blk: chooser.ptr.prototype.flammableInWay }; } $f._entry = _entry; $f._entry$1 = _entry$1; $f._i = _i; $f._r = _r; $f._ref = _ref; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.ch$1 = ch$1; $f.g = g; $f.ok = ok; $f.ok$1 = ok$1; $f.pos = pos; $f.ray = ray; $f.rpos = rpos; $f.$s = $s; $f.$r = $r; return $f;
	};
	chooser.prototype.flammableInWay = function(g, pos) { return this.$val.flammableInWay(g, pos); };
	wallChooser.ptr.prototype.ComputeHighlight = function(g, pos) {
		var ch$1, g, pos, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; ch$1 = $f.ch$1; g = $f.g; pos = $f.pos; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		ch$1 = this;
		$r = g.ComputeRayHighlight($clone(pos, position)); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: wallChooser.ptr.prototype.ComputeHighlight }; } $f.ch$1 = ch$1; $f.g = g; $f.pos = pos; $f.$s = $s; $f.$r = $r; return $f;
	};
	wallChooser.prototype.ComputeHighlight = function(g, pos) { return this.$val.ComputeHighlight(g, pos); };
	wallChooser.ptr.prototype.Reachable = function(g, pos) {
		var _entry, ch$1, g, pos;
		ch$1 = this;
		return (_entry = g.Player.LOS[position.keyFor(pos)], _entry !== undefined ? _entry.v : false);
	};
	wallChooser.prototype.Reachable = function(g, pos) { return this.$val.Reachable(g, pos); };
	wallChooser.ptr.prototype.Action = function(g, pos) {
		var _i, _r, _ref, _tuple, ch$1, g, mons, pos, pos$1, ray, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _r = $f._r; _ref = $f._ref; _tuple = $f._tuple; ch$1 = $f.ch$1; g = $f.g; mons = $f.mons; pos = $f.pos; pos$1 = $f.pos$1; ray = $f.ray; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		ch$1 = this;
		if (!ch$1.Reachable(g, $clone(pos, position))) {
			$s = -1; return errors.New("You cannot target that place.");
		}
		_r = g.Ray($clone(pos, position)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		ray = _r;
		if (ray.$length === 0) {
			$s = -1; return errors.New("You are not a wall.");
		}
		if (!((g.Dungeon.Cell($clone((0 >= ray.$length ? ($throwRuntimeError("index out of range"), undefined) : ray.$array[ray.$offset + 0]), position)).T === 0))) {
			$s = -1; return errors.New("You must target a wall.");
		}
		if (ch$1.minDist && $clone(g.Player.Pos, position).Distance($clone(pos, position)) <= 1) {
			$s = -1; return errors.New("You cannot target an adjacent wall.");
		}
		_ref = $subslice(ray, 1);
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			pos$1 = $clone(((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]), position);
			_tuple = g.MonsterAt($clone(pos$1, position));
			mons = _tuple[0];
			if (mons.Exists()) {
				$s = -1; return errors.New("There are monsters in the way.");
			}
			_i++;
		}
		position.copy(g.Player.Target, pos);
		ch$1.done = true;
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: wallChooser.ptr.prototype.Action }; } $f._i = _i; $f._r = _r; $f._ref = _ref; $f._tuple = _tuple; $f.ch$1 = ch$1; $f.g = g; $f.mons = mons; $f.pos = pos; $f.pos$1 = pos$1; $f.ray = ray; $f.$s = $s; $f.$r = $r; return $f;
	};
	wallChooser.prototype.Action = function(g, pos) { return this.$val.Action(g, pos); };
	wallChooser.ptr.prototype.Done = function() {
		var ch$1;
		ch$1 = this;
		return ch$1.done;
	};
	wallChooser.prototype.Done = function() { return this.$val.Done(); };
	Abs = function(x) {
		var x;
		if (x < 0) {
			return -x;
		}
		return x;
	};
	$pkg.Abs = Abs;
	RandInt = function(n) {
		var _q, _r, _tuple, err, n, x, x$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _q = $f._q; _r = $f._r; _tuple = $f._tuple; err = $f.err; n = $f.n; x = $f.x; x$1 = $f.x$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		if (n <= 0) {
			$s = -1; return 0;
		}
		_r = rand.Int(rand.Reader, big.NewInt((new $Int64(0, n)))); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		x = _tuple[0];
		err = _tuple[1];
		/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 2:
			$r = log.Println(new sliceType$7([err, new $String(":"), new $Int(n)])); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = -1; return (_q = n / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
		/* } */ case 3:
		$s = -1; return (((x$1 = x.Int64(), x$1.$low + ((x$1.$high >> 31) * 4294967296)) >> 0));
		/* */ } return; } if ($f === undefined) { $f = { $blk: RandInt }; } $f._q = _q; $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.n = n; $f.x = x; $f.x$1 = x$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.RandInt = RandInt;
	Min = function(x, y) {
		var x, y;
		if (x < y) {
			return x;
		}
		return y;
	};
	$pkg.Min = Min;
	Max = function(x, y) {
		var x, y;
		if (x > y) {
			return x;
		}
		return y;
	};
	$pkg.Max = Max;
	Indefinite = function(s, upper) {
		var _1, s, text, upper;
		text = "";
		if (s.length > 0) {
			_1 = s.charCodeAt(0);
			if ((_1 === (97)) || (_1 === (101)) || (_1 === (105)) || (_1 === (111)) || (_1 === (117))) {
				if (upper) {
					text = "An " + s;
				} else {
					text = "an " + s;
				}
			} else if (upper) {
				text = "A " + s;
			} else {
				text = "a " + s;
			}
		}
		text = text;
		return text;
	};
	$pkg.Indefinite = Indefinite;
	formatText = function(text, width) {
		var _i, _ref, _rune, c, col, pbuf, text, wantspace, width, wlen, wordbuf;
		pbuf = new bytes.Buffer.ptr(sliceType$8.nil, 0, arrayType$2.zero(), 0);
		wordbuf = new bytes.Buffer.ptr(sliceType$8.nil, 0, arrayType$2.zero(), 0);
		col = 0;
		wantspace = false;
		wlen = 0;
		_ref = text;
		_i = 0;
		while (true) {
			if (!(_i < _ref.length)) { break; }
			_rune = $decodeRune(_ref, _i);
			c = _rune[0];
			if (c === 32) {
				if (wlen === 0) {
					_i += _rune[1];
					continue;
				}
				if ((col + wlen >> 0) > width) {
					if (wantspace) {
						pbuf.WriteRune(10);
						col = 0;
					}
				} else if (wantspace) {
					pbuf.WriteRune(32);
					col = col + (1) >> 0;
				}
				pbuf.Write(wordbuf.Bytes());
				col = col + (wlen) >> 0;
				wordbuf.Reset();
				wlen = 0;
				wantspace = true;
				_i += _rune[1];
				continue;
			}
			wordbuf.WriteRune(c);
			wlen = wlen + (1) >> 0;
			_i += _rune[1];
		}
		if (wordbuf.Len() > 0) {
			if (wantspace) {
				if ((wlen + col >> 0) > width) {
					pbuf.WriteRune(10);
				} else {
					pbuf.WriteRune(32);
				}
			}
			pbuf.Write(wordbuf.Bytes());
		}
		return pbuf.String();
	};
	aptitude.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	nodeMap.methods = [{prop: "get", name: "get", pkg: "github.com/anaseto/boohu", typ: $funcType([position], [ptrType], false)}];
	priorityQueue.methods = [{prop: "Len", name: "Len", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Less", name: "Less", pkg: "", typ: $funcType([$Int, $Int], [$Bool], false)}, {prop: "Swap", name: "Swap", pkg: "", typ: $funcType([$Int, $Int], [], false)}];
	ptrType$2.methods = [{prop: "Push", name: "Push", pkg: "", typ: $funcType([$emptyInterface], [], false)}, {prop: "Pop", name: "Pop", pkg: "", typ: $funcType([], [$emptyInterface], false)}];
	uicolor.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	keyAction.methods = [{prop: "NormalModeKey", name: "NormalModeKey", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "NormalModeDescription", name: "NormalModeDescription", pkg: "", typ: $funcType([], [$String], false)}, {prop: "TargetingModeDescription", name: "TargetingModeDescription", pkg: "", typ: $funcType([], [$String], false)}, {prop: "TargetingModeKey", name: "TargetingModeKey", pkg: "", typ: $funcType([], [$Bool], false)}];
	rodSlice.methods = [{prop: "Len", name: "Len", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Swap", name: "Swap", pkg: "", typ: $funcType([$Int, $Int], [], false)}, {prop: "Less", name: "Less", pkg: "", typ: $funcType([$Int, $Int], [$Bool], false)}];
	consumableSlice.methods = [{prop: "Len", name: "Len", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Swap", name: "Swap", pkg: "", typ: $funcType([$Int, $Int], [], false)}, {prop: "Less", name: "Less", pkg: "", typ: $funcType([$Int, $Int], [$Bool], false)}];
	statusSlice.methods = [{prop: "Len", name: "Len", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Swap", name: "Swap", pkg: "", typ: $funcType([$Int, $Int], [], false)}, {prop: "Less", name: "Less", pkg: "", typ: $funcType([$Int, $Int], [$Bool], false)}];
	monsSlice.methods = [{prop: "Len", name: "Len", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Swap", name: "Swap", pkg: "", typ: $funcType([$Int, $Int], [], false)}, {prop: "Less", name: "Less", pkg: "", typ: $funcType([$Int, $Int], [$Bool], false)}];
	ptrType$7.methods = [{prop: "Cell", name: "Cell", pkg: "", typ: $funcType([position], [cell], false)}, {prop: "Border", name: "Border", pkg: "", typ: $funcType([position], [$Bool], false)}, {prop: "SetCell", name: "SetCell", pkg: "", typ: $funcType([position, terrain], [], false)}, {prop: "SetExplored", name: "SetExplored", pkg: "", typ: $funcType([position], [], false)}, {prop: "connectRooms", name: "connectRooms", pkg: "github.com/anaseto/boohu", typ: $funcType([room, room], [], false)}, {prop: "connectRoomsDiagonally", name: "connectRoomsDiagonally", pkg: "github.com/anaseto/boohu", typ: $funcType([room, room], [], false)}, {prop: "Area", name: "Area", pkg: "", typ: $funcType([sliceType$5, position, $Int], [sliceType$5], false)}, {prop: "ConnectRoomsShortestPath", name: "ConnectRoomsShortestPath", pkg: "", typ: $funcType([room, room], [], false)}, {prop: "DigRoom", name: "DigRoom", pkg: "", typ: $funcType([room], [], false)}, {prop: "PutCols", name: "PutCols", pkg: "", typ: $funcType([room], [], false)}, {prop: "PutDiagCols", name: "PutDiagCols", pkg: "", typ: $funcType([room], [], false)}, {prop: "IsAreaFree", name: "IsAreaFree", pkg: "", typ: $funcType([position, $Int, $Int], [$Bool], false)}, {prop: "RoomDigCanditate", name: "RoomDigCanditate", pkg: "", typ: $funcType([position, $Int, $Int], [$Bool], false)}, {prop: "DigArea", name: "DigArea", pkg: "", typ: $funcType([position, $Int, $Int], [], false)}, {prop: "BuildRoom", name: "BuildRoom", pkg: "", typ: $funcType([position, $Int, $Int], [mapType], false)}, {prop: "BuildSomeRoom", name: "BuildSomeRoom", pkg: "", typ: $funcType([$Int, $Int], [mapType], false)}, {prop: "DigSomeRoom", name: "DigSomeRoom", pkg: "", typ: $funcType([$Int, $Int], [mapType], false)}, {prop: "ResizeRoom", name: "ResizeRoom", pkg: "", typ: $funcType([room], [room], false)}, {prop: "FreeCell", name: "FreeCell", pkg: "", typ: $funcType([], [position], false)}, {prop: "WallCell", name: "WallCell", pkg: "", typ: $funcType([], [position], false)}, {prop: "HasFreeNeighbor", name: "HasFreeNeighbor", pkg: "", typ: $funcType([position], [$Bool], false)}, {prop: "DigBlock", name: "DigBlock", pkg: "", typ: $funcType([sliceType$5, $Bool], [sliceType$5], false)}, {prop: "WallAreaCount", name: "WallAreaCount", pkg: "", typ: $funcType([sliceType$5, position, $Int], [$Int], false)}, {prop: "Connected", name: "Connected", pkg: "", typ: $funcType([position, funcType$1], [mapType, $Int], false)}, {prop: "connex", name: "connex", pkg: "github.com/anaseto/boohu", typ: $funcType([], [$Bool], false)}, {prop: "IsFreeCell", name: "IsFreeCell", pkg: "", typ: $funcType([position], [$Bool], false)}, {prop: "FreeNeighbors", name: "FreeNeighbors", pkg: "", typ: $funcType([position], [sliceType$5], false)}, {prop: "CardinalFreeNeighbors", name: "CardinalFreeNeighbors", pkg: "", typ: $funcType([position], [sliceType$5], false)}];
	roomSlice.methods = [{prop: "Len", name: "Len", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Swap", name: "Swap", pkg: "", typ: $funcType([$Int, $Int], [], false)}, {prop: "Less", name: "Less", pkg: "", typ: $funcType([$Int, $Int], [$Bool], false)}];
	ptrType$12.methods = [{prop: "ConfigSave", name: "ConfigSave", pkg: "", typ: $funcType([], [sliceType$8, $error], false)}];
	eventQueue.methods = [{prop: "Len", name: "Len", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Less", name: "Less", pkg: "", typ: $funcType([$Int, $Int], [$Bool], false)}, {prop: "Swap", name: "Swap", pkg: "", typ: $funcType([$Int, $Int], [], false)}];
	ptrType$10.methods = [{prop: "Push", name: "Push", pkg: "", typ: $funcType([$emptyInterface], [], false)}, {prop: "Pop", name: "Pop", pkg: "", typ: $funcType([], [$emptyInterface], false)}];
	ptrType$17.methods = [{prop: "Rank", name: "Rank", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Renew", name: "Renew", pkg: "", typ: $funcType([ptrType$3, $Int], [], false)}, {prop: "Action", name: "Action", pkg: "", typ: $funcType([ptrType$3], [], false)}];
	ptrType$13.methods = [{prop: "Rank", name: "Rank", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Action", name: "Action", pkg: "", typ: $funcType([ptrType$3], [], false)}, {prop: "Renew", name: "Renew", pkg: "", typ: $funcType([ptrType$3, $Int], [], false)}];
	ptrType$14.methods = [{prop: "Rank", name: "Rank", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Action", name: "Action", pkg: "", typ: $funcType([ptrType$3], [], false)}, {prop: "Renew", name: "Renew", pkg: "", typ: $funcType([ptrType$3, $Int], [], false)}];
	ptrType$3.methods = [{prop: "RandomApt", name: "RandomApt", pkg: "", typ: $funcType([], [aptitude, $Bool], false)}, {prop: "ApplyAptitude", name: "ApplyAptitude", pkg: "", typ: $funcType([aptitude], [], false)}, {prop: "Autoexplore", name: "Autoexplore", pkg: "", typ: $funcType([event], [$error], false)}, {prop: "AllExplored", name: "AllExplored", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "AutoexploreSources", name: "AutoexploreSources", pkg: "", typ: $funcType([], [sliceType$6], false)}, {prop: "BuildAutoexploreMap", name: "BuildAutoexploreMap", pkg: "", typ: $funcType([sliceType$6], [], false)}, {prop: "NextAuto", name: "NextAuto", pkg: "", typ: $funcType([], [ptrType$1, $Bool], false)}, {prop: "HitDamage", name: "HitDamage", pkg: "", typ: $funcType([dmgType, $Int, $Int], [$Int], false)}, {prop: "MakeMonstersAware", name: "MakeMonstersAware", pkg: "", typ: $funcType([], [], false)}, {prop: "MakeNoise", name: "MakeNoise", pkg: "", typ: $funcType([$Int, position], [], false)}, {prop: "AttackMonster", name: "AttackMonster", pkg: "", typ: $funcType([ptrType$9, event], [], false)}, {prop: "HitConnected", name: "HitConnected", pkg: "", typ: $funcType([position, dmgType, event], [], false)}, {prop: "HitNoise", name: "HitNoise", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "HitMonster", name: "HitMonster", pkg: "", typ: $funcType([dmgType, ptrType$9, event], [$Bool], false)}, {prop: "HandleKill", name: "HandleKill", pkg: "", typ: $funcType([ptrType$9, event], [], false)}, {prop: "drawDijkstra", name: "drawDijkstra", pkg: "github.com/anaseto/boohu", typ: $funcType([nodeMap], [$String], false)}, {prop: "AutoExploreDijkstra", name: "AutoExploreDijkstra", pkg: "", typ: $funcType([Dijkstrer, sliceType$6], [], false)}, {prop: "DumpAptitudes", name: "DumpAptitudes", pkg: "", typ: $funcType([], [$String], false)}, {prop: "DumpStatuses", name: "DumpStatuses", pkg: "", typ: $funcType([], [$String], false)}, {prop: "SortedRods", name: "SortedRods", pkg: "", typ: $funcType([], [rodSlice], false)}, {prop: "SortedKilledMonsters", name: "SortedKilledMonsters", pkg: "", typ: $funcType([], [monsSlice], false)}, {prop: "SortedPotions", name: "SortedPotions", pkg: "", typ: $funcType([], [consumableSlice], false)}, {prop: "SortedProjectiles", name: "SortedProjectiles", pkg: "", typ: $funcType([], [consumableSlice], false)}, {prop: "Dump", name: "Dump", pkg: "", typ: $funcType([], [$String], false)}, {prop: "DumpStory", name: "DumpStory", pkg: "", typ: $funcType([], [$String], false)}, {prop: "DumpDungeon", name: "DumpDungeon", pkg: "", typ: $funcType([], [$String], false)}, {prop: "DumpedKilledMonsters", name: "DumpedKilledMonsters", pkg: "", typ: $funcType([], [$String], false)}, {prop: "SimplifedDump", name: "SimplifedDump", pkg: "", typ: $funcType([$error], [$String], false)}, {prop: "GenRuinsMap", name: "GenRuinsMap", pkg: "", typ: $funcType([$Int, $Int], [], false)}, {prop: "DigFungus", name: "DigFungus", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "GenRoomMap", name: "GenRoomMap", pkg: "", typ: $funcType([$Int, $Int], [], false)}, {prop: "GenCaveMap", name: "GenCaveMap", pkg: "", typ: $funcType([$Int, $Int], [], false)}, {prop: "HasFreeExploredNeighbor", name: "HasFreeExploredNeighbor", pkg: "", typ: $funcType([position], [$Bool], false)}, {prop: "GenCaveMapTree", name: "GenCaveMapTree", pkg: "", typ: $funcType([$Int, $Int], [], false)}, {prop: "RunCellularAutomataCave", name: "RunCellularAutomataCave", pkg: "", typ: $funcType([$Int, $Int], [$Bool], false)}, {prop: "GenCellularAutomataCaveMap", name: "GenCellularAutomataCaveMap", pkg: "", typ: $funcType([$Int, $Int], [], false)}, {prop: "Foliage", name: "Foliage", pkg: "", typ: $funcType([$Int, $Int], [mapType$2], false)}, {prop: "DoorCandidate", name: "DoorCandidate", pkg: "", typ: $funcType([position], [$Bool], false)}, {prop: "PutDoors", name: "PutDoors", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "GameSave", name: "GameSave", pkg: "", typ: $funcType([], [sliceType$8, $error], false)}, {prop: "DecodeGameSave", name: "DecodeGameSave", pkg: "", typ: $funcType([sliceType$8], [ptrType$3, $error], false)}, {prop: "DecodeConfigSave", name: "DecodeConfigSave", pkg: "", typ: $funcType([sliceType$8], [ptrType$12, $error], false)}, {prop: "PushEvent", name: "PushEvent", pkg: "", typ: $funcType([event], [], false)}, {prop: "PopIEvent", name: "PopIEvent", pkg: "", typ: $funcType([], [iEvent], false)}, {prop: "BurnCreature", name: "BurnCreature", pkg: "", typ: $funcType([position, event], [], false)}, {prop: "Burn", name: "Burn", pkg: "", typ: $funcType([position, event], [], false)}, {prop: "FreeCell", name: "FreeCell", pkg: "", typ: $funcType([], [position], false)}, {prop: "FreeCellForImportantStair", name: "FreeCellForImportantStair", pkg: "", typ: $funcType([], [position], false)}, {prop: "FreeCellForStatic", name: "FreeCellForStatic", pkg: "", typ: $funcType([], [position], false)}, {prop: "FreeCellForMonster", name: "FreeCellForMonster", pkg: "", typ: $funcType([], [position], false)}, {prop: "FreeCellForBandMonster", name: "FreeCellForBandMonster", pkg: "", typ: $funcType([position], [position], false)}, {prop: "FreeForStairs", name: "FreeForStairs", pkg: "", typ: $funcType([], [position], false)}, {prop: "MaxDepth", name: "MaxDepth", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "GenDungeon", name: "GenDungeon", pkg: "", typ: $funcType([], [], false)}, {prop: "InitPlayer", name: "InitPlayer", pkg: "", typ: $funcType([], [], false)}, {prop: "InitLevel", name: "InitLevel", pkg: "", typ: $funcType([], [], false)}, {prop: "CleanEvents", name: "CleanEvents", pkg: "", typ: $funcType([], [], false)}, {prop: "StairsSlice", name: "StairsSlice", pkg: "", typ: $funcType([], [sliceType$5], false)}, {prop: "GenCollectables", name: "GenCollectables", pkg: "", typ: $funcType([], [], false)}, {prop: "SeenGoodWeapon", name: "SeenGoodWeapon", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "GenWeapon", name: "GenWeapon", pkg: "", typ: $funcType([], [], false)}, {prop: "GenEquip", name: "GenEquip", pkg: "", typ: $funcType([equipable, equipableData], [], false)}, {prop: "FrundisInLevel", name: "FrundisInLevel", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Descend", name: "Descend", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "WizardMode", name: "WizardMode", pkg: "", typ: $funcType([], [], false)}, {prop: "AutoPlayer", name: "AutoPlayer", pkg: "", typ: $funcType([event], [$Bool], false)}, {prop: "EventLoop", name: "EventLoop", pkg: "", typ: $funcType([], [], false)}, {prop: "UseConsumable", name: "UseConsumable", pkg: "", typ: $funcType([consumable], [], false)}, {prop: "QuaffTeleportation", name: "QuaffTeleportation", pkg: "", typ: $funcType([event], [$error], false)}, {prop: "QuaffBerserk", name: "QuaffBerserk", pkg: "", typ: $funcType([event], [$error], false)}, {prop: "QuaffHealWounds", name: "QuaffHealWounds", pkg: "", typ: $funcType([event], [$error], false)}, {prop: "QuaffMagic", name: "QuaffMagic", pkg: "", typ: $funcType([event], [$error], false)}, {prop: "QuaffDescent", name: "QuaffDescent", pkg: "", typ: $funcType([event], [$error], false)}, {prop: "QuaffSwiftness", name: "QuaffSwiftness", pkg: "", typ: $funcType([event], [$error], false)}, {prop: "QuaffDigPotion", name: "QuaffDigPotion", pkg: "", typ: $funcType([event], [$error], false)}, {prop: "QuaffLignification", name: "QuaffLignification", pkg: "", typ: $funcType([event], [$error], false)}, {prop: "QuaffMagicMapping", name: "QuaffMagicMapping", pkg: "", typ: $funcType([event], [$error], false)}, {prop: "QuaffWallPotion", name: "QuaffWallPotion", pkg: "", typ: $funcType([event], [$error], false)}, {prop: "QuaffCBlinkPotion", name: "QuaffCBlinkPotion", pkg: "", typ: $funcType([event], [$error], false)}, {prop: "ThrowConfusingDart", name: "ThrowConfusingDart", pkg: "", typ: $funcType([event], [$error], false)}, {prop: "ThrowExplosiveMagara", name: "ThrowExplosiveMagara", pkg: "", typ: $funcType([event], [$error], false)}, {prop: "DataDir", name: "DataDir", pkg: "", typ: $funcType([], [$String, $error], false)}, {prop: "Save", name: "Save", pkg: "", typ: $funcType([], [$error], false)}, {prop: "SaveConfig", name: "SaveConfig", pkg: "", typ: $funcType([], [$error], false)}, {prop: "RemoveSaveFile", name: "RemoveSaveFile", pkg: "", typ: $funcType([], [$error], false)}, {prop: "RemoveDataFile", name: "RemoveDataFile", pkg: "", typ: $funcType([$String], [$error], false)}, {prop: "Load", name: "Load", pkg: "", typ: $funcType([], [$Bool, $error], false)}, {prop: "WriteDump", name: "WriteDump", pkg: "", typ: $funcType([], [$error], false)}, {prop: "Print", name: "Print", pkg: "", typ: $funcType([$String], [], false)}, {prop: "PrintStyled", name: "PrintStyled", pkg: "", typ: $funcType([$String, logStyle], [], false)}, {prop: "Printf", name: "Printf", pkg: "", typ: $funcType([$String, sliceType$7], [], true)}, {prop: "PrintfStyled", name: "PrintfStyled", pkg: "", typ: $funcType([$String, logStyle, sliceType$7], [], true)}, {prop: "PrintEntry", name: "PrintEntry", pkg: "", typ: $funcType([logEntry], [], false)}, {prop: "StoryPrint", name: "StoryPrint", pkg: "", typ: $funcType([$String], [], false)}, {prop: "StoryPrintf", name: "StoryPrintf", pkg: "", typ: $funcType([$String, sliceType$7], [], true)}, {prop: "CrackSound", name: "CrackSound", pkg: "", typ: $funcType([], [$String], false)}, {prop: "ExplosionSound", name: "ExplosionSound", pkg: "", typ: $funcType([], [$String], false)}, {prop: "bestParent", name: "bestParent", pkg: "github.com/anaseto/boohu", typ: $funcType([rayMap, position, position], [position, $Int], false)}, {prop: "losCost", name: "losCost", pkg: "github.com/anaseto/boohu", typ: $funcType([position], [$Int], false)}, {prop: "buildRayMap", name: "buildRayMap", pkg: "github.com/anaseto/boohu", typ: $funcType([position, $Int], [rayMap], false)}, {prop: "LosRange", name: "LosRange", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "StopAuto", name: "StopAuto", pkg: "", typ: $funcType([], [], false)}, {prop: "ComputeLOS", name: "ComputeLOS", pkg: "", typ: $funcType([], [], false)}, {prop: "SeePosition", name: "SeePosition", pkg: "", typ: $funcType([position], [], false)}, {prop: "ComputeExclusion", name: "ComputeExclusion", pkg: "", typ: $funcType([position, $Bool], [], false)}, {prop: "Ray", name: "Ray", pkg: "", typ: $funcType([position], [sliceType$5], false)}, {prop: "ComputeRayHighlight", name: "ComputeRayHighlight", pkg: "", typ: $funcType([position], [], false)}, {prop: "ComputeNoise", name: "ComputeNoise", pkg: "", typ: $funcType([], [], false)}, {prop: "GenBand", name: "GenBand", pkg: "", typ: $funcType([monsterBandData, monsterBand], [sliceType$16], false)}, {prop: "MonsterAt", name: "MonsterAt", pkg: "", typ: $funcType([position], [ptrType$9, $Int], false)}, {prop: "Danger", name: "Danger", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "MaxDanger", name: "MaxDanger", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "MaxMonsters", name: "MaxMonsters", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "GenMonsters", name: "GenMonsters", pkg: "", typ: $funcType([], [], false)}, {prop: "MonsterInLOS", name: "MonsterInLOS", pkg: "", typ: $funcType([], [ptrType$9], false)}, {prop: "PlayerPath", name: "PlayerPath", pkg: "", typ: $funcType([position, position], [sliceType$5], false)}, {prop: "SortedNearestTo", name: "SortedNearestTo", pkg: "", typ: $funcType([sliceType$5, position], [sliceType$5], false)}, {prop: "AutoToDir", name: "AutoToDir", pkg: "", typ: $funcType([event], [$Bool], false)}, {prop: "GoToDir", name: "GoToDir", pkg: "", typ: $funcType([direction, event], [$error], false)}, {prop: "MoveToTarget", name: "MoveToTarget", pkg: "", typ: $funcType([event], [$Bool], false)}, {prop: "WaitTurn", name: "WaitTurn", pkg: "", typ: $funcType([event], [], false)}, {prop: "ExistsMonster", name: "ExistsMonster", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "ScummingAction", name: "ScummingAction", pkg: "", typ: $funcType([event], [], false)}, {prop: "FairAction", name: "FairAction", pkg: "", typ: $funcType([], [], false)}, {prop: "Rest", name: "Rest", pkg: "", typ: $funcType([event], [$error], false)}, {prop: "Equip", name: "Equip", pkg: "", typ: $funcType([event], [$error], false)}, {prop: "Teleportation", name: "Teleportation", pkg: "", typ: $funcType([event], [], false)}, {prop: "CollectGround", name: "CollectGround", pkg: "", typ: $funcType([], [], false)}, {prop: "MovePlayer", name: "MovePlayer", pkg: "", typ: $funcType([position, event], [$error], false)}, {prop: "HealPlayer", name: "HealPlayer", pkg: "", typ: $funcType([event], [], false)}, {prop: "MPRegen", name: "MPRegen", pkg: "", typ: $funcType([event], [], false)}, {prop: "Smoke", name: "Smoke", pkg: "", typ: $funcType([event], [], false)}, {prop: "Corrosion", name: "Corrosion", pkg: "", typ: $funcType([event], [], false)}, {prop: "Confusion", name: "Confusion", pkg: "", typ: $funcType([event], [], false)}, {prop: "EvokeRodBlink", name: "EvokeRodBlink", pkg: "", typ: $funcType([event], [$error], false)}, {prop: "Blink", name: "Blink", pkg: "", typ: $funcType([event], [], false)}, {prop: "EvokeRodTeleportOther", name: "EvokeRodTeleportOther", pkg: "", typ: $funcType([event], [$error], false)}, {prop: "EvokeRodLightningBolt", name: "EvokeRodLightningBolt", pkg: "", typ: $funcType([event], [$error], false)}, {prop: "EvokeRodFireball", name: "EvokeRodFireball", pkg: "", typ: $funcType([event], [$error], false)}, {prop: "EvokeRodFog", name: "EvokeRodFog", pkg: "", typ: $funcType([event], [$error], false)}, {prop: "Fog", name: "Fog", pkg: "", typ: $funcType([position, $Int, event], [], false)}, {prop: "EvokeRodDigging", name: "EvokeRodDigging", pkg: "", typ: $funcType([event], [$error], false)}, {prop: "EvokeRodShatter", name: "EvokeRodShatter", pkg: "", typ: $funcType([event], [$error], false)}, {prop: "EvokeRodObstruction", name: "EvokeRodObstruction", pkg: "", typ: $funcType([event], [$error], false)}, {prop: "EvokeRodSwapping", name: "EvokeRodSwapping", pkg: "", typ: $funcType([event], [$error], false)}, {prop: "GeneratedRodsCount", name: "GeneratedRodsCount", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "GenerateRod", name: "GenerateRod", pkg: "", typ: $funcType([], [], false)}, {prop: "ComputePathHighlight", name: "ComputePathHighlight", pkg: "", typ: $funcType([position], [], false)}];
	potion.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Plural", name: "Plural", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Desc", name: "Desc", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Letter", name: "Letter", pkg: "", typ: $funcType([], [$Int32], false)}, {prop: "Int", name: "Int", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Use", name: "Use", pkg: "", typ: $funcType([ptrType$3, event], [$error], false)}];
	projectile.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Plural", name: "Plural", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Desc", name: "Desc", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Letter", name: "Letter", pkg: "", typ: $funcType([], [$Int32], false)}, {prop: "Int", name: "Int", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Use", name: "Use", pkg: "", typ: $funcType([ptrType$3, event], [$error], false)}];
	armour.methods = [{prop: "Equip", name: "Equip", pkg: "", typ: $funcType([ptrType$3], [], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Desc", name: "Desc", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Letter", name: "Letter", pkg: "", typ: $funcType([], [$Int32], false)}];
	weapon.methods = [{prop: "Equip", name: "Equip", pkg: "", typ: $funcType([ptrType$3], [], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Desc", name: "Desc", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Attack", name: "Attack", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "TwoHanded", name: "TwoHanded", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Letter", name: "Letter", pkg: "", typ: $funcType([], [$Int32], false)}, {prop: "Cleave", name: "Cleave", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Pierce", name: "Pierce", pkg: "", typ: $funcType([], [$Bool], false)}];
	shield.methods = [{prop: "Equip", name: "Equip", pkg: "", typ: $funcType([ptrType$3], [], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Desc", name: "Desc", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Letter", name: "Letter", pkg: "", typ: $funcType([], [$Int32], false)}, {prop: "Block", name: "Block", pkg: "", typ: $funcType([], [$Int], false)}];
	equipableData.methods = [{prop: "FavorableRoll", name: "FavorableRoll", pkg: "", typ: $funcType([$Int], [$Int], false)}];
	ptrType$19.methods = [{prop: "DrawWelcome", name: "DrawWelcome", pkg: "", typ: $funcType([], [], false)}, {prop: "DrawColored", name: "DrawColored", pkg: "", typ: $funcType([$String, $Int, $Int, uicolor, uicolor], [], false)}, {prop: "DrawDark", name: "DrawDark", pkg: "", typ: $funcType([$String, $Int, $Int, uicolor], [], false)}, {prop: "DrawLight", name: "DrawLight", pkg: "", typ: $funcType([$String, $Int, $Int, uicolor], [], false)}, {prop: "DrawLightAlt", name: "DrawLightAlt", pkg: "", typ: $funcType([$String, $Int, $Int, uicolor], [], false)}, {prop: "EnterWizard", name: "EnterWizard", pkg: "", typ: $funcType([ptrType$3], [], false)}, {prop: "CleanError", name: "CleanError", pkg: "", typ: $funcType([$error], [$error], false)}, {prop: "HandleKeyAction", name: "HandleKeyAction", pkg: "", typ: $funcType([ptrType$3, runeKeyAction], [$error, $Bool, $Bool], false)}, {prop: "HandleKey", name: "HandleKey", pkg: "", typ: $funcType([ptrType$3, runeKeyAction], [$error, $Bool, $Bool], false)}, {prop: "GoToPos", name: "GoToPos", pkg: "", typ: $funcType([ptrType$3, event, position], [$error, $Bool], false)}, {prop: "ExaminePos", name: "ExaminePos", pkg: "", typ: $funcType([ptrType$3, event, position], [$error, $Bool, $Bool], false)}, {prop: "DrawKeysDescription", name: "DrawKeysDescription", pkg: "", typ: $funcType([ptrType$3, $String, sliceType$3], [], false)}, {prop: "KeysHelp", name: "KeysHelp", pkg: "", typ: $funcType([ptrType$3], [], false)}, {prop: "ExamineHelp", name: "ExamineHelp", pkg: "", typ: $funcType([ptrType$3], [], false)}, {prop: "Equip", name: "Equip", pkg: "", typ: $funcType([ptrType$3, event], [$error], false)}, {prop: "CharacterInfo", name: "CharacterInfo", pkg: "", typ: $funcType([ptrType$3], [], false)}, {prop: "WizardInfo", name: "WizardInfo", pkg: "", typ: $funcType([ptrType$3], [], false)}, {prop: "AptitudesText", name: "AptitudesText", pkg: "", typ: $funcType([ptrType$3], [$String], false)}, {prop: "DescribePosition", name: "DescribePosition", pkg: "", typ: $funcType([ptrType$3, position, Targeter], [], false)}, {prop: "Examine", name: "Examine", pkg: "", typ: $funcType([ptrType$3, ptrType$1], [$error, $Bool, $Bool], false)}, {prop: "ChooseTarget", name: "ChooseTarget", pkg: "", typ: $funcType([ptrType$3, Targeter], [$error], false)}, {prop: "NextMonster", name: "NextMonster", pkg: "", typ: $funcType([ptrType$3, $Int32, position, ptrType$18], [], false)}, {prop: "NextStair", name: "NextStair", pkg: "", typ: $funcType([ptrType$3, ptrType$18], [], false)}, {prop: "NextObject", name: "NextObject", pkg: "", typ: $funcType([ptrType$3, position, ptrType$18], [], false)}, {prop: "ExcludeZone", name: "ExcludeZone", pkg: "", typ: $funcType([ptrType$3, position], [], false)}, {prop: "CursorMouseLeft", name: "CursorMouseLeft", pkg: "", typ: $funcType([ptrType$3, Targeter, position, ptrType$18], [$Bool, $Bool], false)}, {prop: "CursorKeyAction", name: "CursorKeyAction", pkg: "", typ: $funcType([ptrType$3, Targeter, runeKeyAction, ptrType$18], [$error, $Bool, $Bool, $Bool], false)}, {prop: "CursorAction", name: "CursorAction", pkg: "", typ: $funcType([ptrType$3, Targeter, ptrType$1], [$error, $Bool, $Bool], false)}, {prop: "ViewPositionDescription", name: "ViewPositionDescription", pkg: "", typ: $funcType([ptrType$3, position], [], false)}, {prop: "MonsterInfo", name: "MonsterInfo", pkg: "", typ: $funcType([ptrType$9], [$String], false)}, {prop: "InView", name: "InView", pkg: "", typ: $funcType([ptrType$3, position, $Bool], [$Bool], false)}, {prop: "CameraOffset", name: "CameraOffset", pkg: "", typ: $funcType([ptrType$3, position, $Bool], [$Int, $Int], false)}, {prop: "InViewBorder", name: "InViewBorder", pkg: "", typ: $funcType([ptrType$3, position, $Bool], [$Bool], false)}, {prop: "DrawAtPosition", name: "DrawAtPosition", pkg: "", typ: $funcType([ptrType$3, position, $Bool, $Int32, uicolor, uicolor], [], false)}, {prop: "DrawDungeonView", name: "DrawDungeonView", pkg: "", typ: $funcType([ptrType$3, uiMode], [], false)}, {prop: "SwappingAnimation", name: "SwappingAnimation", pkg: "", typ: $funcType([ptrType$3, position, position], [], false)}, {prop: "TeleportAnimation", name: "TeleportAnimation", pkg: "", typ: $funcType([ptrType$3, position, position, $Bool], [], false)}, {prop: "ProjectileTrajectoryAnimation", name: "ProjectileTrajectoryAnimation", pkg: "", typ: $funcType([ptrType$3, sliceType$5, uicolor], [], false)}, {prop: "ExplosionAnimation", name: "ExplosionAnimation", pkg: "", typ: $funcType([ptrType$3, explosionStyle, position], [], false)}, {prop: "WallExplosionAnimation", name: "WallExplosionAnimation", pkg: "", typ: $funcType([ptrType$3, position], [], false)}, {prop: "LightningBoltAnimation", name: "LightningBoltAnimation", pkg: "", typ: $funcType([ptrType$3, sliceType$5], [], false)}, {prop: "ProjectileSymbol", name: "ProjectileSymbol", pkg: "", typ: $funcType([direction], [$Int32], false)}, {prop: "ThrowAnimation", name: "ThrowAnimation", pkg: "", typ: $funcType([ptrType$3, sliceType$5, $Bool], [], false)}, {prop: "HitAnimation", name: "HitAnimation", pkg: "", typ: $funcType([ptrType$3, position, $Bool], [], false)}, {prop: "PositionDrawing", name: "PositionDrawing", pkg: "", typ: $funcType([ptrType$3, position], [$Int32, uicolor, uicolor], false)}, {prop: "DrawStatusBar", name: "DrawStatusBar", pkg: "", typ: $funcType([ptrType$3, $Int], [], false)}, {prop: "LogColor", name: "LogColor", pkg: "", typ: $funcType([logEntry], [uicolor], false)}, {prop: "DrawLog", name: "DrawLog", pkg: "", typ: $funcType([ptrType$3], [], false)}, {prop: "RunesForKeyAction", name: "RunesForKeyAction", pkg: "", typ: $funcType([keyAction], [$String], false)}, {prop: "Configure", name: "Configure", pkg: "", typ: $funcType([ptrType$3], [], false)}, {prop: "DrawPreviousLogs", name: "DrawPreviousLogs", pkg: "", typ: $funcType([ptrType$3], [], false)}, {prop: "DrawMonsterDescription", name: "DrawMonsterDescription", pkg: "", typ: $funcType([ptrType$3, ptrType$9], [], false)}, {prop: "DrawConsumableDescription", name: "DrawConsumableDescription", pkg: "", typ: $funcType([ptrType$3, consumable], [], false)}, {prop: "DrawDescription", name: "DrawDescription", pkg: "", typ: $funcType([ptrType$3, $String], [], false)}, {prop: "DrawText", name: "DrawText", pkg: "", typ: $funcType([$String, $Int, $Int], [], false)}, {prop: "DrawColoredText", name: "DrawColoredText", pkg: "", typ: $funcType([$String, $Int, $Int, uicolor], [], false)}, {prop: "DrawColoredTextOnBG", name: "DrawColoredTextOnBG", pkg: "", typ: $funcType([$String, $Int, $Int, uicolor, uicolor], [], false)}, {prop: "DrawLine", name: "DrawLine", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "DrawTextLine", name: "DrawTextLine", pkg: "", typ: $funcType([$String, $Int], [], false)}, {prop: "DrawInfoLine", name: "DrawInfoLine", pkg: "", typ: $funcType([$String], [], false)}, {prop: "DrawStyledTextLine", name: "DrawStyledTextLine", pkg: "", typ: $funcType([$String, $Int, linestyle], [], false)}, {prop: "ClearLine", name: "ClearLine", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "ClearLineWithColor", name: "ClearLineWithColor", pkg: "", typ: $funcType([$Int, uicolor], [], false)}, {prop: "ListItemBG", name: "ListItemBG", pkg: "", typ: $funcType([$Int], [uicolor], false)}, {prop: "ConsumableItem", name: "ConsumableItem", pkg: "", typ: $funcType([ptrType$3, $Int, $Int, consumable, uicolor], [], false)}, {prop: "SelectProjectile", name: "SelectProjectile", pkg: "", typ: $funcType([ptrType$3, event], [$error], false)}, {prop: "SelectPotion", name: "SelectPotion", pkg: "", typ: $funcType([ptrType$3, event], [$error], false)}, {prop: "RodItem", name: "RodItem", pkg: "", typ: $funcType([ptrType$3, $Int, $Int, rod, uicolor], [], false)}, {prop: "SelectRod", name: "SelectRod", pkg: "", typ: $funcType([ptrType$3, event], [$error], false)}, {prop: "ActionItem", name: "ActionItem", pkg: "", typ: $funcType([ptrType$3, $Int, $Int, keyAction, uicolor], [], false)}, {prop: "SelectAction", name: "SelectAction", pkg: "", typ: $funcType([ptrType$3, sliceType$1, event], [keyAction, $error], false)}, {prop: "Death", name: "Death", pkg: "", typ: $funcType([ptrType$3], [], false)}, {prop: "Win", name: "Win", pkg: "", typ: $funcType([ptrType$3], [], false)}, {prop: "Dump", name: "Dump", pkg: "", typ: $funcType([ptrType$3, $error], [], false)}, {prop: "CriticalHPWarning", name: "CriticalHPWarning", pkg: "", typ: $funcType([ptrType$3], [], false)}, {prop: "WoundedAnimation", name: "WoundedAnimation", pkg: "", typ: $funcType([ptrType$3], [], false)}, {prop: "DrinkingPotionAnimation", name: "DrinkingPotionAnimation", pkg: "", typ: $funcType([ptrType$3], [], false)}, {prop: "MagicMappingAnimation", name: "MagicMappingAnimation", pkg: "", typ: $funcType([ptrType$3, sliceType$6], [], false)}, {prop: "Quit", name: "Quit", pkg: "", typ: $funcType([ptrType$3], [$Bool], false)}, {prop: "Wizard", name: "Wizard", pkg: "", typ: $funcType([ptrType$3], [$Bool], false)}, {prop: "HandlePlayerTurn", name: "HandlePlayerTurn", pkg: "", typ: $funcType([ptrType$3, event], [$Bool], false)}, {prop: "ExploreStep", name: "ExploreStep", pkg: "", typ: $funcType([ptrType$3], [$Bool], false)}, {prop: "Init", name: "Init", pkg: "", typ: $funcType([], [$error], false)}, {prop: "GetIndex", name: "GetIndex", pkg: "", typ: $funcType([$Int, $Int], [$Int], false)}, {prop: "GetPos", name: "GetPos", pkg: "", typ: $funcType([$Int], [$Int, $Int], false)}, {prop: "ResetCells", name: "ResetCells", pkg: "", typ: $funcType([], [], false)}, {prop: "Interrupt", name: "Interrupt", pkg: "", typ: $funcType([], [], false)}, {prop: "Close", name: "Close", pkg: "", typ: $funcType([], [], false)}, {prop: "PostInit", name: "PostInit", pkg: "", typ: $funcType([], [], false)}, {prop: "Clear", name: "Clear", pkg: "", typ: $funcType([], [], false)}, {prop: "Flush", name: "Flush", pkg: "", typ: $funcType([], [], false)}, {prop: "HideCursor", name: "HideCursor", pkg: "", typ: $funcType([], [], false)}, {prop: "SetCursor", name: "SetCursor", pkg: "", typ: $funcType([position], [], false)}, {prop: "SetCell", name: "SetCell", pkg: "", typ: $funcType([$Int, $Int, $Int32, uicolor, uicolor], [], false)}, {prop: "ReadKey", name: "ReadKey", pkg: "", typ: $funcType([$String], [$Int32], false)}, {prop: "PollEvent", name: "PollEvent", pkg: "", typ: $funcType([], [jsInput], false)}, {prop: "WaitForContinue", name: "WaitForContinue", pkg: "", typ: $funcType([ptrType$3, $Int], [], false)}, {prop: "PromptConfirmation", name: "PromptConfirmation", pkg: "", typ: $funcType([ptrType$3], [$Bool], false)}, {prop: "PressAnyKey", name: "PressAnyKey", pkg: "", typ: $funcType([], [$error], false)}, {prop: "PlayerTurnEvent", name: "PlayerTurnEvent", pkg: "", typ: $funcType([ptrType$3, event], [$error, $Bool, $Bool], false)}, {prop: "Scroll", name: "Scroll", pkg: "", typ: $funcType([$Int], [$Int, $Bool], false)}, {prop: "ReadRuneKey", name: "ReadRuneKey", pkg: "", typ: $funcType([], [$Int32], false)}, {prop: "MenuAction", name: "MenuAction", pkg: "", typ: $funcType([$Int], [$Int, configAction], false)}, {prop: "TargetModeEvent", name: "TargetModeEvent", pkg: "", typ: $funcType([ptrType$3, Targeter, ptrType$18], [$error, $Bool, $Bool, $Bool], false)}, {prop: "Select", name: "Select", pkg: "", typ: $funcType([ptrType$3, event, $Int], [$Int, $Bool, $error], false)}, {prop: "InitElements", name: "InitElements", pkg: "", typ: $funcType([], [$error], false)}, {prop: "Draw", name: "Draw", pkg: "", typ: $funcType([UICell, $Int, $Int], [], false)}, {prop: "GetMousePos", name: "GetMousePos", pkg: "", typ: $funcType([ptrType$15], [$Int, $Int], false)}];
	logEntry.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	rayMap.methods = [{prop: "get", name: "get", pkg: "github.com/anaseto/boohu", typ: $funcType([position], [ptrType$16], false)}];
	monsterState.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	monsterStatus.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	monsterKind.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "MovementDelay", name: "MovementDelay", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Letter", name: "Letter", pkg: "", typ: $funcType([], [$Int32], false)}, {prop: "AttackDelay", name: "AttackDelay", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "BaseAttack", name: "BaseAttack", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "MaxHP", name: "MaxHP", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Dangerousness", name: "Dangerousness", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Ranged", name: "Ranged", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Smiting", name: "Smiting", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Desc", name: "Desc", pkg: "", typ: $funcType([], [$String], false)}, {prop: "SeenStoryText", name: "SeenStoryText", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Indefinite", name: "Indefinite", pkg: "", typ: $funcType([$Bool], [$String], false)}, {prop: "Definite", name: "Definite", pkg: "", typ: $funcType([$Bool], [$String], false)}];
	ptrType$9.methods = [{prop: "InflictDamage", name: "InflictDamage", pkg: "", typ: $funcType([ptrType$3, $Int, $Int], [], false)}, {prop: "Init", name: "Init", pkg: "", typ: $funcType([], [], false)}, {prop: "Status", name: "Status", pkg: "", typ: $funcType([monsterStatus], [$Bool], false)}, {prop: "Exists", name: "Exists", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "AlternatePlacement", name: "AlternatePlacement", pkg: "", typ: $funcType([ptrType$3], [ptrType$1], false)}, {prop: "TeleportPlayer", name: "TeleportPlayer", pkg: "", typ: $funcType([ptrType$3, event], [], false)}, {prop: "TeleportAway", name: "TeleportAway", pkg: "", typ: $funcType([ptrType$3], [], false)}, {prop: "TeleportMonsterAway", name: "TeleportMonsterAway", pkg: "", typ: $funcType([ptrType$3], [$Bool], false)}, {prop: "AttackAction", name: "AttackAction", pkg: "", typ: $funcType([ptrType$3, event], [], false)}, {prop: "HandleTurn", name: "HandleTurn", pkg: "", typ: $funcType([ptrType$3, event], [], false)}, {prop: "DramaticAdjustment", name: "DramaticAdjustment", pkg: "", typ: $funcType([ptrType$3, $Int, $Int, $Int], [$Int, $Int], false)}, {prop: "HitPlayer", name: "HitPlayer", pkg: "", typ: $funcType([ptrType$3, event], [], false)}, {prop: "EnterConfusion", name: "EnterConfusion", pkg: "", typ: $funcType([ptrType$3, event], [], false)}, {prop: "HitSideEffects", name: "HitSideEffects", pkg: "", typ: $funcType([ptrType$3, event], [], false)}, {prop: "RangedAttack", name: "RangedAttack", pkg: "", typ: $funcType([ptrType$3, event], [$Bool], false)}, {prop: "RangeBlocked", name: "RangeBlocked", pkg: "", typ: $funcType([ptrType$3], [$Bool], false)}, {prop: "Index", name: "Index", pkg: "", typ: $funcType([ptrType$3], [$Int], false)}, {prop: "TormentBolt", name: "TormentBolt", pkg: "", typ: $funcType([ptrType$3, event], [$Bool], false)}, {prop: "Blocked", name: "Blocked", pkg: "", typ: $funcType([ptrType$3], [$Bool], false)}, {prop: "ThrowRock", name: "ThrowRock", pkg: "", typ: $funcType([ptrType$3, event], [$Bool], false)}, {prop: "ThrowJavelin", name: "ThrowJavelin", pkg: "", typ: $funcType([ptrType$3, event], [$Bool], false)}, {prop: "ThrowAcid", name: "ThrowAcid", pkg: "", typ: $funcType([ptrType$3, event], [$Bool], false)}, {prop: "SmitingAttack", name: "SmitingAttack", pkg: "", typ: $funcType([ptrType$3, event], [$Bool], false)}, {prop: "AbsorbMana", name: "AbsorbMana", pkg: "", typ: $funcType([ptrType$3, event], [$Bool], false)}, {prop: "Explode", name: "Explode", pkg: "", typ: $funcType([ptrType$3, event], [], false)}, {prop: "MakeHunt", name: "MakeHunt", pkg: "", typ: $funcType([ptrType$3], [], false)}, {prop: "MakeHuntIfHurt", name: "MakeHuntIfHurt", pkg: "", typ: $funcType([ptrType$3], [], false)}, {prop: "MakeAwareIfHurt", name: "MakeAwareIfHurt", pkg: "", typ: $funcType([ptrType$3], [], false)}, {prop: "MakeAware", name: "MakeAware", pkg: "", typ: $funcType([ptrType$3], [], false)}, {prop: "Heal", name: "Heal", pkg: "", typ: $funcType([ptrType$3, event], [], false)}, {prop: "GatherBand", name: "GatherBand", pkg: "", typ: $funcType([ptrType$3], [], false)}, {prop: "APath", name: "APath", pkg: "", typ: $funcType([ptrType$3, position, position], [sliceType$5], false)}];
	ptrType$20.methods = [{prop: "Neighbors", name: "Neighbors", pkg: "", typ: $funcType([position], [sliceType$5], false)}, {prop: "Cost", name: "Cost", pkg: "", typ: $funcType([position, position], [$Int], false)}, {prop: "Estimation", name: "Estimation", pkg: "", typ: $funcType([position, position], [$Int], false)}];
	ptrType$21.methods = [{prop: "Neighbors", name: "Neighbors", pkg: "", typ: $funcType([position], [sliceType$5], false)}, {prop: "Cost", name: "Cost", pkg: "", typ: $funcType([position, position], [$Int], false)}, {prop: "Estimation", name: "Estimation", pkg: "", typ: $funcType([position, position], [$Int], false)}];
	ptrType$22.methods = [{prop: "Neighbors", name: "Neighbors", pkg: "", typ: $funcType([position], [sliceType$5], false)}, {prop: "Cost", name: "Cost", pkg: "", typ: $funcType([position, position], [$Int], false)}];
	ptrType$23.methods = [{prop: "Neighbors", name: "Neighbors", pkg: "", typ: $funcType([position], [sliceType$5], false)}, {prop: "Cost", name: "Cost", pkg: "", typ: $funcType([position, position], [$Int], false)}];
	ptrType$24.methods = [{prop: "Neighbors", name: "Neighbors", pkg: "", typ: $funcType([position], [sliceType$5], false)}, {prop: "Cost", name: "Cost", pkg: "", typ: $funcType([position, position], [$Int], false)}];
	ptrType$25.methods = [{prop: "Neighbors", name: "Neighbors", pkg: "", typ: $funcType([position], [sliceType$5], false)}, {prop: "Cost", name: "Cost", pkg: "", typ: $funcType([position, position], [$Int], false)}, {prop: "Estimation", name: "Estimation", pkg: "", typ: $funcType([position, position], [$Int], false)}];
	posSlice.methods = [{prop: "Len", name: "Len", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Swap", name: "Swap", pkg: "", typ: $funcType([$Int, $Int], [], false)}, {prop: "Less", name: "Less", pkg: "", typ: $funcType([$Int, $Int], [$Bool], false)}];
	ptrType$8.methods = [{prop: "HPMax", name: "HPMax", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "MPMax", name: "MPMax", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Accuracy", name: "Accuracy", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "RangedAccuracy", name: "RangedAccuracy", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Armor", name: "Armor", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Attack", name: "Attack", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Block", name: "Block", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Evasion", name: "Evasion", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "HasStatus", name: "HasStatus", pkg: "", typ: $funcType([status], [$Bool], false)}, {prop: "AptitudeCount", name: "AptitudeCount", pkg: "", typ: $funcType([], [$Int], false)}];
	position.methods = [{prop: "Neighbors", name: "Neighbors", pkg: "", typ: $funcType([sliceType$5, funcType$1], [sliceType$5], false)}, {prop: "CardinalNeighbors", name: "CardinalNeighbors", pkg: "", typ: $funcType([sliceType$5, funcType$1], [sliceType$5], false)}, {prop: "OutsideNeighbors", name: "OutsideNeighbors", pkg: "", typ: $funcType([], [sliceType$5], false)}, {prop: "ValidNeighbors", name: "ValidNeighbors", pkg: "", typ: $funcType([], [sliceType$5], false)}, {prop: "E", name: "E", pkg: "", typ: $funcType([], [position], false)}, {prop: "SE", name: "SE", pkg: "", typ: $funcType([], [position], false)}, {prop: "NE", name: "NE", pkg: "", typ: $funcType([], [position], false)}, {prop: "N", name: "N", pkg: "", typ: $funcType([], [position], false)}, {prop: "S", name: "S", pkg: "", typ: $funcType([], [position], false)}, {prop: "W", name: "W", pkg: "", typ: $funcType([], [position], false)}, {prop: "SW", name: "SW", pkg: "", typ: $funcType([], [position], false)}, {prop: "NW", name: "NW", pkg: "", typ: $funcType([], [position], false)}, {prop: "Distance", name: "Distance", pkg: "", typ: $funcType([position], [$Int], false)}, {prop: "DistanceX", name: "DistanceX", pkg: "", typ: $funcType([position], [$Int], false)}, {prop: "DistanceY", name: "DistanceY", pkg: "", typ: $funcType([position], [$Int], false)}, {prop: "To", name: "To", pkg: "", typ: $funcType([direction], [position], false)}, {prop: "Dir", name: "Dir", pkg: "", typ: $funcType([position], [direction], false)}, {prop: "Parents", name: "Parents", pkg: "", typ: $funcType([position], [sliceType$5], false)}, {prop: "RandomNeighbor", name: "RandomNeighbor", pkg: "", typ: $funcType([$Bool], [position], false)}, {prop: "RandomNeighborDiagonals", name: "RandomNeighborDiagonals", pkg: "", typ: $funcType([], [position], false)}, {prop: "RandomNeighborCardinal", name: "RandomNeighborCardinal", pkg: "", typ: $funcType([], [position], false)}, {prop: "idx", name: "idx", pkg: "github.com/anaseto/boohu", typ: $funcType([], [$Int], false)}, {prop: "valid", name: "valid", pkg: "github.com/anaseto/boohu", typ: $funcType([], [$Bool], false)}];
	rod.methods = [{prop: "Letter", name: "Letter", pkg: "", typ: $funcType([], [$Int32], false)}, {prop: "Rare", name: "Rare", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Desc", name: "Desc", pkg: "", typ: $funcType([], [$String], false)}, {prop: "MaxCharge", name: "MaxCharge", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Rate", name: "Rate", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "MPCost", name: "MPCost", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Use", name: "Use", pkg: "", typ: $funcType([ptrType$3, event], [$error], false)}];
	status.methods = [{prop: "Good", name: "Good", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Bad", name: "Bad", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$5.methods = [{prop: "ComputeHighlight", name: "ComputeHighlight", pkg: "", typ: $funcType([ptrType$3, position], [], false)}, {prop: "Action", name: "Action", pkg: "", typ: $funcType([ptrType$3, position], [$error], false)}, {prop: "Reachable", name: "Reachable", pkg: "", typ: $funcType([ptrType$3, position], [$Bool], false)}, {prop: "Done", name: "Done", pkg: "", typ: $funcType([], [$Bool], false)}];
	ptrType$26.methods = [{prop: "ComputeHighlight", name: "ComputeHighlight", pkg: "", typ: $funcType([ptrType$3, position], [], false)}, {prop: "Reachable", name: "Reachable", pkg: "", typ: $funcType([ptrType$3, position], [$Bool], false)}, {prop: "Action", name: "Action", pkg: "", typ: $funcType([ptrType$3, position], [$error], false)}, {prop: "Done", name: "Done", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "freeWay", name: "freeWay", pkg: "github.com/anaseto/boohu", typ: $funcType([ptrType$3, position], [$Bool], false)}, {prop: "flammableInWay", name: "flammableInWay", pkg: "github.com/anaseto/boohu", typ: $funcType([ptrType$3, position], [$Bool], false)}];
	ptrType$27.methods = [{prop: "ComputeHighlight", name: "ComputeHighlight", pkg: "", typ: $funcType([ptrType$3, position], [], false)}, {prop: "Reachable", name: "Reachable", pkg: "", typ: $funcType([ptrType$3, position], [$Bool], false)}, {prop: "Action", name: "Action", pkg: "", typ: $funcType([ptrType$3, position], [$error], false)}, {prop: "Done", name: "Done", pkg: "", typ: $funcType([], [$Bool], false)}];
	node.init("", [{prop: "Pos", name: "Pos", anonymous: false, exported: true, typ: position, tag: ""}, {prop: "Cost", name: "Cost", anonymous: false, exported: true, typ: $Int, tag: ""}, {prop: "Rank", name: "Rank", anonymous: false, exported: true, typ: $Int, tag: ""}, {prop: "Parent", name: "Parent", anonymous: false, exported: true, typ: ptrType$1, tag: ""}, {prop: "Open", name: "Open", anonymous: false, exported: true, typ: $Bool, tag: ""}, {prop: "Closed", name: "Closed", anonymous: false, exported: true, typ: $Bool, tag: ""}, {prop: "Index", name: "Index", anonymous: false, exported: true, typ: $Int, tag: ""}, {prop: "Num", name: "Num", anonymous: false, exported: true, typ: $Int, tag: ""}]);
	nodeMap.init(position, ptrType);
	priorityQueue.init(ptrType);
	Dijkstrer.init([{prop: "Cost", name: "Cost", pkg: "", typ: $funcType([position, position], [$Int], false)}, {prop: "Neighbors", name: "Neighbors", pkg: "", typ: $funcType([position], [sliceType$5], false)}]);
	runeKeyAction.init("github.com/anaseto/boohu", [{prop: "r", name: "r", anonymous: false, exported: false, typ: $Int32, tag: ""}, {prop: "k", name: "k", anonymous: false, exported: false, typ: keyAction, tag: ""}]);
	examineData.init("github.com/anaseto/boohu", [{prop: "npos", name: "npos", anonymous: false, exported: false, typ: position, tag: ""}, {prop: "nmonster", name: "nmonster", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "objects", name: "objects", anonymous: false, exported: false, typ: sliceType$5, tag: ""}, {prop: "nobject", name: "nobject", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "sortedStairs", name: "sortedStairs", anonymous: false, exported: false, typ: sliceType$5, tag: ""}, {prop: "stairIndex", name: "stairIndex", anonymous: false, exported: false, typ: $Int, tag: ""}]);
	rodSlice.init(rod);
	consumableSlice.init(consumable);
	statusSlice.init(status);
	monsSlice.init(monsterKind);
	dungeon.init("", [{prop: "Cells", name: "Cells", anonymous: false, exported: true, typ: sliceType$10, tag: ""}]);
	cell.init("", [{prop: "T", name: "T", anonymous: false, exported: true, typ: terrain, tag: ""}, {prop: "Explored", name: "Explored", anonymous: false, exported: true, typ: $Bool, tag: ""}]);
	room.init("github.com/anaseto/boohu", [{prop: "pos", name: "pos", anonymous: false, exported: false, typ: position, tag: ""}, {prop: "w", name: "w", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "h", name: "h", anonymous: false, exported: false, typ: $Int, tag: ""}]);
	roomSlice.init(room);
	config.init("", [{prop: "RuneNormalModeKeys", name: "RuneNormalModeKeys", anonymous: false, exported: true, typ: mapType$1, tag: ""}, {prop: "RuneTargetModeKeys", name: "RuneTargetModeKeys", anonymous: false, exported: true, typ: mapType$1, tag: ""}]);
	event.init([{prop: "Action", name: "Action", pkg: "", typ: $funcType([ptrType$3], [], false)}, {prop: "Rank", name: "Rank", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Renew", name: "Renew", pkg: "", typ: $funcType([ptrType$3, $Int], [], false)}]);
	iEvent.init("", [{prop: "Event", name: "Event", anonymous: false, exported: true, typ: event, tag: ""}, {prop: "Index", name: "Index", anonymous: false, exported: true, typ: $Int, tag: ""}]);
	eventQueue.init(iEvent);
	simpleEvent.init("", [{prop: "ERank", name: "ERank", anonymous: false, exported: true, typ: $Int, tag: ""}, {prop: "EAction", name: "EAction", anonymous: false, exported: true, typ: simpleAction, tag: ""}]);
	monsterEvent.init("", [{prop: "ERank", name: "ERank", anonymous: false, exported: true, typ: $Int, tag: ""}, {prop: "NMons", name: "NMons", anonymous: false, exported: true, typ: $Int, tag: ""}, {prop: "EAction", name: "EAction", anonymous: false, exported: true, typ: monsterAction, tag: ""}]);
	cloudEvent.init("", [{prop: "ERank", name: "ERank", anonymous: false, exported: true, typ: $Int, tag: ""}, {prop: "Pos", name: "Pos", anonymous: false, exported: true, typ: position, tag: ""}, {prop: "EAction", name: "EAction", anonymous: false, exported: true, typ: cloudAction, tag: ""}]);
	game.init("github.com/anaseto/boohu", [{prop: "Dungeon", name: "Dungeon", anonymous: false, exported: true, typ: ptrType$7, tag: ""}, {prop: "Player", name: "Player", anonymous: false, exported: true, typ: ptrType$8, tag: ""}, {prop: "Monsters", name: "Monsters", anonymous: false, exported: true, typ: sliceType$12, tag: ""}, {prop: "Bands", name: "Bands", anonymous: false, exported: true, typ: sliceType$13, tag: ""}, {prop: "Events", name: "Events", anonymous: false, exported: true, typ: ptrType$10, tag: ""}, {prop: "Ev", name: "Ev", anonymous: false, exported: true, typ: event, tag: ""}, {prop: "Highlight", name: "Highlight", anonymous: false, exported: true, typ: mapType, tag: ""}, {prop: "Collectables", name: "Collectables", anonymous: false, exported: true, typ: mapType$3, tag: ""}, {prop: "CollectableScore", name: "CollectableScore", anonymous: false, exported: true, typ: $Int, tag: ""}, {prop: "Equipables", name: "Equipables", anonymous: false, exported: true, typ: mapType$4, tag: ""}, {prop: "Rods", name: "Rods", anonymous: false, exported: true, typ: mapType$5, tag: ""}, {prop: "Stairs", name: "Stairs", anonymous: false, exported: true, typ: mapType, tag: ""}, {prop: "Clouds", name: "Clouds", anonymous: false, exported: true, typ: mapType$6, tag: ""}, {prop: "Fungus", name: "Fungus", anonymous: false, exported: true, typ: mapType$2, tag: ""}, {prop: "Doors", name: "Doors", anonymous: false, exported: true, typ: mapType, tag: ""}, {prop: "TemporalWalls", name: "TemporalWalls", anonymous: false, exported: true, typ: mapType, tag: ""}, {prop: "GeneratedBands", name: "GeneratedBands", anonymous: false, exported: true, typ: mapType$7, tag: ""}, {prop: "GeneratedEquipables", name: "GeneratedEquipables", anonymous: false, exported: true, typ: mapType$8, tag: ""}, {prop: "GeneratedRods", name: "GeneratedRods", anonymous: false, exported: true, typ: mapType$9, tag: ""}, {prop: "FoundEquipables", name: "FoundEquipables", anonymous: false, exported: true, typ: mapType$8, tag: ""}, {prop: "Simellas", name: "Simellas", anonymous: false, exported: true, typ: mapType$10, tag: ""}, {prop: "UnknownDig", name: "UnknownDig", anonymous: false, exported: true, typ: mapType, tag: ""}, {prop: "UnknownBurn", name: "UnknownBurn", anonymous: false, exported: true, typ: mapType, tag: ""}, {prop: "Resting", name: "Resting", anonymous: false, exported: true, typ: $Bool, tag: ""}, {prop: "Autoexploring", name: "Autoexploring", anonymous: false, exported: true, typ: $Bool, tag: ""}, {prop: "DijkstraMapRebuild", name: "DijkstraMapRebuild", anonymous: false, exported: true, typ: $Bool, tag: ""}, {prop: "AutoTarget", name: "AutoTarget", anonymous: false, exported: true, typ: ptrType$1, tag: ""}, {prop: "AutoDir", name: "AutoDir", anonymous: false, exported: true, typ: ptrType$11, tag: ""}, {prop: "AutoHalt", name: "AutoHalt", anonymous: false, exported: true, typ: $Bool, tag: ""}, {prop: "AutoNext", name: "AutoNext", anonymous: false, exported: true, typ: $Bool, tag: ""}, {prop: "ExclusionsMap", name: "ExclusionsMap", anonymous: false, exported: true, typ: mapType, tag: ""}, {prop: "Quit", name: "Quit", anonymous: false, exported: true, typ: $Bool, tag: ""}, {prop: "ui", name: "ui", anonymous: false, exported: false, typ: Renderer, tag: ""}, {prop: "Depth", name: "Depth", anonymous: false, exported: true, typ: $Int, tag: ""}, {prop: "Wizard", name: "Wizard", anonymous: false, exported: true, typ: $Bool, tag: ""}, {prop: "Log", name: "Log", anonymous: false, exported: true, typ: sliceType$14, tag: ""}, {prop: "LogIndex", name: "LogIndex", anonymous: false, exported: true, typ: $Int, tag: ""}, {prop: "LogNextTick", name: "LogNextTick", anonymous: false, exported: true, typ: $Int, tag: ""}, {prop: "InfoEntry", name: "InfoEntry", anonymous: false, exported: true, typ: $String, tag: ""}, {prop: "Story", name: "Story", anonymous: false, exported: true, typ: sliceType$3, tag: ""}, {prop: "Turn", name: "Turn", anonymous: false, exported: true, typ: $Int, tag: ""}, {prop: "EventIndex", name: "EventIndex", anonymous: false, exported: true, typ: $Int, tag: ""}, {prop: "Killed", name: "Killed", anonymous: false, exported: true, typ: $Int, tag: ""}, {prop: "KilledMons", name: "KilledMons", anonymous: false, exported: true, typ: mapType$11, tag: ""}, {prop: "Scumming", name: "Scumming", anonymous: false, exported: true, typ: $Int, tag: ""}, {prop: "Noise", name: "Noise", anonymous: false, exported: true, typ: mapType, tag: ""}, {prop: "Targeting", name: "Targeting", anonymous: false, exported: true, typ: ptrType$1, tag: ""}]);
	Renderer.init([{prop: "ChooseTarget", name: "ChooseTarget", pkg: "", typ: $funcType([ptrType$3, Targeter], [$error], false)}, {prop: "CriticalHPWarning", name: "CriticalHPWarning", pkg: "", typ: $funcType([ptrType$3], [], false)}, {prop: "Death", name: "Death", pkg: "", typ: $funcType([ptrType$3], [], false)}, {prop: "DrawDungeonView", name: "DrawDungeonView", pkg: "", typ: $funcType([ptrType$3, uiMode], [], false)}, {prop: "DrinkingPotionAnimation", name: "DrinkingPotionAnimation", pkg: "", typ: $funcType([ptrType$3], [], false)}, {prop: "ExploreStep", name: "ExploreStep", pkg: "", typ: $funcType([ptrType$3], [$Bool], false)}, {prop: "ExplosionAnimation", name: "ExplosionAnimation", pkg: "", typ: $funcType([ptrType$3, explosionStyle, position], [], false)}, {prop: "HandlePlayerTurn", name: "HandlePlayerTurn", pkg: "", typ: $funcType([ptrType$3, event], [$Bool], false)}, {prop: "HitAnimation", name: "HitAnimation", pkg: "", typ: $funcType([ptrType$3, position, $Bool], [], false)}, {prop: "LightningBoltAnimation", name: "LightningBoltAnimation", pkg: "", typ: $funcType([ptrType$3, sliceType$5], [], false)}, {prop: "MagicMappingAnimation", name: "MagicMappingAnimation", pkg: "", typ: $funcType([ptrType$3, sliceType$6], [], false)}, {prop: "ProjectileTrajectoryAnimation", name: "ProjectileTrajectoryAnimation", pkg: "", typ: $funcType([ptrType$3, sliceType$5, uicolor], [], false)}, {prop: "SwappingAnimation", name: "SwappingAnimation", pkg: "", typ: $funcType([ptrType$3, position, position], [], false)}, {prop: "TeleportAnimation", name: "TeleportAnimation", pkg: "", typ: $funcType([ptrType$3, position, position, $Bool], [], false)}, {prop: "ThrowAnimation", name: "ThrowAnimation", pkg: "", typ: $funcType([ptrType$3, sliceType$5, $Bool], [], false)}, {prop: "WallExplosionAnimation", name: "WallExplosionAnimation", pkg: "", typ: $funcType([ptrType$3, position], [], false)}, {prop: "WoundedAnimation", name: "WoundedAnimation", pkg: "", typ: $funcType([ptrType$3], [], false)}]);
	consumable.init([{prop: "Desc", name: "Desc", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Int", name: "Int", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Letter", name: "Letter", pkg: "", typ: $funcType([], [$Int32], false)}, {prop: "Plural", name: "Plural", pkg: "", typ: $funcType([], [$String], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Use", name: "Use", pkg: "", typ: $funcType([ptrType$3, event], [$error], false)}]);
	collectable.init("", [{prop: "Consumable", name: "Consumable", anonymous: false, exported: true, typ: consumable, tag: ""}, {prop: "Quantity", name: "Quantity", anonymous: false, exported: true, typ: $Int, tag: ""}]);
	collectData.init("github.com/anaseto/boohu", [{prop: "rarity", name: "rarity", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "quantity", name: "quantity", anonymous: false, exported: false, typ: $Int, tag: ""}]);
	equipable.init([{prop: "Desc", name: "Desc", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Equip", name: "Equip", pkg: "", typ: $funcType([ptrType$3], [], false)}, {prop: "Letter", name: "Letter", pkg: "", typ: $funcType([], [$Int32], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}]);
	equipableData.init("github.com/anaseto/boohu", [{prop: "rarity", name: "rarity", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "minDepth", name: "minDepth", anonymous: false, exported: false, typ: $Int, tag: ""}]);
	UICell.init("github.com/anaseto/boohu", [{prop: "fg", name: "fg", anonymous: false, exported: false, typ: uicolor, tag: ""}, {prop: "bg", name: "bg", anonymous: false, exported: false, typ: uicolor, tag: ""}, {prop: "r", name: "r", anonymous: false, exported: false, typ: $Int32, tag: ""}]);
	jsInput.init("github.com/anaseto/boohu", [{prop: "key", name: "key", anonymous: false, exported: false, typ: $String, tag: ""}, {prop: "mouse", name: "mouse", anonymous: false, exported: false, typ: $Bool, tag: ""}, {prop: "mouseX", name: "mouseX", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "mouseY", name: "mouseY", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "button", name: "button", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "interrupt", name: "interrupt", anonymous: false, exported: false, typ: $Bool, tag: ""}]);
	termui.init("github.com/anaseto/boohu", [{prop: "cells", name: "cells", anonymous: false, exported: false, typ: sliceType$15, tag: ""}, {prop: "backBuffer", name: "backBuffer", anonymous: false, exported: false, typ: sliceType$15, tag: ""}, {prop: "cursor", name: "cursor", anonymous: false, exported: false, typ: position, tag: ""}, {prop: "display", name: "display", anonymous: false, exported: false, typ: ptrType$15, tag: ""}, {prop: "cache", name: "cache", anonymous: false, exported: false, typ: mapType$12, tag: ""}, {prop: "ctx", name: "ctx", anonymous: false, exported: false, typ: ptrType$15, tag: ""}, {prop: "width", name: "width", anonymous: false, exported: false, typ: $Int, tag: ""}]);
	logEntry.init("", [{prop: "Text", name: "Text", anonymous: false, exported: true, typ: $String, tag: ""}, {prop: "Index", name: "Index", anonymous: false, exported: true, typ: $Int, tag: ""}, {prop: "Tick", name: "Tick", anonymous: false, exported: true, typ: $Bool, tag: ""}, {prop: "Style", name: "Style", anonymous: false, exported: true, typ: logStyle, tag: ""}]);
	raynode.init("", [{prop: "Cost", name: "Cost", anonymous: false, exported: true, typ: $Int, tag: ""}]);
	rayMap.init(position, ptrType$16);
	monsterData.init("github.com/anaseto/boohu", [{prop: "movementDelay", name: "movementDelay", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "baseAttack", name: "baseAttack", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "attackDelay", name: "attackDelay", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "maxHP", name: "maxHP", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "accuracy", name: "accuracy", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "armor", name: "armor", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "evasion", name: "evasion", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "letter", name: "letter", anonymous: false, exported: false, typ: $Int32, tag: ""}, {prop: "name", name: "name", anonymous: false, exported: false, typ: $String, tag: ""}, {prop: "dangerousness", name: "dangerousness", anonymous: false, exported: false, typ: $Int, tag: ""}]);
	monsInterval.init("github.com/anaseto/boohu", [{prop: "min", name: "min", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "max", name: "max", anonymous: false, exported: false, typ: $Int, tag: ""}]);
	monsterBandData.init("github.com/anaseto/boohu", [{prop: "distribution", name: "distribution", anonymous: false, exported: false, typ: mapType$13, tag: ""}, {prop: "rarity", name: "rarity", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "minDepth", name: "minDepth", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "maxDepth", name: "maxDepth", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "band", name: "band", anonymous: false, exported: false, typ: $Bool, tag: ""}, {prop: "monster", name: "monster", anonymous: false, exported: false, typ: monsterKind, tag: ""}, {prop: "unique", name: "unique", anonymous: false, exported: false, typ: $Bool, tag: ""}]);
	monster.init("", [{prop: "Kind", name: "Kind", anonymous: false, exported: true, typ: monsterKind, tag: ""}, {prop: "Band", name: "Band", anonymous: false, exported: true, typ: $Int, tag: ""}, {prop: "Attack", name: "Attack", anonymous: false, exported: true, typ: $Int, tag: ""}, {prop: "Accuracy", name: "Accuracy", anonymous: false, exported: true, typ: $Int, tag: ""}, {prop: "Armor", name: "Armor", anonymous: false, exported: true, typ: $Int, tag: ""}, {prop: "Evasion", name: "Evasion", anonymous: false, exported: true, typ: $Int, tag: ""}, {prop: "HPmax", name: "HPmax", anonymous: false, exported: true, typ: $Int, tag: ""}, {prop: "HP", name: "HP", anonymous: false, exported: true, typ: $Int, tag: ""}, {prop: "Pos", name: "Pos", anonymous: false, exported: true, typ: position, tag: ""}, {prop: "State", name: "State", anonymous: false, exported: true, typ: monsterState, tag: ""}, {prop: "Statuses", name: "Statuses", anonymous: false, exported: true, typ: mapType$14, tag: ""}, {prop: "Target", name: "Target", anonymous: false, exported: true, typ: position, tag: ""}, {prop: "Path", name: "Path", anonymous: false, exported: true, typ: sliceType$5, tag: ""}, {prop: "Obstructing", name: "Obstructing", anonymous: false, exported: true, typ: $Bool, tag: ""}, {prop: "FireReady", name: "FireReady", anonymous: false, exported: true, typ: $Bool, tag: ""}, {prop: "Seen", name: "Seen", anonymous: false, exported: true, typ: $Bool, tag: ""}]);
	dungeonPath.init("github.com/anaseto/boohu", [{prop: "dungeon", name: "dungeon", anonymous: false, exported: false, typ: ptrType$7, tag: ""}, {prop: "neighbors", name: "neighbors", anonymous: false, exported: false, typ: arrayType$1, tag: ""}]);
	playerPath.init("github.com/anaseto/boohu", [{prop: "game", name: "game", anonymous: false, exported: false, typ: ptrType$3, tag: ""}, {prop: "neighbors", name: "neighbors", anonymous: false, exported: false, typ: arrayType$1, tag: ""}]);
	noisePath.init("github.com/anaseto/boohu", [{prop: "game", name: "game", anonymous: false, exported: false, typ: ptrType$3, tag: ""}, {prop: "neighbors", name: "neighbors", anonymous: false, exported: false, typ: arrayType$1, tag: ""}]);
	normalPath.init("github.com/anaseto/boohu", [{prop: "game", name: "game", anonymous: false, exported: false, typ: ptrType$3, tag: ""}, {prop: "neighbors", name: "neighbors", anonymous: false, exported: false, typ: arrayType$1, tag: ""}]);
	autoexplorePath.init("github.com/anaseto/boohu", [{prop: "game", name: "game", anonymous: false, exported: false, typ: ptrType$3, tag: ""}, {prop: "neighbors", name: "neighbors", anonymous: false, exported: false, typ: arrayType$1, tag: ""}]);
	monPath.init("github.com/anaseto/boohu", [{prop: "game", name: "game", anonymous: false, exported: false, typ: ptrType$3, tag: ""}, {prop: "monster", name: "monster", anonymous: false, exported: false, typ: ptrType$9, tag: ""}, {prop: "wall", name: "wall", anonymous: false, exported: false, typ: $Bool, tag: ""}, {prop: "neighbors", name: "neighbors", anonymous: false, exported: false, typ: arrayType$1, tag: ""}]);
	posCost.init("github.com/anaseto/boohu", [{prop: "pos", name: "pos", anonymous: false, exported: false, typ: position, tag: ""}, {prop: "cost", name: "cost", anonymous: false, exported: false, typ: $Int, tag: ""}]);
	posSlice.init(posCost);
	player.init("", [{prop: "LOS", name: "LOS", anonymous: false, exported: true, typ: mapType, tag: ""}, {prop: "Rays", name: "Rays", anonymous: false, exported: true, typ: rayMap, tag: ""}, {prop: "Pos", name: "Pos", anonymous: false, exported: true, typ: position, tag: ""}, {prop: "HP", name: "HP", anonymous: false, exported: true, typ: $Int, tag: ""}, {prop: "MP", name: "MP", anonymous: false, exported: true, typ: $Int, tag: ""}, {prop: "Consumables", name: "Consumables", anonymous: false, exported: true, typ: mapType$15, tag: ""}, {prop: "Simellas", name: "Simellas", anonymous: false, exported: true, typ: $Int, tag: ""}, {prop: "Target", name: "Target", anonymous: false, exported: true, typ: position, tag: ""}, {prop: "Statuses", name: "Statuses", anonymous: false, exported: true, typ: mapType$16, tag: ""}, {prop: "Armour", name: "Armour", anonymous: false, exported: true, typ: armour, tag: ""}, {prop: "Weapon", name: "Weapon", anonymous: false, exported: true, typ: weapon, tag: ""}, {prop: "Shield", name: "Shield", anonymous: false, exported: true, typ: shield, tag: ""}, {prop: "Aptitudes", name: "Aptitudes", anonymous: false, exported: true, typ: mapType$17, tag: ""}, {prop: "Rods", name: "Rods", anonymous: false, exported: true, typ: mapType$18, tag: ""}]);
	position.init("", [{prop: "X", name: "X", anonymous: false, exported: true, typ: $Int, tag: ""}, {prop: "Y", name: "Y", anonymous: false, exported: true, typ: $Int, tag: ""}]);
	rodProps.init("", [{prop: "Charge", name: "Charge", anonymous: false, exported: true, typ: $Int, tag: ""}]);
	Targeter.init([{prop: "Action", name: "Action", pkg: "", typ: $funcType([ptrType$3, position], [$error], false)}, {prop: "ComputeHighlight", name: "ComputeHighlight", pkg: "", typ: $funcType([ptrType$3, position], [], false)}, {prop: "Done", name: "Done", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Reachable", name: "Reachable", pkg: "", typ: $funcType([ptrType$3, position], [$Bool], false)}]);
	examiner.init("github.com/anaseto/boohu", [{prop: "done", name: "done", anonymous: false, exported: false, typ: $Bool, tag: ""}, {prop: "stairs", name: "stairs", anonymous: false, exported: false, typ: $Bool, tag: ""}]);
	chooser.init("github.com/anaseto/boohu", [{prop: "done", name: "done", anonymous: false, exported: false, typ: $Bool, tag: ""}, {prop: "area", name: "area", anonymous: false, exported: false, typ: $Bool, tag: ""}, {prop: "minDist", name: "minDist", anonymous: false, exported: false, typ: $Bool, tag: ""}, {prop: "needsFreeWay", name: "needsFreeWay", anonymous: false, exported: false, typ: $Bool, tag: ""}, {prop: "free", name: "free", anonymous: false, exported: false, typ: $Bool, tag: ""}, {prop: "flammable", name: "flammable", anonymous: false, exported: false, typ: $Bool, tag: ""}, {prop: "wall", name: "wall", anonymous: false, exported: false, typ: $Bool, tag: ""}]);
	wallChooser.init("github.com/anaseto/boohu", [{prop: "done", name: "done", anonymous: false, exported: false, typ: $Bool, tag: ""}, {prop: "minDist", name: "minDist", anonymous: false, exported: false, typ: $Bool, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = bytes.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = heap.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = rand.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = base64.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = gob.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = errors.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = fmt.$init(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = js.$init(); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = log.$init(); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = big.$init(); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = filepath.$init(); /* */ $s = 11; case 11: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = sort.$init(); /* */ $s = 12; case 12: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = strings.$init(); /* */ $s = 13; case 13: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = time.$init(); /* */ $s = 14; case 14: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = unicode.$init(); /* */ $s = 15; case 15: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = utf8.$init(); /* */ $s = 16; case 16: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		nodeCache = sliceType.nil;
		$pkg.DijkstraMapCache = arrayType.zero();
		$pkg.ColorBg = 0;
		$pkg.ColorBgBorder = 0;
		$pkg.ColorBgLOSalt = 0;
		$pkg.ColorBgDark = 0;
		$pkg.ColorBgLOS = 0;
		$pkg.ColorFg = 0;
		$pkg.ColorFgAnimationHit = 0;
		$pkg.ColorFgCollectable = 0;
		$pkg.ColorFgConfusedMonster = 0;
		$pkg.ColorFgDark = 0;
		$pkg.ColorFgExcluded = 0;
		$pkg.ColorFgExplosionEnd = 0;
		$pkg.ColorFgExplosionStart = 0;
		$pkg.ColorFgExplosionWallEnd = 0;
		$pkg.ColorFgExplosionWallStart = 0;
		$pkg.ColorFgHPcritical = 0;
		$pkg.ColorFgHPok = 0;
		$pkg.ColorFgHPwounded = 0;
		$pkg.ColorFgLOS = 0;
		$pkg.ColorFgMPcritical = 0;
		$pkg.ColorFgMPok = 0;
		$pkg.ColorFgMPpartial = 0;
		$pkg.ColorFgMagicPlace = 0;
		$pkg.ColorFgMonster = 0;
		$pkg.ColorFgPlace = 0;
		$pkg.ColorFgPlayer = 0;
		$pkg.ColorFgProjectile = 0;
		$pkg.ColorFgSimellas = 0;
		$pkg.ColorFgSleepingMonster = 0;
		$pkg.ColorFgStatusBad = 0;
		$pkg.ColorFgStatusGood = 0;
		$pkg.ColorFgStatusOther = 0;
		$pkg.ColorFgTargetMode = 0;
		$pkg.ColorFgWanderingMonster = 0;
		$pkg.CustomKeys = false;
		runeNormalKeyActions = false;
		runeTargetingKeyActions = false;
		$pkg.CenteredCamera = false;
		$pkg.SaveError = "";
		ch = $chanNil;
		wants = $chanNil;
		interrupt = $chanNil;
		$pkg.ColorBase03 = 234;
		$pkg.ColorBase02 = 235;
		$pkg.ColorBase01 = 240;
		$pkg.ColorBase00 = 241;
		$pkg.ColorBase0 = 244;
		$pkg.ColorBase1 = 245;
		$pkg.ColorBase2 = 254;
		$pkg.ColorBase3 = 230;
		$pkg.ColorYellow = 136;
		$pkg.ColorOrange = 166;
		$pkg.ColorRed = 160;
		$pkg.ColorMagenta = 125;
		$pkg.ColorViolet = 61;
		$pkg.ColorBlue = 33;
		$pkg.ColorCyan = 37;
		$pkg.ColorGreen = 64;
		configurableKeyActions = $toNativeArray($kindInt, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 35, 36, 37, 38, 39, 40, 43]);
		menuActions = new sliceType$1([21, 17, 25, 24, 26, 19, 23, 27, 28, 30, 31, 32]);
		menuTargetActions = new sliceType$1([21, 17, 25, 24, 26, 23, 40, 38, 27, 28, 30]);
		$pkg.Version = "v0.8-dev";
		$pkg.ConsumablesCollectData = $makeMap(consumable.keyFor, [{ k: new potion(0), v: new collectData.ptr(6, 1) }, { k: new potion(1), v: new collectData.ptr(4, 1) }, { k: new potion(2), v: new collectData.ptr(5, 1) }, { k: new potion(4), v: new collectData.ptr(6, 1) }, { k: new potion(3), v: new collectData.ptr(15, 1) }, { k: new potion(5), v: new collectData.ptr(8, 1) }, { k: new potion(6), v: new collectData.ptr(15, 1) }, { k: new potion(7), v: new collectData.ptr(10, 1) }, { k: new potion(8), v: new collectData.ptr(12, 1) }, { k: new potion(9), v: new collectData.ptr(12, 1) }, { k: new potion(10), v: new collectData.ptr(12, 1) }, { k: new projectile(0), v: new collectData.ptr(3, 2) }, { k: new projectile(1), v: new collectData.ptr(8, 1) }]);
		$pkg.EquipablesRepartitionData = $makeMap(equipable.keyFor, [{ k: new armour(0), v: new equipableData.ptr(5, 0) }, { k: new armour(1), v: new equipableData.ptr(5, 0) }, { k: new armour(2), v: new equipableData.ptr(10, 3) }, { k: new armour(3), v: new equipableData.ptr(15, 6) }, { k: new shield(1), v: new equipableData.ptr(10, 2) }, { k: new shield(2), v: new equipableData.ptr(15, 5) }]);
		$pkg.MonsData = new sliceType$2([new monsterData.ptr(10, 7, 10, 15, 14, 0, 12, 103, "goblin", 2), new monsterData.ptr(10, 15, 12, 28, 13, 0, 8, 79, "ogre", 6), new monsterData.ptr(10, 12, 12, 28, 13, 0, 8, 67, "cyclop", 9), new monsterData.ptr(12, 9, 10, 25, 13, 0, 10, 119, "worm", 3), new monsterData.ptr(12, 10, 10, 30, 13, 0, 10, 122, "brizzia", 7), new monsterData.ptr(8, 9, 10, 15, 14, 0, 12, 104, "hound", 4), new monsterData.ptr(10, 11, 10, 21, 14, 0, 10, 121, "yack", 6), new monsterData.ptr(6, 10, 10, 11, 15, 0, 15, 66, "giant bee", 6), new monsterData.ptr(10, 11, 10, 22, 15, 3, 12, 71, "goblin warrior", 8), new monsterData.ptr(10, 9, 10, 45, 13, 0, 6, 72, "hydra", 15), new monsterData.ptr(10, 12, 10, 25, 15, 4, 12, 83, "skeleton warrior", 10), new monsterData.ptr(8, 7, 10, 13, 17, 0, 15, 115, "spider", 6), new monsterData.ptr(10, 10, 10, 20, 15, 0, 12, 70, "blinking frog", 7), new monsterData.ptr(10, 10, 10, 23, 15, 3, 12, 76, "lich", 17), new monsterData.ptr(10, 14, 10, 40, 14, 6, 8, 68, "earth dragon", 20), new monsterData.ptr(10, 9, 10, 18, 15, 0, 17, 109, "mirror specter", 11), new monsterData.ptr(10, 9, 10, 19, 15, 0, 8, 97, "acid mound", 7), new monsterData.ptr(10, 4, 10, 1, 14, 0, 10, 110, "explosive nadre", 5), new monsterData.ptr(10, 12, 12, 30, 15, 0, 4, 80, "satowalga plant", 7), new monsterData.ptr(10, 0, 10, 99, 18, 10, 15, 77, "Marevor Helith", 18)]);
		monsDesc = new sliceType$3(["Goblins are little humanoid creatures. They often appear in group.", "Ogres are big clunky humanoids that can hit really hard.", "Cyclops are very similar to ogres, but they also like to throw rocks at their foes (for up to 15 damage), sometimes confusing them.", "Worms are ugly slow moving creatures, but surprisingly hardy at times.", "Brizzias are big slow moving biped creatures. They are quite hardy, and when hurt they can cause nausea, impeding the use of potions.", "Hounds are fast moving carnivore quadrupeds. They sometimes attack in group.", "Yacks are quite large herbivorous quadrupeds. They tend to form large groups. They can push you one cell away.", "Giant bees are fragile, but extremely fast moving creatures. Their bite can sometimes enrage you.", "Goblin warriors are goblins that learned to fight, and got equipped with a leather armour. They can throw javelins.", "Hydras are enormous creatures with four heads that can hit you each at once.", "Skeleton warriors are good fighters, and are equipped with a chain mail.", "Spiders are fast moving fragile creatures, whose bite can confuse you.", "Blinking frogs are big frog-like unstable creatures, whose bite can make you blink away.", "Liches are non-living mages wearing a leather armour. They can throw a bolt of torment at you, halving your HP.", "Earth dragons are big and hardy creatures that wander in the Underground. It is said they are to credit for many tunnels.", "Mirror specters are very insubstantial creatures. They can absorb your mana.", "Acid mounds are acidic creatures. They can temporally corrode your equipment.", "Explosive nadres are very frail creatures that explode upon dying, halving HP of any adjacent creatures and occasionally destroying walls.", "Satowalga Plants are static bushes that throw acidic projectiles at you, sometimes corroding and confusing you.", "Marevor Helith is an ancient undead nakrus very fond of teleporting people away."]);
		$pkg.MonsBands = new sliceType$4([new monsterBandData.ptr(false, 10, 0, 5, false, 0, false), new monsterBandData.ptr(false, 15, 2, 11, false, 1, false), new monsterBandData.ptr(false, 10, 0, 6, false, 3, false), new monsterBandData.ptr(false, 90, 7, 13, false, 4, false), new monsterBandData.ptr(false, 20, 1, 8, false, 5, false), new monsterBandData.ptr(false, 45, 8, 13, false, 9, false), new monsterBandData.ptr(false, 20, 3, 13, false, 11, false), new monsterBandData.ptr(false, 50, 5, 13, false, 12, false), new monsterBandData.ptr(false, 45, 5, 13, false, 2, false), new monsterBandData.ptr(false, 70, 9, 13, false, 13, false), new monsterBandData.ptr(false, 80, 10, 13, false, 14, false), new monsterBandData.ptr(false, 70, 6, 13, false, 15, false), new monsterBandData.ptr(false, 70, 6, 13, false, 16, false), new monsterBandData.ptr(false, 55, 4, 7, false, 17, false), new monsterBandData.ptr(false, 80, 5, 13, false, 18, false), new monsterBandData.ptr($makeMap(monsterKind.keyFor, [{ k: 0, v: new monsInterval.ptr(2, 4) }]), 10, 1, 5, true, 0, false), new monsterBandData.ptr($makeMap(monsterKind.keyFor, [{ k: 0, v: new monsInterval.ptr(3, 5) }, { k: 8, v: new monsInterval.ptr(0, 2) }]), 12, 5, 9, true, 0, false), new monsterBandData.ptr($makeMap(monsterKind.keyFor, [{ k: 0, v: new monsInterval.ptr(0, 1) }, { k: 8, v: new monsInterval.ptr(2, 4) }]), 45, 10, 13, true, 0, false), new monsterBandData.ptr($makeMap(monsterKind.keyFor, [{ k: 5, v: new monsInterval.ptr(2, 3) }]), 20, 2, 10, true, 0, false), new monsterBandData.ptr($makeMap(monsterKind.keyFor, [{ k: 6, v: new monsInterval.ptr(2, 5) }]), 15, 5, 11, true, 0, false), new monsterBandData.ptr($makeMap(monsterKind.keyFor, [{ k: 11, v: new monsInterval.ptr(2, 4) }]), 25, 5, 13, true, 0, false), new monsterBandData.ptr($makeMap(monsterKind.keyFor, [{ k: 18, v: new monsInterval.ptr(2, 2) }]), 100, 7, 13, true, 0, false), new monsterBandData.ptr($makeMap(monsterKind.keyFor, [{ k: 12, v: new monsInterval.ptr(2, 4) }]), 70, 9, 13, true, 0, false), new monsterBandData.ptr($makeMap(monsterKind.keyFor, [{ k: 12, v: new monsInterval.ptr(0, 1) }, { k: 17, v: new monsInterval.ptr(1, 2) }, { k: 7, v: new monsInterval.ptr(1, 1) }, { k: 4, v: new monsInterval.ptr(0, 1) }]), 65, 8, 13, true, 0, false), new monsterBandData.ptr($makeMap(monsterKind.keyFor, [{ k: 7, v: new monsInterval.ptr(2, 5) }]), 30, 6, 13, true, 0, false), new monsterBandData.ptr($makeMap(monsterKind.keyFor, [{ k: 10, v: new monsInterval.ptr(2, 3) }]), 45, 8, 13, true, 0, false), new monsterBandData.ptr($makeMap(monsterKind.keyFor, [{ k: 3, v: new monsInterval.ptr(3, 4) }, { k: 11, v: new monsInterval.ptr(1, 1) }]), 50, 4, 4, true, 0, true), new monsterBandData.ptr($makeMap(monsterKind.keyFor, [{ k: 0, v: new monsInterval.ptr(3, 5) }, { k: 5, v: new monsInterval.ptr(1, 2) }]), 30, 5, 5, true, 0, true), new monsterBandData.ptr($makeMap(monsterKind.keyFor, [{ k: 12, v: new monsInterval.ptr(2, 3) }]), 60, 6, 6, true, 0, true), new monsterBandData.ptr($makeMap(monsterKind.keyFor, [{ k: 1, v: new monsInterval.ptr(2, 3) }, { k: 2, v: new monsInterval.ptr(1, 1) }]), 35, 7, 7, true, 0, true), new monsterBandData.ptr($makeMap(monsterKind.keyFor, [{ k: 0, v: new monsInterval.ptr(2, 3) }, { k: 8, v: new monsInterval.ptr(2, 2) }, { k: 5, v: new monsInterval.ptr(1, 2) }]), 30, 8, 8, true, 0, true), new monsterBandData.ptr($makeMap(monsterKind.keyFor, [{ k: 6, v: new monsInterval.ptr(3, 4) }, { k: 7, v: new monsInterval.ptr(2, 2) }]), 30, 9, 9, true, 0, true), new monsterBandData.ptr($makeMap(monsterKind.keyFor, [{ k: 9, v: new monsInterval.ptr(2, 3) }, { k: 11, v: new monsInterval.ptr(1, 2) }]), 40, 10, 10, true, 0, true), new monsterBandData.ptr($makeMap(monsterKind.keyFor, [{ k: 17, v: new monsInterval.ptr(2, 3) }, { k: 4, v: new monsInterval.ptr(1, 2) }]), 55, 10, 10, true, 0, true), new monsterBandData.ptr($makeMap(monsterKind.keyFor, [{ k: 10, v: new monsInterval.ptr(2, 2) }, { k: 13, v: new monsInterval.ptr(1, 1) }, { k: 15, v: new monsInterval.ptr(0, 1) }]), 50, 11, 11, true, 0, true), new monsterBandData.ptr($makeMap(monsterKind.keyFor, [{ k: 4, v: new monsInterval.ptr(3, 4) }]), 80, 11, 11, true, 0, true), new monsterBandData.ptr($makeMap(monsterKind.keyFor, [{ k: 16, v: new monsInterval.ptr(3, 4) }]), 80, 12, 12, true, 0, true), new monsterBandData.ptr($makeMap(monsterKind.keyFor, [{ k: 18, v: new monsInterval.ptr(3, 3) }]), 80, 12, 12, true, 0, true), new monsterBandData.ptr($makeMap(monsterKind.keyFor, [{ k: 14, v: new monsInterval.ptr(2, 2) }]), 60, 12, 12, true, 0, true), new monsterBandData.ptr($makeMap(monsterKind.keyFor, [{ k: 19, v: new monsInterval.ptr(1, 1) }, { k: 13, v: new monsInterval.ptr(0, 1) }]), 100, 7, 12, true, 0, true)]);
		init();
		$r = init$1(); /* */ $s = 17; case 17: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		init$2();
		/* */ if ($pkg === $mainPkg) { $s = 18; continue; }
		/* */ $s = 19; continue;
		/* if ($pkg === $mainPkg) { */ case 18:
			$r = main(); /* */ $s = 20; case 20: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$mainFinished = true;
		/* } */ case 19:
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$synthesizeMethods();
var $mainPkg = $packages["github.com/anaseto/boohu"];
$packages["runtime"].$init();
$go($mainPkg.$init, []);
$flushConsole();

}).call(this);
//# sourceMappingURL=boohu.js.map
